#define POST_ACTOR_COMPILER 1
#line 1 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
/*
 * FileBackupAgent.actor.cpp
 *
 * This source file is part of the FoundationDB open source project
 *
 * Copyright 2013-2022 Apple Inc. and the FoundationDB project authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "fmt/format.h"
#include "fdbclient/BackupAgent.actor.h"
#include "fdbclient/BackupContainer.h"
#include "fdbclient/DatabaseContext.h"
#include "fdbclient/Knobs.h"
#include "fdbclient/ManagementAPI.actor.h"
#include "fdbclient/RestoreInterface.h"
#include "fdbclient/Status.h"
#include "fdbclient/SystemData.h"
#include "fdbclient/KeyBackedTypes.h"
#include "fdbclient/JsonBuilder.h"

#include <cinttypes>
#include <ctime>
#include <climits>
#include "fdbrpc/IAsyncFile.h"
#include "flow/genericactors.actor.h"
#include "flow/Hash3.h"
#include <numeric>
#include <boost/algorithm/string/split.hpp>
#include <boost/algorithm/string/classification.hpp>
#include <algorithm>

#include "flow/actorcompiler.h" // This must be the last #include.

FDB_DEFINE_BOOLEAN_PARAM(IncrementalBackupOnly);
FDB_DEFINE_BOOLEAN_PARAM(OnlyApplyMutationLogs);

Optional<std::string> fileBackupAgentProxy = Optional<std::string>();

#define SevFRTestInfo SevVerbose
// #define SevFRTestInfo SevInfo

static std::string boolToYesOrNo(bool val) {
	return val ? std::string("Yes") : std::string("No");
}

static std::string versionToString(Optional<Version> version) {
	if (version.present())
		return std::to_string(version.get());
	else
		return "N/A";
}

static std::string timeStampToString(Optional<int64_t> epochs) {
	if (!epochs.present())
		return "N/A";
	return BackupAgentBase::formatTime(epochs.get());
}

static Future<Optional<int64_t>> getTimestampFromVersion(Optional<Version> ver,
                                                         Reference<ReadYourWritesTransaction> tr) {
	if (!ver.present())
		return Optional<int64_t>();

	return timeKeeperEpochsFromVersion(ver.get(), tr);
}

// Time format :
// <= 59 seconds
// <= 59.99 minutes
// <= 23.99 hours
// N.NN days
std::string secondsToTimeFormat(int64_t seconds) {
	if (seconds >= 86400)
		return format("%.2f day(s)", seconds / 86400.0);
	else if (seconds >= 3600)
		return format("%.2f hour(s)", seconds / 3600.0);
	else if (seconds >= 60)
		return format("%.2f minute(s)", seconds / 60.0);
	else
		return format("%lld second(s)", seconds);
}

const Key FileBackupAgent::keyLastRestorable = LiteralStringRef("last_restorable");

// For convenience
typedef FileBackupAgent::ERestoreState ERestoreState;

StringRef FileBackupAgent::restoreStateText(ERestoreState id) {
	switch (id) {
	case ERestoreState::UNITIALIZED:
		return LiteralStringRef("unitialized");
	case ERestoreState::QUEUED:
		return LiteralStringRef("queued");
	case ERestoreState::STARTING:
		return LiteralStringRef("starting");
	case ERestoreState::RUNNING:
		return LiteralStringRef("running");
	case ERestoreState::COMPLETED:
		return LiteralStringRef("completed");
	case ERestoreState::ABORTED:
		return LiteralStringRef("aborted");
	default:
		return LiteralStringRef("Unknown");
	}
}

Key FileBackupAgent::getPauseKey() {
	FileBackupAgent backupAgent;
	return backupAgent.taskBucket->getPauseKey();
}

															#line 126 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via getAll_impl()
															#line 124 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class TagUidMap_GetAll_implActor>
															#line 124 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class TagUidMap_GetAll_implActorState {
															#line 132 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 124 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	TagUidMap_GetAll_implActorState(TagUidMap* const& tagsMap,Reference<ReadYourWritesTransaction> const& tr,Snapshot const& snapshot) 
															#line 124 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 124 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : tagsMap(tagsMap),
															#line 124 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   tr(tr),
															#line 124 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   snapshot(snapshot),
															#line 127 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   prefix(tagsMap->prefix)
															#line 145 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("getAll_impl", reinterpret_cast<unsigned long>(this));

	}
	~TagUidMap_GetAll_implActorState() 
	{
		fdb_probe_actor_destroy("getAll_impl", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 128 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<TagMap::PairsType> __when_expr_0 = tagsMap->getRange(tr, std::string(), {}, 1e6, snapshot);
															#line 128 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<TagUidMap_GetAll_implActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 162 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<TagUidMap_GetAll_implActor*>(this)->actor_wait_state = 1;
															#line 128 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< TagUidMap_GetAll_implActor, 0, TagMap::PairsType >*>(static_cast<TagUidMap_GetAll_implActor*>(this)));
															#line 167 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~TagUidMap_GetAll_implActorState();
		static_cast<TagUidMap_GetAll_implActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(TagMap::PairsType const& tagPairs,int loopDepth) 
	{
															#line 129 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		std::vector<KeyBackedTag> results;
															#line 130 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		for( auto& p : tagPairs ) {
															#line 131 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			results.push_back(KeyBackedTag(p.first, prefix));
															#line 194 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 132 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<TagUidMap_GetAll_implActor*>(this)->SAV<std::vector<KeyBackedTag>>::futures) { (void)(results); this->~TagUidMap_GetAll_implActorState(); static_cast<TagUidMap_GetAll_implActor*>(this)->destroy(); return 0; }
															#line 198 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<TagUidMap_GetAll_implActor*>(this)->SAV< std::vector<KeyBackedTag> >::value()) std::vector<KeyBackedTag>(results);
		this->~TagUidMap_GetAll_implActorState();
		static_cast<TagUidMap_GetAll_implActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1(TagMap::PairsType && tagPairs,int loopDepth) 
	{
															#line 129 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		std::vector<KeyBackedTag> results;
															#line 130 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		for( auto& p : tagPairs ) {
															#line 131 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			results.push_back(KeyBackedTag(p.first, prefix));
															#line 214 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 132 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<TagUidMap_GetAll_implActor*>(this)->SAV<std::vector<KeyBackedTag>>::futures) { (void)(results); this->~TagUidMap_GetAll_implActorState(); static_cast<TagUidMap_GetAll_implActor*>(this)->destroy(); return 0; }
															#line 218 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<TagUidMap_GetAll_implActor*>(this)->SAV< std::vector<KeyBackedTag> >::value()) std::vector<KeyBackedTag>(results);
		this->~TagUidMap_GetAll_implActorState();
		static_cast<TagUidMap_GetAll_implActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1when1(TagMap::PairsType const& tagPairs,int loopDepth) 
	{
		loopDepth = a_body1cont1(tagPairs, loopDepth);

		return loopDepth;
	}
	int a_body1when1(TagMap::PairsType && tagPairs,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(tagPairs), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<TagUidMap_GetAll_implActor*>(this)->actor_wait_state > 0) static_cast<TagUidMap_GetAll_implActor*>(this)->actor_wait_state = 0;
		static_cast<TagUidMap_GetAll_implActor*>(this)->ActorCallback< TagUidMap_GetAll_implActor, 0, TagMap::PairsType >::remove();

	}
	void a_callback_fire(ActorCallback< TagUidMap_GetAll_implActor, 0, TagMap::PairsType >*,TagMap::PairsType const& value) 
	{
		fdb_probe_actor_enter("getAll_impl", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getAll_impl", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< TagUidMap_GetAll_implActor, 0, TagMap::PairsType >*,TagMap::PairsType && value) 
	{
		fdb_probe_actor_enter("getAll_impl", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getAll_impl", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< TagUidMap_GetAll_implActor, 0, TagMap::PairsType >*,Error err) 
	{
		fdb_probe_actor_enter("getAll_impl", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getAll_impl", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 124 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	TagUidMap* tagsMap;
															#line 124 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 124 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Snapshot snapshot;
															#line 127 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Key prefix;
															#line 297 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via getAll_impl()
															#line 124 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class TagUidMap_GetAll_implActor final : public Actor<std::vector<KeyBackedTag>>, public ActorCallback< TagUidMap_GetAll_implActor, 0, TagMap::PairsType >, public FastAllocated<TagUidMap_GetAll_implActor>, public TagUidMap_GetAll_implActorState<TagUidMap_GetAll_implActor> {
															#line 302 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<TagUidMap_GetAll_implActor>::operator new;
	using FastAllocated<TagUidMap_GetAll_implActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<std::vector<KeyBackedTag>>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< TagUidMap_GetAll_implActor, 0, TagMap::PairsType >;
															#line 124 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	TagUidMap_GetAll_implActor(TagUidMap* const& tagsMap,Reference<ReadYourWritesTransaction> const& tr,Snapshot const& snapshot) 
															#line 313 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<std::vector<KeyBackedTag>>(),
		   TagUidMap_GetAll_implActorState<TagUidMap_GetAll_implActor>(tagsMap, tr, snapshot)
	{
		fdb_probe_actor_enter("getAll_impl", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("getAll_impl");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("getAll_impl", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< TagUidMap_GetAll_implActor, 0, TagMap::PairsType >*)0, actor_cancelled()); break;
		}

	}
};
															#line 124 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] Future<std::vector<KeyBackedTag>> TagUidMap::getAll_impl( TagUidMap* const& tagsMap, Reference<ReadYourWritesTransaction> const& tr, Snapshot const& snapshot ) {
															#line 124 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<std::vector<KeyBackedTag>>(new TagUidMap_GetAll_implActor(tagsMap, tr, snapshot));
															#line 340 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 134 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

KeyBackedTag::KeyBackedTag(std::string tagName, StringRef tagMapPrefix)
  : KeyBackedProperty<UidAndAbortedFlagT>(TagUidMap(tagMapPrefix).getProperty(tagName)), tagName(tagName),
    tagMapPrefix(tagMapPrefix) {}

class RestoreConfig : public KeyBackedConfig {
public:
	RestoreConfig(UID uid = UID()) : KeyBackedConfig(fileRestorePrefixRange.begin, uid) {}
	RestoreConfig(Reference<Task> task) : KeyBackedConfig(fileRestorePrefixRange.begin, task) {}

	KeyBackedProperty<ERestoreState> stateEnum() { return configSpace.pack(LiteralStringRef(__FUNCTION__)); }
	Future<StringRef> stateText(Reference<ReadYourWritesTransaction> tr) {
		return map(stateEnum().getD(tr),
		           [](ERestoreState s) -> StringRef { return FileBackupAgent::restoreStateText(s); });
	}
	KeyBackedProperty<Key> addPrefix() { return configSpace.pack(LiteralStringRef(__FUNCTION__)); }
	KeyBackedProperty<Key> removePrefix() { return configSpace.pack(LiteralStringRef(__FUNCTION__)); }
	KeyBackedProperty<bool> onlyApplyMutationLogs() { return configSpace.pack(LiteralStringRef(__FUNCTION__)); }
	KeyBackedProperty<bool> inconsistentSnapshotOnly() { return configSpace.pack(LiteralStringRef(__FUNCTION__)); }
	// XXX: Remove restoreRange() once it is safe to remove. It has been changed to restoreRanges
	KeyBackedProperty<KeyRange> restoreRange() { return configSpace.pack(LiteralStringRef(__FUNCTION__)); }
	KeyBackedProperty<std::vector<KeyRange>> restoreRanges() {
		return configSpace.pack(LiteralStringRef(__FUNCTION__));
	}
	KeyBackedProperty<Key> batchFuture() { return configSpace.pack(LiteralStringRef(__FUNCTION__)); }
	KeyBackedProperty<Version> beginVersion() { return configSpace.pack(LiteralStringRef(__FUNCTION__)); }
	KeyBackedProperty<Version> restoreVersion() { return configSpace.pack(LiteralStringRef(__FUNCTION__)); }
	KeyBackedProperty<Version> firstConsistentVersion() { return configSpace.pack(LiteralStringRef(__FUNCTION__)); }

	KeyBackedProperty<Reference<IBackupContainer>> sourceContainer() {
		return configSpace.pack(LiteralStringRef(__FUNCTION__));
	}
	// Get the source container as a bare URL, without creating a container instance
	KeyBackedProperty<Value> sourceContainerURL() { return configSpace.pack(LiteralStringRef("sourceContainer")); }

	// Total bytes written by all log and range restore tasks.
	KeyBackedBinaryValue<int64_t> bytesWritten() { return configSpace.pack(LiteralStringRef(__FUNCTION__)); }
	// File blocks that have had tasks created for them by the Dispatch task
	KeyBackedBinaryValue<int64_t> filesBlocksDispatched() { return configSpace.pack(LiteralStringRef(__FUNCTION__)); }
	// File blocks whose tasks have finished
	KeyBackedBinaryValue<int64_t> fileBlocksFinished() { return configSpace.pack(LiteralStringRef(__FUNCTION__)); }
	// Total number of files in the fileMap
	KeyBackedBinaryValue<int64_t> fileCount() { return configSpace.pack(LiteralStringRef(__FUNCTION__)); }
	// Total number of file blocks in the fileMap
	KeyBackedBinaryValue<int64_t> fileBlockCount() { return configSpace.pack(LiteralStringRef(__FUNCTION__)); }

	Future<std::vector<KeyRange>> getRestoreRangesOrDefault(Reference<ReadYourWritesTransaction> tr) {
		return getRestoreRangesOrDefault_impl(this, tr);
	}

																#line 394 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via getRestoreRangesOrDefault_impl()
															#line 184 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class GetRestoreRangesOrDefault_implActor>
															#line 184 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class GetRestoreRangesOrDefault_implActorState {
															#line 400 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 184 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	GetRestoreRangesOrDefault_implActorState(RestoreConfig* const& self,Reference<ReadYourWritesTransaction> const& tr) 
															#line 184 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 184 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : self(self),
															#line 184 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   tr(tr)
															#line 409 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("getRestoreRangesOrDefault_impl", reinterpret_cast<unsigned long>(this));

	}
	~GetRestoreRangesOrDefault_implActorState() 
	{
		fdb_probe_actor_destroy("getRestoreRangesOrDefault_impl", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 186 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<std::vector<KeyRange>> __when_expr_0 = self->restoreRanges().getD(tr);
															#line 186 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<GetRestoreRangesOrDefault_implActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 426 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<GetRestoreRangesOrDefault_implActor*>(this)->actor_wait_state = 1;
															#line 186 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< GetRestoreRangesOrDefault_implActor, 0, std::vector<KeyRange> >*>(static_cast<GetRestoreRangesOrDefault_implActor*>(this)));
															#line 431 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~GetRestoreRangesOrDefault_implActorState();
		static_cast<GetRestoreRangesOrDefault_implActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 187 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (ranges.empty())
															#line 454 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 188 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<KeyRange> __when_expr_1 = self->restoreRange().getD(tr);
															#line 188 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<GetRestoreRangesOrDefault_implActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 460 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
			static_cast<GetRestoreRangesOrDefault_implActor*>(this)->actor_wait_state = 2;
															#line 188 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< GetRestoreRangesOrDefault_implActor, 1, KeyRange >*>(static_cast<GetRestoreRangesOrDefault_implActor*>(this)));
															#line 465 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1cont2(loopDepth);
		}

		return loopDepth;
	}
	int a_body1when1(std::vector<KeyRange> const& __ranges,int loopDepth) 
	{
															#line 186 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		ranges = __ranges;
															#line 479 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1when1(std::vector<KeyRange> && __ranges,int loopDepth) 
	{
		ranges = std::move(__ranges);
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<GetRestoreRangesOrDefault_implActor*>(this)->actor_wait_state > 0) static_cast<GetRestoreRangesOrDefault_implActor*>(this)->actor_wait_state = 0;
		static_cast<GetRestoreRangesOrDefault_implActor*>(this)->ActorCallback< GetRestoreRangesOrDefault_implActor, 0, std::vector<KeyRange> >::remove();

	}
	void a_callback_fire(ActorCallback< GetRestoreRangesOrDefault_implActor, 0, std::vector<KeyRange> >*,std::vector<KeyRange> const& value) 
	{
		fdb_probe_actor_enter("getRestoreRangesOrDefault_impl", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRestoreRangesOrDefault_impl", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< GetRestoreRangesOrDefault_implActor, 0, std::vector<KeyRange> >*,std::vector<KeyRange> && value) 
	{
		fdb_probe_actor_enter("getRestoreRangesOrDefault_impl", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRestoreRangesOrDefault_impl", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< GetRestoreRangesOrDefault_implActor, 0, std::vector<KeyRange> >*,Error err) 
	{
		fdb_probe_actor_enter("getRestoreRangesOrDefault_impl", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRestoreRangesOrDefault_impl", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont2(int loopDepth) 
	{
															#line 191 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<GetRestoreRangesOrDefault_implActor*>(this)->SAV<std::vector<KeyRange>>::futures) { (void)(ranges); this->~GetRestoreRangesOrDefault_implActorState(); static_cast<GetRestoreRangesOrDefault_implActor*>(this)->destroy(); return 0; }
															#line 546 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<GetRestoreRangesOrDefault_implActor*>(this)->SAV< std::vector<KeyRange> >::value()) std::vector<KeyRange>(std::move(ranges)); // state_var_RVO
		this->~GetRestoreRangesOrDefault_implActorState();
		static_cast<GetRestoreRangesOrDefault_implActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont3(int loopDepth) 
	{
															#line 189 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		ranges.push_back(range);
															#line 558 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont2(loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(KeyRange const& __range,int loopDepth) 
	{
															#line 188 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		range = __range;
															#line 567 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(KeyRange && __range,int loopDepth) 
	{
		range = std::move(__range);
		loopDepth = a_body1cont3(loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<GetRestoreRangesOrDefault_implActor*>(this)->actor_wait_state > 0) static_cast<GetRestoreRangesOrDefault_implActor*>(this)->actor_wait_state = 0;
		static_cast<GetRestoreRangesOrDefault_implActor*>(this)->ActorCallback< GetRestoreRangesOrDefault_implActor, 1, KeyRange >::remove();

	}
	void a_callback_fire(ActorCallback< GetRestoreRangesOrDefault_implActor, 1, KeyRange >*,KeyRange const& value) 
	{
		fdb_probe_actor_enter("getRestoreRangesOrDefault_impl", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRestoreRangesOrDefault_impl", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< GetRestoreRangesOrDefault_implActor, 1, KeyRange >*,KeyRange && value) 
	{
		fdb_probe_actor_enter("getRestoreRangesOrDefault_impl", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRestoreRangesOrDefault_impl", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< GetRestoreRangesOrDefault_implActor, 1, KeyRange >*,Error err) 
	{
		fdb_probe_actor_enter("getRestoreRangesOrDefault_impl", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRestoreRangesOrDefault_impl", reinterpret_cast<unsigned long>(this), 1);

	}
															#line 184 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	RestoreConfig* self;
															#line 184 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 186 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	std::vector<KeyRange> ranges;
															#line 188 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	KeyRange range;
															#line 638 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via getRestoreRangesOrDefault_impl()
															#line 184 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class GetRestoreRangesOrDefault_implActor final : public Actor<std::vector<KeyRange>>, public ActorCallback< GetRestoreRangesOrDefault_implActor, 0, std::vector<KeyRange> >, public ActorCallback< GetRestoreRangesOrDefault_implActor, 1, KeyRange >, public FastAllocated<GetRestoreRangesOrDefault_implActor>, public GetRestoreRangesOrDefault_implActorState<GetRestoreRangesOrDefault_implActor> {
															#line 643 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<GetRestoreRangesOrDefault_implActor>::operator new;
	using FastAllocated<GetRestoreRangesOrDefault_implActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<std::vector<KeyRange>>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< GetRestoreRangesOrDefault_implActor, 0, std::vector<KeyRange> >;
friend struct ActorCallback< GetRestoreRangesOrDefault_implActor, 1, KeyRange >;
															#line 184 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	GetRestoreRangesOrDefault_implActor(RestoreConfig* const& self,Reference<ReadYourWritesTransaction> const& tr) 
															#line 655 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<std::vector<KeyRange>>(),
		   GetRestoreRangesOrDefault_implActorState<GetRestoreRangesOrDefault_implActor>(self, tr)
	{
		fdb_probe_actor_enter("getRestoreRangesOrDefault_impl", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("getRestoreRangesOrDefault_impl");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("getRestoreRangesOrDefault_impl", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< GetRestoreRangesOrDefault_implActor, 0, std::vector<KeyRange> >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< GetRestoreRangesOrDefault_implActor, 1, KeyRange >*)0, actor_cancelled()); break;
		}

	}
};
															#line 184 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<std::vector<KeyRange>> getRestoreRangesOrDefault_impl( RestoreConfig* const& self, Reference<ReadYourWritesTransaction> const& tr ) {
															#line 184 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<std::vector<KeyRange>>(new GetRestoreRangesOrDefault_implActor(self, tr));
															#line 683 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 193 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

	// Describes a file to load blocks from during restore.  Ordered by version and then fileName to enable
	// incrementally advancing through the map, saving the version and path of the next starting point.
	struct RestoreFile {
		Version version;
		std::string fileName;
		bool isRange{ false }; // false for log file
		int64_t blockSize{ 0 };
		int64_t fileSize{ 0 };
		Version endVersion{ ::invalidVersion }; // not meaningful for range files

		Tuple pack() const {
			return Tuple()
			    .append(version)
			    .append(StringRef(fileName))
			    .append(isRange)
			    .append(fileSize)
			    .append(blockSize)
			    .append(endVersion);
		}
		static RestoreFile unpack(Tuple const& t) {
			RestoreFile r;
			int i = 0;
			r.version = t.getInt(i++);
			r.fileName = t.getString(i++).toString();
			r.isRange = t.getInt(i++) != 0;
			r.fileSize = t.getInt(i++);
			r.blockSize = t.getInt(i++);
			r.endVersion = t.getInt(i++);
			return r;
		}
	};

	typedef KeyBackedSet<RestoreFile> FileSetT;
	FileSetT fileSet() { return configSpace.pack(LiteralStringRef(__FUNCTION__)); }

	Future<bool> isRunnable(Reference<ReadYourWritesTransaction> tr) {
		return map(stateEnum().getD(tr), [](ERestoreState s) -> bool {
			return s != ERestoreState::ABORTED && s != ERestoreState::COMPLETED && s != ERestoreState::UNITIALIZED;
		});
	}

	Future<Void> logError(Database cx, Error e, std::string const& details, void* taskInstance = nullptr) {
		if (!uid.isValid()) {
			TraceEvent(SevError, "FileRestoreErrorNoUID").error(e).detail("Description", details);
			return Void();
		}
		TraceEvent t(SevWarn, "FileRestoreError");
		t.error(e)
		    .detail("RestoreUID", uid)
		    .detail("Description", details)
		    .detail("TaskInstance", (uint64_t)taskInstance);
		// key_not_found could happen
		if (e.code() == error_code_key_not_found)
			t.backtrace();

		return updateErrorInfo(cx, e, details);
	}

	Key mutationLogPrefix() { return uidPrefixKey(applyLogKeys.begin, uid); }

	Key applyMutationsMapPrefix() { return uidPrefixKey(applyMutationsKeyVersionMapRange.begin, uid); }

																#line 750 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via getApplyVersionLag_impl()
															#line 256 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class GetApplyVersionLag_implActor>
															#line 256 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class GetApplyVersionLag_implActorState {
															#line 756 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 256 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	GetApplyVersionLag_implActorState(Reference<ReadYourWritesTransaction> const& tr,UID const& uid) 
															#line 256 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 256 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : tr(tr),
															#line 256 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   uid(uid),
															#line 257 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   beginVal(tr->get(uidPrefixKey(applyMutationsBeginRange.begin, uid), Snapshot::True)),
															#line 259 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   endVal(tr->get(uidPrefixKey(applyMutationsEndRange.begin, uid), Snapshot::True))
															#line 769 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("getApplyVersionLag_impl", reinterpret_cast<unsigned long>(this));

	}
	~GetApplyVersionLag_implActorState() 
	{
		fdb_probe_actor_destroy("getApplyVersionLag_impl", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 260 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_0 = success(beginVal) && success(endVal);
															#line 260 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<GetApplyVersionLag_implActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 786 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<GetApplyVersionLag_implActor*>(this)->actor_wait_state = 1;
															#line 260 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< GetApplyVersionLag_implActor, 0, Void >*>(static_cast<GetApplyVersionLag_implActor*>(this)));
															#line 791 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~GetApplyVersionLag_implActorState();
		static_cast<GetApplyVersionLag_implActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void const& _,int loopDepth) 
	{
															#line 262 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!beginVal.get().present() || !endVal.get().present())
															#line 814 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 263 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (!static_cast<GetApplyVersionLag_implActor*>(this)->SAV<int64_t>::futures) { (void)(0); this->~GetApplyVersionLag_implActorState(); static_cast<GetApplyVersionLag_implActor*>(this)->destroy(); return 0; }
															#line 818 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			new (&static_cast<GetApplyVersionLag_implActor*>(this)->SAV< int64_t >::value()) int64_t(0);
			this->~GetApplyVersionLag_implActorState();
			static_cast<GetApplyVersionLag_implActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 265 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		Version beginVersion = BinaryReader::fromStringRef<Version>(beginVal.get().get(), Unversioned());
															#line 266 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		Version endVersion = BinaryReader::fromStringRef<Version>(endVal.get().get(), Unversioned());
															#line 267 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<GetApplyVersionLag_implActor*>(this)->SAV<int64_t>::futures) { (void)(endVersion - beginVersion); this->~GetApplyVersionLag_implActorState(); static_cast<GetApplyVersionLag_implActor*>(this)->destroy(); return 0; }
															#line 830 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<GetApplyVersionLag_implActor*>(this)->SAV< int64_t >::value()) int64_t(endVersion - beginVersion);
		this->~GetApplyVersionLag_implActorState();
		static_cast<GetApplyVersionLag_implActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1(Void && _,int loopDepth) 
	{
															#line 262 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!beginVal.get().present() || !endVal.get().present())
															#line 842 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 263 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (!static_cast<GetApplyVersionLag_implActor*>(this)->SAV<int64_t>::futures) { (void)(0); this->~GetApplyVersionLag_implActorState(); static_cast<GetApplyVersionLag_implActor*>(this)->destroy(); return 0; }
															#line 846 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			new (&static_cast<GetApplyVersionLag_implActor*>(this)->SAV< int64_t >::value()) int64_t(0);
			this->~GetApplyVersionLag_implActorState();
			static_cast<GetApplyVersionLag_implActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 265 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		Version beginVersion = BinaryReader::fromStringRef<Version>(beginVal.get().get(), Unversioned());
															#line 266 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		Version endVersion = BinaryReader::fromStringRef<Version>(endVal.get().get(), Unversioned());
															#line 267 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<GetApplyVersionLag_implActor*>(this)->SAV<int64_t>::futures) { (void)(endVersion - beginVersion); this->~GetApplyVersionLag_implActorState(); static_cast<GetApplyVersionLag_implActor*>(this)->destroy(); return 0; }
															#line 858 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<GetApplyVersionLag_implActor*>(this)->SAV< int64_t >::value()) int64_t(endVersion - beginVersion);
		this->~GetApplyVersionLag_implActorState();
		static_cast<GetApplyVersionLag_implActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<GetApplyVersionLag_implActor*>(this)->actor_wait_state > 0) static_cast<GetApplyVersionLag_implActor*>(this)->actor_wait_state = 0;
		static_cast<GetApplyVersionLag_implActor*>(this)->ActorCallback< GetApplyVersionLag_implActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetApplyVersionLag_implActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getApplyVersionLag_impl", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getApplyVersionLag_impl", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< GetApplyVersionLag_implActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getApplyVersionLag_impl", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getApplyVersionLag_impl", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< GetApplyVersionLag_implActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getApplyVersionLag_impl", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getApplyVersionLag_impl", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 256 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 256 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	UID uid;
															#line 257 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Future<Optional<Value>> beginVal;
															#line 259 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Future<Optional<Value>> endVal;
															#line 937 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via getApplyVersionLag_impl()
															#line 256 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class GetApplyVersionLag_implActor final : public Actor<int64_t>, public ActorCallback< GetApplyVersionLag_implActor, 0, Void >, public FastAllocated<GetApplyVersionLag_implActor>, public GetApplyVersionLag_implActorState<GetApplyVersionLag_implActor> {
															#line 942 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<GetApplyVersionLag_implActor>::operator new;
	using FastAllocated<GetApplyVersionLag_implActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<int64_t>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< GetApplyVersionLag_implActor, 0, Void >;
															#line 256 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	GetApplyVersionLag_implActor(Reference<ReadYourWritesTransaction> const& tr,UID const& uid) 
															#line 953 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<int64_t>(),
		   GetApplyVersionLag_implActorState<GetApplyVersionLag_implActor>(tr, uid)
	{
		fdb_probe_actor_enter("getApplyVersionLag_impl", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("getApplyVersionLag_impl");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("getApplyVersionLag_impl", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< GetApplyVersionLag_implActor, 0, Void >*)0, actor_cancelled()); break;
		}

	}
};
															#line 256 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<int64_t> getApplyVersionLag_impl( Reference<ReadYourWritesTransaction> const& tr, UID const& uid ) {
															#line 256 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<int64_t>(new GetApplyVersionLag_implActor(tr, uid));
															#line 980 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 269 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

	Future<int64_t> getApplyVersionLag(Reference<ReadYourWritesTransaction> tr) {
		return getApplyVersionLag_impl(tr, uid);
	}

	void initApplyMutations(Reference<ReadYourWritesTransaction> tr, Key addPrefix, Key removePrefix) {
		// Set these because they have to match the applyMutations values.
		this->addPrefix().set(tr, addPrefix);
		this->removePrefix().set(tr, removePrefix);

		clearApplyMutationsKeys(tr);

		// Initialize add/remove prefix, range version map count and set the map's start key to InvalidVersion
		tr->set(uidPrefixKey(applyMutationsAddPrefixRange.begin, uid), addPrefix);
		tr->set(uidPrefixKey(applyMutationsRemovePrefixRange.begin, uid), removePrefix);
		int64_t startCount = 0;
		tr->set(uidPrefixKey(applyMutationsKeyVersionCountRange.begin, uid), StringRef((uint8_t*)&startCount, 8));
		Key mapStart = uidPrefixKey(applyMutationsKeyVersionMapRange.begin, uid);
		tr->set(mapStart, BinaryWriter::toValue<Version>(invalidVersion, Unversioned()));
	}

	void clearApplyMutationsKeys(Reference<ReadYourWritesTransaction> tr) {
		tr->setOption(FDBTransactionOptions::COMMIT_ON_FIRST_PROXY);

		// Clear add/remove prefix keys
		tr->clear(uidPrefixKey(applyMutationsAddPrefixRange.begin, uid));
		tr->clear(uidPrefixKey(applyMutationsRemovePrefixRange.begin, uid));

		// Clear range version map and count key
		tr->clear(uidPrefixKey(applyMutationsKeyVersionCountRange.begin, uid));
		Key mapStart = uidPrefixKey(applyMutationsKeyVersionMapRange.begin, uid);
		tr->clear(KeyRangeRef(mapStart, strinc(mapStart)));

		// Clear any loaded mutations that have not yet been applied
		Key mutationPrefix = mutationLogPrefix();
		tr->clear(KeyRangeRef(mutationPrefix, strinc(mutationPrefix)));

		// Clear end and begin versions (intentionally in this order)
		tr->clear(uidPrefixKey(applyMutationsEndRange.begin, uid));
		tr->clear(uidPrefixKey(applyMutationsBeginRange.begin, uid));
	}

	void setApplyBeginVersion(Reference<ReadYourWritesTransaction> tr, Version ver) {
		tr->set(uidPrefixKey(applyMutationsBeginRange.begin, uid), BinaryWriter::toValue(ver, Unversioned()));
	}

	Future<Version> getApplyBeginVersion(Reference<ReadYourWritesTransaction> tr) {
		return map(tr->get(uidPrefixKey(applyMutationsBeginRange.begin, uid)),
		           [=](Optional<Value> const& value) -> Version {
			           return value.present() ? BinaryReader::fromStringRef<Version>(value.get(), Unversioned()) : 0;
		           });
	}

	void setApplyEndVersion(Reference<ReadYourWritesTransaction> tr, Version ver) {
		tr->set(uidPrefixKey(applyMutationsEndRange.begin, uid), BinaryWriter::toValue(ver, Unversioned()));
	}

	Future<Version> getApplyEndVersion(Reference<ReadYourWritesTransaction> tr) {
		return map(tr->get(uidPrefixKey(applyMutationsEndRange.begin, uid)),
		           [=](Optional<Value> const& value) -> Version {
			           return value.present() ? BinaryReader::fromStringRef<Version>(value.get(), Unversioned()) : 0;
		           });
	}

																#line 1048 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via getCurrentVersion_impl()
															#line 333 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class GetCurrentVersion_implActor>
															#line 333 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class GetCurrentVersion_implActorState {
															#line 1054 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 333 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	GetCurrentVersion_implActorState(RestoreConfig* const& self,Reference<ReadYourWritesTransaction> const& tr) 
															#line 333 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 333 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : self(self),
															#line 333 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   tr(tr)
															#line 1063 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("getCurrentVersion_impl", reinterpret_cast<unsigned long>(this));

	}
	~GetCurrentVersion_implActorState() 
	{
		fdb_probe_actor_destroy("getCurrentVersion_impl", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 334 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<ERestoreState> __when_expr_0 = self->stateEnum().getD(tr);
															#line 334 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<GetCurrentVersion_implActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 1080 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<GetCurrentVersion_implActor*>(this)->actor_wait_state = 1;
															#line 334 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< GetCurrentVersion_implActor, 0, ERestoreState >*>(static_cast<GetCurrentVersion_implActor*>(this)));
															#line 1085 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~GetCurrentVersion_implActorState();
		static_cast<GetCurrentVersion_implActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 335 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		version = -1;
															#line 336 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (status == ERestoreState::RUNNING)
															#line 1110 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 337 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_1 = store(version, self->getApplyBeginVersion(tr));
															#line 337 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<GetCurrentVersion_implActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 1116 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
			static_cast<GetCurrentVersion_implActor*>(this)->actor_wait_state = 2;
															#line 337 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< GetCurrentVersion_implActor, 1, Void >*>(static_cast<GetCurrentVersion_implActor*>(this)));
															#line 1121 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
															#line 338 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (status == ERestoreState::COMPLETED)
															#line 1128 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			{
															#line 339 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				StrictFuture<Void> __when_expr_2 = store(version, self->restoreVersion().getD(tr));
															#line 339 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				if (static_cast<GetCurrentVersion_implActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 1134 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont1when2(__when_expr_2.get(), loopDepth); };
				static_cast<GetCurrentVersion_implActor*>(this)->actor_wait_state = 3;
															#line 339 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< GetCurrentVersion_implActor, 2, Void >*>(static_cast<GetCurrentVersion_implActor*>(this)));
															#line 1139 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				loopDepth = 0;
			}
			else
			{
				loopDepth = a_body1cont4(loopDepth);
			}
		}

		return loopDepth;
	}
	int a_body1when1(ERestoreState const& __status,int loopDepth) 
	{
															#line 334 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		status = __status;
															#line 1154 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1when1(ERestoreState && __status,int loopDepth) 
	{
		status = std::move(__status);
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<GetCurrentVersion_implActor*>(this)->actor_wait_state > 0) static_cast<GetCurrentVersion_implActor*>(this)->actor_wait_state = 0;
		static_cast<GetCurrentVersion_implActor*>(this)->ActorCallback< GetCurrentVersion_implActor, 0, ERestoreState >::remove();

	}
	void a_callback_fire(ActorCallback< GetCurrentVersion_implActor, 0, ERestoreState >*,ERestoreState const& value) 
	{
		fdb_probe_actor_enter("getCurrentVersion_impl", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getCurrentVersion_impl", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< GetCurrentVersion_implActor, 0, ERestoreState >*,ERestoreState && value) 
	{
		fdb_probe_actor_enter("getCurrentVersion_impl", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getCurrentVersion_impl", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< GetCurrentVersion_implActor, 0, ERestoreState >*,Error err) 
	{
		fdb_probe_actor_enter("getCurrentVersion_impl", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getCurrentVersion_impl", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont2(int loopDepth) 
	{
															#line 341 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<GetCurrentVersion_implActor*>(this)->SAV<Version>::futures) { (void)(version); this->~GetCurrentVersion_implActorState(); static_cast<GetCurrentVersion_implActor*>(this)->destroy(); return 0; }
															#line 1221 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<GetCurrentVersion_implActor*>(this)->SAV< Version >::value()) Version(std::move(version)); // state_var_RVO
		this->~GetCurrentVersion_implActorState();
		static_cast<GetCurrentVersion_implActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont3(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont2(loopDepth);

		return loopDepth;
	}
	int a_body1cont3(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont2(loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont3(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont3(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<GetCurrentVersion_implActor*>(this)->actor_wait_state > 0) static_cast<GetCurrentVersion_implActor*>(this)->actor_wait_state = 0;
		static_cast<GetCurrentVersion_implActor*>(this)->ActorCallback< GetCurrentVersion_implActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetCurrentVersion_implActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getCurrentVersion_impl", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getCurrentVersion_impl", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< GetCurrentVersion_implActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getCurrentVersion_impl", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getCurrentVersion_impl", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< GetCurrentVersion_implActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getCurrentVersion_impl", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getCurrentVersion_impl", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont4(int loopDepth) 
	{
		loopDepth = a_body1cont2(loopDepth);

		return loopDepth;
	}
	int a_body1cont5(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont4(loopDepth);

		return loopDepth;
	}
	int a_body1cont5(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont4(loopDepth);

		return loopDepth;
	}
	int a_body1cont1when2(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont5(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1when2(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont5(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<GetCurrentVersion_implActor*>(this)->actor_wait_state > 0) static_cast<GetCurrentVersion_implActor*>(this)->actor_wait_state = 0;
		static_cast<GetCurrentVersion_implActor*>(this)->ActorCallback< GetCurrentVersion_implActor, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetCurrentVersion_implActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getCurrentVersion_impl", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont1when2(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getCurrentVersion_impl", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< GetCurrentVersion_implActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getCurrentVersion_impl", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont1when2(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getCurrentVersion_impl", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< GetCurrentVersion_implActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getCurrentVersion_impl", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getCurrentVersion_impl", reinterpret_cast<unsigned long>(this), 2);

	}
															#line 333 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	RestoreConfig* self;
															#line 333 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 334 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	ERestoreState status;
															#line 335 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Version version;
															#line 1393 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via getCurrentVersion_impl()
															#line 333 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class GetCurrentVersion_implActor final : public Actor<Version>, public ActorCallback< GetCurrentVersion_implActor, 0, ERestoreState >, public ActorCallback< GetCurrentVersion_implActor, 1, Void >, public ActorCallback< GetCurrentVersion_implActor, 2, Void >, public FastAllocated<GetCurrentVersion_implActor>, public GetCurrentVersion_implActorState<GetCurrentVersion_implActor> {
															#line 1398 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<GetCurrentVersion_implActor>::operator new;
	using FastAllocated<GetCurrentVersion_implActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Version>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< GetCurrentVersion_implActor, 0, ERestoreState >;
friend struct ActorCallback< GetCurrentVersion_implActor, 1, Void >;
friend struct ActorCallback< GetCurrentVersion_implActor, 2, Void >;
															#line 333 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	GetCurrentVersion_implActor(RestoreConfig* const& self,Reference<ReadYourWritesTransaction> const& tr) 
															#line 1411 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<Version>(),
		   GetCurrentVersion_implActorState<GetCurrentVersion_implActor>(self, tr)
	{
		fdb_probe_actor_enter("getCurrentVersion_impl", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("getCurrentVersion_impl");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("getCurrentVersion_impl", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< GetCurrentVersion_implActor, 0, ERestoreState >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< GetCurrentVersion_implActor, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< GetCurrentVersion_implActor, 2, Void >*)0, actor_cancelled()); break;
		}

	}
};
															#line 333 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<Version> getCurrentVersion_impl( RestoreConfig* const& self, Reference<ReadYourWritesTransaction> const& tr ) {
															#line 333 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<Version>(new GetCurrentVersion_implActor(self, tr));
															#line 1440 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 343 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

	Future<Version> getCurrentVersion(Reference<ReadYourWritesTransaction> tr) {
		return getCurrentVersion_impl(this, tr);
	}

																#line 1449 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
[[nodiscard]] static Future<std::string> getProgress_impl( RestoreConfig const& restore, Reference<ReadYourWritesTransaction> const& tr );
template <class> friend class RestoreConfig_GetProgress_implActorState;

#line 349 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Future<std::string> getProgress(Reference<ReadYourWritesTransaction> tr) { return getProgress_impl(*this, tr); }

																#line 1456 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
[[nodiscard]] static Future<std::string> getFullStatus_impl( RestoreConfig const& restore, Reference<ReadYourWritesTransaction> const& tr );
template <class> friend class RestoreConfig_GetFullStatus_implActorState;

#line 352 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Future<std::string> getFullStatus(Reference<ReadYourWritesTransaction> tr) { return getFullStatus_impl(*this, tr); }
};

typedef RestoreConfig::RestoreFile RestoreFile;

															#line 1466 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via getProgress_impl()
															#line 357 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class RestoreConfig_GetProgress_implActor>
															#line 357 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class RestoreConfig_GetProgress_implActorState {
															#line 1472 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 357 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	RestoreConfig_GetProgress_implActorState(RestoreConfig const& restore,Reference<ReadYourWritesTransaction> const& tr) 
															#line 357 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 357 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : restore(restore),
															#line 357 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   tr(tr)
															#line 1481 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("getProgress_impl", reinterpret_cast<unsigned long>(this));

	}
	~RestoreConfig_GetProgress_implActorState() 
	{
		fdb_probe_actor_destroy("getProgress_impl", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 359 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 360 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 362 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			fileCount = restore.fileCount().getD(tr);
															#line 363 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			fileBlockCount = restore.fileBlockCount().getD(tr);
															#line 364 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			fileBlocksDispatched = restore.filesBlocksDispatched().getD(tr);
															#line 365 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			fileBlocksFinished = restore.fileBlocksFinished().getD(tr);
															#line 366 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			bytesWritten = restore.bytesWritten().getD(tr);
															#line 367 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			status = restore.stateText(tr);
															#line 368 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			currentVersion = restore.getCurrentVersion(tr);
															#line 369 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			lag = restore.getApplyVersionLag(tr);
															#line 370 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			firstConsistentVersion = restore.firstConsistentVersion().getD(tr);
															#line 371 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tag = restore.tag().getD(tr);
															#line 372 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			lastError = restore.lastError().getD(tr);
															#line 375 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			uid = restore.getUid();
															#line 376 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_0 = success(fileCount) && success(fileBlockCount) && success(fileBlocksDispatched) && success(fileBlocksFinished) && success(bytesWritten) && success(status) && success(currentVersion) && success(lag) && success(firstConsistentVersion) && success(tag) && success(lastError);
															#line 376 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<RestoreConfig_GetProgress_implActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 1526 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<RestoreConfig_GetProgress_implActor*>(this)->actor_wait_state = 1;
															#line 376 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< RestoreConfig_GetProgress_implActor, 0, Void >*>(static_cast<RestoreConfig_GetProgress_implActor*>(this)));
															#line 1531 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~RestoreConfig_GetProgress_implActorState();
		static_cast<RestoreConfig_GetProgress_implActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void const& _,int loopDepth) 
	{
															#line 380 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		std::string errstr = "None";
															#line 381 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (lastError.get().second != 0)
															#line 1556 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 382 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			errstr = format("'%s' %" PRId64 "s ago.\n", lastError.get().first.c_str(), (tr->getReadVersion().get() - lastError.get().second) / CLIENT_KNOBS->CORE_VERSIONSPERSECOND);
															#line 1560 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 386 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent("FileRestoreProgress") .detail("RestoreUID", uid) .detail("Tag", tag.get()) .detail("State", status.get().toString()) .detail("FileCount", fileCount.get()) .detail("FileBlocksFinished", fileBlocksFinished.get()) .detail("FileBlocksTotal", fileBlockCount.get()) .detail("FileBlocksInProgress", fileBlocksDispatched.get() - fileBlocksFinished.get()) .detail("BytesWritten", bytesWritten.get()) .detail("CurrentVersion", currentVersion.get()) .detail("FirstConsistentVersion", firstConsistentVersion.get()) .detail("ApplyLag", lag.get()) .detail("TaskInstance", THIS_ADDR);
															#line 400 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<RestoreConfig_GetProgress_implActor*>(this)->SAV<std::string>::futures) { (void)(format("Tag: %s  UID: %s  State: %s  Blocks: %lld/%lld  BlocksInProgress: %lld  Files: %lld  BytesWritten: " "%lld  CurrentVersion: %lld FirstConsistentVersion: %lld  ApplyVersionLag: %lld  LastError: %s", tag.get().c_str(), uid.toString().c_str(), status.get().toString().c_str(), fileBlocksFinished.get(), fileBlockCount.get(), fileBlocksDispatched.get() - fileBlocksFinished.get(), fileCount.get(), bytesWritten.get(), currentVersion.get(), firstConsistentVersion.get(), lag.get(), errstr.c_str())); this->~RestoreConfig_GetProgress_implActorState(); static_cast<RestoreConfig_GetProgress_implActor*>(this)->destroy(); return 0; }
															#line 1566 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<RestoreConfig_GetProgress_implActor*>(this)->SAV< std::string >::value()) std::string(format("Tag: %s  UID: %s  State: %s  Blocks: %lld/%lld  BlocksInProgress: %lld  Files: %lld  BytesWritten: " "%lld  CurrentVersion: %lld FirstConsistentVersion: %lld  ApplyVersionLag: %lld  LastError: %s", tag.get().c_str(), uid.toString().c_str(), status.get().toString().c_str(), fileBlocksFinished.get(), fileBlockCount.get(), fileBlocksDispatched.get() - fileBlocksFinished.get(), fileCount.get(), bytesWritten.get(), currentVersion.get(), firstConsistentVersion.get(), lag.get(), errstr.c_str()));
		this->~RestoreConfig_GetProgress_implActorState();
		static_cast<RestoreConfig_GetProgress_implActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1(Void && _,int loopDepth) 
	{
															#line 380 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		std::string errstr = "None";
															#line 381 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (lastError.get().second != 0)
															#line 1580 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 382 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			errstr = format("'%s' %" PRId64 "s ago.\n", lastError.get().first.c_str(), (tr->getReadVersion().get() - lastError.get().second) / CLIENT_KNOBS->CORE_VERSIONSPERSECOND);
															#line 1584 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 386 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent("FileRestoreProgress") .detail("RestoreUID", uid) .detail("Tag", tag.get()) .detail("State", status.get().toString()) .detail("FileCount", fileCount.get()) .detail("FileBlocksFinished", fileBlocksFinished.get()) .detail("FileBlocksTotal", fileBlockCount.get()) .detail("FileBlocksInProgress", fileBlocksDispatched.get() - fileBlocksFinished.get()) .detail("BytesWritten", bytesWritten.get()) .detail("CurrentVersion", currentVersion.get()) .detail("FirstConsistentVersion", firstConsistentVersion.get()) .detail("ApplyLag", lag.get()) .detail("TaskInstance", THIS_ADDR);
															#line 400 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<RestoreConfig_GetProgress_implActor*>(this)->SAV<std::string>::futures) { (void)(format("Tag: %s  UID: %s  State: %s  Blocks: %lld/%lld  BlocksInProgress: %lld  Files: %lld  BytesWritten: " "%lld  CurrentVersion: %lld FirstConsistentVersion: %lld  ApplyVersionLag: %lld  LastError: %s", tag.get().c_str(), uid.toString().c_str(), status.get().toString().c_str(), fileBlocksFinished.get(), fileBlockCount.get(), fileBlocksDispatched.get() - fileBlocksFinished.get(), fileCount.get(), bytesWritten.get(), currentVersion.get(), firstConsistentVersion.get(), lag.get(), errstr.c_str())); this->~RestoreConfig_GetProgress_implActorState(); static_cast<RestoreConfig_GetProgress_implActor*>(this)->destroy(); return 0; }
															#line 1590 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<RestoreConfig_GetProgress_implActor*>(this)->SAV< std::string >::value()) std::string(format("Tag: %s  UID: %s  State: %s  Blocks: %lld/%lld  BlocksInProgress: %lld  Files: %lld  BytesWritten: " "%lld  CurrentVersion: %lld FirstConsistentVersion: %lld  ApplyVersionLag: %lld  LastError: %s", tag.get().c_str(), uid.toString().c_str(), status.get().toString().c_str(), fileBlocksFinished.get(), fileBlockCount.get(), fileBlocksDispatched.get() - fileBlocksFinished.get(), fileCount.get(), bytesWritten.get(), currentVersion.get(), firstConsistentVersion.get(), lag.get(), errstr.c_str()));
		this->~RestoreConfig_GetProgress_implActorState();
		static_cast<RestoreConfig_GetProgress_implActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<RestoreConfig_GetProgress_implActor*>(this)->actor_wait_state > 0) static_cast<RestoreConfig_GetProgress_implActor*>(this)->actor_wait_state = 0;
		static_cast<RestoreConfig_GetProgress_implActor*>(this)->ActorCallback< RestoreConfig_GetProgress_implActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< RestoreConfig_GetProgress_implActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getProgress_impl", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getProgress_impl", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< RestoreConfig_GetProgress_implActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getProgress_impl", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getProgress_impl", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< RestoreConfig_GetProgress_implActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getProgress_impl", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getProgress_impl", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 357 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	RestoreConfig restore;
															#line 357 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 362 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Future<int64_t> fileCount;
															#line 363 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Future<int64_t> fileBlockCount;
															#line 364 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Future<int64_t> fileBlocksDispatched;
															#line 365 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Future<int64_t> fileBlocksFinished;
															#line 366 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Future<int64_t> bytesWritten;
															#line 367 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Future<StringRef> status;
															#line 368 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Future<Version> currentVersion;
															#line 369 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Future<Version> lag;
															#line 370 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Future<Version> firstConsistentVersion;
															#line 371 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Future<std::string> tag;
															#line 372 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Future<std::pair<std::string, Version>> lastError;
															#line 375 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	UID uid;
															#line 1689 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via getProgress_impl()
															#line 357 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class RestoreConfig_GetProgress_implActor final : public Actor<std::string>, public ActorCallback< RestoreConfig_GetProgress_implActor, 0, Void >, public FastAllocated<RestoreConfig_GetProgress_implActor>, public RestoreConfig_GetProgress_implActorState<RestoreConfig_GetProgress_implActor> {
															#line 1694 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<RestoreConfig_GetProgress_implActor>::operator new;
	using FastAllocated<RestoreConfig_GetProgress_implActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<std::string>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< RestoreConfig_GetProgress_implActor, 0, Void >;
															#line 357 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	RestoreConfig_GetProgress_implActor(RestoreConfig const& restore,Reference<ReadYourWritesTransaction> const& tr) 
															#line 1705 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<std::string>(),
		   RestoreConfig_GetProgress_implActorState<RestoreConfig_GetProgress_implActor>(restore, tr)
	{
		fdb_probe_actor_enter("getProgress_impl", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("getProgress_impl");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("getProgress_impl", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< RestoreConfig_GetProgress_implActor, 0, Void >*)0, actor_cancelled()); break;
		}

	}
};
															#line 357 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] Future<std::string> RestoreConfig::getProgress_impl( RestoreConfig const& restore, Reference<ReadYourWritesTransaction> const& tr ) {
															#line 357 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<std::string>(new RestoreConfig_GetProgress_implActor(restore, tr));
															#line 1732 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 415 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

															#line 1737 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via getFullStatus_impl()
															#line 416 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class RestoreConfig_GetFullStatus_implActor>
															#line 416 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class RestoreConfig_GetFullStatus_implActorState {
															#line 1743 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 416 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	RestoreConfig_GetFullStatus_implActorState(RestoreConfig const& restore,Reference<ReadYourWritesTransaction> const& tr) 
															#line 416 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 416 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : restore(restore),
															#line 416 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   tr(tr)
															#line 1752 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("getFullStatus_impl", reinterpret_cast<unsigned long>(this));

	}
	~RestoreConfig_GetFullStatus_implActorState() 
	{
		fdb_probe_actor_destroy("getFullStatus_impl", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 418 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 419 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 421 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			ranges = restore.getRestoreRangesOrDefault(tr);
															#line 422 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			addPrefix = restore.addPrefix().getD(tr);
															#line 423 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			removePrefix = restore.removePrefix().getD(tr);
															#line 424 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			url = restore.sourceContainerURL().getD(tr);
															#line 425 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			restoreVersion = restore.restoreVersion().getD(tr);
															#line 426 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			progress = restore.getProgress(tr);
															#line 429 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_0 = success(ranges) && success(addPrefix) && success(removePrefix) && success(url) && success(restoreVersion) && success(progress);
															#line 429 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<RestoreConfig_GetFullStatus_implActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 1785 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<RestoreConfig_GetFullStatus_implActor*>(this)->actor_wait_state = 1;
															#line 429 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< RestoreConfig_GetFullStatus_implActor, 0, Void >*>(static_cast<RestoreConfig_GetFullStatus_implActor*>(this)));
															#line 1790 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~RestoreConfig_GetFullStatus_implActorState();
		static_cast<RestoreConfig_GetFullStatus_implActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void const& _,int loopDepth) 
	{
															#line 432 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		std::string returnStr;
															#line 433 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		returnStr = format("%s  URL: %s", progress.get().c_str(), url.get().toString().c_str());
															#line 434 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		for( auto& range : ranges.get() ) {
															#line 435 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			returnStr += format("  Range: '%s'-'%s'", printable(range.begin).c_str(), printable(range.end).c_str());
															#line 1819 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 437 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		returnStr += format("  AddPrefix: '%s'  RemovePrefix: '%s'  Version: %lld", printable(addPrefix.get()).c_str(), printable(removePrefix.get()).c_str(), restoreVersion.get());
															#line 441 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<RestoreConfig_GetFullStatus_implActor*>(this)->SAV<std::string>::futures) { (void)(returnStr); this->~RestoreConfig_GetFullStatus_implActorState(); static_cast<RestoreConfig_GetFullStatus_implActor*>(this)->destroy(); return 0; }
															#line 1825 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<RestoreConfig_GetFullStatus_implActor*>(this)->SAV< std::string >::value()) std::string(returnStr);
		this->~RestoreConfig_GetFullStatus_implActorState();
		static_cast<RestoreConfig_GetFullStatus_implActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1(Void && _,int loopDepth) 
	{
															#line 432 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		std::string returnStr;
															#line 433 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		returnStr = format("%s  URL: %s", progress.get().c_str(), url.get().toString().c_str());
															#line 434 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		for( auto& range : ranges.get() ) {
															#line 435 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			returnStr += format("  Range: '%s'-'%s'", printable(range.begin).c_str(), printable(range.end).c_str());
															#line 1843 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 437 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		returnStr += format("  AddPrefix: '%s'  RemovePrefix: '%s'  Version: %lld", printable(addPrefix.get()).c_str(), printable(removePrefix.get()).c_str(), restoreVersion.get());
															#line 441 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<RestoreConfig_GetFullStatus_implActor*>(this)->SAV<std::string>::futures) { (void)(returnStr); this->~RestoreConfig_GetFullStatus_implActorState(); static_cast<RestoreConfig_GetFullStatus_implActor*>(this)->destroy(); return 0; }
															#line 1849 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<RestoreConfig_GetFullStatus_implActor*>(this)->SAV< std::string >::value()) std::string(returnStr);
		this->~RestoreConfig_GetFullStatus_implActorState();
		static_cast<RestoreConfig_GetFullStatus_implActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<RestoreConfig_GetFullStatus_implActor*>(this)->actor_wait_state > 0) static_cast<RestoreConfig_GetFullStatus_implActor*>(this)->actor_wait_state = 0;
		static_cast<RestoreConfig_GetFullStatus_implActor*>(this)->ActorCallback< RestoreConfig_GetFullStatus_implActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< RestoreConfig_GetFullStatus_implActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getFullStatus_impl", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getFullStatus_impl", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< RestoreConfig_GetFullStatus_implActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getFullStatus_impl", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getFullStatus_impl", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< RestoreConfig_GetFullStatus_implActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getFullStatus_impl", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getFullStatus_impl", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 416 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	RestoreConfig restore;
															#line 416 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 421 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Future<std::vector<KeyRange>> ranges;
															#line 422 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Future<Key> addPrefix;
															#line 423 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Future<Key> removePrefix;
															#line 424 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Future<Key> url;
															#line 425 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Future<Version> restoreVersion;
															#line 426 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Future<std::string> progress;
															#line 1936 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via getFullStatus_impl()
															#line 416 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class RestoreConfig_GetFullStatus_implActor final : public Actor<std::string>, public ActorCallback< RestoreConfig_GetFullStatus_implActor, 0, Void >, public FastAllocated<RestoreConfig_GetFullStatus_implActor>, public RestoreConfig_GetFullStatus_implActorState<RestoreConfig_GetFullStatus_implActor> {
															#line 1941 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<RestoreConfig_GetFullStatus_implActor>::operator new;
	using FastAllocated<RestoreConfig_GetFullStatus_implActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<std::string>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< RestoreConfig_GetFullStatus_implActor, 0, Void >;
															#line 416 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	RestoreConfig_GetFullStatus_implActor(RestoreConfig const& restore,Reference<ReadYourWritesTransaction> const& tr) 
															#line 1952 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<std::string>(),
		   RestoreConfig_GetFullStatus_implActorState<RestoreConfig_GetFullStatus_implActor>(restore, tr)
	{
		fdb_probe_actor_enter("getFullStatus_impl", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("getFullStatus_impl");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("getFullStatus_impl", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< RestoreConfig_GetFullStatus_implActor, 0, Void >*)0, actor_cancelled()); break;
		}

	}
};
															#line 416 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] Future<std::string> RestoreConfig::getFullStatus_impl( RestoreConfig const& restore, Reference<ReadYourWritesTransaction> const& tr ) {
															#line 416 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<std::string>(new RestoreConfig_GetFullStatus_implActor(restore, tr));
															#line 1979 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 443 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

FileBackupAgent::FileBackupAgent()
  : subspace(Subspace(fileBackupPrefixRange.begin))
    // The other subspaces have logUID -> value
    ,
    config(subspace.get(BackupAgentBase::keyConfig)), lastRestorable(subspace.get(FileBackupAgent::keyLastRestorable)),
    taskBucket(new TaskBucket(subspace.get(BackupAgentBase::keyTasks),
                              AccessSystemKeys::True,
                              PriorityBatch::False,
                              LockAware::True)),
    futureBucket(new FutureBucket(subspace.get(BackupAgentBase::keyFutures), AccessSystemKeys::True, LockAware::True)) {
}

namespace fileBackup {

// Return a block of contiguous padding bytes, growing if needed.
Value makePadding(int size) {
	static Value pad;
	if (pad.size() < size) {
		pad = makeString(size);
		memset(mutateString(pad), '\xff', pad.size());
	}

	return pad.substr(0, size);
}

// File Format handlers.
// Both Range and Log formats are designed to be readable starting at any 1MB boundary
// so they can be read in parallel.
//
// Writer instances must be kept alive while any member actors are in progress.
//
// RangeFileWriter must be used as follows:
//   1 - writeKey(key) the queried key range begin
//   2 - writeKV(k, v) each kv pair to restore
//   3 - writeKey(key) the queried key range end
//
// RangeFileWriter will insert the required padding, header, and extra
// end/begin keys around the 1MB boundaries as needed.
//
// Example:
//   The range a-z is queries and returns c-j which covers 3 blocks.
//   The client code writes keys in this sequence:
//             a c d e f g h i j z
//
//   H = header   P = padding   a...z = keys  v = value | = block boundary
//
//   Encoded file:  H a cv dv ev P | H e ev fv gv hv P | H h hv iv jv z
//   Decoded in blocks yields:
//           Block 1: range [a, e) with kv pairs cv, dv
//           Block 2: range [e, h) with kv pairs ev, fv, gv
//           Block 3: range [h, z) with kv pairs hv, iv, jv
//
//   NOTE: All blocks except for the final block will have one last
//   value which will not be used.  This isn't actually a waste since
//   if the next KV pair wouldn't fit within the block after the value
//   then the space after the final key to the next 1MB boundary would
//   just be padding anyway.
struct RangeFileWriter {
	RangeFileWriter(Reference<IBackupFile> file = Reference<IBackupFile>(), int blockSize = 0)
	  : file(file), blockSize(blockSize), blockEnd(0), fileVersion(BACKUP_AGENT_SNAPSHOT_FILE_VERSION) {}

	// Handles the first block and internal blocks.  Ends current block if needed.
	// The final flag is used in simulation to pad the file's final block to a whole block size
																#line 2047 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via newBlock()
															#line 507 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class NewBlockActor>
															#line 507 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class NewBlockActorState {
															#line 2053 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 507 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	NewBlockActorState(RangeFileWriter* const& self,int const& bytesNeeded,bool const& final = false) 
															#line 507 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 507 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : self(self),
															#line 507 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   bytesNeeded(bytesNeeded),
															#line 507 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   final(final)
															#line 2064 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("newBlock", reinterpret_cast<unsigned long>(this));

	}
	~NewBlockActorState() 
	{
		fdb_probe_actor_destroy("newBlock", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 509 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			int bytesLeft = self->blockEnd - self->file->size();
															#line 510 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (bytesLeft > 0)
															#line 2081 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			{
															#line 511 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				paddingFFs = makePadding(bytesLeft);
															#line 512 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				StrictFuture<Void> __when_expr_0 = self->file->append(paddingFFs.begin(), bytesLeft);
															#line 512 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				if (static_cast<NewBlockActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 2089 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
				static_cast<NewBlockActor*>(this)->actor_wait_state = 1;
															#line 512 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< NewBlockActor, 0, Void >*>(static_cast<NewBlockActor*>(this)));
															#line 2094 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				loopDepth = 0;
			}
			else
			{
				loopDepth = a_body1cont1(loopDepth);
			}
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~NewBlockActorState();
		static_cast<NewBlockActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 515 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (final)
															#line 2122 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 516 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			ASSERT(g_network->isSimulated());
															#line 517 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (!static_cast<NewBlockActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~NewBlockActorState(); static_cast<NewBlockActor*>(this)->destroy(); return 0; }
															#line 2128 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			new (&static_cast<NewBlockActor*>(this)->SAV< Void >::value()) Void(Void());
			this->~NewBlockActorState();
			static_cast<NewBlockActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 521 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		self->blockEnd += self->blockSize;
															#line 524 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_1 = self->file->append((uint8_t*)&self->fileVersion, sizeof(self->fileVersion));
															#line 524 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<NewBlockActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 2140 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<NewBlockActor*>(this)->actor_wait_state = 2;
															#line 524 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< NewBlockActor, 1, Void >*>(static_cast<NewBlockActor*>(this)));
															#line 2145 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont2(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont2(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<NewBlockActor*>(this)->actor_wait_state > 0) static_cast<NewBlockActor*>(this)->actor_wait_state = 0;
		static_cast<NewBlockActor*>(this)->ActorCallback< NewBlockActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< NewBlockActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("newBlock", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("newBlock", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< NewBlockActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("newBlock", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("newBlock", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< NewBlockActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("newBlock", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("newBlock", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont3(Void const& _,int loopDepth) 
	{
															#line 527 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (self->blockEnd > self->blockSize)
															#line 2229 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 528 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_2 = self->file->appendStringRefWithLen(self->lastKey);
															#line 528 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<NewBlockActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 2235 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont3when1(__when_expr_2.get(), loopDepth); };
			static_cast<NewBlockActor*>(this)->actor_wait_state = 3;
															#line 528 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< NewBlockActor, 2, Void >*>(static_cast<NewBlockActor*>(this)));
															#line 2240 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1cont5(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont3(Void && _,int loopDepth) 
	{
															#line 527 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (self->blockEnd > self->blockSize)
															#line 2254 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 528 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_2 = self->file->appendStringRefWithLen(self->lastKey);
															#line 528 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<NewBlockActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 2260 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont3when1(__when_expr_2.get(), loopDepth); };
			static_cast<NewBlockActor*>(this)->actor_wait_state = 3;
															#line 528 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< NewBlockActor, 2, Void >*>(static_cast<NewBlockActor*>(this)));
															#line 2265 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1cont5(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont3(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont3(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<NewBlockActor*>(this)->actor_wait_state > 0) static_cast<NewBlockActor*>(this)->actor_wait_state = 0;
		static_cast<NewBlockActor*>(this)->ActorCallback< NewBlockActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< NewBlockActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("newBlock", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("newBlock", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< NewBlockActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("newBlock", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("newBlock", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< NewBlockActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("newBlock", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("newBlock", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont5(int loopDepth) 
	{
															#line 534 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (self->file->size() + bytesNeeded > self->blockEnd)
															#line 2342 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 535 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			return a_body1Catch1(backup_bad_block_size(), loopDepth);
															#line 2346 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 537 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<NewBlockActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~NewBlockActorState(); static_cast<NewBlockActor*>(this)->destroy(); return 0; }
															#line 2350 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<NewBlockActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~NewBlockActorState();
		static_cast<NewBlockActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont6(Void const& _,int loopDepth) 
	{
															#line 529 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_3 = self->file->appendStringRefWithLen(self->lastKey);
															#line 529 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<NewBlockActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 2364 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1cont6when1(__when_expr_3.get(), loopDepth); };
		static_cast<NewBlockActor*>(this)->actor_wait_state = 4;
															#line 529 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< NewBlockActor, 3, Void >*>(static_cast<NewBlockActor*>(this)));
															#line 2369 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont6(Void && _,int loopDepth) 
	{
															#line 529 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_3 = self->file->appendStringRefWithLen(self->lastKey);
															#line 529 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<NewBlockActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 2380 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1cont6when1(__when_expr_3.get(), loopDepth); };
		static_cast<NewBlockActor*>(this)->actor_wait_state = 4;
															#line 529 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< NewBlockActor, 3, Void >*>(static_cast<NewBlockActor*>(this)));
															#line 2385 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont3when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont6(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont3when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont6(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<NewBlockActor*>(this)->actor_wait_state > 0) static_cast<NewBlockActor*>(this)->actor_wait_state = 0;
		static_cast<NewBlockActor*>(this)->ActorCallback< NewBlockActor, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< NewBlockActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("newBlock", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont3when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("newBlock", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< NewBlockActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("newBlock", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont3when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("newBlock", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< NewBlockActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("newBlock", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("newBlock", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1cont7(Void const& _,int loopDepth) 
	{
															#line 530 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_4 = self->file->appendStringRefWithLen(self->lastValue);
															#line 530 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<NewBlockActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 2459 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1Catch1(__when_expr_4.getError(), loopDepth); else return a_body1cont7when1(__when_expr_4.get(), loopDepth); };
		static_cast<NewBlockActor*>(this)->actor_wait_state = 5;
															#line 530 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< NewBlockActor, 4, Void >*>(static_cast<NewBlockActor*>(this)));
															#line 2464 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont7(Void && _,int loopDepth) 
	{
															#line 530 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_4 = self->file->appendStringRefWithLen(self->lastValue);
															#line 530 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<NewBlockActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 2475 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1Catch1(__when_expr_4.getError(), loopDepth); else return a_body1cont7when1(__when_expr_4.get(), loopDepth); };
		static_cast<NewBlockActor*>(this)->actor_wait_state = 5;
															#line 530 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< NewBlockActor, 4, Void >*>(static_cast<NewBlockActor*>(this)));
															#line 2480 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont6when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont7(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont6when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont7(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<NewBlockActor*>(this)->actor_wait_state > 0) static_cast<NewBlockActor*>(this)->actor_wait_state = 0;
		static_cast<NewBlockActor*>(this)->ActorCallback< NewBlockActor, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< NewBlockActor, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("newBlock", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont6when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("newBlock", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< NewBlockActor, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("newBlock", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont6when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("newBlock", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< NewBlockActor, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("newBlock", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("newBlock", reinterpret_cast<unsigned long>(this), 3);

	}
	int a_body1cont8(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont5(loopDepth);

		return loopDepth;
	}
	int a_body1cont8(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont5(loopDepth);

		return loopDepth;
	}
	int a_body1cont7when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont8(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont7when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont8(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose5() 
	{
		if (static_cast<NewBlockActor*>(this)->actor_wait_state > 0) static_cast<NewBlockActor*>(this)->actor_wait_state = 0;
		static_cast<NewBlockActor*>(this)->ActorCallback< NewBlockActor, 4, Void >::remove();

	}
	void a_callback_fire(ActorCallback< NewBlockActor, 4, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("newBlock", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont7when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("newBlock", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_fire(ActorCallback< NewBlockActor, 4, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("newBlock", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont7when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("newBlock", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_error(ActorCallback< NewBlockActor, 4, Void >*,Error err) 
	{
		fdb_probe_actor_enter("newBlock", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("newBlock", reinterpret_cast<unsigned long>(this), 4);

	}
															#line 507 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	RangeFileWriter* self;
															#line 507 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int bytesNeeded;
															#line 507 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	bool final;
															#line 511 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Value paddingFFs;
															#line 2631 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via newBlock()
															#line 507 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class NewBlockActor final : public Actor<Void>, public ActorCallback< NewBlockActor, 0, Void >, public ActorCallback< NewBlockActor, 1, Void >, public ActorCallback< NewBlockActor, 2, Void >, public ActorCallback< NewBlockActor, 3, Void >, public ActorCallback< NewBlockActor, 4, Void >, public FastAllocated<NewBlockActor>, public NewBlockActorState<NewBlockActor> {
															#line 2636 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<NewBlockActor>::operator new;
	using FastAllocated<NewBlockActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< NewBlockActor, 0, Void >;
friend struct ActorCallback< NewBlockActor, 1, Void >;
friend struct ActorCallback< NewBlockActor, 2, Void >;
friend struct ActorCallback< NewBlockActor, 3, Void >;
friend struct ActorCallback< NewBlockActor, 4, Void >;
															#line 507 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	NewBlockActor(RangeFileWriter* const& self,int const& bytesNeeded,bool const& final = false) 
															#line 2651 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<Void>(),
		   NewBlockActorState<NewBlockActor>(self, bytesNeeded, final)
	{
		fdb_probe_actor_enter("newBlock", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("newBlock");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("newBlock", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< NewBlockActor, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< NewBlockActor, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< NewBlockActor, 2, Void >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< NewBlockActor, 3, Void >*)0, actor_cancelled()); break;
		case 5: this->a_callback_error((ActorCallback< NewBlockActor, 4, Void >*)0, actor_cancelled()); break;
		}

	}
};
															#line 507 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<Void> newBlock( RangeFileWriter* const& self, int const& bytesNeeded, bool const& final = false ) {
															#line 507 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<Void>(new NewBlockActor(self, bytesNeeded, final));
															#line 2682 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 539 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

	// Used in simulation only to create backup file sizes which are an integer multiple of the block size
	Future<Void> padEnd() {
		ASSERT(g_network->isSimulated());
		if (file->size() > 0) {
			return newBlock(this, 0, true);
		}
		return Void();
	}

	// Ends the current block if necessary based on bytesNeeded.
	Future<Void> newBlockIfNeeded(int bytesNeeded) {
		if (file->size() + bytesNeeded > blockEnd)
			return newBlock(this, bytesNeeded);
		return Void();
	}

	// Start a new block if needed, then write the key and value
																#line 2704 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via writeKV_impl()
															#line 557 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class WriteKV_implActor>
															#line 557 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class WriteKV_implActorState {
															#line 2710 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 557 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	WriteKV_implActorState(RangeFileWriter* const& self,Key const& k,Value const& v) 
															#line 557 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 557 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : self(self),
															#line 557 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   k(k),
															#line 557 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   v(v)
															#line 2721 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("writeKV_impl", reinterpret_cast<unsigned long>(this));

	}
	~WriteKV_implActorState() 
	{
		fdb_probe_actor_destroy("writeKV_impl", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 558 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			int toWrite = sizeof(int32_t) + k.size() + sizeof(int32_t) + v.size();
															#line 559 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_0 = self->newBlockIfNeeded(toWrite);
															#line 559 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<WriteKV_implActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 2740 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<WriteKV_implActor*>(this)->actor_wait_state = 1;
															#line 559 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< WriteKV_implActor, 0, Void >*>(static_cast<WriteKV_implActor*>(this)));
															#line 2745 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~WriteKV_implActorState();
		static_cast<WriteKV_implActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void const& _,int loopDepth) 
	{
															#line 560 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_1 = self->file->appendStringRefWithLen(k);
															#line 560 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<WriteKV_implActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 2770 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<WriteKV_implActor*>(this)->actor_wait_state = 2;
															#line 560 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< WriteKV_implActor, 1, Void >*>(static_cast<WriteKV_implActor*>(this)));
															#line 2775 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void && _,int loopDepth) 
	{
															#line 560 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_1 = self->file->appendStringRefWithLen(k);
															#line 560 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<WriteKV_implActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 2786 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<WriteKV_implActor*>(this)->actor_wait_state = 2;
															#line 560 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< WriteKV_implActor, 1, Void >*>(static_cast<WriteKV_implActor*>(this)));
															#line 2791 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<WriteKV_implActor*>(this)->actor_wait_state > 0) static_cast<WriteKV_implActor*>(this)->actor_wait_state = 0;
		static_cast<WriteKV_implActor*>(this)->ActorCallback< WriteKV_implActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< WriteKV_implActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("writeKV_impl", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("writeKV_impl", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< WriteKV_implActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("writeKV_impl", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("writeKV_impl", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< WriteKV_implActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("writeKV_impl", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("writeKV_impl", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont2(Void const& _,int loopDepth) 
	{
															#line 561 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_2 = self->file->appendStringRefWithLen(v);
															#line 561 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<WriteKV_implActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 2865 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont2when1(__when_expr_2.get(), loopDepth); };
		static_cast<WriteKV_implActor*>(this)->actor_wait_state = 3;
															#line 561 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< WriteKV_implActor, 2, Void >*>(static_cast<WriteKV_implActor*>(this)));
															#line 2870 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont2(Void && _,int loopDepth) 
	{
															#line 561 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_2 = self->file->appendStringRefWithLen(v);
															#line 561 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<WriteKV_implActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 2881 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont2when1(__when_expr_2.get(), loopDepth); };
		static_cast<WriteKV_implActor*>(this)->actor_wait_state = 3;
															#line 561 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< WriteKV_implActor, 2, Void >*>(static_cast<WriteKV_implActor*>(this)));
															#line 2886 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<WriteKV_implActor*>(this)->actor_wait_state > 0) static_cast<WriteKV_implActor*>(this)->actor_wait_state = 0;
		static_cast<WriteKV_implActor*>(this)->ActorCallback< WriteKV_implActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< WriteKV_implActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("writeKV_impl", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("writeKV_impl", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< WriteKV_implActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("writeKV_impl", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("writeKV_impl", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< WriteKV_implActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("writeKV_impl", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("writeKV_impl", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont3(Void const& _,int loopDepth) 
	{
															#line 562 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		self->lastKey = k;
															#line 563 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		self->lastValue = v;
															#line 564 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<WriteKV_implActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~WriteKV_implActorState(); static_cast<WriteKV_implActor*>(this)->destroy(); return 0; }
															#line 2962 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<WriteKV_implActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~WriteKV_implActorState();
		static_cast<WriteKV_implActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont3(Void && _,int loopDepth) 
	{
															#line 562 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		self->lastKey = k;
															#line 563 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		self->lastValue = v;
															#line 564 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<WriteKV_implActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~WriteKV_implActorState(); static_cast<WriteKV_implActor*>(this)->destroy(); return 0; }
															#line 2978 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<WriteKV_implActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~WriteKV_implActorState();
		static_cast<WriteKV_implActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont3(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont3(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<WriteKV_implActor*>(this)->actor_wait_state > 0) static_cast<WriteKV_implActor*>(this)->actor_wait_state = 0;
		static_cast<WriteKV_implActor*>(this)->ActorCallback< WriteKV_implActor, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< WriteKV_implActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("writeKV_impl", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("writeKV_impl", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< WriteKV_implActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("writeKV_impl", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("writeKV_impl", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< WriteKV_implActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("writeKV_impl", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("writeKV_impl", reinterpret_cast<unsigned long>(this), 2);

	}
															#line 557 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	RangeFileWriter* self;
															#line 557 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Key k;
															#line 557 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Value v;
															#line 3055 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via writeKV_impl()
															#line 557 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class WriteKV_implActor final : public Actor<Void>, public ActorCallback< WriteKV_implActor, 0, Void >, public ActorCallback< WriteKV_implActor, 1, Void >, public ActorCallback< WriteKV_implActor, 2, Void >, public FastAllocated<WriteKV_implActor>, public WriteKV_implActorState<WriteKV_implActor> {
															#line 3060 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<WriteKV_implActor>::operator new;
	using FastAllocated<WriteKV_implActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< WriteKV_implActor, 0, Void >;
friend struct ActorCallback< WriteKV_implActor, 1, Void >;
friend struct ActorCallback< WriteKV_implActor, 2, Void >;
															#line 557 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	WriteKV_implActor(RangeFileWriter* const& self,Key const& k,Value const& v) 
															#line 3073 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<Void>(),
		   WriteKV_implActorState<WriteKV_implActor>(self, k, v)
	{
		fdb_probe_actor_enter("writeKV_impl", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("writeKV_impl");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("writeKV_impl", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< WriteKV_implActor, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< WriteKV_implActor, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< WriteKV_implActor, 2, Void >*)0, actor_cancelled()); break;
		}

	}
};
															#line 557 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<Void> writeKV_impl( RangeFileWriter* const& self, Key const& k, Value const& v ) {
															#line 557 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<Void>(new WriteKV_implActor(self, k, v));
															#line 3102 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 566 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

	Future<Void> writeKV(Key k, Value v) { return writeKV_impl(this, k, v); }

	// Write begin key or end key.
																#line 3110 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via writeKey_impl()
															#line 570 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class WriteKey_implActor>
															#line 570 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class WriteKey_implActorState {
															#line 3116 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 570 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	WriteKey_implActorState(RangeFileWriter* const& self,Key const& k) 
															#line 570 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 570 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : self(self),
															#line 570 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   k(k)
															#line 3125 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("writeKey_impl", reinterpret_cast<unsigned long>(this));

	}
	~WriteKey_implActorState() 
	{
		fdb_probe_actor_destroy("writeKey_impl", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 571 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			int toWrite = sizeof(uint32_t) + k.size();
															#line 572 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_0 = self->newBlockIfNeeded(toWrite);
															#line 572 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<WriteKey_implActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 3144 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<WriteKey_implActor*>(this)->actor_wait_state = 1;
															#line 572 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< WriteKey_implActor, 0, Void >*>(static_cast<WriteKey_implActor*>(this)));
															#line 3149 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~WriteKey_implActorState();
		static_cast<WriteKey_implActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void const& _,int loopDepth) 
	{
															#line 573 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_1 = self->file->appendStringRefWithLen(k);
															#line 573 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<WriteKey_implActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 3174 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<WriteKey_implActor*>(this)->actor_wait_state = 2;
															#line 573 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< WriteKey_implActor, 1, Void >*>(static_cast<WriteKey_implActor*>(this)));
															#line 3179 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void && _,int loopDepth) 
	{
															#line 573 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_1 = self->file->appendStringRefWithLen(k);
															#line 573 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<WriteKey_implActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 3190 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<WriteKey_implActor*>(this)->actor_wait_state = 2;
															#line 573 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< WriteKey_implActor, 1, Void >*>(static_cast<WriteKey_implActor*>(this)));
															#line 3195 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<WriteKey_implActor*>(this)->actor_wait_state > 0) static_cast<WriteKey_implActor*>(this)->actor_wait_state = 0;
		static_cast<WriteKey_implActor*>(this)->ActorCallback< WriteKey_implActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< WriteKey_implActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("writeKey_impl", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("writeKey_impl", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< WriteKey_implActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("writeKey_impl", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("writeKey_impl", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< WriteKey_implActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("writeKey_impl", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("writeKey_impl", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont2(Void const& _,int loopDepth) 
	{
															#line 574 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<WriteKey_implActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~WriteKey_implActorState(); static_cast<WriteKey_implActor*>(this)->destroy(); return 0; }
															#line 3267 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<WriteKey_implActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~WriteKey_implActorState();
		static_cast<WriteKey_implActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont2(Void && _,int loopDepth) 
	{
															#line 574 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<WriteKey_implActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~WriteKey_implActorState(); static_cast<WriteKey_implActor*>(this)->destroy(); return 0; }
															#line 3279 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<WriteKey_implActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~WriteKey_implActorState();
		static_cast<WriteKey_implActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<WriteKey_implActor*>(this)->actor_wait_state > 0) static_cast<WriteKey_implActor*>(this)->actor_wait_state = 0;
		static_cast<WriteKey_implActor*>(this)->ActorCallback< WriteKey_implActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< WriteKey_implActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("writeKey_impl", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("writeKey_impl", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< WriteKey_implActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("writeKey_impl", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("writeKey_impl", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< WriteKey_implActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("writeKey_impl", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("writeKey_impl", reinterpret_cast<unsigned long>(this), 1);

	}
															#line 570 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	RangeFileWriter* self;
															#line 570 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Key k;
															#line 3354 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via writeKey_impl()
															#line 570 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class WriteKey_implActor final : public Actor<Void>, public ActorCallback< WriteKey_implActor, 0, Void >, public ActorCallback< WriteKey_implActor, 1, Void >, public FastAllocated<WriteKey_implActor>, public WriteKey_implActorState<WriteKey_implActor> {
															#line 3359 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<WriteKey_implActor>::operator new;
	using FastAllocated<WriteKey_implActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< WriteKey_implActor, 0, Void >;
friend struct ActorCallback< WriteKey_implActor, 1, Void >;
															#line 570 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	WriteKey_implActor(RangeFileWriter* const& self,Key const& k) 
															#line 3371 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<Void>(),
		   WriteKey_implActorState<WriteKey_implActor>(self, k)
	{
		fdb_probe_actor_enter("writeKey_impl", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("writeKey_impl");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("writeKey_impl", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< WriteKey_implActor, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< WriteKey_implActor, 1, Void >*)0, actor_cancelled()); break;
		}

	}
};
															#line 570 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<Void> writeKey_impl( RangeFileWriter* const& self, Key const& k ) {
															#line 570 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<Void>(new WriteKey_implActor(self, k));
															#line 3399 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 576 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

	Future<Void> writeKey(Key k) { return writeKey_impl(this, k); }

	Reference<IBackupFile> file;
	int blockSize;

private:
	int64_t blockEnd;
	uint32_t fileVersion;
	Key lastKey;
	Key lastValue;
};

static Reference<IBackupContainer> getBackupContainerWithProxy(Reference<IBackupContainer> _bc) {
	Reference<IBackupContainer> bc = IBackupContainer::openContainer(_bc->getURL(), fileBackupAgentProxy, {});
	return bc;
}

Standalone<VectorRef<KeyValueRef>> decodeRangeFileBlock(const Standalone<StringRef>& buf) {
	Standalone<VectorRef<KeyValueRef>> results({}, buf.arena());
	StringRefReader reader(buf, restore_corrupted_data());

	// Read header, currently only decoding BACKUP_AGENT_SNAPSHOT_FILE_VERSION
	if (reader.consume<int32_t>() != BACKUP_AGENT_SNAPSHOT_FILE_VERSION)
		throw restore_unsupported_file_version();

	// Read begin key, if this fails then block was invalid.
	uint32_t kLen = reader.consumeNetworkUInt32();
	const uint8_t* k = reader.consume(kLen);
	results.push_back(results.arena(), KeyValueRef(KeyRef(k, kLen), ValueRef()));

	// Read kv pairs and end key
	while (1) {
		// Read a key.
		kLen = reader.consumeNetworkUInt32();
		k = reader.consume(kLen);

		// If eof reached or first value len byte is 0xFF then a valid block end was reached.
		if (reader.eof() || *reader.rptr == 0xFF) {
			results.push_back(results.arena(), KeyValueRef(KeyRef(k, kLen), ValueRef()));
			break;
		}

		// Read a value, which must exist or the block is invalid
		uint32_t vLen = reader.consumeNetworkUInt32();
		const uint8_t* v = reader.consume(vLen);
		results.push_back(results.arena(), KeyValueRef(KeyRef(k, kLen), ValueRef(v, vLen)));

		// If eof reached or first byte of next key len is 0xFF then a valid block end was reached.
		if (reader.eof() || *reader.rptr == 0xFF)
			break;
	}

	// Make sure any remaining bytes in the block are 0xFF
	for (auto b : reader.remainder())
		if (b != 0xFF)
			throw restore_corrupted_data_padding();

	return results;
}

															#line 3464 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via decodeRangeFileBlock()
															#line 637 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class DecodeRangeFileBlockActor>
															#line 637 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class DecodeRangeFileBlockActorState {
															#line 3470 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 637 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	DecodeRangeFileBlockActorState(Reference<IAsyncFile> const& file,int64_t const& offset,int const& len) 
															#line 637 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 637 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : file(file),
															#line 637 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   offset(offset),
															#line 637 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   len(len),
															#line 640 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   buf(makeString(len))
															#line 3483 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("decodeRangeFileBlock", reinterpret_cast<unsigned long>(this));

	}
	~DecodeRangeFileBlockActorState() 
	{
		fdb_probe_actor_destroy("decodeRangeFileBlock", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 641 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<int> __when_expr_0 = uncancellable(holdWhile(buf, file->read(mutateString(buf), len, offset)));
															#line 641 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<DecodeRangeFileBlockActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 3500 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<DecodeRangeFileBlockActor*>(this)->actor_wait_state = 1;
															#line 641 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< DecodeRangeFileBlockActor, 0, int >*>(static_cast<DecodeRangeFileBlockActor*>(this)));
															#line 3505 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~DecodeRangeFileBlockActorState();
		static_cast<DecodeRangeFileBlockActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int const& rLen,int loopDepth) 
	{
															#line 642 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (rLen != len)
															#line 3528 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 643 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			return a_body1Catch1(restore_bad_read(), loopDepth);
															#line 3532 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 645 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		simulateBlobFailure();
															#line 3536 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		try {
															#line 648 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (!static_cast<DecodeRangeFileBlockActor*>(this)->SAV<Standalone<VectorRef<KeyValueRef>>>::futures) { (void)(decodeRangeFileBlock(buf)); this->~DecodeRangeFileBlockActorState(); static_cast<DecodeRangeFileBlockActor*>(this)->destroy(); return 0; }
															#line 3540 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			new (&static_cast<DecodeRangeFileBlockActor*>(this)->SAV< Standalone<VectorRef<KeyValueRef>> >::value()) Standalone<VectorRef<KeyValueRef>>(decodeRangeFileBlock(buf));
			this->~DecodeRangeFileBlockActorState();
			static_cast<DecodeRangeFileBlockActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
		catch (Error& error) {
			loopDepth = a_body1cont1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1cont1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont1(int && rLen,int loopDepth) 
	{
															#line 642 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (rLen != len)
															#line 3558 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 643 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			return a_body1Catch1(restore_bad_read(), loopDepth);
															#line 3562 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 645 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		simulateBlobFailure();
															#line 3566 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		try {
															#line 648 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (!static_cast<DecodeRangeFileBlockActor*>(this)->SAV<Standalone<VectorRef<KeyValueRef>>>::futures) { (void)(decodeRangeFileBlock(buf)); this->~DecodeRangeFileBlockActorState(); static_cast<DecodeRangeFileBlockActor*>(this)->destroy(); return 0; }
															#line 3570 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			new (&static_cast<DecodeRangeFileBlockActor*>(this)->SAV< Standalone<VectorRef<KeyValueRef>> >::value()) Standalone<VectorRef<KeyValueRef>>(decodeRangeFileBlock(buf));
			this->~DecodeRangeFileBlockActorState();
			static_cast<DecodeRangeFileBlockActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
		catch (Error& error) {
			loopDepth = a_body1cont1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1cont1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1when1(int const& rLen,int loopDepth) 
	{
		loopDepth = a_body1cont1(rLen, loopDepth);

		return loopDepth;
	}
	int a_body1when1(int && rLen,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(rLen), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<DecodeRangeFileBlockActor*>(this)->actor_wait_state > 0) static_cast<DecodeRangeFileBlockActor*>(this)->actor_wait_state = 0;
		static_cast<DecodeRangeFileBlockActor*>(this)->ActorCallback< DecodeRangeFileBlockActor, 0, int >::remove();

	}
	void a_callback_fire(ActorCallback< DecodeRangeFileBlockActor, 0, int >*,int const& value) 
	{
		fdb_probe_actor_enter("decodeRangeFileBlock", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("decodeRangeFileBlock", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< DecodeRangeFileBlockActor, 0, int >*,int && value) 
	{
		fdb_probe_actor_enter("decodeRangeFileBlock", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("decodeRangeFileBlock", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< DecodeRangeFileBlockActor, 0, int >*,Error err) 
	{
		fdb_probe_actor_enter("decodeRangeFileBlock", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("decodeRangeFileBlock", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 650 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			TraceEvent(SevWarn, "FileRestoreDecodeRangeFileBlockFailed") .error(e) .detail("Filename", file->getFilename()) .detail("BlockOffset", offset) .detail("BlockLen", len);
															#line 655 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			return a_body1Catch1(e, loopDepth);
															#line 3654 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
															#line 637 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<IAsyncFile> file;
															#line 637 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int64_t offset;
															#line 637 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int len;
															#line 640 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Standalone<StringRef> buf;
															#line 3672 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via decodeRangeFileBlock()
															#line 637 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class DecodeRangeFileBlockActor final : public Actor<Standalone<VectorRef<KeyValueRef>>>, public ActorCallback< DecodeRangeFileBlockActor, 0, int >, public FastAllocated<DecodeRangeFileBlockActor>, public DecodeRangeFileBlockActorState<DecodeRangeFileBlockActor> {
															#line 3677 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<DecodeRangeFileBlockActor>::operator new;
	using FastAllocated<DecodeRangeFileBlockActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Standalone<VectorRef<KeyValueRef>>>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< DecodeRangeFileBlockActor, 0, int >;
															#line 637 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	DecodeRangeFileBlockActor(Reference<IAsyncFile> const& file,int64_t const& offset,int const& len) 
															#line 3688 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<Standalone<VectorRef<KeyValueRef>>>(),
		   DecodeRangeFileBlockActorState<DecodeRangeFileBlockActor>(file, offset, len)
	{
		fdb_probe_actor_enter("decodeRangeFileBlock", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("decodeRangeFileBlock");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("decodeRangeFileBlock", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< DecodeRangeFileBlockActor, 0, int >*)0, actor_cancelled()); break;
		}

	}
};
															#line 637 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] Future<Standalone<VectorRef<KeyValueRef>>> decodeRangeFileBlock( Reference<IAsyncFile> const& file, int64_t const& offset, int const& len ) {
															#line 637 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<Standalone<VectorRef<KeyValueRef>>>(new DecodeRangeFileBlockActor(file, offset, len));
															#line 3715 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 658 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

// Very simple format compared to KeyRange files.
// Header, [Key, Value]... Key len
struct LogFileWriter {
	LogFileWriter(Reference<IBackupFile> file = Reference<IBackupFile>(), int blockSize = 0)
	  : file(file), blockSize(blockSize), blockEnd(0) {}

	// Start a new block if needed, then write the key and value
																#line 3727 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via writeKV_impl()
															#line 666 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class WriteKV_implActor1>
															#line 666 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class WriteKV_implActor1State {
															#line 3733 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 666 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	WriteKV_implActor1State(LogFileWriter* const& self,Key const& k,Value const& v) 
															#line 666 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 666 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : self(self),
															#line 666 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   k(k),
															#line 666 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   v(v)
															#line 3744 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("writeKV_impl", reinterpret_cast<unsigned long>(this));

	}
	~WriteKV_implActor1State() 
	{
		fdb_probe_actor_destroy("writeKV_impl", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 668 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			int toWrite = sizeof(int32_t) + k.size() + sizeof(int32_t) + v.size();
															#line 669 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (self->file->size() + toWrite > self->blockEnd)
															#line 3761 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			{
															#line 671 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				int bytesLeft = self->blockEnd - self->file->size();
															#line 672 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				if (bytesLeft > 0)
															#line 3767 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				{
															#line 673 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
					paddingFFs = makePadding(bytesLeft);
															#line 674 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
					StrictFuture<Void> __when_expr_0 = self->file->append(paddingFFs.begin(), bytesLeft);
															#line 674 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
					if (static_cast<WriteKV_implActor1*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 3775 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
					if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
					static_cast<WriteKV_implActor1*>(this)->actor_wait_state = 1;
															#line 674 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
					__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< WriteKV_implActor1, 0, Void >*>(static_cast<WriteKV_implActor1*>(this)));
															#line 3780 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
					loopDepth = 0;
				}
				else
				{
					loopDepth = a_body1cont2(loopDepth);
				}
			}
			else
			{
				loopDepth = a_body1cont1(loopDepth);
			}
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~WriteKV_implActor1State();
		static_cast<WriteKV_implActor1*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 684 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_2 = self->file->appendStringRefWithLen(k);
															#line 684 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<WriteKV_implActor1*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 3815 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont1when1(__when_expr_2.get(), loopDepth); };
		static_cast<WriteKV_implActor1*>(this)->actor_wait_state = 3;
															#line 684 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< WriteKV_implActor1, 2, Void >*>(static_cast<WriteKV_implActor1*>(this)));
															#line 3820 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont2(int loopDepth) 
	{
															#line 678 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		self->blockEnd += self->blockSize;
															#line 681 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_1 = self->file->append((uint8_t*)&BACKUP_AGENT_MLOG_VERSION, sizeof(BACKUP_AGENT_MLOG_VERSION));
															#line 681 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<WriteKV_implActor1*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 3833 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont2when1(__when_expr_1.get(), loopDepth); };
		static_cast<WriteKV_implActor1*>(this)->actor_wait_state = 2;
															#line 681 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< WriteKV_implActor1, 1, Void >*>(static_cast<WriteKV_implActor1*>(this)));
															#line 3838 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont3(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont2(loopDepth);

		return loopDepth;
	}
	int a_body1cont3(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont2(loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont3(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont3(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<WriteKV_implActor1*>(this)->actor_wait_state > 0) static_cast<WriteKV_implActor1*>(this)->actor_wait_state = 0;
		static_cast<WriteKV_implActor1*>(this)->ActorCallback< WriteKV_implActor1, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< WriteKV_implActor1, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("writeKV_impl", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("writeKV_impl", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< WriteKV_implActor1, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("writeKV_impl", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("writeKV_impl", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< WriteKV_implActor1, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("writeKV_impl", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("writeKV_impl", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont4(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont4(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont4(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont4(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<WriteKV_implActor1*>(this)->actor_wait_state > 0) static_cast<WriteKV_implActor1*>(this)->actor_wait_state = 0;
		static_cast<WriteKV_implActor1*>(this)->ActorCallback< WriteKV_implActor1, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< WriteKV_implActor1, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("writeKV_impl", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("writeKV_impl", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< WriteKV_implActor1, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("writeKV_impl", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("writeKV_impl", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< WriteKV_implActor1, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("writeKV_impl", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("writeKV_impl", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont5(Void const& _,int loopDepth) 
	{
															#line 685 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_3 = self->file->appendStringRefWithLen(v);
															#line 685 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<WriteKV_implActor1*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 3999 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1cont5when1(__when_expr_3.get(), loopDepth); };
		static_cast<WriteKV_implActor1*>(this)->actor_wait_state = 4;
															#line 685 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< WriteKV_implActor1, 3, Void >*>(static_cast<WriteKV_implActor1*>(this)));
															#line 4004 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont5(Void && _,int loopDepth) 
	{
															#line 685 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_3 = self->file->appendStringRefWithLen(v);
															#line 685 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<WriteKV_implActor1*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 4015 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1cont5when1(__when_expr_3.get(), loopDepth); };
		static_cast<WriteKV_implActor1*>(this)->actor_wait_state = 4;
															#line 685 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< WriteKV_implActor1, 3, Void >*>(static_cast<WriteKV_implActor1*>(this)));
															#line 4020 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont5(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont5(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<WriteKV_implActor1*>(this)->actor_wait_state > 0) static_cast<WriteKV_implActor1*>(this)->actor_wait_state = 0;
		static_cast<WriteKV_implActor1*>(this)->ActorCallback< WriteKV_implActor1, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< WriteKV_implActor1, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("writeKV_impl", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("writeKV_impl", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< WriteKV_implActor1, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("writeKV_impl", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("writeKV_impl", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< WriteKV_implActor1, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("writeKV_impl", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("writeKV_impl", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1cont6(Void const& _,int loopDepth) 
	{
															#line 688 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (self->file->size() > self->blockEnd)
															#line 4092 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 689 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			return a_body1Catch1(backup_bad_block_size(), loopDepth);
															#line 4096 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 691 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<WriteKV_implActor1*>(this)->SAV<Void>::futures) { (void)(Void()); this->~WriteKV_implActor1State(); static_cast<WriteKV_implActor1*>(this)->destroy(); return 0; }
															#line 4100 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<WriteKV_implActor1*>(this)->SAV< Void >::value()) Void(Void());
		this->~WriteKV_implActor1State();
		static_cast<WriteKV_implActor1*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont6(Void && _,int loopDepth) 
	{
															#line 688 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (self->file->size() > self->blockEnd)
															#line 4112 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 689 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			return a_body1Catch1(backup_bad_block_size(), loopDepth);
															#line 4116 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 691 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<WriteKV_implActor1*>(this)->SAV<Void>::futures) { (void)(Void()); this->~WriteKV_implActor1State(); static_cast<WriteKV_implActor1*>(this)->destroy(); return 0; }
															#line 4120 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<WriteKV_implActor1*>(this)->SAV< Void >::value()) Void(Void());
		this->~WriteKV_implActor1State();
		static_cast<WriteKV_implActor1*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont5when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont6(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont5when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont6(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<WriteKV_implActor1*>(this)->actor_wait_state > 0) static_cast<WriteKV_implActor1*>(this)->actor_wait_state = 0;
		static_cast<WriteKV_implActor1*>(this)->ActorCallback< WriteKV_implActor1, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< WriteKV_implActor1, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("writeKV_impl", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont5when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("writeKV_impl", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< WriteKV_implActor1, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("writeKV_impl", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont5when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("writeKV_impl", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< WriteKV_implActor1, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("writeKV_impl", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("writeKV_impl", reinterpret_cast<unsigned long>(this), 3);

	}
															#line 666 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	LogFileWriter* self;
															#line 666 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Key k;
															#line 666 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Value v;
															#line 673 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Value paddingFFs;
															#line 4199 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via writeKV_impl()
															#line 666 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class WriteKV_implActor1 final : public Actor<Void>, public ActorCallback< WriteKV_implActor1, 0, Void >, public ActorCallback< WriteKV_implActor1, 1, Void >, public ActorCallback< WriteKV_implActor1, 2, Void >, public ActorCallback< WriteKV_implActor1, 3, Void >, public FastAllocated<WriteKV_implActor1>, public WriteKV_implActor1State<WriteKV_implActor1> {
															#line 4204 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<WriteKV_implActor1>::operator new;
	using FastAllocated<WriteKV_implActor1>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< WriteKV_implActor1, 0, Void >;
friend struct ActorCallback< WriteKV_implActor1, 1, Void >;
friend struct ActorCallback< WriteKV_implActor1, 2, Void >;
friend struct ActorCallback< WriteKV_implActor1, 3, Void >;
															#line 666 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	WriteKV_implActor1(LogFileWriter* const& self,Key const& k,Value const& v) 
															#line 4218 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<Void>(),
		   WriteKV_implActor1State<WriteKV_implActor1>(self, k, v)
	{
		fdb_probe_actor_enter("writeKV_impl", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("writeKV_impl");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("writeKV_impl", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< WriteKV_implActor1, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< WriteKV_implActor1, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< WriteKV_implActor1, 2, Void >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< WriteKV_implActor1, 3, Void >*)0, actor_cancelled()); break;
		}

	}
};
															#line 666 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<Void> writeKV_impl( LogFileWriter* const& self, Key const& k, Value const& v ) {
															#line 666 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<Void>(new WriteKV_implActor1(self, k, v));
															#line 4248 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 693 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

	Future<Void> writeKV(Key k, Value v) { return writeKV_impl(this, k, v); }

	Reference<IBackupFile> file;
	int blockSize;

private:
	int64_t blockEnd;
};

Standalone<VectorRef<KeyValueRef>> decodeMutationLogFileBlock(const Standalone<StringRef>& buf) {
	Standalone<VectorRef<KeyValueRef>> results({}, buf.arena());
	StringRefReader reader(buf, restore_corrupted_data());

	// Read header, currently only decoding version BACKUP_AGENT_MLOG_VERSION
	if (reader.consume<int32_t>() != BACKUP_AGENT_MLOG_VERSION)
		throw restore_unsupported_file_version();

	// Read k/v pairs.  Block ends either at end of last value exactly or with 0xFF as first key len byte.
	while (1) {
		// If eof reached or first key len bytes is 0xFF then end of block was reached.
		if (reader.eof() || *reader.rptr == 0xFF)
			break;

		// Read key and value.  If anything throws then there is a problem.
		uint32_t kLen = reader.consumeNetworkUInt32();
		const uint8_t* k = reader.consume(kLen);
		uint32_t vLen = reader.consumeNetworkUInt32();
		const uint8_t* v = reader.consume(vLen);

		results.push_back(results.arena(), KeyValueRef(KeyRef(k, kLen), ValueRef(v, vLen)));
	}

	// Make sure any remaining bytes in the block are 0xFF
	for (auto b : reader.remainder())
		if (b != 0xFF)
			throw restore_corrupted_data_padding();

	return results;
}

															#line 4293 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via decodeMutationLogFileBlock()
															#line 734 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class DecodeMutationLogFileBlockActor>
															#line 734 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class DecodeMutationLogFileBlockActorState {
															#line 4299 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 734 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	DecodeMutationLogFileBlockActorState(Reference<IAsyncFile> const& file,int64_t const& offset,int const& len) 
															#line 734 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 734 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : file(file),
															#line 734 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   offset(offset),
															#line 734 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   len(len),
															#line 737 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   buf(makeString(len))
															#line 4312 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("decodeMutationLogFileBlock", reinterpret_cast<unsigned long>(this));

	}
	~DecodeMutationLogFileBlockActorState() 
	{
		fdb_probe_actor_destroy("decodeMutationLogFileBlock", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 738 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<int> __when_expr_0 = file->read(mutateString(buf), len, offset);
															#line 738 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<DecodeMutationLogFileBlockActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 4329 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<DecodeMutationLogFileBlockActor*>(this)->actor_wait_state = 1;
															#line 738 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< DecodeMutationLogFileBlockActor, 0, int >*>(static_cast<DecodeMutationLogFileBlockActor*>(this)));
															#line 4334 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~DecodeMutationLogFileBlockActorState();
		static_cast<DecodeMutationLogFileBlockActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int const& rLen,int loopDepth) 
	{
															#line 739 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (rLen != len)
															#line 4357 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 740 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			return a_body1Catch1(restore_bad_read(), loopDepth);
															#line 4361 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
		try {
															#line 743 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (!static_cast<DecodeMutationLogFileBlockActor*>(this)->SAV<Standalone<VectorRef<KeyValueRef>>>::futures) { (void)(decodeMutationLogFileBlock(buf)); this->~DecodeMutationLogFileBlockActorState(); static_cast<DecodeMutationLogFileBlockActor*>(this)->destroy(); return 0; }
															#line 4366 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			new (&static_cast<DecodeMutationLogFileBlockActor*>(this)->SAV< Standalone<VectorRef<KeyValueRef>> >::value()) Standalone<VectorRef<KeyValueRef>>(decodeMutationLogFileBlock(buf));
			this->~DecodeMutationLogFileBlockActorState();
			static_cast<DecodeMutationLogFileBlockActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
		catch (Error& error) {
			loopDepth = a_body1cont1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1cont1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont1(int && rLen,int loopDepth) 
	{
															#line 739 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (rLen != len)
															#line 4384 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 740 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			return a_body1Catch1(restore_bad_read(), loopDepth);
															#line 4388 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
		try {
															#line 743 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (!static_cast<DecodeMutationLogFileBlockActor*>(this)->SAV<Standalone<VectorRef<KeyValueRef>>>::futures) { (void)(decodeMutationLogFileBlock(buf)); this->~DecodeMutationLogFileBlockActorState(); static_cast<DecodeMutationLogFileBlockActor*>(this)->destroy(); return 0; }
															#line 4393 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			new (&static_cast<DecodeMutationLogFileBlockActor*>(this)->SAV< Standalone<VectorRef<KeyValueRef>> >::value()) Standalone<VectorRef<KeyValueRef>>(decodeMutationLogFileBlock(buf));
			this->~DecodeMutationLogFileBlockActorState();
			static_cast<DecodeMutationLogFileBlockActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
		catch (Error& error) {
			loopDepth = a_body1cont1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1cont1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1when1(int const& rLen,int loopDepth) 
	{
		loopDepth = a_body1cont1(rLen, loopDepth);

		return loopDepth;
	}
	int a_body1when1(int && rLen,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(rLen), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<DecodeMutationLogFileBlockActor*>(this)->actor_wait_state > 0) static_cast<DecodeMutationLogFileBlockActor*>(this)->actor_wait_state = 0;
		static_cast<DecodeMutationLogFileBlockActor*>(this)->ActorCallback< DecodeMutationLogFileBlockActor, 0, int >::remove();

	}
	void a_callback_fire(ActorCallback< DecodeMutationLogFileBlockActor, 0, int >*,int const& value) 
	{
		fdb_probe_actor_enter("decodeMutationLogFileBlock", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("decodeMutationLogFileBlock", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< DecodeMutationLogFileBlockActor, 0, int >*,int && value) 
	{
		fdb_probe_actor_enter("decodeMutationLogFileBlock", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("decodeMutationLogFileBlock", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< DecodeMutationLogFileBlockActor, 0, int >*,Error err) 
	{
		fdb_probe_actor_enter("decodeMutationLogFileBlock", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("decodeMutationLogFileBlock", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 745 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			TraceEvent(SevWarn, "FileRestoreCorruptLogFileBlock") .error(e) .detail("Filename", file->getFilename()) .detail("BlockOffset", offset) .detail("BlockLen", len);
															#line 750 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			return a_body1Catch1(e, loopDepth);
															#line 4477 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
															#line 734 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<IAsyncFile> file;
															#line 734 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int64_t offset;
															#line 734 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int len;
															#line 737 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Standalone<StringRef> buf;
															#line 4495 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via decodeMutationLogFileBlock()
															#line 734 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class DecodeMutationLogFileBlockActor final : public Actor<Standalone<VectorRef<KeyValueRef>>>, public ActorCallback< DecodeMutationLogFileBlockActor, 0, int >, public FastAllocated<DecodeMutationLogFileBlockActor>, public DecodeMutationLogFileBlockActorState<DecodeMutationLogFileBlockActor> {
															#line 4500 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<DecodeMutationLogFileBlockActor>::operator new;
	using FastAllocated<DecodeMutationLogFileBlockActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Standalone<VectorRef<KeyValueRef>>>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< DecodeMutationLogFileBlockActor, 0, int >;
															#line 734 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	DecodeMutationLogFileBlockActor(Reference<IAsyncFile> const& file,int64_t const& offset,int const& len) 
															#line 4511 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<Standalone<VectorRef<KeyValueRef>>>(),
		   DecodeMutationLogFileBlockActorState<DecodeMutationLogFileBlockActor>(file, offset, len)
	{
		fdb_probe_actor_enter("decodeMutationLogFileBlock", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("decodeMutationLogFileBlock");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("decodeMutationLogFileBlock", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< DecodeMutationLogFileBlockActor, 0, int >*)0, actor_cancelled()); break;
		}

	}
};
															#line 734 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] Future<Standalone<VectorRef<KeyValueRef>>> decodeMutationLogFileBlock( Reference<IAsyncFile> const& file, int64_t const& offset, int const& len ) {
															#line 734 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<Standalone<VectorRef<KeyValueRef>>>(new DecodeMutationLogFileBlockActor(file, offset, len));
															#line 4538 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 753 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

															#line 4543 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via checkTaskVersion()
															#line 754 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class CheckTaskVersionActor>
															#line 754 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class CheckTaskVersionActorState {
															#line 4549 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 754 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	CheckTaskVersionActorState(Database const& cx,Reference<Task> const& task,StringRef const& name,uint32_t const& version) 
															#line 754 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 754 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : cx(cx),
															#line 754 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   task(task),
															#line 754 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   name(name),
															#line 754 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   version(version)
															#line 4562 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("checkTaskVersion", reinterpret_cast<unsigned long>(this));

	}
	~CheckTaskVersionActorState() 
	{
		fdb_probe_actor_destroy("checkTaskVersion", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 755 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			uint32_t taskVersion = task->getVersion();
															#line 756 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (taskVersion > version)
															#line 4579 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			{
															#line 757 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				err = task_invalid_version();
															#line 759 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				TraceEvent(SevWarn, "BA_BackupRangeTaskFuncExecute") .detail("TaskVersion", taskVersion) .detail("Name", name) .detail("Version", version);
															#line 763 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				if (KeyBackedConfig::TaskParams.uid().exists(task))
															#line 4587 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				{
															#line 764 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
					std::string msg = format("%s task version `%lu' is greater than supported version `%lu'", task->params[Task::reservedTaskParamKeyType].toString().c_str(), (unsigned long)taskVersion, (unsigned long)version);
															#line 768 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
					StrictFuture<Void> __when_expr_0 = BackupConfig(task).logError(cx, err, msg);
															#line 768 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
					if (static_cast<CheckTaskVersionActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 4595 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
					if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
					static_cast<CheckTaskVersionActor*>(this)->actor_wait_state = 1;
															#line 768 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
					__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< CheckTaskVersionActor, 0, Void >*>(static_cast<CheckTaskVersionActor*>(this)));
															#line 4600 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
					loopDepth = 0;
				}
				else
				{
					loopDepth = a_body1cont2(loopDepth);
				}
			}
			else
			{
				loopDepth = a_body1cont1(loopDepth);
			}
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~CheckTaskVersionActorState();
		static_cast<CheckTaskVersionActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 774 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<CheckTaskVersionActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~CheckTaskVersionActorState(); static_cast<CheckTaskVersionActor*>(this)->destroy(); return 0; }
															#line 4633 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<CheckTaskVersionActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~CheckTaskVersionActorState();
		static_cast<CheckTaskVersionActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont2(int loopDepth) 
	{
															#line 771 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		return a_body1Catch1(err, loopDepth);
															#line 4645 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"

		return loopDepth;
	}
	int a_body1cont3(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont2(loopDepth);

		return loopDepth;
	}
	int a_body1cont3(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont2(loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont3(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont3(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<CheckTaskVersionActor*>(this)->actor_wait_state > 0) static_cast<CheckTaskVersionActor*>(this)->actor_wait_state = 0;
		static_cast<CheckTaskVersionActor*>(this)->ActorCallback< CheckTaskVersionActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< CheckTaskVersionActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("checkTaskVersion", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("checkTaskVersion", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< CheckTaskVersionActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("checkTaskVersion", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("checkTaskVersion", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< CheckTaskVersionActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("checkTaskVersion", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("checkTaskVersion", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 754 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Database cx;
															#line 754 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<Task> task;
															#line 754 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	StringRef name;
															#line 754 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	uint32_t version;
															#line 757 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Error err;
															#line 4734 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via checkTaskVersion()
															#line 754 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class CheckTaskVersionActor final : public Actor<Void>, public ActorCallback< CheckTaskVersionActor, 0, Void >, public FastAllocated<CheckTaskVersionActor>, public CheckTaskVersionActorState<CheckTaskVersionActor> {
															#line 4739 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<CheckTaskVersionActor>::operator new;
	using FastAllocated<CheckTaskVersionActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< CheckTaskVersionActor, 0, Void >;
															#line 754 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	CheckTaskVersionActor(Database const& cx,Reference<Task> const& task,StringRef const& name,uint32_t const& version) 
															#line 4750 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<Void>(),
		   CheckTaskVersionActorState<CheckTaskVersionActor>(cx, task, name, version)
	{
		fdb_probe_actor_enter("checkTaskVersion", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("checkTaskVersion");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("checkTaskVersion", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< CheckTaskVersionActor, 0, Void >*)0, actor_cancelled()); break;
		}

	}
};
															#line 754 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] Future<Void> checkTaskVersion( Database const& cx, Reference<Task> const& task, StringRef const& name, uint32_t const& version ) {
															#line 754 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<Void>(new CheckTaskVersionActor(cx, task, name, version));
															#line 4777 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 776 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

															#line 4782 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via abortFiveZeroBackup()
															#line 777 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class AbortFiveZeroBackupActor>
															#line 777 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class AbortFiveZeroBackupActorState {
															#line 4788 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 777 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	AbortFiveZeroBackupActorState(FileBackupAgent* const& backupAgent,Reference<ReadYourWritesTransaction> const& tr,std::string const& tagName) 
															#line 777 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 777 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : backupAgent(backupAgent),
															#line 777 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   tr(tr),
															#line 777 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   tagName(tagName)
															#line 4799 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("abortFiveZeroBackup", reinterpret_cast<unsigned long>(this));

	}
	~AbortFiveZeroBackupActorState() 
	{
		fdb_probe_actor_destroy("abortFiveZeroBackup", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 780 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 781 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 783 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tagNames = backupAgent->subspace.get(BackupAgentBase::keyTagName);
															#line 784 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Optional<Value>> __when_expr_0 = tr->get(tagNames.pack(Key(tagName)));
															#line 784 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<AbortFiveZeroBackupActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 4822 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<AbortFiveZeroBackupActor*>(this)->actor_wait_state = 1;
															#line 784 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< AbortFiveZeroBackupActor, 0, Optional<Value> >*>(static_cast<AbortFiveZeroBackupActor*>(this)));
															#line 4827 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~AbortFiveZeroBackupActorState();
		static_cast<AbortFiveZeroBackupActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Optional<Value> const& uidStr,int loopDepth) 
	{
															#line 785 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!uidStr.present())
															#line 4850 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 786 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			TraceEvent(SevWarn, "FileBackupAbortIncompatibleBackup_TagNotFound").detail("TagName", tagName.c_str());
															#line 787 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (!static_cast<AbortFiveZeroBackupActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~AbortFiveZeroBackupActorState(); static_cast<AbortFiveZeroBackupActor*>(this)->destroy(); return 0; }
															#line 4856 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			new (&static_cast<AbortFiveZeroBackupActor*>(this)->SAV< Void >::value()) Void(Void());
			this->~AbortFiveZeroBackupActorState();
			static_cast<AbortFiveZeroBackupActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 789 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		uid = BinaryReader::fromStringRef<UID>(uidStr.get(), Unversioned());
															#line 791 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		statusSpace = backupAgent->subspace.get(BackupAgentBase::keyStates).get(uid.toString());
															#line 792 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		globalConfig = backupAgent->subspace.get(BackupAgentBase::keyConfig).get(uid.toString());
															#line 793 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		newConfigSpace = uidPrefixKey(LiteralStringRef("uid->config/").withPrefix(fileBackupPrefixRange.begin), uid);
															#line 796 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Optional<Value>> __when_expr_1 = tr->get(statusSpace.pack(FileBackupAgent::keyStateStatus));
															#line 796 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<AbortFiveZeroBackupActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 4874 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<AbortFiveZeroBackupActor*>(this)->actor_wait_state = 2;
															#line 796 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< AbortFiveZeroBackupActor, 1, Optional<Value> >*>(static_cast<AbortFiveZeroBackupActor*>(this)));
															#line 4879 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Optional<Value> && uidStr,int loopDepth) 
	{
															#line 785 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!uidStr.present())
															#line 4888 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 786 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			TraceEvent(SevWarn, "FileBackupAbortIncompatibleBackup_TagNotFound").detail("TagName", tagName.c_str());
															#line 787 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (!static_cast<AbortFiveZeroBackupActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~AbortFiveZeroBackupActorState(); static_cast<AbortFiveZeroBackupActor*>(this)->destroy(); return 0; }
															#line 4894 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			new (&static_cast<AbortFiveZeroBackupActor*>(this)->SAV< Void >::value()) Void(Void());
			this->~AbortFiveZeroBackupActorState();
			static_cast<AbortFiveZeroBackupActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 789 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		uid = BinaryReader::fromStringRef<UID>(uidStr.get(), Unversioned());
															#line 791 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		statusSpace = backupAgent->subspace.get(BackupAgentBase::keyStates).get(uid.toString());
															#line 792 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		globalConfig = backupAgent->subspace.get(BackupAgentBase::keyConfig).get(uid.toString());
															#line 793 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		newConfigSpace = uidPrefixKey(LiteralStringRef("uid->config/").withPrefix(fileBackupPrefixRange.begin), uid);
															#line 796 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Optional<Value>> __when_expr_1 = tr->get(statusSpace.pack(FileBackupAgent::keyStateStatus));
															#line 796 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<AbortFiveZeroBackupActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 4912 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<AbortFiveZeroBackupActor*>(this)->actor_wait_state = 2;
															#line 796 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< AbortFiveZeroBackupActor, 1, Optional<Value> >*>(static_cast<AbortFiveZeroBackupActor*>(this)));
															#line 4917 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1when1(Optional<Value> const& uidStr,int loopDepth) 
	{
		loopDepth = a_body1cont1(uidStr, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Optional<Value> && uidStr,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(uidStr), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<AbortFiveZeroBackupActor*>(this)->actor_wait_state > 0) static_cast<AbortFiveZeroBackupActor*>(this)->actor_wait_state = 0;
		static_cast<AbortFiveZeroBackupActor*>(this)->ActorCallback< AbortFiveZeroBackupActor, 0, Optional<Value> >::remove();

	}
	void a_callback_fire(ActorCallback< AbortFiveZeroBackupActor, 0, Optional<Value> >*,Optional<Value> const& value) 
	{
		fdb_probe_actor_enter("abortFiveZeroBackup", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("abortFiveZeroBackup", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< AbortFiveZeroBackupActor, 0, Optional<Value> >*,Optional<Value> && value) 
	{
		fdb_probe_actor_enter("abortFiveZeroBackup", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("abortFiveZeroBackup", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< AbortFiveZeroBackupActor, 0, Optional<Value> >*,Error err) 
	{
		fdb_probe_actor_enter("abortFiveZeroBackup", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("abortFiveZeroBackup", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont2(Optional<Value> const& statusStr,int loopDepth) 
	{
															#line 797 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		status = !statusStr.present() ? EBackupState::STATE_NEVERRAN : BackupAgentBase::getState(statusStr.get().toString());
															#line 800 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent(SevInfo, "FileBackupAbortIncompatibleBackup") .detail("TagName", tagName.c_str()) .detail("Status", BackupAgentBase::getStateText(status));
															#line 805 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr->clear(singleKeyRange(StringRef(globalConfig.pack(FileBackupAgent::keyFolderId))));
															#line 808 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		Key configPath = uidPrefixKey(logRangesRange.begin, uid);
															#line 809 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		Key logsPath = uidPrefixKey(backupLogKeys.begin, uid);
															#line 810 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr->clear(KeyRangeRef(configPath, strinc(configPath)));
															#line 811 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr->clear(KeyRangeRef(logsPath, strinc(logsPath)));
															#line 814 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr->clear(newConfigSpace.range());
															#line 816 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		Key statusKey = StringRef(statusSpace.pack(FileBackupAgent::keyStateStatus));
															#line 819 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (backupAgent->isRunnable(status))
															#line 5007 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 820 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->set(statusKey, StringRef(FileBackupAgent::getStateText(EBackupState::STATE_ABORTED)));
															#line 5011 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 822 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<AbortFiveZeroBackupActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~AbortFiveZeroBackupActorState(); static_cast<AbortFiveZeroBackupActor*>(this)->destroy(); return 0; }
															#line 5015 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<AbortFiveZeroBackupActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~AbortFiveZeroBackupActorState();
		static_cast<AbortFiveZeroBackupActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont2(Optional<Value> && statusStr,int loopDepth) 
	{
															#line 797 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		status = !statusStr.present() ? EBackupState::STATE_NEVERRAN : BackupAgentBase::getState(statusStr.get().toString());
															#line 800 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent(SevInfo, "FileBackupAbortIncompatibleBackup") .detail("TagName", tagName.c_str()) .detail("Status", BackupAgentBase::getStateText(status));
															#line 805 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr->clear(singleKeyRange(StringRef(globalConfig.pack(FileBackupAgent::keyFolderId))));
															#line 808 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		Key configPath = uidPrefixKey(logRangesRange.begin, uid);
															#line 809 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		Key logsPath = uidPrefixKey(backupLogKeys.begin, uid);
															#line 810 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr->clear(KeyRangeRef(configPath, strinc(configPath)));
															#line 811 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr->clear(KeyRangeRef(logsPath, strinc(logsPath)));
															#line 814 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr->clear(newConfigSpace.range());
															#line 816 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		Key statusKey = StringRef(statusSpace.pack(FileBackupAgent::keyStateStatus));
															#line 819 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (backupAgent->isRunnable(status))
															#line 5045 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 820 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->set(statusKey, StringRef(FileBackupAgent::getStateText(EBackupState::STATE_ABORTED)));
															#line 5049 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 822 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<AbortFiveZeroBackupActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~AbortFiveZeroBackupActorState(); static_cast<AbortFiveZeroBackupActor*>(this)->destroy(); return 0; }
															#line 5053 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<AbortFiveZeroBackupActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~AbortFiveZeroBackupActorState();
		static_cast<AbortFiveZeroBackupActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1when1(Optional<Value> const& statusStr,int loopDepth) 
	{
		loopDepth = a_body1cont2(statusStr, loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Optional<Value> && statusStr,int loopDepth) 
	{
		loopDepth = a_body1cont2(std::move(statusStr), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<AbortFiveZeroBackupActor*>(this)->actor_wait_state > 0) static_cast<AbortFiveZeroBackupActor*>(this)->actor_wait_state = 0;
		static_cast<AbortFiveZeroBackupActor*>(this)->ActorCallback< AbortFiveZeroBackupActor, 1, Optional<Value> >::remove();

	}
	void a_callback_fire(ActorCallback< AbortFiveZeroBackupActor, 1, Optional<Value> >*,Optional<Value> const& value) 
	{
		fdb_probe_actor_enter("abortFiveZeroBackup", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("abortFiveZeroBackup", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< AbortFiveZeroBackupActor, 1, Optional<Value> >*,Optional<Value> && value) 
	{
		fdb_probe_actor_enter("abortFiveZeroBackup", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("abortFiveZeroBackup", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< AbortFiveZeroBackupActor, 1, Optional<Value> >*,Error err) 
	{
		fdb_probe_actor_enter("abortFiveZeroBackup", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("abortFiveZeroBackup", reinterpret_cast<unsigned long>(this), 1);

	}
															#line 777 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	FileBackupAgent* backupAgent;
															#line 777 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 777 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	std::string tagName;
															#line 783 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Subspace tagNames;
															#line 789 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	UID uid;
															#line 791 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Subspace statusSpace;
															#line 792 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Subspace globalConfig;
															#line 793 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Subspace newConfigSpace;
															#line 797 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	EBackupState status;
															#line 5142 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via abortFiveZeroBackup()
															#line 777 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class AbortFiveZeroBackupActor final : public Actor<Void>, public ActorCallback< AbortFiveZeroBackupActor, 0, Optional<Value> >, public ActorCallback< AbortFiveZeroBackupActor, 1, Optional<Value> >, public FastAllocated<AbortFiveZeroBackupActor>, public AbortFiveZeroBackupActorState<AbortFiveZeroBackupActor> {
															#line 5147 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<AbortFiveZeroBackupActor>::operator new;
	using FastAllocated<AbortFiveZeroBackupActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< AbortFiveZeroBackupActor, 0, Optional<Value> >;
friend struct ActorCallback< AbortFiveZeroBackupActor, 1, Optional<Value> >;
															#line 777 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	AbortFiveZeroBackupActor(FileBackupAgent* const& backupAgent,Reference<ReadYourWritesTransaction> const& tr,std::string const& tagName) 
															#line 5159 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<Void>(),
		   AbortFiveZeroBackupActorState<AbortFiveZeroBackupActor>(backupAgent, tr, tagName)
	{
		fdb_probe_actor_enter("abortFiveZeroBackup", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("abortFiveZeroBackup");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("abortFiveZeroBackup", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< AbortFiveZeroBackupActor, 0, Optional<Value> >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< AbortFiveZeroBackupActor, 1, Optional<Value> >*)0, actor_cancelled()); break;
		}

	}
};
															#line 777 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<Void> abortFiveZeroBackup( FileBackupAgent* const& backupAgent, Reference<ReadYourWritesTransaction> const& tr, std::string const& tagName ) {
															#line 777 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<Void>(new AbortFiveZeroBackupActor(backupAgent, tr, tagName));
															#line 5187 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 824 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

struct AbortFiveZeroBackupTask : TaskFuncBase {
	static StringRef name;
																#line 5194 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via _finish()
															#line 827 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class _finishActor>
															#line 827 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class _finishActorState {
															#line 5200 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 827 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	_finishActorState(Reference<ReadYourWritesTransaction> const& tr,Reference<TaskBucket> const& taskBucket,Reference<FutureBucket> const& futureBucket,Reference<Task> const& task) 
															#line 827 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 827 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : tr(tr),
															#line 827 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   taskBucket(taskBucket),
															#line 827 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   futureBucket(futureBucket),
															#line 827 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   task(task),
															#line 831 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   backupAgent(),
															#line 832 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   tagName(task->params[BackupAgentBase::keyConfigBackupTag].toString())
															#line 5217 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("_finish", reinterpret_cast<unsigned long>(this));

	}
	~_finishActorState() 
	{
		fdb_probe_actor_destroy("_finish", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 834 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			TEST(true);
															#line 836 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			TraceEvent(SevInfo, "FileBackupCancelOldTask") .detail("Task", task->params[Task::reservedTaskParamKeyType]) .detail("TagName", tagName);
															#line 839 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_0 = abortFiveZeroBackup(&backupAgent, tr, tagName);
															#line 839 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_finishActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 5238 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<_finishActor*>(this)->actor_wait_state = 1;
															#line 839 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< _finishActor, 0, Void >*>(static_cast<_finishActor*>(this)));
															#line 5243 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~_finishActorState();
		static_cast<_finishActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void const& _,int loopDepth) 
	{
															#line 841 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_1 = taskBucket->finish(tr, task);
															#line 841 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_finishActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 5268 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<_finishActor*>(this)->actor_wait_state = 2;
															#line 841 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< _finishActor, 1, Void >*>(static_cast<_finishActor*>(this)));
															#line 5273 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void && _,int loopDepth) 
	{
															#line 841 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_1 = taskBucket->finish(tr, task);
															#line 841 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_finishActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 5284 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<_finishActor*>(this)->actor_wait_state = 2;
															#line 841 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< _finishActor, 1, Void >*>(static_cast<_finishActor*>(this)));
															#line 5289 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<_finishActor*>(this)->actor_wait_state > 0) static_cast<_finishActor*>(this)->actor_wait_state = 0;
		static_cast<_finishActor*>(this)->ActorCallback< _finishActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< _finishActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< _finishActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont2(Void const& _,int loopDepth) 
	{
															#line 842 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<_finishActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~_finishActorState(); static_cast<_finishActor*>(this)->destroy(); return 0; }
															#line 5361 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<_finishActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~_finishActorState();
		static_cast<_finishActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont2(Void && _,int loopDepth) 
	{
															#line 842 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<_finishActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~_finishActorState(); static_cast<_finishActor*>(this)->destroy(); return 0; }
															#line 5373 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<_finishActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~_finishActorState();
		static_cast<_finishActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<_finishActor*>(this)->actor_wait_state > 0) static_cast<_finishActor*>(this)->actor_wait_state = 0;
		static_cast<_finishActor*>(this)->ActorCallback< _finishActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< _finishActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< _finishActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 1);

	}
															#line 827 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 827 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskBucket> taskBucket;
															#line 827 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<FutureBucket> futureBucket;
															#line 827 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<Task> task;
															#line 831 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	FileBackupAgent backupAgent;
															#line 832 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	std::string tagName;
															#line 5456 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via _finish()
															#line 827 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class _finishActor final : public Actor<Void>, public ActorCallback< _finishActor, 0, Void >, public ActorCallback< _finishActor, 1, Void >, public FastAllocated<_finishActor>, public _finishActorState<_finishActor> {
															#line 5461 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<_finishActor>::operator new;
	using FastAllocated<_finishActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< _finishActor, 0, Void >;
friend struct ActorCallback< _finishActor, 1, Void >;
															#line 827 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	_finishActor(Reference<ReadYourWritesTransaction> const& tr,Reference<TaskBucket> const& taskBucket,Reference<FutureBucket> const& futureBucket,Reference<Task> const& task) 
															#line 5473 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<Void>(),
		   _finishActorState<_finishActor>(tr, taskBucket, futureBucket, task)
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("_finish");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< _finishActor, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< _finishActor, 1, Void >*)0, actor_cancelled()); break;
		}

	}
};
															#line 827 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<Void> _finish( Reference<ReadYourWritesTransaction> const& tr, Reference<TaskBucket> const& taskBucket, Reference<FutureBucket> const& futureBucket, Reference<Task> const& task ) {
															#line 827 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<Void>(new _finishActor(tr, taskBucket, futureBucket, task));
															#line 5501 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 844 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

	StringRef getName() const override {
		TraceEvent(SevError, "FileBackupError")
		    .detail("Cause", "AbortFiveZeroBackupTaskFunc::name() should never be called");
		ASSERT(false);
		return StringRef();
	}

	Future<Void> execute(Database cx,
	                     Reference<TaskBucket> tb,
	                     Reference<FutureBucket> fb,
	                     Reference<Task> task) override {
		return Future<Void>(Void());
	};
	Future<Void> finish(Reference<ReadYourWritesTransaction> tr,
	                    Reference<TaskBucket> tb,
	                    Reference<FutureBucket> fb,
	                    Reference<Task> task) override {
		return _finish(tr, tb, fb, task);
	};
};
StringRef AbortFiveZeroBackupTask::name = LiteralStringRef("abort_legacy_backup");
REGISTER_TASKFUNC(AbortFiveZeroBackupTask);
REGISTER_TASKFUNC_ALIAS(AbortFiveZeroBackupTask, file_backup_diff_logs);
REGISTER_TASKFUNC_ALIAS(AbortFiveZeroBackupTask, file_backup_log_range);
REGISTER_TASKFUNC_ALIAS(AbortFiveZeroBackupTask, file_backup_logs);
REGISTER_TASKFUNC_ALIAS(AbortFiveZeroBackupTask, file_backup_range);
REGISTER_TASKFUNC_ALIAS(AbortFiveZeroBackupTask, file_backup_restorable);
REGISTER_TASKFUNC_ALIAS(AbortFiveZeroBackupTask, file_finish_full_backup);
REGISTER_TASKFUNC_ALIAS(AbortFiveZeroBackupTask, file_finished_full_backup);
REGISTER_TASKFUNC_ALIAS(AbortFiveZeroBackupTask, file_start_full_backup);

															#line 5537 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via abortFiveOneBackup()
															#line 876 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class AbortFiveOneBackupActor>
															#line 876 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class AbortFiveOneBackupActorState {
															#line 5543 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 876 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	AbortFiveOneBackupActorState(FileBackupAgent* const& backupAgent,Reference<ReadYourWritesTransaction> const& tr,std::string const& tagName) 
															#line 876 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 876 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : backupAgent(backupAgent),
															#line 876 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   tr(tr),
															#line 876 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   tagName(tagName)
															#line 5554 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("abortFiveOneBackup", reinterpret_cast<unsigned long>(this));

	}
	~AbortFiveOneBackupActorState() 
	{
		fdb_probe_actor_destroy("abortFiveOneBackup", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 879 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 880 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 882 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tag = makeBackupTag(tagName);
															#line 883 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<UidAndAbortedFlagT> __when_expr_0 = tag.getOrThrow(tr, Snapshot::False, backup_unneeded());
															#line 883 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<AbortFiveOneBackupActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 5577 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<AbortFiveOneBackupActor*>(this)->actor_wait_state = 1;
															#line 883 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< AbortFiveOneBackupActor, 0, UidAndAbortedFlagT >*>(static_cast<AbortFiveOneBackupActor*>(this)));
															#line 5582 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~AbortFiveOneBackupActorState();
		static_cast<AbortFiveOneBackupActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 885 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		config = BackupConfig(current.first);
															#line 886 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<EBackupState> __when_expr_1 = config.stateEnum().getD(tr, Snapshot::False, EBackupState::STATE_NEVERRAN);
															#line 886 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<AbortFiveOneBackupActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 5609 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<AbortFiveOneBackupActor*>(this)->actor_wait_state = 2;
															#line 886 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< AbortFiveOneBackupActor, 1, EBackupState >*>(static_cast<AbortFiveOneBackupActor*>(this)));
															#line 5614 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1when1(UidAndAbortedFlagT const& __current,int loopDepth) 
	{
															#line 883 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		current = __current;
															#line 5623 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1when1(UidAndAbortedFlagT && __current,int loopDepth) 
	{
		current = std::move(__current);
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<AbortFiveOneBackupActor*>(this)->actor_wait_state > 0) static_cast<AbortFiveOneBackupActor*>(this)->actor_wait_state = 0;
		static_cast<AbortFiveOneBackupActor*>(this)->ActorCallback< AbortFiveOneBackupActor, 0, UidAndAbortedFlagT >::remove();

	}
	void a_callback_fire(ActorCallback< AbortFiveOneBackupActor, 0, UidAndAbortedFlagT >*,UidAndAbortedFlagT const& value) 
	{
		fdb_probe_actor_enter("abortFiveOneBackup", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("abortFiveOneBackup", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< AbortFiveOneBackupActor, 0, UidAndAbortedFlagT >*,UidAndAbortedFlagT && value) 
	{
		fdb_probe_actor_enter("abortFiveOneBackup", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("abortFiveOneBackup", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< AbortFiveOneBackupActor, 0, UidAndAbortedFlagT >*,Error err) 
	{
		fdb_probe_actor_enter("abortFiveOneBackup", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("abortFiveOneBackup", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont2(EBackupState const& status,int loopDepth) 
	{
															#line 888 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!backupAgent->isRunnable(status))
															#line 5690 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 889 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			return a_body1Catch1(backup_unneeded(), loopDepth);
															#line 5694 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 892 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent(SevInfo, "FBA_AbortFileOneBackup") .detail("TagName", tagName.c_str()) .detail("Status", BackupAgentBase::getStateText(status));
															#line 897 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_2 = tag.cancel(tr);
															#line 897 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<AbortFiveOneBackupActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 5702 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont2when1(__when_expr_2.get(), loopDepth); };
		static_cast<AbortFiveOneBackupActor*>(this)->actor_wait_state = 3;
															#line 897 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< AbortFiveOneBackupActor, 2, Void >*>(static_cast<AbortFiveOneBackupActor*>(this)));
															#line 5707 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont2(EBackupState && status,int loopDepth) 
	{
															#line 888 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!backupAgent->isRunnable(status))
															#line 5716 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 889 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			return a_body1Catch1(backup_unneeded(), loopDepth);
															#line 5720 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 892 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent(SevInfo, "FBA_AbortFileOneBackup") .detail("TagName", tagName.c_str()) .detail("Status", BackupAgentBase::getStateText(status));
															#line 897 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_2 = tag.cancel(tr);
															#line 897 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<AbortFiveOneBackupActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 5728 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont2when1(__when_expr_2.get(), loopDepth); };
		static_cast<AbortFiveOneBackupActor*>(this)->actor_wait_state = 3;
															#line 897 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< AbortFiveOneBackupActor, 2, Void >*>(static_cast<AbortFiveOneBackupActor*>(this)));
															#line 5733 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1when1(EBackupState const& status,int loopDepth) 
	{
		loopDepth = a_body1cont2(status, loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(EBackupState && status,int loopDepth) 
	{
		loopDepth = a_body1cont2(std::move(status), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<AbortFiveOneBackupActor*>(this)->actor_wait_state > 0) static_cast<AbortFiveOneBackupActor*>(this)->actor_wait_state = 0;
		static_cast<AbortFiveOneBackupActor*>(this)->ActorCallback< AbortFiveOneBackupActor, 1, EBackupState >::remove();

	}
	void a_callback_fire(ActorCallback< AbortFiveOneBackupActor, 1, EBackupState >*,EBackupState const& value) 
	{
		fdb_probe_actor_enter("abortFiveOneBackup", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("abortFiveOneBackup", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< AbortFiveOneBackupActor, 1, EBackupState >*,EBackupState && value) 
	{
		fdb_probe_actor_enter("abortFiveOneBackup", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("abortFiveOneBackup", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< AbortFiveOneBackupActor, 1, EBackupState >*,Error err) 
	{
		fdb_probe_actor_enter("abortFiveOneBackup", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("abortFiveOneBackup", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont3(Void const& _,int loopDepth) 
	{
															#line 899 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		Key configPath = uidPrefixKey(logRangesRange.begin, config.getUid());
															#line 900 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		Key logsPath = uidPrefixKey(backupLogKeys.begin, config.getUid());
															#line 902 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr->clear(KeyRangeRef(configPath, strinc(configPath)));
															#line 903 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr->clear(KeyRangeRef(logsPath, strinc(logsPath)));
															#line 905 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		config.stateEnum().set(tr, EBackupState::STATE_ABORTED);
															#line 907 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<AbortFiveOneBackupActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~AbortFiveOneBackupActorState(); static_cast<AbortFiveOneBackupActor*>(this)->destroy(); return 0; }
															#line 5815 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<AbortFiveOneBackupActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~AbortFiveOneBackupActorState();
		static_cast<AbortFiveOneBackupActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont3(Void && _,int loopDepth) 
	{
															#line 899 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		Key configPath = uidPrefixKey(logRangesRange.begin, config.getUid());
															#line 900 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		Key logsPath = uidPrefixKey(backupLogKeys.begin, config.getUid());
															#line 902 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr->clear(KeyRangeRef(configPath, strinc(configPath)));
															#line 903 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr->clear(KeyRangeRef(logsPath, strinc(logsPath)));
															#line 905 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		config.stateEnum().set(tr, EBackupState::STATE_ABORTED);
															#line 907 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<AbortFiveOneBackupActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~AbortFiveOneBackupActorState(); static_cast<AbortFiveOneBackupActor*>(this)->destroy(); return 0; }
															#line 5837 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<AbortFiveOneBackupActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~AbortFiveOneBackupActorState();
		static_cast<AbortFiveOneBackupActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont3(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont3(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<AbortFiveOneBackupActor*>(this)->actor_wait_state > 0) static_cast<AbortFiveOneBackupActor*>(this)->actor_wait_state = 0;
		static_cast<AbortFiveOneBackupActor*>(this)->ActorCallback< AbortFiveOneBackupActor, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< AbortFiveOneBackupActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("abortFiveOneBackup", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("abortFiveOneBackup", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< AbortFiveOneBackupActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("abortFiveOneBackup", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("abortFiveOneBackup", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< AbortFiveOneBackupActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("abortFiveOneBackup", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("abortFiveOneBackup", reinterpret_cast<unsigned long>(this), 2);

	}
															#line 876 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	FileBackupAgent* backupAgent;
															#line 876 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 876 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	std::string tagName;
															#line 882 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	KeyBackedTag tag;
															#line 883 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	UidAndAbortedFlagT current;
															#line 885 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	BackupConfig config;
															#line 5920 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via abortFiveOneBackup()
															#line 876 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class AbortFiveOneBackupActor final : public Actor<Void>, public ActorCallback< AbortFiveOneBackupActor, 0, UidAndAbortedFlagT >, public ActorCallback< AbortFiveOneBackupActor, 1, EBackupState >, public ActorCallback< AbortFiveOneBackupActor, 2, Void >, public FastAllocated<AbortFiveOneBackupActor>, public AbortFiveOneBackupActorState<AbortFiveOneBackupActor> {
															#line 5925 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<AbortFiveOneBackupActor>::operator new;
	using FastAllocated<AbortFiveOneBackupActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< AbortFiveOneBackupActor, 0, UidAndAbortedFlagT >;
friend struct ActorCallback< AbortFiveOneBackupActor, 1, EBackupState >;
friend struct ActorCallback< AbortFiveOneBackupActor, 2, Void >;
															#line 876 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	AbortFiveOneBackupActor(FileBackupAgent* const& backupAgent,Reference<ReadYourWritesTransaction> const& tr,std::string const& tagName) 
															#line 5938 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<Void>(),
		   AbortFiveOneBackupActorState<AbortFiveOneBackupActor>(backupAgent, tr, tagName)
	{
		fdb_probe_actor_enter("abortFiveOneBackup", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("abortFiveOneBackup");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("abortFiveOneBackup", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< AbortFiveOneBackupActor, 0, UidAndAbortedFlagT >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< AbortFiveOneBackupActor, 1, EBackupState >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< AbortFiveOneBackupActor, 2, Void >*)0, actor_cancelled()); break;
		}

	}
};
															#line 876 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<Void> abortFiveOneBackup( FileBackupAgent* const& backupAgent, Reference<ReadYourWritesTransaction> const& tr, std::string const& tagName ) {
															#line 876 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<Void>(new AbortFiveOneBackupActor(backupAgent, tr, tagName));
															#line 5967 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 909 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

struct AbortFiveOneBackupTask : TaskFuncBase {
	static StringRef name;
																#line 5974 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via _finish()
															#line 912 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class _finishActor1>
															#line 912 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class _finishActor1State {
															#line 5980 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 912 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	_finishActor1State(Reference<ReadYourWritesTransaction> const& tr,Reference<TaskBucket> const& taskBucket,Reference<FutureBucket> const& futureBucket,Reference<Task> const& task) 
															#line 912 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 912 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : tr(tr),
															#line 912 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   taskBucket(taskBucket),
															#line 912 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   futureBucket(futureBucket),
															#line 912 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   task(task),
															#line 916 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   backupAgent(),
															#line 917 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   config(task)
															#line 5997 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("_finish", reinterpret_cast<unsigned long>(this));

	}
	~_finishActor1State() 
	{
		fdb_probe_actor_destroy("_finish", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 918 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<std::string> __when_expr_0 = config.tag().getOrThrow(tr);
															#line 918 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_finishActor1*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 6014 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<_finishActor1*>(this)->actor_wait_state = 1;
															#line 918 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< _finishActor1, 0, std::string >*>(static_cast<_finishActor1*>(this)));
															#line 6019 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~_finishActor1State();
		static_cast<_finishActor1*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 920 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TEST(true);
															#line 922 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent(SevInfo, "FileBackupCancelFiveOneTask") .detail("Task", task->params[Task::reservedTaskParamKeyType]) .detail("TagName", tagName);
															#line 925 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_1 = abortFiveOneBackup(&backupAgent, tr, tagName);
															#line 925 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_finishActor1*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 6048 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<_finishActor1*>(this)->actor_wait_state = 2;
															#line 925 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< _finishActor1, 1, Void >*>(static_cast<_finishActor1*>(this)));
															#line 6053 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1when1(std::string const& __tagName,int loopDepth) 
	{
															#line 918 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tagName = __tagName;
															#line 6062 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1when1(std::string && __tagName,int loopDepth) 
	{
		tagName = std::move(__tagName);
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<_finishActor1*>(this)->actor_wait_state > 0) static_cast<_finishActor1*>(this)->actor_wait_state = 0;
		static_cast<_finishActor1*>(this)->ActorCallback< _finishActor1, 0, std::string >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor1, 0, std::string >*,std::string const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< _finishActor1, 0, std::string >*,std::string && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< _finishActor1, 0, std::string >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont2(Void const& _,int loopDepth) 
	{
															#line 927 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_2 = taskBucket->finish(tr, task);
															#line 927 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_finishActor1*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 6131 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont2when1(__when_expr_2.get(), loopDepth); };
		static_cast<_finishActor1*>(this)->actor_wait_state = 3;
															#line 927 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< _finishActor1, 2, Void >*>(static_cast<_finishActor1*>(this)));
															#line 6136 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont2(Void && _,int loopDepth) 
	{
															#line 927 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_2 = taskBucket->finish(tr, task);
															#line 927 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_finishActor1*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 6147 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont2when1(__when_expr_2.get(), loopDepth); };
		static_cast<_finishActor1*>(this)->actor_wait_state = 3;
															#line 927 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< _finishActor1, 2, Void >*>(static_cast<_finishActor1*>(this)));
															#line 6152 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<_finishActor1*>(this)->actor_wait_state > 0) static_cast<_finishActor1*>(this)->actor_wait_state = 0;
		static_cast<_finishActor1*>(this)->ActorCallback< _finishActor1, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor1, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< _finishActor1, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< _finishActor1, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont3(Void const& _,int loopDepth) 
	{
															#line 928 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<_finishActor1*>(this)->SAV<Void>::futures) { (void)(Void()); this->~_finishActor1State(); static_cast<_finishActor1*>(this)->destroy(); return 0; }
															#line 6224 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<_finishActor1*>(this)->SAV< Void >::value()) Void(Void());
		this->~_finishActor1State();
		static_cast<_finishActor1*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont3(Void && _,int loopDepth) 
	{
															#line 928 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<_finishActor1*>(this)->SAV<Void>::futures) { (void)(Void()); this->~_finishActor1State(); static_cast<_finishActor1*>(this)->destroy(); return 0; }
															#line 6236 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<_finishActor1*>(this)->SAV< Void >::value()) Void(Void());
		this->~_finishActor1State();
		static_cast<_finishActor1*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont3(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont3(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<_finishActor1*>(this)->actor_wait_state > 0) static_cast<_finishActor1*>(this)->actor_wait_state = 0;
		static_cast<_finishActor1*>(this)->ActorCallback< _finishActor1, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor1, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< _finishActor1, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< _finishActor1, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 2);

	}
															#line 912 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 912 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskBucket> taskBucket;
															#line 912 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<FutureBucket> futureBucket;
															#line 912 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<Task> task;
															#line 916 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	FileBackupAgent backupAgent;
															#line 917 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	BackupConfig config;
															#line 918 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	std::string tagName;
															#line 6321 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via _finish()
															#line 912 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class _finishActor1 final : public Actor<Void>, public ActorCallback< _finishActor1, 0, std::string >, public ActorCallback< _finishActor1, 1, Void >, public ActorCallback< _finishActor1, 2, Void >, public FastAllocated<_finishActor1>, public _finishActor1State<_finishActor1> {
															#line 6326 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<_finishActor1>::operator new;
	using FastAllocated<_finishActor1>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< _finishActor1, 0, std::string >;
friend struct ActorCallback< _finishActor1, 1, Void >;
friend struct ActorCallback< _finishActor1, 2, Void >;
															#line 912 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	_finishActor1(Reference<ReadYourWritesTransaction> const& tr,Reference<TaskBucket> const& taskBucket,Reference<FutureBucket> const& futureBucket,Reference<Task> const& task) 
															#line 6339 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<Void>(),
		   _finishActor1State<_finishActor1>(tr, taskBucket, futureBucket, task)
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("_finish");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< _finishActor1, 0, std::string >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< _finishActor1, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< _finishActor1, 2, Void >*)0, actor_cancelled()); break;
		}

	}
};
															#line 912 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<Void> _finish( Reference<ReadYourWritesTransaction> const& tr, Reference<TaskBucket> const& taskBucket, Reference<FutureBucket> const& futureBucket, Reference<Task> const& task ) {
															#line 912 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<Void>(new _finishActor1(tr, taskBucket, futureBucket, task));
															#line 6368 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 930 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

	StringRef getName() const override {
		TraceEvent(SevError, "FileBackupError")
		    .detail("Cause", "AbortFiveOneBackupTaskFunc::name() should never be called");
		ASSERT(false);
		return StringRef();
	}

	Future<Void> execute(Database cx,
	                     Reference<TaskBucket> tb,
	                     Reference<FutureBucket> fb,
	                     Reference<Task> task) override {
		return Future<Void>(Void());
	};
	Future<Void> finish(Reference<ReadYourWritesTransaction> tr,
	                    Reference<TaskBucket> tb,
	                    Reference<FutureBucket> fb,
	                    Reference<Task> task) override {
		return _finish(tr, tb, fb, task);
	};
};
StringRef AbortFiveOneBackupTask::name = LiteralStringRef("abort_legacy_backup_5.2");
REGISTER_TASKFUNC(AbortFiveOneBackupTask);
REGISTER_TASKFUNC_ALIAS(AbortFiveOneBackupTask, file_backup_write_range);
REGISTER_TASKFUNC_ALIAS(AbortFiveOneBackupTask, file_backup_dispatch_ranges);
REGISTER_TASKFUNC_ALIAS(AbortFiveOneBackupTask, file_backup_write_logs);
REGISTER_TASKFUNC_ALIAS(AbortFiveOneBackupTask, file_backup_erase_logs);
REGISTER_TASKFUNC_ALIAS(AbortFiveOneBackupTask, file_backup_dispatch_logs);
REGISTER_TASKFUNC_ALIAS(AbortFiveOneBackupTask, file_backup_finished);
REGISTER_TASKFUNC_ALIAS(AbortFiveOneBackupTask, file_backup_write_snapshot_manifest);
REGISTER_TASKFUNC_ALIAS(AbortFiveOneBackupTask, file_backup_start);

std::function<void(Reference<Task>)> NOP_SETUP_TASK_FN = [](Reference<Task> task) { /* NOP */ };
															#line 6405 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via addBackupTask()
															#line 963 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class AddBackupTaskActor>
															#line 963 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class AddBackupTaskActorState {
															#line 6411 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 963 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	AddBackupTaskActorState(StringRef const& name,uint32_t const& version,Reference<ReadYourWritesTransaction> const& tr,Reference<TaskBucket> const& taskBucket,TaskCompletionKey const& completionKey,BackupConfig const& config,Reference<TaskFuture> const& waitFor = Reference<TaskFuture>(),std::function<void(Reference<Task>)> const& setupTaskFn = NOP_SETUP_TASK_FN,int const& priority = 0,SetValidation const& setValidation = SetValidation::True) 
															#line 963 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 963 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : name(name),
															#line 963 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   version(version),
															#line 963 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   tr(tr),
															#line 963 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   taskBucket(taskBucket),
															#line 963 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   completionKey(completionKey),
															#line 963 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   config(config),
															#line 963 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   waitFor(waitFor),
															#line 963 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   setupTaskFn(setupTaskFn),
															#line 963 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   priority(priority),
															#line 963 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   setValidation(setValidation)
															#line 6436 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("addBackupTask", reinterpret_cast<unsigned long>(this));

	}
	~AddBackupTaskActorState() 
	{
		fdb_probe_actor_destroy("addBackupTask", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 973 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 974 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 976 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Key> __when_expr_0 = completionKey.get(tr, taskBucket);
															#line 976 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<AddBackupTaskActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 6457 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<AddBackupTaskActor*>(this)->actor_wait_state = 1;
															#line 976 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< AddBackupTaskActor, 0, Key >*>(static_cast<AddBackupTaskActor*>(this)));
															#line 6462 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~AddBackupTaskActorState();
		static_cast<AddBackupTaskActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Key const& doneKey,int loopDepth) 
	{
															#line 977 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		task = Reference<Task>(new Task(name, version, doneKey, priority));
															#line 980 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_1 = config.toTask(tr, task, setValidation);
															#line 980 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<AddBackupTaskActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 6489 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<AddBackupTaskActor*>(this)->actor_wait_state = 2;
															#line 980 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< AddBackupTaskActor, 1, Void >*>(static_cast<AddBackupTaskActor*>(this)));
															#line 6494 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Key && doneKey,int loopDepth) 
	{
															#line 977 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		task = Reference<Task>(new Task(name, version, doneKey, priority));
															#line 980 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_1 = config.toTask(tr, task, setValidation);
															#line 980 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<AddBackupTaskActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 6507 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<AddBackupTaskActor*>(this)->actor_wait_state = 2;
															#line 980 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< AddBackupTaskActor, 1, Void >*>(static_cast<AddBackupTaskActor*>(this)));
															#line 6512 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1when1(Key const& doneKey,int loopDepth) 
	{
		loopDepth = a_body1cont1(doneKey, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Key && doneKey,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(doneKey), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<AddBackupTaskActor*>(this)->actor_wait_state > 0) static_cast<AddBackupTaskActor*>(this)->actor_wait_state = 0;
		static_cast<AddBackupTaskActor*>(this)->ActorCallback< AddBackupTaskActor, 0, Key >::remove();

	}
	void a_callback_fire(ActorCallback< AddBackupTaskActor, 0, Key >*,Key const& value) 
	{
		fdb_probe_actor_enter("addBackupTask", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addBackupTask", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< AddBackupTaskActor, 0, Key >*,Key && value) 
	{
		fdb_probe_actor_enter("addBackupTask", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addBackupTask", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< AddBackupTaskActor, 0, Key >*,Error err) 
	{
		fdb_probe_actor_enter("addBackupTask", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addBackupTask", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont2(Void const& _,int loopDepth) 
	{
															#line 983 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		setupTaskFn(task);
															#line 985 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!waitFor)
															#line 6586 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 986 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (!static_cast<AddBackupTaskActor*>(this)->SAV<Key>::futures) { (void)(taskBucket->addTask(tr, task)); this->~AddBackupTaskActorState(); static_cast<AddBackupTaskActor*>(this)->destroy(); return 0; }
															#line 6590 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			new (&static_cast<AddBackupTaskActor*>(this)->SAV< Key >::value()) Key(taskBucket->addTask(tr, task));
			this->~AddBackupTaskActorState();
			static_cast<AddBackupTaskActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 988 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_2 = waitFor->onSetAddTask(tr, taskBucket, task);
															#line 988 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<AddBackupTaskActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 6600 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont2when1(__when_expr_2.get(), loopDepth); };
		static_cast<AddBackupTaskActor*>(this)->actor_wait_state = 3;
															#line 988 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< AddBackupTaskActor, 2, Void >*>(static_cast<AddBackupTaskActor*>(this)));
															#line 6605 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont2(Void && _,int loopDepth) 
	{
															#line 983 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		setupTaskFn(task);
															#line 985 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!waitFor)
															#line 6616 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 986 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (!static_cast<AddBackupTaskActor*>(this)->SAV<Key>::futures) { (void)(taskBucket->addTask(tr, task)); this->~AddBackupTaskActorState(); static_cast<AddBackupTaskActor*>(this)->destroy(); return 0; }
															#line 6620 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			new (&static_cast<AddBackupTaskActor*>(this)->SAV< Key >::value()) Key(taskBucket->addTask(tr, task));
			this->~AddBackupTaskActorState();
			static_cast<AddBackupTaskActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 988 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_2 = waitFor->onSetAddTask(tr, taskBucket, task);
															#line 988 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<AddBackupTaskActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 6630 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont2when1(__when_expr_2.get(), loopDepth); };
		static_cast<AddBackupTaskActor*>(this)->actor_wait_state = 3;
															#line 988 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< AddBackupTaskActor, 2, Void >*>(static_cast<AddBackupTaskActor*>(this)));
															#line 6635 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<AddBackupTaskActor*>(this)->actor_wait_state > 0) static_cast<AddBackupTaskActor*>(this)->actor_wait_state = 0;
		static_cast<AddBackupTaskActor*>(this)->ActorCallback< AddBackupTaskActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< AddBackupTaskActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("addBackupTask", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addBackupTask", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< AddBackupTaskActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("addBackupTask", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addBackupTask", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< AddBackupTaskActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("addBackupTask", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addBackupTask", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont3(Void const& _,int loopDepth) 
	{
															#line 990 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<AddBackupTaskActor*>(this)->SAV<Key>::futures) { (void)(LiteralStringRef("OnSetAddTask")); this->~AddBackupTaskActorState(); static_cast<AddBackupTaskActor*>(this)->destroy(); return 0; }
															#line 6707 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<AddBackupTaskActor*>(this)->SAV< Key >::value()) Key(LiteralStringRef("OnSetAddTask"));
		this->~AddBackupTaskActorState();
		static_cast<AddBackupTaskActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont3(Void && _,int loopDepth) 
	{
															#line 990 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<AddBackupTaskActor*>(this)->SAV<Key>::futures) { (void)(LiteralStringRef("OnSetAddTask")); this->~AddBackupTaskActorState(); static_cast<AddBackupTaskActor*>(this)->destroy(); return 0; }
															#line 6719 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<AddBackupTaskActor*>(this)->SAV< Key >::value()) Key(LiteralStringRef("OnSetAddTask"));
		this->~AddBackupTaskActorState();
		static_cast<AddBackupTaskActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont3(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont3(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<AddBackupTaskActor*>(this)->actor_wait_state > 0) static_cast<AddBackupTaskActor*>(this)->actor_wait_state = 0;
		static_cast<AddBackupTaskActor*>(this)->ActorCallback< AddBackupTaskActor, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< AddBackupTaskActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("addBackupTask", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addBackupTask", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< AddBackupTaskActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("addBackupTask", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addBackupTask", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< AddBackupTaskActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("addBackupTask", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addBackupTask", reinterpret_cast<unsigned long>(this), 2);

	}
															#line 963 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	StringRef name;
															#line 963 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	uint32_t version;
															#line 963 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 963 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskBucket> taskBucket;
															#line 963 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	TaskCompletionKey completionKey;
															#line 963 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	BackupConfig config;
															#line 963 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskFuture> waitFor;
															#line 963 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	std::function<void(Reference<Task>)> setupTaskFn;
															#line 963 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int priority;
															#line 963 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	SetValidation setValidation;
															#line 977 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<Task> task;
															#line 6812 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via addBackupTask()
															#line 963 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class AddBackupTaskActor final : public Actor<Key>, public ActorCallback< AddBackupTaskActor, 0, Key >, public ActorCallback< AddBackupTaskActor, 1, Void >, public ActorCallback< AddBackupTaskActor, 2, Void >, public FastAllocated<AddBackupTaskActor>, public AddBackupTaskActorState<AddBackupTaskActor> {
															#line 6817 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<AddBackupTaskActor>::operator new;
	using FastAllocated<AddBackupTaskActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Key>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< AddBackupTaskActor, 0, Key >;
friend struct ActorCallback< AddBackupTaskActor, 1, Void >;
friend struct ActorCallback< AddBackupTaskActor, 2, Void >;
															#line 963 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	AddBackupTaskActor(StringRef const& name,uint32_t const& version,Reference<ReadYourWritesTransaction> const& tr,Reference<TaskBucket> const& taskBucket,TaskCompletionKey const& completionKey,BackupConfig const& config,Reference<TaskFuture> const& waitFor = Reference<TaskFuture>(),std::function<void(Reference<Task>)> const& setupTaskFn = NOP_SETUP_TASK_FN,int const& priority = 0,SetValidation const& setValidation = SetValidation::True) 
															#line 6830 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<Key>(),
		   AddBackupTaskActorState<AddBackupTaskActor>(name, version, tr, taskBucket, completionKey, config, waitFor, setupTaskFn, priority, setValidation)
	{
		fdb_probe_actor_enter("addBackupTask", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("addBackupTask");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("addBackupTask", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< AddBackupTaskActor, 0, Key >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< AddBackupTaskActor, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< AddBackupTaskActor, 2, Void >*)0, actor_cancelled()); break;
		}

	}
};
															#line 963 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<Key> addBackupTask( StringRef const& name, uint32_t const& version, Reference<ReadYourWritesTransaction> const& tr, Reference<TaskBucket> const& taskBucket, TaskCompletionKey const& completionKey, BackupConfig const& config, Reference<TaskFuture> const& waitFor = Reference<TaskFuture>(), std::function<void(Reference<Task>)> const& setupTaskFn = NOP_SETUP_TASK_FN, int const& priority = 0, SetValidation const& setValidation = SetValidation::True ) {
															#line 963 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<Key>(new AddBackupTaskActor(name, version, tr, taskBucket, completionKey, config, waitFor, setupTaskFn, priority, setValidation));
															#line 6859 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 992 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

// Clears the backup ID from "backupStartedKey" to pause backup workers.
															#line 6865 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via clearBackupStartID()
															#line 994 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class ClearBackupStartIDActor>
															#line 994 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class ClearBackupStartIDActorState {
															#line 6871 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 994 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	ClearBackupStartIDActorState(Reference<ReadYourWritesTransaction> const& tr,UID const& backupUid) 
															#line 994 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 994 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : tr(tr),
															#line 994 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   backupUid(backupUid)
															#line 6880 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("clearBackupStartID", reinterpret_cast<unsigned long>(this));

	}
	~ClearBackupStartIDActorState() 
	{
		fdb_probe_actor_destroy("clearBackupStartID", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 996 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Optional<Value>> __when_expr_0 = tr->get(backupStartedKey);
															#line 996 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<ClearBackupStartIDActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 6897 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<ClearBackupStartIDActor*>(this)->actor_wait_state = 1;
															#line 996 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< ClearBackupStartIDActor, 0, Optional<Value> >*>(static_cast<ClearBackupStartIDActor*>(this)));
															#line 6902 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~ClearBackupStartIDActorState();
		static_cast<ClearBackupStartIDActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Optional<Value> const& started,int loopDepth) 
	{
															#line 997 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		std::vector<std::pair<UID, Version>> ids;
															#line 998 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (started.present())
															#line 6927 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 999 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			ids = decodeBackupStartedValue(started.get());
															#line 6931 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 1001 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		auto it = std::find_if(ids.begin(), ids.end(), [=](const std::pair<UID, Version>& p) { return p.first == backupUid; });
															#line 1003 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (it != ids.end())
															#line 6937 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 1004 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			ids.erase(it);
															#line 6941 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 1007 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (ids.empty())
															#line 6945 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 1008 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			TraceEvent("ClearBackup").detail("BackupID", backupUid);
															#line 1009 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->clear(backupStartedKey);
															#line 6951 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
		else
		{
															#line 1011 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->set(backupStartedKey, encodeBackupStartedValue(ids));
															#line 6957 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 1013 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<ClearBackupStartIDActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~ClearBackupStartIDActorState(); static_cast<ClearBackupStartIDActor*>(this)->destroy(); return 0; }
															#line 6961 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<ClearBackupStartIDActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~ClearBackupStartIDActorState();
		static_cast<ClearBackupStartIDActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1(Optional<Value> && started,int loopDepth) 
	{
															#line 997 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		std::vector<std::pair<UID, Version>> ids;
															#line 998 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (started.present())
															#line 6975 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 999 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			ids = decodeBackupStartedValue(started.get());
															#line 6979 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 1001 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		auto it = std::find_if(ids.begin(), ids.end(), [=](const std::pair<UID, Version>& p) { return p.first == backupUid; });
															#line 1003 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (it != ids.end())
															#line 6985 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 1004 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			ids.erase(it);
															#line 6989 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 1007 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (ids.empty())
															#line 6993 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 1008 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			TraceEvent("ClearBackup").detail("BackupID", backupUid);
															#line 1009 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->clear(backupStartedKey);
															#line 6999 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
		else
		{
															#line 1011 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->set(backupStartedKey, encodeBackupStartedValue(ids));
															#line 7005 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 1013 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<ClearBackupStartIDActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~ClearBackupStartIDActorState(); static_cast<ClearBackupStartIDActor*>(this)->destroy(); return 0; }
															#line 7009 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<ClearBackupStartIDActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~ClearBackupStartIDActorState();
		static_cast<ClearBackupStartIDActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1when1(Optional<Value> const& started,int loopDepth) 
	{
		loopDepth = a_body1cont1(started, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Optional<Value> && started,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(started), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<ClearBackupStartIDActor*>(this)->actor_wait_state > 0) static_cast<ClearBackupStartIDActor*>(this)->actor_wait_state = 0;
		static_cast<ClearBackupStartIDActor*>(this)->ActorCallback< ClearBackupStartIDActor, 0, Optional<Value> >::remove();

	}
	void a_callback_fire(ActorCallback< ClearBackupStartIDActor, 0, Optional<Value> >*,Optional<Value> const& value) 
	{
		fdb_probe_actor_enter("clearBackupStartID", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("clearBackupStartID", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< ClearBackupStartIDActor, 0, Optional<Value> >*,Optional<Value> && value) 
	{
		fdb_probe_actor_enter("clearBackupStartID", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("clearBackupStartID", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< ClearBackupStartIDActor, 0, Optional<Value> >*,Error err) 
	{
		fdb_probe_actor_enter("clearBackupStartID", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("clearBackupStartID", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 994 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 994 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	UID backupUid;
															#line 7084 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via clearBackupStartID()
															#line 994 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class ClearBackupStartIDActor final : public Actor<Void>, public ActorCallback< ClearBackupStartIDActor, 0, Optional<Value> >, public FastAllocated<ClearBackupStartIDActor>, public ClearBackupStartIDActorState<ClearBackupStartIDActor> {
															#line 7089 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<ClearBackupStartIDActor>::operator new;
	using FastAllocated<ClearBackupStartIDActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< ClearBackupStartIDActor, 0, Optional<Value> >;
															#line 994 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	ClearBackupStartIDActor(Reference<ReadYourWritesTransaction> const& tr,UID const& backupUid) 
															#line 7100 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<Void>(),
		   ClearBackupStartIDActorState<ClearBackupStartIDActor>(tr, backupUid)
	{
		fdb_probe_actor_enter("clearBackupStartID", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("clearBackupStartID");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("clearBackupStartID", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< ClearBackupStartIDActor, 0, Optional<Value> >*)0, actor_cancelled()); break;
		}

	}
};
															#line 994 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<Void> clearBackupStartID( Reference<ReadYourWritesTransaction> const& tr, UID const& backupUid ) {
															#line 994 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<Void>(new ClearBackupStartIDActor(tr, backupUid));
															#line 7127 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 1015 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

// Backup and Restore taskFunc definitions will inherit from one of the following classes which
// servers to catch and log to the appropriate config any error that execute/finish didn't catch and log.
struct RestoreTaskFuncBase : TaskFuncBase {
	Future<Void> handleError(Database cx, Reference<Task> task, Error const& error) final {
		return RestoreConfig(task).logError(
		    cx,
		    error,
		    format("'%s' on '%s'", error.what(), task->params[Task::reservedTaskParamKeyType].printable().c_str()));
	}
	virtual std::string toString(Reference<Task> task) const { return ""; }
};

struct BackupTaskFuncBase : TaskFuncBase {
	Future<Void> handleError(Database cx, Reference<Task> task, Error const& error) final {
		return BackupConfig(task).logError(
		    cx,
		    error,
		    format("'%s' on '%s'", error.what(), task->params[Task::reservedTaskParamKeyType].printable().c_str()));
	}
	virtual std::string toString(Reference<Task> task) const { return ""; }
};

															#line 7154 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via getBlockOfShards()
															#line 1038 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class GetBlockOfShardsActor>
															#line 1038 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class GetBlockOfShardsActorState {
															#line 7160 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 1038 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	GetBlockOfShardsActorState(Reference<ReadYourWritesTransaction> const& tr,Key const& beginKey,Key const& endKey,int const& limit) 
															#line 1038 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 1038 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : tr(tr),
															#line 1038 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   beginKey(beginKey),
															#line 1038 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   endKey(endKey),
															#line 1038 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   limit(limit)
															#line 7173 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("getBlockOfShards", reinterpret_cast<unsigned long>(this));

	}
	~GetBlockOfShardsActorState() 
	{
		fdb_probe_actor_destroy("getBlockOfShards", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 1043 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 1044 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 1045 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			results = Standalone<VectorRef<KeyRef>>();
															#line 1046 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<RangeResult> __when_expr_0 = tr->getRange( KeyRangeRef(keyAfter(beginKey.withPrefix(keyServersPrefix)), endKey.withPrefix(keyServersPrefix)), limit);
															#line 1046 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<GetBlockOfShardsActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 7196 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<GetBlockOfShardsActor*>(this)->actor_wait_state = 1;
															#line 1046 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< GetBlockOfShardsActor, 0, RangeResult >*>(static_cast<GetBlockOfShardsActor*>(this)));
															#line 7201 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~GetBlockOfShardsActorState();
		static_cast<GetBlockOfShardsActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(RangeResult const& values,int loopDepth) 
	{
															#line 1049 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		for( auto& s : values ) {
															#line 1050 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			KeyRef k = s.key.removePrefix(keyServersPrefix);
															#line 1051 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			results.push_back_deep(results.arena(), k);
															#line 7228 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 1054 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<GetBlockOfShardsActor*>(this)->SAV<Standalone<VectorRef<KeyRef>>>::futures) { (void)(results); this->~GetBlockOfShardsActorState(); static_cast<GetBlockOfShardsActor*>(this)->destroy(); return 0; }
															#line 7232 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<GetBlockOfShardsActor*>(this)->SAV< Standalone<VectorRef<KeyRef>> >::value()) Standalone<VectorRef<KeyRef>>(std::move(results)); // state_var_RVO
		this->~GetBlockOfShardsActorState();
		static_cast<GetBlockOfShardsActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1(RangeResult && values,int loopDepth) 
	{
															#line 1049 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		for( auto& s : values ) {
															#line 1050 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			KeyRef k = s.key.removePrefix(keyServersPrefix);
															#line 1051 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			results.push_back_deep(results.arena(), k);
															#line 7248 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 1054 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<GetBlockOfShardsActor*>(this)->SAV<Standalone<VectorRef<KeyRef>>>::futures) { (void)(results); this->~GetBlockOfShardsActorState(); static_cast<GetBlockOfShardsActor*>(this)->destroy(); return 0; }
															#line 7252 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<GetBlockOfShardsActor*>(this)->SAV< Standalone<VectorRef<KeyRef>> >::value()) Standalone<VectorRef<KeyRef>>(std::move(results)); // state_var_RVO
		this->~GetBlockOfShardsActorState();
		static_cast<GetBlockOfShardsActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1when1(RangeResult const& values,int loopDepth) 
	{
		loopDepth = a_body1cont1(values, loopDepth);

		return loopDepth;
	}
	int a_body1when1(RangeResult && values,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(values), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<GetBlockOfShardsActor*>(this)->actor_wait_state > 0) static_cast<GetBlockOfShardsActor*>(this)->actor_wait_state = 0;
		static_cast<GetBlockOfShardsActor*>(this)->ActorCallback< GetBlockOfShardsActor, 0, RangeResult >::remove();

	}
	void a_callback_fire(ActorCallback< GetBlockOfShardsActor, 0, RangeResult >*,RangeResult const& value) 
	{
		fdb_probe_actor_enter("getBlockOfShards", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getBlockOfShards", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< GetBlockOfShardsActor, 0, RangeResult >*,RangeResult && value) 
	{
		fdb_probe_actor_enter("getBlockOfShards", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getBlockOfShards", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< GetBlockOfShardsActor, 0, RangeResult >*,Error err) 
	{
		fdb_probe_actor_enter("getBlockOfShards", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getBlockOfShards", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 1038 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 1038 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Key beginKey;
															#line 1038 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Key endKey;
															#line 1038 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int limit;
															#line 1045 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Standalone<VectorRef<KeyRef>> results;
															#line 7333 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via getBlockOfShards()
															#line 1038 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class GetBlockOfShardsActor final : public Actor<Standalone<VectorRef<KeyRef>>>, public ActorCallback< GetBlockOfShardsActor, 0, RangeResult >, public FastAllocated<GetBlockOfShardsActor>, public GetBlockOfShardsActorState<GetBlockOfShardsActor> {
															#line 7338 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<GetBlockOfShardsActor>::operator new;
	using FastAllocated<GetBlockOfShardsActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Standalone<VectorRef<KeyRef>>>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< GetBlockOfShardsActor, 0, RangeResult >;
															#line 1038 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	GetBlockOfShardsActor(Reference<ReadYourWritesTransaction> const& tr,Key const& beginKey,Key const& endKey,int const& limit) 
															#line 7349 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<Standalone<VectorRef<KeyRef>>>(),
		   GetBlockOfShardsActorState<GetBlockOfShardsActor>(tr, beginKey, endKey, limit)
	{
		fdb_probe_actor_enter("getBlockOfShards", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("getBlockOfShards");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("getBlockOfShards", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< GetBlockOfShardsActor, 0, RangeResult >*)0, actor_cancelled()); break;
		}

	}
};
															#line 1038 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<Standalone<VectorRef<KeyRef>>> getBlockOfShards( Reference<ReadYourWritesTransaction> const& tr, Key const& beginKey, Key const& endKey, int const& limit ) {
															#line 1038 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<Standalone<VectorRef<KeyRef>>>(new GetBlockOfShardsActor(tr, beginKey, endKey, limit));
															#line 7376 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 1056 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

struct BackupRangeTaskFunc : BackupTaskFuncBase {
	static StringRef name;
	static constexpr uint32_t version = 1;

	static struct {
		static TaskParam<Key> beginKey() { return LiteralStringRef(__FUNCTION__); }
		static TaskParam<Key> endKey() { return LiteralStringRef(__FUNCTION__); }
		static TaskParam<bool> addBackupRangeTasks() { return LiteralStringRef(__FUNCTION__); }
	} Params;

	std::string toString(Reference<Task> task) const override {
		return format("beginKey '%s' endKey '%s' addTasks %d",
		              Params.beginKey().get(task).printable().c_str(),
		              Params.endKey().get(task).printable().c_str(),
		              Params.addBackupRangeTasks().get(task));
	}

	StringRef getName() const override { return name; };

	Future<Void> execute(Database cx,
	                     Reference<TaskBucket> tb,
	                     Reference<FutureBucket> fb,
	                     Reference<Task> task) override {
		return _execute(cx, tb, fb, task);
	};
	Future<Void> finish(Reference<ReadYourWritesTransaction> tr,
	                    Reference<TaskBucket> tb,
	                    Reference<FutureBucket> fb,
	                    Reference<Task> task) override {
		return _finish(tr, tb, fb, task);
	};

	// Finish (which flushes/syncs) the file, and then in a single transaction, make some range backup progress durable.
	// This means:
	//  - increment the backup config's range bytes written
	//  - update the range file map
	//  - update the task begin key
	//  - save/extend the task with the new params
	// Returns whether or not the caller should continue executing the task.
																#line 7420 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via finishRangeFile()
															#line 1096 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class FinishRangeFileActor>
															#line 1096 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class FinishRangeFileActorState {
															#line 7426 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 1096 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	FinishRangeFileActorState(Reference<IBackupFile> const& file,Database const& cx,Reference<Task> const& task,Reference<TaskBucket> const& taskBucket,KeyRange const& range,Version const& version) 
															#line 1096 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 1096 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : file(file),
															#line 1096 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   cx(cx),
															#line 1096 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   task(task),
															#line 1096 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   taskBucket(taskBucket),
															#line 1096 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   range(range),
															#line 1096 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   version(version)
															#line 7443 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("finishRangeFile", reinterpret_cast<unsigned long>(this));

	}
	~FinishRangeFileActorState() 
	{
		fdb_probe_actor_destroy("finishRangeFile", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 1102 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_0 = file->finish();
															#line 1102 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<FinishRangeFileActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 7460 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<FinishRangeFileActor*>(this)->actor_wait_state = 1;
															#line 1102 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< FinishRangeFileActor, 0, Void >*>(static_cast<FinishRangeFileActor*>(this)));
															#line 7465 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~FinishRangeFileActorState();
		static_cast<FinishRangeFileActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void const& _,int loopDepth) 
	{
															#line 1105 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (range.empty())
															#line 7488 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 1106 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (!static_cast<FinishRangeFileActor*>(this)->SAV<bool>::futures) { (void)(false); this->~FinishRangeFileActorState(); static_cast<FinishRangeFileActor*>(this)->destroy(); return 0; }
															#line 7492 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			new (&static_cast<FinishRangeFileActor*>(this)->SAV< bool >::value()) bool(false);
			this->~FinishRangeFileActorState();
			static_cast<FinishRangeFileActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 1108 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr = Reference<ReadYourWritesTransaction>(new ReadYourWritesTransaction(cx));
															#line 1109 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		backup = BackupConfig(task);
															#line 1110 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		usedFile = false;
															#line 1114 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_1 = task->extendMutex.take();
															#line 1114 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<FinishRangeFileActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 7508 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<FinishRangeFileActor*>(this)->actor_wait_state = 2;
															#line 1114 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< FinishRangeFileActor, 1, Void >*>(static_cast<FinishRangeFileActor*>(this)));
															#line 7513 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void && _,int loopDepth) 
	{
															#line 1105 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (range.empty())
															#line 7522 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 1106 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (!static_cast<FinishRangeFileActor*>(this)->SAV<bool>::futures) { (void)(false); this->~FinishRangeFileActorState(); static_cast<FinishRangeFileActor*>(this)->destroy(); return 0; }
															#line 7526 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			new (&static_cast<FinishRangeFileActor*>(this)->SAV< bool >::value()) bool(false);
			this->~FinishRangeFileActorState();
			static_cast<FinishRangeFileActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 1108 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr = Reference<ReadYourWritesTransaction>(new ReadYourWritesTransaction(cx));
															#line 1109 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		backup = BackupConfig(task);
															#line 1110 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		usedFile = false;
															#line 1114 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_1 = task->extendMutex.take();
															#line 1114 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<FinishRangeFileActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 7542 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<FinishRangeFileActor*>(this)->actor_wait_state = 2;
															#line 1114 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< FinishRangeFileActor, 1, Void >*>(static_cast<FinishRangeFileActor*>(this)));
															#line 7547 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<FinishRangeFileActor*>(this)->actor_wait_state > 0) static_cast<FinishRangeFileActor*>(this)->actor_wait_state = 0;
		static_cast<FinishRangeFileActor*>(this)->ActorCallback< FinishRangeFileActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< FinishRangeFileActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("finishRangeFile", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("finishRangeFile", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< FinishRangeFileActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("finishRangeFile", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("finishRangeFile", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< FinishRangeFileActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("finishRangeFile", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("finishRangeFile", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont2(Void const& _,int loopDepth) 
	{
															#line 1115 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		releaser = FlowLock::Releaser(task->extendMutex, 1);
															#line 1117 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		;
															#line 7621 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont2loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1cont2(Void && _,int loopDepth) 
	{
															#line 1115 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		releaser = FlowLock::Releaser(task->extendMutex, 1);
															#line 1117 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		;
															#line 7632 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont2loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<FinishRangeFileActor*>(this)->actor_wait_state > 0) static_cast<FinishRangeFileActor*>(this)->actor_wait_state = 0;
		static_cast<FinishRangeFileActor*>(this)->ActorCallback< FinishRangeFileActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< FinishRangeFileActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("finishRangeFile", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("finishRangeFile", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< FinishRangeFileActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("finishRangeFile", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("finishRangeFile", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< FinishRangeFileActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("finishRangeFile", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("finishRangeFile", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont4(int loopDepth) 
	{
															#line 1149 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<FinishRangeFileActor*>(this)->SAV<bool>::futures) { (void)(usedFile); this->~FinishRangeFileActorState(); static_cast<FinishRangeFileActor*>(this)->destroy(); return 0; }
															#line 7704 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<FinishRangeFileActor*>(this)->SAV< bool >::value()) bool(std::move(usedFile)); // state_var_RVO
		this->~FinishRangeFileActorState();
		static_cast<FinishRangeFileActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont2loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1cont2loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1cont2loopBody1(int loopDepth) 
	{
		try {
															#line 1119 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 1120 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 1124 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			Params.beginKey().set(task, range.end);
															#line 1127 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Version> __when_expr_2 = taskBucket->extendTimeout(tr, task, UpdateParams::True);
															#line 1127 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<FinishRangeFileActor*>(this)->actor_wait_state < 0) return a_body1cont2loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 7732 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1cont2loopBody1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont2loopBody1when1(__when_expr_2.get(), loopDepth); };
			static_cast<FinishRangeFileActor*>(this)->actor_wait_state = 3;
															#line 1127 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< FinishRangeFileActor, 2, Version >*>(static_cast<FinishRangeFileActor*>(this)));
															#line 7737 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1cont2loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1cont2loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont2break1(int loopDepth) 
	{
		try {
			return a_body1cont4(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont2loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1cont2loopHead1(0);

		return loopDepth;
	}
	int a_body1cont2loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 1145 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_5 = tr->onError(e);
															#line 1145 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<FinishRangeFileActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 7774 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_5.isReady()) { if (__when_expr_5.isError()) return a_body1Catch1(__when_expr_5.getError(), std::max(0, loopDepth - 1)); else return a_body1cont2loopBody1Catch1when1(__when_expr_5.get(), loopDepth); };
			static_cast<FinishRangeFileActor*>(this)->actor_wait_state = 6;
															#line 1145 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_5.addCallbackAndClear(static_cast<ActorCallback< FinishRangeFileActor, 5, Void >*>(static_cast<FinishRangeFileActor*>(this)));
															#line 7779 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1cont2loopBody1cont2(int loopDepth) 
	{
															#line 1130 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		backup.rangeBytesWritten().atomicOp(tr, file->size(), MutationRef::AddValue);
															#line 1131 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		backup.snapshotRangeFileCount().atomicOp(tr, 1, MutationRef::AddValue);
															#line 1134 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Optional<BackupConfig::RangeSlice>> __when_expr_3 = backup.snapshotRangeFileMap().get(tr, range.end);
															#line 1134 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<FinishRangeFileActor*>(this)->actor_wait_state < 0) return a_body1cont2loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 7800 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1cont2loopBody1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1cont2loopBody1cont2when1(__when_expr_3.get(), loopDepth); };
		static_cast<FinishRangeFileActor*>(this)->actor_wait_state = 4;
															#line 1134 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< FinishRangeFileActor, 3, Optional<BackupConfig::RangeSlice> >*>(static_cast<FinishRangeFileActor*>(this)));
															#line 7805 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont2loopBody1when1(Version const& __newTimeout,int loopDepth) 
	{
															#line 1127 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		newTimeout = __newTimeout;
															#line 7814 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont2loopBody1cont2(loopDepth);

		return loopDepth;
	}
	int a_body1cont2loopBody1when1(Version && __newTimeout,int loopDepth) 
	{
		newTimeout = std::move(__newTimeout);
		loopDepth = a_body1cont2loopBody1cont2(loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<FinishRangeFileActor*>(this)->actor_wait_state > 0) static_cast<FinishRangeFileActor*>(this)->actor_wait_state = 0;
		static_cast<FinishRangeFileActor*>(this)->ActorCallback< FinishRangeFileActor, 2, Version >::remove();

	}
	void a_callback_fire(ActorCallback< FinishRangeFileActor, 2, Version >*,Version const& value) 
	{
		fdb_probe_actor_enter("finishRangeFile", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont2loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont2loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont2loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("finishRangeFile", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< FinishRangeFileActor, 2, Version >*,Version && value) 
	{
		fdb_probe_actor_enter("finishRangeFile", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont2loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont2loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont2loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("finishRangeFile", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< FinishRangeFileActor, 2, Version >*,Error err) 
	{
		fdb_probe_actor_enter("finishRangeFile", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont2loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont2loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont2loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("finishRangeFile", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1cont2loopBody1cont3(Optional<BackupConfig::RangeSlice> const& s,int loopDepth) 
	{
															#line 1135 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!s.present() || s.get().begin >= range.begin)
															#line 7881 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 1136 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			backup.snapshotRangeFileMap().set( tr, range.end, { range.begin, version, file->getFileName(), file->size() });
															#line 1138 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			usedFile = true;
															#line 7887 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 1141 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_4 = tr->commit();
															#line 1141 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<FinishRangeFileActor*>(this)->actor_wait_state < 0) return a_body1cont2loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 7893 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1cont2loopBody1Catch1(__when_expr_4.getError(), loopDepth); else return a_body1cont2loopBody1cont3when1(__when_expr_4.get(), loopDepth); };
		static_cast<FinishRangeFileActor*>(this)->actor_wait_state = 5;
															#line 1141 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< FinishRangeFileActor, 4, Void >*>(static_cast<FinishRangeFileActor*>(this)));
															#line 7898 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont2loopBody1cont3(Optional<BackupConfig::RangeSlice> && s,int loopDepth) 
	{
															#line 1135 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!s.present() || s.get().begin >= range.begin)
															#line 7907 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 1136 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			backup.snapshotRangeFileMap().set( tr, range.end, { range.begin, version, file->getFileName(), file->size() });
															#line 1138 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			usedFile = true;
															#line 7913 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 1141 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_4 = tr->commit();
															#line 1141 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<FinishRangeFileActor*>(this)->actor_wait_state < 0) return a_body1cont2loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 7919 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1cont2loopBody1Catch1(__when_expr_4.getError(), loopDepth); else return a_body1cont2loopBody1cont3when1(__when_expr_4.get(), loopDepth); };
		static_cast<FinishRangeFileActor*>(this)->actor_wait_state = 5;
															#line 1141 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< FinishRangeFileActor, 4, Void >*>(static_cast<FinishRangeFileActor*>(this)));
															#line 7924 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont2loopBody1cont2when1(Optional<BackupConfig::RangeSlice> const& s,int loopDepth) 
	{
		loopDepth = a_body1cont2loopBody1cont3(s, loopDepth);

		return loopDepth;
	}
	int a_body1cont2loopBody1cont2when1(Optional<BackupConfig::RangeSlice> && s,int loopDepth) 
	{
		loopDepth = a_body1cont2loopBody1cont3(std::move(s), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<FinishRangeFileActor*>(this)->actor_wait_state > 0) static_cast<FinishRangeFileActor*>(this)->actor_wait_state = 0;
		static_cast<FinishRangeFileActor*>(this)->ActorCallback< FinishRangeFileActor, 3, Optional<BackupConfig::RangeSlice> >::remove();

	}
	void a_callback_fire(ActorCallback< FinishRangeFileActor, 3, Optional<BackupConfig::RangeSlice> >*,Optional<BackupConfig::RangeSlice> const& value) 
	{
		fdb_probe_actor_enter("finishRangeFile", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont2loopBody1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont2loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont2loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("finishRangeFile", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< FinishRangeFileActor, 3, Optional<BackupConfig::RangeSlice> >*,Optional<BackupConfig::RangeSlice> && value) 
	{
		fdb_probe_actor_enter("finishRangeFile", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont2loopBody1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont2loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont2loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("finishRangeFile", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< FinishRangeFileActor, 3, Optional<BackupConfig::RangeSlice> >*,Error err) 
	{
		fdb_probe_actor_enter("finishRangeFile", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont2loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont2loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont2loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("finishRangeFile", reinterpret_cast<unsigned long>(this), 3);

	}
	int a_body1cont2loopBody1cont4(Void const& _,int loopDepth) 
	{
															#line 1142 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		task->timeoutVersion = newTimeout;
															#line 7996 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		return a_body1cont2break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1cont2loopBody1cont4(Void && _,int loopDepth) 
	{
															#line 1142 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		task->timeoutVersion = newTimeout;
															#line 8005 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		return a_body1cont2break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1cont2loopBody1cont3when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont2loopBody1cont4(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont2loopBody1cont3when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont2loopBody1cont4(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose5() 
	{
		if (static_cast<FinishRangeFileActor*>(this)->actor_wait_state > 0) static_cast<FinishRangeFileActor*>(this)->actor_wait_state = 0;
		static_cast<FinishRangeFileActor*>(this)->ActorCallback< FinishRangeFileActor, 4, Void >::remove();

	}
	void a_callback_fire(ActorCallback< FinishRangeFileActor, 4, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("finishRangeFile", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont2loopBody1cont3when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont2loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont2loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("finishRangeFile", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_fire(ActorCallback< FinishRangeFileActor, 4, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("finishRangeFile", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont2loopBody1cont3when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont2loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont2loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("finishRangeFile", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_error(ActorCallback< FinishRangeFileActor, 4, Void >*,Error err) 
	{
		fdb_probe_actor_enter("finishRangeFile", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont2loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont2loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont2loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("finishRangeFile", reinterpret_cast<unsigned long>(this), 4);

	}
	int a_body1cont2loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont2loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont2loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont2loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont2loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont2loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont2loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont2loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose6() 
	{
		if (static_cast<FinishRangeFileActor*>(this)->actor_wait_state > 0) static_cast<FinishRangeFileActor*>(this)->actor_wait_state = 0;
		static_cast<FinishRangeFileActor*>(this)->ActorCallback< FinishRangeFileActor, 5, Void >::remove();

	}
	void a_callback_fire(ActorCallback< FinishRangeFileActor, 5, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("finishRangeFile", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1cont2loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("finishRangeFile", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_fire(ActorCallback< FinishRangeFileActor, 5, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("finishRangeFile", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1cont2loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("finishRangeFile", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_error(ActorCallback< FinishRangeFileActor, 5, Void >*,Error err) 
	{
		fdb_probe_actor_enter("finishRangeFile", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("finishRangeFile", reinterpret_cast<unsigned long>(this), 5);

	}
															#line 1096 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<IBackupFile> file;
															#line 1096 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Database cx;
															#line 1096 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<Task> task;
															#line 1096 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskBucket> taskBucket;
															#line 1096 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	KeyRange range;
															#line 1096 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Version version;
															#line 1108 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 1109 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	BackupConfig backup;
															#line 1110 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	bool usedFile;
															#line 1115 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	FlowLock::Releaser releaser;
															#line 1127 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Version newTimeout;
															#line 8170 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via finishRangeFile()
															#line 1096 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class FinishRangeFileActor final : public Actor<bool>, public ActorCallback< FinishRangeFileActor, 0, Void >, public ActorCallback< FinishRangeFileActor, 1, Void >, public ActorCallback< FinishRangeFileActor, 2, Version >, public ActorCallback< FinishRangeFileActor, 3, Optional<BackupConfig::RangeSlice> >, public ActorCallback< FinishRangeFileActor, 4, Void >, public ActorCallback< FinishRangeFileActor, 5, Void >, public FastAllocated<FinishRangeFileActor>, public FinishRangeFileActorState<FinishRangeFileActor> {
															#line 8175 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<FinishRangeFileActor>::operator new;
	using FastAllocated<FinishRangeFileActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<bool>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< FinishRangeFileActor, 0, Void >;
friend struct ActorCallback< FinishRangeFileActor, 1, Void >;
friend struct ActorCallback< FinishRangeFileActor, 2, Version >;
friend struct ActorCallback< FinishRangeFileActor, 3, Optional<BackupConfig::RangeSlice> >;
friend struct ActorCallback< FinishRangeFileActor, 4, Void >;
friend struct ActorCallback< FinishRangeFileActor, 5, Void >;
															#line 1096 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	FinishRangeFileActor(Reference<IBackupFile> const& file,Database const& cx,Reference<Task> const& task,Reference<TaskBucket> const& taskBucket,KeyRange const& range,Version const& version) 
															#line 8191 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<bool>(),
		   FinishRangeFileActorState<FinishRangeFileActor>(file, cx, task, taskBucket, range, version)
	{
		fdb_probe_actor_enter("finishRangeFile", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("finishRangeFile");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("finishRangeFile", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< FinishRangeFileActor, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< FinishRangeFileActor, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< FinishRangeFileActor, 2, Version >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< FinishRangeFileActor, 3, Optional<BackupConfig::RangeSlice> >*)0, actor_cancelled()); break;
		case 5: this->a_callback_error((ActorCallback< FinishRangeFileActor, 4, Void >*)0, actor_cancelled()); break;
		case 6: this->a_callback_error((ActorCallback< FinishRangeFileActor, 5, Void >*)0, actor_cancelled()); break;
		}

	}
};
															#line 1096 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<bool> finishRangeFile( Reference<IBackupFile> const& file, Database const& cx, Reference<Task> const& task, Reference<TaskBucket> const& taskBucket, KeyRange const& range, Version const& version ) {
															#line 1096 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<bool>(new FinishRangeFileActor(file, cx, task, taskBucket, range, version));
															#line 8223 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 1151 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

																#line 8228 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via addTask()
															#line 1152 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class AddTaskActor>
															#line 1152 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class AddTaskActorState {
															#line 8234 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 1152 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	AddTaskActorState(Reference<ReadYourWritesTransaction> const& tr,Reference<TaskBucket> const& taskBucket,Reference<Task> const& parentTask,int const& priority,Key const& begin,Key const& end,TaskCompletionKey const& completionKey,Reference<TaskFuture> const& waitFor = Reference<TaskFuture>(),Version const& scheduledVersion = invalidVersion) 
															#line 1152 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 1152 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : tr(tr),
															#line 1152 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   taskBucket(taskBucket),
															#line 1152 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   parentTask(parentTask),
															#line 1152 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   priority(priority),
															#line 1152 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   begin(begin),
															#line 1152 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   end(end),
															#line 1152 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   completionKey(completionKey),
															#line 1152 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   waitFor(waitFor),
															#line 1152 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   scheduledVersion(scheduledVersion)
															#line 8257 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("addTask", reinterpret_cast<unsigned long>(this));

	}
	~AddTaskActorState() 
	{
		fdb_probe_actor_destroy("addTask", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 1161 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Key> __when_expr_0 = addBackupTask( BackupRangeTaskFunc::name, BackupRangeTaskFunc::version, tr, taskBucket, completionKey, BackupConfig(parentTask), waitFor, [=](Reference<Task> task) { Params.beginKey().set(task, begin); Params.endKey().set(task, end); Params.addBackupRangeTasks().set(task, false); if (scheduledVersion != invalidVersion) ReservedTaskParams::scheduledVersion().set(task, scheduledVersion); }, priority);
															#line 1161 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<AddTaskActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 8274 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<AddTaskActor*>(this)->actor_wait_state = 1;
															#line 1161 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< AddTaskActor, 0, Key >*>(static_cast<AddTaskActor*>(this)));
															#line 8279 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~AddTaskActorState();
		static_cast<AddTaskActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Key const& key,int loopDepth) 
	{
															#line 1177 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<AddTaskActor*>(this)->SAV<Key>::futures) { (void)(key); this->~AddTaskActorState(); static_cast<AddTaskActor*>(this)->destroy(); return 0; }
															#line 8302 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<AddTaskActor*>(this)->SAV< Key >::value()) Key(key);
		this->~AddTaskActorState();
		static_cast<AddTaskActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1(Key && key,int loopDepth) 
	{
															#line 1177 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<AddTaskActor*>(this)->SAV<Key>::futures) { (void)(key); this->~AddTaskActorState(); static_cast<AddTaskActor*>(this)->destroy(); return 0; }
															#line 8314 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<AddTaskActor*>(this)->SAV< Key >::value()) Key(key);
		this->~AddTaskActorState();
		static_cast<AddTaskActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1when1(Key const& key,int loopDepth) 
	{
		loopDepth = a_body1cont1(key, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Key && key,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(key), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<AddTaskActor*>(this)->actor_wait_state > 0) static_cast<AddTaskActor*>(this)->actor_wait_state = 0;
		static_cast<AddTaskActor*>(this)->ActorCallback< AddTaskActor, 0, Key >::remove();

	}
	void a_callback_fire(ActorCallback< AddTaskActor, 0, Key >*,Key const& value) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< AddTaskActor, 0, Key >*,Key && value) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< AddTaskActor, 0, Key >*,Error err) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 1152 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 1152 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskBucket> taskBucket;
															#line 1152 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<Task> parentTask;
															#line 1152 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int priority;
															#line 1152 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Key begin;
															#line 1152 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Key end;
															#line 1152 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	TaskCompletionKey completionKey;
															#line 1152 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskFuture> waitFor;
															#line 1152 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Version scheduledVersion;
															#line 8403 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via addTask()
															#line 1152 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class AddTaskActor final : public Actor<Key>, public ActorCallback< AddTaskActor, 0, Key >, public FastAllocated<AddTaskActor>, public AddTaskActorState<AddTaskActor> {
															#line 8408 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<AddTaskActor>::operator new;
	using FastAllocated<AddTaskActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Key>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< AddTaskActor, 0, Key >;
															#line 1152 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	AddTaskActor(Reference<ReadYourWritesTransaction> const& tr,Reference<TaskBucket> const& taskBucket,Reference<Task> const& parentTask,int const& priority,Key const& begin,Key const& end,TaskCompletionKey const& completionKey,Reference<TaskFuture> const& waitFor = Reference<TaskFuture>(),Version const& scheduledVersion = invalidVersion) 
															#line 8419 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<Key>(),
		   AddTaskActorState<AddTaskActor>(tr, taskBucket, parentTask, priority, begin, end, completionKey, waitFor, scheduledVersion)
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("addTask");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< AddTaskActor, 0, Key >*)0, actor_cancelled()); break;
		}

	}
};
															#line 1152 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<Key> addTask( Reference<ReadYourWritesTransaction> const& tr, Reference<TaskBucket> const& taskBucket, Reference<Task> const& parentTask, int const& priority, Key const& begin, Key const& end, TaskCompletionKey const& completionKey, Reference<TaskFuture> const& waitFor = Reference<TaskFuture>(), Version const& scheduledVersion = invalidVersion ) {
															#line 1152 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<Key>(new AddTaskActor(tr, taskBucket, parentTask, priority, begin, end, completionKey, waitFor, scheduledVersion));
															#line 8446 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 1179 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

																#line 8451 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via _execute()
															#line 1180 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class _executeActor>
															#line 1180 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class _executeActorState {
															#line 8457 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 1180 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	_executeActorState(Database const& cx,Reference<TaskBucket> const& taskBucket,Reference<FutureBucket> const& futureBucket,Reference<Task> const& task) 
															#line 1180 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 1180 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : cx(cx),
															#line 1180 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   taskBucket(taskBucket),
															#line 1180 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   futureBucket(futureBucket),
															#line 1180 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   task(task),
															#line 1184 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   lock(new FlowLock(CLIENT_KNOBS->BACKUP_LOCK_BYTES))
															#line 8472 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("_execute", reinterpret_cast<unsigned long>(this));

	}
	~_executeActorState() 
	{
		fdb_probe_actor_destroy("_execute", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 1186 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_0 = checkTaskVersion(cx, task, BackupRangeTaskFunc::name, BackupRangeTaskFunc::version);
															#line 1186 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_executeActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 8489 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<_executeActor*>(this)->actor_wait_state = 1;
															#line 1186 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< _executeActor, 0, Void >*>(static_cast<_executeActor*>(this)));
															#line 8494 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~_executeActorState();
		static_cast<_executeActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void const& _,int loopDepth) 
	{
															#line 1188 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		beginKey = Params.beginKey().get(task);
															#line 1189 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		endKey = Params.endKey().get(task);
															#line 1191 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent("FileBackupRangeStart") .suppressFor(60) .detail("BackupUID", BackupConfig(task).getUid()) .detail("BeginKey", Params.beginKey().get(task).printable()) .detail("EndKey", Params.endKey().get(task).printable()) .detail("TaskKey", task->key.printable());
															#line 1200 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (beginKey == endKey)
															#line 8523 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 1201 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (!static_cast<_executeActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~_executeActorState(); static_cast<_executeActor*>(this)->destroy(); return 0; }
															#line 8527 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			new (&static_cast<_executeActor*>(this)->SAV< Void >::value()) Void(Void());
			this->~_executeActorState();
			static_cast<_executeActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 1204 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Standalone<VectorRef<KeyRef>>> __when_expr_1 = runRYWTransaction( cx, [=](Reference<ReadYourWritesTransaction> tr) { return getBlockOfShards(tr, beginKey, endKey, 1); });
															#line 1204 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 8537 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<_executeActor*>(this)->actor_wait_state = 2;
															#line 1204 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< _executeActor, 1, Standalone<VectorRef<KeyRef>> >*>(static_cast<_executeActor*>(this)));
															#line 8542 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void && _,int loopDepth) 
	{
															#line 1188 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		beginKey = Params.beginKey().get(task);
															#line 1189 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		endKey = Params.endKey().get(task);
															#line 1191 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent("FileBackupRangeStart") .suppressFor(60) .detail("BackupUID", BackupConfig(task).getUid()) .detail("BeginKey", Params.beginKey().get(task).printable()) .detail("EndKey", Params.endKey().get(task).printable()) .detail("TaskKey", task->key.printable());
															#line 1200 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (beginKey == endKey)
															#line 8557 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 1201 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (!static_cast<_executeActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~_executeActorState(); static_cast<_executeActor*>(this)->destroy(); return 0; }
															#line 8561 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			new (&static_cast<_executeActor*>(this)->SAV< Void >::value()) Void(Void());
			this->~_executeActorState();
			static_cast<_executeActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 1204 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Standalone<VectorRef<KeyRef>>> __when_expr_1 = runRYWTransaction( cx, [=](Reference<ReadYourWritesTransaction> tr) { return getBlockOfShards(tr, beginKey, endKey, 1); });
															#line 1204 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 8571 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<_executeActor*>(this)->actor_wait_state = 2;
															#line 1204 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< _executeActor, 1, Standalone<VectorRef<KeyRef>> >*>(static_cast<_executeActor*>(this)));
															#line 8576 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<_executeActor*>(this)->actor_wait_state > 0) static_cast<_executeActor*>(this)->actor_wait_state = 0;
		static_cast<_executeActor*>(this)->ActorCallback< _executeActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< _executeActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< _executeActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont2(Standalone<VectorRef<KeyRef>> const& keys,int loopDepth) 
	{
															#line 1206 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (keys.size() > 0)
															#line 8648 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 1207 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			Params.addBackupRangeTasks().set(task, true);
															#line 1208 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (!static_cast<_executeActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~_executeActorState(); static_cast<_executeActor*>(this)->destroy(); return 0; }
															#line 8654 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			new (&static_cast<_executeActor*>(this)->SAV< Void >::value()) Void(Void());
			this->~_executeActorState();
			static_cast<_executeActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 1214 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		outFile = Reference<IBackupFile>();
															#line 1215 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		outVersion = invalidVersion;
															#line 1216 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		lastKey = Key();
															#line 1219 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		results = PromiseStream<RangeResultWithVersion>();
															#line 1221 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		rc = readCommitted(cx, results, lock, KeyRangeRef(beginKey, endKey), Terminator::True, AccessSystemKeys::True, LockAware::True);
															#line 1228 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		rangeFile = RangeFileWriter();
															#line 1229 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		backup = BackupConfig(task);
															#line 1233 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Reference<IBackupContainer>> __when_expr_2 = backup.backupContainer().getD(cx);
															#line 1233 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 8678 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont2when1(__when_expr_2.get(), loopDepth); };
		static_cast<_executeActor*>(this)->actor_wait_state = 3;
															#line 1233 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< _executeActor, 2, Reference<IBackupContainer> >*>(static_cast<_executeActor*>(this)));
															#line 8683 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont2(Standalone<VectorRef<KeyRef>> && keys,int loopDepth) 
	{
															#line 1206 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (keys.size() > 0)
															#line 8692 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 1207 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			Params.addBackupRangeTasks().set(task, true);
															#line 1208 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (!static_cast<_executeActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~_executeActorState(); static_cast<_executeActor*>(this)->destroy(); return 0; }
															#line 8698 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			new (&static_cast<_executeActor*>(this)->SAV< Void >::value()) Void(Void());
			this->~_executeActorState();
			static_cast<_executeActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 1214 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		outFile = Reference<IBackupFile>();
															#line 1215 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		outVersion = invalidVersion;
															#line 1216 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		lastKey = Key();
															#line 1219 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		results = PromiseStream<RangeResultWithVersion>();
															#line 1221 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		rc = readCommitted(cx, results, lock, KeyRangeRef(beginKey, endKey), Terminator::True, AccessSystemKeys::True, LockAware::True);
															#line 1228 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		rangeFile = RangeFileWriter();
															#line 1229 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		backup = BackupConfig(task);
															#line 1233 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Reference<IBackupContainer>> __when_expr_2 = backup.backupContainer().getD(cx);
															#line 1233 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 8722 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont2when1(__when_expr_2.get(), loopDepth); };
		static_cast<_executeActor*>(this)->actor_wait_state = 3;
															#line 1233 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< _executeActor, 2, Reference<IBackupContainer> >*>(static_cast<_executeActor*>(this)));
															#line 8727 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1when1(Standalone<VectorRef<KeyRef>> const& keys,int loopDepth) 
	{
		loopDepth = a_body1cont2(keys, loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Standalone<VectorRef<KeyRef>> && keys,int loopDepth) 
	{
		loopDepth = a_body1cont2(std::move(keys), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<_executeActor*>(this)->actor_wait_state > 0) static_cast<_executeActor*>(this)->actor_wait_state = 0;
		static_cast<_executeActor*>(this)->ActorCallback< _executeActor, 1, Standalone<VectorRef<KeyRef>> >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor, 1, Standalone<VectorRef<KeyRef>> >*,Standalone<VectorRef<KeyRef>> const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< _executeActor, 1, Standalone<VectorRef<KeyRef>> >*,Standalone<VectorRef<KeyRef>> && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< _executeActor, 1, Standalone<VectorRef<KeyRef>> >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont4(Reference<IBackupContainer> const& _bc,int loopDepth) 
	{
															#line 1234 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!_bc)
															#line 8799 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 1235 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (!static_cast<_executeActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~_executeActorState(); static_cast<_executeActor*>(this)->destroy(); return 0; }
															#line 8803 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			new (&static_cast<_executeActor*>(this)->SAV< Void >::value()) Void(Void());
			this->~_executeActorState();
			static_cast<_executeActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 1237 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		bc = getBackupContainerWithProxy(_bc);
															#line 1238 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		done = false;
															#line 1239 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		nrKeys = 0;
															#line 1241 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		;
															#line 8817 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont4loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1cont4(Reference<IBackupContainer> && _bc,int loopDepth) 
	{
															#line 1234 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!_bc)
															#line 8826 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 1235 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (!static_cast<_executeActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~_executeActorState(); static_cast<_executeActor*>(this)->destroy(); return 0; }
															#line 8830 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			new (&static_cast<_executeActor*>(this)->SAV< Void >::value()) Void(Void());
			this->~_executeActorState();
			static_cast<_executeActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 1237 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		bc = getBackupContainerWithProxy(_bc);
															#line 1238 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		done = false;
															#line 1239 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		nrKeys = 0;
															#line 1241 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		;
															#line 8844 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont4loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1cont2when1(Reference<IBackupContainer> const& _bc,int loopDepth) 
	{
		loopDepth = a_body1cont4(_bc, loopDepth);

		return loopDepth;
	}
	int a_body1cont2when1(Reference<IBackupContainer> && _bc,int loopDepth) 
	{
		loopDepth = a_body1cont4(std::move(_bc), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<_executeActor*>(this)->actor_wait_state > 0) static_cast<_executeActor*>(this)->actor_wait_state = 0;
		static_cast<_executeActor*>(this)->ActorCallback< _executeActor, 2, Reference<IBackupContainer> >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor, 2, Reference<IBackupContainer> >*,Reference<IBackupContainer> const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< _executeActor, 2, Reference<IBackupContainer> >*,Reference<IBackupContainer> && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< _executeActor, 2, Reference<IBackupContainer> >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1cont4loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1cont4loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1cont4loopBody1(int loopDepth) 
	{
															#line 1242 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		values = RangeResultWithVersion();
															#line 8923 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		try {
															#line 1244 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			FutureStream<RangeResultWithVersion> __when_expr_3 = results.getFuture();
															#line 1244 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_executeActor*>(this)->actor_wait_state < 0) return a_body1cont4loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 8929 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1cont4loopBody1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1cont4loopBody1when1(__when_expr_3.pop(), loopDepth); };
			static_cast<_executeActor*>(this)->actor_wait_state = 4;
															#line 1244 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_3.addCallbackAndClear(static_cast<ActorSingleCallback< _executeActor, 3, RangeResultWithVersion >*>(static_cast<_executeActor*>(this)));
															#line 8934 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1cont4loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1cont4loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont4loopBody1cont1(int loopDepth) 
	{
															#line 1255 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (values.second != outVersion || done)
															#line 8949 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 1256 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (outFile)
															#line 8953 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			{
															#line 1257 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				TEST(outVersion != invalidVersion);
															#line 1258 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				nextKey = done ? endKey : keyAfter(lastKey);
															#line 1259 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				StrictFuture<Void> __when_expr_4 = rangeFile.writeKey(nextKey);
															#line 1259 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				if (static_cast<_executeActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 8963 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1Catch1(__when_expr_4.getError(), std::max(0, loopDepth - 1)); else return a_body1cont4loopBody1cont1when1(__when_expr_4.get(), loopDepth); };
				static_cast<_executeActor*>(this)->actor_wait_state = 5;
															#line 1259 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< _executeActor, 4, Void >*>(static_cast<_executeActor*>(this)));
															#line 8968 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				loopDepth = 0;
			}
			else
			{
				loopDepth = a_body1cont4loopBody1cont6(loopDepth);
			}
		}
		else
		{
			loopDepth = a_body1cont4loopBody1cont5(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont4loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 1248 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (e.code() == error_code_end_of_stream)
															#line 8988 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			{
															#line 1249 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				done = true;
															#line 8992 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			}
			else
			{
															#line 1251 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				return a_body1Catch1(e, std::max(0, loopDepth - 1));
															#line 8998 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			}
			loopDepth = a_body1cont4loopBody1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1cont4loopBody1cont2(RangeResultWithVersion const& _values,int loopDepth) 
	{
															#line 1245 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		values = _values;
															#line 1246 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		lock->release(values.first.expectedSize());
															#line 9016 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont4loopBody1cont4(loopDepth);

		return loopDepth;
	}
	int a_body1cont4loopBody1cont2(RangeResultWithVersion && _values,int loopDepth) 
	{
															#line 1245 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		values = _values;
															#line 1246 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		lock->release(values.first.expectedSize());
															#line 9027 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont4loopBody1cont4(loopDepth);

		return loopDepth;
	}
	int a_body1cont4loopBody1when1(RangeResultWithVersion const& _values,int loopDepth) 
	{
		loopDepth = a_body1cont4loopBody1cont2(_values, loopDepth);

		return loopDepth;
	}
	int a_body1cont4loopBody1when1(RangeResultWithVersion && _values,int loopDepth) 
	{
		loopDepth = a_body1cont4loopBody1cont2(std::move(_values), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<_executeActor*>(this)->actor_wait_state > 0) static_cast<_executeActor*>(this)->actor_wait_state = 0;
		static_cast<_executeActor*>(this)->ActorSingleCallback< _executeActor, 3, RangeResultWithVersion >::remove();

	}
	void a_callback_fire(ActorSingleCallback< _executeActor, 3, RangeResultWithVersion >*,RangeResultWithVersion const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont4loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont4loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont4loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorSingleCallback< _executeActor, 3, RangeResultWithVersion >*,RangeResultWithVersion && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont4loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont4loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont4loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorSingleCallback< _executeActor, 3, RangeResultWithVersion >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont4loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont4loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont4loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 3);

	}
	int a_body1cont4loopBody1cont4(int loopDepth) 
	{
		try {
			loopDepth = a_body1cont4loopBody1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1cont4loopBody1cont5(int loopDepth) 
	{
															#line 1320 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (values.first.size() != 0)
															#line 9112 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 1321 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			i = 0;
															#line 1322 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			;
															#line 9118 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = a_body1cont4loopBody1cont5loopHead1(loopDepth);
		}
		else
		{
			loopDepth = a_body1cont4loopBody1cont13(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont4loopBody1cont6(int loopDepth) 
	{
															#line 1281 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (done)
															#line 9132 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 1282 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (!static_cast<_executeActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~_executeActorState(); static_cast<_executeActor*>(this)->destroy(); return 0; }
															#line 9136 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			new (&static_cast<_executeActor*>(this)->SAV< Void >::value()) Void(Void());
			this->~_executeActorState();
			static_cast<_executeActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 1286 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		outVersion = values.second;
															#line 1289 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		blockSize = BUGGIFY ? deterministicRandom()->randomInt(250e3, 4e6) : CLIENT_KNOBS->BACKUP_RANGEFILE_BLOCK_SIZE;
															#line 1291 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		snapshotBeginVersion = Version();
															#line 1292 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		snapshotRangeFileCount = int64_t();
															#line 1294 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr = Reference<ReadYourWritesTransaction>(new ReadYourWritesTransaction(cx));
															#line 1295 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		;
															#line 9154 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont4loopBody1cont6loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1cont4loopBody1cont7(Void const& _,int loopDepth) 
	{
															#line 1261 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (BUGGIFY)
															#line 9163 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 1262 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_5 = rangeFile.padEnd();
															#line 1262 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_executeActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 9169 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_5.isReady()) { if (__when_expr_5.isError()) return a_body1Catch1(__when_expr_5.getError(), std::max(0, loopDepth - 1)); else return a_body1cont4loopBody1cont7when1(__when_expr_5.get(), loopDepth); };
			static_cast<_executeActor*>(this)->actor_wait_state = 6;
															#line 1262 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_5.addCallbackAndClear(static_cast<ActorCallback< _executeActor, 5, Void >*>(static_cast<_executeActor*>(this)));
															#line 9174 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1cont4loopBody1cont8(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont4loopBody1cont7(Void && _,int loopDepth) 
	{
															#line 1261 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (BUGGIFY)
															#line 9188 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 1262 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_5 = rangeFile.padEnd();
															#line 1262 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_executeActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 9194 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_5.isReady()) { if (__when_expr_5.isError()) return a_body1Catch1(__when_expr_5.getError(), std::max(0, loopDepth - 1)); else return a_body1cont4loopBody1cont7when1(__when_expr_5.get(), loopDepth); };
			static_cast<_executeActor*>(this)->actor_wait_state = 6;
															#line 1262 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_5.addCallbackAndClear(static_cast<ActorCallback< _executeActor, 5, Void >*>(static_cast<_executeActor*>(this)));
															#line 9199 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1cont4loopBody1cont8(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont4loopBody1cont1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont4loopBody1cont7(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont4loopBody1cont1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont4loopBody1cont7(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose5() 
	{
		if (static_cast<_executeActor*>(this)->actor_wait_state > 0) static_cast<_executeActor*>(this)->actor_wait_state = 0;
		static_cast<_executeActor*>(this)->ActorCallback< _executeActor, 4, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor, 4, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont4loopBody1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_fire(ActorCallback< _executeActor, 4, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont4loopBody1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_error(ActorCallback< _executeActor, 4, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 4);

	}
	int a_body1cont4loopBody1cont8(int loopDepth) 
	{
															#line 1265 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<bool> __when_expr_6 = finishRangeFile(outFile, cx, task, taskBucket, KeyRangeRef(beginKey, nextKey), outVersion);
															#line 1265 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 9278 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_6.isReady()) { if (__when_expr_6.isError()) return a_body1Catch1(__when_expr_6.getError(), std::max(0, loopDepth - 1)); else return a_body1cont4loopBody1cont8when1(__when_expr_6.get(), loopDepth); };
		static_cast<_executeActor*>(this)->actor_wait_state = 7;
															#line 1265 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_6.addCallbackAndClear(static_cast<ActorCallback< _executeActor, 6, bool >*>(static_cast<_executeActor*>(this)));
															#line 9283 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont4loopBody1cont9(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont4loopBody1cont8(loopDepth);

		return loopDepth;
	}
	int a_body1cont4loopBody1cont9(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont4loopBody1cont8(loopDepth);

		return loopDepth;
	}
	int a_body1cont4loopBody1cont7when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont4loopBody1cont9(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont4loopBody1cont7when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont4loopBody1cont9(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose6() 
	{
		if (static_cast<_executeActor*>(this)->actor_wait_state > 0) static_cast<_executeActor*>(this)->actor_wait_state = 0;
		static_cast<_executeActor*>(this)->ActorCallback< _executeActor, 5, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor, 5, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1cont4loopBody1cont7when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_fire(ActorCallback< _executeActor, 5, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1cont4loopBody1cont7when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_error(ActorCallback< _executeActor, 5, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 5);

	}
	int a_body1cont4loopBody1cont10(bool const& usedFile,int loopDepth) 
	{
															#line 1267 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent("FileBackupWroteRangeFile") .suppressFor(60) .detail("BackupUID", backup.getUid()) .detail("Size", outFile->size()) .detail("Keys", nrKeys) .detail("ReadVersion", outVersion) .detail("BeginKey", beginKey.printable()) .detail("EndKey", nextKey.printable()) .detail("AddedFileToMap", usedFile);
															#line 1277 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		nrKeys = 0;
															#line 1278 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		beginKey = nextKey;
															#line 9371 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont4loopBody1cont6(loopDepth);

		return loopDepth;
	}
	int a_body1cont4loopBody1cont10(bool && usedFile,int loopDepth) 
	{
															#line 1267 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent("FileBackupWroteRangeFile") .suppressFor(60) .detail("BackupUID", backup.getUid()) .detail("Size", outFile->size()) .detail("Keys", nrKeys) .detail("ReadVersion", outVersion) .detail("BeginKey", beginKey.printable()) .detail("EndKey", nextKey.printable()) .detail("AddedFileToMap", usedFile);
															#line 1277 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		nrKeys = 0;
															#line 1278 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		beginKey = nextKey;
															#line 9384 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont4loopBody1cont6(loopDepth);

		return loopDepth;
	}
	int a_body1cont4loopBody1cont8when1(bool const& usedFile,int loopDepth) 
	{
		loopDepth = a_body1cont4loopBody1cont10(usedFile, loopDepth);

		return loopDepth;
	}
	int a_body1cont4loopBody1cont8when1(bool && usedFile,int loopDepth) 
	{
		loopDepth = a_body1cont4loopBody1cont10(std::move(usedFile), loopDepth);

		return loopDepth;
	}
	void a_exitChoose7() 
	{
		if (static_cast<_executeActor*>(this)->actor_wait_state > 0) static_cast<_executeActor*>(this)->actor_wait_state = 0;
		static_cast<_executeActor*>(this)->ActorCallback< _executeActor, 6, bool >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor, 6, bool >*,bool const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1cont4loopBody1cont8when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 6);

	}
	void a_callback_fire(ActorCallback< _executeActor, 6, bool >*,bool && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1cont4loopBody1cont8when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 6);

	}
	void a_callback_error(ActorCallback< _executeActor, 6, bool >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 6);

	}
	int a_body1cont4loopBody1cont11(int loopDepth) 
	{
															#line 1310 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Reference<IBackupFile>> __when_expr_9 = bc->writeRangeFile(snapshotBeginVersion, snapshotRangeFileCount, outVersion, blockSize);
															#line 1310 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 9458 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_9.isReady()) { if (__when_expr_9.isError()) return a_body1Catch1(__when_expr_9.getError(), std::max(0, loopDepth - 1)); else return a_body1cont4loopBody1cont11when1(__when_expr_9.get(), loopDepth); };
		static_cast<_executeActor*>(this)->actor_wait_state = 10;
															#line 1310 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_9.addCallbackAndClear(static_cast<ActorCallback< _executeActor, 9, Reference<IBackupFile> >*>(static_cast<_executeActor*>(this)));
															#line 9463 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont4loopBody1cont6loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1cont4loopBody1cont6loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1cont4loopBody1cont6loopBody1(int loopDepth) 
	{
		try {
															#line 1297 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 1298 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 1300 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_7 = taskBucket->keepRunning(tr, task) && storeOrThrow(snapshotBeginVersion, backup.snapshotBeginVersion().get(tr)) && store(snapshotRangeFileCount, backup.snapshotRangeFileCount().getD(tr));
															#line 1300 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_executeActor*>(this)->actor_wait_state < 0) return a_body1cont4loopBody1cont6loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 9486 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_7.isReady()) { if (__when_expr_7.isError()) return a_body1cont4loopBody1cont6loopBody1Catch1(__when_expr_7.getError(), loopDepth); else return a_body1cont4loopBody1cont6loopBody1when1(__when_expr_7.get(), loopDepth); };
			static_cast<_executeActor*>(this)->actor_wait_state = 8;
															#line 1300 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_7.addCallbackAndClear(static_cast<ActorCallback< _executeActor, 7, Void >*>(static_cast<_executeActor*>(this)));
															#line 9491 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1cont4loopBody1cont6loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1cont4loopBody1cont6loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont4loopBody1cont6break1(int loopDepth) 
	{
		try {
			return a_body1cont4loopBody1cont11(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1cont4loopBody1cont6loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1cont4loopBody1cont6loopHead1(0);

		return loopDepth;
	}
	int a_body1cont4loopBody1cont6loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 1306 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_8 = tr->onError(e);
															#line 1306 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_executeActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 2));
															#line 9528 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_8.isReady()) { if (__when_expr_8.isError()) return a_body1Catch1(__when_expr_8.getError(), std::max(0, loopDepth - 2)); else return a_body1cont4loopBody1cont6loopBody1Catch1when1(__when_expr_8.get(), loopDepth); };
			static_cast<_executeActor*>(this)->actor_wait_state = 9;
															#line 1306 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_8.addCallbackAndClear(static_cast<ActorCallback< _executeActor, 8, Void >*>(static_cast<_executeActor*>(this)));
															#line 9533 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 2));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 2));
		}

		return loopDepth;
	}
	int a_body1cont4loopBody1cont6loopBody1cont2(Void const& _,int loopDepth) 
	{
		return a_body1cont4loopBody1cont6break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1cont4loopBody1cont6loopBody1cont2(Void && _,int loopDepth) 
	{
		return a_body1cont4loopBody1cont6break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1cont4loopBody1cont6loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont4loopBody1cont6loopBody1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont4loopBody1cont6loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont4loopBody1cont6loopBody1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose8() 
	{
		if (static_cast<_executeActor*>(this)->actor_wait_state > 0) static_cast<_executeActor*>(this)->actor_wait_state = 0;
		static_cast<_executeActor*>(this)->ActorCallback< _executeActor, 7, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor, 7, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 7);
		a_exitChoose8();
		try {
			a_body1cont4loopBody1cont6loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont4loopBody1cont6loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont4loopBody1cont6loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 7);

	}
	void a_callback_fire(ActorCallback< _executeActor, 7, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 7);
		a_exitChoose8();
		try {
			a_body1cont4loopBody1cont6loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont4loopBody1cont6loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont4loopBody1cont6loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 7);

	}
	void a_callback_error(ActorCallback< _executeActor, 7, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 7);
		a_exitChoose8();
		try {
			a_body1cont4loopBody1cont6loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont4loopBody1cont6loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont4loopBody1cont6loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 7);

	}
	int a_body1cont4loopBody1cont6loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont4loopBody1cont6loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont4loopBody1cont6loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont4loopBody1cont6loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont4loopBody1cont6loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont4loopBody1cont6loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont4loopBody1cont6loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont4loopBody1cont6loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose9() 
	{
		if (static_cast<_executeActor*>(this)->actor_wait_state > 0) static_cast<_executeActor*>(this)->actor_wait_state = 0;
		static_cast<_executeActor*>(this)->ActorCallback< _executeActor, 8, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor, 8, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 8);
		a_exitChoose9();
		try {
			a_body1cont4loopBody1cont6loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 8);

	}
	void a_callback_fire(ActorCallback< _executeActor, 8, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 8);
		a_exitChoose9();
		try {
			a_body1cont4loopBody1cont6loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 8);

	}
	void a_callback_error(ActorCallback< _executeActor, 8, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 8);
		a_exitChoose9();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 8);

	}
	int a_body1cont4loopBody1cont11cont1(Reference<IBackupFile> const& f,int loopDepth) 
	{
															#line 1312 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		outFile = f;
															#line 1315 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		rangeFile = RangeFileWriter(outFile, blockSize);
															#line 1316 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_10 = rangeFile.writeKey(beginKey);
															#line 1316 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 9704 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_10.isReady()) { if (__when_expr_10.isError()) return a_body1Catch1(__when_expr_10.getError(), std::max(0, loopDepth - 1)); else return a_body1cont4loopBody1cont11cont1when1(__when_expr_10.get(), loopDepth); };
		static_cast<_executeActor*>(this)->actor_wait_state = 11;
															#line 1316 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_10.addCallbackAndClear(static_cast<ActorCallback< _executeActor, 10, Void >*>(static_cast<_executeActor*>(this)));
															#line 9709 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont4loopBody1cont11cont1(Reference<IBackupFile> && f,int loopDepth) 
	{
															#line 1312 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		outFile = f;
															#line 1315 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		rangeFile = RangeFileWriter(outFile, blockSize);
															#line 1316 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_10 = rangeFile.writeKey(beginKey);
															#line 1316 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 9724 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_10.isReady()) { if (__when_expr_10.isError()) return a_body1Catch1(__when_expr_10.getError(), std::max(0, loopDepth - 1)); else return a_body1cont4loopBody1cont11cont1when1(__when_expr_10.get(), loopDepth); };
		static_cast<_executeActor*>(this)->actor_wait_state = 11;
															#line 1316 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_10.addCallbackAndClear(static_cast<ActorCallback< _executeActor, 10, Void >*>(static_cast<_executeActor*>(this)));
															#line 9729 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont4loopBody1cont11when1(Reference<IBackupFile> const& f,int loopDepth) 
	{
		loopDepth = a_body1cont4loopBody1cont11cont1(f, loopDepth);

		return loopDepth;
	}
	int a_body1cont4loopBody1cont11when1(Reference<IBackupFile> && f,int loopDepth) 
	{
		loopDepth = a_body1cont4loopBody1cont11cont1(std::move(f), loopDepth);

		return loopDepth;
	}
	void a_exitChoose10() 
	{
		if (static_cast<_executeActor*>(this)->actor_wait_state > 0) static_cast<_executeActor*>(this)->actor_wait_state = 0;
		static_cast<_executeActor*>(this)->ActorCallback< _executeActor, 9, Reference<IBackupFile> >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor, 9, Reference<IBackupFile> >*,Reference<IBackupFile> const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 9);
		a_exitChoose10();
		try {
			a_body1cont4loopBody1cont11when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 9);

	}
	void a_callback_fire(ActorCallback< _executeActor, 9, Reference<IBackupFile> >*,Reference<IBackupFile> && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 9);
		a_exitChoose10();
		try {
			a_body1cont4loopBody1cont11when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 9);

	}
	void a_callback_error(ActorCallback< _executeActor, 9, Reference<IBackupFile> >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 9);
		a_exitChoose10();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 9);

	}
	int a_body1cont4loopBody1cont11cont2(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont4loopBody1cont5(loopDepth);

		return loopDepth;
	}
	int a_body1cont4loopBody1cont11cont2(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont4loopBody1cont5(loopDepth);

		return loopDepth;
	}
	int a_body1cont4loopBody1cont11cont1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont4loopBody1cont11cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont4loopBody1cont11cont1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont4loopBody1cont11cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose11() 
	{
		if (static_cast<_executeActor*>(this)->actor_wait_state > 0) static_cast<_executeActor*>(this)->actor_wait_state = 0;
		static_cast<_executeActor*>(this)->ActorCallback< _executeActor, 10, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor, 10, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 10);
		a_exitChoose11();
		try {
			a_body1cont4loopBody1cont11cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 10);

	}
	void a_callback_fire(ActorCallback< _executeActor, 10, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 10);
		a_exitChoose11();
		try {
			a_body1cont4loopBody1cont11cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 10);

	}
	void a_callback_error(ActorCallback< _executeActor, 10, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 10);
		a_exitChoose11();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 10);

	}
	int a_body1cont4loopBody1cont13(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1cont4loopHead1(0);

		return loopDepth;
	}
	int a_body1cont4loopBody1cont14(int loopDepth) 
	{
															#line 1325 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		lastKey = values.first.back().key;
															#line 1326 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		nrKeys += values.first.size();
															#line 9884 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont4loopBody1cont13(loopDepth);

		return loopDepth;
	}
	int a_body1cont4loopBody1cont5loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1cont4loopBody1cont5loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1cont4loopBody1cont5loopBody1(int loopDepth) 
	{
															#line 1322 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!(i < values.first.size()))
															#line 9900 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
			return a_body1cont4loopBody1cont5break1(loopDepth==0?0:loopDepth-1); // break
		}
															#line 1323 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_11 = rangeFile.writeKV(values.first[i].key, values.first[i].value);
															#line 1323 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 2));
															#line 9908 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_11.isReady()) { if (__when_expr_11.isError()) return a_body1Catch1(__when_expr_11.getError(), std::max(0, loopDepth - 2)); else return a_body1cont4loopBody1cont5loopBody1when1(__when_expr_11.get(), loopDepth); };
		static_cast<_executeActor*>(this)->actor_wait_state = 12;
															#line 1323 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_11.addCallbackAndClear(static_cast<ActorCallback< _executeActor, 11, Void >*>(static_cast<_executeActor*>(this)));
															#line 9913 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont4loopBody1cont5break1(int loopDepth) 
	{
		try {
			return a_body1cont4loopBody1cont14(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1cont4loopBody1cont5loopBody1cont1(Void const& _,int loopDepth) 
	{
															#line 1322 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		++i;
															#line 9935 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (loopDepth == 0) return a_body1cont4loopBody1cont5loopHead1(0);

		return loopDepth;
	}
	int a_body1cont4loopBody1cont5loopBody1cont1(Void && _,int loopDepth) 
	{
															#line 1322 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		++i;
															#line 9944 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (loopDepth == 0) return a_body1cont4loopBody1cont5loopHead1(0);

		return loopDepth;
	}
	int a_body1cont4loopBody1cont5loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont4loopBody1cont5loopBody1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont4loopBody1cont5loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont4loopBody1cont5loopBody1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose12() 
	{
		if (static_cast<_executeActor*>(this)->actor_wait_state > 0) static_cast<_executeActor*>(this)->actor_wait_state = 0;
		static_cast<_executeActor*>(this)->ActorCallback< _executeActor, 11, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor, 11, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 11);
		a_exitChoose12();
		try {
			a_body1cont4loopBody1cont5loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 11);

	}
	void a_callback_fire(ActorCallback< _executeActor, 11, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 11);
		a_exitChoose12();
		try {
			a_body1cont4loopBody1cont5loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 11);

	}
	void a_callback_error(ActorCallback< _executeActor, 11, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 11);
		a_exitChoose12();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 11);

	}
															#line 1180 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Database cx;
															#line 1180 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskBucket> taskBucket;
															#line 1180 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<FutureBucket> futureBucket;
															#line 1180 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<Task> task;
															#line 1184 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<FlowLock> lock;
															#line 1188 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Key beginKey;
															#line 1189 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Key endKey;
															#line 1214 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<IBackupFile> outFile;
															#line 1215 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Version outVersion;
															#line 1216 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Key lastKey;
															#line 1219 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	PromiseStream<RangeResultWithVersion> results;
															#line 1221 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Future<Void> rc;
															#line 1228 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	RangeFileWriter rangeFile;
															#line 1229 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	BackupConfig backup;
															#line 1237 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<IBackupContainer> bc;
															#line 1238 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	bool done;
															#line 1239 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int64_t nrKeys;
															#line 1242 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	RangeResultWithVersion values;
															#line 1258 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Key nextKey;
															#line 1289 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int blockSize;
															#line 1291 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Version snapshotBeginVersion;
															#line 1292 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int64_t snapshotRangeFileCount;
															#line 1294 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 1321 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	size_t i;
															#line 10060 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via _execute()
															#line 1180 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class _executeActor final : public Actor<Void>, public ActorCallback< _executeActor, 0, Void >, public ActorCallback< _executeActor, 1, Standalone<VectorRef<KeyRef>> >, public ActorCallback< _executeActor, 2, Reference<IBackupContainer> >, public ActorSingleCallback< _executeActor, 3, RangeResultWithVersion >, public ActorCallback< _executeActor, 4, Void >, public ActorCallback< _executeActor, 5, Void >, public ActorCallback< _executeActor, 6, bool >, public ActorCallback< _executeActor, 7, Void >, public ActorCallback< _executeActor, 8, Void >, public ActorCallback< _executeActor, 9, Reference<IBackupFile> >, public ActorCallback< _executeActor, 10, Void >, public ActorCallback< _executeActor, 11, Void >, public FastAllocated<_executeActor>, public _executeActorState<_executeActor> {
															#line 10065 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<_executeActor>::operator new;
	using FastAllocated<_executeActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< _executeActor, 0, Void >;
friend struct ActorCallback< _executeActor, 1, Standalone<VectorRef<KeyRef>> >;
friend struct ActorCallback< _executeActor, 2, Reference<IBackupContainer> >;
friend struct ActorSingleCallback< _executeActor, 3, RangeResultWithVersion >;
friend struct ActorCallback< _executeActor, 4, Void >;
friend struct ActorCallback< _executeActor, 5, Void >;
friend struct ActorCallback< _executeActor, 6, bool >;
friend struct ActorCallback< _executeActor, 7, Void >;
friend struct ActorCallback< _executeActor, 8, Void >;
friend struct ActorCallback< _executeActor, 9, Reference<IBackupFile> >;
friend struct ActorCallback< _executeActor, 10, Void >;
friend struct ActorCallback< _executeActor, 11, Void >;
															#line 1180 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	_executeActor(Database const& cx,Reference<TaskBucket> const& taskBucket,Reference<FutureBucket> const& futureBucket,Reference<Task> const& task) 
															#line 10087 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<Void>(),
		   _executeActorState<_executeActor>(cx, taskBucket, futureBucket, task)
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("_execute");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< _executeActor, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< _executeActor, 1, Standalone<VectorRef<KeyRef>> >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< _executeActor, 2, Reference<IBackupContainer> >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorSingleCallback< _executeActor, 3, RangeResultWithVersion >*)0, actor_cancelled()); break;
		case 5: this->a_callback_error((ActorCallback< _executeActor, 4, Void >*)0, actor_cancelled()); break;
		case 6: this->a_callback_error((ActorCallback< _executeActor, 5, Void >*)0, actor_cancelled()); break;
		case 7: this->a_callback_error((ActorCallback< _executeActor, 6, bool >*)0, actor_cancelled()); break;
		case 8: this->a_callback_error((ActorCallback< _executeActor, 7, Void >*)0, actor_cancelled()); break;
		case 9: this->a_callback_error((ActorCallback< _executeActor, 8, Void >*)0, actor_cancelled()); break;
		case 10: this->a_callback_error((ActorCallback< _executeActor, 9, Reference<IBackupFile> >*)0, actor_cancelled()); break;
		case 11: this->a_callback_error((ActorCallback< _executeActor, 10, Void >*)0, actor_cancelled()); break;
		case 12: this->a_callback_error((ActorCallback< _executeActor, 11, Void >*)0, actor_cancelled()); break;
		}

	}
};
															#line 1180 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<Void> _execute( Database const& cx, Reference<TaskBucket> const& taskBucket, Reference<FutureBucket> const& futureBucket, Reference<Task> const& task ) {
															#line 1180 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<Void>(new _executeActor(cx, taskBucket, futureBucket, task));
															#line 10125 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 1330 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

																#line 10130 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via startBackupRangeInternal()
															#line 1331 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class StartBackupRangeInternalActor>
															#line 1331 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class StartBackupRangeInternalActorState {
															#line 10136 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 1331 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	StartBackupRangeInternalActorState(Reference<ReadYourWritesTransaction> const& tr,Reference<TaskBucket> const& taskBucket,Reference<FutureBucket> const& futureBucket,Reference<Task> const& task,Reference<TaskFuture> const& onDone) 
															#line 1331 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 1331 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : tr(tr),
															#line 1331 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   taskBucket(taskBucket),
															#line 1331 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   futureBucket(futureBucket),
															#line 1331 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   task(task),
															#line 1331 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   onDone(onDone)
															#line 10151 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("startBackupRangeInternal", reinterpret_cast<unsigned long>(this));

	}
	~StartBackupRangeInternalActorState() 
	{
		fdb_probe_actor_destroy("startBackupRangeInternal", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 1336 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 1337 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 1338 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			nextKey = Params.beginKey().get(task);
															#line 1339 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			endKey = Params.endKey().get(task);
															#line 1341 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Standalone<VectorRef<KeyRef>>> __when_expr_0 = getBlockOfShards(tr, nextKey, endKey, CLIENT_KNOBS->BACKUP_SHARD_TASK_LIMIT);
															#line 1341 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<StartBackupRangeInternalActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 10176 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<StartBackupRangeInternalActor*>(this)->actor_wait_state = 1;
															#line 1341 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< StartBackupRangeInternalActor, 0, Standalone<VectorRef<KeyRef>> >*>(static_cast<StartBackupRangeInternalActor*>(this)));
															#line 10181 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~StartBackupRangeInternalActorState();
		static_cast<StartBackupRangeInternalActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 1344 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		std::vector<Future<Key>> addTaskVector;
															#line 1345 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		for(int idx = 0;idx < keys.size();++idx) {
															#line 1346 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (nextKey != keys[idx])
															#line 10208 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			{
															#line 1347 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				addTaskVector.push_back(addTask(tr, taskBucket, task, task->getPriority(), nextKey, keys[idx], TaskCompletionKey::joinWith(onDone)));
															#line 1354 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				TraceEvent("FileBackupRangeSplit") .suppressFor(60) .detail("BackupUID", BackupConfig(task).getUid()) .detail("BeginKey", Params.beginKey().get(task).printable()) .detail("EndKey", Params.endKey().get(task).printable()) .detail("SliceBeginKey", nextKey.printable()) .detail("SliceEndKey", keys[idx].printable());
															#line 10214 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			}
															#line 1362 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			nextKey = keys[idx];
															#line 10218 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 1365 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_1 = waitForAll(addTaskVector);
															#line 1365 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<StartBackupRangeInternalActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 10224 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<StartBackupRangeInternalActor*>(this)->actor_wait_state = 2;
															#line 1365 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< StartBackupRangeInternalActor, 1, Void >*>(static_cast<StartBackupRangeInternalActor*>(this)));
															#line 10229 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1when1(Standalone<VectorRef<KeyRef>> const& __keys,int loopDepth) 
	{
															#line 1341 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		keys = __keys;
															#line 10238 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1when1(Standalone<VectorRef<KeyRef>> && __keys,int loopDepth) 
	{
		keys = std::move(__keys);
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<StartBackupRangeInternalActor*>(this)->actor_wait_state > 0) static_cast<StartBackupRangeInternalActor*>(this)->actor_wait_state = 0;
		static_cast<StartBackupRangeInternalActor*>(this)->ActorCallback< StartBackupRangeInternalActor, 0, Standalone<VectorRef<KeyRef>> >::remove();

	}
	void a_callback_fire(ActorCallback< StartBackupRangeInternalActor, 0, Standalone<VectorRef<KeyRef>> >*,Standalone<VectorRef<KeyRef>> const& value) 
	{
		fdb_probe_actor_enter("startBackupRangeInternal", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("startBackupRangeInternal", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< StartBackupRangeInternalActor, 0, Standalone<VectorRef<KeyRef>> >*,Standalone<VectorRef<KeyRef>> && value) 
	{
		fdb_probe_actor_enter("startBackupRangeInternal", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("startBackupRangeInternal", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< StartBackupRangeInternalActor, 0, Standalone<VectorRef<KeyRef>> >*,Error err) 
	{
		fdb_probe_actor_enter("startBackupRangeInternal", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("startBackupRangeInternal", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont2(Void const& _,int loopDepth) 
	{
															#line 1367 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (nextKey != endKey)
															#line 10305 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 1369 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_2 = success(addTask(tr, taskBucket, task, task->getPriority(), nextKey, endKey, TaskCompletionKey::joinWith(onDone), Reference<TaskFuture>(), task->getPriority()));
															#line 1369 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<StartBackupRangeInternalActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 10311 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont2when1(__when_expr_2.get(), loopDepth); };
			static_cast<StartBackupRangeInternalActor*>(this)->actor_wait_state = 3;
															#line 1369 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< StartBackupRangeInternalActor, 2, Void >*>(static_cast<StartBackupRangeInternalActor*>(this)));
															#line 10316 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1cont5(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont2(Void && _,int loopDepth) 
	{
															#line 1367 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (nextKey != endKey)
															#line 10330 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 1369 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_2 = success(addTask(tr, taskBucket, task, task->getPriority(), nextKey, endKey, TaskCompletionKey::joinWith(onDone), Reference<TaskFuture>(), task->getPriority()));
															#line 1369 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<StartBackupRangeInternalActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 10336 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont2when1(__when_expr_2.get(), loopDepth); };
			static_cast<StartBackupRangeInternalActor*>(this)->actor_wait_state = 3;
															#line 1369 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< StartBackupRangeInternalActor, 2, Void >*>(static_cast<StartBackupRangeInternalActor*>(this)));
															#line 10341 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1cont5(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<StartBackupRangeInternalActor*>(this)->actor_wait_state > 0) static_cast<StartBackupRangeInternalActor*>(this)->actor_wait_state = 0;
		static_cast<StartBackupRangeInternalActor*>(this)->ActorCallback< StartBackupRangeInternalActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< StartBackupRangeInternalActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("startBackupRangeInternal", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("startBackupRangeInternal", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< StartBackupRangeInternalActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("startBackupRangeInternal", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("startBackupRangeInternal", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< StartBackupRangeInternalActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("startBackupRangeInternal", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("startBackupRangeInternal", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont5(int loopDepth) 
	{
															#line 1380 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<StartBackupRangeInternalActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~StartBackupRangeInternalActorState(); static_cast<StartBackupRangeInternalActor*>(this)->destroy(); return 0; }
															#line 10418 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<StartBackupRangeInternalActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~StartBackupRangeInternalActorState();
		static_cast<StartBackupRangeInternalActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont6(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont5(loopDepth);

		return loopDepth;
	}
	int a_body1cont6(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont5(loopDepth);

		return loopDepth;
	}
	int a_body1cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont6(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont6(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<StartBackupRangeInternalActor*>(this)->actor_wait_state > 0) static_cast<StartBackupRangeInternalActor*>(this)->actor_wait_state = 0;
		static_cast<StartBackupRangeInternalActor*>(this)->ActorCallback< StartBackupRangeInternalActor, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< StartBackupRangeInternalActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("startBackupRangeInternal", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("startBackupRangeInternal", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< StartBackupRangeInternalActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("startBackupRangeInternal", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("startBackupRangeInternal", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< StartBackupRangeInternalActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("startBackupRangeInternal", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("startBackupRangeInternal", reinterpret_cast<unsigned long>(this), 2);

	}
															#line 1331 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 1331 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskBucket> taskBucket;
															#line 1331 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<FutureBucket> futureBucket;
															#line 1331 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<Task> task;
															#line 1331 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskFuture> onDone;
															#line 1338 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Key nextKey;
															#line 1339 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Key endKey;
															#line 1341 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Standalone<VectorRef<KeyRef>> keys;
															#line 10517 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via startBackupRangeInternal()
															#line 1331 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class StartBackupRangeInternalActor final : public Actor<Void>, public ActorCallback< StartBackupRangeInternalActor, 0, Standalone<VectorRef<KeyRef>> >, public ActorCallback< StartBackupRangeInternalActor, 1, Void >, public ActorCallback< StartBackupRangeInternalActor, 2, Void >, public FastAllocated<StartBackupRangeInternalActor>, public StartBackupRangeInternalActorState<StartBackupRangeInternalActor> {
															#line 10522 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<StartBackupRangeInternalActor>::operator new;
	using FastAllocated<StartBackupRangeInternalActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< StartBackupRangeInternalActor, 0, Standalone<VectorRef<KeyRef>> >;
friend struct ActorCallback< StartBackupRangeInternalActor, 1, Void >;
friend struct ActorCallback< StartBackupRangeInternalActor, 2, Void >;
															#line 1331 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	StartBackupRangeInternalActor(Reference<ReadYourWritesTransaction> const& tr,Reference<TaskBucket> const& taskBucket,Reference<FutureBucket> const& futureBucket,Reference<Task> const& task,Reference<TaskFuture> const& onDone) 
															#line 10535 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<Void>(),
		   StartBackupRangeInternalActorState<StartBackupRangeInternalActor>(tr, taskBucket, futureBucket, task, onDone)
	{
		fdb_probe_actor_enter("startBackupRangeInternal", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("startBackupRangeInternal");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("startBackupRangeInternal", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< StartBackupRangeInternalActor, 0, Standalone<VectorRef<KeyRef>> >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< StartBackupRangeInternalActor, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< StartBackupRangeInternalActor, 2, Void >*)0, actor_cancelled()); break;
		}

	}
};
															#line 1331 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<Void> startBackupRangeInternal( Reference<ReadYourWritesTransaction> const& tr, Reference<TaskBucket> const& taskBucket, Reference<FutureBucket> const& futureBucket, Reference<Task> const& task, Reference<TaskFuture> const& onDone ) {
															#line 1331 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<Void>(new StartBackupRangeInternalActor(tr, taskBucket, futureBucket, task, onDone));
															#line 10564 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 1382 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

																#line 10569 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via _finish()
															#line 1383 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class _finishActor2>
															#line 1383 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class _finishActor2State {
															#line 10575 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 1383 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	_finishActor2State(Reference<ReadYourWritesTransaction> const& tr,Reference<TaskBucket> const& taskBucket,Reference<FutureBucket> const& futureBucket,Reference<Task> const& task) 
															#line 1383 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 1383 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : tr(tr),
															#line 1383 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   taskBucket(taskBucket),
															#line 1383 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   futureBucket(futureBucket),
															#line 1383 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   task(task),
															#line 1387 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   taskFuture(futureBucket->unpack(task->params[Task::reservedTaskParamKeyDone]))
															#line 10590 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("_finish", reinterpret_cast<unsigned long>(this));

	}
	~_finishActor2State() 
	{
		fdb_probe_actor_destroy("_finish", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 1389 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (Params.addBackupRangeTasks().get(task))
															#line 10605 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			{
															#line 1390 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				StrictFuture<Void> __when_expr_0 = startBackupRangeInternal(tr, taskBucket, futureBucket, task, taskFuture);
															#line 1390 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				if (static_cast<_finishActor2*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 10611 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
				static_cast<_finishActor2*>(this)->actor_wait_state = 1;
															#line 1390 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< _finishActor2, 0, Void >*>(static_cast<_finishActor2*>(this)));
															#line 10616 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				loopDepth = 0;
			}
			else
			{
															#line 1392 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				StrictFuture<Void> __when_expr_1 = taskFuture->set(tr, taskBucket);
															#line 1392 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				if (static_cast<_finishActor2*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 10625 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1when2(__when_expr_1.get(), loopDepth); };
				static_cast<_finishActor2*>(this)->actor_wait_state = 2;
															#line 1392 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< _finishActor2, 1, Void >*>(static_cast<_finishActor2*>(this)));
															#line 10630 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				loopDepth = 0;
			}
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~_finishActor2State();
		static_cast<_finishActor2*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 1395 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_2 = taskBucket->finish(tr, task);
															#line 1395 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_finishActor2*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 10656 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont1when1(__when_expr_2.get(), loopDepth); };
		static_cast<_finishActor2*>(this)->actor_wait_state = 3;
															#line 1395 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< _finishActor2, 2, Void >*>(static_cast<_finishActor2*>(this)));
															#line 10661 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont2(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont2(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<_finishActor2*>(this)->actor_wait_state > 0) static_cast<_finishActor2*>(this)->actor_wait_state = 0;
		static_cast<_finishActor2*>(this)->ActorCallback< _finishActor2, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor2, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< _finishActor2, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< _finishActor2, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont3(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont3(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1when2(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont3(_, loopDepth);

		return loopDepth;
	}
	int a_body1when2(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont3(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<_finishActor2*>(this)->actor_wait_state > 0) static_cast<_finishActor2*>(this)->actor_wait_state = 0;
		static_cast<_finishActor2*>(this)->ActorCallback< _finishActor2, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor2, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1when2(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< _finishActor2, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1when2(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< _finishActor2, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont4(Void const& _,int loopDepth) 
	{
															#line 1397 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent("FileBackupRangeFinish") .suppressFor(60) .detail("BackupUID", BackupConfig(task).getUid()) .detail("BeginKey", Params.beginKey().get(task).printable()) .detail("EndKey", Params.endKey().get(task).printable()) .detail("TaskKey", task->key.printable());
															#line 1404 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<_finishActor2*>(this)->SAV<Void>::futures) { (void)(Void()); this->~_finishActor2State(); static_cast<_finishActor2*>(this)->destroy(); return 0; }
															#line 10822 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<_finishActor2*>(this)->SAV< Void >::value()) Void(Void());
		this->~_finishActor2State();
		static_cast<_finishActor2*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont4(Void && _,int loopDepth) 
	{
															#line 1397 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent("FileBackupRangeFinish") .suppressFor(60) .detail("BackupUID", BackupConfig(task).getUid()) .detail("BeginKey", Params.beginKey().get(task).printable()) .detail("EndKey", Params.endKey().get(task).printable()) .detail("TaskKey", task->key.printable());
															#line 1404 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<_finishActor2*>(this)->SAV<Void>::futures) { (void)(Void()); this->~_finishActor2State(); static_cast<_finishActor2*>(this)->destroy(); return 0; }
															#line 10836 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<_finishActor2*>(this)->SAV< Void >::value()) Void(Void());
		this->~_finishActor2State();
		static_cast<_finishActor2*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont4(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont4(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<_finishActor2*>(this)->actor_wait_state > 0) static_cast<_finishActor2*>(this)->actor_wait_state = 0;
		static_cast<_finishActor2*>(this)->ActorCallback< _finishActor2, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor2, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< _finishActor2, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< _finishActor2, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 2);

	}
															#line 1383 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 1383 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskBucket> taskBucket;
															#line 1383 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<FutureBucket> futureBucket;
															#line 1383 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<Task> task;
															#line 1387 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskFuture> taskFuture;
															#line 10917 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via _finish()
															#line 1383 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class _finishActor2 final : public Actor<Void>, public ActorCallback< _finishActor2, 0, Void >, public ActorCallback< _finishActor2, 1, Void >, public ActorCallback< _finishActor2, 2, Void >, public FastAllocated<_finishActor2>, public _finishActor2State<_finishActor2> {
															#line 10922 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<_finishActor2>::operator new;
	using FastAllocated<_finishActor2>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< _finishActor2, 0, Void >;
friend struct ActorCallback< _finishActor2, 1, Void >;
friend struct ActorCallback< _finishActor2, 2, Void >;
															#line 1383 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	_finishActor2(Reference<ReadYourWritesTransaction> const& tr,Reference<TaskBucket> const& taskBucket,Reference<FutureBucket> const& futureBucket,Reference<Task> const& task) 
															#line 10935 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<Void>(),
		   _finishActor2State<_finishActor2>(tr, taskBucket, futureBucket, task)
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("_finish");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< _finishActor2, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< _finishActor2, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< _finishActor2, 2, Void >*)0, actor_cancelled()); break;
		}

	}
};
															#line 1383 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<Void> _finish( Reference<ReadYourWritesTransaction> const& tr, Reference<TaskBucket> const& taskBucket, Reference<FutureBucket> const& futureBucket, Reference<Task> const& task ) {
															#line 1383 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<Void>(new _finishActor2(tr, taskBucket, futureBucket, task));
															#line 10964 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 1406 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
};
StringRef BackupRangeTaskFunc::name = LiteralStringRef("file_backup_write_range_5.2");
REGISTER_TASKFUNC(BackupRangeTaskFunc);

struct BackupSnapshotDispatchTask : BackupTaskFuncBase {
	static StringRef name;
	static constexpr uint32_t version = 1;

	static struct {
		// Set by Execute, used by Finish
		static TaskParam<int64_t> shardsBehind() { return LiteralStringRef(__FUNCTION__); }
		// Set by Execute, used by Finish
		static TaskParam<bool> snapshotFinished() { return LiteralStringRef(__FUNCTION__); }
		// Set by Execute, used by Finish
		static TaskParam<Version> nextDispatchVersion() { return LiteralStringRef(__FUNCTION__); }
	} Params;

	StringRef getName() const override { return name; };

	Future<Void> execute(Database cx,
	                     Reference<TaskBucket> tb,
	                     Reference<FutureBucket> fb,
	                     Reference<Task> task) override {
		return _execute(cx, tb, fb, task);
	};
	Future<Void> finish(Reference<ReadYourWritesTransaction> tr,
	                    Reference<TaskBucket> tb,
	                    Reference<FutureBucket> fb,
	                    Reference<Task> task) override {
		return _finish(tr, tb, fb, task);
	};

																#line 11000 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via addTask()
															#line 1438 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class AddTaskActor1>
															#line 1438 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class AddTaskActor1State {
															#line 11006 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 1438 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	AddTaskActor1State(Reference<ReadYourWritesTransaction> const& tr,Reference<TaskBucket> const& taskBucket,Reference<Task> const& parentTask,int const& priority,TaskCompletionKey const& completionKey,Reference<TaskFuture> const& waitFor = Reference<TaskFuture>(),Version const& scheduledVersion = invalidVersion) 
															#line 1438 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 1438 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : tr(tr),
															#line 1438 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   taskBucket(taskBucket),
															#line 1438 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   parentTask(parentTask),
															#line 1438 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   priority(priority),
															#line 1438 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   completionKey(completionKey),
															#line 1438 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   waitFor(waitFor),
															#line 1438 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   scheduledVersion(scheduledVersion)
															#line 11025 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("addTask", reinterpret_cast<unsigned long>(this));

	}
	~AddTaskActor1State() 
	{
		fdb_probe_actor_destroy("addTask", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 1445 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Key> __when_expr_0 = addBackupTask( name, version, tr, taskBucket, completionKey, BackupConfig(parentTask), waitFor, [=](Reference<Task> task) { if (scheduledVersion != invalidVersion) ReservedTaskParams::scheduledVersion().set(task, scheduledVersion); }, priority);
															#line 1445 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<AddTaskActor1*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 11042 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<AddTaskActor1*>(this)->actor_wait_state = 1;
															#line 1445 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< AddTaskActor1, 0, Key >*>(static_cast<AddTaskActor1*>(this)));
															#line 11047 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~AddTaskActor1State();
		static_cast<AddTaskActor1*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Key const& key,int loopDepth) 
	{
															#line 1458 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<AddTaskActor1*>(this)->SAV<Key>::futures) { (void)(key); this->~AddTaskActor1State(); static_cast<AddTaskActor1*>(this)->destroy(); return 0; }
															#line 11070 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<AddTaskActor1*>(this)->SAV< Key >::value()) Key(key);
		this->~AddTaskActor1State();
		static_cast<AddTaskActor1*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1(Key && key,int loopDepth) 
	{
															#line 1458 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<AddTaskActor1*>(this)->SAV<Key>::futures) { (void)(key); this->~AddTaskActor1State(); static_cast<AddTaskActor1*>(this)->destroy(); return 0; }
															#line 11082 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<AddTaskActor1*>(this)->SAV< Key >::value()) Key(key);
		this->~AddTaskActor1State();
		static_cast<AddTaskActor1*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1when1(Key const& key,int loopDepth) 
	{
		loopDepth = a_body1cont1(key, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Key && key,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(key), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<AddTaskActor1*>(this)->actor_wait_state > 0) static_cast<AddTaskActor1*>(this)->actor_wait_state = 0;
		static_cast<AddTaskActor1*>(this)->ActorCallback< AddTaskActor1, 0, Key >::remove();

	}
	void a_callback_fire(ActorCallback< AddTaskActor1, 0, Key >*,Key const& value) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< AddTaskActor1, 0, Key >*,Key && value) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< AddTaskActor1, 0, Key >*,Error err) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 1438 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 1438 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskBucket> taskBucket;
															#line 1438 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<Task> parentTask;
															#line 1438 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int priority;
															#line 1438 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	TaskCompletionKey completionKey;
															#line 1438 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskFuture> waitFor;
															#line 1438 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Version scheduledVersion;
															#line 11167 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via addTask()
															#line 1438 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class AddTaskActor1 final : public Actor<Key>, public ActorCallback< AddTaskActor1, 0, Key >, public FastAllocated<AddTaskActor1>, public AddTaskActor1State<AddTaskActor1> {
															#line 11172 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<AddTaskActor1>::operator new;
	using FastAllocated<AddTaskActor1>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Key>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< AddTaskActor1, 0, Key >;
															#line 1438 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	AddTaskActor1(Reference<ReadYourWritesTransaction> const& tr,Reference<TaskBucket> const& taskBucket,Reference<Task> const& parentTask,int const& priority,TaskCompletionKey const& completionKey,Reference<TaskFuture> const& waitFor = Reference<TaskFuture>(),Version const& scheduledVersion = invalidVersion) 
															#line 11183 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<Key>(),
		   AddTaskActor1State<AddTaskActor1>(tr, taskBucket, parentTask, priority, completionKey, waitFor, scheduledVersion)
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("addTask");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< AddTaskActor1, 0, Key >*)0, actor_cancelled()); break;
		}

	}
};
															#line 1438 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<Key> addTask( Reference<ReadYourWritesTransaction> const& tr, Reference<TaskBucket> const& taskBucket, Reference<Task> const& parentTask, int const& priority, TaskCompletionKey const& completionKey, Reference<TaskFuture> const& waitFor = Reference<TaskFuture>(), Version const& scheduledVersion = invalidVersion ) {
															#line 1438 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<Key>(new AddTaskActor1(tr, taskBucket, parentTask, priority, completionKey, waitFor, scheduledVersion));
															#line 11210 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 1460 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

	enum DispatchState { SKIP = 0, DONE = 1, NOT_DONE_MIN = 2 };

																#line 11217 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via _execute()
															#line 1463 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class _executeActor1>
															#line 1463 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class _executeActor1State {
															#line 11223 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 1463 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	_executeActor1State(Database const& cx,Reference<TaskBucket> const& taskBucket,Reference<FutureBucket> const& futureBucket,Reference<Task> const& task) 
															#line 1463 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 1463 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : cx(cx),
															#line 1463 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   taskBucket(taskBucket),
															#line 1463 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   futureBucket(futureBucket),
															#line 1463 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   task(task),
															#line 1467 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   lock(new FlowLock(CLIENT_KNOBS->BACKUP_LOCK_BYTES))
															#line 11238 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("_execute", reinterpret_cast<unsigned long>(this));

	}
	~_executeActor1State() 
	{
		fdb_probe_actor_destroy("_execute", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 1468 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_0 = checkTaskVersion(cx, task, name, version);
															#line 1468 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_executeActor1*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 11255 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<_executeActor1*>(this)->actor_wait_state = 1;
															#line 1468 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< _executeActor1, 0, Void >*>(static_cast<_executeActor1*>(this)));
															#line 11260 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~_executeActor1State();
		static_cast<_executeActor1*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void const& _,int loopDepth) 
	{
															#line 1470 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		startTime = timer();
															#line 1471 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr = Reference<ReadYourWritesTransaction>(new ReadYourWritesTransaction(cx));
															#line 1476 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		notDoneSequence = NOT_DONE_MIN;
															#line 1477 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		shardMap = KeyRangeMap<int>(notDoneSequence++, normalKeys.end);
															#line 1478 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		beginKey = normalKeys.begin;
															#line 1481 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		;
															#line 11293 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont1loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1(Void && _,int loopDepth) 
	{
															#line 1470 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		startTime = timer();
															#line 1471 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr = Reference<ReadYourWritesTransaction>(new ReadYourWritesTransaction(cx));
															#line 1476 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		notDoneSequence = NOT_DONE_MIN;
															#line 1477 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		shardMap = KeyRangeMap<int>(notDoneSequence++, normalKeys.end);
															#line 1478 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		beginKey = normalKeys.begin;
															#line 1481 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		;
															#line 11312 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont1loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<_executeActor1*>(this)->actor_wait_state > 0) static_cast<_executeActor1*>(this)->actor_wait_state = 0;
		static_cast<_executeActor1*>(this)->ActorCallback< _executeActor1, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor1, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< _executeActor1, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< _executeActor1, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont2(int loopDepth) 
	{
															#line 1505 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		config = BackupConfig(task);
															#line 1506 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		recentReadVersion = Version();
															#line 1507 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		snapshotBeginVersion = Version();
															#line 1508 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		snapshotTargetEndVersion = Version();
															#line 1509 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		snapshotIntervalSeconds = int64_t();
															#line 1510 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		latestSnapshotEndVersion = Optional<Version>();
															#line 1511 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		backupRanges = std::vector<KeyRange>();
															#line 1512 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		snapshotBatchFutureKey = Optional<Key>();
															#line 1513 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		snapshotBatchFuture = Reference<TaskFuture>();
															#line 1514 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		snapshotBatchSize = Optional<int64_t>();
															#line 1516 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr->reset();
															#line 1517 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		;
															#line 11406 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont2loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1cont1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1(int loopDepth) 
	{
		try {
															#line 1483 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 1484 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 1486 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			shardBoundaries = getBlockOfShards(tr, beginKey, normalKeys.end, CLIENT_KNOBS->TOO_MANY);
															#line 1488 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_1 = success(shardBoundaries) && taskBucket->keepRunning(tr, task);
															#line 1488 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_executeActor1*>(this)->actor_wait_state < 0) return a_body1cont1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 11431 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1cont1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1loopBody1when1(__when_expr_1.get(), loopDepth); };
			static_cast<_executeActor1*>(this)->actor_wait_state = 2;
															#line 1488 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< _executeActor1, 1, Void >*>(static_cast<_executeActor1*>(this)));
															#line 11436 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1cont1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1cont1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont1break1(int loopDepth) 
	{
		try {
			return a_body1cont2(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1cont1loopHead1(0);

		return loopDepth;
	}
	int a_body1cont1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 1500 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_2 = tr->onError(e);
															#line 1500 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_executeActor1*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 11473 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), std::max(0, loopDepth - 1)); else return a_body1cont1loopBody1Catch1when1(__when_expr_2.get(), loopDepth); };
			static_cast<_executeActor1*>(this)->actor_wait_state = 3;
															#line 1500 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< _executeActor1, 2, Void >*>(static_cast<_executeActor1*>(this)));
															#line 11478 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1cont1loopBody1cont2(Void const& _,int loopDepth) 
	{
															#line 1490 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (shardBoundaries.get().size() == 0)
															#line 11493 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
			return a_body1cont1break1(loopDepth==0?0:loopDepth-1); // break
		}
															#line 1493 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		for( auto& boundary : shardBoundaries.get() ) {
															#line 1494 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			shardMap.rawInsert(boundary, notDoneSequence++);
															#line 11501 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 1497 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		beginKey = keyAfter(shardBoundaries.get().back());
															#line 1498 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr->reset();
															#line 11507 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont1loopBody1cont6(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont2(Void && _,int loopDepth) 
	{
															#line 1490 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (shardBoundaries.get().size() == 0)
															#line 11516 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
			return a_body1cont1break1(loopDepth==0?0:loopDepth-1); // break
		}
															#line 1493 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		for( auto& boundary : shardBoundaries.get() ) {
															#line 1494 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			shardMap.rawInsert(boundary, notDoneSequence++);
															#line 11524 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 1497 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		beginKey = keyAfter(shardBoundaries.get().back());
															#line 1498 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr->reset();
															#line 11530 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont1loopBody1cont6(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<_executeActor1*>(this)->actor_wait_state > 0) static_cast<_executeActor1*>(this)->actor_wait_state = 0;
		static_cast<_executeActor1*>(this)->ActorCallback< _executeActor1, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor1, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< _executeActor1, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< _executeActor1, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont1loopBody1cont6(int loopDepth) 
	{
		try {
			loopDepth = a_body1cont1loopBody1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1cont1loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<_executeActor1*>(this)->actor_wait_state > 0) static_cast<_executeActor1*>(this)->actor_wait_state = 0;
		static_cast<_executeActor1*>(this)->ActorCallback< _executeActor1, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor1, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< _executeActor1, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< _executeActor1, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1cont3(int loopDepth) 
	{
															#line 1568 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		dispatchBoundaries = std::vector<std::pair<Key, bool>>();
															#line 1569 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr->reset();
															#line 1570 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		beginKey = normalKeys.begin;
															#line 1571 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		;
															#line 11696 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont3loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1cont2loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1cont2loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1cont2loopBody1(int loopDepth) 
	{
		try {
															#line 1519 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 1520 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 1522 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_3 = store(snapshotBeginVersion, config.snapshotBeginVersion().getOrThrow(tr)) && store(snapshotTargetEndVersion, config.snapshotTargetEndVersion().getOrThrow(tr)) && store(backupRanges, config.backupRanges().getOrThrow(tr)) && store(snapshotIntervalSeconds, config.snapshotIntervalSeconds().getOrThrow(tr)) && store(snapshotBatchFutureKey, config.snapshotBatchFuture().get(tr)) && store(snapshotBatchSize, config.snapshotBatchSize().get(tr)) && store(latestSnapshotEndVersion, config.latestSnapshotEndVersion().get(tr)) && store(recentReadVersion, tr->getReadVersion()) && taskBucket->keepRunning(tr, task);
															#line 1522 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_executeActor1*>(this)->actor_wait_state < 0) return a_body1cont2loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 11719 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1cont2loopBody1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1cont2loopBody1when1(__when_expr_3.get(), loopDepth); };
			static_cast<_executeActor1*>(this)->actor_wait_state = 4;
															#line 1522 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< _executeActor1, 3, Void >*>(static_cast<_executeActor1*>(this)));
															#line 11724 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1cont2loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1cont2loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont2break1(int loopDepth) 
	{
		try {
			return a_body1cont3(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont2loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1cont2loopHead1(0);

		return loopDepth;
	}
	int a_body1cont2loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 1563 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_6 = tr->onError(e);
															#line 1563 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_executeActor1*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 11761 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_6.isReady()) { if (__when_expr_6.isError()) return a_body1Catch1(__when_expr_6.getError(), std::max(0, loopDepth - 1)); else return a_body1cont2loopBody1Catch1when1(__when_expr_6.get(), loopDepth); };
			static_cast<_executeActor1*>(this)->actor_wait_state = 7;
															#line 1563 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_6.addCallbackAndClear(static_cast<ActorCallback< _executeActor1, 6, Void >*>(static_cast<_executeActor1*>(this)));
															#line 11766 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1cont2loopBody1cont2(Void const& _,int loopDepth) 
	{
															#line 1537 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!snapshotBatchFutureKey.present())
															#line 11781 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 1538 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			snapshotBatchFuture = futureBucket->future(tr);
															#line 1539 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			config.snapshotBatchFuture().set(tr, snapshotBatchFuture->pack());
															#line 1540 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			snapshotBatchSize = 0;
															#line 1541 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			config.snapshotBatchSize().set(tr, snapshotBatchSize.get());
															#line 1545 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			dispatchCompletionKey = TaskCompletionKey::joinWith(snapshotBatchFuture);
															#line 1548 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			auto cfg = &config;
															#line 1549 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			auto tx = &tr;
															#line 1550 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_4 = map(dispatchCompletionKey.get(tr, taskBucket), [cfg, tx](Key const& k) { cfg->snapshotBatchDispatchDoneKey().set(*tx, k); return Void(); });
															#line 1550 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_executeActor1*>(this)->actor_wait_state < 0) return a_body1cont2loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 11801 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1cont2loopBody1Catch1(__when_expr_4.getError(), loopDepth); else return a_body1cont2loopBody1cont2when1(__when_expr_4.get(), loopDepth); };
			static_cast<_executeActor1*>(this)->actor_wait_state = 5;
															#line 1550 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< _executeActor1, 4, Void >*>(static_cast<_executeActor1*>(this)));
															#line 11806 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
															#line 1556 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			ASSERT(snapshotBatchSize.present());
															#line 1558 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			snapshotBatchFuture = makeReference<TaskFuture>(futureBucket, snapshotBatchFutureKey.get());
															#line 11815 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = a_body1cont2loopBody1cont3(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont2loopBody1cont2(Void && _,int loopDepth) 
	{
															#line 1537 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!snapshotBatchFutureKey.present())
															#line 11825 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 1538 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			snapshotBatchFuture = futureBucket->future(tr);
															#line 1539 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			config.snapshotBatchFuture().set(tr, snapshotBatchFuture->pack());
															#line 1540 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			snapshotBatchSize = 0;
															#line 1541 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			config.snapshotBatchSize().set(tr, snapshotBatchSize.get());
															#line 1545 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			dispatchCompletionKey = TaskCompletionKey::joinWith(snapshotBatchFuture);
															#line 1548 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			auto cfg = &config;
															#line 1549 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			auto tx = &tr;
															#line 1550 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_4 = map(dispatchCompletionKey.get(tr, taskBucket), [cfg, tx](Key const& k) { cfg->snapshotBatchDispatchDoneKey().set(*tx, k); return Void(); });
															#line 1550 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_executeActor1*>(this)->actor_wait_state < 0) return a_body1cont2loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 11845 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1cont2loopBody1Catch1(__when_expr_4.getError(), loopDepth); else return a_body1cont2loopBody1cont2when1(__when_expr_4.get(), loopDepth); };
			static_cast<_executeActor1*>(this)->actor_wait_state = 5;
															#line 1550 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< _executeActor1, 4, Void >*>(static_cast<_executeActor1*>(this)));
															#line 11850 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
															#line 1556 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			ASSERT(snapshotBatchSize.present());
															#line 1558 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			snapshotBatchFuture = makeReference<TaskFuture>(futureBucket, snapshotBatchFutureKey.get());
															#line 11859 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = a_body1cont2loopBody1cont3(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont2loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont2loopBody1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont2loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont2loopBody1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<_executeActor1*>(this)->actor_wait_state > 0) static_cast<_executeActor1*>(this)->actor_wait_state = 0;
		static_cast<_executeActor1*>(this)->ActorCallback< _executeActor1, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor1, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont2loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont2loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont2loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< _executeActor1, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont2loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont2loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont2loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< _executeActor1, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont2loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont2loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont2loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 3);

	}
	int a_body1cont2loopBody1cont3(int loopDepth) 
	{
		return a_body1cont2break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1cont2loopBody1cont4(Void const& _,int loopDepth) 
	{
															#line 1554 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_5 = tr->commit();
															#line 1554 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor1*>(this)->actor_wait_state < 0) return a_body1cont2loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 11940 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_5.isReady()) { if (__when_expr_5.isError()) return a_body1cont2loopBody1Catch1(__when_expr_5.getError(), loopDepth); else return a_body1cont2loopBody1cont4when1(__when_expr_5.get(), loopDepth); };
		static_cast<_executeActor1*>(this)->actor_wait_state = 6;
															#line 1554 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_5.addCallbackAndClear(static_cast<ActorCallback< _executeActor1, 5, Void >*>(static_cast<_executeActor1*>(this)));
															#line 11945 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont2loopBody1cont4(Void && _,int loopDepth) 
	{
															#line 1554 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_5 = tr->commit();
															#line 1554 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor1*>(this)->actor_wait_state < 0) return a_body1cont2loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 11956 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_5.isReady()) { if (__when_expr_5.isError()) return a_body1cont2loopBody1Catch1(__when_expr_5.getError(), loopDepth); else return a_body1cont2loopBody1cont4when1(__when_expr_5.get(), loopDepth); };
		static_cast<_executeActor1*>(this)->actor_wait_state = 6;
															#line 1554 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_5.addCallbackAndClear(static_cast<ActorCallback< _executeActor1, 5, Void >*>(static_cast<_executeActor1*>(this)));
															#line 11961 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont2loopBody1cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont2loopBody1cont4(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont2loopBody1cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont2loopBody1cont4(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose5() 
	{
		if (static_cast<_executeActor1*>(this)->actor_wait_state > 0) static_cast<_executeActor1*>(this)->actor_wait_state = 0;
		static_cast<_executeActor1*>(this)->ActorCallback< _executeActor1, 4, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor1, 4, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont2loopBody1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont2loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont2loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_fire(ActorCallback< _executeActor1, 4, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont2loopBody1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont2loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont2loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_error(ActorCallback< _executeActor1, 4, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont2loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont2loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont2loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 4);

	}
	int a_body1cont2loopBody1cont5(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont2loopBody1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1cont2loopBody1cont5(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont2loopBody1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1cont2loopBody1cont4when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont2loopBody1cont5(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont2loopBody1cont4when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont2loopBody1cont5(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose6() 
	{
		if (static_cast<_executeActor1*>(this)->actor_wait_state > 0) static_cast<_executeActor1*>(this)->actor_wait_state = 0;
		static_cast<_executeActor1*>(this)->ActorCallback< _executeActor1, 5, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor1, 5, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1cont2loopBody1cont4when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont2loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont2loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_fire(ActorCallback< _executeActor1, 5, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1cont2loopBody1cont4when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont2loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont2loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_error(ActorCallback< _executeActor1, 5, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1cont2loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont2loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont2loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 5);

	}
	int a_body1cont2loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont2loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont2loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont2loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont2loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont2loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont2loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont2loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose7() 
	{
		if (static_cast<_executeActor1*>(this)->actor_wait_state > 0) static_cast<_executeActor1*>(this)->actor_wait_state = 0;
		static_cast<_executeActor1*>(this)->ActorCallback< _executeActor1, 6, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor1, 6, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1cont2loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 6);

	}
	void a_callback_fire(ActorCallback< _executeActor1, 6, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1cont2loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 6);

	}
	void a_callback_error(ActorCallback< _executeActor1, 6, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 6);

	}
	int a_body1cont4(int loopDepth) 
	{
															#line 1598 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		i = int();
															#line 1599 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		iShard = RangeMap<Key, int, KeyRangeRef>::iterator();
															#line 1600 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		iShardEnd = RangeMap<Key, int, KeyRangeRef>::iterator();
															#line 1604 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (dispatchBoundaries.size() > 0)
															#line 12189 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 1605 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			lastValue = false;
															#line 1606 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			lastKey = Key();
															#line 1607 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			i = 0;
															#line 12197 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = a_body1cont4loopHead1(loopDepth);
		}
		else
		{
			loopDepth = a_body1cont5(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont3loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1cont3loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1(int loopDepth) 
	{
		try {
															#line 1573 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 1574 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 1576 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			bounds = config.snapshotRangeDispatchMap().getRange( tr, beginKey, keyAfter(normalKeys.end), CLIENT_KNOBS->TOO_MANY);
															#line 1578 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_7 = success(bounds) && taskBucket->keepRunning(tr, task) && store(recentReadVersion, tr->getReadVersion());
															#line 1578 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_executeActor1*>(this)->actor_wait_state < 0) return a_body1cont3loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 12227 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_7.isReady()) { if (__when_expr_7.isError()) return a_body1cont3loopBody1Catch1(__when_expr_7.getError(), loopDepth); else return a_body1cont3loopBody1when1(__when_expr_7.get(), loopDepth); };
			static_cast<_executeActor1*>(this)->actor_wait_state = 8;
															#line 1578 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_7.addCallbackAndClear(static_cast<ActorCallback< _executeActor1, 7, Void >*>(static_cast<_executeActor1*>(this)));
															#line 12232 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1cont3loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1cont3loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont3break1(int loopDepth) 
	{
		try {
			return a_body1cont4(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont3loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1cont3loopHead1(0);

		return loopDepth;
	}
	int a_body1cont3loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 1590 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_8 = tr->onError(e);
															#line 1590 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_executeActor1*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 12269 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_8.isReady()) { if (__when_expr_8.isError()) return a_body1Catch1(__when_expr_8.getError(), std::max(0, loopDepth - 1)); else return a_body1cont3loopBody1Catch1when1(__when_expr_8.get(), loopDepth); };
			static_cast<_executeActor1*>(this)->actor_wait_state = 9;
															#line 1590 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_8.addCallbackAndClear(static_cast<ActorCallback< _executeActor1, 8, Void >*>(static_cast<_executeActor1*>(this)));
															#line 12274 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1cont3loopBody1cont2(Void const& _,int loopDepth) 
	{
															#line 1581 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (bounds.get().empty())
															#line 12289 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
			return a_body1cont3break1(loopDepth==0?0:loopDepth-1); // break
		}
															#line 1584 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		dispatchBoundaries.reserve(dispatchBoundaries.size() + bounds.get().size());
															#line 1585 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		dispatchBoundaries.insert(dispatchBoundaries.end(), bounds.get().begin(), bounds.get().end());
															#line 1587 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		beginKey = keyAfter(bounds.get().back().first);
															#line 1588 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr->reset();
															#line 12301 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont3loopBody1cont5(loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1cont2(Void && _,int loopDepth) 
	{
															#line 1581 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (bounds.get().empty())
															#line 12310 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
			return a_body1cont3break1(loopDepth==0?0:loopDepth-1); // break
		}
															#line 1584 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		dispatchBoundaries.reserve(dispatchBoundaries.size() + bounds.get().size());
															#line 1585 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		dispatchBoundaries.insert(dispatchBoundaries.end(), bounds.get().begin(), bounds.get().end());
															#line 1587 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		beginKey = keyAfter(bounds.get().back().first);
															#line 1588 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr->reset();
															#line 12322 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont3loopBody1cont5(loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose8() 
	{
		if (static_cast<_executeActor1*>(this)->actor_wait_state > 0) static_cast<_executeActor1*>(this)->actor_wait_state = 0;
		static_cast<_executeActor1*>(this)->ActorCallback< _executeActor1, 7, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor1, 7, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 7);
		a_exitChoose8();
		try {
			a_body1cont3loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont3loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont3loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 7);

	}
	void a_callback_fire(ActorCallback< _executeActor1, 7, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 7);
		a_exitChoose8();
		try {
			a_body1cont3loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont3loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont3loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 7);

	}
	void a_callback_error(ActorCallback< _executeActor1, 7, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 7);
		a_exitChoose8();
		try {
			a_body1cont3loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont3loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont3loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 7);

	}
	int a_body1cont3loopBody1cont5(int loopDepth) 
	{
		try {
			loopDepth = a_body1cont3loopBody1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1cont3loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose9() 
	{
		if (static_cast<_executeActor1*>(this)->actor_wait_state > 0) static_cast<_executeActor1*>(this)->actor_wait_state = 0;
		static_cast<_executeActor1*>(this)->ActorCallback< _executeActor1, 8, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor1, 8, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 8);
		a_exitChoose9();
		try {
			a_body1cont3loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 8);

	}
	void a_callback_fire(ActorCallback< _executeActor1, 8, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 8);
		a_exitChoose9();
		try {
			a_body1cont3loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 8);

	}
	void a_callback_error(ActorCallback< _executeActor1, 8, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 8);
		a_exitChoose9();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 8);

	}
	int a_body1cont5(int loopDepth) 
	{
															#line 1636 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (backupRanges.size() > 0)
															#line 12482 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 1637 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			shardMap.insert(KeyRangeRef(normalKeys.begin, backupRanges.front().begin), SKIP);
															#line 1638 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_11 = yield();
															#line 1638 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_executeActor1*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 12490 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_11.isReady()) { if (__when_expr_11.isError()) return a_body1Catch1(__when_expr_11.getError(), loopDepth); else return a_body1cont5when1(__when_expr_11.get(), loopDepth); };
			static_cast<_executeActor1*>(this)->actor_wait_state = 12;
															#line 1638 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_11.addCallbackAndClear(static_cast<ActorCallback< _executeActor1, 11, Void >*>(static_cast<_executeActor1*>(this)));
															#line 12495 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1cont8(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont6(int loopDepth) 
	{
															#line 1631 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		ASSERT(lastValue == false);
															#line 12509 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont5(loopDepth);

		return loopDepth;
	}
	int a_body1cont4loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1cont4loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1cont4loopBody1(int loopDepth) 
	{
															#line 1607 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!(i < dispatchBoundaries.size()))
															#line 12525 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
			return a_body1cont4break1(loopDepth==0?0:loopDepth-1); // break
		}
															#line 1608 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		const std::pair<Key, bool>& boundary = dispatchBoundaries[i];
															#line 1611 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		ASSERT(boundary.second == !lastValue);
															#line 1614 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!boundary.second)
															#line 12535 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 1617 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			RangeMap<Key, int, KeyRangeRef>::Ranges shardRanges = shardMap.modify(KeyRangeRef(lastKey, boundary.first));
															#line 1619 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			iShard = shardRanges.begin();
															#line 1620 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			iShardEnd = shardRanges.end();
															#line 1621 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			;
															#line 12545 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = a_body1cont4loopBody1loopHead1(loopDepth);
		}
		else
		{
			loopDepth = a_body1cont4loopBody1cont1(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont4break1(int loopDepth) 
	{
		try {
			return a_body1cont6(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont4loopBody1cont1(int loopDepth) 
	{
															#line 1626 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		lastValue = dispatchBoundaries[i].second;
															#line 1627 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		lastKey = dispatchBoundaries[i].first;
															#line 1629 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_10 = yield();
															#line 1629 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor1*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 12578 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_10.isReady()) { if (__when_expr_10.isError()) return a_body1Catch1(__when_expr_10.getError(), std::max(0, loopDepth - 1)); else return a_body1cont4loopBody1cont1when1(__when_expr_10.get(), loopDepth); };
		static_cast<_executeActor1*>(this)->actor_wait_state = 11;
															#line 1629 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_10.addCallbackAndClear(static_cast<ActorCallback< _executeActor1, 10, Void >*>(static_cast<_executeActor1*>(this)));
															#line 12583 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont4loopBody1cont3(int loopDepth) 
	{
		loopDepth = a_body1cont4loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont4loopBody1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1cont4loopBody1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1cont4loopBody1loopBody1(int loopDepth) 
	{
															#line 1621 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!(iShard != iShardEnd))
															#line 12605 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
			return a_body1cont4loopBody1break1(loopDepth==0?0:loopDepth-1); // break
		}
															#line 1622 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		iShard->value() = DONE;
															#line 1623 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_9 = yield();
															#line 1623 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor1*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 2));
															#line 12615 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_9.isReady()) { if (__when_expr_9.isError()) return a_body1Catch1(__when_expr_9.getError(), std::max(0, loopDepth - 2)); else return a_body1cont4loopBody1loopBody1when1(__when_expr_9.get(), loopDepth); };
		static_cast<_executeActor1*>(this)->actor_wait_state = 10;
															#line 1623 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_9.addCallbackAndClear(static_cast<ActorCallback< _executeActor1, 9, Void >*>(static_cast<_executeActor1*>(this)));
															#line 12620 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont4loopBody1break1(int loopDepth) 
	{
		try {
			return a_body1cont4loopBody1cont3(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1cont4loopBody1loopBody1cont1(Void const& _,int loopDepth) 
	{
															#line 1621 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		++iShard;
															#line 12642 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (loopDepth == 0) return a_body1cont4loopBody1loopHead1(0);

		return loopDepth;
	}
	int a_body1cont4loopBody1loopBody1cont1(Void && _,int loopDepth) 
	{
															#line 1621 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		++iShard;
															#line 12651 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (loopDepth == 0) return a_body1cont4loopBody1loopHead1(0);

		return loopDepth;
	}
	int a_body1cont4loopBody1loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont4loopBody1loopBody1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont4loopBody1loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont4loopBody1loopBody1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose10() 
	{
		if (static_cast<_executeActor1*>(this)->actor_wait_state > 0) static_cast<_executeActor1*>(this)->actor_wait_state = 0;
		static_cast<_executeActor1*>(this)->ActorCallback< _executeActor1, 9, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor1, 9, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 9);
		a_exitChoose10();
		try {
			a_body1cont4loopBody1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 9);

	}
	void a_callback_fire(ActorCallback< _executeActor1, 9, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 9);
		a_exitChoose10();
		try {
			a_body1cont4loopBody1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 9);

	}
	void a_callback_error(ActorCallback< _executeActor1, 9, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 9);
		a_exitChoose10();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 9);

	}
	int a_body1cont4loopBody1cont4(Void const& _,int loopDepth) 
	{
															#line 1607 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		++i;
															#line 12723 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (loopDepth == 0) return a_body1cont4loopHead1(0);

		return loopDepth;
	}
	int a_body1cont4loopBody1cont4(Void && _,int loopDepth) 
	{
															#line 1607 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		++i;
															#line 12732 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (loopDepth == 0) return a_body1cont4loopHead1(0);

		return loopDepth;
	}
	int a_body1cont4loopBody1cont1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont4loopBody1cont4(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont4loopBody1cont1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont4loopBody1cont4(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose11() 
	{
		if (static_cast<_executeActor1*>(this)->actor_wait_state > 0) static_cast<_executeActor1*>(this)->actor_wait_state = 0;
		static_cast<_executeActor1*>(this)->ActorCallback< _executeActor1, 10, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor1, 10, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 10);
		a_exitChoose11();
		try {
			a_body1cont4loopBody1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 10);

	}
	void a_callback_fire(ActorCallback< _executeActor1, 10, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 10);
		a_exitChoose11();
		try {
			a_body1cont4loopBody1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 10);

	}
	void a_callback_error(ActorCallback< _executeActor1, 10, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 10);
		a_exitChoose11();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 10);

	}
	int a_body1cont8(int loopDepth) 
	{
															#line 1649 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		countShardsDone = 0;
															#line 1650 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		countShardsNotDone = 0;
															#line 1653 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		RangeMap<Key, int, KeyRangeRef>::Ranges shardRanges = shardMap.ranges();
															#line 1654 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		iShard = shardRanges.begin();
															#line 1655 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		iShardEnd = shardRanges.end();
															#line 1656 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		;
															#line 12814 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont8loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1cont9(Void const& _,int loopDepth) 
	{
															#line 1640 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		i = 0;
															#line 12823 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont9loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1cont9(Void && _,int loopDepth) 
	{
															#line 1640 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		i = 0;
															#line 12832 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont9loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1cont5when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont9(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont5when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont9(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose12() 
	{
		if (static_cast<_executeActor1*>(this)->actor_wait_state > 0) static_cast<_executeActor1*>(this)->actor_wait_state = 0;
		static_cast<_executeActor1*>(this)->ActorCallback< _executeActor1, 11, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor1, 11, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 11);
		a_exitChoose12();
		try {
			a_body1cont5when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 11);

	}
	void a_callback_fire(ActorCallback< _executeActor1, 11, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 11);
		a_exitChoose12();
		try {
			a_body1cont5when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 11);

	}
	void a_callback_error(ActorCallback< _executeActor1, 11, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 11);
		a_exitChoose12();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 11);

	}
	int a_body1cont10(int loopDepth) 
	{
															#line 1645 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		shardMap.insert(KeyRangeRef(backupRanges.back().end, normalKeys.end), SKIP);
															#line 1646 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_13 = yield();
															#line 1646 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor1*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 12908 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_13.isReady()) { if (__when_expr_13.isError()) return a_body1Catch1(__when_expr_13.getError(), loopDepth); else return a_body1cont10when1(__when_expr_13.get(), loopDepth); };
		static_cast<_executeActor1*>(this)->actor_wait_state = 14;
															#line 1646 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_13.addCallbackAndClear(static_cast<ActorCallback< _executeActor1, 13, Void >*>(static_cast<_executeActor1*>(this)));
															#line 12913 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont9loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1cont9loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1cont9loopBody1(int loopDepth) 
	{
															#line 1640 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!(i < backupRanges.size() - 1))
															#line 12929 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
			return a_body1cont9break1(loopDepth==0?0:loopDepth-1); // break
		}
															#line 1641 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		shardMap.insert(KeyRangeRef(backupRanges[i].end, backupRanges[i + 1].begin), SKIP);
															#line 1642 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_12 = yield();
															#line 1642 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor1*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 12939 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_12.isReady()) { if (__when_expr_12.isError()) return a_body1Catch1(__when_expr_12.getError(), std::max(0, loopDepth - 1)); else return a_body1cont9loopBody1when1(__when_expr_12.get(), loopDepth); };
		static_cast<_executeActor1*>(this)->actor_wait_state = 13;
															#line 1642 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_12.addCallbackAndClear(static_cast<ActorCallback< _executeActor1, 12, Void >*>(static_cast<_executeActor1*>(this)));
															#line 12944 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont9break1(int loopDepth) 
	{
		try {
			return a_body1cont10(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont9loopBody1cont1(Void const& _,int loopDepth) 
	{
															#line 1640 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		++i;
															#line 12966 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (loopDepth == 0) return a_body1cont9loopHead1(0);

		return loopDepth;
	}
	int a_body1cont9loopBody1cont1(Void && _,int loopDepth) 
	{
															#line 1640 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		++i;
															#line 12975 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (loopDepth == 0) return a_body1cont9loopHead1(0);

		return loopDepth;
	}
	int a_body1cont9loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont9loopBody1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont9loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont9loopBody1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose13() 
	{
		if (static_cast<_executeActor1*>(this)->actor_wait_state > 0) static_cast<_executeActor1*>(this)->actor_wait_state = 0;
		static_cast<_executeActor1*>(this)->ActorCallback< _executeActor1, 12, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor1, 12, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 12);
		a_exitChoose13();
		try {
			a_body1cont9loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 12);

	}
	void a_callback_fire(ActorCallback< _executeActor1, 12, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 12);
		a_exitChoose13();
		try {
			a_body1cont9loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 12);

	}
	void a_callback_error(ActorCallback< _executeActor1, 12, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 12);
		a_exitChoose13();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 12);

	}
	int a_body1cont10cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont8(loopDepth);

		return loopDepth;
	}
	int a_body1cont10cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont8(loopDepth);

		return loopDepth;
	}
	int a_body1cont10when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont10cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont10when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont10cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose14() 
	{
		if (static_cast<_executeActor1*>(this)->actor_wait_state > 0) static_cast<_executeActor1*>(this)->actor_wait_state = 0;
		static_cast<_executeActor1*>(this)->ActorCallback< _executeActor1, 13, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor1, 13, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 13);
		a_exitChoose14();
		try {
			a_body1cont10when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 13);

	}
	void a_callback_fire(ActorCallback< _executeActor1, 13, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 13);
		a_exitChoose14();
		try {
			a_body1cont10when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 13);

	}
	void a_callback_error(ActorCallback< _executeActor1, 13, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 13);
		a_exitChoose14();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 13);

	}
	int a_body1cont11(int loopDepth) 
	{
															#line 1666 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		shardMap.coalesce(normalKeys);
															#line 1667 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_15 = yield();
															#line 1667 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor1*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 13126 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_15.isReady()) { if (__when_expr_15.isError()) return a_body1Catch1(__when_expr_15.getError(), loopDepth); else return a_body1cont11when1(__when_expr_15.get(), loopDepth); };
		static_cast<_executeActor1*>(this)->actor_wait_state = 16;
															#line 1667 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_15.addCallbackAndClear(static_cast<ActorCallback< _executeActor1, 15, Void >*>(static_cast<_executeActor1*>(this)));
															#line 13131 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont8loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1cont8loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1cont8loopBody1(int loopDepth) 
	{
															#line 1656 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!(iShard != iShardEnd))
															#line 13147 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
			return a_body1cont8break1(loopDepth==0?0:loopDepth-1); // break
		}
															#line 1657 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (iShard->value() == DONE)
															#line 13153 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 1658 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			++countShardsDone;
															#line 13157 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
		else
		{
															#line 1659 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (iShard->value() >= NOT_DONE_MIN)
															#line 13163 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			{
															#line 1660 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				++countShardsNotDone;
															#line 13167 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			}
		}
															#line 1662 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_14 = yield();
															#line 1662 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor1*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 13174 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_14.isReady()) { if (__when_expr_14.isError()) return a_body1Catch1(__when_expr_14.getError(), std::max(0, loopDepth - 1)); else return a_body1cont8loopBody1when1(__when_expr_14.get(), loopDepth); };
		static_cast<_executeActor1*>(this)->actor_wait_state = 15;
															#line 1662 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_14.addCallbackAndClear(static_cast<ActorCallback< _executeActor1, 14, Void >*>(static_cast<_executeActor1*>(this)));
															#line 13179 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont8break1(int loopDepth) 
	{
		try {
			return a_body1cont11(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont8loopBody1cont1(Void const& _,int loopDepth) 
	{
															#line 1656 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		++iShard;
															#line 13201 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (loopDepth == 0) return a_body1cont8loopHead1(0);

		return loopDepth;
	}
	int a_body1cont8loopBody1cont1(Void && _,int loopDepth) 
	{
															#line 1656 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		++iShard;
															#line 13210 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (loopDepth == 0) return a_body1cont8loopHead1(0);

		return loopDepth;
	}
	int a_body1cont8loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont8loopBody1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont8loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont8loopBody1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose15() 
	{
		if (static_cast<_executeActor1*>(this)->actor_wait_state > 0) static_cast<_executeActor1*>(this)->actor_wait_state = 0;
		static_cast<_executeActor1*>(this)->ActorCallback< _executeActor1, 14, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor1, 14, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 14);
		a_exitChoose15();
		try {
			a_body1cont8loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 14);

	}
	void a_callback_fire(ActorCallback< _executeActor1, 14, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 14);
		a_exitChoose15();
		try {
			a_body1cont8loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 14);

	}
	void a_callback_error(ActorCallback< _executeActor1, 14, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 14);
		a_exitChoose15();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 14);

	}
	int a_body1cont11cont1(Void const& _,int loopDepth) 
	{
															#line 1670 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		countAllShards = countShardsDone + countShardsNotDone;
															#line 1672 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (countShardsNotDone == 0)
															#line 13284 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 1673 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			TraceEvent("FileBackupSnapshotDispatchFinished") .detail("BackupUID", config.getUid()) .detail("AllShards", countAllShards) .detail("ShardsDone", countShardsDone) .detail("ShardsNotDone", countShardsNotDone) .detail("SnapshotBeginVersion", snapshotBeginVersion) .detail("SnapshotTargetEndVersion", snapshotTargetEndVersion) .detail("CurrentVersion", recentReadVersion) .detail("SnapshotIntervalSeconds", snapshotIntervalSeconds);
															#line 1682 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			Params.snapshotFinished().set(task, true);
															#line 1683 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (!static_cast<_executeActor1*>(this)->SAV<Void>::futures) { (void)(Void()); this->~_executeActor1State(); static_cast<_executeActor1*>(this)->destroy(); return 0; }
															#line 13292 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			new (&static_cast<_executeActor1*>(this)->SAV< Void >::value()) Void(Void());
			this->~_executeActor1State();
			static_cast<_executeActor1*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 1687 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		nextDispatchVersion = Version();
															#line 1691 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (g_network->isSimulated())
															#line 13302 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 1692 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			nextDispatchVersion = recentReadVersion + CLIENT_KNOBS->CORE_VERSIONSPERSECOND * (snapshotIntervalSeconds / 5.0);
															#line 13306 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
		else
		{
															#line 1695 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			nextDispatchVersion = recentReadVersion + CLIENT_KNOBS->CORE_VERSIONSPERSECOND * CLIENT_KNOBS->BACKUP_SNAPSHOT_DISPATCH_INTERVAL_SEC;
															#line 13312 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 1702 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (nextDispatchVersion > snapshotTargetEndVersion)
															#line 13316 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 1703 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			nextDispatchVersion = std::max(recentReadVersion, snapshotTargetEndVersion);
															#line 13320 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 1705 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		Params.nextDispatchVersion().set(task, nextDispatchVersion);
															#line 1709 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		double timeElapsed;
															#line 1710 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		Version snapshotScheduledVersionInterval = snapshotTargetEndVersion - snapshotBeginVersion;
															#line 1711 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (snapshotTargetEndVersion > snapshotBeginVersion)
															#line 13330 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 1712 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			timeElapsed = std::min( 1.0, (double)(nextDispatchVersion - snapshotBeginVersion) / (snapshotScheduledVersionInterval));
															#line 13334 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
		else
		{
															#line 1715 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			timeElapsed = 1.0;
															#line 13340 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 1717 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		countExpectedShardsDone = countAllShards * timeElapsed;
															#line 1718 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		countShardsToDispatch = std::max<int>(0, countExpectedShardsDone - countShardsDone);
															#line 1723 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		int64_t dispatchWindow = nextDispatchVersion - recentReadVersion;
															#line 1727 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		int countShardsExpectedPerNormalWindow;
															#line 1728 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (snapshotScheduledVersionInterval == 0)
															#line 13352 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 1729 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			countShardsExpectedPerNormalWindow = 0;
															#line 13356 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
		else
		{
															#line 1733 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			countShardsExpectedPerNormalWindow = (double(dispatchWindow) / snapshotScheduledVersionInterval) * countAllShards;
															#line 13362 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 1739 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		int countShardsBehind = std::max<int64_t>(0, countShardsToDispatch + snapshotBatchSize.get() - countShardsExpectedPerNormalWindow);
															#line 1741 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		Params.shardsBehind().set(task, countShardsBehind);
															#line 1743 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent("FileBackupSnapshotDispatchStats") .detail("BackupUID", config.getUid()) .detail("AllShards", countAllShards) .detail("ShardsDone", countShardsDone) .detail("ShardsNotDone", countShardsNotDone) .detail("ExpectedShardsDone", countExpectedShardsDone) .detail("ShardsToDispatch", countShardsToDispatch) .detail("ShardsBehind", countShardsBehind) .detail("SnapshotBeginVersion", snapshotBeginVersion) .detail("SnapshotTargetEndVersion", snapshotTargetEndVersion) .detail("NextDispatchVersion", nextDispatchVersion) .detail("CurrentVersion", recentReadVersion) .detail("TimeElapsed", timeElapsed) .detail("SnapshotIntervalSeconds", snapshotIntervalSeconds);
															#line 1759 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		;
															#line 13372 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont11cont1loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1cont11cont1(Void && _,int loopDepth) 
	{
															#line 1670 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		countAllShards = countShardsDone + countShardsNotDone;
															#line 1672 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (countShardsNotDone == 0)
															#line 13383 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 1673 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			TraceEvent("FileBackupSnapshotDispatchFinished") .detail("BackupUID", config.getUid()) .detail("AllShards", countAllShards) .detail("ShardsDone", countShardsDone) .detail("ShardsNotDone", countShardsNotDone) .detail("SnapshotBeginVersion", snapshotBeginVersion) .detail("SnapshotTargetEndVersion", snapshotTargetEndVersion) .detail("CurrentVersion", recentReadVersion) .detail("SnapshotIntervalSeconds", snapshotIntervalSeconds);
															#line 1682 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			Params.snapshotFinished().set(task, true);
															#line 1683 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (!static_cast<_executeActor1*>(this)->SAV<Void>::futures) { (void)(Void()); this->~_executeActor1State(); static_cast<_executeActor1*>(this)->destroy(); return 0; }
															#line 13391 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			new (&static_cast<_executeActor1*>(this)->SAV< Void >::value()) Void(Void());
			this->~_executeActor1State();
			static_cast<_executeActor1*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 1687 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		nextDispatchVersion = Version();
															#line 1691 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (g_network->isSimulated())
															#line 13401 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 1692 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			nextDispatchVersion = recentReadVersion + CLIENT_KNOBS->CORE_VERSIONSPERSECOND * (snapshotIntervalSeconds / 5.0);
															#line 13405 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
		else
		{
															#line 1695 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			nextDispatchVersion = recentReadVersion + CLIENT_KNOBS->CORE_VERSIONSPERSECOND * CLIENT_KNOBS->BACKUP_SNAPSHOT_DISPATCH_INTERVAL_SEC;
															#line 13411 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 1702 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (nextDispatchVersion > snapshotTargetEndVersion)
															#line 13415 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 1703 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			nextDispatchVersion = std::max(recentReadVersion, snapshotTargetEndVersion);
															#line 13419 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 1705 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		Params.nextDispatchVersion().set(task, nextDispatchVersion);
															#line 1709 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		double timeElapsed;
															#line 1710 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		Version snapshotScheduledVersionInterval = snapshotTargetEndVersion - snapshotBeginVersion;
															#line 1711 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (snapshotTargetEndVersion > snapshotBeginVersion)
															#line 13429 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 1712 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			timeElapsed = std::min( 1.0, (double)(nextDispatchVersion - snapshotBeginVersion) / (snapshotScheduledVersionInterval));
															#line 13433 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
		else
		{
															#line 1715 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			timeElapsed = 1.0;
															#line 13439 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 1717 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		countExpectedShardsDone = countAllShards * timeElapsed;
															#line 1718 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		countShardsToDispatch = std::max<int>(0, countExpectedShardsDone - countShardsDone);
															#line 1723 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		int64_t dispatchWindow = nextDispatchVersion - recentReadVersion;
															#line 1727 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		int countShardsExpectedPerNormalWindow;
															#line 1728 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (snapshotScheduledVersionInterval == 0)
															#line 13451 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 1729 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			countShardsExpectedPerNormalWindow = 0;
															#line 13455 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
		else
		{
															#line 1733 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			countShardsExpectedPerNormalWindow = (double(dispatchWindow) / snapshotScheduledVersionInterval) * countAllShards;
															#line 13461 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 1739 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		int countShardsBehind = std::max<int64_t>(0, countShardsToDispatch + snapshotBatchSize.get() - countShardsExpectedPerNormalWindow);
															#line 1741 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		Params.shardsBehind().set(task, countShardsBehind);
															#line 1743 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent("FileBackupSnapshotDispatchStats") .detail("BackupUID", config.getUid()) .detail("AllShards", countAllShards) .detail("ShardsDone", countShardsDone) .detail("ShardsNotDone", countShardsNotDone) .detail("ExpectedShardsDone", countExpectedShardsDone) .detail("ShardsToDispatch", countShardsToDispatch) .detail("ShardsBehind", countShardsBehind) .detail("SnapshotBeginVersion", snapshotBeginVersion) .detail("SnapshotTargetEndVersion", snapshotTargetEndVersion) .detail("NextDispatchVersion", nextDispatchVersion) .detail("CurrentVersion", recentReadVersion) .detail("TimeElapsed", timeElapsed) .detail("SnapshotIntervalSeconds", snapshotIntervalSeconds);
															#line 1759 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		;
															#line 13471 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont11cont1loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1cont11when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont11cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont11when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont11cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose16() 
	{
		if (static_cast<_executeActor1*>(this)->actor_wait_state > 0) static_cast<_executeActor1*>(this)->actor_wait_state = 0;
		static_cast<_executeActor1*>(this)->ActorCallback< _executeActor1, 15, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor1, 15, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 15);
		a_exitChoose16();
		try {
			a_body1cont11when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 15);

	}
	void a_callback_fire(ActorCallback< _executeActor1, 15, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 15);
		a_exitChoose16();
		try {
			a_body1cont11when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 15);

	}
	void a_callback_error(ActorCallback< _executeActor1, 15, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 15);
		a_exitChoose16();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 15);

	}
	int a_body1cont11cont2(int loopDepth) 
	{
															#line 1897 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (countShardsNotDone == 0)
															#line 13543 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 1898 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			TraceEvent("FileBackupSnapshotDispatchFinished") .detail("BackupUID", config.getUid()) .detail("AllShards", countAllShards) .detail("ShardsDone", countShardsDone) .detail("ShardsNotDone", countShardsNotDone) .detail("SnapshotBeginVersion", snapshotBeginVersion) .detail("SnapshotTargetEndVersion", snapshotTargetEndVersion) .detail("CurrentVersion", recentReadVersion) .detail("SnapshotIntervalSeconds", snapshotIntervalSeconds) .detail("DispatchTimeSeconds", timer() - startTime);
															#line 1908 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			Params.snapshotFinished().set(task, true);
															#line 13549 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 1911 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<_executeActor1*>(this)->SAV<Void>::futures) { (void)(Void()); this->~_executeActor1State(); static_cast<_executeActor1*>(this)->destroy(); return 0; }
															#line 13553 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<_executeActor1*>(this)->SAV< Void >::value()) Void(Void());
		this->~_executeActor1State();
		static_cast<_executeActor1*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont11cont1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1cont11cont1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1cont11cont1loopBody1(int loopDepth) 
	{
															#line 1759 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!(countShardsToDispatch > 0))
															#line 13572 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
			return a_body1cont11cont1break1(loopDepth==0?0:loopDepth-1); // break
		}
															#line 1761 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		rangesToAdd = std::vector<KeyRange>();
															#line 1764 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		int taskBatchSize = BUGGIFY ? deterministicRandom()->randomInt(1, countShardsToDispatch + 1) : CLIENT_KNOBS->BACKUP_DISPATCH_ADDTASK_SIZE;
															#line 1766 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		int added = 0;
															#line 1768 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		for(;countShardsToDispatch > 0 && added < taskBatchSize && shardMap.size() > 0;) {
															#line 1770 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			auto it = shardMap.randomRange();
															#line 1772 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			for(;1;) {
															#line 1773 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				if (it->value() >= NOT_DONE_MIN)
															#line 13590 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				{
															#line 1774 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
					rangesToAdd.push_back(it->range());
															#line 1775 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
					it->value() = DONE;
															#line 1776 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
					shardMap.coalesce(Key(it->begin()));
															#line 1777 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
					++added;
															#line 1778 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
					++countShardsDone;
															#line 1779 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
					--countShardsToDispatch;
															#line 1780 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
					--countShardsNotDone;
															#line 13606 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
					break;
				}
															#line 1783 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				if (it->end() == shardMap.mapEnd)
															#line 13611 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				{
					break;
				}
															#line 1785 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				++it;
															#line 13617 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			}
		}
															#line 1789 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		oldBatchSize = snapshotBatchSize.get();
															#line 1790 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		newBatchSize = oldBatchSize + rangesToAdd.size();
															#line 1793 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr->reset();
															#line 1794 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		;
															#line 13628 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont11cont1loopBody1loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1cont11cont1break1(int loopDepth) 
	{
		try {
			return a_body1cont11cont2(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont11cont1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1cont11cont1loopHead1(0);

		return loopDepth;
	}
	int a_body1cont11cont1loopBody1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1cont11cont1loopBody1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1cont11cont1loopBody1loopBody1(int loopDepth) 
	{
		try {
															#line 1796 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			TraceEvent("FileBackupSnapshotDispatchAddingTasks") .suppressFor(2) .detail("TasksToAdd", rangesToAdd.size()) .detail("NewBatchSize", newBatchSize);
															#line 1801 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 1802 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 1805 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			beginReads = std::vector<Future<Optional<bool>>>();
															#line 1806 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			endReads = std::vector<Future<Optional<bool>>>();
															#line 1808 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			for( auto& range : rangesToAdd ) {
															#line 1809 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				beginReads.push_back(config.snapshotRangeDispatchMap().get(tr, range.begin));
															#line 1810 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				endReads.push_back(config.snapshotRangeDispatchMap().get(tr, range.end));
															#line 13678 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			}
															#line 1813 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_16 = store(snapshotBatchSize.get(), config.snapshotBatchSize().getOrThrow(tr)) && waitForAll(beginReads) && waitForAll(endReads) && taskBucket->keepRunning(tr, task);
															#line 1813 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_executeActor1*>(this)->actor_wait_state < 0) return a_body1cont11cont1loopBody1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 13684 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_16.isReady()) { if (__when_expr_16.isError()) return a_body1cont11cont1loopBody1loopBody1Catch1(__when_expr_16.getError(), loopDepth); else return a_body1cont11cont1loopBody1loopBody1when1(__when_expr_16.get(), loopDepth); };
			static_cast<_executeActor1*>(this)->actor_wait_state = 17;
															#line 1813 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_16.addCallbackAndClear(static_cast<ActorCallback< _executeActor1, 16, Void >*>(static_cast<_executeActor1*>(this)));
															#line 13689 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1cont11cont1loopBody1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1cont11cont1loopBody1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont11cont1loopBody1break1(int loopDepth) 
	{
		try {
			return a_body1cont11cont1loopBody1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1cont11cont1loopBody1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1cont11cont1loopBody1loopHead1(0);

		return loopDepth;
	}
	int a_body1cont11cont1loopBody1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 1892 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_19 = tr->onError(e);
															#line 1892 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_executeActor1*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 2));
															#line 13726 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_19.isReady()) { if (__when_expr_19.isError()) return a_body1Catch1(__when_expr_19.getError(), std::max(0, loopDepth - 2)); else return a_body1cont11cont1loopBody1loopBody1Catch1when1(__when_expr_19.get(), loopDepth); };
			static_cast<_executeActor1*>(this)->actor_wait_state = 20;
															#line 1892 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_19.addCallbackAndClear(static_cast<ActorCallback< _executeActor1, 19, Void >*>(static_cast<_executeActor1*>(this)));
															#line 13731 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 2));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 2));
		}

		return loopDepth;
	}
	int a_body1cont11cont1loopBody1loopBody1cont2(Void const& _,int loopDepth) 
	{
															#line 1818 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (snapshotBatchSize.get() == newBatchSize)
															#line 13746 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
			return a_body1cont11cont1loopBody1break1(loopDepth==0?0:loopDepth-1); // break
		}
		else
		{
															#line 1821 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			ASSERT(snapshotBatchSize.get() == oldBatchSize);
															#line 1822 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			config.snapshotBatchSize().set(tr, newBatchSize);
															#line 1823 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			snapshotBatchSize = newBatchSize;
															#line 1824 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			config.snapshotDispatchLastShardsBehind().set(tr, Params.shardsBehind().get(task));
															#line 1825 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			config.snapshotDispatchLastVersion().set(tr, tr->getReadVersion().get());
															#line 13762 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 1828 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		addTaskFutures = std::vector<Future<Void>>();
															#line 1830 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		for(i = 0;i < beginReads.size();++i) {
															#line 1831 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			KeyRange& range = rangesToAdd[i];
															#line 1835 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			Optional<bool> beginValue = config.snapshotRangeDispatchMap().get(tr, range.begin).get();
															#line 1836 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			Optional<bool> endValue = config.snapshotRangeDispatchMap().get(tr, range.end).get();
															#line 1838 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			ASSERT(!beginValue.present() || !endValue.present() || beginValue != endValue);
															#line 1842 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if ((!beginValue.present() || !beginValue.get()) && (!endValue.present() || endValue.get()))
															#line 13778 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			{
															#line 1843 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				if (beginValue.present())
															#line 13782 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				{
															#line 1844 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
					config.snapshotRangeDispatchMap().erase(tr, range.begin);
															#line 13786 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				}
				else
				{
															#line 1846 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
					config.snapshotRangeDispatchMap().set(tr, range.begin, true);
															#line 13792 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				}
															#line 1848 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				if (endValue.present())
															#line 13796 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				{
															#line 1849 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
					config.snapshotRangeDispatchMap().erase(tr, range.end);
															#line 13800 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				}
				else
				{
															#line 1851 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
					config.snapshotRangeDispatchMap().set(tr, range.end, false);
															#line 13806 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				}
															#line 1854 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				Version scheduledVersion = invalidVersion;
															#line 1857 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				if (nextDispatchVersion > recentReadVersion)
															#line 13812 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				{
															#line 1858 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
					scheduledVersion = recentReadVersion + deterministicRandom()->random01() * (nextDispatchVersion - recentReadVersion);
															#line 13816 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				}
															#line 1862 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				int priority = latestSnapshotEndVersion.present() ? 0 : 1;
															#line 1863 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				addTaskFutures.push_back( success(BackupRangeTaskFunc::addTask(tr, taskBucket, task, priority, range.begin, range.end, TaskCompletionKey::joinWith(snapshotBatchFuture), Reference<TaskFuture>(), scheduledVersion)));
															#line 1874 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				TraceEvent("FileBackupSnapshotRangeDispatched") .suppressFor(2) .detail("BackupUID", config.getUid()) .detail("CurrentVersion", recentReadVersion) .detail("ScheduledVersion", scheduledVersion) .detail("BeginKey", range.begin.printable()) .detail("EndKey", range.end.printable());
															#line 13824 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			}
			else
			{
															#line 1884 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				ASSERT(false);
															#line 13830 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			}
		}
															#line 1888 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_17 = waitForAll(addTaskFutures);
															#line 1888 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor1*>(this)->actor_wait_state < 0) return a_body1cont11cont1loopBody1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 13837 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_17.isReady()) { if (__when_expr_17.isError()) return a_body1cont11cont1loopBody1loopBody1Catch1(__when_expr_17.getError(), loopDepth); else return a_body1cont11cont1loopBody1loopBody1cont2when1(__when_expr_17.get(), loopDepth); };
		static_cast<_executeActor1*>(this)->actor_wait_state = 18;
															#line 1888 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_17.addCallbackAndClear(static_cast<ActorCallback< _executeActor1, 17, Void >*>(static_cast<_executeActor1*>(this)));
															#line 13842 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont11cont1loopBody1loopBody1cont2(Void && _,int loopDepth) 
	{
															#line 1818 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (snapshotBatchSize.get() == newBatchSize)
															#line 13851 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
			return a_body1cont11cont1loopBody1break1(loopDepth==0?0:loopDepth-1); // break
		}
		else
		{
															#line 1821 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			ASSERT(snapshotBatchSize.get() == oldBatchSize);
															#line 1822 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			config.snapshotBatchSize().set(tr, newBatchSize);
															#line 1823 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			snapshotBatchSize = newBatchSize;
															#line 1824 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			config.snapshotDispatchLastShardsBehind().set(tr, Params.shardsBehind().get(task));
															#line 1825 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			config.snapshotDispatchLastVersion().set(tr, tr->getReadVersion().get());
															#line 13867 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 1828 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		addTaskFutures = std::vector<Future<Void>>();
															#line 1830 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		for(i = 0;i < beginReads.size();++i) {
															#line 1831 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			KeyRange& range = rangesToAdd[i];
															#line 1835 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			Optional<bool> beginValue = config.snapshotRangeDispatchMap().get(tr, range.begin).get();
															#line 1836 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			Optional<bool> endValue = config.snapshotRangeDispatchMap().get(tr, range.end).get();
															#line 1838 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			ASSERT(!beginValue.present() || !endValue.present() || beginValue != endValue);
															#line 1842 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if ((!beginValue.present() || !beginValue.get()) && (!endValue.present() || endValue.get()))
															#line 13883 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			{
															#line 1843 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				if (beginValue.present())
															#line 13887 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				{
															#line 1844 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
					config.snapshotRangeDispatchMap().erase(tr, range.begin);
															#line 13891 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				}
				else
				{
															#line 1846 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
					config.snapshotRangeDispatchMap().set(tr, range.begin, true);
															#line 13897 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				}
															#line 1848 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				if (endValue.present())
															#line 13901 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				{
															#line 1849 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
					config.snapshotRangeDispatchMap().erase(tr, range.end);
															#line 13905 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				}
				else
				{
															#line 1851 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
					config.snapshotRangeDispatchMap().set(tr, range.end, false);
															#line 13911 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				}
															#line 1854 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				Version scheduledVersion = invalidVersion;
															#line 1857 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				if (nextDispatchVersion > recentReadVersion)
															#line 13917 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				{
															#line 1858 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
					scheduledVersion = recentReadVersion + deterministicRandom()->random01() * (nextDispatchVersion - recentReadVersion);
															#line 13921 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				}
															#line 1862 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				int priority = latestSnapshotEndVersion.present() ? 0 : 1;
															#line 1863 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				addTaskFutures.push_back( success(BackupRangeTaskFunc::addTask(tr, taskBucket, task, priority, range.begin, range.end, TaskCompletionKey::joinWith(snapshotBatchFuture), Reference<TaskFuture>(), scheduledVersion)));
															#line 1874 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				TraceEvent("FileBackupSnapshotRangeDispatched") .suppressFor(2) .detail("BackupUID", config.getUid()) .detail("CurrentVersion", recentReadVersion) .detail("ScheduledVersion", scheduledVersion) .detail("BeginKey", range.begin.printable()) .detail("EndKey", range.end.printable());
															#line 13929 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			}
			else
			{
															#line 1884 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				ASSERT(false);
															#line 13935 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			}
		}
															#line 1888 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_17 = waitForAll(addTaskFutures);
															#line 1888 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor1*>(this)->actor_wait_state < 0) return a_body1cont11cont1loopBody1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 13942 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_17.isReady()) { if (__when_expr_17.isError()) return a_body1cont11cont1loopBody1loopBody1Catch1(__when_expr_17.getError(), loopDepth); else return a_body1cont11cont1loopBody1loopBody1cont2when1(__when_expr_17.get(), loopDepth); };
		static_cast<_executeActor1*>(this)->actor_wait_state = 18;
															#line 1888 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_17.addCallbackAndClear(static_cast<ActorCallback< _executeActor1, 17, Void >*>(static_cast<_executeActor1*>(this)));
															#line 13947 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont11cont1loopBody1loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont11cont1loopBody1loopBody1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont11cont1loopBody1loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont11cont1loopBody1loopBody1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose17() 
	{
		if (static_cast<_executeActor1*>(this)->actor_wait_state > 0) static_cast<_executeActor1*>(this)->actor_wait_state = 0;
		static_cast<_executeActor1*>(this)->ActorCallback< _executeActor1, 16, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor1, 16, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 16);
		a_exitChoose17();
		try {
			a_body1cont11cont1loopBody1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont11cont1loopBody1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont11cont1loopBody1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 16);

	}
	void a_callback_fire(ActorCallback< _executeActor1, 16, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 16);
		a_exitChoose17();
		try {
			a_body1cont11cont1loopBody1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont11cont1loopBody1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont11cont1loopBody1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 16);

	}
	void a_callback_error(ActorCallback< _executeActor1, 16, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 16);
		a_exitChoose17();
		try {
			a_body1cont11cont1loopBody1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont11cont1loopBody1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont11cont1loopBody1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 16);

	}
	int a_body1cont11cont1loopBody1loopBody1cont4(Void const& _,int loopDepth) 
	{
															#line 1889 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_18 = tr->commit();
															#line 1889 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor1*>(this)->actor_wait_state < 0) return a_body1cont11cont1loopBody1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 14021 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_18.isReady()) { if (__when_expr_18.isError()) return a_body1cont11cont1loopBody1loopBody1Catch1(__when_expr_18.getError(), loopDepth); else return a_body1cont11cont1loopBody1loopBody1cont4when1(__when_expr_18.get(), loopDepth); };
		static_cast<_executeActor1*>(this)->actor_wait_state = 19;
															#line 1889 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_18.addCallbackAndClear(static_cast<ActorCallback< _executeActor1, 18, Void >*>(static_cast<_executeActor1*>(this)));
															#line 14026 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont11cont1loopBody1loopBody1cont4(Void && _,int loopDepth) 
	{
															#line 1889 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_18 = tr->commit();
															#line 1889 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor1*>(this)->actor_wait_state < 0) return a_body1cont11cont1loopBody1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 14037 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_18.isReady()) { if (__when_expr_18.isError()) return a_body1cont11cont1loopBody1loopBody1Catch1(__when_expr_18.getError(), loopDepth); else return a_body1cont11cont1loopBody1loopBody1cont4when1(__when_expr_18.get(), loopDepth); };
		static_cast<_executeActor1*>(this)->actor_wait_state = 19;
															#line 1889 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_18.addCallbackAndClear(static_cast<ActorCallback< _executeActor1, 18, Void >*>(static_cast<_executeActor1*>(this)));
															#line 14042 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont11cont1loopBody1loopBody1cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont11cont1loopBody1loopBody1cont4(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont11cont1loopBody1loopBody1cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont11cont1loopBody1loopBody1cont4(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose18() 
	{
		if (static_cast<_executeActor1*>(this)->actor_wait_state > 0) static_cast<_executeActor1*>(this)->actor_wait_state = 0;
		static_cast<_executeActor1*>(this)->ActorCallback< _executeActor1, 17, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor1, 17, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 17);
		a_exitChoose18();
		try {
			a_body1cont11cont1loopBody1loopBody1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont11cont1loopBody1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont11cont1loopBody1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 17);

	}
	void a_callback_fire(ActorCallback< _executeActor1, 17, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 17);
		a_exitChoose18();
		try {
			a_body1cont11cont1loopBody1loopBody1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont11cont1loopBody1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont11cont1loopBody1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 17);

	}
	void a_callback_error(ActorCallback< _executeActor1, 17, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 17);
		a_exitChoose18();
		try {
			a_body1cont11cont1loopBody1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont11cont1loopBody1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont11cont1loopBody1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 17);

	}
	int a_body1cont11cont1loopBody1loopBody1cont15(Void const& _,int loopDepth) 
	{
		return a_body1cont11cont1loopBody1break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1cont11cont1loopBody1loopBody1cont15(Void && _,int loopDepth) 
	{
		return a_body1cont11cont1loopBody1break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1cont11cont1loopBody1loopBody1cont4when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont11cont1loopBody1loopBody1cont15(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont11cont1loopBody1loopBody1cont4when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont11cont1loopBody1loopBody1cont15(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose19() 
	{
		if (static_cast<_executeActor1*>(this)->actor_wait_state > 0) static_cast<_executeActor1*>(this)->actor_wait_state = 0;
		static_cast<_executeActor1*>(this)->ActorCallback< _executeActor1, 18, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor1, 18, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 18);
		a_exitChoose19();
		try {
			a_body1cont11cont1loopBody1loopBody1cont4when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont11cont1loopBody1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont11cont1loopBody1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 18);

	}
	void a_callback_fire(ActorCallback< _executeActor1, 18, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 18);
		a_exitChoose19();
		try {
			a_body1cont11cont1loopBody1loopBody1cont4when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont11cont1loopBody1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont11cont1loopBody1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 18);

	}
	void a_callback_error(ActorCallback< _executeActor1, 18, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 18);
		a_exitChoose19();
		try {
			a_body1cont11cont1loopBody1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont11cont1loopBody1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont11cont1loopBody1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 18);

	}
	int a_body1cont11cont1loopBody1loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont11cont1loopBody1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont11cont1loopBody1loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont11cont1loopBody1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont11cont1loopBody1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont11cont1loopBody1loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont11cont1loopBody1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont11cont1loopBody1loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose20() 
	{
		if (static_cast<_executeActor1*>(this)->actor_wait_state > 0) static_cast<_executeActor1*>(this)->actor_wait_state = 0;
		static_cast<_executeActor1*>(this)->ActorCallback< _executeActor1, 19, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor1, 19, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 19);
		a_exitChoose20();
		try {
			a_body1cont11cont1loopBody1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 19);

	}
	void a_callback_fire(ActorCallback< _executeActor1, 19, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 19);
		a_exitChoose20();
		try {
			a_body1cont11cont1loopBody1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 19);

	}
	void a_callback_error(ActorCallback< _executeActor1, 19, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 19);
		a_exitChoose20();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 19);

	}
															#line 1463 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Database cx;
															#line 1463 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskBucket> taskBucket;
															#line 1463 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<FutureBucket> futureBucket;
															#line 1463 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<Task> task;
															#line 1467 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<FlowLock> lock;
															#line 1470 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	double startTime;
															#line 1471 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 1476 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int notDoneSequence;
															#line 1477 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	KeyRangeMap<int> shardMap;
															#line 1478 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Key beginKey;
															#line 1486 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Future<Standalone<VectorRef<KeyRef>>> shardBoundaries;
															#line 1505 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	BackupConfig config;
															#line 1506 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Version recentReadVersion;
															#line 1507 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Version snapshotBeginVersion;
															#line 1508 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Version snapshotTargetEndVersion;
															#line 1509 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int64_t snapshotIntervalSeconds;
															#line 1510 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Optional<Version> latestSnapshotEndVersion;
															#line 1511 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	std::vector<KeyRange> backupRanges;
															#line 1512 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Optional<Key> snapshotBatchFutureKey;
															#line 1513 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskFuture> snapshotBatchFuture;
															#line 1514 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Optional<int64_t> snapshotBatchSize;
															#line 1545 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	TaskCompletionKey dispatchCompletionKey;
															#line 1568 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	std::vector<std::pair<Key, bool>> dispatchBoundaries;
															#line 1576 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Future<std::vector<std::pair<Key, bool>>> bounds;
															#line 1598 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int i;
															#line 1599 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	RangeMap<Key, int, KeyRangeRef>::iterator iShard;
															#line 1600 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	RangeMap<Key, int, KeyRangeRef>::iterator iShardEnd;
															#line 1605 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	bool lastValue;
															#line 1606 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Key lastKey;
															#line 1649 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int countShardsDone;
															#line 1650 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int countShardsNotDone;
															#line 1670 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int countAllShards;
															#line 1687 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Version nextDispatchVersion;
															#line 1717 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int countExpectedShardsDone;
															#line 1718 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int countShardsToDispatch;
															#line 1761 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	std::vector<KeyRange> rangesToAdd;
															#line 1789 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int64_t oldBatchSize;
															#line 1790 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int64_t newBatchSize;
															#line 1805 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	std::vector<Future<Optional<bool>>> beginReads;
															#line 1806 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	std::vector<Future<Optional<bool>>> endReads;
															#line 1828 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	std::vector<Future<Void>> addTaskFutures;
															#line 14342 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via _execute()
															#line 1463 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class _executeActor1 final : public Actor<Void>, public ActorCallback< _executeActor1, 0, Void >, public ActorCallback< _executeActor1, 1, Void >, public ActorCallback< _executeActor1, 2, Void >, public ActorCallback< _executeActor1, 3, Void >, public ActorCallback< _executeActor1, 4, Void >, public ActorCallback< _executeActor1, 5, Void >, public ActorCallback< _executeActor1, 6, Void >, public ActorCallback< _executeActor1, 7, Void >, public ActorCallback< _executeActor1, 8, Void >, public ActorCallback< _executeActor1, 9, Void >, public ActorCallback< _executeActor1, 10, Void >, public ActorCallback< _executeActor1, 11, Void >, public ActorCallback< _executeActor1, 12, Void >, public ActorCallback< _executeActor1, 13, Void >, public ActorCallback< _executeActor1, 14, Void >, public ActorCallback< _executeActor1, 15, Void >, public ActorCallback< _executeActor1, 16, Void >, public ActorCallback< _executeActor1, 17, Void >, public ActorCallback< _executeActor1, 18, Void >, public ActorCallback< _executeActor1, 19, Void >, public FastAllocated<_executeActor1>, public _executeActor1State<_executeActor1> {
															#line 14347 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<_executeActor1>::operator new;
	using FastAllocated<_executeActor1>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< _executeActor1, 0, Void >;
friend struct ActorCallback< _executeActor1, 1, Void >;
friend struct ActorCallback< _executeActor1, 2, Void >;
friend struct ActorCallback< _executeActor1, 3, Void >;
friend struct ActorCallback< _executeActor1, 4, Void >;
friend struct ActorCallback< _executeActor1, 5, Void >;
friend struct ActorCallback< _executeActor1, 6, Void >;
friend struct ActorCallback< _executeActor1, 7, Void >;
friend struct ActorCallback< _executeActor1, 8, Void >;
friend struct ActorCallback< _executeActor1, 9, Void >;
friend struct ActorCallback< _executeActor1, 10, Void >;
friend struct ActorCallback< _executeActor1, 11, Void >;
friend struct ActorCallback< _executeActor1, 12, Void >;
friend struct ActorCallback< _executeActor1, 13, Void >;
friend struct ActorCallback< _executeActor1, 14, Void >;
friend struct ActorCallback< _executeActor1, 15, Void >;
friend struct ActorCallback< _executeActor1, 16, Void >;
friend struct ActorCallback< _executeActor1, 17, Void >;
friend struct ActorCallback< _executeActor1, 18, Void >;
friend struct ActorCallback< _executeActor1, 19, Void >;
															#line 1463 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	_executeActor1(Database const& cx,Reference<TaskBucket> const& taskBucket,Reference<FutureBucket> const& futureBucket,Reference<Task> const& task) 
															#line 14377 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<Void>(),
		   _executeActor1State<_executeActor1>(cx, taskBucket, futureBucket, task)
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("_execute");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< _executeActor1, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< _executeActor1, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< _executeActor1, 2, Void >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< _executeActor1, 3, Void >*)0, actor_cancelled()); break;
		case 5: this->a_callback_error((ActorCallback< _executeActor1, 4, Void >*)0, actor_cancelled()); break;
		case 6: this->a_callback_error((ActorCallback< _executeActor1, 5, Void >*)0, actor_cancelled()); break;
		case 7: this->a_callback_error((ActorCallback< _executeActor1, 6, Void >*)0, actor_cancelled()); break;
		case 8: this->a_callback_error((ActorCallback< _executeActor1, 7, Void >*)0, actor_cancelled()); break;
		case 9: this->a_callback_error((ActorCallback< _executeActor1, 8, Void >*)0, actor_cancelled()); break;
		case 10: this->a_callback_error((ActorCallback< _executeActor1, 9, Void >*)0, actor_cancelled()); break;
		case 11: this->a_callback_error((ActorCallback< _executeActor1, 10, Void >*)0, actor_cancelled()); break;
		case 12: this->a_callback_error((ActorCallback< _executeActor1, 11, Void >*)0, actor_cancelled()); break;
		case 13: this->a_callback_error((ActorCallback< _executeActor1, 12, Void >*)0, actor_cancelled()); break;
		case 14: this->a_callback_error((ActorCallback< _executeActor1, 13, Void >*)0, actor_cancelled()); break;
		case 15: this->a_callback_error((ActorCallback< _executeActor1, 14, Void >*)0, actor_cancelled()); break;
		case 16: this->a_callback_error((ActorCallback< _executeActor1, 15, Void >*)0, actor_cancelled()); break;
		case 17: this->a_callback_error((ActorCallback< _executeActor1, 16, Void >*)0, actor_cancelled()); break;
		case 18: this->a_callback_error((ActorCallback< _executeActor1, 17, Void >*)0, actor_cancelled()); break;
		case 19: this->a_callback_error((ActorCallback< _executeActor1, 18, Void >*)0, actor_cancelled()); break;
		case 20: this->a_callback_error((ActorCallback< _executeActor1, 19, Void >*)0, actor_cancelled()); break;
		}

	}
};
															#line 1463 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<Void> _execute( Database const& cx, Reference<TaskBucket> const& taskBucket, Reference<FutureBucket> const& futureBucket, Reference<Task> const& task ) {
															#line 1463 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<Void>(new _executeActor1(cx, taskBucket, futureBucket, task));
															#line 14423 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 1913 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

	// This function is just a wrapper for BackupSnapshotManifest::addTask() which is defined below.
	// The BackupSnapshotDispatchTask and BackupSnapshotManifest tasks reference each other so in order to keep their
	// execute and finish phases defined together inside their class definitions this wrapper is declared here but
	// defined after BackupSnapshotManifest is defined.
	static Future<Key> addSnapshotManifestTask(Reference<ReadYourWritesTransaction> tr,
	                                           Reference<TaskBucket> taskBucket,
	                                           Reference<Task> parentTask,
	                                           TaskCompletionKey completionKey,
	                                           Reference<TaskFuture> waitFor = Reference<TaskFuture>());

																#line 14438 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via _finish()
															#line 1924 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class _finishActor3>
															#line 1924 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class _finishActor3State {
															#line 14444 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 1924 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	_finishActor3State(Reference<ReadYourWritesTransaction> const& tr,Reference<TaskBucket> const& taskBucket,Reference<FutureBucket> const& futureBucket,Reference<Task> const& task) 
															#line 1924 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 1924 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : tr(tr),
															#line 1924 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   taskBucket(taskBucket),
															#line 1924 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   futureBucket(futureBucket),
															#line 1924 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   task(task),
															#line 1928 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   config(task),
															#line 1931 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   snapshotBatchFutureKey(),
															#line 1932 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   snapshotBatchDispatchDoneKey()
															#line 14463 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("_finish", reinterpret_cast<unsigned long>(this));

	}
	~_finishActor3State() 
	{
		fdb_probe_actor_destroy("_finish", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 1934 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_0 = store(snapshotBatchFutureKey, config.snapshotBatchFuture().getOrThrow(tr)) && store(snapshotBatchDispatchDoneKey, config.snapshotBatchDispatchDoneKey().getOrThrow(tr));
															#line 1934 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_finishActor3*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 14480 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<_finishActor3*>(this)->actor_wait_state = 1;
															#line 1934 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< _finishActor3, 0, Void >*>(static_cast<_finishActor3*>(this)));
															#line 14485 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~_finishActor3State();
		static_cast<_finishActor3*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void const& _,int loopDepth) 
	{
															#line 1937 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		snapshotBatchFuture = futureBucket->unpack(snapshotBatchFutureKey);
															#line 1938 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		snapshotBatchDispatchDoneFuture = futureBucket->unpack(snapshotBatchDispatchDoneKey);
															#line 1940 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		config.snapshotBatchFuture().clear(tr);
															#line 1941 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		config.snapshotBatchDispatchDoneKey().clear(tr);
															#line 1942 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		config.snapshotBatchSize().clear(tr);
															#line 1945 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		config.snapshotDispatchLastShardsBehind().set(tr, Params.shardsBehind().getOrDefault(task, 0));
															#line 1946 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		config.snapshotDispatchLastVersion().set(tr, tr->getReadVersion().get());
															#line 1948 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		snapshotFinishedFuture = task->getDoneFuture(futureBucket);
															#line 1953 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (Params.snapshotFinished().getOrDefault(task, false))
															#line 14524 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 1954 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_1 = success(addSnapshotManifestTask( tr, taskBucket, task, TaskCompletionKey::signal(snapshotFinishedFuture), snapshotBatchFuture));
															#line 1954 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_finishActor3*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 14530 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
			static_cast<_finishActor3*>(this)->actor_wait_state = 2;
															#line 1954 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< _finishActor3, 1, Void >*>(static_cast<_finishActor3*>(this)));
															#line 14535 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
															#line 1957 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_2 = success(addTask(tr, taskBucket, task, 1, TaskCompletionKey::signal(snapshotFinishedFuture), snapshotBatchFuture, Params.nextDispatchVersion().get(task)));
															#line 1957 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_finishActor3*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 14544 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont1when2(__when_expr_2.get(), loopDepth); };
			static_cast<_finishActor3*>(this)->actor_wait_state = 3;
															#line 1957 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< _finishActor3, 2, Void >*>(static_cast<_finishActor3*>(this)));
															#line 14549 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}

		return loopDepth;
	}
	int a_body1cont1(Void && _,int loopDepth) 
	{
															#line 1937 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		snapshotBatchFuture = futureBucket->unpack(snapshotBatchFutureKey);
															#line 1938 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		snapshotBatchDispatchDoneFuture = futureBucket->unpack(snapshotBatchDispatchDoneKey);
															#line 1940 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		config.snapshotBatchFuture().clear(tr);
															#line 1941 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		config.snapshotBatchDispatchDoneKey().clear(tr);
															#line 1942 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		config.snapshotBatchSize().clear(tr);
															#line 1945 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		config.snapshotDispatchLastShardsBehind().set(tr, Params.shardsBehind().getOrDefault(task, 0));
															#line 1946 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		config.snapshotDispatchLastVersion().set(tr, tr->getReadVersion().get());
															#line 1948 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		snapshotFinishedFuture = task->getDoneFuture(futureBucket);
															#line 1953 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (Params.snapshotFinished().getOrDefault(task, false))
															#line 14575 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 1954 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_1 = success(addSnapshotManifestTask( tr, taskBucket, task, TaskCompletionKey::signal(snapshotFinishedFuture), snapshotBatchFuture));
															#line 1954 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_finishActor3*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 14581 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
			static_cast<_finishActor3*>(this)->actor_wait_state = 2;
															#line 1954 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< _finishActor3, 1, Void >*>(static_cast<_finishActor3*>(this)));
															#line 14586 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
															#line 1957 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_2 = success(addTask(tr, taskBucket, task, 1, TaskCompletionKey::signal(snapshotFinishedFuture), snapshotBatchFuture, Params.nextDispatchVersion().get(task)));
															#line 1957 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_finishActor3*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 14595 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont1when2(__when_expr_2.get(), loopDepth); };
			static_cast<_finishActor3*>(this)->actor_wait_state = 3;
															#line 1957 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< _finishActor3, 2, Void >*>(static_cast<_finishActor3*>(this)));
															#line 14600 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<_finishActor3*>(this)->actor_wait_state > 0) static_cast<_finishActor3*>(this)->actor_wait_state = 0;
		static_cast<_finishActor3*>(this)->ActorCallback< _finishActor3, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor3, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< _finishActor3, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< _finishActor3, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont2(int loopDepth) 
	{
															#line 1967 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_3 = snapshotBatchDispatchDoneFuture->set(tr, taskBucket);
															#line 1967 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_finishActor3*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 14675 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1cont2when1(__when_expr_3.get(), loopDepth); };
		static_cast<_finishActor3*>(this)->actor_wait_state = 4;
															#line 1967 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< _finishActor3, 3, Void >*>(static_cast<_finishActor3*>(this)));
															#line 14680 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont3(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont2(loopDepth);

		return loopDepth;
	}
	int a_body1cont3(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont2(loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont3(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont3(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<_finishActor3*>(this)->actor_wait_state > 0) static_cast<_finishActor3*>(this)->actor_wait_state = 0;
		static_cast<_finishActor3*>(this)->ActorCallback< _finishActor3, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor3, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< _finishActor3, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< _finishActor3, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont4(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont2(loopDepth);

		return loopDepth;
	}
	int a_body1cont4(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont2(loopDepth);

		return loopDepth;
	}
	int a_body1cont1when2(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont4(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1when2(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont4(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<_finishActor3*>(this)->actor_wait_state > 0) static_cast<_finishActor3*>(this)->actor_wait_state = 0;
		static_cast<_finishActor3*>(this)->ActorCallback< _finishActor3, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor3, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont1when2(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< _finishActor3, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont1when2(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< _finishActor3, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1cont5(Void const& _,int loopDepth) 
	{
															#line 1969 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_4 = taskBucket->finish(tr, task);
															#line 1969 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_finishActor3*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 14841 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1Catch1(__when_expr_4.getError(), loopDepth); else return a_body1cont5when1(__when_expr_4.get(), loopDepth); };
		static_cast<_finishActor3*>(this)->actor_wait_state = 5;
															#line 1969 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< _finishActor3, 4, Void >*>(static_cast<_finishActor3*>(this)));
															#line 14846 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont5(Void && _,int loopDepth) 
	{
															#line 1969 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_4 = taskBucket->finish(tr, task);
															#line 1969 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_finishActor3*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 14857 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1Catch1(__when_expr_4.getError(), loopDepth); else return a_body1cont5when1(__when_expr_4.get(), loopDepth); };
		static_cast<_finishActor3*>(this)->actor_wait_state = 5;
															#line 1969 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< _finishActor3, 4, Void >*>(static_cast<_finishActor3*>(this)));
															#line 14862 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont5(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont5(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<_finishActor3*>(this)->actor_wait_state > 0) static_cast<_finishActor3*>(this)->actor_wait_state = 0;
		static_cast<_finishActor3*>(this)->ActorCallback< _finishActor3, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor3, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< _finishActor3, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< _finishActor3, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 3);

	}
	int a_body1cont6(Void const& _,int loopDepth) 
	{
															#line 1971 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<_finishActor3*>(this)->SAV<Void>::futures) { (void)(Void()); this->~_finishActor3State(); static_cast<_finishActor3*>(this)->destroy(); return 0; }
															#line 14934 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<_finishActor3*>(this)->SAV< Void >::value()) Void(Void());
		this->~_finishActor3State();
		static_cast<_finishActor3*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont6(Void && _,int loopDepth) 
	{
															#line 1971 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<_finishActor3*>(this)->SAV<Void>::futures) { (void)(Void()); this->~_finishActor3State(); static_cast<_finishActor3*>(this)->destroy(); return 0; }
															#line 14946 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<_finishActor3*>(this)->SAV< Void >::value()) Void(Void());
		this->~_finishActor3State();
		static_cast<_finishActor3*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont5when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont6(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont5when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont6(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose5() 
	{
		if (static_cast<_finishActor3*>(this)->actor_wait_state > 0) static_cast<_finishActor3*>(this)->actor_wait_state = 0;
		static_cast<_finishActor3*>(this)->ActorCallback< _finishActor3, 4, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor3, 4, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont5when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_fire(ActorCallback< _finishActor3, 4, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont5when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_error(ActorCallback< _finishActor3, 4, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 4);

	}
															#line 1924 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 1924 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskBucket> taskBucket;
															#line 1924 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<FutureBucket> futureBucket;
															#line 1924 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<Task> task;
															#line 1928 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	BackupConfig config;
															#line 1931 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Key snapshotBatchFutureKey;
															#line 1932 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Key snapshotBatchDispatchDoneKey;
															#line 1937 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskFuture> snapshotBatchFuture;
															#line 1938 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskFuture> snapshotBatchDispatchDoneFuture;
															#line 1948 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskFuture> snapshotFinishedFuture;
															#line 15037 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via _finish()
															#line 1924 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class _finishActor3 final : public Actor<Void>, public ActorCallback< _finishActor3, 0, Void >, public ActorCallback< _finishActor3, 1, Void >, public ActorCallback< _finishActor3, 2, Void >, public ActorCallback< _finishActor3, 3, Void >, public ActorCallback< _finishActor3, 4, Void >, public FastAllocated<_finishActor3>, public _finishActor3State<_finishActor3> {
															#line 15042 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<_finishActor3>::operator new;
	using FastAllocated<_finishActor3>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< _finishActor3, 0, Void >;
friend struct ActorCallback< _finishActor3, 1, Void >;
friend struct ActorCallback< _finishActor3, 2, Void >;
friend struct ActorCallback< _finishActor3, 3, Void >;
friend struct ActorCallback< _finishActor3, 4, Void >;
															#line 1924 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	_finishActor3(Reference<ReadYourWritesTransaction> const& tr,Reference<TaskBucket> const& taskBucket,Reference<FutureBucket> const& futureBucket,Reference<Task> const& task) 
															#line 15057 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<Void>(),
		   _finishActor3State<_finishActor3>(tr, taskBucket, futureBucket, task)
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("_finish");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< _finishActor3, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< _finishActor3, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< _finishActor3, 2, Void >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< _finishActor3, 3, Void >*)0, actor_cancelled()); break;
		case 5: this->a_callback_error((ActorCallback< _finishActor3, 4, Void >*)0, actor_cancelled()); break;
		}

	}
};
															#line 1924 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<Void> _finish( Reference<ReadYourWritesTransaction> const& tr, Reference<TaskBucket> const& taskBucket, Reference<FutureBucket> const& futureBucket, Reference<Task> const& task ) {
															#line 1924 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<Void>(new _finishActor3(tr, taskBucket, futureBucket, task));
															#line 15088 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 1973 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
};
StringRef BackupSnapshotDispatchTask::name = LiteralStringRef("file_backup_dispatch_ranges_5.2");
REGISTER_TASKFUNC(BackupSnapshotDispatchTask);

struct BackupLogRangeTaskFunc : BackupTaskFuncBase {
	static StringRef name;
	static constexpr uint32_t version = 1;

	static struct {
		static TaskParam<bool> addBackupLogRangeTasks() { return LiteralStringRef(__FUNCTION__); }
		static TaskParam<int64_t> fileSize() { return LiteralStringRef(__FUNCTION__); }
		static TaskParam<Version> beginVersion() { return LiteralStringRef(__FUNCTION__); }
		static TaskParam<Version> endVersion() { return LiteralStringRef(__FUNCTION__); }
	} Params;

	StringRef getName() const override { return name; };

	Future<Void> execute(Database cx,
	                     Reference<TaskBucket> tb,
	                     Reference<FutureBucket> fb,
	                     Reference<Task> task) override {
		return _execute(cx, tb, fb, task);
	};
	Future<Void> finish(Reference<ReadYourWritesTransaction> tr,
	                    Reference<TaskBucket> tb,
	                    Reference<FutureBucket> fb,
	                    Reference<Task> task) override {
		return _finish(tr, tb, fb, task);
	};

																#line 15122 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via _execute()
															#line 2003 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class _executeActor2>
															#line 2003 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class _executeActor2State {
															#line 15128 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 2003 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	_executeActor2State(Database const& cx,Reference<TaskBucket> const& taskBucket,Reference<FutureBucket> const& futureBucket,Reference<Task> const& task) 
															#line 2003 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 2003 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : cx(cx),
															#line 2003 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   taskBucket(taskBucket),
															#line 2003 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   futureBucket(futureBucket),
															#line 2003 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   task(task),
															#line 2007 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   lock(new FlowLock(CLIENT_KNOBS->BACKUP_LOCK_BYTES))
															#line 15143 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("_execute", reinterpret_cast<unsigned long>(this));

	}
	~_executeActor2State() 
	{
		fdb_probe_actor_destroy("_execute", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 2009 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_0 = checkTaskVersion(cx, task, BackupLogRangeTaskFunc::name, BackupLogRangeTaskFunc::version);
															#line 2009 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_executeActor2*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 15160 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<_executeActor2*>(this)->actor_wait_state = 1;
															#line 2009 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< _executeActor2, 0, Void >*>(static_cast<_executeActor2*>(this)));
															#line 15165 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~_executeActor2State();
		static_cast<_executeActor2*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void const& _,int loopDepth) 
	{
															#line 2011 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		beginVersion = Params.beginVersion().get(task);
															#line 2012 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		endVersion = Params.endVersion().get(task);
															#line 2014 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		config = BackupConfig(task);
															#line 2015 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		bc = Reference<IBackupContainer>();
															#line 2017 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr = Reference<ReadYourWritesTransaction>(new ReadYourWritesTransaction(cx));
															#line 2018 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		;
															#line 15198 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont1loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1(Void && _,int loopDepth) 
	{
															#line 2011 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		beginVersion = Params.beginVersion().get(task);
															#line 2012 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		endVersion = Params.endVersion().get(task);
															#line 2014 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		config = BackupConfig(task);
															#line 2015 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		bc = Reference<IBackupContainer>();
															#line 2017 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr = Reference<ReadYourWritesTransaction>(new ReadYourWritesTransaction(cx));
															#line 2018 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		;
															#line 15217 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont1loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<_executeActor2*>(this)->actor_wait_state > 0) static_cast<_executeActor2*>(this)->actor_wait_state = 0;
		static_cast<_executeActor2*>(this)->ActorCallback< _executeActor2, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor2, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< _executeActor2, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< _executeActor2, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont2(int loopDepth) 
	{
															#line 2043 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Key> __when_expr_5 = config.destUidValue().getOrThrow(tr);
															#line 2043 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor2*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 15291 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_5.isReady()) { if (__when_expr_5.isError()) return a_body1Catch1(__when_expr_5.getError(), loopDepth); else return a_body1cont2when1(__when_expr_5.get(), loopDepth); };
		static_cast<_executeActor2*>(this)->actor_wait_state = 6;
															#line 2043 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_5.addCallbackAndClear(static_cast<ActorCallback< _executeActor2, 5, Key >*>(static_cast<_executeActor2*>(this)));
															#line 15296 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1cont1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1(int loopDepth) 
	{
															#line 2019 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 2020 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr->setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 15314 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		try {
															#line 2023 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_1 = taskBucket->keepRunning(tr, task);
															#line 2023 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_executeActor2*>(this)->actor_wait_state < 0) return a_body1cont1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 15320 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1cont1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1loopBody1when1(__when_expr_1.get(), loopDepth); };
			static_cast<_executeActor2*>(this)->actor_wait_state = 2;
															#line 2023 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< _executeActor2, 1, Void >*>(static_cast<_executeActor2*>(this)));
															#line 15325 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1cont1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1cont1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont1break1(int loopDepth) 
	{
		try {
			return a_body1cont2(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1cont1loopHead1(0);

		return loopDepth;
	}
	int a_body1cont1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 2039 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_4 = tr->onError(e);
															#line 2039 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_executeActor2*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 15362 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1Catch1(__when_expr_4.getError(), std::max(0, loopDepth - 1)); else return a_body1cont1loopBody1Catch1when1(__when_expr_4.get(), loopDepth); };
			static_cast<_executeActor2*>(this)->actor_wait_state = 5;
															#line 2039 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< _executeActor2, 4, Void >*>(static_cast<_executeActor2*>(this)));
															#line 15367 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1cont1loopBody1cont2(Void const& _,int loopDepth) 
	{
															#line 2025 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!bc)
															#line 15382 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 2027 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Reference<IBackupContainer>> __when_expr_2 = config.backupContainer().getOrThrow(tr);
															#line 2027 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_executeActor2*>(this)->actor_wait_state < 0) return a_body1cont1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 15388 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1cont1loopBody1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont1loopBody1cont2when1(__when_expr_2.get(), loopDepth); };
			static_cast<_executeActor2*>(this)->actor_wait_state = 3;
															#line 2027 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< _executeActor2, 2, Reference<IBackupContainer> >*>(static_cast<_executeActor2*>(this)));
															#line 15393 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1cont1loopBody1cont3(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont1loopBody1cont2(Void && _,int loopDepth) 
	{
															#line 2025 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!bc)
															#line 15407 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 2027 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Reference<IBackupContainer>> __when_expr_2 = config.backupContainer().getOrThrow(tr);
															#line 2027 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_executeActor2*>(this)->actor_wait_state < 0) return a_body1cont1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 15413 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1cont1loopBody1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont1loopBody1cont2when1(__when_expr_2.get(), loopDepth); };
			static_cast<_executeActor2*>(this)->actor_wait_state = 3;
															#line 2027 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< _executeActor2, 2, Reference<IBackupContainer> >*>(static_cast<_executeActor2*>(this)));
															#line 15418 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1cont1loopBody1cont3(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont1loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<_executeActor2*>(this)->actor_wait_state > 0) static_cast<_executeActor2*>(this)->actor_wait_state = 0;
		static_cast<_executeActor2*>(this)->ActorCallback< _executeActor2, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor2, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< _executeActor2, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< _executeActor2, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont1loopBody1cont3(int loopDepth) 
	{
															#line 2031 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		Version currentVersion = tr->getReadVersion().get();
															#line 2032 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (endVersion < currentVersion)
															#line 15497 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
			return a_body1cont1break1(loopDepth==0?0:loopDepth-1); // break
		}
															#line 2035 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_3 = delay(std::max(CLIENT_KNOBS->BACKUP_RANGE_MINWAIT, (double)(endVersion - currentVersion) / CLIENT_KNOBS->CORE_VERSIONSPERSECOND));
															#line 2035 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor2*>(this)->actor_wait_state < 0) return a_body1cont1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 15505 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1cont1loopBody1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1cont1loopBody1cont3when1(__when_expr_3.get(), loopDepth); };
		static_cast<_executeActor2*>(this)->actor_wait_state = 4;
															#line 2035 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< _executeActor2, 3, Void >*>(static_cast<_executeActor2*>(this)));
															#line 15510 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1loopBody1cont4(Reference<IBackupContainer> const& _bc,int loopDepth) 
	{
															#line 2028 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		bc = getBackupContainerWithProxy(_bc);
															#line 15519 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont1loopBody1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont4(Reference<IBackupContainer> && _bc,int loopDepth) 
	{
															#line 2028 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		bc = getBackupContainerWithProxy(_bc);
															#line 15528 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont1loopBody1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont2when1(Reference<IBackupContainer> const& _bc,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont4(_bc, loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont2when1(Reference<IBackupContainer> && _bc,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont4(std::move(_bc), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<_executeActor2*>(this)->actor_wait_state > 0) static_cast<_executeActor2*>(this)->actor_wait_state = 0;
		static_cast<_executeActor2*>(this)->ActorCallback< _executeActor2, 2, Reference<IBackupContainer> >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor2, 2, Reference<IBackupContainer> >*,Reference<IBackupContainer> const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont1loopBody1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< _executeActor2, 2, Reference<IBackupContainer> >*,Reference<IBackupContainer> && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont1loopBody1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< _executeActor2, 2, Reference<IBackupContainer> >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1cont1loopBody1cont6(Void const& _,int loopDepth) 
	{
															#line 2037 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr->reset();
															#line 15600 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont1loopBody1cont9(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont6(Void && _,int loopDepth) 
	{
															#line 2037 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr->reset();
															#line 15609 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont1loopBody1cont9(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont3when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont6(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont3when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont6(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<_executeActor2*>(this)->actor_wait_state > 0) static_cast<_executeActor2*>(this)->actor_wait_state = 0;
		static_cast<_executeActor2*>(this)->ActorCallback< _executeActor2, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor2, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont1loopBody1cont3when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< _executeActor2, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont1loopBody1cont3when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< _executeActor2, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 3);

	}
	int a_body1cont1loopBody1cont9(int loopDepth) 
	{
		try {
			loopDepth = a_body1cont1loopBody1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1cont1loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose5() 
	{
		if (static_cast<_executeActor2*>(this)->actor_wait_state > 0) static_cast<_executeActor2*>(this)->actor_wait_state = 0;
		static_cast<_executeActor2*>(this)->ActorCallback< _executeActor2, 4, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor2, 4, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_fire(ActorCallback< _executeActor2, 4, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_error(ActorCallback< _executeActor2, 4, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 4);

	}
	int a_body1cont3(Key const& destUidValue,int loopDepth) 
	{
															#line 2050 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		ranges = getLogRanges(beginVersion, endVersion, destUidValue);
															#line 2051 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (ranges.size() > CLIENT_KNOBS->BACKUP_MAX_LOG_RANGES)
															#line 15771 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 2052 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			Params.addBackupLogRangeTasks().set(task, true);
															#line 2053 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (!static_cast<_executeActor2*>(this)->SAV<Void>::futures) { (void)(Void()); this->~_executeActor2State(); static_cast<_executeActor2*>(this)->destroy(); return 0; }
															#line 15777 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			new (&static_cast<_executeActor2*>(this)->SAV< Void >::value()) Void(Void());
			this->~_executeActor2State();
			static_cast<_executeActor2*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 2058 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		blockSize = BUGGIFY ? deterministicRandom()->randomInt(125e3, 4e6) : CLIENT_KNOBS->BACKUP_LOGFILE_BLOCK_SIZE;
															#line 2060 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Reference<IBackupFile>> __when_expr_6 = bc->writeLogFile(beginVersion, endVersion, blockSize);
															#line 2060 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor2*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 15789 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_6.isReady()) { if (__when_expr_6.isError()) return a_body1Catch1(__when_expr_6.getError(), loopDepth); else return a_body1cont3when1(__when_expr_6.get(), loopDepth); };
		static_cast<_executeActor2*>(this)->actor_wait_state = 7;
															#line 2060 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_6.addCallbackAndClear(static_cast<ActorCallback< _executeActor2, 6, Reference<IBackupFile> >*>(static_cast<_executeActor2*>(this)));
															#line 15794 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont3(Key && destUidValue,int loopDepth) 
	{
															#line 2050 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		ranges = getLogRanges(beginVersion, endVersion, destUidValue);
															#line 2051 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (ranges.size() > CLIENT_KNOBS->BACKUP_MAX_LOG_RANGES)
															#line 15805 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 2052 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			Params.addBackupLogRangeTasks().set(task, true);
															#line 2053 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (!static_cast<_executeActor2*>(this)->SAV<Void>::futures) { (void)(Void()); this->~_executeActor2State(); static_cast<_executeActor2*>(this)->destroy(); return 0; }
															#line 15811 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			new (&static_cast<_executeActor2*>(this)->SAV< Void >::value()) Void(Void());
			this->~_executeActor2State();
			static_cast<_executeActor2*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 2058 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		blockSize = BUGGIFY ? deterministicRandom()->randomInt(125e3, 4e6) : CLIENT_KNOBS->BACKUP_LOGFILE_BLOCK_SIZE;
															#line 2060 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Reference<IBackupFile>> __when_expr_6 = bc->writeLogFile(beginVersion, endVersion, blockSize);
															#line 2060 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor2*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 15823 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_6.isReady()) { if (__when_expr_6.isError()) return a_body1Catch1(__when_expr_6.getError(), loopDepth); else return a_body1cont3when1(__when_expr_6.get(), loopDepth); };
		static_cast<_executeActor2*>(this)->actor_wait_state = 7;
															#line 2060 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_6.addCallbackAndClear(static_cast<ActorCallback< _executeActor2, 6, Reference<IBackupFile> >*>(static_cast<_executeActor2*>(this)));
															#line 15828 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont2when1(Key const& destUidValue,int loopDepth) 
	{
		loopDepth = a_body1cont3(destUidValue, loopDepth);

		return loopDepth;
	}
	int a_body1cont2when1(Key && destUidValue,int loopDepth) 
	{
		loopDepth = a_body1cont3(std::move(destUidValue), loopDepth);

		return loopDepth;
	}
	void a_exitChoose6() 
	{
		if (static_cast<_executeActor2*>(this)->actor_wait_state > 0) static_cast<_executeActor2*>(this)->actor_wait_state = 0;
		static_cast<_executeActor2*>(this)->ActorCallback< _executeActor2, 5, Key >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor2, 5, Key >*,Key const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_fire(ActorCallback< _executeActor2, 5, Key >*,Key && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_error(ActorCallback< _executeActor2, 5, Key >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 5);

	}
	int a_body1cont4(int loopDepth) 
	{
															#line 2061 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		logFile = LogFileWriter(outFile, blockSize);
															#line 2066 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		results = PromiseStream<RangeResultWithVersion>();
															#line 2067 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		rc = std::vector<Future<Void>>();
															#line 2069 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		for( auto& range : ranges ) {
															#line 2070 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			rc.push_back( readCommitted(cx, results, lock, range, Terminator::False, AccessSystemKeys::True, LockAware::True));
															#line 15908 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 2074 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		sendEOS = map(errorOr(waitForAll(rc)), [=](ErrorOr<Void> const& result) { if (result.isError()) results.sendError(result.getError()); else results.sendError(end_of_stream()); return Void(); });
															#line 2082 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		lastVersion = Version();
															#line 15914 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		try {
															#line 2084 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			;
															#line 15918 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = a_body1cont4loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1cont4Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1cont4Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont3when1(Reference<IBackupFile> const& __outFile,int loopDepth) 
	{
															#line 2060 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		outFile = __outFile;
															#line 15933 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont4(loopDepth);

		return loopDepth;
	}
	int a_body1cont3when1(Reference<IBackupFile> && __outFile,int loopDepth) 
	{
		outFile = std::move(__outFile);
		loopDepth = a_body1cont4(loopDepth);

		return loopDepth;
	}
	void a_exitChoose7() 
	{
		if (static_cast<_executeActor2*>(this)->actor_wait_state > 0) static_cast<_executeActor2*>(this)->actor_wait_state = 0;
		static_cast<_executeActor2*>(this)->ActorCallback< _executeActor2, 6, Reference<IBackupFile> >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor2, 6, Reference<IBackupFile> >*,Reference<IBackupFile> const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1cont3when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 6);

	}
	void a_callback_fire(ActorCallback< _executeActor2, 6, Reference<IBackupFile> >*,Reference<IBackupFile> && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1cont3when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 6);

	}
	void a_callback_error(ActorCallback< _executeActor2, 6, Reference<IBackupFile> >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 6);

	}
	int a_body1cont6(int loopDepth) 
	{
															#line 2107 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_10 = taskBucket->keepRunning(cx, task);
															#line 2107 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor2*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 16002 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_10.isReady()) { if (__when_expr_10.isError()) return a_body1Catch1(__when_expr_10.getError(), loopDepth); else return a_body1cont6when1(__when_expr_10.get(), loopDepth); };
		static_cast<_executeActor2*>(this)->actor_wait_state = 11;
															#line 2107 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_10.addCallbackAndClear(static_cast<ActorCallback< _executeActor2, 10, Void >*>(static_cast<_executeActor2*>(this)));
															#line 16007 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont4Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 2096 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (e.code() == error_code_actor_cancelled)
															#line 16017 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			{
															#line 2097 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				return a_body1Catch1(e, loopDepth);
															#line 16021 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			}
															#line 2099 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (e.code() != error_code_end_of_stream)
															#line 16025 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			{
															#line 2100 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				err = e;
															#line 2101 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				StrictFuture<Void> __when_expr_9 = config.logError(cx, err, format("Failed to write to file `%s'", outFile->getFileName().c_str()));
															#line 2101 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				if (static_cast<_executeActor2*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 16033 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				if (__when_expr_9.isReady()) { if (__when_expr_9.isError()) return a_body1Catch1(__when_expr_9.getError(), loopDepth); else return a_body1cont4Catch1when1(__when_expr_9.get(), loopDepth); };
				static_cast<_executeActor2*>(this)->actor_wait_state = 10;
															#line 2101 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				__when_expr_9.addCallbackAndClear(static_cast<ActorCallback< _executeActor2, 9, Void >*>(static_cast<_executeActor2*>(this)));
															#line 16038 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				loopDepth = 0;
			}
			else
			{
				loopDepth = a_body1cont4Catch1cont1(loopDepth);
			}
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont4loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1cont4loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1cont4loopBody1(int loopDepth) 
	{
															#line 2085 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		FutureStream<RangeResultWithVersion> __when_expr_7 = results.getFuture();
															#line 2085 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor2*>(this)->actor_wait_state < 0) return a_body1cont4Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 16067 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_7.isReady()) { if (__when_expr_7.isError()) return a_body1cont4Catch1(__when_expr_7.getError(), std::max(0, loopDepth - 1)); else return a_body1cont4loopBody1when1(__when_expr_7.pop(), loopDepth); };
		static_cast<_executeActor2*>(this)->actor_wait_state = 8;
															#line 2085 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_7.addCallbackAndClear(static_cast<ActorSingleCallback< _executeActor2, 7, RangeResultWithVersion >*>(static_cast<_executeActor2*>(this)));
															#line 16072 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont4loopBody1cont1(int loopDepth) 
	{
															#line 2086 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		lock->release(r.first.expectedSize());
															#line 2088 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		i = 0;
															#line 2089 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		;
															#line 16085 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont4loopBody1cont1loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1cont4loopBody1when1(RangeResultWithVersion const& __r,int loopDepth) 
	{
															#line 2085 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		r = __r;
															#line 16094 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont4loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont4loopBody1when1(RangeResultWithVersion && __r,int loopDepth) 
	{
		r = std::move(__r);
		loopDepth = a_body1cont4loopBody1cont1(loopDepth);

		return loopDepth;
	}
	void a_exitChoose8() 
	{
		if (static_cast<_executeActor2*>(this)->actor_wait_state > 0) static_cast<_executeActor2*>(this)->actor_wait_state = 0;
		static_cast<_executeActor2*>(this)->ActorSingleCallback< _executeActor2, 7, RangeResultWithVersion >::remove();

	}
	void a_callback_fire(ActorSingleCallback< _executeActor2, 7, RangeResultWithVersion >*,RangeResultWithVersion const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 7);
		a_exitChoose8();
		try {
			a_body1cont4loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont4Catch1(error, 0);
		} catch (...) {
			a_body1cont4Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 7);

	}
	void a_callback_fire(ActorSingleCallback< _executeActor2, 7, RangeResultWithVersion >*,RangeResultWithVersion && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 7);
		a_exitChoose8();
		try {
			a_body1cont4loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont4Catch1(error, 0);
		} catch (...) {
			a_body1cont4Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 7);

	}
	void a_callback_error(ActorSingleCallback< _executeActor2, 7, RangeResultWithVersion >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 7);
		a_exitChoose8();
		try {
			a_body1cont4Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont4Catch1(error, 0);
		} catch (...) {
			a_body1cont4Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 7);

	}
	int a_body1cont4loopBody1cont2(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1cont4loopHead1(0);

		return loopDepth;
	}
	int a_body1cont4loopBody1cont1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1cont4loopBody1cont1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1cont4loopBody1cont1loopBody1(int loopDepth) 
	{
															#line 2089 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!(i < r.first.size()))
															#line 16174 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
			return a_body1cont4loopBody1cont1break1(loopDepth==0?0:loopDepth-1); // break
		}
															#line 2091 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_8 = logFile.writeKV(r.first[i].key.substr(backupLogPrefixBytes + 16), r.first[i].value);
															#line 2091 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor2*>(this)->actor_wait_state < 0) return a_body1cont4Catch1(actor_cancelled(), std::max(0, loopDepth - 2));
															#line 16182 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_8.isReady()) { if (__when_expr_8.isError()) return a_body1cont4Catch1(__when_expr_8.getError(), std::max(0, loopDepth - 2)); else return a_body1cont4loopBody1cont1loopBody1when1(__when_expr_8.get(), loopDepth); };
		static_cast<_executeActor2*>(this)->actor_wait_state = 9;
															#line 2091 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_8.addCallbackAndClear(static_cast<ActorCallback< _executeActor2, 8, Void >*>(static_cast<_executeActor2*>(this)));
															#line 16187 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont4loopBody1cont1break1(int loopDepth) 
	{
		try {
			return a_body1cont4loopBody1cont2(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1cont4Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1cont4Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1cont4loopBody1cont1loopBody1cont1(Void const& _,int loopDepth) 
	{
															#line 2092 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		lastVersion = r.second;
															#line 2089 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		++i;
															#line 16211 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (loopDepth == 0) return a_body1cont4loopBody1cont1loopHead1(0);

		return loopDepth;
	}
	int a_body1cont4loopBody1cont1loopBody1cont1(Void && _,int loopDepth) 
	{
															#line 2092 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		lastVersion = r.second;
															#line 2089 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		++i;
															#line 16222 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (loopDepth == 0) return a_body1cont4loopBody1cont1loopHead1(0);

		return loopDepth;
	}
	int a_body1cont4loopBody1cont1loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont4loopBody1cont1loopBody1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont4loopBody1cont1loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont4loopBody1cont1loopBody1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose9() 
	{
		if (static_cast<_executeActor2*>(this)->actor_wait_state > 0) static_cast<_executeActor2*>(this)->actor_wait_state = 0;
		static_cast<_executeActor2*>(this)->ActorCallback< _executeActor2, 8, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor2, 8, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 8);
		a_exitChoose9();
		try {
			a_body1cont4loopBody1cont1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont4Catch1(error, 0);
		} catch (...) {
			a_body1cont4Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 8);

	}
	void a_callback_fire(ActorCallback< _executeActor2, 8, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 8);
		a_exitChoose9();
		try {
			a_body1cont4loopBody1cont1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont4Catch1(error, 0);
		} catch (...) {
			a_body1cont4Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 8);

	}
	void a_callback_error(ActorCallback< _executeActor2, 8, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 8);
		a_exitChoose9();
		try {
			a_body1cont4Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont4Catch1(error, 0);
		} catch (...) {
			a_body1cont4Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 8);

	}
	int a_body1cont4Catch1cont1(int loopDepth) 
	{
		loopDepth = a_body1cont6(loopDepth);

		return loopDepth;
	}
	int a_body1cont4Catch1cont3(Void const& _,int loopDepth) 
	{
															#line 2102 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		return a_body1Catch1(err, loopDepth);
															#line 16300 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"

		return loopDepth;
	}
	int a_body1cont4Catch1cont3(Void && _,int loopDepth) 
	{
															#line 2102 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		return a_body1Catch1(err, loopDepth);
															#line 16308 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"

		return loopDepth;
	}
	int a_body1cont4Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont4Catch1cont3(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont4Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont4Catch1cont3(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose10() 
	{
		if (static_cast<_executeActor2*>(this)->actor_wait_state > 0) static_cast<_executeActor2*>(this)->actor_wait_state = 0;
		static_cast<_executeActor2*>(this)->ActorCallback< _executeActor2, 9, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor2, 9, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 9);
		a_exitChoose10();
		try {
			a_body1cont4Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 9);

	}
	void a_callback_fire(ActorCallback< _executeActor2, 9, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 9);
		a_exitChoose10();
		try {
			a_body1cont4Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 9);

	}
	void a_callback_error(ActorCallback< _executeActor2, 9, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 9);
		a_exitChoose10();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 9);

	}
	int a_body1cont9(Void const& _,int loopDepth) 
	{
															#line 2109 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_11 = outFile->finish();
															#line 2109 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor2*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 16381 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_11.isReady()) { if (__when_expr_11.isError()) return a_body1Catch1(__when_expr_11.getError(), loopDepth); else return a_body1cont9when1(__when_expr_11.get(), loopDepth); };
		static_cast<_executeActor2*>(this)->actor_wait_state = 12;
															#line 2109 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_11.addCallbackAndClear(static_cast<ActorCallback< _executeActor2, 11, Void >*>(static_cast<_executeActor2*>(this)));
															#line 16386 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont9(Void && _,int loopDepth) 
	{
															#line 2109 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_11 = outFile->finish();
															#line 2109 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor2*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 16397 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_11.isReady()) { if (__when_expr_11.isError()) return a_body1Catch1(__when_expr_11.getError(), loopDepth); else return a_body1cont9when1(__when_expr_11.get(), loopDepth); };
		static_cast<_executeActor2*>(this)->actor_wait_state = 12;
															#line 2109 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_11.addCallbackAndClear(static_cast<ActorCallback< _executeActor2, 11, Void >*>(static_cast<_executeActor2*>(this)));
															#line 16402 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont6when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont9(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont6when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont9(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose11() 
	{
		if (static_cast<_executeActor2*>(this)->actor_wait_state > 0) static_cast<_executeActor2*>(this)->actor_wait_state = 0;
		static_cast<_executeActor2*>(this)->ActorCallback< _executeActor2, 10, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor2, 10, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 10);
		a_exitChoose11();
		try {
			a_body1cont6when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 10);

	}
	void a_callback_fire(ActorCallback< _executeActor2, 10, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 10);
		a_exitChoose11();
		try {
			a_body1cont6when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 10);

	}
	void a_callback_error(ActorCallback< _executeActor2, 10, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 10);
		a_exitChoose11();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 10);

	}
	int a_body1cont10(Void const& _,int loopDepth) 
	{
															#line 2111 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent("FileBackupWroteLogFile") .suppressFor(60) .detail("BackupUID", config.getUid()) .detail("Size", outFile->size()) .detail("BeginVersion", beginVersion) .detail("EndVersion", endVersion) .detail("LastReadVersion", lastVersion);
															#line 2119 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		Params.fileSize().set(task, outFile->size());
															#line 2121 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<_executeActor2*>(this)->SAV<Void>::futures) { (void)(Void()); this->~_executeActor2State(); static_cast<_executeActor2*>(this)->destroy(); return 0; }
															#line 16478 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<_executeActor2*>(this)->SAV< Void >::value()) Void(Void());
		this->~_executeActor2State();
		static_cast<_executeActor2*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont10(Void && _,int loopDepth) 
	{
															#line 2111 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent("FileBackupWroteLogFile") .suppressFor(60) .detail("BackupUID", config.getUid()) .detail("Size", outFile->size()) .detail("BeginVersion", beginVersion) .detail("EndVersion", endVersion) .detail("LastReadVersion", lastVersion);
															#line 2119 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		Params.fileSize().set(task, outFile->size());
															#line 2121 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<_executeActor2*>(this)->SAV<Void>::futures) { (void)(Void()); this->~_executeActor2State(); static_cast<_executeActor2*>(this)->destroy(); return 0; }
															#line 16494 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<_executeActor2*>(this)->SAV< Void >::value()) Void(Void());
		this->~_executeActor2State();
		static_cast<_executeActor2*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont9when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont10(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont9when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont10(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose12() 
	{
		if (static_cast<_executeActor2*>(this)->actor_wait_state > 0) static_cast<_executeActor2*>(this)->actor_wait_state = 0;
		static_cast<_executeActor2*>(this)->ActorCallback< _executeActor2, 11, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor2, 11, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 11);
		a_exitChoose12();
		try {
			a_body1cont9when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 11);

	}
	void a_callback_fire(ActorCallback< _executeActor2, 11, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 11);
		a_exitChoose12();
		try {
			a_body1cont9when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 11);

	}
	void a_callback_error(ActorCallback< _executeActor2, 11, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 11);
		a_exitChoose12();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 11);

	}
															#line 2003 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Database cx;
															#line 2003 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskBucket> taskBucket;
															#line 2003 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<FutureBucket> futureBucket;
															#line 2003 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<Task> task;
															#line 2007 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<FlowLock> lock;
															#line 2011 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Version beginVersion;
															#line 2012 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Version endVersion;
															#line 2014 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	BackupConfig config;
															#line 2015 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<IBackupContainer> bc;
															#line 2017 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 2050 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Standalone<VectorRef<KeyRangeRef>> ranges;
															#line 2058 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int blockSize;
															#line 2060 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<IBackupFile> outFile;
															#line 2061 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	LogFileWriter logFile;
															#line 2066 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	PromiseStream<RangeResultWithVersion> results;
															#line 2067 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	std::vector<Future<Void>> rc;
															#line 2074 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Future<Void> sendEOS;
															#line 2082 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Version lastVersion;
															#line 2085 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	RangeResultWithVersion r;
															#line 2088 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int i;
															#line 2100 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Error err;
															#line 16607 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via _execute()
															#line 2003 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class _executeActor2 final : public Actor<Void>, public ActorCallback< _executeActor2, 0, Void >, public ActorCallback< _executeActor2, 1, Void >, public ActorCallback< _executeActor2, 2, Reference<IBackupContainer> >, public ActorCallback< _executeActor2, 3, Void >, public ActorCallback< _executeActor2, 4, Void >, public ActorCallback< _executeActor2, 5, Key >, public ActorCallback< _executeActor2, 6, Reference<IBackupFile> >, public ActorSingleCallback< _executeActor2, 7, RangeResultWithVersion >, public ActorCallback< _executeActor2, 8, Void >, public ActorCallback< _executeActor2, 9, Void >, public ActorCallback< _executeActor2, 10, Void >, public ActorCallback< _executeActor2, 11, Void >, public FastAllocated<_executeActor2>, public _executeActor2State<_executeActor2> {
															#line 16612 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<_executeActor2>::operator new;
	using FastAllocated<_executeActor2>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< _executeActor2, 0, Void >;
friend struct ActorCallback< _executeActor2, 1, Void >;
friend struct ActorCallback< _executeActor2, 2, Reference<IBackupContainer> >;
friend struct ActorCallback< _executeActor2, 3, Void >;
friend struct ActorCallback< _executeActor2, 4, Void >;
friend struct ActorCallback< _executeActor2, 5, Key >;
friend struct ActorCallback< _executeActor2, 6, Reference<IBackupFile> >;
friend struct ActorSingleCallback< _executeActor2, 7, RangeResultWithVersion >;
friend struct ActorCallback< _executeActor2, 8, Void >;
friend struct ActorCallback< _executeActor2, 9, Void >;
friend struct ActorCallback< _executeActor2, 10, Void >;
friend struct ActorCallback< _executeActor2, 11, Void >;
															#line 2003 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	_executeActor2(Database const& cx,Reference<TaskBucket> const& taskBucket,Reference<FutureBucket> const& futureBucket,Reference<Task> const& task) 
															#line 16634 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<Void>(),
		   _executeActor2State<_executeActor2>(cx, taskBucket, futureBucket, task)
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("_execute");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< _executeActor2, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< _executeActor2, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< _executeActor2, 2, Reference<IBackupContainer> >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< _executeActor2, 3, Void >*)0, actor_cancelled()); break;
		case 5: this->a_callback_error((ActorCallback< _executeActor2, 4, Void >*)0, actor_cancelled()); break;
		case 6: this->a_callback_error((ActorCallback< _executeActor2, 5, Key >*)0, actor_cancelled()); break;
		case 7: this->a_callback_error((ActorCallback< _executeActor2, 6, Reference<IBackupFile> >*)0, actor_cancelled()); break;
		case 8: this->a_callback_error((ActorSingleCallback< _executeActor2, 7, RangeResultWithVersion >*)0, actor_cancelled()); break;
		case 9: this->a_callback_error((ActorCallback< _executeActor2, 8, Void >*)0, actor_cancelled()); break;
		case 10: this->a_callback_error((ActorCallback< _executeActor2, 9, Void >*)0, actor_cancelled()); break;
		case 11: this->a_callback_error((ActorCallback< _executeActor2, 10, Void >*)0, actor_cancelled()); break;
		case 12: this->a_callback_error((ActorCallback< _executeActor2, 11, Void >*)0, actor_cancelled()); break;
		}

	}
};
															#line 2003 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<Void> _execute( Database const& cx, Reference<TaskBucket> const& taskBucket, Reference<FutureBucket> const& futureBucket, Reference<Task> const& task ) {
															#line 2003 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<Void>(new _executeActor2(cx, taskBucket, futureBucket, task));
															#line 16672 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 2123 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

																#line 16677 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via addTask()
															#line 2124 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class AddTaskActor2>
															#line 2124 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class AddTaskActor2State {
															#line 16683 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 2124 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	AddTaskActor2State(Reference<ReadYourWritesTransaction> const& tr,Reference<TaskBucket> const& taskBucket,Reference<Task> const& parentTask,int const& priority,Version const& beginVersion,Version const& endVersion,TaskCompletionKey const& completionKey,Reference<TaskFuture> const& waitFor = Reference<TaskFuture>()) 
															#line 2124 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 2124 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : tr(tr),
															#line 2124 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   taskBucket(taskBucket),
															#line 2124 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   parentTask(parentTask),
															#line 2124 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   priority(priority),
															#line 2124 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   beginVersion(beginVersion),
															#line 2124 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   endVersion(endVersion),
															#line 2124 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   completionKey(completionKey),
															#line 2124 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   waitFor(waitFor)
															#line 16704 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("addTask", reinterpret_cast<unsigned long>(this));

	}
	~AddTaskActor2State() 
	{
		fdb_probe_actor_destroy("addTask", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 2132 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Key> __when_expr_0 = addBackupTask( BackupLogRangeTaskFunc::name, BackupLogRangeTaskFunc::version, tr, taskBucket, completionKey, BackupConfig(parentTask), waitFor, [=](Reference<Task> task) { Params.beginVersion().set(task, beginVersion); Params.endVersion().set(task, endVersion); Params.addBackupLogRangeTasks().set(task, false); }, priority);
															#line 2132 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<AddTaskActor2*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 16721 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<AddTaskActor2*>(this)->actor_wait_state = 1;
															#line 2132 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< AddTaskActor2, 0, Key >*>(static_cast<AddTaskActor2*>(this)));
															#line 16726 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~AddTaskActor2State();
		static_cast<AddTaskActor2*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Key const& key,int loopDepth) 
	{
															#line 2146 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<AddTaskActor2*>(this)->SAV<Key>::futures) { (void)(key); this->~AddTaskActor2State(); static_cast<AddTaskActor2*>(this)->destroy(); return 0; }
															#line 16749 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<AddTaskActor2*>(this)->SAV< Key >::value()) Key(key);
		this->~AddTaskActor2State();
		static_cast<AddTaskActor2*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1(Key && key,int loopDepth) 
	{
															#line 2146 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<AddTaskActor2*>(this)->SAV<Key>::futures) { (void)(key); this->~AddTaskActor2State(); static_cast<AddTaskActor2*>(this)->destroy(); return 0; }
															#line 16761 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<AddTaskActor2*>(this)->SAV< Key >::value()) Key(key);
		this->~AddTaskActor2State();
		static_cast<AddTaskActor2*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1when1(Key const& key,int loopDepth) 
	{
		loopDepth = a_body1cont1(key, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Key && key,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(key), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<AddTaskActor2*>(this)->actor_wait_state > 0) static_cast<AddTaskActor2*>(this)->actor_wait_state = 0;
		static_cast<AddTaskActor2*>(this)->ActorCallback< AddTaskActor2, 0, Key >::remove();

	}
	void a_callback_fire(ActorCallback< AddTaskActor2, 0, Key >*,Key const& value) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< AddTaskActor2, 0, Key >*,Key && value) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< AddTaskActor2, 0, Key >*,Error err) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 2124 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 2124 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskBucket> taskBucket;
															#line 2124 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<Task> parentTask;
															#line 2124 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int priority;
															#line 2124 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Version beginVersion;
															#line 2124 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Version endVersion;
															#line 2124 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	TaskCompletionKey completionKey;
															#line 2124 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskFuture> waitFor;
															#line 16848 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via addTask()
															#line 2124 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class AddTaskActor2 final : public Actor<Key>, public ActorCallback< AddTaskActor2, 0, Key >, public FastAllocated<AddTaskActor2>, public AddTaskActor2State<AddTaskActor2> {
															#line 16853 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<AddTaskActor2>::operator new;
	using FastAllocated<AddTaskActor2>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Key>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< AddTaskActor2, 0, Key >;
															#line 2124 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	AddTaskActor2(Reference<ReadYourWritesTransaction> const& tr,Reference<TaskBucket> const& taskBucket,Reference<Task> const& parentTask,int const& priority,Version const& beginVersion,Version const& endVersion,TaskCompletionKey const& completionKey,Reference<TaskFuture> const& waitFor = Reference<TaskFuture>()) 
															#line 16864 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<Key>(),
		   AddTaskActor2State<AddTaskActor2>(tr, taskBucket, parentTask, priority, beginVersion, endVersion, completionKey, waitFor)
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("addTask");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< AddTaskActor2, 0, Key >*)0, actor_cancelled()); break;
		}

	}
};
															#line 2124 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<Key> addTask( Reference<ReadYourWritesTransaction> const& tr, Reference<TaskBucket> const& taskBucket, Reference<Task> const& parentTask, int const& priority, Version const& beginVersion, Version const& endVersion, TaskCompletionKey const& completionKey, Reference<TaskFuture> const& waitFor = Reference<TaskFuture>() ) {
															#line 2124 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<Key>(new AddTaskActor2(tr, taskBucket, parentTask, priority, beginVersion, endVersion, completionKey, waitFor));
															#line 16891 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 2148 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

																#line 16896 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via startBackupLogRangeInternal()
															#line 2149 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class StartBackupLogRangeInternalActor>
															#line 2149 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class StartBackupLogRangeInternalActorState {
															#line 16902 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 2149 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	StartBackupLogRangeInternalActorState(Reference<ReadYourWritesTransaction> const& tr,Reference<TaskBucket> const& taskBucket,Reference<FutureBucket> const& futureBucket,Reference<Task> const& task,Reference<TaskFuture> const& taskFuture,Version const& beginVersion,Version const& endVersion) 
															#line 2149 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 2149 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : tr(tr),
															#line 2149 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   taskBucket(taskBucket),
															#line 2149 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   futureBucket(futureBucket),
															#line 2149 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   task(task),
															#line 2149 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   taskFuture(taskFuture),
															#line 2149 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   beginVersion(beginVersion),
															#line 2149 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   endVersion(endVersion)
															#line 16921 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("startBackupLogRangeInternal", reinterpret_cast<unsigned long>(this));

	}
	~StartBackupLogRangeInternalActorState() 
	{
		fdb_probe_actor_destroy("startBackupLogRangeInternal", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 2156 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 2157 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 2159 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			std::vector<Future<Key>> addTaskVector;
															#line 2160 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			int tasks = 0;
															#line 2161 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			for(int64_t vblock = beginVersion / CLIENT_KNOBS->LOG_RANGE_BLOCK_SIZE;vblock < (endVersion + CLIENT_KNOBS->LOG_RANGE_BLOCK_SIZE - 1) / CLIENT_KNOBS->LOG_RANGE_BLOCK_SIZE;vblock += CLIENT_KNOBS->BACKUP_MAX_LOG_RANGES) {
															#line 2164 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				Version bv = std::max(beginVersion, vblock * CLIENT_KNOBS->LOG_RANGE_BLOCK_SIZE);
															#line 2166 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				if (tasks >= CLIENT_KNOBS->BACKUP_SHARD_TASK_LIMIT)
															#line 16948 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				{
															#line 2167 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
					addTaskVector.push_back(addTask(tr, taskBucket, task, task->getPriority(), bv, endVersion, TaskCompletionKey::joinWith(taskFuture)));
															#line 16952 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
					break;
				}
															#line 2177 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				Version ev = std::min(endVersion, (vblock + CLIENT_KNOBS->BACKUP_MAX_LOG_RANGES) * CLIENT_KNOBS->LOG_RANGE_BLOCK_SIZE);
															#line 2179 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				addTaskVector.push_back( addTask(tr, taskBucket, task, task->getPriority(), bv, ev, TaskCompletionKey::joinWith(taskFuture)));
															#line 2181 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				tasks++;
															#line 16961 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			}
															#line 2184 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_0 = waitForAll(addTaskVector);
															#line 2184 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<StartBackupLogRangeInternalActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 16967 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<StartBackupLogRangeInternalActor*>(this)->actor_wait_state = 1;
															#line 2184 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< StartBackupLogRangeInternalActor, 0, Void >*>(static_cast<StartBackupLogRangeInternalActor*>(this)));
															#line 16972 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~StartBackupLogRangeInternalActorState();
		static_cast<StartBackupLogRangeInternalActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void const& _,int loopDepth) 
	{
															#line 2186 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<StartBackupLogRangeInternalActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~StartBackupLogRangeInternalActorState(); static_cast<StartBackupLogRangeInternalActor*>(this)->destroy(); return 0; }
															#line 16995 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<StartBackupLogRangeInternalActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~StartBackupLogRangeInternalActorState();
		static_cast<StartBackupLogRangeInternalActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1(Void && _,int loopDepth) 
	{
															#line 2186 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<StartBackupLogRangeInternalActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~StartBackupLogRangeInternalActorState(); static_cast<StartBackupLogRangeInternalActor*>(this)->destroy(); return 0; }
															#line 17007 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<StartBackupLogRangeInternalActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~StartBackupLogRangeInternalActorState();
		static_cast<StartBackupLogRangeInternalActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<StartBackupLogRangeInternalActor*>(this)->actor_wait_state > 0) static_cast<StartBackupLogRangeInternalActor*>(this)->actor_wait_state = 0;
		static_cast<StartBackupLogRangeInternalActor*>(this)->ActorCallback< StartBackupLogRangeInternalActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< StartBackupLogRangeInternalActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("startBackupLogRangeInternal", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("startBackupLogRangeInternal", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< StartBackupLogRangeInternalActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("startBackupLogRangeInternal", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("startBackupLogRangeInternal", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< StartBackupLogRangeInternalActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("startBackupLogRangeInternal", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("startBackupLogRangeInternal", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 2149 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 2149 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskBucket> taskBucket;
															#line 2149 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<FutureBucket> futureBucket;
															#line 2149 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<Task> task;
															#line 2149 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskFuture> taskFuture;
															#line 2149 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Version beginVersion;
															#line 2149 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Version endVersion;
															#line 17092 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via startBackupLogRangeInternal()
															#line 2149 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class StartBackupLogRangeInternalActor final : public Actor<Void>, public ActorCallback< StartBackupLogRangeInternalActor, 0, Void >, public FastAllocated<StartBackupLogRangeInternalActor>, public StartBackupLogRangeInternalActorState<StartBackupLogRangeInternalActor> {
															#line 17097 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<StartBackupLogRangeInternalActor>::operator new;
	using FastAllocated<StartBackupLogRangeInternalActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< StartBackupLogRangeInternalActor, 0, Void >;
															#line 2149 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	StartBackupLogRangeInternalActor(Reference<ReadYourWritesTransaction> const& tr,Reference<TaskBucket> const& taskBucket,Reference<FutureBucket> const& futureBucket,Reference<Task> const& task,Reference<TaskFuture> const& taskFuture,Version const& beginVersion,Version const& endVersion) 
															#line 17108 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<Void>(),
		   StartBackupLogRangeInternalActorState<StartBackupLogRangeInternalActor>(tr, taskBucket, futureBucket, task, taskFuture, beginVersion, endVersion)
	{
		fdb_probe_actor_enter("startBackupLogRangeInternal", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("startBackupLogRangeInternal");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("startBackupLogRangeInternal", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< StartBackupLogRangeInternalActor, 0, Void >*)0, actor_cancelled()); break;
		}

	}
};
															#line 2149 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<Void> startBackupLogRangeInternal( Reference<ReadYourWritesTransaction> const& tr, Reference<TaskBucket> const& taskBucket, Reference<FutureBucket> const& futureBucket, Reference<Task> const& task, Reference<TaskFuture> const& taskFuture, Version const& beginVersion, Version const& endVersion ) {
															#line 2149 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<Void>(new StartBackupLogRangeInternalActor(tr, taskBucket, futureBucket, task, taskFuture, beginVersion, endVersion));
															#line 17135 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 2188 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

																#line 17140 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via _finish()
															#line 2189 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class _finishActor4>
															#line 2189 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class _finishActor4State {
															#line 17146 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 2189 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	_finishActor4State(Reference<ReadYourWritesTransaction> const& tr,Reference<TaskBucket> const& taskBucket,Reference<FutureBucket> const& futureBucket,Reference<Task> const& task) 
															#line 2189 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 2189 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : tr(tr),
															#line 2189 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   taskBucket(taskBucket),
															#line 2189 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   futureBucket(futureBucket),
															#line 2189 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   task(task),
															#line 2193 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   beginVersion(Params.beginVersion().get(task)),
															#line 2194 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   endVersion(Params.endVersion().get(task)),
															#line 2195 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   taskFuture(futureBucket->unpack(task->params[Task::reservedTaskParamKeyDone])),
															#line 2196 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   config(task)
															#line 17167 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("_finish", reinterpret_cast<unsigned long>(this));

	}
	~_finishActor4State() 
	{
		fdb_probe_actor_destroy("_finish", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 2198 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (Params.fileSize().exists(task))
															#line 17182 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			{
															#line 2199 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				config.logBytesWritten().atomicOp(tr, Params.fileSize().get(task), MutationRef::AddValue);
															#line 17186 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			}
															#line 2202 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (Params.addBackupLogRangeTasks().get(task))
															#line 17190 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			{
															#line 2203 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				StrictFuture<Void> __when_expr_0 = startBackupLogRangeInternal(tr, taskBucket, futureBucket, task, taskFuture, beginVersion, endVersion);
															#line 2203 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				if (static_cast<_finishActor4*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 17196 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
				static_cast<_finishActor4*>(this)->actor_wait_state = 1;
															#line 2203 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< _finishActor4, 0, Void >*>(static_cast<_finishActor4*>(this)));
															#line 17201 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				loopDepth = 0;
			}
			else
			{
															#line 2205 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				StrictFuture<Void> __when_expr_1 = taskFuture->set(tr, taskBucket);
															#line 2205 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				if (static_cast<_finishActor4*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 17210 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1when2(__when_expr_1.get(), loopDepth); };
				static_cast<_finishActor4*>(this)->actor_wait_state = 2;
															#line 2205 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< _finishActor4, 1, Void >*>(static_cast<_finishActor4*>(this)));
															#line 17215 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				loopDepth = 0;
			}
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~_finishActor4State();
		static_cast<_finishActor4*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 2208 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_2 = taskBucket->finish(tr, task);
															#line 2208 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_finishActor4*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 17241 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont1when1(__when_expr_2.get(), loopDepth); };
		static_cast<_finishActor4*>(this)->actor_wait_state = 3;
															#line 2208 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< _finishActor4, 2, Void >*>(static_cast<_finishActor4*>(this)));
															#line 17246 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont3(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont3(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont3(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont3(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<_finishActor4*>(this)->actor_wait_state > 0) static_cast<_finishActor4*>(this)->actor_wait_state = 0;
		static_cast<_finishActor4*>(this)->ActorCallback< _finishActor4, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor4, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< _finishActor4, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< _finishActor4, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont4(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont4(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1when2(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont4(_, loopDepth);

		return loopDepth;
	}
	int a_body1when2(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont4(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<_finishActor4*>(this)->actor_wait_state > 0) static_cast<_finishActor4*>(this)->actor_wait_state = 0;
		static_cast<_finishActor4*>(this)->ActorCallback< _finishActor4, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor4, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1when2(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< _finishActor4, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1when2(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< _finishActor4, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont5(Void const& _,int loopDepth) 
	{
															#line 2209 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<_finishActor4*>(this)->SAV<Void>::futures) { (void)(Void()); this->~_finishActor4State(); static_cast<_finishActor4*>(this)->destroy(); return 0; }
															#line 17405 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<_finishActor4*>(this)->SAV< Void >::value()) Void(Void());
		this->~_finishActor4State();
		static_cast<_finishActor4*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont5(Void && _,int loopDepth) 
	{
															#line 2209 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<_finishActor4*>(this)->SAV<Void>::futures) { (void)(Void()); this->~_finishActor4State(); static_cast<_finishActor4*>(this)->destroy(); return 0; }
															#line 17417 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<_finishActor4*>(this)->SAV< Void >::value()) Void(Void());
		this->~_finishActor4State();
		static_cast<_finishActor4*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont5(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont5(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<_finishActor4*>(this)->actor_wait_state > 0) static_cast<_finishActor4*>(this)->actor_wait_state = 0;
		static_cast<_finishActor4*>(this)->ActorCallback< _finishActor4, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor4, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< _finishActor4, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< _finishActor4, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 2);

	}
															#line 2189 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 2189 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskBucket> taskBucket;
															#line 2189 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<FutureBucket> futureBucket;
															#line 2189 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<Task> task;
															#line 2193 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Version beginVersion;
															#line 2194 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Version endVersion;
															#line 2195 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskFuture> taskFuture;
															#line 2196 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	BackupConfig config;
															#line 17504 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via _finish()
															#line 2189 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class _finishActor4 final : public Actor<Void>, public ActorCallback< _finishActor4, 0, Void >, public ActorCallback< _finishActor4, 1, Void >, public ActorCallback< _finishActor4, 2, Void >, public FastAllocated<_finishActor4>, public _finishActor4State<_finishActor4> {
															#line 17509 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<_finishActor4>::operator new;
	using FastAllocated<_finishActor4>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< _finishActor4, 0, Void >;
friend struct ActorCallback< _finishActor4, 1, Void >;
friend struct ActorCallback< _finishActor4, 2, Void >;
															#line 2189 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	_finishActor4(Reference<ReadYourWritesTransaction> const& tr,Reference<TaskBucket> const& taskBucket,Reference<FutureBucket> const& futureBucket,Reference<Task> const& task) 
															#line 17522 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<Void>(),
		   _finishActor4State<_finishActor4>(tr, taskBucket, futureBucket, task)
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("_finish");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< _finishActor4, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< _finishActor4, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< _finishActor4, 2, Void >*)0, actor_cancelled()); break;
		}

	}
};
															#line 2189 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<Void> _finish( Reference<ReadYourWritesTransaction> const& tr, Reference<TaskBucket> const& taskBucket, Reference<FutureBucket> const& futureBucket, Reference<Task> const& task ) {
															#line 2189 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<Void>(new _finishActor4(tr, taskBucket, futureBucket, task));
															#line 17551 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 2211 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
};

StringRef BackupLogRangeTaskFunc::name = LiteralStringRef("file_backup_write_logs_5.2");
REGISTER_TASKFUNC(BackupLogRangeTaskFunc);

// This task stopped being used in 6.2, however the code remains here to handle upgrades.
struct EraseLogRangeTaskFunc : BackupTaskFuncBase {
	static StringRef name;
	static constexpr uint32_t version = 1;
	StringRef getName() const override { return name; };

	static struct {
		static TaskParam<Version> beginVersion() { return LiteralStringRef(__FUNCTION__); }
		static TaskParam<Version> endVersion() { return LiteralStringRef(__FUNCTION__); }
		static TaskParam<Key> destUidValue() { return LiteralStringRef(__FUNCTION__); }
	} Params;

																#line 17572 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via addTask()
															#line 2228 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class AddTaskActor3>
															#line 2228 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class AddTaskActor3State {
															#line 17578 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 2228 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	AddTaskActor3State(Reference<ReadYourWritesTransaction> const& tr,Reference<TaskBucket> const& taskBucket,UID const& logUid,TaskCompletionKey const& completionKey,Key const& destUidValue,Version const& endVersion = 0,Reference<TaskFuture> const& waitFor = Reference<TaskFuture>()) 
															#line 2228 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 2228 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : tr(tr),
															#line 2228 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   taskBucket(taskBucket),
															#line 2228 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   logUid(logUid),
															#line 2228 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   completionKey(completionKey),
															#line 2228 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   destUidValue(destUidValue),
															#line 2228 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   endVersion(endVersion),
															#line 2228 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   waitFor(waitFor)
															#line 17597 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("addTask", reinterpret_cast<unsigned long>(this));

	}
	~AddTaskActor3State() 
	{
		fdb_probe_actor_destroy("addTask", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 2235 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Key> __when_expr_0 = addBackupTask( EraseLogRangeTaskFunc::name, EraseLogRangeTaskFunc::version, tr, taskBucket, completionKey, BackupConfig(logUid), waitFor, [=](Reference<Task> task) { Params.beginVersion().set(task, 1); Params.endVersion().set(task, endVersion); Params.destUidValue().set(task, destUidValue); }, 0, SetValidation::False);
															#line 2235 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<AddTaskActor3*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 17614 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<AddTaskActor3*>(this)->actor_wait_state = 1;
															#line 2235 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< AddTaskActor3, 0, Key >*>(static_cast<AddTaskActor3*>(this)));
															#line 17619 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~AddTaskActor3State();
		static_cast<AddTaskActor3*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Key const& key,int loopDepth) 
	{
															#line 2251 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<AddTaskActor3*>(this)->SAV<Key>::futures) { (void)(key); this->~AddTaskActor3State(); static_cast<AddTaskActor3*>(this)->destroy(); return 0; }
															#line 17642 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<AddTaskActor3*>(this)->SAV< Key >::value()) Key(key);
		this->~AddTaskActor3State();
		static_cast<AddTaskActor3*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1(Key && key,int loopDepth) 
	{
															#line 2251 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<AddTaskActor3*>(this)->SAV<Key>::futures) { (void)(key); this->~AddTaskActor3State(); static_cast<AddTaskActor3*>(this)->destroy(); return 0; }
															#line 17654 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<AddTaskActor3*>(this)->SAV< Key >::value()) Key(key);
		this->~AddTaskActor3State();
		static_cast<AddTaskActor3*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1when1(Key const& key,int loopDepth) 
	{
		loopDepth = a_body1cont1(key, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Key && key,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(key), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<AddTaskActor3*>(this)->actor_wait_state > 0) static_cast<AddTaskActor3*>(this)->actor_wait_state = 0;
		static_cast<AddTaskActor3*>(this)->ActorCallback< AddTaskActor3, 0, Key >::remove();

	}
	void a_callback_fire(ActorCallback< AddTaskActor3, 0, Key >*,Key const& value) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< AddTaskActor3, 0, Key >*,Key && value) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< AddTaskActor3, 0, Key >*,Error err) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 2228 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 2228 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskBucket> taskBucket;
															#line 2228 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	UID logUid;
															#line 2228 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	TaskCompletionKey completionKey;
															#line 2228 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Key destUidValue;
															#line 2228 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Version endVersion;
															#line 2228 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskFuture> waitFor;
															#line 17739 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via addTask()
															#line 2228 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class AddTaskActor3 final : public Actor<Key>, public ActorCallback< AddTaskActor3, 0, Key >, public FastAllocated<AddTaskActor3>, public AddTaskActor3State<AddTaskActor3> {
															#line 17744 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<AddTaskActor3>::operator new;
	using FastAllocated<AddTaskActor3>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Key>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< AddTaskActor3, 0, Key >;
															#line 2228 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	AddTaskActor3(Reference<ReadYourWritesTransaction> const& tr,Reference<TaskBucket> const& taskBucket,UID const& logUid,TaskCompletionKey const& completionKey,Key const& destUidValue,Version const& endVersion = 0,Reference<TaskFuture> const& waitFor = Reference<TaskFuture>()) 
															#line 17755 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<Key>(),
		   AddTaskActor3State<AddTaskActor3>(tr, taskBucket, logUid, completionKey, destUidValue, endVersion, waitFor)
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("addTask");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< AddTaskActor3, 0, Key >*)0, actor_cancelled()); break;
		}

	}
};
															#line 2228 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<Key> addTask( Reference<ReadYourWritesTransaction> const& tr, Reference<TaskBucket> const& taskBucket, UID const& logUid, TaskCompletionKey const& completionKey, Key const& destUidValue, Version const& endVersion = 0, Reference<TaskFuture> const& waitFor = Reference<TaskFuture>() ) {
															#line 2228 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<Key>(new AddTaskActor3(tr, taskBucket, logUid, completionKey, destUidValue, endVersion, waitFor));
															#line 17782 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 2253 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

																#line 17787 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via _finish()
															#line 2254 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class _finishActor5>
															#line 2254 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class _finishActor5State {
															#line 17793 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 2254 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	_finishActor5State(Reference<ReadYourWritesTransaction> const& tr,Reference<TaskBucket> const& taskBucket,Reference<FutureBucket> const& futureBucket,Reference<Task> const& task) 
															#line 2254 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 2254 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : tr(tr),
															#line 2254 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   taskBucket(taskBucket),
															#line 2254 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   futureBucket(futureBucket),
															#line 2254 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   task(task),
															#line 2258 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   taskFuture(futureBucket->unpack(task->params[Task::reservedTaskParamKeyDone]))
															#line 17808 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("_finish", reinterpret_cast<unsigned long>(this));

	}
	~_finishActor5State() 
	{
		fdb_probe_actor_destroy("_finish", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 2260 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_0 = checkTaskVersion(tr->getDatabase(), task, EraseLogRangeTaskFunc::name, EraseLogRangeTaskFunc::version);
															#line 2260 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_finishActor5*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 17825 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<_finishActor5*>(this)->actor_wait_state = 1;
															#line 2260 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< _finishActor5, 0, Void >*>(static_cast<_finishActor5*>(this)));
															#line 17830 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~_finishActor5State();
		static_cast<_finishActor5*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void const& _,int loopDepth) 
	{
															#line 2262 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		endVersion = Params.endVersion().get(task);
															#line 2263 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		destUidValue = Params.destUidValue().get(task);
															#line 2265 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		config = BackupConfig(task);
															#line 2266 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		logUidValue = config.getUidAsKey();
															#line 2268 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_1 = taskFuture->set(tr, taskBucket) && taskBucket->finish(tr, task) && eraseLogData( tr, logUidValue, destUidValue, endVersion != 0 ? Optional<Version>(endVersion) : Optional<Version>());
															#line 2268 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_finishActor5*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 17863 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<_finishActor5*>(this)->actor_wait_state = 2;
															#line 2268 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< _finishActor5, 1, Void >*>(static_cast<_finishActor5*>(this)));
															#line 17868 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void && _,int loopDepth) 
	{
															#line 2262 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		endVersion = Params.endVersion().get(task);
															#line 2263 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		destUidValue = Params.destUidValue().get(task);
															#line 2265 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		config = BackupConfig(task);
															#line 2266 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		logUidValue = config.getUidAsKey();
															#line 2268 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_1 = taskFuture->set(tr, taskBucket) && taskBucket->finish(tr, task) && eraseLogData( tr, logUidValue, destUidValue, endVersion != 0 ? Optional<Version>(endVersion) : Optional<Version>());
															#line 2268 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_finishActor5*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 17887 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<_finishActor5*>(this)->actor_wait_state = 2;
															#line 2268 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< _finishActor5, 1, Void >*>(static_cast<_finishActor5*>(this)));
															#line 17892 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<_finishActor5*>(this)->actor_wait_state > 0) static_cast<_finishActor5*>(this)->actor_wait_state = 0;
		static_cast<_finishActor5*>(this)->ActorCallback< _finishActor5, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor5, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< _finishActor5, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< _finishActor5, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont2(Void const& _,int loopDepth) 
	{
															#line 2272 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<_finishActor5*>(this)->SAV<Void>::futures) { (void)(Void()); this->~_finishActor5State(); static_cast<_finishActor5*>(this)->destroy(); return 0; }
															#line 17964 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<_finishActor5*>(this)->SAV< Void >::value()) Void(Void());
		this->~_finishActor5State();
		static_cast<_finishActor5*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont2(Void && _,int loopDepth) 
	{
															#line 2272 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<_finishActor5*>(this)->SAV<Void>::futures) { (void)(Void()); this->~_finishActor5State(); static_cast<_finishActor5*>(this)->destroy(); return 0; }
															#line 17976 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<_finishActor5*>(this)->SAV< Void >::value()) Void(Void());
		this->~_finishActor5State();
		static_cast<_finishActor5*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<_finishActor5*>(this)->actor_wait_state > 0) static_cast<_finishActor5*>(this)->actor_wait_state = 0;
		static_cast<_finishActor5*>(this)->ActorCallback< _finishActor5, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor5, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< _finishActor5, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< _finishActor5, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 1);

	}
															#line 2254 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 2254 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskBucket> taskBucket;
															#line 2254 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<FutureBucket> futureBucket;
															#line 2254 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<Task> task;
															#line 2258 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskFuture> taskFuture;
															#line 2262 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Version endVersion;
															#line 2263 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Key destUidValue;
															#line 2265 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	BackupConfig config;
															#line 2266 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Key logUidValue;
															#line 18065 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via _finish()
															#line 2254 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class _finishActor5 final : public Actor<Void>, public ActorCallback< _finishActor5, 0, Void >, public ActorCallback< _finishActor5, 1, Void >, public FastAllocated<_finishActor5>, public _finishActor5State<_finishActor5> {
															#line 18070 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<_finishActor5>::operator new;
	using FastAllocated<_finishActor5>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< _finishActor5, 0, Void >;
friend struct ActorCallback< _finishActor5, 1, Void >;
															#line 2254 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	_finishActor5(Reference<ReadYourWritesTransaction> const& tr,Reference<TaskBucket> const& taskBucket,Reference<FutureBucket> const& futureBucket,Reference<Task> const& task) 
															#line 18082 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<Void>(),
		   _finishActor5State<_finishActor5>(tr, taskBucket, futureBucket, task)
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("_finish");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< _finishActor5, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< _finishActor5, 1, Void >*)0, actor_cancelled()); break;
		}

	}
};
															#line 2254 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<Void> _finish( Reference<ReadYourWritesTransaction> const& tr, Reference<TaskBucket> const& taskBucket, Reference<FutureBucket> const& futureBucket, Reference<Task> const& task ) {
															#line 2254 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<Void>(new _finishActor5(tr, taskBucket, futureBucket, task));
															#line 18110 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 2274 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

	Future<Void> execute(Database cx,
	                     Reference<TaskBucket> tb,
	                     Reference<FutureBucket> fb,
	                     Reference<Task> task) override {
		return Void();
	};
	Future<Void> finish(Reference<ReadYourWritesTransaction> tr,
	                    Reference<TaskBucket> tb,
	                    Reference<FutureBucket> fb,
	                    Reference<Task> task) override {
		return _finish(tr, tb, fb, task);
	};
};
StringRef EraseLogRangeTaskFunc::name = LiteralStringRef("file_backup_erase_logs_5.2");
REGISTER_TASKFUNC(EraseLogRangeTaskFunc);

struct BackupLogsDispatchTask : BackupTaskFuncBase {
	static StringRef name;
	static constexpr uint32_t version = 1;

	static struct {
		static TaskParam<Version> prevBeginVersion() { return LiteralStringRef(__FUNCTION__); }
		static TaskParam<Version> beginVersion() { return LiteralStringRef(__FUNCTION__); }
	} Params;

																#line 18140 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via _finish()
															#line 2300 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class _finishActor6>
															#line 2300 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class _finishActor6State {
															#line 18146 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 2300 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	_finishActor6State(Reference<ReadYourWritesTransaction> const& tr,Reference<TaskBucket> const& taskBucket,Reference<FutureBucket> const& futureBucket,Reference<Task> const& task) 
															#line 2300 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 2300 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : tr(tr),
															#line 2300 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   taskBucket(taskBucket),
															#line 2300 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   futureBucket(futureBucket),
															#line 2300 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   task(task)
															#line 18159 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("_finish", reinterpret_cast<unsigned long>(this));

	}
	~_finishActor6State() 
	{
		fdb_probe_actor_destroy("_finish", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 2304 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_0 = checkTaskVersion(tr->getDatabase(), task, BackupLogsDispatchTask::name, BackupLogsDispatchTask::version);
															#line 2304 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_finishActor6*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 18176 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<_finishActor6*>(this)->actor_wait_state = 1;
															#line 2304 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< _finishActor6, 0, Void >*>(static_cast<_finishActor6*>(this)));
															#line 18181 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~_finishActor6State();
		static_cast<_finishActor6*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void const& _,int loopDepth) 
	{
															#line 2306 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 2307 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr->setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 2308 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (CLIENT_KNOBS->BACKUP_AGENT_VERBOSE_LOGGING)
															#line 18208 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 2309 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->debugTransaction(deterministicRandom()->randomUniqueID());
															#line 18212 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 2312 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		onDone = task->getDoneFuture(futureBucket);
															#line 2313 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		prevBeginVersion = Params.prevBeginVersion().get(task);
															#line 2314 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		beginVersion = Params.beginVersion().get(task);
															#line 2315 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		config = BackupConfig(task);
															#line 2316 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		config.latestLogEndVersion().set(tr, beginVersion);
															#line 2318 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		stopWhenDone = bool();
															#line 2319 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		restorableVersion = Optional<Version>();
															#line 2320 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		backupState = EBackupState();
															#line 2321 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tag = Optional<std::string>();
															#line 2322 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		latestSnapshotEndVersion = Optional<Version>();
															#line 2323 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		partitionedLog = Optional<bool>();
															#line 2325 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_1 = store(stopWhenDone, config.stopWhenDone().getOrThrow(tr)) && store(restorableVersion, config.getLatestRestorableVersion(tr)) && store(backupState, config.stateEnum().getOrThrow(tr)) && store(tag, config.tag().get(tr)) && store(latestSnapshotEndVersion, config.latestSnapshotEndVersion().get(tr)) && store(partitionedLog, config.partitionedLogEnabled().get(tr));
															#line 2325 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_finishActor6*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 18240 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<_finishActor6*>(this)->actor_wait_state = 2;
															#line 2325 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< _finishActor6, 1, Void >*>(static_cast<_finishActor6*>(this)));
															#line 18245 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void && _,int loopDepth) 
	{
															#line 2306 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 2307 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr->setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 2308 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (CLIENT_KNOBS->BACKUP_AGENT_VERBOSE_LOGGING)
															#line 18258 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 2309 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->debugTransaction(deterministicRandom()->randomUniqueID());
															#line 18262 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 2312 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		onDone = task->getDoneFuture(futureBucket);
															#line 2313 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		prevBeginVersion = Params.prevBeginVersion().get(task);
															#line 2314 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		beginVersion = Params.beginVersion().get(task);
															#line 2315 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		config = BackupConfig(task);
															#line 2316 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		config.latestLogEndVersion().set(tr, beginVersion);
															#line 2318 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		stopWhenDone = bool();
															#line 2319 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		restorableVersion = Optional<Version>();
															#line 2320 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		backupState = EBackupState();
															#line 2321 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tag = Optional<std::string>();
															#line 2322 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		latestSnapshotEndVersion = Optional<Version>();
															#line 2323 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		partitionedLog = Optional<bool>();
															#line 2325 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_1 = store(stopWhenDone, config.stopWhenDone().getOrThrow(tr)) && store(restorableVersion, config.getLatestRestorableVersion(tr)) && store(backupState, config.stateEnum().getOrThrow(tr)) && store(tag, config.tag().get(tr)) && store(latestSnapshotEndVersion, config.latestSnapshotEndVersion().get(tr)) && store(partitionedLog, config.partitionedLogEnabled().get(tr));
															#line 2325 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_finishActor6*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 18290 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<_finishActor6*>(this)->actor_wait_state = 2;
															#line 2325 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< _finishActor6, 1, Void >*>(static_cast<_finishActor6*>(this)));
															#line 18295 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<_finishActor6*>(this)->actor_wait_state > 0) static_cast<_finishActor6*>(this)->actor_wait_state = 0;
		static_cast<_finishActor6*>(this)->ActorCallback< _finishActor6, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor6, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< _finishActor6, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< _finishActor6, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont2(Void const& _,int loopDepth) 
	{
															#line 2332 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (restorableVersion.present() && tag.present())
															#line 18367 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 2333 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			FileBackupAgent().setLastRestorable(tr, StringRef(tag.get()), restorableVersion.get());
															#line 18371 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 2337 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (restorableVersion.present() && backupState != EBackupState::STATE_RUNNING_DIFFERENTIAL)
															#line 18375 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 2338 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			config.stateEnum().set(tr, EBackupState::STATE_RUNNING_DIFFERENTIAL);
															#line 18379 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 2342 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (stopWhenDone && restorableVersion.present())
															#line 18383 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 2343 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_2 = onDone->set(tr, taskBucket) && taskBucket->finish(tr, task);
															#line 2343 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_finishActor6*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 18389 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont2when1(__when_expr_2.get(), loopDepth); };
			static_cast<_finishActor6*>(this)->actor_wait_state = 3;
															#line 2343 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< _finishActor6, 2, Void >*>(static_cast<_finishActor6*>(this)));
															#line 18394 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1cont4(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont2(Void && _,int loopDepth) 
	{
															#line 2332 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (restorableVersion.present() && tag.present())
															#line 18408 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 2333 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			FileBackupAgent().setLastRestorable(tr, StringRef(tag.get()), restorableVersion.get());
															#line 18412 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 2337 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (restorableVersion.present() && backupState != EBackupState::STATE_RUNNING_DIFFERENTIAL)
															#line 18416 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 2338 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			config.stateEnum().set(tr, EBackupState::STATE_RUNNING_DIFFERENTIAL);
															#line 18420 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 2342 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (stopWhenDone && restorableVersion.present())
															#line 18424 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 2343 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_2 = onDone->set(tr, taskBucket) && taskBucket->finish(tr, task);
															#line 2343 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_finishActor6*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 18430 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont2when1(__when_expr_2.get(), loopDepth); };
			static_cast<_finishActor6*>(this)->actor_wait_state = 3;
															#line 2343 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< _finishActor6, 2, Void >*>(static_cast<_finishActor6*>(this)));
															#line 18435 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1cont4(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<_finishActor6*>(this)->actor_wait_state > 0) static_cast<_finishActor6*>(this)->actor_wait_state = 0;
		static_cast<_finishActor6*>(this)->ActorCallback< _finishActor6, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor6, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< _finishActor6, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< _finishActor6, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont4(int loopDepth) 
	{
															#line 2353 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		endVersion = std::max<Version>(tr->getReadVersion().get() + 1, beginVersion + (CLIENT_KNOBS->BACKUP_MAX_LOG_RANGES - 1) * CLIENT_KNOBS->LOG_RANGE_BLOCK_SIZE);
															#line 2357 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent("FileBackupLogDispatch") .suppressFor(60) .detail("BeginVersion", beginVersion) .detail("EndVersion", endVersion) .detail("RestorableVersion", restorableVersion.orDefault(-1));
															#line 2363 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		logDispatchBatchFuture = futureBucket->future(tr);
															#line 2366 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		priority = latestSnapshotEndVersion.present() ? 1 : 0;
															#line 2368 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!partitionedLog.present() || !partitionedLog.get())
															#line 18520 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 2371 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_3 = success(BackupLogRangeTaskFunc::addTask(tr, taskBucket, task, priority, beginVersion, endVersion, TaskCompletionKey::joinWith(logDispatchBatchFuture)));
															#line 2371 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_finishActor6*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 18526 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1cont4when1(__when_expr_3.get(), loopDepth); };
			static_cast<_finishActor6*>(this)->actor_wait_state = 4;
															#line 2371 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< _finishActor6, 3, Void >*>(static_cast<_finishActor6*>(this)));
															#line 18531 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
															#line 2394 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			Version scheduledVersion = tr->getReadVersion().get() + CLIENT_KNOBS->BACKUP_POLL_PROGRESS_SECONDS * CLIENT_KNOBS->VERSIONS_PER_SECOND;
															#line 2396 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_7 = success(BackupLogsDispatchTask::addTask(tr, taskBucket, task, 1, beginVersion, endVersion, TaskCompletionKey::signal(onDone), Reference<TaskFuture>(), scheduledVersion));
															#line 2396 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_finishActor6*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 18542 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_7.isReady()) { if (__when_expr_7.isError()) return a_body1Catch1(__when_expr_7.getError(), loopDepth); else return a_body1cont4when2(__when_expr_7.get(), loopDepth); };
			static_cast<_finishActor6*>(this)->actor_wait_state = 8;
															#line 2396 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_7.addCallbackAndClear(static_cast<ActorCallback< _finishActor6, 7, Void >*>(static_cast<_finishActor6*>(this)));
															#line 18547 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}

		return loopDepth;
	}
	int a_body1cont7(Void const& _,int loopDepth) 
	{
															#line 2345 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent("FileBackupLogsDispatchDone") .detail("BackupUID", config.getUid()) .detail("BeginVersion", beginVersion) .detail("RestorableVersion", restorableVersion.orDefault(-1));
															#line 2350 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<_finishActor6*>(this)->SAV<Void>::futures) { (void)(Void()); this->~_finishActor6State(); static_cast<_finishActor6*>(this)->destroy(); return 0; }
															#line 18559 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<_finishActor6*>(this)->SAV< Void >::value()) Void(Void());
		this->~_finishActor6State();
		static_cast<_finishActor6*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont7(Void && _,int loopDepth) 
	{
															#line 2345 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent("FileBackupLogsDispatchDone") .detail("BackupUID", config.getUid()) .detail("BeginVersion", beginVersion) .detail("RestorableVersion", restorableVersion.orDefault(-1));
															#line 2350 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<_finishActor6*>(this)->SAV<Void>::futures) { (void)(Void()); this->~_finishActor6State(); static_cast<_finishActor6*>(this)->destroy(); return 0; }
															#line 18573 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<_finishActor6*>(this)->SAV< Void >::value()) Void(Void());
		this->~_finishActor6State();
		static_cast<_finishActor6*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont7(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont7(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<_finishActor6*>(this)->actor_wait_state > 0) static_cast<_finishActor6*>(this)->actor_wait_state = 0;
		static_cast<_finishActor6*>(this)->ActorCallback< _finishActor6, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor6, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< _finishActor6, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< _finishActor6, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1cont9(int loopDepth) 
	{
															#line 2407 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_8 = taskBucket->finish(tr, task);
															#line 2407 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_finishActor6*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 18650 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_8.isReady()) { if (__when_expr_8.isError()) return a_body1Catch1(__when_expr_8.getError(), loopDepth); else return a_body1cont9when1(__when_expr_8.get(), loopDepth); };
		static_cast<_finishActor6*>(this)->actor_wait_state = 9;
															#line 2407 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_8.addCallbackAndClear(static_cast<ActorCallback< _finishActor6, 8, Void >*>(static_cast<_finishActor6*>(this)));
															#line 18655 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont10(Void const& _,int loopDepth) 
	{
															#line 2378 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_4 = success(BackupLogsDispatchTask::addTask(tr, taskBucket, task, priority, beginVersion, endVersion, TaskCompletionKey::signal(onDone), logDispatchBatchFuture));
															#line 2378 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_finishActor6*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 18666 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1Catch1(__when_expr_4.getError(), loopDepth); else return a_body1cont10when1(__when_expr_4.get(), loopDepth); };
		static_cast<_finishActor6*>(this)->actor_wait_state = 5;
															#line 2378 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< _finishActor6, 4, Void >*>(static_cast<_finishActor6*>(this)));
															#line 18671 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont10(Void && _,int loopDepth) 
	{
															#line 2378 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_4 = success(BackupLogsDispatchTask::addTask(tr, taskBucket, task, priority, beginVersion, endVersion, TaskCompletionKey::signal(onDone), logDispatchBatchFuture));
															#line 2378 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_finishActor6*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 18682 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1Catch1(__when_expr_4.getError(), loopDepth); else return a_body1cont10when1(__when_expr_4.get(), loopDepth); };
		static_cast<_finishActor6*>(this)->actor_wait_state = 5;
															#line 2378 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< _finishActor6, 4, Void >*>(static_cast<_finishActor6*>(this)));
															#line 18687 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont4when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont10(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont4when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont10(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<_finishActor6*>(this)->actor_wait_state > 0) static_cast<_finishActor6*>(this)->actor_wait_state = 0;
		static_cast<_finishActor6*>(this)->ActorCallback< _finishActor6, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor6, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont4when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< _finishActor6, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont4when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< _finishActor6, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 3);

	}
	int a_body1cont10cont1(Void const& _,int loopDepth) 
	{
															#line 2388 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (prevBeginVersion > 0)
															#line 18759 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 2389 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Key> __when_expr_5 = config.destUidValue().getOrThrow(tr);
															#line 2389 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_finishActor6*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 18765 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_5.isReady()) { if (__when_expr_5.isError()) return a_body1Catch1(__when_expr_5.getError(), loopDepth); else return a_body1cont10cont1when1(__when_expr_5.get(), loopDepth); };
			static_cast<_finishActor6*>(this)->actor_wait_state = 6;
															#line 2389 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_5.addCallbackAndClear(static_cast<ActorCallback< _finishActor6, 5, Key >*>(static_cast<_finishActor6*>(this)));
															#line 18770 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1cont10cont2(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont10cont1(Void && _,int loopDepth) 
	{
															#line 2388 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (prevBeginVersion > 0)
															#line 18784 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 2389 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Key> __when_expr_5 = config.destUidValue().getOrThrow(tr);
															#line 2389 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_finishActor6*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 18790 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_5.isReady()) { if (__when_expr_5.isError()) return a_body1Catch1(__when_expr_5.getError(), loopDepth); else return a_body1cont10cont1when1(__when_expr_5.get(), loopDepth); };
			static_cast<_finishActor6*>(this)->actor_wait_state = 6;
															#line 2389 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_5.addCallbackAndClear(static_cast<ActorCallback< _finishActor6, 5, Key >*>(static_cast<_finishActor6*>(this)));
															#line 18795 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1cont10cont2(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont10when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont10cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont10when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont10cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose5() 
	{
		if (static_cast<_finishActor6*>(this)->actor_wait_state > 0) static_cast<_finishActor6*>(this)->actor_wait_state = 0;
		static_cast<_finishActor6*>(this)->ActorCallback< _finishActor6, 4, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor6, 4, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont10when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_fire(ActorCallback< _finishActor6, 4, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont10when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_error(ActorCallback< _finishActor6, 4, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 4);

	}
	int a_body1cont10cont2(int loopDepth) 
	{
		loopDepth = a_body1cont9(loopDepth);

		return loopDepth;
	}
	int a_body1cont10cont3(int loopDepth) 
	{
															#line 2390 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_6 = eraseLogData(tr, config.getUidAsKey(), destUidValue, Optional<Version>(beginVersion));
															#line 2390 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_finishActor6*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 18880 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_6.isReady()) { if (__when_expr_6.isError()) return a_body1Catch1(__when_expr_6.getError(), loopDepth); else return a_body1cont10cont3when1(__when_expr_6.get(), loopDepth); };
		static_cast<_finishActor6*>(this)->actor_wait_state = 7;
															#line 2390 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_6.addCallbackAndClear(static_cast<ActorCallback< _finishActor6, 6, Void >*>(static_cast<_finishActor6*>(this)));
															#line 18885 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont10cont1when1(Key const& __destUidValue,int loopDepth) 
	{
															#line 2389 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		destUidValue = __destUidValue;
															#line 18894 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont10cont3(loopDepth);

		return loopDepth;
	}
	int a_body1cont10cont1when1(Key && __destUidValue,int loopDepth) 
	{
		destUidValue = std::move(__destUidValue);
		loopDepth = a_body1cont10cont3(loopDepth);

		return loopDepth;
	}
	void a_exitChoose6() 
	{
		if (static_cast<_finishActor6*>(this)->actor_wait_state > 0) static_cast<_finishActor6*>(this)->actor_wait_state = 0;
		static_cast<_finishActor6*>(this)->ActorCallback< _finishActor6, 5, Key >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor6, 5, Key >*,Key const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1cont10cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_fire(ActorCallback< _finishActor6, 5, Key >*,Key && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1cont10cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_error(ActorCallback< _finishActor6, 5, Key >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 5);

	}
	int a_body1cont10cont4(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont10cont2(loopDepth);

		return loopDepth;
	}
	int a_body1cont10cont4(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont10cont2(loopDepth);

		return loopDepth;
	}
	int a_body1cont10cont3when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont10cont4(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont10cont3when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont10cont4(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose7() 
	{
		if (static_cast<_finishActor6*>(this)->actor_wait_state > 0) static_cast<_finishActor6*>(this)->actor_wait_state = 0;
		static_cast<_finishActor6*>(this)->ActorCallback< _finishActor6, 6, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor6, 6, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1cont10cont3when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 6);

	}
	void a_callback_fire(ActorCallback< _finishActor6, 6, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1cont10cont3when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 6);

	}
	void a_callback_error(ActorCallback< _finishActor6, 6, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 6);

	}
	int a_body1cont11(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont9(loopDepth);

		return loopDepth;
	}
	int a_body1cont11(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont9(loopDepth);

		return loopDepth;
	}
	int a_body1cont4when2(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont11(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont4when2(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont11(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose8() 
	{
		if (static_cast<_finishActor6*>(this)->actor_wait_state > 0) static_cast<_finishActor6*>(this)->actor_wait_state = 0;
		static_cast<_finishActor6*>(this)->ActorCallback< _finishActor6, 7, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor6, 7, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 7);
		a_exitChoose8();
		try {
			a_body1cont4when2(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 7);

	}
	void a_callback_fire(ActorCallback< _finishActor6, 7, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 7);
		a_exitChoose8();
		try {
			a_body1cont4when2(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 7);

	}
	void a_callback_error(ActorCallback< _finishActor6, 7, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 7);
		a_exitChoose8();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 7);

	}
	int a_body1cont12(Void const& _,int loopDepth) 
	{
															#line 2409 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent("FileBackupLogsDispatchContinuing") .suppressFor(60) .detail("BackupUID", config.getUid()) .detail("BeginVersion", beginVersion) .detail("EndVersion", endVersion);
															#line 2415 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<_finishActor6*>(this)->SAV<Void>::futures) { (void)(Void()); this->~_finishActor6State(); static_cast<_finishActor6*>(this)->destroy(); return 0; }
															#line 19113 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<_finishActor6*>(this)->SAV< Void >::value()) Void(Void());
		this->~_finishActor6State();
		static_cast<_finishActor6*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont12(Void && _,int loopDepth) 
	{
															#line 2409 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent("FileBackupLogsDispatchContinuing") .suppressFor(60) .detail("BackupUID", config.getUid()) .detail("BeginVersion", beginVersion) .detail("EndVersion", endVersion);
															#line 2415 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<_finishActor6*>(this)->SAV<Void>::futures) { (void)(Void()); this->~_finishActor6State(); static_cast<_finishActor6*>(this)->destroy(); return 0; }
															#line 19127 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<_finishActor6*>(this)->SAV< Void >::value()) Void(Void());
		this->~_finishActor6State();
		static_cast<_finishActor6*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont9when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont12(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont9when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont12(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose9() 
	{
		if (static_cast<_finishActor6*>(this)->actor_wait_state > 0) static_cast<_finishActor6*>(this)->actor_wait_state = 0;
		static_cast<_finishActor6*>(this)->ActorCallback< _finishActor6, 8, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor6, 8, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 8);
		a_exitChoose9();
		try {
			a_body1cont9when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 8);

	}
	void a_callback_fire(ActorCallback< _finishActor6, 8, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 8);
		a_exitChoose9();
		try {
			a_body1cont9when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 8);

	}
	void a_callback_error(ActorCallback< _finishActor6, 8, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 8);
		a_exitChoose9();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 8);

	}
															#line 2300 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 2300 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskBucket> taskBucket;
															#line 2300 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<FutureBucket> futureBucket;
															#line 2300 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<Task> task;
															#line 2312 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskFuture> onDone;
															#line 2313 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Version prevBeginVersion;
															#line 2314 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Version beginVersion;
															#line 2315 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	BackupConfig config;
															#line 2318 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	bool stopWhenDone;
															#line 2319 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Optional<Version> restorableVersion;
															#line 2320 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	EBackupState backupState;
															#line 2321 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Optional<std::string> tag;
															#line 2322 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Optional<Version> latestSnapshotEndVersion;
															#line 2323 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Optional<bool> partitionedLog;
															#line 2353 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Version endVersion;
															#line 2363 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskFuture> logDispatchBatchFuture;
															#line 2366 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int priority;
															#line 2389 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Key destUidValue;
															#line 19234 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via _finish()
															#line 2300 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class _finishActor6 final : public Actor<Void>, public ActorCallback< _finishActor6, 0, Void >, public ActorCallback< _finishActor6, 1, Void >, public ActorCallback< _finishActor6, 2, Void >, public ActorCallback< _finishActor6, 3, Void >, public ActorCallback< _finishActor6, 4, Void >, public ActorCallback< _finishActor6, 5, Key >, public ActorCallback< _finishActor6, 6, Void >, public ActorCallback< _finishActor6, 7, Void >, public ActorCallback< _finishActor6, 8, Void >, public FastAllocated<_finishActor6>, public _finishActor6State<_finishActor6> {
															#line 19239 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<_finishActor6>::operator new;
	using FastAllocated<_finishActor6>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< _finishActor6, 0, Void >;
friend struct ActorCallback< _finishActor6, 1, Void >;
friend struct ActorCallback< _finishActor6, 2, Void >;
friend struct ActorCallback< _finishActor6, 3, Void >;
friend struct ActorCallback< _finishActor6, 4, Void >;
friend struct ActorCallback< _finishActor6, 5, Key >;
friend struct ActorCallback< _finishActor6, 6, Void >;
friend struct ActorCallback< _finishActor6, 7, Void >;
friend struct ActorCallback< _finishActor6, 8, Void >;
															#line 2300 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	_finishActor6(Reference<ReadYourWritesTransaction> const& tr,Reference<TaskBucket> const& taskBucket,Reference<FutureBucket> const& futureBucket,Reference<Task> const& task) 
															#line 19258 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<Void>(),
		   _finishActor6State<_finishActor6>(tr, taskBucket, futureBucket, task)
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("_finish");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< _finishActor6, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< _finishActor6, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< _finishActor6, 2, Void >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< _finishActor6, 3, Void >*)0, actor_cancelled()); break;
		case 5: this->a_callback_error((ActorCallback< _finishActor6, 4, Void >*)0, actor_cancelled()); break;
		case 6: this->a_callback_error((ActorCallback< _finishActor6, 5, Key >*)0, actor_cancelled()); break;
		case 7: this->a_callback_error((ActorCallback< _finishActor6, 6, Void >*)0, actor_cancelled()); break;
		case 8: this->a_callback_error((ActorCallback< _finishActor6, 7, Void >*)0, actor_cancelled()); break;
		case 9: this->a_callback_error((ActorCallback< _finishActor6, 8, Void >*)0, actor_cancelled()); break;
		}

	}
};
															#line 2300 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<Void> _finish( Reference<ReadYourWritesTransaction> const& tr, Reference<TaskBucket> const& taskBucket, Reference<FutureBucket> const& futureBucket, Reference<Task> const& task ) {
															#line 2300 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<Void>(new _finishActor6(tr, taskBucket, futureBucket, task));
															#line 19293 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 2417 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

																#line 19298 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via addTask()
															#line 2418 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class AddTaskActor4>
															#line 2418 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class AddTaskActor4State {
															#line 19304 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 2418 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	AddTaskActor4State(Reference<ReadYourWritesTransaction> const& tr,Reference<TaskBucket> const& taskBucket,Reference<Task> const& parentTask,int const& priority,Version const& prevBeginVersion,Version const& beginVersion,TaskCompletionKey const& completionKey,Reference<TaskFuture> const& waitFor = Reference<TaskFuture>(),Version const& scheduledVersion = invalidVersion) 
															#line 2418 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 2418 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : tr(tr),
															#line 2418 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   taskBucket(taskBucket),
															#line 2418 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   parentTask(parentTask),
															#line 2418 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   priority(priority),
															#line 2418 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   prevBeginVersion(prevBeginVersion),
															#line 2418 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   beginVersion(beginVersion),
															#line 2418 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   completionKey(completionKey),
															#line 2418 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   waitFor(waitFor),
															#line 2418 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   scheduledVersion(scheduledVersion)
															#line 19327 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("addTask", reinterpret_cast<unsigned long>(this));

	}
	~AddTaskActor4State() 
	{
		fdb_probe_actor_destroy("addTask", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 2427 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Key> __when_expr_0 = addBackupTask( BackupLogsDispatchTask::name, BackupLogsDispatchTask::version, tr, taskBucket, completionKey, BackupConfig(parentTask), waitFor, [=](Reference<Task> task) { Params.prevBeginVersion().set(task, prevBeginVersion); Params.beginVersion().set(task, beginVersion); if (scheduledVersion != invalidVersion) { ReservedTaskParams::scheduledVersion().set(task, scheduledVersion); } }, priority);
															#line 2427 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<AddTaskActor4*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 19344 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<AddTaskActor4*>(this)->actor_wait_state = 1;
															#line 2427 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< AddTaskActor4, 0, Key >*>(static_cast<AddTaskActor4*>(this)));
															#line 19349 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~AddTaskActor4State();
		static_cast<AddTaskActor4*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Key const& key,int loopDepth) 
	{
															#line 2443 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<AddTaskActor4*>(this)->SAV<Key>::futures) { (void)(key); this->~AddTaskActor4State(); static_cast<AddTaskActor4*>(this)->destroy(); return 0; }
															#line 19372 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<AddTaskActor4*>(this)->SAV< Key >::value()) Key(key);
		this->~AddTaskActor4State();
		static_cast<AddTaskActor4*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1(Key && key,int loopDepth) 
	{
															#line 2443 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<AddTaskActor4*>(this)->SAV<Key>::futures) { (void)(key); this->~AddTaskActor4State(); static_cast<AddTaskActor4*>(this)->destroy(); return 0; }
															#line 19384 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<AddTaskActor4*>(this)->SAV< Key >::value()) Key(key);
		this->~AddTaskActor4State();
		static_cast<AddTaskActor4*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1when1(Key const& key,int loopDepth) 
	{
		loopDepth = a_body1cont1(key, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Key && key,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(key), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<AddTaskActor4*>(this)->actor_wait_state > 0) static_cast<AddTaskActor4*>(this)->actor_wait_state = 0;
		static_cast<AddTaskActor4*>(this)->ActorCallback< AddTaskActor4, 0, Key >::remove();

	}
	void a_callback_fire(ActorCallback< AddTaskActor4, 0, Key >*,Key const& value) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< AddTaskActor4, 0, Key >*,Key && value) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< AddTaskActor4, 0, Key >*,Error err) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 2418 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 2418 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskBucket> taskBucket;
															#line 2418 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<Task> parentTask;
															#line 2418 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int priority;
															#line 2418 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Version prevBeginVersion;
															#line 2418 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Version beginVersion;
															#line 2418 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	TaskCompletionKey completionKey;
															#line 2418 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskFuture> waitFor;
															#line 2418 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Version scheduledVersion;
															#line 19473 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via addTask()
															#line 2418 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class AddTaskActor4 final : public Actor<Key>, public ActorCallback< AddTaskActor4, 0, Key >, public FastAllocated<AddTaskActor4>, public AddTaskActor4State<AddTaskActor4> {
															#line 19478 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<AddTaskActor4>::operator new;
	using FastAllocated<AddTaskActor4>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Key>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< AddTaskActor4, 0, Key >;
															#line 2418 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	AddTaskActor4(Reference<ReadYourWritesTransaction> const& tr,Reference<TaskBucket> const& taskBucket,Reference<Task> const& parentTask,int const& priority,Version const& prevBeginVersion,Version const& beginVersion,TaskCompletionKey const& completionKey,Reference<TaskFuture> const& waitFor = Reference<TaskFuture>(),Version const& scheduledVersion = invalidVersion) 
															#line 19489 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<Key>(),
		   AddTaskActor4State<AddTaskActor4>(tr, taskBucket, parentTask, priority, prevBeginVersion, beginVersion, completionKey, waitFor, scheduledVersion)
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("addTask");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< AddTaskActor4, 0, Key >*)0, actor_cancelled()); break;
		}

	}
};
															#line 2418 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<Key> addTask( Reference<ReadYourWritesTransaction> const& tr, Reference<TaskBucket> const& taskBucket, Reference<Task> const& parentTask, int const& priority, Version const& prevBeginVersion, Version const& beginVersion, TaskCompletionKey const& completionKey, Reference<TaskFuture> const& waitFor = Reference<TaskFuture>(), Version const& scheduledVersion = invalidVersion ) {
															#line 2418 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<Key>(new AddTaskActor4(tr, taskBucket, parentTask, priority, prevBeginVersion, beginVersion, completionKey, waitFor, scheduledVersion));
															#line 19516 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 2445 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

	StringRef getName() const override { return name; };

	Future<Void> execute(Database cx,
	                     Reference<TaskBucket> tb,
	                     Reference<FutureBucket> fb,
	                     Reference<Task> task) override {
		return Void();
	};
	Future<Void> finish(Reference<ReadYourWritesTransaction> tr,
	                    Reference<TaskBucket> tb,
	                    Reference<FutureBucket> fb,
	                    Reference<Task> task) override {
		return _finish(tr, tb, fb, task);
	};
};
StringRef BackupLogsDispatchTask::name = LiteralStringRef("file_backup_dispatch_logs_5.2");
REGISTER_TASKFUNC(BackupLogsDispatchTask);

struct FileBackupFinishedTask : BackupTaskFuncBase {
	static StringRef name;
	static constexpr uint32_t version = 1;

	StringRef getName() const override { return name; };

																#line 19545 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via _finish()
															#line 2470 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class _finishActor7>
															#line 2470 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class _finishActor7State {
															#line 19551 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 2470 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	_finishActor7State(Reference<ReadYourWritesTransaction> const& tr,Reference<TaskBucket> const& taskBucket,Reference<FutureBucket> const& futureBucket,Reference<Task> const& task) 
															#line 2470 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 2470 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : tr(tr),
															#line 2470 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   taskBucket(taskBucket),
															#line 2470 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   futureBucket(futureBucket),
															#line 2470 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   task(task)
															#line 19564 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("_finish", reinterpret_cast<unsigned long>(this));

	}
	~_finishActor7State() 
	{
		fdb_probe_actor_destroy("_finish", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 2474 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_0 = checkTaskVersion(tr->getDatabase(), task, FileBackupFinishedTask::name, FileBackupFinishedTask::version);
															#line 2474 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_finishActor7*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 19581 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<_finishActor7*>(this)->actor_wait_state = 1;
															#line 2474 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< _finishActor7, 0, Void >*>(static_cast<_finishActor7*>(this)));
															#line 19586 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~_finishActor7State();
		static_cast<_finishActor7*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void const& _,int loopDepth) 
	{
															#line 2476 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		backup = BackupConfig(task);
															#line 2477 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		uid = backup.getUid();
															#line 2479 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr->setOption(FDBTransactionOptions::COMMIT_ON_FIRST_PROXY);
															#line 2480 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Key> __when_expr_1 = backup.destUidValue().getOrThrow(tr);
															#line 2480 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_finishActor7*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 19617 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<_finishActor7*>(this)->actor_wait_state = 2;
															#line 2480 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< _finishActor7, 1, Key >*>(static_cast<_finishActor7*>(this)));
															#line 19622 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void && _,int loopDepth) 
	{
															#line 2476 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		backup = BackupConfig(task);
															#line 2477 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		uid = backup.getUid();
															#line 2479 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr->setOption(FDBTransactionOptions::COMMIT_ON_FIRST_PROXY);
															#line 2480 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Key> __when_expr_1 = backup.destUidValue().getOrThrow(tr);
															#line 2480 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_finishActor7*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 19639 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<_finishActor7*>(this)->actor_wait_state = 2;
															#line 2480 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< _finishActor7, 1, Key >*>(static_cast<_finishActor7*>(this)));
															#line 19644 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<_finishActor7*>(this)->actor_wait_state > 0) static_cast<_finishActor7*>(this)->actor_wait_state = 0;
		static_cast<_finishActor7*>(this)->ActorCallback< _finishActor7, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor7, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< _finishActor7, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< _finishActor7, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont2(int loopDepth) 
	{
															#line 2482 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_2 = eraseLogData(tr, backup.getUidAsKey(), destUidValue) && clearBackupStartID(tr, uid);
															#line 2482 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_finishActor7*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 19718 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont2when1(__when_expr_2.get(), loopDepth); };
		static_cast<_finishActor7*>(this)->actor_wait_state = 3;
															#line 2482 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< _finishActor7, 2, Void >*>(static_cast<_finishActor7*>(this)));
															#line 19723 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1when1(Key const& __destUidValue,int loopDepth) 
	{
															#line 2480 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		destUidValue = __destUidValue;
															#line 19732 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont2(loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Key && __destUidValue,int loopDepth) 
	{
		destUidValue = std::move(__destUidValue);
		loopDepth = a_body1cont2(loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<_finishActor7*>(this)->actor_wait_state > 0) static_cast<_finishActor7*>(this)->actor_wait_state = 0;
		static_cast<_finishActor7*>(this)->ActorCallback< _finishActor7, 1, Key >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor7, 1, Key >*,Key const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< _finishActor7, 1, Key >*,Key && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< _finishActor7, 1, Key >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont3(Void const& _,int loopDepth) 
	{
															#line 2484 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		backup.stateEnum().set(tr, EBackupState::STATE_COMPLETED);
															#line 2486 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_3 = taskBucket->finish(tr, task);
															#line 2486 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_finishActor7*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 19803 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1cont3when1(__when_expr_3.get(), loopDepth); };
		static_cast<_finishActor7*>(this)->actor_wait_state = 4;
															#line 2486 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< _finishActor7, 3, Void >*>(static_cast<_finishActor7*>(this)));
															#line 19808 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont3(Void && _,int loopDepth) 
	{
															#line 2484 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		backup.stateEnum().set(tr, EBackupState::STATE_COMPLETED);
															#line 2486 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_3 = taskBucket->finish(tr, task);
															#line 2486 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_finishActor7*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 19821 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1cont3when1(__when_expr_3.get(), loopDepth); };
		static_cast<_finishActor7*>(this)->actor_wait_state = 4;
															#line 2486 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< _finishActor7, 3, Void >*>(static_cast<_finishActor7*>(this)));
															#line 19826 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont3(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont3(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<_finishActor7*>(this)->actor_wait_state > 0) static_cast<_finishActor7*>(this)->actor_wait_state = 0;
		static_cast<_finishActor7*>(this)->ActorCallback< _finishActor7, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor7, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< _finishActor7, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< _finishActor7, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1cont4(Void const& _,int loopDepth) 
	{
															#line 2488 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent("FileBackupFinished").detail("BackupUID", uid);
															#line 2490 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<_finishActor7*>(this)->SAV<Void>::futures) { (void)(Void()); this->~_finishActor7State(); static_cast<_finishActor7*>(this)->destroy(); return 0; }
															#line 19900 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<_finishActor7*>(this)->SAV< Void >::value()) Void(Void());
		this->~_finishActor7State();
		static_cast<_finishActor7*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont4(Void && _,int loopDepth) 
	{
															#line 2488 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent("FileBackupFinished").detail("BackupUID", uid);
															#line 2490 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<_finishActor7*>(this)->SAV<Void>::futures) { (void)(Void()); this->~_finishActor7State(); static_cast<_finishActor7*>(this)->destroy(); return 0; }
															#line 19914 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<_finishActor7*>(this)->SAV< Void >::value()) Void(Void());
		this->~_finishActor7State();
		static_cast<_finishActor7*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont3when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont4(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont3when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont4(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<_finishActor7*>(this)->actor_wait_state > 0) static_cast<_finishActor7*>(this)->actor_wait_state = 0;
		static_cast<_finishActor7*>(this)->ActorCallback< _finishActor7, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor7, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont3when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< _finishActor7, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont3when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< _finishActor7, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 3);

	}
															#line 2470 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 2470 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskBucket> taskBucket;
															#line 2470 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<FutureBucket> futureBucket;
															#line 2470 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<Task> task;
															#line 2476 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	BackupConfig backup;
															#line 2477 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	UID uid;
															#line 2480 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Key destUidValue;
															#line 19999 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via _finish()
															#line 2470 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class _finishActor7 final : public Actor<Void>, public ActorCallback< _finishActor7, 0, Void >, public ActorCallback< _finishActor7, 1, Key >, public ActorCallback< _finishActor7, 2, Void >, public ActorCallback< _finishActor7, 3, Void >, public FastAllocated<_finishActor7>, public _finishActor7State<_finishActor7> {
															#line 20004 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<_finishActor7>::operator new;
	using FastAllocated<_finishActor7>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< _finishActor7, 0, Void >;
friend struct ActorCallback< _finishActor7, 1, Key >;
friend struct ActorCallback< _finishActor7, 2, Void >;
friend struct ActorCallback< _finishActor7, 3, Void >;
															#line 2470 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	_finishActor7(Reference<ReadYourWritesTransaction> const& tr,Reference<TaskBucket> const& taskBucket,Reference<FutureBucket> const& futureBucket,Reference<Task> const& task) 
															#line 20018 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<Void>(),
		   _finishActor7State<_finishActor7>(tr, taskBucket, futureBucket, task)
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("_finish");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< _finishActor7, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< _finishActor7, 1, Key >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< _finishActor7, 2, Void >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< _finishActor7, 3, Void >*)0, actor_cancelled()); break;
		}

	}
};
															#line 2470 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<Void> _finish( Reference<ReadYourWritesTransaction> const& tr, Reference<TaskBucket> const& taskBucket, Reference<FutureBucket> const& futureBucket, Reference<Task> const& task ) {
															#line 2470 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<Void>(new _finishActor7(tr, taskBucket, futureBucket, task));
															#line 20048 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 2492 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

																#line 20053 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via addTask()
															#line 2493 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class AddTaskActor5>
															#line 2493 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class AddTaskActor5State {
															#line 20059 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 2493 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	AddTaskActor5State(Reference<ReadYourWritesTransaction> const& tr,Reference<TaskBucket> const& taskBucket,Reference<Task> const& parentTask,TaskCompletionKey const& completionKey,Reference<TaskFuture> const& waitFor = Reference<TaskFuture>()) 
															#line 2493 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 2493 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : tr(tr),
															#line 2493 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   taskBucket(taskBucket),
															#line 2493 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   parentTask(parentTask),
															#line 2493 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   completionKey(completionKey),
															#line 2493 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   waitFor(waitFor)
															#line 20074 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("addTask", reinterpret_cast<unsigned long>(this));

	}
	~AddTaskActor5State() 
	{
		fdb_probe_actor_destroy("addTask", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 2498 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Key> __when_expr_0 = addBackupTask(FileBackupFinishedTask::name, FileBackupFinishedTask::version, tr, taskBucket, completionKey, BackupConfig(parentTask), waitFor);
															#line 2498 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<AddTaskActor5*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 20091 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<AddTaskActor5*>(this)->actor_wait_state = 1;
															#line 2498 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< AddTaskActor5, 0, Key >*>(static_cast<AddTaskActor5*>(this)));
															#line 20096 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~AddTaskActor5State();
		static_cast<AddTaskActor5*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Key const& key,int loopDepth) 
	{
															#line 2505 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<AddTaskActor5*>(this)->SAV<Key>::futures) { (void)(key); this->~AddTaskActor5State(); static_cast<AddTaskActor5*>(this)->destroy(); return 0; }
															#line 20119 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<AddTaskActor5*>(this)->SAV< Key >::value()) Key(key);
		this->~AddTaskActor5State();
		static_cast<AddTaskActor5*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1(Key && key,int loopDepth) 
	{
															#line 2505 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<AddTaskActor5*>(this)->SAV<Key>::futures) { (void)(key); this->~AddTaskActor5State(); static_cast<AddTaskActor5*>(this)->destroy(); return 0; }
															#line 20131 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<AddTaskActor5*>(this)->SAV< Key >::value()) Key(key);
		this->~AddTaskActor5State();
		static_cast<AddTaskActor5*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1when1(Key const& key,int loopDepth) 
	{
		loopDepth = a_body1cont1(key, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Key && key,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(key), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<AddTaskActor5*>(this)->actor_wait_state > 0) static_cast<AddTaskActor5*>(this)->actor_wait_state = 0;
		static_cast<AddTaskActor5*>(this)->ActorCallback< AddTaskActor5, 0, Key >::remove();

	}
	void a_callback_fire(ActorCallback< AddTaskActor5, 0, Key >*,Key const& value) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< AddTaskActor5, 0, Key >*,Key && value) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< AddTaskActor5, 0, Key >*,Error err) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 2493 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 2493 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskBucket> taskBucket;
															#line 2493 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<Task> parentTask;
															#line 2493 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	TaskCompletionKey completionKey;
															#line 2493 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskFuture> waitFor;
															#line 20212 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via addTask()
															#line 2493 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class AddTaskActor5 final : public Actor<Key>, public ActorCallback< AddTaskActor5, 0, Key >, public FastAllocated<AddTaskActor5>, public AddTaskActor5State<AddTaskActor5> {
															#line 20217 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<AddTaskActor5>::operator new;
	using FastAllocated<AddTaskActor5>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Key>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< AddTaskActor5, 0, Key >;
															#line 2493 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	AddTaskActor5(Reference<ReadYourWritesTransaction> const& tr,Reference<TaskBucket> const& taskBucket,Reference<Task> const& parentTask,TaskCompletionKey const& completionKey,Reference<TaskFuture> const& waitFor = Reference<TaskFuture>()) 
															#line 20228 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<Key>(),
		   AddTaskActor5State<AddTaskActor5>(tr, taskBucket, parentTask, completionKey, waitFor)
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("addTask");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< AddTaskActor5, 0, Key >*)0, actor_cancelled()); break;
		}

	}
};
															#line 2493 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<Key> addTask( Reference<ReadYourWritesTransaction> const& tr, Reference<TaskBucket> const& taskBucket, Reference<Task> const& parentTask, TaskCompletionKey const& completionKey, Reference<TaskFuture> const& waitFor = Reference<TaskFuture>() ) {
															#line 2493 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<Key>(new AddTaskActor5(tr, taskBucket, parentTask, completionKey, waitFor));
															#line 20255 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 2507 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

	Future<Void> execute(Database cx,
	                     Reference<TaskBucket> tb,
	                     Reference<FutureBucket> fb,
	                     Reference<Task> task) override {
		return Void();
	};
	Future<Void> finish(Reference<ReadYourWritesTransaction> tr,
	                    Reference<TaskBucket> tb,
	                    Reference<FutureBucket> fb,
	                    Reference<Task> task) override {
		return _finish(tr, tb, fb, task);
	};
};
StringRef FileBackupFinishedTask::name = LiteralStringRef("file_backup_finished_5.2");
REGISTER_TASKFUNC(FileBackupFinishedTask);

struct BackupSnapshotManifest : BackupTaskFuncBase {
	static StringRef name;
	static constexpr uint32_t version = 1;
	static struct {
		static TaskParam<Version> endVersion() { return LiteralStringRef(__FUNCTION__); }
	} Params;

																#line 20283 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via _execute()
															#line 2531 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class _executeActor3>
															#line 2531 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class _executeActor3State {
															#line 20289 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 2531 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	_executeActor3State(Database const& cx,Reference<TaskBucket> const& taskBucket,Reference<FutureBucket> const& futureBucket,Reference<Task> const& task) 
															#line 2531 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 2531 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : cx(cx),
															#line 2531 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   taskBucket(taskBucket),
															#line 2531 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   futureBucket(futureBucket),
															#line 2531 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   task(task),
															#line 2535 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   config(task),
															#line 2536 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   bc(),
															#line 2538 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   tr(new ReadYourWritesTransaction(cx)),
															#line 2542 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   localmap(),
															#line 2543 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   startKey(),
															#line 2544 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   batchSize(BUGGIFY ? 1 : 1000000)
															#line 20314 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("_execute", reinterpret_cast<unsigned long>(this));

	}
	~_executeActor3State() 
	{
		fdb_probe_actor_destroy("_execute", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 2546 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			;
															#line 20329 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~_executeActor3State();
		static_cast<_executeActor3*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 2576 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		std::vector<std::string> files;
															#line 2577 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		std::vector<std::pair<Key, Key>> beginEndKeys;
															#line 2578 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		maxVer = 0;
															#line 2579 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		minVer = std::numeric_limits<Version>::max();
															#line 2580 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		totalBytes = 0;
															#line 2582 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!localmap.empty())
															#line 20362 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 2584 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			auto ri = localmap.rbegin();
															#line 2585 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			auto i = (++ri).base();
															#line 2587 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			for(;1;) {
															#line 2588 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				const BackupConfig::RangeSlice& r = i->second;
															#line 2591 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				files.push_back(r.fileName);
															#line 2594 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				beginEndKeys.emplace_back(i->second.begin, i->first);
															#line 2597 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				if (r.version < minVer)
															#line 20378 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				{
															#line 2598 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
					minVer = r.version;
															#line 20382 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				}
															#line 2599 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				if (r.version > maxVer)
															#line 20386 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				{
															#line 2600 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
					maxVer = r.version;
															#line 20390 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				}
															#line 2603 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				totalBytes += r.fileSize;
															#line 2608 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				i = localmap.upper_bound(i->second.begin);
															#line 2610 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				if (i == localmap.begin())
															#line 20398 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				{
					break;
				}
															#line 2612 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				--i;
															#line 20404 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			}
		}
															#line 2616 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		Params.endVersion().set(task, maxVer);
															#line 2617 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_4 = bc->writeKeyspaceSnapshotFile(files, beginEndKeys, totalBytes);
															#line 2617 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor3*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 20413 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1Catch1(__when_expr_4.getError(), loopDepth); else return a_body1cont1when1(__when_expr_4.get(), loopDepth); };
		static_cast<_executeActor3*>(this)->actor_wait_state = 5;
															#line 2617 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< _executeActor3, 4, Void >*>(static_cast<_executeActor3*>(this)));
															#line 20418 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
		try {
															#line 2548 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 2549 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 2551 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_0 = taskBucket->keepRunning(tr, task);
															#line 2551 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_executeActor3*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 20441 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1loopBody1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
			static_cast<_executeActor3*>(this)->actor_wait_state = 1;
															#line 2551 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< _executeActor3, 0, Void >*>(static_cast<_executeActor3*>(this)));
															#line 20446 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1break1(int loopDepth) 
	{
		try {
			return a_body1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 2572 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_3 = tr->onError(e);
															#line 2572 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_executeActor3*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 20483 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch1(__when_expr_3.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1Catch1when1(__when_expr_3.get(), loopDepth); };
			static_cast<_executeActor3*>(this)->actor_wait_state = 4;
															#line 2572 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< _executeActor3, 3, Void >*>(static_cast<_executeActor3*>(this)));
															#line 20488 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(Void const& _,int loopDepth) 
	{
															#line 2553 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!bc)
															#line 20503 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 2555 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Reference<IBackupContainer>> __when_expr_1 = config.backupContainer().getOrThrow(tr);
															#line 2555 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_executeActor3*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 20509 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
			static_cast<_executeActor3*>(this)->actor_wait_state = 2;
															#line 2555 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< _executeActor3, 1, Reference<IBackupContainer> >*>(static_cast<_executeActor3*>(this)));
															#line 20514 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1loopBody1cont3(loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(Void && _,int loopDepth) 
	{
															#line 2553 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!bc)
															#line 20528 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 2555 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Reference<IBackupContainer>> __when_expr_1 = config.backupContainer().getOrThrow(tr);
															#line 2555 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_executeActor3*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 20534 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
			static_cast<_executeActor3*>(this)->actor_wait_state = 2;
															#line 2555 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< _executeActor3, 1, Reference<IBackupContainer> >*>(static_cast<_executeActor3*>(this)));
															#line 20539 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1loopBody1cont3(loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<_executeActor3*>(this)->actor_wait_state > 0) static_cast<_executeActor3*>(this)->actor_wait_state = 0;
		static_cast<_executeActor3*>(this)->ActorCallback< _executeActor3, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor3, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< _executeActor3, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< _executeActor3, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1cont3(int loopDepth) 
	{
															#line 2559 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<BackupConfig::RangeFileMapT::PairsType> __when_expr_2 = config.snapshotRangeFileMap().getRange(tr, startKey, {}, batchSize);
															#line 2559 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor3*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 20618 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1loopBody1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1loopBody1cont3when1(__when_expr_2.get(), loopDepth); };
		static_cast<_executeActor3*>(this)->actor_wait_state = 3;
															#line 2559 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< _executeActor3, 2, BackupConfig::RangeFileMapT::PairsType >*>(static_cast<_executeActor3*>(this)));
															#line 20623 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont4(Reference<IBackupContainer> const& _bc,int loopDepth) 
	{
															#line 2556 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		bc = getBackupContainerWithProxy(_bc);
															#line 20632 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1loopBody1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont4(Reference<IBackupContainer> && _bc,int loopDepth) 
	{
															#line 2556 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		bc = getBackupContainerWithProxy(_bc);
															#line 20641 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1loopBody1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(Reference<IBackupContainer> const& _bc,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont4(_bc, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(Reference<IBackupContainer> && _bc,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont4(std::move(_bc), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<_executeActor3*>(this)->actor_wait_state > 0) static_cast<_executeActor3*>(this)->actor_wait_state = 0;
		static_cast<_executeActor3*>(this)->ActorCallback< _executeActor3, 1, Reference<IBackupContainer> >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor3, 1, Reference<IBackupContainer> >*,Reference<IBackupContainer> const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< _executeActor3, 1, Reference<IBackupContainer> >*,Reference<IBackupContainer> && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< _executeActor3, 1, Reference<IBackupContainer> >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1loopBody1cont6(BackupConfig::RangeFileMapT::PairsType const& rangeresults,int loopDepth) 
	{
															#line 2562 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		for( auto& p : rangeresults ) {
															#line 2563 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			localmap.insert(p);
															#line 20715 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 2566 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (rangeresults.size() < batchSize)
															#line 20719 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
			return a_body1break1(loopDepth==0?0:loopDepth-1); // break
		}
															#line 2569 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		startKey = keyAfter(rangeresults.back().first);
															#line 2570 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr->reset();
															#line 20727 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1loopBody1cont10(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont6(BackupConfig::RangeFileMapT::PairsType && rangeresults,int loopDepth) 
	{
															#line 2562 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		for( auto& p : rangeresults ) {
															#line 2563 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			localmap.insert(p);
															#line 20738 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 2566 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (rangeresults.size() < batchSize)
															#line 20742 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
			return a_body1break1(loopDepth==0?0:loopDepth-1); // break
		}
															#line 2569 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		startKey = keyAfter(rangeresults.back().first);
															#line 2570 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr->reset();
															#line 20750 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1loopBody1cont10(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont3when1(BackupConfig::RangeFileMapT::PairsType const& rangeresults,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont6(rangeresults, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont3when1(BackupConfig::RangeFileMapT::PairsType && rangeresults,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont6(std::move(rangeresults), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<_executeActor3*>(this)->actor_wait_state > 0) static_cast<_executeActor3*>(this)->actor_wait_state = 0;
		static_cast<_executeActor3*>(this)->ActorCallback< _executeActor3, 2, BackupConfig::RangeFileMapT::PairsType >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor3, 2, BackupConfig::RangeFileMapT::PairsType >*,BackupConfig::RangeFileMapT::PairsType const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont3when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< _executeActor3, 2, BackupConfig::RangeFileMapT::PairsType >*,BackupConfig::RangeFileMapT::PairsType && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont3when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< _executeActor3, 2, BackupConfig::RangeFileMapT::PairsType >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1loopBody1cont10(int loopDepth) 
	{
		try {
			loopDepth = a_body1loopBody1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<_executeActor3*>(this)->actor_wait_state > 0) static_cast<_executeActor3*>(this)->actor_wait_state = 0;
		static_cast<_executeActor3*>(this)->ActorCallback< _executeActor3, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor3, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< _executeActor3, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< _executeActor3, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 3);

	}
	int a_body1cont2(Void const& _,int loopDepth) 
	{
															#line 2619 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent(SevInfo, "FileBackupWroteSnapshotManifest") .detail("BackupUID", config.getUid()) .detail("BeginVersion", minVer) .detail("EndVersion", maxVer) .detail("TotalBytes", totalBytes);
															#line 2625 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<_executeActor3*>(this)->SAV<Void>::futures) { (void)(Void()); this->~_executeActor3State(); static_cast<_executeActor3*>(this)->destroy(); return 0; }
															#line 20912 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<_executeActor3*>(this)->SAV< Void >::value()) Void(Void());
		this->~_executeActor3State();
		static_cast<_executeActor3*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont2(Void && _,int loopDepth) 
	{
															#line 2619 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent(SevInfo, "FileBackupWroteSnapshotManifest") .detail("BackupUID", config.getUid()) .detail("BeginVersion", minVer) .detail("EndVersion", maxVer) .detail("TotalBytes", totalBytes);
															#line 2625 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<_executeActor3*>(this)->SAV<Void>::futures) { (void)(Void()); this->~_executeActor3State(); static_cast<_executeActor3*>(this)->destroy(); return 0; }
															#line 20926 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<_executeActor3*>(this)->SAV< Void >::value()) Void(Void());
		this->~_executeActor3State();
		static_cast<_executeActor3*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose5() 
	{
		if (static_cast<_executeActor3*>(this)->actor_wait_state > 0) static_cast<_executeActor3*>(this)->actor_wait_state = 0;
		static_cast<_executeActor3*>(this)->ActorCallback< _executeActor3, 4, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor3, 4, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_fire(ActorCallback< _executeActor3, 4, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_error(ActorCallback< _executeActor3, 4, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 4);

	}
															#line 2531 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Database cx;
															#line 2531 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskBucket> taskBucket;
															#line 2531 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<FutureBucket> futureBucket;
															#line 2531 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<Task> task;
															#line 2535 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	BackupConfig config;
															#line 2536 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<IBackupContainer> bc;
															#line 2538 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 2542 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	std::map<Key, BackupConfig::RangeSlice> localmap;
															#line 2543 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Key startKey;
															#line 2544 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int batchSize;
															#line 2578 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Version maxVer;
															#line 2579 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Version minVer;
															#line 2580 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int64_t totalBytes;
															#line 21023 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via _execute()
															#line 2531 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class _executeActor3 final : public Actor<Void>, public ActorCallback< _executeActor3, 0, Void >, public ActorCallback< _executeActor3, 1, Reference<IBackupContainer> >, public ActorCallback< _executeActor3, 2, BackupConfig::RangeFileMapT::PairsType >, public ActorCallback< _executeActor3, 3, Void >, public ActorCallback< _executeActor3, 4, Void >, public FastAllocated<_executeActor3>, public _executeActor3State<_executeActor3> {
															#line 21028 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<_executeActor3>::operator new;
	using FastAllocated<_executeActor3>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< _executeActor3, 0, Void >;
friend struct ActorCallback< _executeActor3, 1, Reference<IBackupContainer> >;
friend struct ActorCallback< _executeActor3, 2, BackupConfig::RangeFileMapT::PairsType >;
friend struct ActorCallback< _executeActor3, 3, Void >;
friend struct ActorCallback< _executeActor3, 4, Void >;
															#line 2531 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	_executeActor3(Database const& cx,Reference<TaskBucket> const& taskBucket,Reference<FutureBucket> const& futureBucket,Reference<Task> const& task) 
															#line 21043 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<Void>(),
		   _executeActor3State<_executeActor3>(cx, taskBucket, futureBucket, task)
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("_execute");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< _executeActor3, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< _executeActor3, 1, Reference<IBackupContainer> >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< _executeActor3, 2, BackupConfig::RangeFileMapT::PairsType >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< _executeActor3, 3, Void >*)0, actor_cancelled()); break;
		case 5: this->a_callback_error((ActorCallback< _executeActor3, 4, Void >*)0, actor_cancelled()); break;
		}

	}
};
															#line 2531 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<Void> _execute( Database const& cx, Reference<TaskBucket> const& taskBucket, Reference<FutureBucket> const& futureBucket, Reference<Task> const& task ) {
															#line 2531 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<Void>(new _executeActor3(cx, taskBucket, futureBucket, task));
															#line 21074 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 2627 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

																#line 21079 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via _finish()
															#line 2628 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class _finishActor8>
															#line 2628 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class _finishActor8State {
															#line 21085 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 2628 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	_finishActor8State(Reference<ReadYourWritesTransaction> const& tr,Reference<TaskBucket> const& taskBucket,Reference<FutureBucket> const& futureBucket,Reference<Task> const& task) 
															#line 2628 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 2628 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : tr(tr),
															#line 2628 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   taskBucket(taskBucket),
															#line 2628 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   futureBucket(futureBucket),
															#line 2628 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   task(task)
															#line 21098 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("_finish", reinterpret_cast<unsigned long>(this));

	}
	~_finishActor8State() 
	{
		fdb_probe_actor_destroy("_finish", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 2632 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_0 = checkTaskVersion(tr->getDatabase(), task, BackupSnapshotManifest::name, BackupSnapshotManifest::version);
															#line 2632 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_finishActor8*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 21115 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<_finishActor8*>(this)->actor_wait_state = 1;
															#line 2632 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< _finishActor8, 0, Void >*>(static_cast<_finishActor8*>(this)));
															#line 21120 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~_finishActor8State();
		static_cast<_finishActor8*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void const& _,int loopDepth) 
	{
															#line 2634 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		config = BackupConfig(task);
															#line 2637 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		config.latestSnapshotEndVersion().set(tr, Params.endVersion().get(task));
															#line 2639 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		stopWhenDone = bool();
															#line 2640 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		backupState = EBackupState();
															#line 2641 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		restorableVersion = Optional<Version>();
															#line 2642 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		firstSnapshotEndVersion = Optional<Version>();
															#line 2643 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tag = Optional<std::string>();
															#line 2645 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_1 = store(stopWhenDone, config.stopWhenDone().getOrThrow(tr)) && store(backupState, config.stateEnum().getOrThrow(tr)) && store(restorableVersion, config.getLatestRestorableVersion(tr)) && store(firstSnapshotEndVersion, config.firstSnapshotEndVersion().get(tr)) && store(tag, config.tag().get(tr));
															#line 2645 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_finishActor8*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 21159 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<_finishActor8*>(this)->actor_wait_state = 2;
															#line 2645 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< _finishActor8, 1, Void >*>(static_cast<_finishActor8*>(this)));
															#line 21164 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void && _,int loopDepth) 
	{
															#line 2634 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		config = BackupConfig(task);
															#line 2637 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		config.latestSnapshotEndVersion().set(tr, Params.endVersion().get(task));
															#line 2639 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		stopWhenDone = bool();
															#line 2640 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		backupState = EBackupState();
															#line 2641 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		restorableVersion = Optional<Version>();
															#line 2642 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		firstSnapshotEndVersion = Optional<Version>();
															#line 2643 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tag = Optional<std::string>();
															#line 2645 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_1 = store(stopWhenDone, config.stopWhenDone().getOrThrow(tr)) && store(backupState, config.stateEnum().getOrThrow(tr)) && store(restorableVersion, config.getLatestRestorableVersion(tr)) && store(firstSnapshotEndVersion, config.firstSnapshotEndVersion().get(tr)) && store(tag, config.tag().get(tr));
															#line 2645 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_finishActor8*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 21189 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<_finishActor8*>(this)->actor_wait_state = 2;
															#line 2645 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< _finishActor8, 1, Void >*>(static_cast<_finishActor8*>(this)));
															#line 21194 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<_finishActor8*>(this)->actor_wait_state > 0) static_cast<_finishActor8*>(this)->actor_wait_state = 0;
		static_cast<_finishActor8*>(this)->ActorCallback< _finishActor8, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor8, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< _finishActor8, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< _finishActor8, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont2(Void const& _,int loopDepth) 
	{
															#line 2652 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (restorableVersion.present() && tag.present())
															#line 21266 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 2653 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			FileBackupAgent().setLastRestorable(tr, StringRef(tag.get()), restorableVersion.get());
															#line 21270 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 2656 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!firstSnapshotEndVersion.present())
															#line 21274 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 2657 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			config.firstSnapshotEndVersion().set(tr, Params.endVersion().get(task));
															#line 21278 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 2661 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (restorableVersion.present() && backupState != EBackupState::STATE_RUNNING_DIFFERENTIAL)
															#line 21282 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 2662 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			config.stateEnum().set(tr, EBackupState::STATE_RUNNING_DIFFERENTIAL);
															#line 21286 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 2665 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		Reference<TaskFuture> snapshotDoneFuture = task->getDoneFuture(futureBucket);
															#line 2666 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!stopWhenDone)
															#line 21292 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 2667 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_2 = config.initNewSnapshot(tr) && success(BackupSnapshotDispatchTask::addTask( tr, taskBucket, task, 1, TaskCompletionKey::signal(snapshotDoneFuture)));
															#line 2667 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_finishActor8*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 21298 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont2when1(__when_expr_2.get(), loopDepth); };
			static_cast<_finishActor8*>(this)->actor_wait_state = 3;
															#line 2667 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< _finishActor8, 2, Void >*>(static_cast<_finishActor8*>(this)));
															#line 21303 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
															#line 2672 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_3 = snapshotDoneFuture->set(tr, taskBucket);
															#line 2672 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_finishActor8*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 21312 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1cont2when2(__when_expr_3.get(), loopDepth); };
			static_cast<_finishActor8*>(this)->actor_wait_state = 4;
															#line 2672 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< _finishActor8, 3, Void >*>(static_cast<_finishActor8*>(this)));
															#line 21317 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}

		return loopDepth;
	}
	int a_body1cont2(Void && _,int loopDepth) 
	{
															#line 2652 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (restorableVersion.present() && tag.present())
															#line 21327 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 2653 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			FileBackupAgent().setLastRestorable(tr, StringRef(tag.get()), restorableVersion.get());
															#line 21331 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 2656 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!firstSnapshotEndVersion.present())
															#line 21335 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 2657 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			config.firstSnapshotEndVersion().set(tr, Params.endVersion().get(task));
															#line 21339 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 2661 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (restorableVersion.present() && backupState != EBackupState::STATE_RUNNING_DIFFERENTIAL)
															#line 21343 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 2662 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			config.stateEnum().set(tr, EBackupState::STATE_RUNNING_DIFFERENTIAL);
															#line 21347 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 2665 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		Reference<TaskFuture> snapshotDoneFuture = task->getDoneFuture(futureBucket);
															#line 2666 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!stopWhenDone)
															#line 21353 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 2667 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_2 = config.initNewSnapshot(tr) && success(BackupSnapshotDispatchTask::addTask( tr, taskBucket, task, 1, TaskCompletionKey::signal(snapshotDoneFuture)));
															#line 2667 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_finishActor8*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 21359 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont2when1(__when_expr_2.get(), loopDepth); };
			static_cast<_finishActor8*>(this)->actor_wait_state = 3;
															#line 2667 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< _finishActor8, 2, Void >*>(static_cast<_finishActor8*>(this)));
															#line 21364 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
															#line 2672 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_3 = snapshotDoneFuture->set(tr, taskBucket);
															#line 2672 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_finishActor8*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 21373 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1cont2when2(__when_expr_3.get(), loopDepth); };
			static_cast<_finishActor8*>(this)->actor_wait_state = 4;
															#line 2672 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< _finishActor8, 3, Void >*>(static_cast<_finishActor8*>(this)));
															#line 21378 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}

		return loopDepth;
	}
	int a_body1cont1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<_finishActor8*>(this)->actor_wait_state > 0) static_cast<_finishActor8*>(this)->actor_wait_state = 0;
		static_cast<_finishActor8*>(this)->ActorCallback< _finishActor8, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor8, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< _finishActor8, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< _finishActor8, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont3(int loopDepth) 
	{
															#line 2675 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_4 = taskBucket->finish(tr, task);
															#line 2675 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_finishActor8*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 21453 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1Catch1(__when_expr_4.getError(), loopDepth); else return a_body1cont3when1(__when_expr_4.get(), loopDepth); };
		static_cast<_finishActor8*>(this)->actor_wait_state = 5;
															#line 2675 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< _finishActor8, 4, Void >*>(static_cast<_finishActor8*>(this)));
															#line 21458 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont7(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1cont7(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont7(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont7(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<_finishActor8*>(this)->actor_wait_state > 0) static_cast<_finishActor8*>(this)->actor_wait_state = 0;
		static_cast<_finishActor8*>(this)->ActorCallback< _finishActor8, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor8, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< _finishActor8, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< _finishActor8, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1cont8(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1cont8(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1cont2when2(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont8(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont2when2(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont8(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<_finishActor8*>(this)->actor_wait_state > 0) static_cast<_finishActor8*>(this)->actor_wait_state = 0;
		static_cast<_finishActor8*>(this)->ActorCallback< _finishActor8, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor8, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont2when2(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< _finishActor8, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont2when2(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< _finishActor8, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 3);

	}
	int a_body1cont9(Void const& _,int loopDepth) 
	{
															#line 2676 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<_finishActor8*>(this)->SAV<Void>::futures) { (void)(Void()); this->~_finishActor8State(); static_cast<_finishActor8*>(this)->destroy(); return 0; }
															#line 21617 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<_finishActor8*>(this)->SAV< Void >::value()) Void(Void());
		this->~_finishActor8State();
		static_cast<_finishActor8*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont9(Void && _,int loopDepth) 
	{
															#line 2676 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<_finishActor8*>(this)->SAV<Void>::futures) { (void)(Void()); this->~_finishActor8State(); static_cast<_finishActor8*>(this)->destroy(); return 0; }
															#line 21629 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<_finishActor8*>(this)->SAV< Void >::value()) Void(Void());
		this->~_finishActor8State();
		static_cast<_finishActor8*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont3when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont9(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont3when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont9(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose5() 
	{
		if (static_cast<_finishActor8*>(this)->actor_wait_state > 0) static_cast<_finishActor8*>(this)->actor_wait_state = 0;
		static_cast<_finishActor8*>(this)->ActorCallback< _finishActor8, 4, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor8, 4, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont3when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_fire(ActorCallback< _finishActor8, 4, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont3when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_error(ActorCallback< _finishActor8, 4, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 4);

	}
															#line 2628 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 2628 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskBucket> taskBucket;
															#line 2628 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<FutureBucket> futureBucket;
															#line 2628 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<Task> task;
															#line 2634 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	BackupConfig config;
															#line 2639 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	bool stopWhenDone;
															#line 2640 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	EBackupState backupState;
															#line 2641 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Optional<Version> restorableVersion;
															#line 2642 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Optional<Version> firstSnapshotEndVersion;
															#line 2643 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Optional<std::string> tag;
															#line 21720 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via _finish()
															#line 2628 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class _finishActor8 final : public Actor<Void>, public ActorCallback< _finishActor8, 0, Void >, public ActorCallback< _finishActor8, 1, Void >, public ActorCallback< _finishActor8, 2, Void >, public ActorCallback< _finishActor8, 3, Void >, public ActorCallback< _finishActor8, 4, Void >, public FastAllocated<_finishActor8>, public _finishActor8State<_finishActor8> {
															#line 21725 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<_finishActor8>::operator new;
	using FastAllocated<_finishActor8>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< _finishActor8, 0, Void >;
friend struct ActorCallback< _finishActor8, 1, Void >;
friend struct ActorCallback< _finishActor8, 2, Void >;
friend struct ActorCallback< _finishActor8, 3, Void >;
friend struct ActorCallback< _finishActor8, 4, Void >;
															#line 2628 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	_finishActor8(Reference<ReadYourWritesTransaction> const& tr,Reference<TaskBucket> const& taskBucket,Reference<FutureBucket> const& futureBucket,Reference<Task> const& task) 
															#line 21740 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<Void>(),
		   _finishActor8State<_finishActor8>(tr, taskBucket, futureBucket, task)
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("_finish");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< _finishActor8, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< _finishActor8, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< _finishActor8, 2, Void >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< _finishActor8, 3, Void >*)0, actor_cancelled()); break;
		case 5: this->a_callback_error((ActorCallback< _finishActor8, 4, Void >*)0, actor_cancelled()); break;
		}

	}
};
															#line 2628 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<Void> _finish( Reference<ReadYourWritesTransaction> const& tr, Reference<TaskBucket> const& taskBucket, Reference<FutureBucket> const& futureBucket, Reference<Task> const& task ) {
															#line 2628 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<Void>(new _finishActor8(tr, taskBucket, futureBucket, task));
															#line 21771 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 2678 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

																#line 21776 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via addTask()
															#line 2679 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class AddTaskActor6>
															#line 2679 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class AddTaskActor6State {
															#line 21782 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 2679 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	AddTaskActor6State(Reference<ReadYourWritesTransaction> const& tr,Reference<TaskBucket> const& taskBucket,Reference<Task> const& parentTask,TaskCompletionKey const& completionKey,Reference<TaskFuture> const& waitFor = Reference<TaskFuture>()) 
															#line 2679 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 2679 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : tr(tr),
															#line 2679 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   taskBucket(taskBucket),
															#line 2679 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   parentTask(parentTask),
															#line 2679 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   completionKey(completionKey),
															#line 2679 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   waitFor(waitFor)
															#line 21797 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("addTask", reinterpret_cast<unsigned long>(this));

	}
	~AddTaskActor6State() 
	{
		fdb_probe_actor_destroy("addTask", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 2684 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Key> __when_expr_0 = addBackupTask(BackupSnapshotManifest::name, BackupSnapshotManifest::version, tr, taskBucket, completionKey, BackupConfig(parentTask), waitFor, NOP_SETUP_TASK_FN, 1);
															#line 2684 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<AddTaskActor6*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 21814 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<AddTaskActor6*>(this)->actor_wait_state = 1;
															#line 2684 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< AddTaskActor6, 0, Key >*>(static_cast<AddTaskActor6*>(this)));
															#line 21819 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~AddTaskActor6State();
		static_cast<AddTaskActor6*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Key const& key,int loopDepth) 
	{
															#line 2693 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<AddTaskActor6*>(this)->SAV<Key>::futures) { (void)(key); this->~AddTaskActor6State(); static_cast<AddTaskActor6*>(this)->destroy(); return 0; }
															#line 21842 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<AddTaskActor6*>(this)->SAV< Key >::value()) Key(key);
		this->~AddTaskActor6State();
		static_cast<AddTaskActor6*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1(Key && key,int loopDepth) 
	{
															#line 2693 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<AddTaskActor6*>(this)->SAV<Key>::futures) { (void)(key); this->~AddTaskActor6State(); static_cast<AddTaskActor6*>(this)->destroy(); return 0; }
															#line 21854 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<AddTaskActor6*>(this)->SAV< Key >::value()) Key(key);
		this->~AddTaskActor6State();
		static_cast<AddTaskActor6*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1when1(Key const& key,int loopDepth) 
	{
		loopDepth = a_body1cont1(key, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Key && key,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(key), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<AddTaskActor6*>(this)->actor_wait_state > 0) static_cast<AddTaskActor6*>(this)->actor_wait_state = 0;
		static_cast<AddTaskActor6*>(this)->ActorCallback< AddTaskActor6, 0, Key >::remove();

	}
	void a_callback_fire(ActorCallback< AddTaskActor6, 0, Key >*,Key const& value) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< AddTaskActor6, 0, Key >*,Key && value) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< AddTaskActor6, 0, Key >*,Error err) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 2679 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 2679 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskBucket> taskBucket;
															#line 2679 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<Task> parentTask;
															#line 2679 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	TaskCompletionKey completionKey;
															#line 2679 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskFuture> waitFor;
															#line 21935 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via addTask()
															#line 2679 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class AddTaskActor6 final : public Actor<Key>, public ActorCallback< AddTaskActor6, 0, Key >, public FastAllocated<AddTaskActor6>, public AddTaskActor6State<AddTaskActor6> {
															#line 21940 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<AddTaskActor6>::operator new;
	using FastAllocated<AddTaskActor6>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Key>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< AddTaskActor6, 0, Key >;
															#line 2679 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	AddTaskActor6(Reference<ReadYourWritesTransaction> const& tr,Reference<TaskBucket> const& taskBucket,Reference<Task> const& parentTask,TaskCompletionKey const& completionKey,Reference<TaskFuture> const& waitFor = Reference<TaskFuture>()) 
															#line 21951 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<Key>(),
		   AddTaskActor6State<AddTaskActor6>(tr, taskBucket, parentTask, completionKey, waitFor)
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("addTask");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< AddTaskActor6, 0, Key >*)0, actor_cancelled()); break;
		}

	}
};
															#line 2679 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<Key> addTask( Reference<ReadYourWritesTransaction> const& tr, Reference<TaskBucket> const& taskBucket, Reference<Task> const& parentTask, TaskCompletionKey const& completionKey, Reference<TaskFuture> const& waitFor = Reference<TaskFuture>() ) {
															#line 2679 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<Key>(new AddTaskActor6(tr, taskBucket, parentTask, completionKey, waitFor));
															#line 21978 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 2695 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

	StringRef getName() const override { return name; };

	Future<Void> execute(Database cx,
	                     Reference<TaskBucket> tb,
	                     Reference<FutureBucket> fb,
	                     Reference<Task> task) override {
		return _execute(cx, tb, fb, task);
	};
	Future<Void> finish(Reference<ReadYourWritesTransaction> tr,
	                    Reference<TaskBucket> tb,
	                    Reference<FutureBucket> fb,
	                    Reference<Task> task) override {
		return _finish(tr, tb, fb, task);
	};
};
StringRef BackupSnapshotManifest::name = LiteralStringRef("file_backup_write_snapshot_manifest_5.2");
REGISTER_TASKFUNC(BackupSnapshotManifest);

Future<Key> BackupSnapshotDispatchTask::addSnapshotManifestTask(Reference<ReadYourWritesTransaction> tr,
                                                                Reference<TaskBucket> taskBucket,
                                                                Reference<Task> parentTask,
                                                                TaskCompletionKey completionKey,
                                                                Reference<TaskFuture> waitFor) {
	return BackupSnapshotManifest::addTask(tr, taskBucket, parentTask, completionKey, waitFor);
}

struct StartFullBackupTaskFunc : BackupTaskFuncBase {
	static StringRef name;
	static constexpr uint32_t version = 1;

	static struct {
		static TaskParam<Version> beginVersion() { return LiteralStringRef(__FUNCTION__); }
	} Params;

																#line 22017 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via _execute()
															#line 2730 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class _executeActor4>
															#line 2730 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class _executeActor4State {
															#line 22023 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 2730 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	_executeActor4State(Database const& cx,Reference<TaskBucket> const& taskBucket,Reference<FutureBucket> const& futureBucket,Reference<Task> const& task) 
															#line 2730 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 2730 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : cx(cx),
															#line 2730 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   taskBucket(taskBucket),
															#line 2730 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   futureBucket(futureBucket),
															#line 2730 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   task(task)
															#line 22036 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("_execute", reinterpret_cast<unsigned long>(this));

	}
	~_executeActor4State() 
	{
		fdb_probe_actor_destroy("_execute", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 2734 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_0 = checkTaskVersion(cx, task, StartFullBackupTaskFunc::name, StartFullBackupTaskFunc::version);
															#line 2734 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_executeActor4*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 22053 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<_executeActor4*>(this)->actor_wait_state = 1;
															#line 2734 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< _executeActor4, 0, Void >*>(static_cast<_executeActor4*>(this)));
															#line 22058 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~_executeActor4State();
		static_cast<_executeActor4*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void const& _,int loopDepth) 
	{
															#line 2736 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr = Reference<ReadYourWritesTransaction>(new ReadYourWritesTransaction(cx));
															#line 2737 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		config = BackupConfig(task);
															#line 2738 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		partitionedLog = Future<Optional<bool>>();
															#line 2739 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		;
															#line 22087 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont1loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1(Void && _,int loopDepth) 
	{
															#line 2736 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr = Reference<ReadYourWritesTransaction>(new ReadYourWritesTransaction(cx));
															#line 2737 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		config = BackupConfig(task);
															#line 2738 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		partitionedLog = Future<Optional<bool>>();
															#line 2739 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		;
															#line 22102 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont1loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<_executeActor4*>(this)->actor_wait_state > 0) static_cast<_executeActor4*>(this)->actor_wait_state = 0;
		static_cast<_executeActor4*>(this)->ActorCallback< _executeActor4, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor4, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< _executeActor4, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< _executeActor4, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont2(int loopDepth) 
	{
															#line 2755 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<DatabaseConfiguration> __when_expr_3 = getDatabaseConfiguration(cx);
															#line 2755 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor4*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 22176 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1cont2when1(__when_expr_3.get(), loopDepth); };
		static_cast<_executeActor4*>(this)->actor_wait_state = 4;
															#line 2755 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< _executeActor4, 3, DatabaseConfiguration >*>(static_cast<_executeActor4*>(this)));
															#line 22181 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1cont1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1(int loopDepth) 
	{
		try {
															#line 2741 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 2742 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 2743 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			partitionedLog = config.partitionedLogEnabled().get(tr);
															#line 2744 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			startVersionFuture = tr->getReadVersion();
															#line 2745 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_1 = success(partitionedLog) && success(startVersionFuture);
															#line 2745 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_executeActor4*>(this)->actor_wait_state < 0) return a_body1cont1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 22208 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1cont1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1loopBody1when1(__when_expr_1.get(), loopDepth); };
			static_cast<_executeActor4*>(this)->actor_wait_state = 2;
															#line 2745 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< _executeActor4, 1, Void >*>(static_cast<_executeActor4*>(this)));
															#line 22213 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1cont1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1cont1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont1break1(int loopDepth) 
	{
		try {
			return a_body1cont2(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1cont1loopHead1(0);

		return loopDepth;
	}
	int a_body1cont1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 2750 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_2 = tr->onError(e);
															#line 2750 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_executeActor4*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 22250 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), std::max(0, loopDepth - 1)); else return a_body1cont1loopBody1Catch1when1(__when_expr_2.get(), loopDepth); };
			static_cast<_executeActor4*>(this)->actor_wait_state = 3;
															#line 2750 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< _executeActor4, 2, Void >*>(static_cast<_executeActor4*>(this)));
															#line 22255 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1cont1loopBody1cont2(Void const& _,int loopDepth) 
	{
															#line 2747 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		Params.beginVersion().set(task, startVersionFuture.get());
															#line 22270 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		return a_body1cont1break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1cont1loopBody1cont2(Void && _,int loopDepth) 
	{
															#line 2747 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		Params.beginVersion().set(task, startVersionFuture.get());
															#line 22279 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		return a_body1cont1break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1cont1loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<_executeActor4*>(this)->actor_wait_state > 0) static_cast<_executeActor4*>(this)->actor_wait_state = 0;
		static_cast<_executeActor4*>(this)->ActorCallback< _executeActor4, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor4, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< _executeActor4, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< _executeActor4, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont1loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<_executeActor4*>(this)->actor_wait_state > 0) static_cast<_executeActor4*>(this)->actor_wait_state = 0;
		static_cast<_executeActor4*>(this)->ActorCallback< _executeActor4, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor4, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< _executeActor4, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< _executeActor4, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1cont3(DatabaseConfiguration const& dbConfig,int loopDepth) 
	{
															#line 2756 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		backupWorkerEnabled = dbConfig.backupWorkerEnabled;
															#line 2757 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!backupWorkerEnabled && partitionedLog.get().present() && partitionedLog.get().get())
															#line 22428 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 2760 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_4 = success(ManagementAPI::changeConfig(cx.getReference(), "backup_worker_enabled:=1", true));
															#line 2760 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_executeActor4*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 22434 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1Catch1(__when_expr_4.getError(), loopDepth); else return a_body1cont3when1(__when_expr_4.get(), loopDepth); };
			static_cast<_executeActor4*>(this)->actor_wait_state = 5;
															#line 2760 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< _executeActor4, 4, Void >*>(static_cast<_executeActor4*>(this)));
															#line 22439 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1cont4(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont3(DatabaseConfiguration && dbConfig,int loopDepth) 
	{
															#line 2756 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		backupWorkerEnabled = dbConfig.backupWorkerEnabled;
															#line 2757 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!backupWorkerEnabled && partitionedLog.get().present() && partitionedLog.get().get())
															#line 22455 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 2760 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_4 = success(ManagementAPI::changeConfig(cx.getReference(), "backup_worker_enabled:=1", true));
															#line 2760 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_executeActor4*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 22461 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1Catch1(__when_expr_4.getError(), loopDepth); else return a_body1cont3when1(__when_expr_4.get(), loopDepth); };
			static_cast<_executeActor4*>(this)->actor_wait_state = 5;
															#line 2760 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< _executeActor4, 4, Void >*>(static_cast<_executeActor4*>(this)));
															#line 22466 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1cont4(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont2when1(DatabaseConfiguration const& dbConfig,int loopDepth) 
	{
		loopDepth = a_body1cont3(dbConfig, loopDepth);

		return loopDepth;
	}
	int a_body1cont2when1(DatabaseConfiguration && dbConfig,int loopDepth) 
	{
		loopDepth = a_body1cont3(std::move(dbConfig), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<_executeActor4*>(this)->actor_wait_state > 0) static_cast<_executeActor4*>(this)->actor_wait_state = 0;
		static_cast<_executeActor4*>(this)->ActorCallback< _executeActor4, 3, DatabaseConfiguration >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor4, 3, DatabaseConfiguration >*,DatabaseConfiguration const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< _executeActor4, 3, DatabaseConfiguration >*,DatabaseConfiguration && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< _executeActor4, 3, DatabaseConfiguration >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 3);

	}
	int a_body1cont4(int loopDepth) 
	{
															#line 2765 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr->reset();
															#line 2766 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		;
															#line 22545 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont4loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1cont5(Void const& _,int loopDepth) 
	{
															#line 2761 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		backupWorkerEnabled = true;
															#line 22554 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont4(loopDepth);

		return loopDepth;
	}
	int a_body1cont5(Void && _,int loopDepth) 
	{
															#line 2761 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		backupWorkerEnabled = true;
															#line 22563 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont4(loopDepth);

		return loopDepth;
	}
	int a_body1cont3when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont5(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont3when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont5(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose5() 
	{
		if (static_cast<_executeActor4*>(this)->actor_wait_state > 0) static_cast<_executeActor4*>(this)->actor_wait_state = 0;
		static_cast<_executeActor4*>(this)->ActorCallback< _executeActor4, 4, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor4, 4, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont3when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_fire(ActorCallback< _executeActor4, 4, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont3when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_error(ActorCallback< _executeActor4, 4, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 4);

	}
	int a_body1cont4loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1cont4loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1cont4loopBody1(int loopDepth) 
	{
															#line 2767 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		watchFuture = Future<Void>();
															#line 22642 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		try {
															#line 2769 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 2770 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 2771 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			keepRunning = taskBucket->keepRunning(tr, task);
															#line 2773 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			started = tr->get(backupStartedKey);
															#line 2774 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			taskStarted = tr->get(config.allWorkerStarted().key);
															#line 2775 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			partitionedLog = config.partitionedLogEnabled().get(tr);
															#line 2776 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_5 = success(started) && success(taskStarted) && success(partitionedLog);
															#line 2776 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_executeActor4*>(this)->actor_wait_state < 0) return a_body1cont4loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 22660 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_5.isReady()) { if (__when_expr_5.isError()) return a_body1cont4loopBody1Catch1(__when_expr_5.getError(), loopDepth); else return a_body1cont4loopBody1when1(__when_expr_5.get(), loopDepth); };
			static_cast<_executeActor4*>(this)->actor_wait_state = 6;
															#line 2776 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_5.addCallbackAndClear(static_cast<ActorCallback< _executeActor4, 5, Void >*>(static_cast<_executeActor4*>(this)));
															#line 22665 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1cont4loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1cont4loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont4loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1cont4loopHead1(0);

		return loopDepth;
	}
	int a_body1cont4loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 2812 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_9 = tr->onError(e);
															#line 2812 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_executeActor4*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 22689 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_9.isReady()) { if (__when_expr_9.isError()) return a_body1Catch1(__when_expr_9.getError(), std::max(0, loopDepth - 1)); else return a_body1cont4loopBody1Catch1when1(__when_expr_9.get(), loopDepth); };
			static_cast<_executeActor4*>(this)->actor_wait_state = 10;
															#line 2812 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_9.addCallbackAndClear(static_cast<ActorCallback< _executeActor4, 9, Void >*>(static_cast<_executeActor4*>(this)));
															#line 22694 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1cont4loopBody1cont2(Void const& _,int loopDepth) 
	{
															#line 2778 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!partitionedLog.get().present() || !partitionedLog.get().get())
															#line 22709 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 2779 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (!static_cast<_executeActor4*>(this)->SAV<Void>::futures) { (void)(Void()); this->~_executeActor4State(); static_cast<_executeActor4*>(this)->destroy(); return 0; }
															#line 22713 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			new (&static_cast<_executeActor4*>(this)->SAV< Void >::value()) Void(Void());
			this->~_executeActor4State();
			static_cast<_executeActor4*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 2782 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		std::vector<std::pair<UID, Version>> ids;
															#line 2783 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (started.get().present())
															#line 22723 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 2784 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			ids = decodeBackupStartedValue(started.get().get());
															#line 22727 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 2786 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		const UID uid = config.getUid();
															#line 2787 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		auto it = std::find_if( ids.begin(), ids.end(), [uid](const std::pair<UID, Version>& p) { return p.first == uid; });
															#line 2789 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (it == ids.end())
															#line 22735 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 2790 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			ids.emplace_back(uid, Params.beginVersion().get(task));
															#line 22739 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
		else
		{
															#line 2792 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			Params.beginVersion().set(task, it->second);
															#line 22745 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 2795 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr->set(backupStartedKey, encodeBackupStartedValue(ids));
															#line 2796 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (backupWorkerEnabled)
															#line 22751 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 2797 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			config.backupWorkerEnabled().set(tr, true);
															#line 22755 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 2801 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!taskStarted.get().present())
															#line 22759 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 2802 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			watchFuture = tr->watch(config.allWorkerStarted().key);
															#line 22763 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 2805 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_6 = keepRunning;
															#line 2805 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor4*>(this)->actor_wait_state < 0) return a_body1cont4loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 22769 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_6.isReady()) { if (__when_expr_6.isError()) return a_body1cont4loopBody1Catch1(__when_expr_6.getError(), loopDepth); else return a_body1cont4loopBody1cont2when1(__when_expr_6.get(), loopDepth); };
		static_cast<_executeActor4*>(this)->actor_wait_state = 7;
															#line 2805 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_6.addCallbackAndClear(static_cast<ActorCallback< _executeActor4, 6, Void >*>(static_cast<_executeActor4*>(this)));
															#line 22774 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont4loopBody1cont2(Void && _,int loopDepth) 
	{
															#line 2778 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!partitionedLog.get().present() || !partitionedLog.get().get())
															#line 22783 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 2779 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (!static_cast<_executeActor4*>(this)->SAV<Void>::futures) { (void)(Void()); this->~_executeActor4State(); static_cast<_executeActor4*>(this)->destroy(); return 0; }
															#line 22787 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			new (&static_cast<_executeActor4*>(this)->SAV< Void >::value()) Void(Void());
			this->~_executeActor4State();
			static_cast<_executeActor4*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 2782 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		std::vector<std::pair<UID, Version>> ids;
															#line 2783 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (started.get().present())
															#line 22797 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 2784 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			ids = decodeBackupStartedValue(started.get().get());
															#line 22801 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 2786 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		const UID uid = config.getUid();
															#line 2787 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		auto it = std::find_if( ids.begin(), ids.end(), [uid](const std::pair<UID, Version>& p) { return p.first == uid; });
															#line 2789 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (it == ids.end())
															#line 22809 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 2790 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			ids.emplace_back(uid, Params.beginVersion().get(task));
															#line 22813 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
		else
		{
															#line 2792 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			Params.beginVersion().set(task, it->second);
															#line 22819 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 2795 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr->set(backupStartedKey, encodeBackupStartedValue(ids));
															#line 2796 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (backupWorkerEnabled)
															#line 22825 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 2797 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			config.backupWorkerEnabled().set(tr, true);
															#line 22829 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 2801 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!taskStarted.get().present())
															#line 22833 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 2802 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			watchFuture = tr->watch(config.allWorkerStarted().key);
															#line 22837 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 2805 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_6 = keepRunning;
															#line 2805 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor4*>(this)->actor_wait_state < 0) return a_body1cont4loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 22843 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_6.isReady()) { if (__when_expr_6.isError()) return a_body1cont4loopBody1Catch1(__when_expr_6.getError(), loopDepth); else return a_body1cont4loopBody1cont2when1(__when_expr_6.get(), loopDepth); };
		static_cast<_executeActor4*>(this)->actor_wait_state = 7;
															#line 2805 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_6.addCallbackAndClear(static_cast<ActorCallback< _executeActor4, 6, Void >*>(static_cast<_executeActor4*>(this)));
															#line 22848 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont4loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont4loopBody1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont4loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont4loopBody1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose6() 
	{
		if (static_cast<_executeActor4*>(this)->actor_wait_state > 0) static_cast<_executeActor4*>(this)->actor_wait_state = 0;
		static_cast<_executeActor4*>(this)->ActorCallback< _executeActor4, 5, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor4, 5, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1cont4loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont4loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont4loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_fire(ActorCallback< _executeActor4, 5, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1cont4loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont4loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont4loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_error(ActorCallback< _executeActor4, 5, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1cont4loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont4loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont4loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 5);

	}
	int a_body1cont4loopBody1cont3(Void const& _,int loopDepth) 
	{
															#line 2806 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_7 = tr->commit();
															#line 2806 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor4*>(this)->actor_wait_state < 0) return a_body1cont4loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 22922 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_7.isReady()) { if (__when_expr_7.isError()) return a_body1cont4loopBody1Catch1(__when_expr_7.getError(), loopDepth); else return a_body1cont4loopBody1cont3when1(__when_expr_7.get(), loopDepth); };
		static_cast<_executeActor4*>(this)->actor_wait_state = 8;
															#line 2806 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_7.addCallbackAndClear(static_cast<ActorCallback< _executeActor4, 7, Void >*>(static_cast<_executeActor4*>(this)));
															#line 22927 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont4loopBody1cont3(Void && _,int loopDepth) 
	{
															#line 2806 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_7 = tr->commit();
															#line 2806 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor4*>(this)->actor_wait_state < 0) return a_body1cont4loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 22938 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_7.isReady()) { if (__when_expr_7.isError()) return a_body1cont4loopBody1Catch1(__when_expr_7.getError(), loopDepth); else return a_body1cont4loopBody1cont3when1(__when_expr_7.get(), loopDepth); };
		static_cast<_executeActor4*>(this)->actor_wait_state = 8;
															#line 2806 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_7.addCallbackAndClear(static_cast<ActorCallback< _executeActor4, 7, Void >*>(static_cast<_executeActor4*>(this)));
															#line 22943 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont4loopBody1cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont4loopBody1cont3(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont4loopBody1cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont4loopBody1cont3(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose7() 
	{
		if (static_cast<_executeActor4*>(this)->actor_wait_state > 0) static_cast<_executeActor4*>(this)->actor_wait_state = 0;
		static_cast<_executeActor4*>(this)->ActorCallback< _executeActor4, 6, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor4, 6, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1cont4loopBody1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont4loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont4loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 6);

	}
	void a_callback_fire(ActorCallback< _executeActor4, 6, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1cont4loopBody1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont4loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont4loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 6);

	}
	void a_callback_error(ActorCallback< _executeActor4, 6, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1cont4loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont4loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont4loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 6);

	}
	int a_body1cont4loopBody1cont10(Void const& _,int loopDepth) 
	{
															#line 2807 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!taskStarted.get().present())
															#line 23015 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 2808 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_8 = watchFuture;
															#line 2808 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_executeActor4*>(this)->actor_wait_state < 0) return a_body1cont4loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 23021 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_8.isReady()) { if (__when_expr_8.isError()) return a_body1cont4loopBody1Catch1(__when_expr_8.getError(), loopDepth); else return a_body1cont4loopBody1cont10when1(__when_expr_8.get(), loopDepth); };
			static_cast<_executeActor4*>(this)->actor_wait_state = 9;
															#line 2808 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_8.addCallbackAndClear(static_cast<ActorCallback< _executeActor4, 8, Void >*>(static_cast<_executeActor4*>(this)));
															#line 23026 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1cont4loopBody1cont10cont1(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont4loopBody1cont10(Void && _,int loopDepth) 
	{
															#line 2807 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!taskStarted.get().present())
															#line 23040 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 2808 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_8 = watchFuture;
															#line 2808 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_executeActor4*>(this)->actor_wait_state < 0) return a_body1cont4loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 23046 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_8.isReady()) { if (__when_expr_8.isError()) return a_body1cont4loopBody1Catch1(__when_expr_8.getError(), loopDepth); else return a_body1cont4loopBody1cont10when1(__when_expr_8.get(), loopDepth); };
			static_cast<_executeActor4*>(this)->actor_wait_state = 9;
															#line 2808 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_8.addCallbackAndClear(static_cast<ActorCallback< _executeActor4, 8, Void >*>(static_cast<_executeActor4*>(this)));
															#line 23051 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1cont4loopBody1cont10cont1(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont4loopBody1cont3when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont4loopBody1cont10(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont4loopBody1cont3when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont4loopBody1cont10(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose8() 
	{
		if (static_cast<_executeActor4*>(this)->actor_wait_state > 0) static_cast<_executeActor4*>(this)->actor_wait_state = 0;
		static_cast<_executeActor4*>(this)->ActorCallback< _executeActor4, 7, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor4, 7, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 7);
		a_exitChoose8();
		try {
			a_body1cont4loopBody1cont3when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont4loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont4loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 7);

	}
	void a_callback_fire(ActorCallback< _executeActor4, 7, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 7);
		a_exitChoose8();
		try {
			a_body1cont4loopBody1cont3when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont4loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont4loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 7);

	}
	void a_callback_error(ActorCallback< _executeActor4, 7, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 7);
		a_exitChoose8();
		try {
			a_body1cont4loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont4loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont4loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 7);

	}
	int a_body1cont4loopBody1cont10cont1(int loopDepth) 
	{
															#line 2810 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<_executeActor4*>(this)->SAV<Void>::futures) { (void)(Void()); this->~_executeActor4State(); static_cast<_executeActor4*>(this)->destroy(); return 0; }
															#line 23128 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<_executeActor4*>(this)->SAV< Void >::value()) Void(Void());
		this->~_executeActor4State();
		static_cast<_executeActor4*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont4loopBody1cont10cont2(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont4loopBody1cont10cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont4loopBody1cont10cont2(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont4loopBody1cont10cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont4loopBody1cont10when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont4loopBody1cont10cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont4loopBody1cont10when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont4loopBody1cont10cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose9() 
	{
		if (static_cast<_executeActor4*>(this)->actor_wait_state > 0) static_cast<_executeActor4*>(this)->actor_wait_state = 0;
		static_cast<_executeActor4*>(this)->ActorCallback< _executeActor4, 8, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor4, 8, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 8);
		a_exitChoose9();
		try {
			a_body1cont4loopBody1cont10when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont4loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont4loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 8);

	}
	void a_callback_fire(ActorCallback< _executeActor4, 8, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 8);
		a_exitChoose9();
		try {
			a_body1cont4loopBody1cont10when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont4loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont4loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 8);

	}
	void a_callback_error(ActorCallback< _executeActor4, 8, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 8);
		a_exitChoose9();
		try {
			a_body1cont4loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont4loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont4loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 8);

	}
	int a_body1cont4loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont4loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont4loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont4loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont4loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont4loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont4loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont4loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose10() 
	{
		if (static_cast<_executeActor4*>(this)->actor_wait_state > 0) static_cast<_executeActor4*>(this)->actor_wait_state = 0;
		static_cast<_executeActor4*>(this)->ActorCallback< _executeActor4, 9, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor4, 9, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 9);
		a_exitChoose10();
		try {
			a_body1cont4loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 9);

	}
	void a_callback_fire(ActorCallback< _executeActor4, 9, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 9);
		a_exitChoose10();
		try {
			a_body1cont4loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 9);

	}
	void a_callback_error(ActorCallback< _executeActor4, 9, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 9);
		a_exitChoose10();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 9);

	}
															#line 2730 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Database cx;
															#line 2730 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskBucket> taskBucket;
															#line 2730 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<FutureBucket> futureBucket;
															#line 2730 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<Task> task;
															#line 2736 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 2737 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	BackupConfig config;
															#line 2738 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Future<Optional<bool>> partitionedLog;
															#line 2744 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Future<Version> startVersionFuture;
															#line 2756 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	bool backupWorkerEnabled;
															#line 2767 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Future<Void> watchFuture;
															#line 2771 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Future<Void> keepRunning;
															#line 2773 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Future<Optional<Value>> started;
															#line 2774 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Future<Optional<Value>> taskStarted;
															#line 23312 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via _execute()
															#line 2730 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class _executeActor4 final : public Actor<Void>, public ActorCallback< _executeActor4, 0, Void >, public ActorCallback< _executeActor4, 1, Void >, public ActorCallback< _executeActor4, 2, Void >, public ActorCallback< _executeActor4, 3, DatabaseConfiguration >, public ActorCallback< _executeActor4, 4, Void >, public ActorCallback< _executeActor4, 5, Void >, public ActorCallback< _executeActor4, 6, Void >, public ActorCallback< _executeActor4, 7, Void >, public ActorCallback< _executeActor4, 8, Void >, public ActorCallback< _executeActor4, 9, Void >, public FastAllocated<_executeActor4>, public _executeActor4State<_executeActor4> {
															#line 23317 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<_executeActor4>::operator new;
	using FastAllocated<_executeActor4>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< _executeActor4, 0, Void >;
friend struct ActorCallback< _executeActor4, 1, Void >;
friend struct ActorCallback< _executeActor4, 2, Void >;
friend struct ActorCallback< _executeActor4, 3, DatabaseConfiguration >;
friend struct ActorCallback< _executeActor4, 4, Void >;
friend struct ActorCallback< _executeActor4, 5, Void >;
friend struct ActorCallback< _executeActor4, 6, Void >;
friend struct ActorCallback< _executeActor4, 7, Void >;
friend struct ActorCallback< _executeActor4, 8, Void >;
friend struct ActorCallback< _executeActor4, 9, Void >;
															#line 2730 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	_executeActor4(Database const& cx,Reference<TaskBucket> const& taskBucket,Reference<FutureBucket> const& futureBucket,Reference<Task> const& task) 
															#line 23337 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<Void>(),
		   _executeActor4State<_executeActor4>(cx, taskBucket, futureBucket, task)
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("_execute");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< _executeActor4, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< _executeActor4, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< _executeActor4, 2, Void >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< _executeActor4, 3, DatabaseConfiguration >*)0, actor_cancelled()); break;
		case 5: this->a_callback_error((ActorCallback< _executeActor4, 4, Void >*)0, actor_cancelled()); break;
		case 6: this->a_callback_error((ActorCallback< _executeActor4, 5, Void >*)0, actor_cancelled()); break;
		case 7: this->a_callback_error((ActorCallback< _executeActor4, 6, Void >*)0, actor_cancelled()); break;
		case 8: this->a_callback_error((ActorCallback< _executeActor4, 7, Void >*)0, actor_cancelled()); break;
		case 9: this->a_callback_error((ActorCallback< _executeActor4, 8, Void >*)0, actor_cancelled()); break;
		case 10: this->a_callback_error((ActorCallback< _executeActor4, 9, Void >*)0, actor_cancelled()); break;
		}

	}
};
															#line 2730 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<Void> _execute( Database const& cx, Reference<TaskBucket> const& taskBucket, Reference<FutureBucket> const& futureBucket, Reference<Task> const& task ) {
															#line 2730 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<Void>(new _executeActor4(cx, taskBucket, futureBucket, task));
															#line 23373 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 2816 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

																#line 23378 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via _finish()
															#line 2817 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class _finishActor9>
															#line 2817 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class _finishActor9State {
															#line 23384 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 2817 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	_finishActor9State(Reference<ReadYourWritesTransaction> const& tr,Reference<TaskBucket> const& taskBucket,Reference<FutureBucket> const& futureBucket,Reference<Task> const& task) 
															#line 2817 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 2817 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : tr(tr),
															#line 2817 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   taskBucket(taskBucket),
															#line 2817 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   futureBucket(futureBucket),
															#line 2817 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   task(task),
															#line 2821 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   config(task),
															#line 2822 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   beginVersion(Params.beginVersion().get(task)),
															#line 2824 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   backupRangesFuture(config.backupRanges().getOrThrow(tr)),
															#line 2825 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   destUidValueFuture(config.destUidValue().getOrThrow(tr)),
															#line 2826 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   partitionedLog(config.partitionedLogEnabled().get(tr)),
															#line 2827 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   incrementalBackupOnly(config.incrementalBackupOnly().get(tr))
															#line 23409 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("_finish", reinterpret_cast<unsigned long>(this));

	}
	~_finishActor9State() 
	{
		fdb_probe_actor_destroy("_finish", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 2828 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_0 = success(backupRangesFuture) && success(destUidValueFuture) && success(partitionedLog) && success(incrementalBackupOnly);
															#line 2828 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_finishActor9*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 23426 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<_finishActor9*>(this)->actor_wait_state = 1;
															#line 2828 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< _finishActor9, 0, Void >*>(static_cast<_finishActor9*>(this)));
															#line 23431 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~_finishActor9State();
		static_cast<_finishActor9*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void const& _,int loopDepth) 
	{
															#line 2830 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		std::vector<KeyRange> backupRanges = backupRangesFuture.get();
															#line 2831 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		Key destUidValue = destUidValueFuture.get();
															#line 2834 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!partitionedLog.get().present() || !partitionedLog.get().get())
															#line 23458 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 2835 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			for( auto& backupRange : backupRanges ) {
															#line 2836 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				config.startMutationLogs(tr, backupRange, destUidValue);
															#line 23464 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			}
		}
															#line 2840 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		config.stateEnum().set(tr, EBackupState::STATE_RUNNING);
															#line 2842 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		backupFinished = futureBucket->future(tr);
															#line 2845 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Optional<int64_t>> __when_expr_1 = config.initialSnapshotIntervalSeconds().get(tr);
															#line 2845 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_finishActor9*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 23475 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<_finishActor9*>(this)->actor_wait_state = 2;
															#line 2845 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< _finishActor9, 1, Optional<int64_t> >*>(static_cast<_finishActor9*>(this)));
															#line 23480 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void && _,int loopDepth) 
	{
															#line 2830 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		std::vector<KeyRange> backupRanges = backupRangesFuture.get();
															#line 2831 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		Key destUidValue = destUidValueFuture.get();
															#line 2834 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!partitionedLog.get().present() || !partitionedLog.get().get())
															#line 23493 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 2835 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			for( auto& backupRange : backupRanges ) {
															#line 2836 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				config.startMutationLogs(tr, backupRange, destUidValue);
															#line 23499 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			}
		}
															#line 2840 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		config.stateEnum().set(tr, EBackupState::STATE_RUNNING);
															#line 2842 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		backupFinished = futureBucket->future(tr);
															#line 2845 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Optional<int64_t>> __when_expr_1 = config.initialSnapshotIntervalSeconds().get(tr);
															#line 2845 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_finishActor9*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 23510 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<_finishActor9*>(this)->actor_wait_state = 2;
															#line 2845 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< _finishActor9, 1, Optional<int64_t> >*>(static_cast<_finishActor9*>(this)));
															#line 23515 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<_finishActor9*>(this)->actor_wait_state > 0) static_cast<_finishActor9*>(this)->actor_wait_state = 0;
		static_cast<_finishActor9*>(this)->ActorCallback< _finishActor9, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor9, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< _finishActor9, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< _finishActor9, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont2(int loopDepth) 
	{
															#line 2846 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_2 = config.initNewSnapshot(tr, initialSnapshotIntervalSeconds.orDefault(0));
															#line 2846 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_finishActor9*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 23589 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont2when1(__when_expr_2.get(), loopDepth); };
		static_cast<_finishActor9*>(this)->actor_wait_state = 3;
															#line 2846 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< _finishActor9, 2, Void >*>(static_cast<_finishActor9*>(this)));
															#line 23594 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1when1(Optional<int64_t> const& __initialSnapshotIntervalSeconds,int loopDepth) 
	{
															#line 2845 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		initialSnapshotIntervalSeconds = __initialSnapshotIntervalSeconds;
															#line 23603 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont2(loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Optional<int64_t> && __initialSnapshotIntervalSeconds,int loopDepth) 
	{
		initialSnapshotIntervalSeconds = std::move(__initialSnapshotIntervalSeconds);
		loopDepth = a_body1cont2(loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<_finishActor9*>(this)->actor_wait_state > 0) static_cast<_finishActor9*>(this)->actor_wait_state = 0;
		static_cast<_finishActor9*>(this)->ActorCallback< _finishActor9, 1, Optional<int64_t> >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor9, 1, Optional<int64_t> >*,Optional<int64_t> const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< _finishActor9, 1, Optional<int64_t> >*,Optional<int64_t> && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< _finishActor9, 1, Optional<int64_t> >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont5(Void const& _,int loopDepth) 
	{
															#line 2850 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!incrementalBackupOnly.get().present() || !incrementalBackupOnly.get().get())
															#line 23670 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 2851 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_3 = success(BackupSnapshotDispatchTask::addTask( tr, taskBucket, task, 1, TaskCompletionKey::joinWith(backupFinished)));
															#line 2851 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_finishActor9*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 23676 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1cont5when1(__when_expr_3.get(), loopDepth); };
			static_cast<_finishActor9*>(this)->actor_wait_state = 4;
															#line 2851 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< _finishActor9, 3, Void >*>(static_cast<_finishActor9*>(this)));
															#line 23681 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1cont6(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont5(Void && _,int loopDepth) 
	{
															#line 2850 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!incrementalBackupOnly.get().present() || !incrementalBackupOnly.get().get())
															#line 23695 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 2851 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_3 = success(BackupSnapshotDispatchTask::addTask( tr, taskBucket, task, 1, TaskCompletionKey::joinWith(backupFinished)));
															#line 2851 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_finishActor9*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 23701 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1cont5when1(__when_expr_3.get(), loopDepth); };
			static_cast<_finishActor9*>(this)->actor_wait_state = 4;
															#line 2851 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< _finishActor9, 3, Void >*>(static_cast<_finishActor9*>(this)));
															#line 23706 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1cont6(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont5(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont5(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<_finishActor9*>(this)->actor_wait_state > 0) static_cast<_finishActor9*>(this)->actor_wait_state = 0;
		static_cast<_finishActor9*>(this)->ActorCallback< _finishActor9, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor9, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< _finishActor9, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< _finishActor9, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1cont6(int loopDepth) 
	{
															#line 2854 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_4 = success(BackupLogsDispatchTask::addTask( tr, taskBucket, task, 1, 0, beginVersion, TaskCompletionKey::joinWith(backupFinished)));
															#line 2854 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_finishActor9*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 23785 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1Catch1(__when_expr_4.getError(), loopDepth); else return a_body1cont6when1(__when_expr_4.get(), loopDepth); };
		static_cast<_finishActor9*>(this)->actor_wait_state = 5;
															#line 2854 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< _finishActor9, 4, Void >*>(static_cast<_finishActor9*>(this)));
															#line 23790 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont7(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont6(loopDepth);

		return loopDepth;
	}
	int a_body1cont7(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont6(loopDepth);

		return loopDepth;
	}
	int a_body1cont5when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont7(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont5when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont7(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<_finishActor9*>(this)->actor_wait_state > 0) static_cast<_finishActor9*>(this)->actor_wait_state = 0;
		static_cast<_finishActor9*>(this)->ActorCallback< _finishActor9, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor9, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont5when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< _finishActor9, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont5when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< _finishActor9, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 3);

	}
	int a_body1cont8(Void const& _,int loopDepth) 
	{
															#line 2859 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_5 = success( FileBackupFinishedTask::addTask(tr, taskBucket, task, TaskCompletionKey::noSignal(), backupFinished));
															#line 2859 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_finishActor9*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 23876 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_5.isReady()) { if (__when_expr_5.isError()) return a_body1Catch1(__when_expr_5.getError(), loopDepth); else return a_body1cont8when1(__when_expr_5.get(), loopDepth); };
		static_cast<_finishActor9*>(this)->actor_wait_state = 6;
															#line 2859 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_5.addCallbackAndClear(static_cast<ActorCallback< _finishActor9, 5, Void >*>(static_cast<_finishActor9*>(this)));
															#line 23881 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont8(Void && _,int loopDepth) 
	{
															#line 2859 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_5 = success( FileBackupFinishedTask::addTask(tr, taskBucket, task, TaskCompletionKey::noSignal(), backupFinished));
															#line 2859 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_finishActor9*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 23892 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_5.isReady()) { if (__when_expr_5.isError()) return a_body1Catch1(__when_expr_5.getError(), loopDepth); else return a_body1cont8when1(__when_expr_5.get(), loopDepth); };
		static_cast<_finishActor9*>(this)->actor_wait_state = 6;
															#line 2859 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_5.addCallbackAndClear(static_cast<ActorCallback< _finishActor9, 5, Void >*>(static_cast<_finishActor9*>(this)));
															#line 23897 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont6when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont8(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont6when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont8(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose5() 
	{
		if (static_cast<_finishActor9*>(this)->actor_wait_state > 0) static_cast<_finishActor9*>(this)->actor_wait_state = 0;
		static_cast<_finishActor9*>(this)->ActorCallback< _finishActor9, 4, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor9, 4, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont6when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_fire(ActorCallback< _finishActor9, 4, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont6when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_error(ActorCallback< _finishActor9, 4, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 4);

	}
	int a_body1cont9(Void const& _,int loopDepth) 
	{
															#line 2862 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_6 = taskBucket->finish(tr, task);
															#line 2862 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_finishActor9*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 23971 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_6.isReady()) { if (__when_expr_6.isError()) return a_body1Catch1(__when_expr_6.getError(), loopDepth); else return a_body1cont9when1(__when_expr_6.get(), loopDepth); };
		static_cast<_finishActor9*>(this)->actor_wait_state = 7;
															#line 2862 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_6.addCallbackAndClear(static_cast<ActorCallback< _finishActor9, 6, Void >*>(static_cast<_finishActor9*>(this)));
															#line 23976 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont9(Void && _,int loopDepth) 
	{
															#line 2862 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_6 = taskBucket->finish(tr, task);
															#line 2862 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_finishActor9*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 23987 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_6.isReady()) { if (__when_expr_6.isError()) return a_body1Catch1(__when_expr_6.getError(), loopDepth); else return a_body1cont9when1(__when_expr_6.get(), loopDepth); };
		static_cast<_finishActor9*>(this)->actor_wait_state = 7;
															#line 2862 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_6.addCallbackAndClear(static_cast<ActorCallback< _finishActor9, 6, Void >*>(static_cast<_finishActor9*>(this)));
															#line 23992 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont8when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont9(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont8when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont9(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose6() 
	{
		if (static_cast<_finishActor9*>(this)->actor_wait_state > 0) static_cast<_finishActor9*>(this)->actor_wait_state = 0;
		static_cast<_finishActor9*>(this)->ActorCallback< _finishActor9, 5, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor9, 5, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1cont8when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_fire(ActorCallback< _finishActor9, 5, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1cont8when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_error(ActorCallback< _finishActor9, 5, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 5);

	}
	int a_body1cont10(Void const& _,int loopDepth) 
	{
															#line 2864 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<_finishActor9*>(this)->SAV<Void>::futures) { (void)(Void()); this->~_finishActor9State(); static_cast<_finishActor9*>(this)->destroy(); return 0; }
															#line 24064 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<_finishActor9*>(this)->SAV< Void >::value()) Void(Void());
		this->~_finishActor9State();
		static_cast<_finishActor9*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont10(Void && _,int loopDepth) 
	{
															#line 2864 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<_finishActor9*>(this)->SAV<Void>::futures) { (void)(Void()); this->~_finishActor9State(); static_cast<_finishActor9*>(this)->destroy(); return 0; }
															#line 24076 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<_finishActor9*>(this)->SAV< Void >::value()) Void(Void());
		this->~_finishActor9State();
		static_cast<_finishActor9*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont9when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont10(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont9when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont10(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose7() 
	{
		if (static_cast<_finishActor9*>(this)->actor_wait_state > 0) static_cast<_finishActor9*>(this)->actor_wait_state = 0;
		static_cast<_finishActor9*>(this)->ActorCallback< _finishActor9, 6, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor9, 6, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1cont9when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 6);

	}
	void a_callback_fire(ActorCallback< _finishActor9, 6, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1cont9when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 6);

	}
	void a_callback_error(ActorCallback< _finishActor9, 6, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 6);

	}
															#line 2817 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 2817 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskBucket> taskBucket;
															#line 2817 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<FutureBucket> futureBucket;
															#line 2817 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<Task> task;
															#line 2821 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	BackupConfig config;
															#line 2822 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Version beginVersion;
															#line 2824 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Future<std::vector<KeyRange>> backupRangesFuture;
															#line 2825 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Future<Key> destUidValueFuture;
															#line 2826 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Future<Optional<bool>> partitionedLog;
															#line 2827 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Future<Optional<bool>> incrementalBackupOnly;
															#line 2842 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskFuture> backupFinished;
															#line 2845 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Optional<int64_t> initialSnapshotIntervalSeconds;
															#line 24171 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via _finish()
															#line 2817 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class _finishActor9 final : public Actor<Void>, public ActorCallback< _finishActor9, 0, Void >, public ActorCallback< _finishActor9, 1, Optional<int64_t> >, public ActorCallback< _finishActor9, 2, Void >, public ActorCallback< _finishActor9, 3, Void >, public ActorCallback< _finishActor9, 4, Void >, public ActorCallback< _finishActor9, 5, Void >, public ActorCallback< _finishActor9, 6, Void >, public FastAllocated<_finishActor9>, public _finishActor9State<_finishActor9> {
															#line 24176 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<_finishActor9>::operator new;
	using FastAllocated<_finishActor9>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< _finishActor9, 0, Void >;
friend struct ActorCallback< _finishActor9, 1, Optional<int64_t> >;
friend struct ActorCallback< _finishActor9, 2, Void >;
friend struct ActorCallback< _finishActor9, 3, Void >;
friend struct ActorCallback< _finishActor9, 4, Void >;
friend struct ActorCallback< _finishActor9, 5, Void >;
friend struct ActorCallback< _finishActor9, 6, Void >;
															#line 2817 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	_finishActor9(Reference<ReadYourWritesTransaction> const& tr,Reference<TaskBucket> const& taskBucket,Reference<FutureBucket> const& futureBucket,Reference<Task> const& task) 
															#line 24193 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<Void>(),
		   _finishActor9State<_finishActor9>(tr, taskBucket, futureBucket, task)
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("_finish");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< _finishActor9, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< _finishActor9, 1, Optional<int64_t> >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< _finishActor9, 2, Void >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< _finishActor9, 3, Void >*)0, actor_cancelled()); break;
		case 5: this->a_callback_error((ActorCallback< _finishActor9, 4, Void >*)0, actor_cancelled()); break;
		case 6: this->a_callback_error((ActorCallback< _finishActor9, 5, Void >*)0, actor_cancelled()); break;
		case 7: this->a_callback_error((ActorCallback< _finishActor9, 6, Void >*)0, actor_cancelled()); break;
		}

	}
};
															#line 2817 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<Void> _finish( Reference<ReadYourWritesTransaction> const& tr, Reference<TaskBucket> const& taskBucket, Reference<FutureBucket> const& futureBucket, Reference<Task> const& task ) {
															#line 2817 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<Void>(new _finishActor9(tr, taskBucket, futureBucket, task));
															#line 24226 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 2866 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

																#line 24231 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via addTask()
															#line 2867 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class AddTaskActor7>
															#line 2867 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class AddTaskActor7State {
															#line 24237 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 2867 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	AddTaskActor7State(Reference<ReadYourWritesTransaction> const& tr,Reference<TaskBucket> const& taskBucket,UID const& uid,TaskCompletionKey const& completionKey,Reference<TaskFuture> const& waitFor = Reference<TaskFuture>()) 
															#line 2867 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 2867 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : tr(tr),
															#line 2867 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   taskBucket(taskBucket),
															#line 2867 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   uid(uid),
															#line 2867 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   completionKey(completionKey),
															#line 2867 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   waitFor(waitFor)
															#line 24252 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("addTask", reinterpret_cast<unsigned long>(this));

	}
	~AddTaskActor7State() 
	{
		fdb_probe_actor_destroy("addTask", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 2872 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Key> __when_expr_0 = addBackupTask(StartFullBackupTaskFunc::name, StartFullBackupTaskFunc::version, tr, taskBucket, completionKey, BackupConfig(uid), waitFor);
															#line 2872 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<AddTaskActor7*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 24269 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<AddTaskActor7*>(this)->actor_wait_state = 1;
															#line 2872 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< AddTaskActor7, 0, Key >*>(static_cast<AddTaskActor7*>(this)));
															#line 24274 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~AddTaskActor7State();
		static_cast<AddTaskActor7*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Key const& key,int loopDepth) 
	{
															#line 2879 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<AddTaskActor7*>(this)->SAV<Key>::futures) { (void)(key); this->~AddTaskActor7State(); static_cast<AddTaskActor7*>(this)->destroy(); return 0; }
															#line 24297 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<AddTaskActor7*>(this)->SAV< Key >::value()) Key(key);
		this->~AddTaskActor7State();
		static_cast<AddTaskActor7*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1(Key && key,int loopDepth) 
	{
															#line 2879 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<AddTaskActor7*>(this)->SAV<Key>::futures) { (void)(key); this->~AddTaskActor7State(); static_cast<AddTaskActor7*>(this)->destroy(); return 0; }
															#line 24309 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<AddTaskActor7*>(this)->SAV< Key >::value()) Key(key);
		this->~AddTaskActor7State();
		static_cast<AddTaskActor7*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1when1(Key const& key,int loopDepth) 
	{
		loopDepth = a_body1cont1(key, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Key && key,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(key), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<AddTaskActor7*>(this)->actor_wait_state > 0) static_cast<AddTaskActor7*>(this)->actor_wait_state = 0;
		static_cast<AddTaskActor7*>(this)->ActorCallback< AddTaskActor7, 0, Key >::remove();

	}
	void a_callback_fire(ActorCallback< AddTaskActor7, 0, Key >*,Key const& value) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< AddTaskActor7, 0, Key >*,Key && value) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< AddTaskActor7, 0, Key >*,Error err) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 2867 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 2867 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskBucket> taskBucket;
															#line 2867 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	UID uid;
															#line 2867 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	TaskCompletionKey completionKey;
															#line 2867 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskFuture> waitFor;
															#line 24390 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via addTask()
															#line 2867 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class AddTaskActor7 final : public Actor<Key>, public ActorCallback< AddTaskActor7, 0, Key >, public FastAllocated<AddTaskActor7>, public AddTaskActor7State<AddTaskActor7> {
															#line 24395 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<AddTaskActor7>::operator new;
	using FastAllocated<AddTaskActor7>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Key>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< AddTaskActor7, 0, Key >;
															#line 2867 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	AddTaskActor7(Reference<ReadYourWritesTransaction> const& tr,Reference<TaskBucket> const& taskBucket,UID const& uid,TaskCompletionKey const& completionKey,Reference<TaskFuture> const& waitFor = Reference<TaskFuture>()) 
															#line 24406 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<Key>(),
		   AddTaskActor7State<AddTaskActor7>(tr, taskBucket, uid, completionKey, waitFor)
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("addTask");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< AddTaskActor7, 0, Key >*)0, actor_cancelled()); break;
		}

	}
};
															#line 2867 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<Key> addTask( Reference<ReadYourWritesTransaction> const& tr, Reference<TaskBucket> const& taskBucket, UID const& uid, TaskCompletionKey const& completionKey, Reference<TaskFuture> const& waitFor = Reference<TaskFuture>() ) {
															#line 2867 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<Key>(new AddTaskActor7(tr, taskBucket, uid, completionKey, waitFor));
															#line 24433 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 2881 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

	StringRef getName() const override { return name; };

	Future<Void> execute(Database cx,
	                     Reference<TaskBucket> tb,
	                     Reference<FutureBucket> fb,
	                     Reference<Task> task) override {
		return _execute(cx, tb, fb, task);
	};
	Future<Void> finish(Reference<ReadYourWritesTransaction> tr,
	                    Reference<TaskBucket> tb,
	                    Reference<FutureBucket> fb,
	                    Reference<Task> task) override {
		return _finish(tr, tb, fb, task);
	};
};
StringRef StartFullBackupTaskFunc::name = LiteralStringRef("file_backup_start_5.2");
REGISTER_TASKFUNC(StartFullBackupTaskFunc);

struct RestoreCompleteTaskFunc : RestoreTaskFuncBase {
																#line 24457 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via _finish()
															#line 2901 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class _finishActor10>
															#line 2901 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class _finishActor10State {
															#line 24463 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 2901 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	_finishActor10State(Reference<ReadYourWritesTransaction> const& tr,Reference<TaskBucket> const& taskBucket,Reference<FutureBucket> const& futureBucket,Reference<Task> const& task) 
															#line 2901 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 2901 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : tr(tr),
															#line 2901 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   taskBucket(taskBucket),
															#line 2901 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   futureBucket(futureBucket),
															#line 2901 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   task(task)
															#line 24476 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("_finish", reinterpret_cast<unsigned long>(this));

	}
	~_finishActor10State() 
	{
		fdb_probe_actor_destroy("_finish", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 2905 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_0 = checkTaskVersion(tr->getDatabase(), task, name, version);
															#line 2905 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_finishActor10*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 24493 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<_finishActor10*>(this)->actor_wait_state = 1;
															#line 2905 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< _finishActor10, 0, Void >*>(static_cast<_finishActor10*>(this)));
															#line 24498 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~_finishActor10State();
		static_cast<_finishActor10*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void const& _,int loopDepth) 
	{
															#line 2907 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		restore = RestoreConfig(task);
															#line 2908 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		restore.stateEnum().set(tr, ERestoreState::COMPLETED);
															#line 2909 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr->atomicOp(metadataVersionKey, metadataVersionRequiredValue, MutationRef::SetVersionstampedValue);
															#line 2911 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		restore.fileSet().clear(tr);
															#line 2920 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		restore.clearApplyMutationsKeys(tr);
															#line 2922 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_1 = taskBucket->finish(tr, task);
															#line 2922 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_finishActor10*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 24533 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<_finishActor10*>(this)->actor_wait_state = 2;
															#line 2922 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< _finishActor10, 1, Void >*>(static_cast<_finishActor10*>(this)));
															#line 24538 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void && _,int loopDepth) 
	{
															#line 2907 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		restore = RestoreConfig(task);
															#line 2908 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		restore.stateEnum().set(tr, ERestoreState::COMPLETED);
															#line 2909 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr->atomicOp(metadataVersionKey, metadataVersionRequiredValue, MutationRef::SetVersionstampedValue);
															#line 2911 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		restore.fileSet().clear(tr);
															#line 2920 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		restore.clearApplyMutationsKeys(tr);
															#line 2922 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_1 = taskBucket->finish(tr, task);
															#line 2922 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_finishActor10*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 24559 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<_finishActor10*>(this)->actor_wait_state = 2;
															#line 2922 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< _finishActor10, 1, Void >*>(static_cast<_finishActor10*>(this)));
															#line 24564 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<_finishActor10*>(this)->actor_wait_state > 0) static_cast<_finishActor10*>(this)->actor_wait_state = 0;
		static_cast<_finishActor10*>(this)->ActorCallback< _finishActor10, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor10, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< _finishActor10, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< _finishActor10, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont2(Void const& _,int loopDepth) 
	{
															#line 2923 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_2 = unlockDatabase(tr, restore.getUid());
															#line 2923 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_finishActor10*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 24638 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont2when1(__when_expr_2.get(), loopDepth); };
		static_cast<_finishActor10*>(this)->actor_wait_state = 3;
															#line 2923 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< _finishActor10, 2, Void >*>(static_cast<_finishActor10*>(this)));
															#line 24643 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont2(Void && _,int loopDepth) 
	{
															#line 2923 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_2 = unlockDatabase(tr, restore.getUid());
															#line 2923 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_finishActor10*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 24654 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont2when1(__when_expr_2.get(), loopDepth); };
		static_cast<_finishActor10*>(this)->actor_wait_state = 3;
															#line 2923 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< _finishActor10, 2, Void >*>(static_cast<_finishActor10*>(this)));
															#line 24659 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<_finishActor10*>(this)->actor_wait_state > 0) static_cast<_finishActor10*>(this)->actor_wait_state = 0;
		static_cast<_finishActor10*>(this)->ActorCallback< _finishActor10, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor10, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< _finishActor10, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< _finishActor10, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont3(Void const& _,int loopDepth) 
	{
															#line 2925 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<_finishActor10*>(this)->SAV<Void>::futures) { (void)(Void()); this->~_finishActor10State(); static_cast<_finishActor10*>(this)->destroy(); return 0; }
															#line 24731 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<_finishActor10*>(this)->SAV< Void >::value()) Void(Void());
		this->~_finishActor10State();
		static_cast<_finishActor10*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont3(Void && _,int loopDepth) 
	{
															#line 2925 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<_finishActor10*>(this)->SAV<Void>::futures) { (void)(Void()); this->~_finishActor10State(); static_cast<_finishActor10*>(this)->destroy(); return 0; }
															#line 24743 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<_finishActor10*>(this)->SAV< Void >::value()) Void(Void());
		this->~_finishActor10State();
		static_cast<_finishActor10*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont3(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont3(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<_finishActor10*>(this)->actor_wait_state > 0) static_cast<_finishActor10*>(this)->actor_wait_state = 0;
		static_cast<_finishActor10*>(this)->ActorCallback< _finishActor10, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor10, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< _finishActor10, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< _finishActor10, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 2);

	}
															#line 2901 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 2901 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskBucket> taskBucket;
															#line 2901 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<FutureBucket> futureBucket;
															#line 2901 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<Task> task;
															#line 2907 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	RestoreConfig restore;
															#line 24824 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via _finish()
															#line 2901 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class _finishActor10 final : public Actor<Void>, public ActorCallback< _finishActor10, 0, Void >, public ActorCallback< _finishActor10, 1, Void >, public ActorCallback< _finishActor10, 2, Void >, public FastAllocated<_finishActor10>, public _finishActor10State<_finishActor10> {
															#line 24829 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<_finishActor10>::operator new;
	using FastAllocated<_finishActor10>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< _finishActor10, 0, Void >;
friend struct ActorCallback< _finishActor10, 1, Void >;
friend struct ActorCallback< _finishActor10, 2, Void >;
															#line 2901 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	_finishActor10(Reference<ReadYourWritesTransaction> const& tr,Reference<TaskBucket> const& taskBucket,Reference<FutureBucket> const& futureBucket,Reference<Task> const& task) 
															#line 24842 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<Void>(),
		   _finishActor10State<_finishActor10>(tr, taskBucket, futureBucket, task)
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("_finish");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< _finishActor10, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< _finishActor10, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< _finishActor10, 2, Void >*)0, actor_cancelled()); break;
		}

	}
};
															#line 2901 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<Void> _finish( Reference<ReadYourWritesTransaction> const& tr, Reference<TaskBucket> const& taskBucket, Reference<FutureBucket> const& futureBucket, Reference<Task> const& task ) {
															#line 2901 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<Void>(new _finishActor10(tr, taskBucket, futureBucket, task));
															#line 24871 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 2927 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

																#line 24876 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via addTask()
															#line 2928 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class AddTaskActor8>
															#line 2928 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class AddTaskActor8State {
															#line 24882 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 2928 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	AddTaskActor8State(Reference<ReadYourWritesTransaction> const& tr,Reference<TaskBucket> const& taskBucket,Reference<Task> const& parentTask,TaskCompletionKey const& completionKey,Reference<TaskFuture> const& waitFor = Reference<TaskFuture>()) 
															#line 2928 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 2928 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : tr(tr),
															#line 2928 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   taskBucket(taskBucket),
															#line 2928 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   parentTask(parentTask),
															#line 2928 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   completionKey(completionKey),
															#line 2928 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   waitFor(waitFor)
															#line 24897 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("addTask", reinterpret_cast<unsigned long>(this));

	}
	~AddTaskActor8State() 
	{
		fdb_probe_actor_destroy("addTask", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 2933 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Key> __when_expr_0 = completionKey.get(tr, taskBucket);
															#line 2933 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<AddTaskActor8*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 24914 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<AddTaskActor8*>(this)->actor_wait_state = 1;
															#line 2933 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< AddTaskActor8, 0, Key >*>(static_cast<AddTaskActor8*>(this)));
															#line 24919 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~AddTaskActor8State();
		static_cast<AddTaskActor8*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Key const& doneKey,int loopDepth) 
	{
															#line 2934 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		task = Reference<Task>(new Task(RestoreCompleteTaskFunc::name, RestoreCompleteTaskFunc::version, doneKey));
															#line 2937 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_1 = RestoreConfig(parentTask).toTask(tr, task);
															#line 2937 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<AddTaskActor8*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 24946 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<AddTaskActor8*>(this)->actor_wait_state = 2;
															#line 2937 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< AddTaskActor8, 1, Void >*>(static_cast<AddTaskActor8*>(this)));
															#line 24951 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Key && doneKey,int loopDepth) 
	{
															#line 2934 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		task = Reference<Task>(new Task(RestoreCompleteTaskFunc::name, RestoreCompleteTaskFunc::version, doneKey));
															#line 2937 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_1 = RestoreConfig(parentTask).toTask(tr, task);
															#line 2937 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<AddTaskActor8*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 24964 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<AddTaskActor8*>(this)->actor_wait_state = 2;
															#line 2937 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< AddTaskActor8, 1, Void >*>(static_cast<AddTaskActor8*>(this)));
															#line 24969 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1when1(Key const& doneKey,int loopDepth) 
	{
		loopDepth = a_body1cont1(doneKey, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Key && doneKey,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(doneKey), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<AddTaskActor8*>(this)->actor_wait_state > 0) static_cast<AddTaskActor8*>(this)->actor_wait_state = 0;
		static_cast<AddTaskActor8*>(this)->ActorCallback< AddTaskActor8, 0, Key >::remove();

	}
	void a_callback_fire(ActorCallback< AddTaskActor8, 0, Key >*,Key const& value) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< AddTaskActor8, 0, Key >*,Key && value) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< AddTaskActor8, 0, Key >*,Error err) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont2(Void const& _,int loopDepth) 
	{
															#line 2939 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!waitFor)
															#line 25041 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 2940 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (!static_cast<AddTaskActor8*>(this)->SAV<Key>::futures) { (void)(taskBucket->addTask(tr, task)); this->~AddTaskActor8State(); static_cast<AddTaskActor8*>(this)->destroy(); return 0; }
															#line 25045 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			new (&static_cast<AddTaskActor8*>(this)->SAV< Key >::value()) Key(taskBucket->addTask(tr, task));
			this->~AddTaskActor8State();
			static_cast<AddTaskActor8*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 2943 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_2 = waitFor->onSetAddTask(tr, taskBucket, task);
															#line 2943 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<AddTaskActor8*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 25055 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont2when1(__when_expr_2.get(), loopDepth); };
		static_cast<AddTaskActor8*>(this)->actor_wait_state = 3;
															#line 2943 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< AddTaskActor8, 2, Void >*>(static_cast<AddTaskActor8*>(this)));
															#line 25060 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont2(Void && _,int loopDepth) 
	{
															#line 2939 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!waitFor)
															#line 25069 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 2940 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (!static_cast<AddTaskActor8*>(this)->SAV<Key>::futures) { (void)(taskBucket->addTask(tr, task)); this->~AddTaskActor8State(); static_cast<AddTaskActor8*>(this)->destroy(); return 0; }
															#line 25073 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			new (&static_cast<AddTaskActor8*>(this)->SAV< Key >::value()) Key(taskBucket->addTask(tr, task));
			this->~AddTaskActor8State();
			static_cast<AddTaskActor8*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 2943 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_2 = waitFor->onSetAddTask(tr, taskBucket, task);
															#line 2943 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<AddTaskActor8*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 25083 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont2when1(__when_expr_2.get(), loopDepth); };
		static_cast<AddTaskActor8*>(this)->actor_wait_state = 3;
															#line 2943 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< AddTaskActor8, 2, Void >*>(static_cast<AddTaskActor8*>(this)));
															#line 25088 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<AddTaskActor8*>(this)->actor_wait_state > 0) static_cast<AddTaskActor8*>(this)->actor_wait_state = 0;
		static_cast<AddTaskActor8*>(this)->ActorCallback< AddTaskActor8, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< AddTaskActor8, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< AddTaskActor8, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< AddTaskActor8, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont3(Void const& _,int loopDepth) 
	{
															#line 2944 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<AddTaskActor8*>(this)->SAV<Key>::futures) { (void)(LiteralStringRef("OnSetAddTask")); this->~AddTaskActor8State(); static_cast<AddTaskActor8*>(this)->destroy(); return 0; }
															#line 25160 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<AddTaskActor8*>(this)->SAV< Key >::value()) Key(LiteralStringRef("OnSetAddTask"));
		this->~AddTaskActor8State();
		static_cast<AddTaskActor8*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont3(Void && _,int loopDepth) 
	{
															#line 2944 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<AddTaskActor8*>(this)->SAV<Key>::futures) { (void)(LiteralStringRef("OnSetAddTask")); this->~AddTaskActor8State(); static_cast<AddTaskActor8*>(this)->destroy(); return 0; }
															#line 25172 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<AddTaskActor8*>(this)->SAV< Key >::value()) Key(LiteralStringRef("OnSetAddTask"));
		this->~AddTaskActor8State();
		static_cast<AddTaskActor8*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont3(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont3(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<AddTaskActor8*>(this)->actor_wait_state > 0) static_cast<AddTaskActor8*>(this)->actor_wait_state = 0;
		static_cast<AddTaskActor8*>(this)->ActorCallback< AddTaskActor8, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< AddTaskActor8, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< AddTaskActor8, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< AddTaskActor8, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 2);

	}
															#line 2928 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 2928 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskBucket> taskBucket;
															#line 2928 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<Task> parentTask;
															#line 2928 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	TaskCompletionKey completionKey;
															#line 2928 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskFuture> waitFor;
															#line 2934 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<Task> task;
															#line 25255 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via addTask()
															#line 2928 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class AddTaskActor8 final : public Actor<Key>, public ActorCallback< AddTaskActor8, 0, Key >, public ActorCallback< AddTaskActor8, 1, Void >, public ActorCallback< AddTaskActor8, 2, Void >, public FastAllocated<AddTaskActor8>, public AddTaskActor8State<AddTaskActor8> {
															#line 25260 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<AddTaskActor8>::operator new;
	using FastAllocated<AddTaskActor8>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Key>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< AddTaskActor8, 0, Key >;
friend struct ActorCallback< AddTaskActor8, 1, Void >;
friend struct ActorCallback< AddTaskActor8, 2, Void >;
															#line 2928 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	AddTaskActor8(Reference<ReadYourWritesTransaction> const& tr,Reference<TaskBucket> const& taskBucket,Reference<Task> const& parentTask,TaskCompletionKey const& completionKey,Reference<TaskFuture> const& waitFor = Reference<TaskFuture>()) 
															#line 25273 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<Key>(),
		   AddTaskActor8State<AddTaskActor8>(tr, taskBucket, parentTask, completionKey, waitFor)
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("addTask");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< AddTaskActor8, 0, Key >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< AddTaskActor8, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< AddTaskActor8, 2, Void >*)0, actor_cancelled()); break;
		}

	}
};
															#line 2928 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<Key> addTask( Reference<ReadYourWritesTransaction> const& tr, Reference<TaskBucket> const& taskBucket, Reference<Task> const& parentTask, TaskCompletionKey const& completionKey, Reference<TaskFuture> const& waitFor = Reference<TaskFuture>() ) {
															#line 2928 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<Key>(new AddTaskActor8(tr, taskBucket, parentTask, completionKey, waitFor));
															#line 25302 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 2946 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

	static StringRef name;
	static constexpr uint32_t version = 1;
	StringRef getName() const override { return name; };

	Future<Void> execute(Database cx,
	                     Reference<TaskBucket> tb,
	                     Reference<FutureBucket> fb,
	                     Reference<Task> task) override {
		return Void();
	};
	Future<Void> finish(Reference<ReadYourWritesTransaction> tr,
	                    Reference<TaskBucket> tb,
	                    Reference<FutureBucket> fb,
	                    Reference<Task> task) override {
		return _finish(tr, tb, fb, task);
	};
};
StringRef RestoreCompleteTaskFunc::name = LiteralStringRef("restore_complete");
REGISTER_TASKFUNC(RestoreCompleteTaskFunc);

struct RestoreFileTaskFuncBase : RestoreTaskFuncBase {
	struct InputParams {
		static TaskParam<RestoreFile> inputFile() { return LiteralStringRef(__FUNCTION__); }
		static TaskParam<int64_t> readOffset() { return LiteralStringRef(__FUNCTION__); }
		static TaskParam<int64_t> readLen() { return LiteralStringRef(__FUNCTION__); }
	} Params;

	std::string toString(Reference<Task> task) const override {
		return format("fileName '%s' readLen %lld readOffset %lld",
		              Params.inputFile().get(task).fileName.c_str(),
		              Params.readLen().get(task),
		              Params.readOffset().get(task));
	}
};

struct RestoreRangeTaskFunc : RestoreFileTaskFuncBase {
	static struct : InputParams {
		// The range of data that the (possibly empty) data represented, which is set if it intersects the target
		// restore range
		static TaskParam<KeyRange> originalFileRange() { return LiteralStringRef(__FUNCTION__); }
		static TaskParam<std::vector<KeyRange>> originalFileRanges() { return LiteralStringRef(__FUNCTION__); }

		static std::vector<KeyRange> getOriginalFileRanges(Reference<Task> task) {
			if (originalFileRanges().exists(task)) {
				return Params.originalFileRanges().get(task);
			} else {
				std::vector<KeyRange> range;
				if (originalFileRange().exists(task))
					range.push_back(Params.originalFileRange().get(task));
				return range;
			}
		}
	} Params;

	std::string toString(Reference<Task> task) const override {
		std::string returnStr = RestoreFileTaskFuncBase::toString(task);
		for (auto& range : Params.getOriginalFileRanges(task))
			returnStr += format("  originalFileRange '%s'", printable(range).c_str());
		return returnStr;
	}

																#line 25368 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via _execute()
															#line 3008 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class _executeActor5>
															#line 3008 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class _executeActor5State {
															#line 25374 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 3008 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	_executeActor5State(Database const& cx,Reference<TaskBucket> const& taskBucket,Reference<FutureBucket> const& futureBucket,Reference<Task> const& task) 
															#line 3008 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 3008 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : cx(cx),
															#line 3008 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   taskBucket(taskBucket),
															#line 3008 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   futureBucket(futureBucket),
															#line 3008 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   task(task),
															#line 3012 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   restore(task),
															#line 3014 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   rangeFile(Params.inputFile().get(task)),
															#line 3015 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   readOffset(Params.readOffset().get(task)),
															#line 3016 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   readLen(Params.readLen().get(task))
															#line 25395 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("_execute", reinterpret_cast<unsigned long>(this));

	}
	~_executeActor5State() 
	{
		fdb_probe_actor_destroy("_execute", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 3018 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			TraceEvent("FileRestoreRangeStart") .suppressFor(60) .detail("RestoreUID", restore.getUid()) .detail("FileName", rangeFile.fileName) .detail("FileVersion", rangeFile.version) .detail("FileSize", rangeFile.fileSize) .detail("ReadOffset", readOffset) .detail("ReadLen", readLen) .detail("TaskInstance", THIS_ADDR);
															#line 3028 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr = Reference<ReadYourWritesTransaction>(new ReadYourWritesTransaction(cx));
															#line 3029 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			bc = Future<Reference<IBackupContainer>>();
															#line 3030 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			restoreRanges = Future<std::vector<KeyRange>>();
															#line 3031 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			addPrefix = Future<Key>();
															#line 3032 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			removePrefix = Future<Key>();
															#line 3034 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			;
															#line 25422 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~_executeActor5State();
		static_cast<_executeActor5*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 3056 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Reference<IAsyncFile>> __when_expr_4 = bc.get()->readFile(rangeFile.fileName);
															#line 3056 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor5*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 25447 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1Catch1(__when_expr_4.getError(), loopDepth); else return a_body1cont1when1(__when_expr_4.get(), loopDepth); };
		static_cast<_executeActor5*>(this)->actor_wait_state = 5;
															#line 3056 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< _executeActor5, 4, Reference<IAsyncFile> >*>(static_cast<_executeActor5*>(this)));
															#line 25452 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
		try {
															#line 3036 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 3037 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 3039 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Reference<IBackupContainer>> __when_expr_0 = restore.sourceContainer().getOrThrow(tr);
															#line 3039 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_executeActor5*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 25475 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1loopBody1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
			static_cast<_executeActor5*>(this)->actor_wait_state = 1;
															#line 3039 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< _executeActor5, 0, Reference<IBackupContainer> >*>(static_cast<_executeActor5*>(this)));
															#line 25480 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1break1(int loopDepth) 
	{
		try {
			return a_body1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 3052 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_3 = tr->onError(e);
															#line 3052 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_executeActor5*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 25517 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch1(__when_expr_3.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1Catch1when1(__when_expr_3.get(), loopDepth); };
			static_cast<_executeActor5*>(this)->actor_wait_state = 4;
															#line 3052 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< _executeActor5, 3, Void >*>(static_cast<_executeActor5*>(this)));
															#line 25522 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(Reference<IBackupContainer> const& _bc,int loopDepth) 
	{
															#line 3040 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		bc = getBackupContainerWithProxy(_bc);
															#line 3041 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		restoreRanges = restore.getRestoreRangesOrDefault(tr);
															#line 3042 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		addPrefix = restore.addPrefix().getD(tr);
															#line 3043 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		removePrefix = restore.removePrefix().getD(tr);
															#line 3045 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_1 = taskBucket->keepRunning(tr, task);
															#line 3045 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor5*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 25547 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
		static_cast<_executeActor5*>(this)->actor_wait_state = 2;
															#line 3045 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< _executeActor5, 1, Void >*>(static_cast<_executeActor5*>(this)));
															#line 25552 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2(Reference<IBackupContainer> && _bc,int loopDepth) 
	{
															#line 3040 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		bc = getBackupContainerWithProxy(_bc);
															#line 3041 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		restoreRanges = restore.getRestoreRangesOrDefault(tr);
															#line 3042 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		addPrefix = restore.addPrefix().getD(tr);
															#line 3043 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		removePrefix = restore.removePrefix().getD(tr);
															#line 3045 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_1 = taskBucket->keepRunning(tr, task);
															#line 3045 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor5*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 25571 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
		static_cast<_executeActor5*>(this)->actor_wait_state = 2;
															#line 3045 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< _executeActor5, 1, Void >*>(static_cast<_executeActor5*>(this)));
															#line 25576 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1when1(Reference<IBackupContainer> const& _bc,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(_bc, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Reference<IBackupContainer> && _bc,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(std::move(_bc), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<_executeActor5*>(this)->actor_wait_state > 0) static_cast<_executeActor5*>(this)->actor_wait_state = 0;
		static_cast<_executeActor5*>(this)->ActorCallback< _executeActor5, 0, Reference<IBackupContainer> >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor5, 0, Reference<IBackupContainer> >*,Reference<IBackupContainer> const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< _executeActor5, 0, Reference<IBackupContainer> >*,Reference<IBackupContainer> && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< _executeActor5, 0, Reference<IBackupContainer> >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1cont3(Void const& _,int loopDepth) 
	{
															#line 3047 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_2 = success(bc) && success(restoreRanges) && success(addPrefix) && success(removePrefix) && checkTaskVersion(tr->getDatabase(), task, name, version);
															#line 3047 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor5*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 25650 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1loopBody1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1loopBody1cont3when1(__when_expr_2.get(), loopDepth); };
		static_cast<_executeActor5*>(this)->actor_wait_state = 3;
															#line 3047 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< _executeActor5, 2, Void >*>(static_cast<_executeActor5*>(this)));
															#line 25655 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont3(Void && _,int loopDepth) 
	{
															#line 3047 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_2 = success(bc) && success(restoreRanges) && success(addPrefix) && success(removePrefix) && checkTaskVersion(tr->getDatabase(), task, name, version);
															#line 3047 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor5*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 25666 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1loopBody1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1loopBody1cont3when1(__when_expr_2.get(), loopDepth); };
		static_cast<_executeActor5*>(this)->actor_wait_state = 3;
															#line 3047 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< _executeActor5, 2, Void >*>(static_cast<_executeActor5*>(this)));
															#line 25671 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<_executeActor5*>(this)->actor_wait_state > 0) static_cast<_executeActor5*>(this)->actor_wait_state = 0;
		static_cast<_executeActor5*>(this)->ActorCallback< _executeActor5, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor5, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< _executeActor5, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< _executeActor5, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1loopBody1cont4(Void const& _,int loopDepth) 
	{
		return a_body1break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1loopBody1cont4(Void && _,int loopDepth) 
	{
		return a_body1break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1loopBody1cont3when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont4(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont3when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont4(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<_executeActor5*>(this)->actor_wait_state > 0) static_cast<_executeActor5*>(this)->actor_wait_state = 0;
		static_cast<_executeActor5*>(this)->ActorCallback< _executeActor5, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor5, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont3when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< _executeActor5, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont3when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< _executeActor5, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<_executeActor5*>(this)->actor_wait_state > 0) static_cast<_executeActor5*>(this)->actor_wait_state = 0;
		static_cast<_executeActor5*>(this)->ActorCallback< _executeActor5, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor5, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< _executeActor5, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< _executeActor5, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 3);

	}
	int a_body1cont2(int loopDepth) 
	{
															#line 3057 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Standalone<VectorRef<KeyValueRef>>> __when_expr_5 = decodeRangeFileBlock(inFile, readOffset, readLen);
															#line 3057 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor5*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 25895 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_5.isReady()) { if (__when_expr_5.isError()) return a_body1Catch1(__when_expr_5.getError(), loopDepth); else return a_body1cont2when1(__when_expr_5.get(), loopDepth); };
		static_cast<_executeActor5*>(this)->actor_wait_state = 6;
															#line 3057 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_5.addCallbackAndClear(static_cast<ActorCallback< _executeActor5, 5, Standalone<VectorRef<KeyValueRef>> >*>(static_cast<_executeActor5*>(this)));
															#line 25900 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1when1(Reference<IAsyncFile> const& __inFile,int loopDepth) 
	{
															#line 3056 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		inFile = __inFile;
															#line 25909 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont2(loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Reference<IAsyncFile> && __inFile,int loopDepth) 
	{
		inFile = std::move(__inFile);
		loopDepth = a_body1cont2(loopDepth);

		return loopDepth;
	}
	void a_exitChoose5() 
	{
		if (static_cast<_executeActor5*>(this)->actor_wait_state > 0) static_cast<_executeActor5*>(this)->actor_wait_state = 0;
		static_cast<_executeActor5*>(this)->ActorCallback< _executeActor5, 4, Reference<IAsyncFile> >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor5, 4, Reference<IAsyncFile> >*,Reference<IAsyncFile> const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_fire(ActorCallback< _executeActor5, 4, Reference<IAsyncFile> >*,Reference<IAsyncFile> && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_error(ActorCallback< _executeActor5, 4, Reference<IAsyncFile> >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 4);

	}
	int a_body1cont3(int loopDepth) 
	{
															#line 3060 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		fileRange = KeyRange();
															#line 3061 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		originalFileRanges = std::vector<KeyRange>();
															#line 3063 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		index = int();
															#line 3064 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		index = 0;
															#line 25982 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont3loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1cont2when1(Standalone<VectorRef<KeyValueRef>> const& __blockData,int loopDepth) 
	{
															#line 3057 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		blockData = __blockData;
															#line 25991 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1cont2when1(Standalone<VectorRef<KeyValueRef>> && __blockData,int loopDepth) 
	{
		blockData = std::move(__blockData);
		loopDepth = a_body1cont3(loopDepth);

		return loopDepth;
	}
	void a_exitChoose6() 
	{
		if (static_cast<_executeActor5*>(this)->actor_wait_state > 0) static_cast<_executeActor5*>(this)->actor_wait_state = 0;
		static_cast<_executeActor5*>(this)->ActorCallback< _executeActor5, 5, Standalone<VectorRef<KeyValueRef>> >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor5, 5, Standalone<VectorRef<KeyValueRef>> >*,Standalone<VectorRef<KeyValueRef>> const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_fire(ActorCallback< _executeActor5, 5, Standalone<VectorRef<KeyValueRef>> >*,Standalone<VectorRef<KeyValueRef>> && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_error(ActorCallback< _executeActor5, 5, Standalone<VectorRef<KeyValueRef>> >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 5);

	}
	int a_body1cont4(int loopDepth) 
	{
															#line 3184 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!originalFileRanges.empty())
															#line 26058 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 3185 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (BUGGIFY && restoreRanges.get().size() == 1)
															#line 26062 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			{
															#line 3186 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				Params.originalFileRange().set(task, originalFileRanges[0]);
															#line 26066 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			}
			else
			{
															#line 3188 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				Params.originalFileRanges().set(task, originalFileRanges);
															#line 26072 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			}
		}
															#line 3191 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<_executeActor5*>(this)->SAV<Void>::futures) { (void)(Void()); this->~_executeActor5State(); static_cast<_executeActor5*>(this)->destroy(); return 0; }
															#line 26077 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<_executeActor5*>(this)->SAV< Void >::value()) Void(Void());
		this->~_executeActor5State();
		static_cast<_executeActor5*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont3loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1cont3loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1(int loopDepth) 
	{
															#line 3064 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!(index < restoreRanges.get().size()))
															#line 26096 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
			return a_body1cont3break1(loopDepth==0?0:loopDepth-1); // break
		}
															#line 3065 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		auto& restoreRange = restoreRanges.get()[index];
															#line 3066 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		fileRange = KeyRangeRef(blockData.front().key, blockData.back().key);
															#line 3067 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!fileRange.intersects(restoreRange))
															#line 26106 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
			return a_body1cont3continue1(loopDepth); // continue
		}
															#line 3073 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		int rangeStart = 1;
															#line 3074 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		int rangeEnd = blockData.size() - 1;
															#line 3076 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		for(;rangeStart < rangeEnd && !restoreRange.contains(blockData[rangeStart].key);) {
															#line 3077 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			++rangeStart;
															#line 26118 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 3079 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		for(;rangeEnd > rangeStart && !restoreRange.contains(blockData[rangeEnd - 1].key);) {
															#line 3080 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			--rangeEnd;
															#line 26124 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 3082 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		data = blockData.slice(rangeStart, rangeEnd);
															#line 3087 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		originalFileRange = KeyRangeRef(std::max(fileRange.begin, restoreRange.begin), std::min(fileRange.end, restoreRange.end));
															#line 3089 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		originalFileRanges.push_back(originalFileRange);
															#line 3092 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		Key fileEnd = std::min(fileRange.end, restoreRange.end);
															#line 3093 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (fileEnd == (removePrefix.get() == StringRef() ? normalKeys.end : strinc(removePrefix.get())))
															#line 26136 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 3094 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			fileEnd = addPrefix.get() == StringRef() ? normalKeys.end : strinc(addPrefix.get());
															#line 26140 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
		else
		{
															#line 3096 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			fileEnd = fileEnd.removePrefix(removePrefix.get()).withPrefix(addPrefix.get());
															#line 26146 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 3098 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		fileRange = KeyRangeRef(std::max(fileRange.begin, restoreRange.begin) .removePrefix(removePrefix.get()) .withPrefix(addPrefix.get()), fileEnd);
															#line 3103 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		start = 0;
															#line 3104 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		end = data.size();
															#line 3105 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		dataSizeLimit = BUGGIFY ? deterministicRandom()->randomInt(256 * 1024, 10e6) : CLIENT_KNOBS->RESTORE_WRITE_TX_SIZE;
															#line 3108 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr->reset();
															#line 3109 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		;
															#line 26160 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont3loopBody1loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1cont3break1(int loopDepth) 
	{
		try {
			return a_body1cont4(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont3continue1(int loopDepth) 
	{
															#line 3064 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		index++;
															#line 26182 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (loopDepth == 0) return a_body1cont3loopHead1(0);

		return loopDepth;
	}
	int a_body1cont3loopBody1cont1(int loopDepth) 
	{
															#line 3064 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		index++;
															#line 26191 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (loopDepth == 0) return a_body1cont3loopHead1(0);

		return loopDepth;
	}
	int a_body1cont3loopBody1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1cont3loopBody1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1loopBody1(int loopDepth) 
	{
		try {
															#line 3111 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 3112 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 3114 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			i = start;
															#line 3115 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			txBytes = 0;
															#line 3116 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			iend = start;
															#line 3119 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			for(;iend < end && txBytes < dataSizeLimit;++iend) {
															#line 3120 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				txBytes += data[iend].key.expectedSize();
															#line 3121 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				txBytes += data[iend].value.expectedSize();
															#line 26222 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			}
															#line 3127 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			trRange = KeyRangeRef( (start == 0) ? fileRange.begin : data[start].key.removePrefix(removePrefix.get()).withPrefix(addPrefix.get()), (iend == end) ? fileRange.end : data[iend].key.removePrefix(removePrefix.get()).withPrefix(addPrefix.get()));
															#line 3133 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->clear(trRange);
															#line 3135 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			for(;i < iend;++i) {
															#line 3136 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				tr->setOption(FDBTransactionOptions::NEXT_WRITE_NO_WRITE_CONFLICT_RANGE);
															#line 3137 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				tr->set(data[i].key.removePrefix(removePrefix.get()).withPrefix(addPrefix.get()), data[i].value);
															#line 26234 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			}
															#line 3142 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			restore.bytesWritten().atomicOp(tr, txBytes, MutationRef::Type::AddValue);
															#line 3144 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			checkLock = checkDatabaseLock(tr, restore.getUid());
															#line 3146 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_6 = taskBucket->keepRunning(tr, task);
															#line 3146 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_executeActor5*>(this)->actor_wait_state < 0) return a_body1cont3loopBody1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 26244 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_6.isReady()) { if (__when_expr_6.isError()) return a_body1cont3loopBody1loopBody1Catch1(__when_expr_6.getError(), loopDepth); else return a_body1cont3loopBody1loopBody1when1(__when_expr_6.get(), loopDepth); };
			static_cast<_executeActor5*>(this)->actor_wait_state = 7;
															#line 3146 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_6.addCallbackAndClear(static_cast<ActorCallback< _executeActor5, 6, Void >*>(static_cast<_executeActor5*>(this)));
															#line 26249 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1cont3loopBody1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1cont3loopBody1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont3loopBody1break1(int loopDepth) 
	{
		try {
			return a_body1cont3loopBody1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1cont3loopBody1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1cont3loopBody1loopHead1(0);

		return loopDepth;
	}
	int a_body1cont3loopBody1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 3177 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (e.code() == error_code_transaction_too_large)
															#line 26284 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			{
															#line 3178 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				dataSizeLimit /= 2;
															#line 26288 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				loopDepth = a_body1cont3loopBody1loopBody1Catch1cont1(loopDepth);
			}
			else
			{
															#line 3180 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				StrictFuture<Void> __when_expr_9 = tr->onError(e);
															#line 3180 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				if (static_cast<_executeActor5*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 2));
															#line 26297 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				if (__when_expr_9.isReady()) { if (__when_expr_9.isError()) return a_body1Catch1(__when_expr_9.getError(), std::max(0, loopDepth - 2)); else return a_body1cont3loopBody1loopBody1Catch1when1(__when_expr_9.get(), loopDepth); };
				static_cast<_executeActor5*>(this)->actor_wait_state = 10;
															#line 3180 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				__when_expr_9.addCallbackAndClear(static_cast<ActorCallback< _executeActor5, 9, Void >*>(static_cast<_executeActor5*>(this)));
															#line 26302 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				loopDepth = 0;
			}
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 2));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 2));
		}

		return loopDepth;
	}
	int a_body1cont3loopBody1loopBody1cont2(Void const& _,int loopDepth) 
	{
															#line 3148 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_7 = checkLock;
															#line 3148 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor5*>(this)->actor_wait_state < 0) return a_body1cont3loopBody1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 26320 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_7.isReady()) { if (__when_expr_7.isError()) return a_body1cont3loopBody1loopBody1Catch1(__when_expr_7.getError(), loopDepth); else return a_body1cont3loopBody1loopBody1cont2when1(__when_expr_7.get(), loopDepth); };
		static_cast<_executeActor5*>(this)->actor_wait_state = 8;
															#line 3148 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_7.addCallbackAndClear(static_cast<ActorCallback< _executeActor5, 7, Void >*>(static_cast<_executeActor5*>(this)));
															#line 26325 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont3loopBody1loopBody1cont2(Void && _,int loopDepth) 
	{
															#line 3148 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_7 = checkLock;
															#line 3148 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor5*>(this)->actor_wait_state < 0) return a_body1cont3loopBody1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 26336 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_7.isReady()) { if (__when_expr_7.isError()) return a_body1cont3loopBody1loopBody1Catch1(__when_expr_7.getError(), loopDepth); else return a_body1cont3loopBody1loopBody1cont2when1(__when_expr_7.get(), loopDepth); };
		static_cast<_executeActor5*>(this)->actor_wait_state = 8;
															#line 3148 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_7.addCallbackAndClear(static_cast<ActorCallback< _executeActor5, 7, Void >*>(static_cast<_executeActor5*>(this)));
															#line 26341 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont3loopBody1loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1loopBody1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1loopBody1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose7() 
	{
		if (static_cast<_executeActor5*>(this)->actor_wait_state > 0) static_cast<_executeActor5*>(this)->actor_wait_state = 0;
		static_cast<_executeActor5*>(this)->ActorCallback< _executeActor5, 6, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor5, 6, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1cont3loopBody1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont3loopBody1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont3loopBody1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 6);

	}
	void a_callback_fire(ActorCallback< _executeActor5, 6, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1cont3loopBody1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont3loopBody1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont3loopBody1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 6);

	}
	void a_callback_error(ActorCallback< _executeActor5, 6, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1cont3loopBody1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont3loopBody1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont3loopBody1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 6);

	}
	int a_body1cont3loopBody1loopBody1cont5(Void const& _,int loopDepth) 
	{
															#line 3150 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_8 = tr->commit();
															#line 3150 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor5*>(this)->actor_wait_state < 0) return a_body1cont3loopBody1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 26415 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_8.isReady()) { if (__when_expr_8.isError()) return a_body1cont3loopBody1loopBody1Catch1(__when_expr_8.getError(), loopDepth); else return a_body1cont3loopBody1loopBody1cont5when1(__when_expr_8.get(), loopDepth); };
		static_cast<_executeActor5*>(this)->actor_wait_state = 9;
															#line 3150 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_8.addCallbackAndClear(static_cast<ActorCallback< _executeActor5, 8, Void >*>(static_cast<_executeActor5*>(this)));
															#line 26420 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont3loopBody1loopBody1cont5(Void && _,int loopDepth) 
	{
															#line 3150 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_8 = tr->commit();
															#line 3150 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor5*>(this)->actor_wait_state < 0) return a_body1cont3loopBody1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 26431 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_8.isReady()) { if (__when_expr_8.isError()) return a_body1cont3loopBody1loopBody1Catch1(__when_expr_8.getError(), loopDepth); else return a_body1cont3loopBody1loopBody1cont5when1(__when_expr_8.get(), loopDepth); };
		static_cast<_executeActor5*>(this)->actor_wait_state = 9;
															#line 3150 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_8.addCallbackAndClear(static_cast<ActorCallback< _executeActor5, 8, Void >*>(static_cast<_executeActor5*>(this)));
															#line 26436 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont3loopBody1loopBody1cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1loopBody1cont5(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1loopBody1cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1loopBody1cont5(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose8() 
	{
		if (static_cast<_executeActor5*>(this)->actor_wait_state > 0) static_cast<_executeActor5*>(this)->actor_wait_state = 0;
		static_cast<_executeActor5*>(this)->ActorCallback< _executeActor5, 7, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor5, 7, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 7);
		a_exitChoose8();
		try {
			a_body1cont3loopBody1loopBody1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont3loopBody1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont3loopBody1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 7);

	}
	void a_callback_fire(ActorCallback< _executeActor5, 7, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 7);
		a_exitChoose8();
		try {
			a_body1cont3loopBody1loopBody1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont3loopBody1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont3loopBody1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 7);

	}
	void a_callback_error(ActorCallback< _executeActor5, 7, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 7);
		a_exitChoose8();
		try {
			a_body1cont3loopBody1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont3loopBody1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont3loopBody1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 7);

	}
	int a_body1cont3loopBody1loopBody1cont6(Void const& _,int loopDepth) 
	{
															#line 3152 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent("FileRestoreCommittedRange") .suppressFor(60) .detail("RestoreUID", restore.getUid()) .detail("FileName", rangeFile.fileName) .detail("FileVersion", rangeFile.version) .detail("FileSize", rangeFile.fileSize) .detail("ReadOffset", readOffset) .detail("ReadLen", readLen) .detail("CommitVersion", tr->getCommittedVersion()) .detail("BeginRange", trRange.begin) .detail("EndRange", trRange.end) .detail("StartIndex", start) .detail("EndIndex", i) .detail("DataSize", data.size()) .detail("Bytes", txBytes) .detail("OriginalFileRange", originalFileRange) .detail("TaskInstance", THIS_ADDR);
															#line 3171 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		start = i;
															#line 3173 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (start == end)
															#line 26512 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
			return a_body1cont3loopBody1break1(loopDepth==0?0:loopDepth-1); // break
		}
															#line 3175 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr->reset();
															#line 26518 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont3loopBody1loopBody1cont9(loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1loopBody1cont6(Void && _,int loopDepth) 
	{
															#line 3152 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent("FileRestoreCommittedRange") .suppressFor(60) .detail("RestoreUID", restore.getUid()) .detail("FileName", rangeFile.fileName) .detail("FileVersion", rangeFile.version) .detail("FileSize", rangeFile.fileSize) .detail("ReadOffset", readOffset) .detail("ReadLen", readLen) .detail("CommitVersion", tr->getCommittedVersion()) .detail("BeginRange", trRange.begin) .detail("EndRange", trRange.end) .detail("StartIndex", start) .detail("EndIndex", i) .detail("DataSize", data.size()) .detail("Bytes", txBytes) .detail("OriginalFileRange", originalFileRange) .detail("TaskInstance", THIS_ADDR);
															#line 3171 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		start = i;
															#line 3173 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (start == end)
															#line 26531 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
			return a_body1cont3loopBody1break1(loopDepth==0?0:loopDepth-1); // break
		}
															#line 3175 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr->reset();
															#line 26537 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont3loopBody1loopBody1cont9(loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1loopBody1cont5when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1loopBody1cont6(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1loopBody1cont5when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1loopBody1cont6(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose9() 
	{
		if (static_cast<_executeActor5*>(this)->actor_wait_state > 0) static_cast<_executeActor5*>(this)->actor_wait_state = 0;
		static_cast<_executeActor5*>(this)->ActorCallback< _executeActor5, 8, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor5, 8, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 8);
		a_exitChoose9();
		try {
			a_body1cont3loopBody1loopBody1cont5when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont3loopBody1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont3loopBody1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 8);

	}
	void a_callback_fire(ActorCallback< _executeActor5, 8, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 8);
		a_exitChoose9();
		try {
			a_body1cont3loopBody1loopBody1cont5when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont3loopBody1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont3loopBody1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 8);

	}
	void a_callback_error(ActorCallback< _executeActor5, 8, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 8);
		a_exitChoose9();
		try {
			a_body1cont3loopBody1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont3loopBody1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont3loopBody1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 8);

	}
	int a_body1cont3loopBody1loopBody1cont9(int loopDepth) 
	{
		try {
			loopDepth = a_body1cont3loopBody1loopBody1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 2));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 2));
		}

		return loopDepth;
	}
	int a_body1cont3loopBody1loopBody1Catch1cont1(int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1loopBody1Catch1cont3(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1loopBody1Catch1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1loopBody1Catch1cont3(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1loopBody1Catch1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1loopBody1Catch1cont3(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1loopBody1Catch1cont3(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose10() 
	{
		if (static_cast<_executeActor5*>(this)->actor_wait_state > 0) static_cast<_executeActor5*>(this)->actor_wait_state = 0;
		static_cast<_executeActor5*>(this)->ActorCallback< _executeActor5, 9, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor5, 9, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 9);
		a_exitChoose10();
		try {
			a_body1cont3loopBody1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 9);

	}
	void a_callback_fire(ActorCallback< _executeActor5, 9, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 9);
		a_exitChoose10();
		try {
			a_body1cont3loopBody1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 9);

	}
	void a_callback_error(ActorCallback< _executeActor5, 9, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 9);
		a_exitChoose10();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 9);

	}
															#line 3008 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Database cx;
															#line 3008 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskBucket> taskBucket;
															#line 3008 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<FutureBucket> futureBucket;
															#line 3008 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<Task> task;
															#line 3012 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	RestoreConfig restore;
															#line 3014 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	RestoreFile rangeFile;
															#line 3015 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int64_t readOffset;
															#line 3016 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int64_t readLen;
															#line 3028 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 3029 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Future<Reference<IBackupContainer>> bc;
															#line 3030 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Future<std::vector<KeyRange>> restoreRanges;
															#line 3031 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Future<Key> addPrefix;
															#line 3032 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Future<Key> removePrefix;
															#line 3056 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<IAsyncFile> inFile;
															#line 3057 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Standalone<VectorRef<KeyValueRef>> blockData;
															#line 3060 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	KeyRange fileRange;
															#line 3061 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	std::vector<KeyRange> originalFileRanges;
															#line 3063 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int index;
															#line 3082 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	VectorRef<KeyValueRef> data;
															#line 3087 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	KeyRange originalFileRange;
															#line 3103 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int start;
															#line 3104 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int end;
															#line 3105 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int dataSizeLimit;
															#line 3114 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int i;
															#line 3115 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int txBytes;
															#line 3116 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int iend;
															#line 3127 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	KeyRange trRange;
															#line 3144 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Future<Void> checkLock;
															#line 26755 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via _execute()
															#line 3008 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class _executeActor5 final : public Actor<Void>, public ActorCallback< _executeActor5, 0, Reference<IBackupContainer> >, public ActorCallback< _executeActor5, 1, Void >, public ActorCallback< _executeActor5, 2, Void >, public ActorCallback< _executeActor5, 3, Void >, public ActorCallback< _executeActor5, 4, Reference<IAsyncFile> >, public ActorCallback< _executeActor5, 5, Standalone<VectorRef<KeyValueRef>> >, public ActorCallback< _executeActor5, 6, Void >, public ActorCallback< _executeActor5, 7, Void >, public ActorCallback< _executeActor5, 8, Void >, public ActorCallback< _executeActor5, 9, Void >, public FastAllocated<_executeActor5>, public _executeActor5State<_executeActor5> {
															#line 26760 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<_executeActor5>::operator new;
	using FastAllocated<_executeActor5>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< _executeActor5, 0, Reference<IBackupContainer> >;
friend struct ActorCallback< _executeActor5, 1, Void >;
friend struct ActorCallback< _executeActor5, 2, Void >;
friend struct ActorCallback< _executeActor5, 3, Void >;
friend struct ActorCallback< _executeActor5, 4, Reference<IAsyncFile> >;
friend struct ActorCallback< _executeActor5, 5, Standalone<VectorRef<KeyValueRef>> >;
friend struct ActorCallback< _executeActor5, 6, Void >;
friend struct ActorCallback< _executeActor5, 7, Void >;
friend struct ActorCallback< _executeActor5, 8, Void >;
friend struct ActorCallback< _executeActor5, 9, Void >;
															#line 3008 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	_executeActor5(Database const& cx,Reference<TaskBucket> const& taskBucket,Reference<FutureBucket> const& futureBucket,Reference<Task> const& task) 
															#line 26780 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<Void>(),
		   _executeActor5State<_executeActor5>(cx, taskBucket, futureBucket, task)
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("_execute");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< _executeActor5, 0, Reference<IBackupContainer> >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< _executeActor5, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< _executeActor5, 2, Void >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< _executeActor5, 3, Void >*)0, actor_cancelled()); break;
		case 5: this->a_callback_error((ActorCallback< _executeActor5, 4, Reference<IAsyncFile> >*)0, actor_cancelled()); break;
		case 6: this->a_callback_error((ActorCallback< _executeActor5, 5, Standalone<VectorRef<KeyValueRef>> >*)0, actor_cancelled()); break;
		case 7: this->a_callback_error((ActorCallback< _executeActor5, 6, Void >*)0, actor_cancelled()); break;
		case 8: this->a_callback_error((ActorCallback< _executeActor5, 7, Void >*)0, actor_cancelled()); break;
		case 9: this->a_callback_error((ActorCallback< _executeActor5, 8, Void >*)0, actor_cancelled()); break;
		case 10: this->a_callback_error((ActorCallback< _executeActor5, 9, Void >*)0, actor_cancelled()); break;
		}

	}
};
															#line 3008 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<Void> _execute( Database const& cx, Reference<TaskBucket> const& taskBucket, Reference<FutureBucket> const& futureBucket, Reference<Task> const& task ) {
															#line 3008 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<Void>(new _executeActor5(cx, taskBucket, futureBucket, task));
															#line 26816 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 3193 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

																#line 26821 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via _finish()
															#line 3194 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class _finishActor11>
															#line 3194 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class _finishActor11State {
															#line 26827 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 3194 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	_finishActor11State(Reference<ReadYourWritesTransaction> const& tr,Reference<TaskBucket> const& taskBucket,Reference<FutureBucket> const& futureBucket,Reference<Task> const& task) 
															#line 3194 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 3194 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : tr(tr),
															#line 3194 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   taskBucket(taskBucket),
															#line 3194 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   futureBucket(futureBucket),
															#line 3194 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   task(task),
															#line 3198 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   restore(task)
															#line 26842 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("_finish", reinterpret_cast<unsigned long>(this));

	}
	~_finishActor11State() 
	{
		fdb_probe_actor_destroy("_finish", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 3199 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			restore.fileBlocksFinished().atomicOp(tr, 1, MutationRef::Type::AddValue);
															#line 3202 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			std::vector<Future<Void>> updateMap;
															#line 3203 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			std::vector<KeyRange> ranges = Params.getOriginalFileRanges(task);
															#line 3204 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			for( auto& range : ranges ) {
															#line 3205 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				Value versionEncoded = BinaryWriter::toValue(Params.inputFile().get(task).version, Unversioned());
															#line 3206 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				updateMap.push_back(krmSetRange(tr, restore.applyMutationsMapPrefix(), range, versionEncoded));
															#line 26867 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			}
															#line 3209 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			taskFuture = futureBucket->unpack(task->params[Task::reservedTaskParamKeyDone]);
															#line 3210 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_0 = taskFuture->set(tr, taskBucket) && taskBucket->finish(tr, task) && waitForAll(updateMap);
															#line 3210 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_finishActor11*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 26875 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<_finishActor11*>(this)->actor_wait_state = 1;
															#line 3210 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< _finishActor11, 0, Void >*>(static_cast<_finishActor11*>(this)));
															#line 26880 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~_finishActor11State();
		static_cast<_finishActor11*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void const& _,int loopDepth) 
	{
															#line 3212 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<_finishActor11*>(this)->SAV<Void>::futures) { (void)(Void()); this->~_finishActor11State(); static_cast<_finishActor11*>(this)->destroy(); return 0; }
															#line 26903 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<_finishActor11*>(this)->SAV< Void >::value()) Void(Void());
		this->~_finishActor11State();
		static_cast<_finishActor11*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1(Void && _,int loopDepth) 
	{
															#line 3212 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<_finishActor11*>(this)->SAV<Void>::futures) { (void)(Void()); this->~_finishActor11State(); static_cast<_finishActor11*>(this)->destroy(); return 0; }
															#line 26915 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<_finishActor11*>(this)->SAV< Void >::value()) Void(Void());
		this->~_finishActor11State();
		static_cast<_finishActor11*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<_finishActor11*>(this)->actor_wait_state > 0) static_cast<_finishActor11*>(this)->actor_wait_state = 0;
		static_cast<_finishActor11*>(this)->ActorCallback< _finishActor11, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor11, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< _finishActor11, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< _finishActor11, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 3194 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 3194 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskBucket> taskBucket;
															#line 3194 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<FutureBucket> futureBucket;
															#line 3194 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<Task> task;
															#line 3198 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	RestoreConfig restore;
															#line 3209 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskFuture> taskFuture;
															#line 26998 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via _finish()
															#line 3194 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class _finishActor11 final : public Actor<Void>, public ActorCallback< _finishActor11, 0, Void >, public FastAllocated<_finishActor11>, public _finishActor11State<_finishActor11> {
															#line 27003 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<_finishActor11>::operator new;
	using FastAllocated<_finishActor11>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< _finishActor11, 0, Void >;
															#line 3194 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	_finishActor11(Reference<ReadYourWritesTransaction> const& tr,Reference<TaskBucket> const& taskBucket,Reference<FutureBucket> const& futureBucket,Reference<Task> const& task) 
															#line 27014 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<Void>(),
		   _finishActor11State<_finishActor11>(tr, taskBucket, futureBucket, task)
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("_finish");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< _finishActor11, 0, Void >*)0, actor_cancelled()); break;
		}

	}
};
															#line 3194 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<Void> _finish( Reference<ReadYourWritesTransaction> const& tr, Reference<TaskBucket> const& taskBucket, Reference<FutureBucket> const& futureBucket, Reference<Task> const& task ) {
															#line 3194 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<Void>(new _finishActor11(tr, taskBucket, futureBucket, task));
															#line 27041 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 3214 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

																#line 27046 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via addTask()
															#line 3215 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class AddTaskActor9>
															#line 3215 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class AddTaskActor9State {
															#line 27052 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 3215 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	AddTaskActor9State(Reference<ReadYourWritesTransaction> const& tr,Reference<TaskBucket> const& taskBucket,Reference<Task> const& parentTask,RestoreFile const& rf,int64_t const& offset,int64_t const& len,TaskCompletionKey const& completionKey,Reference<TaskFuture> const& waitFor = Reference<TaskFuture>()) 
															#line 3215 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 3215 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : tr(tr),
															#line 3215 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   taskBucket(taskBucket),
															#line 3215 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   parentTask(parentTask),
															#line 3215 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   rf(rf),
															#line 3215 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   offset(offset),
															#line 3215 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   len(len),
															#line 3215 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   completionKey(completionKey),
															#line 3215 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   waitFor(waitFor)
															#line 27073 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("addTask", reinterpret_cast<unsigned long>(this));

	}
	~AddTaskActor9State() 
	{
		fdb_probe_actor_destroy("addTask", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 3223 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Key> __when_expr_0 = completionKey.get(tr, taskBucket);
															#line 3223 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<AddTaskActor9*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 27090 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<AddTaskActor9*>(this)->actor_wait_state = 1;
															#line 3223 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< AddTaskActor9, 0, Key >*>(static_cast<AddTaskActor9*>(this)));
															#line 27095 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~AddTaskActor9State();
		static_cast<AddTaskActor9*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Key const& doneKey,int loopDepth) 
	{
															#line 3224 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		task = Reference<Task>(new Task(RestoreRangeTaskFunc::name, RestoreRangeTaskFunc::version, doneKey));
															#line 3227 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_1 = RestoreConfig(parentTask).toTask(tr, task);
															#line 3227 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<AddTaskActor9*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 27122 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<AddTaskActor9*>(this)->actor_wait_state = 2;
															#line 3227 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< AddTaskActor9, 1, Void >*>(static_cast<AddTaskActor9*>(this)));
															#line 27127 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Key && doneKey,int loopDepth) 
	{
															#line 3224 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		task = Reference<Task>(new Task(RestoreRangeTaskFunc::name, RestoreRangeTaskFunc::version, doneKey));
															#line 3227 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_1 = RestoreConfig(parentTask).toTask(tr, task);
															#line 3227 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<AddTaskActor9*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 27140 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<AddTaskActor9*>(this)->actor_wait_state = 2;
															#line 3227 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< AddTaskActor9, 1, Void >*>(static_cast<AddTaskActor9*>(this)));
															#line 27145 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1when1(Key const& doneKey,int loopDepth) 
	{
		loopDepth = a_body1cont1(doneKey, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Key && doneKey,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(doneKey), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<AddTaskActor9*>(this)->actor_wait_state > 0) static_cast<AddTaskActor9*>(this)->actor_wait_state = 0;
		static_cast<AddTaskActor9*>(this)->ActorCallback< AddTaskActor9, 0, Key >::remove();

	}
	void a_callback_fire(ActorCallback< AddTaskActor9, 0, Key >*,Key const& value) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< AddTaskActor9, 0, Key >*,Key && value) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< AddTaskActor9, 0, Key >*,Error err) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont2(Void const& _,int loopDepth) 
	{
															#line 3229 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		Params.inputFile().set(task, rf);
															#line 3230 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		Params.readOffset().set(task, offset);
															#line 3231 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		Params.readLen().set(task, len);
															#line 3233 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!waitFor)
															#line 27223 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 3234 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (!static_cast<AddTaskActor9*>(this)->SAV<Key>::futures) { (void)(taskBucket->addTask(tr, task)); this->~AddTaskActor9State(); static_cast<AddTaskActor9*>(this)->destroy(); return 0; }
															#line 27227 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			new (&static_cast<AddTaskActor9*>(this)->SAV< Key >::value()) Key(taskBucket->addTask(tr, task));
			this->~AddTaskActor9State();
			static_cast<AddTaskActor9*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 3237 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_2 = waitFor->onSetAddTask(tr, taskBucket, task);
															#line 3237 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<AddTaskActor9*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 27237 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont2when1(__when_expr_2.get(), loopDepth); };
		static_cast<AddTaskActor9*>(this)->actor_wait_state = 3;
															#line 3237 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< AddTaskActor9, 2, Void >*>(static_cast<AddTaskActor9*>(this)));
															#line 27242 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont2(Void && _,int loopDepth) 
	{
															#line 3229 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		Params.inputFile().set(task, rf);
															#line 3230 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		Params.readOffset().set(task, offset);
															#line 3231 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		Params.readLen().set(task, len);
															#line 3233 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!waitFor)
															#line 27257 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 3234 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (!static_cast<AddTaskActor9*>(this)->SAV<Key>::futures) { (void)(taskBucket->addTask(tr, task)); this->~AddTaskActor9State(); static_cast<AddTaskActor9*>(this)->destroy(); return 0; }
															#line 27261 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			new (&static_cast<AddTaskActor9*>(this)->SAV< Key >::value()) Key(taskBucket->addTask(tr, task));
			this->~AddTaskActor9State();
			static_cast<AddTaskActor9*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 3237 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_2 = waitFor->onSetAddTask(tr, taskBucket, task);
															#line 3237 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<AddTaskActor9*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 27271 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont2when1(__when_expr_2.get(), loopDepth); };
		static_cast<AddTaskActor9*>(this)->actor_wait_state = 3;
															#line 3237 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< AddTaskActor9, 2, Void >*>(static_cast<AddTaskActor9*>(this)));
															#line 27276 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<AddTaskActor9*>(this)->actor_wait_state > 0) static_cast<AddTaskActor9*>(this)->actor_wait_state = 0;
		static_cast<AddTaskActor9*>(this)->ActorCallback< AddTaskActor9, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< AddTaskActor9, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< AddTaskActor9, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< AddTaskActor9, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont3(Void const& _,int loopDepth) 
	{
															#line 3238 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<AddTaskActor9*>(this)->SAV<Key>::futures) { (void)(LiteralStringRef("OnSetAddTask")); this->~AddTaskActor9State(); static_cast<AddTaskActor9*>(this)->destroy(); return 0; }
															#line 27348 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<AddTaskActor9*>(this)->SAV< Key >::value()) Key(LiteralStringRef("OnSetAddTask"));
		this->~AddTaskActor9State();
		static_cast<AddTaskActor9*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont3(Void && _,int loopDepth) 
	{
															#line 3238 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<AddTaskActor9*>(this)->SAV<Key>::futures) { (void)(LiteralStringRef("OnSetAddTask")); this->~AddTaskActor9State(); static_cast<AddTaskActor9*>(this)->destroy(); return 0; }
															#line 27360 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<AddTaskActor9*>(this)->SAV< Key >::value()) Key(LiteralStringRef("OnSetAddTask"));
		this->~AddTaskActor9State();
		static_cast<AddTaskActor9*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont3(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont3(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<AddTaskActor9*>(this)->actor_wait_state > 0) static_cast<AddTaskActor9*>(this)->actor_wait_state = 0;
		static_cast<AddTaskActor9*>(this)->ActorCallback< AddTaskActor9, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< AddTaskActor9, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< AddTaskActor9, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< AddTaskActor9, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 2);

	}
															#line 3215 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 3215 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskBucket> taskBucket;
															#line 3215 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<Task> parentTask;
															#line 3215 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	RestoreFile rf;
															#line 3215 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int64_t offset;
															#line 3215 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int64_t len;
															#line 3215 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	TaskCompletionKey completionKey;
															#line 3215 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskFuture> waitFor;
															#line 3224 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<Task> task;
															#line 27449 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via addTask()
															#line 3215 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class AddTaskActor9 final : public Actor<Key>, public ActorCallback< AddTaskActor9, 0, Key >, public ActorCallback< AddTaskActor9, 1, Void >, public ActorCallback< AddTaskActor9, 2, Void >, public FastAllocated<AddTaskActor9>, public AddTaskActor9State<AddTaskActor9> {
															#line 27454 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<AddTaskActor9>::operator new;
	using FastAllocated<AddTaskActor9>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Key>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< AddTaskActor9, 0, Key >;
friend struct ActorCallback< AddTaskActor9, 1, Void >;
friend struct ActorCallback< AddTaskActor9, 2, Void >;
															#line 3215 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	AddTaskActor9(Reference<ReadYourWritesTransaction> const& tr,Reference<TaskBucket> const& taskBucket,Reference<Task> const& parentTask,RestoreFile const& rf,int64_t const& offset,int64_t const& len,TaskCompletionKey const& completionKey,Reference<TaskFuture> const& waitFor = Reference<TaskFuture>()) 
															#line 27467 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<Key>(),
		   AddTaskActor9State<AddTaskActor9>(tr, taskBucket, parentTask, rf, offset, len, completionKey, waitFor)
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("addTask");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< AddTaskActor9, 0, Key >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< AddTaskActor9, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< AddTaskActor9, 2, Void >*)0, actor_cancelled()); break;
		}

	}
};
															#line 3215 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<Key> addTask( Reference<ReadYourWritesTransaction> const& tr, Reference<TaskBucket> const& taskBucket, Reference<Task> const& parentTask, RestoreFile const& rf, int64_t const& offset, int64_t const& len, TaskCompletionKey const& completionKey, Reference<TaskFuture> const& waitFor = Reference<TaskFuture>() ) {
															#line 3215 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<Key>(new AddTaskActor9(tr, taskBucket, parentTask, rf, offset, len, completionKey, waitFor));
															#line 27496 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 3240 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

	static StringRef name;
	static constexpr uint32_t version = 1;
	StringRef getName() const override { return name; };

	Future<Void> execute(Database cx,
	                     Reference<TaskBucket> tb,
	                     Reference<FutureBucket> fb,
	                     Reference<Task> task) override {
		return _execute(cx, tb, fb, task);
	};
	Future<Void> finish(Reference<ReadYourWritesTransaction> tr,
	                    Reference<TaskBucket> tb,
	                    Reference<FutureBucket> fb,
	                    Reference<Task> task) override {
		return _finish(tr, tb, fb, task);
	};
};
StringRef RestoreRangeTaskFunc::name = LiteralStringRef("restore_range_data");
REGISTER_TASKFUNC(RestoreRangeTaskFunc);

// Decodes a mutation log key, which contains (hash, commitVersion, chunkNumber) and
// returns (commitVersion, chunkNumber)
std::pair<Version, int32_t> decodeMutationLogKey(const StringRef& key) {
	ASSERT(key.size() == sizeof(uint8_t) + sizeof(Version) + sizeof(int32_t));

	uint8_t hash;
	Version version;
	int32_t part;
	BinaryReader rd(key, Unversioned());
	rd >> hash >> version >> part;
	version = bigEndian64(version);
	part = bigEndian32(part);

	int32_t v = version / CLIENT_KNOBS->LOG_RANGE_BLOCK_SIZE;
	ASSERT(((uint8_t)hashlittle(&v, sizeof(v), 0)) == hash);

	return std::make_pair(version, part);
}

// Decodes an encoded list of mutations in the format of:
//   [includeVersion:uint64_t][val_length:uint32_t][mutation_1][mutation_2]...[mutation_k],
// where a mutation is encoded as:
//   [type:uint32_t][keyLength:uint32_t][valueLength:uint32_t][param1][param2]
std::vector<MutationRef> decodeMutationLogValue(const StringRef& value) {
	StringRefReader reader(value, restore_corrupted_data());

	Version protocolVersion = reader.consume<uint64_t>();
	if (protocolVersion <= 0x0FDB00A200090001) {
		throw incompatible_protocol_version();
	}

	uint32_t val_length = reader.consume<uint32_t>();
	if (val_length != value.size() - sizeof(uint64_t) - sizeof(uint32_t)) {
		TraceEvent(SevError, "FileRestoreLogValueError")
		    .detail("ValueLen", val_length)
		    .detail("ValueSize", value.size())
		    .detail("Value", printable(value));
	}

	std::vector<MutationRef> mutations;
	while (1) {
		if (reader.eof())
			break;

		// Deserialization of a MutationRef, which was packed by MutationListRef::push_back_deep()
		uint32_t type, p1len, p2len;
		type = reader.consume<uint32_t>();
		p1len = reader.consume<uint32_t>();
		p2len = reader.consume<uint32_t>();

		const uint8_t* key = reader.consume(p1len);
		const uint8_t* val = reader.consume(p2len);

		mutations.emplace_back((MutationRef::Type)type, StringRef(key, p1len), StringRef(val, p2len));
	}
	return mutations;
}

void AccumulatedMutations::addChunk(int chunkNumber, const KeyValueRef& kv) {
	if (chunkNumber == lastChunkNumber + 1) {
		lastChunkNumber = chunkNumber;
		serializedMutations += kv.value.toString();
	} else {
		lastChunkNumber = -2;
		serializedMutations.clear();
	}
	kvs.push_back(kv);
}

bool AccumulatedMutations::isComplete() const {
	if (lastChunkNumber >= 0) {
		StringRefReader reader(serializedMutations, restore_corrupted_data());

		Version protocolVersion = reader.consume<uint64_t>();
		if (protocolVersion <= 0x0FDB00A200090001) {
			throw incompatible_protocol_version();
		}

		uint32_t vLen = reader.consume<uint32_t>();
		return vLen == reader.remainder().size();
	}

	return false;
}

// Returns true if a complete chunk contains any MutationRefs which intersect with any
// range in ranges.
// It is undefined behavior to run this if isComplete() does not return true.
bool AccumulatedMutations::matchesAnyRange(const RangeMapFilters& filters) const {
	std::vector<MutationRef> mutations = decodeMutationLogValue(serializedMutations);
	for (auto& m : mutations) {
		if (filters.match(m)) {
			return true;
		}
	}

	return false;
}

bool RangeMapFilters::match(const MutationRef& m) const {
	if (isSingleKeyMutation((MutationRef::Type)m.type)) {
		if (match(singleKeyRange(m.param1))) {
			return true;
		}
	} else if (m.type == MutationRef::ClearRange) {
		if (match(KeyRangeRef(m.param1, m.param2))) {
			return true;
		}
	} else {
		ASSERT(false);
	}
	return false;
}

bool RangeMapFilters::match(const KeyValueRef& kv) const {
	return match(singleKeyRange(kv.key));
}

bool RangeMapFilters::match(const KeyRangeRef& range) const {
	auto ranges = rangeMap.intersectingRanges(range);
	for (const auto& r : ranges) {
		if (r.cvalue() == 1) {
			return true;
		}
	}
	return false;
}

// Returns a vector of filtered KV refs from data which are either part of incomplete mutation groups OR complete
// and have data relevant to one of the KV ranges in ranges
std::vector<KeyValueRef> filterLogMutationKVPairs(VectorRef<KeyValueRef> data, const RangeMapFilters& filters) {
	std::unordered_map<Version, AccumulatedMutations> mutationBlocksByVersion;

	for (auto& kv : data) {
		auto versionAndChunkNumber = decodeMutationLogKey(kv.key);
		mutationBlocksByVersion[versionAndChunkNumber.first].addChunk(versionAndChunkNumber.second, kv);
	}

	std::vector<KeyValueRef> output;

	for (auto& vb : mutationBlocksByVersion) {
		AccumulatedMutations& m = vb.second;

		// If the mutations are incomplete or match one of the ranges, include in results.
		if (!m.isComplete() || m.matchesAnyRange(filters)) {
			output.insert(output.end(), m.kvs.begin(), m.kvs.end());
		}
	}

	return output;
}
struct RestoreLogDataTaskFunc : RestoreFileTaskFuncBase {
	static StringRef name;
	static constexpr uint32_t version = 1;
	StringRef getName() const override { return name; };

	static struct : InputParams {
	} Params;

																#line 27680 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via _execute()
															#line 3420 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class _executeActor6>
															#line 3420 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class _executeActor6State {
															#line 27686 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 3420 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	_executeActor6State(Database const& cx,Reference<TaskBucket> const& taskBucket,Reference<FutureBucket> const& futureBucket,Reference<Task> const& task) 
															#line 3420 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 3420 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : cx(cx),
															#line 3420 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   taskBucket(taskBucket),
															#line 3420 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   futureBucket(futureBucket),
															#line 3420 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   task(task),
															#line 3424 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   restore(task),
															#line 3426 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   logFile(Params.inputFile().get(task)),
															#line 3427 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   readOffset(Params.readOffset().get(task)),
															#line 3428 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   readLen(Params.readLen().get(task))
															#line 27707 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("_execute", reinterpret_cast<unsigned long>(this));

	}
	~_executeActor6State() 
	{
		fdb_probe_actor_destroy("_execute", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 3430 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			TraceEvent("FileRestoreLogStart") .suppressFor(60) .detail("RestoreUID", restore.getUid()) .detail("FileName", logFile.fileName) .detail("FileBeginVersion", logFile.version) .detail("FileEndVersion", logFile.endVersion) .detail("FileSize", logFile.fileSize) .detail("ReadOffset", readOffset) .detail("ReadLen", readLen) .detail("TaskInstance", THIS_ADDR);
															#line 3441 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr = Reference<ReadYourWritesTransaction>(new ReadYourWritesTransaction(cx));
															#line 3442 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			bc = Reference<IBackupContainer>();
															#line 3443 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			ranges = std::vector<KeyRange>();
															#line 3445 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			;
															#line 27730 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~_executeActor6State();
		static_cast<_executeActor6*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 3464 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		mutationLogPrefix = restore.mutationLogPrefix();
															#line 3465 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Reference<IAsyncFile>> __when_expr_5 = bc->readFile(logFile.fileName);
															#line 3465 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor6*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 27757 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_5.isReady()) { if (__when_expr_5.isError()) return a_body1Catch1(__when_expr_5.getError(), loopDepth); else return a_body1cont1when1(__when_expr_5.get(), loopDepth); };
		static_cast<_executeActor6*>(this)->actor_wait_state = 6;
															#line 3465 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_5.addCallbackAndClear(static_cast<ActorCallback< _executeActor6, 5, Reference<IAsyncFile> >*>(static_cast<_executeActor6*>(this)));
															#line 27762 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
		try {
															#line 3447 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 3448 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 3450 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Reference<IBackupContainer>> __when_expr_0 = restore.sourceContainer().getOrThrow(tr);
															#line 3450 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_executeActor6*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 27785 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1loopBody1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
			static_cast<_executeActor6*>(this)->actor_wait_state = 1;
															#line 3450 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< _executeActor6, 0, Reference<IBackupContainer> >*>(static_cast<_executeActor6*>(this)));
															#line 27790 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1break1(int loopDepth) 
	{
		try {
			return a_body1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 3460 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_4 = tr->onError(e);
															#line 3460 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_executeActor6*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 27827 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1Catch1(__when_expr_4.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1Catch1when1(__when_expr_4.get(), loopDepth); };
			static_cast<_executeActor6*>(this)->actor_wait_state = 5;
															#line 3460 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< _executeActor6, 4, Void >*>(static_cast<_executeActor6*>(this)));
															#line 27832 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(Reference<IBackupContainer> const& _bc,int loopDepth) 
	{
															#line 3451 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		bc = getBackupContainerWithProxy(_bc);
															#line 3453 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_1 = store(ranges, restore.getRestoreRangesOrDefault(tr));
															#line 3453 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor6*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 27851 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
		static_cast<_executeActor6*>(this)->actor_wait_state = 2;
															#line 3453 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< _executeActor6, 1, Void >*>(static_cast<_executeActor6*>(this)));
															#line 27856 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2(Reference<IBackupContainer> && _bc,int loopDepth) 
	{
															#line 3451 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		bc = getBackupContainerWithProxy(_bc);
															#line 3453 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_1 = store(ranges, restore.getRestoreRangesOrDefault(tr));
															#line 3453 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor6*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 27869 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
		static_cast<_executeActor6*>(this)->actor_wait_state = 2;
															#line 3453 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< _executeActor6, 1, Void >*>(static_cast<_executeActor6*>(this)));
															#line 27874 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1when1(Reference<IBackupContainer> const& _bc,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(_bc, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Reference<IBackupContainer> && _bc,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(std::move(_bc), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<_executeActor6*>(this)->actor_wait_state > 0) static_cast<_executeActor6*>(this)->actor_wait_state = 0;
		static_cast<_executeActor6*>(this)->ActorCallback< _executeActor6, 0, Reference<IBackupContainer> >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor6, 0, Reference<IBackupContainer> >*,Reference<IBackupContainer> const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< _executeActor6, 0, Reference<IBackupContainer> >*,Reference<IBackupContainer> && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< _executeActor6, 0, Reference<IBackupContainer> >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1cont3(Void const& _,int loopDepth) 
	{
															#line 3455 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_2 = checkTaskVersion(tr->getDatabase(), task, name, version);
															#line 3455 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor6*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 27948 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1loopBody1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1loopBody1cont3when1(__when_expr_2.get(), loopDepth); };
		static_cast<_executeActor6*>(this)->actor_wait_state = 3;
															#line 3455 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< _executeActor6, 2, Void >*>(static_cast<_executeActor6*>(this)));
															#line 27953 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont3(Void && _,int loopDepth) 
	{
															#line 3455 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_2 = checkTaskVersion(tr->getDatabase(), task, name, version);
															#line 3455 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor6*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 27964 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1loopBody1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1loopBody1cont3when1(__when_expr_2.get(), loopDepth); };
		static_cast<_executeActor6*>(this)->actor_wait_state = 3;
															#line 3455 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< _executeActor6, 2, Void >*>(static_cast<_executeActor6*>(this)));
															#line 27969 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<_executeActor6*>(this)->actor_wait_state > 0) static_cast<_executeActor6*>(this)->actor_wait_state = 0;
		static_cast<_executeActor6*>(this)->ActorCallback< _executeActor6, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor6, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< _executeActor6, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< _executeActor6, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1loopBody1cont4(Void const& _,int loopDepth) 
	{
															#line 3456 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_3 = taskBucket->keepRunning(tr, task);
															#line 3456 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor6*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 28043 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1loopBody1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1loopBody1cont4when1(__when_expr_3.get(), loopDepth); };
		static_cast<_executeActor6*>(this)->actor_wait_state = 4;
															#line 3456 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< _executeActor6, 3, Void >*>(static_cast<_executeActor6*>(this)));
															#line 28048 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont4(Void && _,int loopDepth) 
	{
															#line 3456 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_3 = taskBucket->keepRunning(tr, task);
															#line 3456 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor6*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 28059 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1loopBody1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1loopBody1cont4when1(__when_expr_3.get(), loopDepth); };
		static_cast<_executeActor6*>(this)->actor_wait_state = 4;
															#line 3456 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< _executeActor6, 3, Void >*>(static_cast<_executeActor6*>(this)));
															#line 28064 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont3when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont4(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont3when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont4(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<_executeActor6*>(this)->actor_wait_state > 0) static_cast<_executeActor6*>(this)->actor_wait_state = 0;
		static_cast<_executeActor6*>(this)->ActorCallback< _executeActor6, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor6, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont3when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< _executeActor6, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont3when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< _executeActor6, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1loopBody1cont5(Void const& _,int loopDepth) 
	{
		return a_body1break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1loopBody1cont5(Void && _,int loopDepth) 
	{
		return a_body1break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1loopBody1cont4when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont5(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont4when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont5(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<_executeActor6*>(this)->actor_wait_state > 0) static_cast<_executeActor6*>(this)->actor_wait_state = 0;
		static_cast<_executeActor6*>(this)->ActorCallback< _executeActor6, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor6, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1cont4when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< _executeActor6, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1cont4when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< _executeActor6, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 3);

	}
	int a_body1loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose5() 
	{
		if (static_cast<_executeActor6*>(this)->actor_wait_state > 0) static_cast<_executeActor6*>(this)->actor_wait_state = 0;
		static_cast<_executeActor6*>(this)->ActorCallback< _executeActor6, 4, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor6, 4, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_fire(ActorCallback< _executeActor6, 4, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_error(ActorCallback< _executeActor6, 4, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 4);

	}
	int a_body1cont2(int loopDepth) 
	{
															#line 3466 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Standalone<VectorRef<KeyValueRef>>> __when_expr_6 = decodeMutationLogFileBlock(inFile, readOffset, readLen);
															#line 3466 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor6*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 28288 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_6.isReady()) { if (__when_expr_6.isError()) return a_body1Catch1(__when_expr_6.getError(), loopDepth); else return a_body1cont2when1(__when_expr_6.get(), loopDepth); };
		static_cast<_executeActor6*>(this)->actor_wait_state = 7;
															#line 3466 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_6.addCallbackAndClear(static_cast<ActorCallback< _executeActor6, 6, Standalone<VectorRef<KeyValueRef>> >*>(static_cast<_executeActor6*>(this)));
															#line 28293 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1when1(Reference<IAsyncFile> const& __inFile,int loopDepth) 
	{
															#line 3465 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		inFile = __inFile;
															#line 28302 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont2(loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Reference<IAsyncFile> && __inFile,int loopDepth) 
	{
		inFile = std::move(__inFile);
		loopDepth = a_body1cont2(loopDepth);

		return loopDepth;
	}
	void a_exitChoose6() 
	{
		if (static_cast<_executeActor6*>(this)->actor_wait_state > 0) static_cast<_executeActor6*>(this)->actor_wait_state = 0;
		static_cast<_executeActor6*>(this)->ActorCallback< _executeActor6, 5, Reference<IAsyncFile> >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor6, 5, Reference<IAsyncFile> >*,Reference<IAsyncFile> const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_fire(ActorCallback< _executeActor6, 5, Reference<IAsyncFile> >*,Reference<IAsyncFile> && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_error(ActorCallback< _executeActor6, 5, Reference<IAsyncFile> >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 5);

	}
	int a_body1cont3(int loopDepth) 
	{
															#line 3471 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		RangeMapFilters filters(ranges);
															#line 3472 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		dataFiltered = filterLogMutationKVPairs(dataOriginal, filters);
															#line 3474 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		start = 0;
															#line 3475 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		end = dataFiltered.size();
															#line 3476 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		dataSizeLimit = BUGGIFY ? deterministicRandom()->randomInt(256 * 1024, 10e6) : CLIENT_KNOBS->RESTORE_WRITE_TX_SIZE;
															#line 3479 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr->reset();
															#line 3480 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		;
															#line 28381 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont3loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1cont2when1(Standalone<VectorRef<KeyValueRef>> const& __dataOriginal,int loopDepth) 
	{
															#line 3466 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		dataOriginal = __dataOriginal;
															#line 28390 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1cont2when1(Standalone<VectorRef<KeyValueRef>> && __dataOriginal,int loopDepth) 
	{
		dataOriginal = std::move(__dataOriginal);
		loopDepth = a_body1cont3(loopDepth);

		return loopDepth;
	}
	void a_exitChoose7() 
	{
		if (static_cast<_executeActor6*>(this)->actor_wait_state > 0) static_cast<_executeActor6*>(this)->actor_wait_state = 0;
		static_cast<_executeActor6*>(this)->ActorCallback< _executeActor6, 6, Standalone<VectorRef<KeyValueRef>> >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor6, 6, Standalone<VectorRef<KeyValueRef>> >*,Standalone<VectorRef<KeyValueRef>> const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 6);

	}
	void a_callback_fire(ActorCallback< _executeActor6, 6, Standalone<VectorRef<KeyValueRef>> >*,Standalone<VectorRef<KeyValueRef>> && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 6);

	}
	void a_callback_error(ActorCallback< _executeActor6, 6, Standalone<VectorRef<KeyValueRef>> >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 6);

	}
	int a_body1cont3loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1cont3loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1(int loopDepth) 
	{
		try {
															#line 3482 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (start == end)
															#line 28465 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			{
															#line 3483 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				if (!static_cast<_executeActor6*>(this)->SAV<Void>::futures) { (void)(Void()); this->~_executeActor6State(); static_cast<_executeActor6*>(this)->destroy(); return 0; }
															#line 28469 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				new (&static_cast<_executeActor6*>(this)->SAV< Void >::value()) Void(Void());
				this->~_executeActor6State();
				static_cast<_executeActor6*>(this)->finishSendAndDelPromiseRef();
				return 0;
			}
															#line 3485 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 3486 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 3488 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			i = start;
															#line 3489 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			txBytes = 0;
															#line 3490 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			for(;i < end && txBytes < dataSizeLimit;++i) {
															#line 3491 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				Key k = dataFiltered[i].key.withPrefix(mutationLogPrefix);
															#line 3492 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				ValueRef v = dataFiltered[i].value;
															#line 3493 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				tr->set(k, v);
															#line 3494 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				txBytes += k.expectedSize();
															#line 3495 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				txBytes += v.expectedSize();
															#line 28495 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			}
															#line 3498 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			checkLock = checkDatabaseLock(tr, restore.getUid());
															#line 3500 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_7 = taskBucket->keepRunning(tr, task);
															#line 3500 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_executeActor6*>(this)->actor_wait_state < 0) return a_body1cont3loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 28503 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_7.isReady()) { if (__when_expr_7.isError()) return a_body1cont3loopBody1Catch1(__when_expr_7.getError(), loopDepth); else return a_body1cont3loopBody1when1(__when_expr_7.get(), loopDepth); };
			static_cast<_executeActor6*>(this)->actor_wait_state = 8;
															#line 3500 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_7.addCallbackAndClear(static_cast<ActorCallback< _executeActor6, 7, Void >*>(static_cast<_executeActor6*>(this)));
															#line 28508 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1cont3loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1cont3loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont3loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1cont3loopHead1(0);

		return loopDepth;
	}
	int a_body1cont3loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 3529 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (e.code() == error_code_transaction_too_large)
															#line 28530 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			{
															#line 3530 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				dataSizeLimit /= 2;
															#line 28534 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				loopDepth = a_body1cont3loopBody1Catch1cont1(loopDepth);
			}
			else
			{
															#line 3532 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				StrictFuture<Void> __when_expr_10 = tr->onError(e);
															#line 3532 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				if (static_cast<_executeActor6*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 28543 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				if (__when_expr_10.isReady()) { if (__when_expr_10.isError()) return a_body1Catch1(__when_expr_10.getError(), std::max(0, loopDepth - 1)); else return a_body1cont3loopBody1Catch1when1(__when_expr_10.get(), loopDepth); };
				static_cast<_executeActor6*>(this)->actor_wait_state = 11;
															#line 3532 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				__when_expr_10.addCallbackAndClear(static_cast<ActorCallback< _executeActor6, 10, Void >*>(static_cast<_executeActor6*>(this)));
															#line 28548 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				loopDepth = 0;
			}
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1cont3loopBody1cont2(Void const& _,int loopDepth) 
	{
															#line 3501 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_8 = checkLock;
															#line 3501 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor6*>(this)->actor_wait_state < 0) return a_body1cont3loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 28566 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_8.isReady()) { if (__when_expr_8.isError()) return a_body1cont3loopBody1Catch1(__when_expr_8.getError(), loopDepth); else return a_body1cont3loopBody1cont2when1(__when_expr_8.get(), loopDepth); };
		static_cast<_executeActor6*>(this)->actor_wait_state = 9;
															#line 3501 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_8.addCallbackAndClear(static_cast<ActorCallback< _executeActor6, 8, Void >*>(static_cast<_executeActor6*>(this)));
															#line 28571 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont3loopBody1cont2(Void && _,int loopDepth) 
	{
															#line 3501 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_8 = checkLock;
															#line 3501 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor6*>(this)->actor_wait_state < 0) return a_body1cont3loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 28582 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_8.isReady()) { if (__when_expr_8.isError()) return a_body1cont3loopBody1Catch1(__when_expr_8.getError(), loopDepth); else return a_body1cont3loopBody1cont2when1(__when_expr_8.get(), loopDepth); };
		static_cast<_executeActor6*>(this)->actor_wait_state = 9;
															#line 3501 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_8.addCallbackAndClear(static_cast<ActorCallback< _executeActor6, 8, Void >*>(static_cast<_executeActor6*>(this)));
															#line 28587 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont3loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose8() 
	{
		if (static_cast<_executeActor6*>(this)->actor_wait_state > 0) static_cast<_executeActor6*>(this)->actor_wait_state = 0;
		static_cast<_executeActor6*>(this)->ActorCallback< _executeActor6, 7, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor6, 7, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 7);
		a_exitChoose8();
		try {
			a_body1cont3loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont3loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont3loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 7);

	}
	void a_callback_fire(ActorCallback< _executeActor6, 7, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 7);
		a_exitChoose8();
		try {
			a_body1cont3loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont3loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont3loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 7);

	}
	void a_callback_error(ActorCallback< _executeActor6, 7, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 7);
		a_exitChoose8();
		try {
			a_body1cont3loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont3loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont3loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 7);

	}
	int a_body1cont3loopBody1cont5(Void const& _,int loopDepth) 
	{
															#line 3504 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		restore.bytesWritten().atomicOp(tr, txBytes, MutationRef::Type::AddValue);
															#line 3506 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_9 = tr->commit();
															#line 3506 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor6*>(this)->actor_wait_state < 0) return a_body1cont3loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 28663 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_9.isReady()) { if (__when_expr_9.isError()) return a_body1cont3loopBody1Catch1(__when_expr_9.getError(), loopDepth); else return a_body1cont3loopBody1cont5when1(__when_expr_9.get(), loopDepth); };
		static_cast<_executeActor6*>(this)->actor_wait_state = 10;
															#line 3506 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_9.addCallbackAndClear(static_cast<ActorCallback< _executeActor6, 9, Void >*>(static_cast<_executeActor6*>(this)));
															#line 28668 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont3loopBody1cont5(Void && _,int loopDepth) 
	{
															#line 3504 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		restore.bytesWritten().atomicOp(tr, txBytes, MutationRef::Type::AddValue);
															#line 3506 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_9 = tr->commit();
															#line 3506 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor6*>(this)->actor_wait_state < 0) return a_body1cont3loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 28681 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_9.isReady()) { if (__when_expr_9.isError()) return a_body1cont3loopBody1Catch1(__when_expr_9.getError(), loopDepth); else return a_body1cont3loopBody1cont5when1(__when_expr_9.get(), loopDepth); };
		static_cast<_executeActor6*>(this)->actor_wait_state = 10;
															#line 3506 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_9.addCallbackAndClear(static_cast<ActorCallback< _executeActor6, 9, Void >*>(static_cast<_executeActor6*>(this)));
															#line 28686 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont3loopBody1cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1cont5(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1cont5(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose9() 
	{
		if (static_cast<_executeActor6*>(this)->actor_wait_state > 0) static_cast<_executeActor6*>(this)->actor_wait_state = 0;
		static_cast<_executeActor6*>(this)->ActorCallback< _executeActor6, 8, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor6, 8, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 8);
		a_exitChoose9();
		try {
			a_body1cont3loopBody1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont3loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont3loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 8);

	}
	void a_callback_fire(ActorCallback< _executeActor6, 8, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 8);
		a_exitChoose9();
		try {
			a_body1cont3loopBody1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont3loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont3loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 8);

	}
	void a_callback_error(ActorCallback< _executeActor6, 8, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 8);
		a_exitChoose9();
		try {
			a_body1cont3loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont3loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont3loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 8);

	}
	int a_body1cont3loopBody1cont6(Void const& _,int loopDepth) 
	{
															#line 3508 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent("FileRestoreCommittedLog") .suppressFor(60) .detail("RestoreUID", restore.getUid()) .detail("FileName", logFile.fileName) .detail("FileBeginVersion", logFile.version) .detail("FileEndVersion", logFile.endVersion) .detail("FileSize", logFile.fileSize) .detail("ReadOffset", readOffset) .detail("ReadLen", readLen) .detail("CommitVersion", tr->getCommittedVersion()) .detail("StartIndex", start) .detail("EndIndex", i) .detail("RecordCountOriginal", dataOriginal.size()) .detail("RecordCountFiltered", dataFiltered.size()) .detail("Bytes", txBytes) .detail("TaskInstance", THIS_ADDR);
															#line 3526 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		start = i;
															#line 3527 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr->reset();
															#line 28762 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont3loopBody1cont8(loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1cont6(Void && _,int loopDepth) 
	{
															#line 3508 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent("FileRestoreCommittedLog") .suppressFor(60) .detail("RestoreUID", restore.getUid()) .detail("FileName", logFile.fileName) .detail("FileBeginVersion", logFile.version) .detail("FileEndVersion", logFile.endVersion) .detail("FileSize", logFile.fileSize) .detail("ReadOffset", readOffset) .detail("ReadLen", readLen) .detail("CommitVersion", tr->getCommittedVersion()) .detail("StartIndex", start) .detail("EndIndex", i) .detail("RecordCountOriginal", dataOriginal.size()) .detail("RecordCountFiltered", dataFiltered.size()) .detail("Bytes", txBytes) .detail("TaskInstance", THIS_ADDR);
															#line 3526 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		start = i;
															#line 3527 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr->reset();
															#line 28775 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont3loopBody1cont8(loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1cont5when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1cont6(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1cont5when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1cont6(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose10() 
	{
		if (static_cast<_executeActor6*>(this)->actor_wait_state > 0) static_cast<_executeActor6*>(this)->actor_wait_state = 0;
		static_cast<_executeActor6*>(this)->ActorCallback< _executeActor6, 9, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor6, 9, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 9);
		a_exitChoose10();
		try {
			a_body1cont3loopBody1cont5when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont3loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont3loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 9);

	}
	void a_callback_fire(ActorCallback< _executeActor6, 9, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 9);
		a_exitChoose10();
		try {
			a_body1cont3loopBody1cont5when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont3loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont3loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 9);

	}
	void a_callback_error(ActorCallback< _executeActor6, 9, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 9);
		a_exitChoose10();
		try {
			a_body1cont3loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont3loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont3loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 9);

	}
	int a_body1cont3loopBody1cont8(int loopDepth) 
	{
		try {
			loopDepth = a_body1cont3loopBody1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1cont3loopBody1Catch1cont1(int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1Catch1cont3(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1Catch1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1Catch1cont3(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1Catch1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1Catch1cont3(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1Catch1cont3(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose11() 
	{
		if (static_cast<_executeActor6*>(this)->actor_wait_state > 0) static_cast<_executeActor6*>(this)->actor_wait_state = 0;
		static_cast<_executeActor6*>(this)->ActorCallback< _executeActor6, 10, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor6, 10, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 10);
		a_exitChoose11();
		try {
			a_body1cont3loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 10);

	}
	void a_callback_fire(ActorCallback< _executeActor6, 10, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 10);
		a_exitChoose11();
		try {
			a_body1cont3loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 10);

	}
	void a_callback_error(ActorCallback< _executeActor6, 10, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 10);
		a_exitChoose11();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 10);

	}
															#line 3420 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Database cx;
															#line 3420 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskBucket> taskBucket;
															#line 3420 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<FutureBucket> futureBucket;
															#line 3420 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<Task> task;
															#line 3424 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	RestoreConfig restore;
															#line 3426 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	RestoreFile logFile;
															#line 3427 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int64_t readOffset;
															#line 3428 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int64_t readLen;
															#line 3441 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 3442 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<IBackupContainer> bc;
															#line 3443 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	std::vector<KeyRange> ranges;
															#line 3464 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Key mutationLogPrefix;
															#line 3465 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<IAsyncFile> inFile;
															#line 3466 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Standalone<VectorRef<KeyValueRef>> dataOriginal;
															#line 3472 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	std::vector<KeyValueRef> dataFiltered;
															#line 3474 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int start;
															#line 3475 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int end;
															#line 3476 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int dataSizeLimit;
															#line 3488 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int i;
															#line 3489 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int txBytes;
															#line 3498 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Future<Void> checkLock;
															#line 28979 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via _execute()
															#line 3420 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class _executeActor6 final : public Actor<Void>, public ActorCallback< _executeActor6, 0, Reference<IBackupContainer> >, public ActorCallback< _executeActor6, 1, Void >, public ActorCallback< _executeActor6, 2, Void >, public ActorCallback< _executeActor6, 3, Void >, public ActorCallback< _executeActor6, 4, Void >, public ActorCallback< _executeActor6, 5, Reference<IAsyncFile> >, public ActorCallback< _executeActor6, 6, Standalone<VectorRef<KeyValueRef>> >, public ActorCallback< _executeActor6, 7, Void >, public ActorCallback< _executeActor6, 8, Void >, public ActorCallback< _executeActor6, 9, Void >, public ActorCallback< _executeActor6, 10, Void >, public FastAllocated<_executeActor6>, public _executeActor6State<_executeActor6> {
															#line 28984 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<_executeActor6>::operator new;
	using FastAllocated<_executeActor6>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< _executeActor6, 0, Reference<IBackupContainer> >;
friend struct ActorCallback< _executeActor6, 1, Void >;
friend struct ActorCallback< _executeActor6, 2, Void >;
friend struct ActorCallback< _executeActor6, 3, Void >;
friend struct ActorCallback< _executeActor6, 4, Void >;
friend struct ActorCallback< _executeActor6, 5, Reference<IAsyncFile> >;
friend struct ActorCallback< _executeActor6, 6, Standalone<VectorRef<KeyValueRef>> >;
friend struct ActorCallback< _executeActor6, 7, Void >;
friend struct ActorCallback< _executeActor6, 8, Void >;
friend struct ActorCallback< _executeActor6, 9, Void >;
friend struct ActorCallback< _executeActor6, 10, Void >;
															#line 3420 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	_executeActor6(Database const& cx,Reference<TaskBucket> const& taskBucket,Reference<FutureBucket> const& futureBucket,Reference<Task> const& task) 
															#line 29005 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<Void>(),
		   _executeActor6State<_executeActor6>(cx, taskBucket, futureBucket, task)
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("_execute");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< _executeActor6, 0, Reference<IBackupContainer> >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< _executeActor6, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< _executeActor6, 2, Void >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< _executeActor6, 3, Void >*)0, actor_cancelled()); break;
		case 5: this->a_callback_error((ActorCallback< _executeActor6, 4, Void >*)0, actor_cancelled()); break;
		case 6: this->a_callback_error((ActorCallback< _executeActor6, 5, Reference<IAsyncFile> >*)0, actor_cancelled()); break;
		case 7: this->a_callback_error((ActorCallback< _executeActor6, 6, Standalone<VectorRef<KeyValueRef>> >*)0, actor_cancelled()); break;
		case 8: this->a_callback_error((ActorCallback< _executeActor6, 7, Void >*)0, actor_cancelled()); break;
		case 9: this->a_callback_error((ActorCallback< _executeActor6, 8, Void >*)0, actor_cancelled()); break;
		case 10: this->a_callback_error((ActorCallback< _executeActor6, 9, Void >*)0, actor_cancelled()); break;
		case 11: this->a_callback_error((ActorCallback< _executeActor6, 10, Void >*)0, actor_cancelled()); break;
		}

	}
};
															#line 3420 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<Void> _execute( Database const& cx, Reference<TaskBucket> const& taskBucket, Reference<FutureBucket> const& futureBucket, Reference<Task> const& task ) {
															#line 3420 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<Void>(new _executeActor6(cx, taskBucket, futureBucket, task));
															#line 29042 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 3536 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

																#line 29047 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via _finish()
															#line 3537 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class _finishActor12>
															#line 3537 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class _finishActor12State {
															#line 29053 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 3537 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	_finishActor12State(Reference<ReadYourWritesTransaction> const& tr,Reference<TaskBucket> const& taskBucket,Reference<FutureBucket> const& futureBucket,Reference<Task> const& task) 
															#line 3537 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 3537 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : tr(tr),
															#line 3537 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   taskBucket(taskBucket),
															#line 3537 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   futureBucket(futureBucket),
															#line 3537 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   task(task)
															#line 29066 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("_finish", reinterpret_cast<unsigned long>(this));

	}
	~_finishActor12State() 
	{
		fdb_probe_actor_destroy("_finish", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 3541 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			RestoreConfig(task).fileBlocksFinished().atomicOp(tr, 1, MutationRef::Type::AddValue);
															#line 3543 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			taskFuture = futureBucket->unpack(task->params[Task::reservedTaskParamKeyDone]);
															#line 3547 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_0 = taskFuture->set(tr, taskBucket) && taskBucket->finish(tr, task);
															#line 3547 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_finishActor12*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 29087 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<_finishActor12*>(this)->actor_wait_state = 1;
															#line 3547 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< _finishActor12, 0, Void >*>(static_cast<_finishActor12*>(this)));
															#line 29092 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~_finishActor12State();
		static_cast<_finishActor12*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void const& _,int loopDepth) 
	{
															#line 3549 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<_finishActor12*>(this)->SAV<Void>::futures) { (void)(Void()); this->~_finishActor12State(); static_cast<_finishActor12*>(this)->destroy(); return 0; }
															#line 29115 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<_finishActor12*>(this)->SAV< Void >::value()) Void(Void());
		this->~_finishActor12State();
		static_cast<_finishActor12*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1(Void && _,int loopDepth) 
	{
															#line 3549 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<_finishActor12*>(this)->SAV<Void>::futures) { (void)(Void()); this->~_finishActor12State(); static_cast<_finishActor12*>(this)->destroy(); return 0; }
															#line 29127 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<_finishActor12*>(this)->SAV< Void >::value()) Void(Void());
		this->~_finishActor12State();
		static_cast<_finishActor12*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<_finishActor12*>(this)->actor_wait_state > 0) static_cast<_finishActor12*>(this)->actor_wait_state = 0;
		static_cast<_finishActor12*>(this)->ActorCallback< _finishActor12, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor12, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< _finishActor12, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< _finishActor12, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 3537 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 3537 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskBucket> taskBucket;
															#line 3537 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<FutureBucket> futureBucket;
															#line 3537 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<Task> task;
															#line 3543 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskFuture> taskFuture;
															#line 29208 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via _finish()
															#line 3537 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class _finishActor12 final : public Actor<Void>, public ActorCallback< _finishActor12, 0, Void >, public FastAllocated<_finishActor12>, public _finishActor12State<_finishActor12> {
															#line 29213 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<_finishActor12>::operator new;
	using FastAllocated<_finishActor12>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< _finishActor12, 0, Void >;
															#line 3537 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	_finishActor12(Reference<ReadYourWritesTransaction> const& tr,Reference<TaskBucket> const& taskBucket,Reference<FutureBucket> const& futureBucket,Reference<Task> const& task) 
															#line 29224 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<Void>(),
		   _finishActor12State<_finishActor12>(tr, taskBucket, futureBucket, task)
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("_finish");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< _finishActor12, 0, Void >*)0, actor_cancelled()); break;
		}

	}
};
															#line 3537 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<Void> _finish( Reference<ReadYourWritesTransaction> const& tr, Reference<TaskBucket> const& taskBucket, Reference<FutureBucket> const& futureBucket, Reference<Task> const& task ) {
															#line 3537 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<Void>(new _finishActor12(tr, taskBucket, futureBucket, task));
															#line 29251 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 3551 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

																#line 29256 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via addTask()
															#line 3552 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class AddTaskActor10>
															#line 3552 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class AddTaskActor10State {
															#line 29262 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 3552 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	AddTaskActor10State(Reference<ReadYourWritesTransaction> const& tr,Reference<TaskBucket> const& taskBucket,Reference<Task> const& parentTask,RestoreFile const& lf,int64_t const& offset,int64_t const& len,TaskCompletionKey const& completionKey,Reference<TaskFuture> const& waitFor = Reference<TaskFuture>()) 
															#line 3552 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 3552 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : tr(tr),
															#line 3552 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   taskBucket(taskBucket),
															#line 3552 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   parentTask(parentTask),
															#line 3552 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   lf(lf),
															#line 3552 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   offset(offset),
															#line 3552 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   len(len),
															#line 3552 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   completionKey(completionKey),
															#line 3552 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   waitFor(waitFor)
															#line 29283 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("addTask", reinterpret_cast<unsigned long>(this));

	}
	~AddTaskActor10State() 
	{
		fdb_probe_actor_destroy("addTask", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 3560 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Key> __when_expr_0 = completionKey.get(tr, taskBucket);
															#line 3560 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<AddTaskActor10*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 29300 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<AddTaskActor10*>(this)->actor_wait_state = 1;
															#line 3560 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< AddTaskActor10, 0, Key >*>(static_cast<AddTaskActor10*>(this)));
															#line 29305 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~AddTaskActor10State();
		static_cast<AddTaskActor10*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Key const& doneKey,int loopDepth) 
	{
															#line 3561 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		task = Reference<Task>(new Task(RestoreLogDataTaskFunc::name, RestoreLogDataTaskFunc::version, doneKey));
															#line 3564 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_1 = RestoreConfig(parentTask).toTask(tr, task);
															#line 3564 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<AddTaskActor10*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 29332 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<AddTaskActor10*>(this)->actor_wait_state = 2;
															#line 3564 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< AddTaskActor10, 1, Void >*>(static_cast<AddTaskActor10*>(this)));
															#line 29337 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Key && doneKey,int loopDepth) 
	{
															#line 3561 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		task = Reference<Task>(new Task(RestoreLogDataTaskFunc::name, RestoreLogDataTaskFunc::version, doneKey));
															#line 3564 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_1 = RestoreConfig(parentTask).toTask(tr, task);
															#line 3564 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<AddTaskActor10*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 29350 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<AddTaskActor10*>(this)->actor_wait_state = 2;
															#line 3564 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< AddTaskActor10, 1, Void >*>(static_cast<AddTaskActor10*>(this)));
															#line 29355 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1when1(Key const& doneKey,int loopDepth) 
	{
		loopDepth = a_body1cont1(doneKey, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Key && doneKey,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(doneKey), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<AddTaskActor10*>(this)->actor_wait_state > 0) static_cast<AddTaskActor10*>(this)->actor_wait_state = 0;
		static_cast<AddTaskActor10*>(this)->ActorCallback< AddTaskActor10, 0, Key >::remove();

	}
	void a_callback_fire(ActorCallback< AddTaskActor10, 0, Key >*,Key const& value) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< AddTaskActor10, 0, Key >*,Key && value) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< AddTaskActor10, 0, Key >*,Error err) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont2(Void const& _,int loopDepth) 
	{
															#line 3565 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		Params.inputFile().set(task, lf);
															#line 3566 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		Params.readOffset().set(task, offset);
															#line 3567 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		Params.readLen().set(task, len);
															#line 3569 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!waitFor)
															#line 29433 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 3570 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (!static_cast<AddTaskActor10*>(this)->SAV<Key>::futures) { (void)(taskBucket->addTask(tr, task)); this->~AddTaskActor10State(); static_cast<AddTaskActor10*>(this)->destroy(); return 0; }
															#line 29437 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			new (&static_cast<AddTaskActor10*>(this)->SAV< Key >::value()) Key(taskBucket->addTask(tr, task));
			this->~AddTaskActor10State();
			static_cast<AddTaskActor10*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 3573 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_2 = waitFor->onSetAddTask(tr, taskBucket, task);
															#line 3573 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<AddTaskActor10*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 29447 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont2when1(__when_expr_2.get(), loopDepth); };
		static_cast<AddTaskActor10*>(this)->actor_wait_state = 3;
															#line 3573 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< AddTaskActor10, 2, Void >*>(static_cast<AddTaskActor10*>(this)));
															#line 29452 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont2(Void && _,int loopDepth) 
	{
															#line 3565 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		Params.inputFile().set(task, lf);
															#line 3566 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		Params.readOffset().set(task, offset);
															#line 3567 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		Params.readLen().set(task, len);
															#line 3569 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!waitFor)
															#line 29467 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 3570 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (!static_cast<AddTaskActor10*>(this)->SAV<Key>::futures) { (void)(taskBucket->addTask(tr, task)); this->~AddTaskActor10State(); static_cast<AddTaskActor10*>(this)->destroy(); return 0; }
															#line 29471 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			new (&static_cast<AddTaskActor10*>(this)->SAV< Key >::value()) Key(taskBucket->addTask(tr, task));
			this->~AddTaskActor10State();
			static_cast<AddTaskActor10*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 3573 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_2 = waitFor->onSetAddTask(tr, taskBucket, task);
															#line 3573 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<AddTaskActor10*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 29481 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont2when1(__when_expr_2.get(), loopDepth); };
		static_cast<AddTaskActor10*>(this)->actor_wait_state = 3;
															#line 3573 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< AddTaskActor10, 2, Void >*>(static_cast<AddTaskActor10*>(this)));
															#line 29486 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<AddTaskActor10*>(this)->actor_wait_state > 0) static_cast<AddTaskActor10*>(this)->actor_wait_state = 0;
		static_cast<AddTaskActor10*>(this)->ActorCallback< AddTaskActor10, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< AddTaskActor10, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< AddTaskActor10, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< AddTaskActor10, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont3(Void const& _,int loopDepth) 
	{
															#line 3574 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<AddTaskActor10*>(this)->SAV<Key>::futures) { (void)(LiteralStringRef("OnSetAddTask")); this->~AddTaskActor10State(); static_cast<AddTaskActor10*>(this)->destroy(); return 0; }
															#line 29558 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<AddTaskActor10*>(this)->SAV< Key >::value()) Key(LiteralStringRef("OnSetAddTask"));
		this->~AddTaskActor10State();
		static_cast<AddTaskActor10*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont3(Void && _,int loopDepth) 
	{
															#line 3574 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<AddTaskActor10*>(this)->SAV<Key>::futures) { (void)(LiteralStringRef("OnSetAddTask")); this->~AddTaskActor10State(); static_cast<AddTaskActor10*>(this)->destroy(); return 0; }
															#line 29570 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<AddTaskActor10*>(this)->SAV< Key >::value()) Key(LiteralStringRef("OnSetAddTask"));
		this->~AddTaskActor10State();
		static_cast<AddTaskActor10*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont3(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont3(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<AddTaskActor10*>(this)->actor_wait_state > 0) static_cast<AddTaskActor10*>(this)->actor_wait_state = 0;
		static_cast<AddTaskActor10*>(this)->ActorCallback< AddTaskActor10, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< AddTaskActor10, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< AddTaskActor10, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< AddTaskActor10, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 2);

	}
															#line 3552 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 3552 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskBucket> taskBucket;
															#line 3552 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<Task> parentTask;
															#line 3552 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	RestoreFile lf;
															#line 3552 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int64_t offset;
															#line 3552 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int64_t len;
															#line 3552 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	TaskCompletionKey completionKey;
															#line 3552 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskFuture> waitFor;
															#line 3561 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<Task> task;
															#line 29659 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via addTask()
															#line 3552 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class AddTaskActor10 final : public Actor<Key>, public ActorCallback< AddTaskActor10, 0, Key >, public ActorCallback< AddTaskActor10, 1, Void >, public ActorCallback< AddTaskActor10, 2, Void >, public FastAllocated<AddTaskActor10>, public AddTaskActor10State<AddTaskActor10> {
															#line 29664 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<AddTaskActor10>::operator new;
	using FastAllocated<AddTaskActor10>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Key>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< AddTaskActor10, 0, Key >;
friend struct ActorCallback< AddTaskActor10, 1, Void >;
friend struct ActorCallback< AddTaskActor10, 2, Void >;
															#line 3552 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	AddTaskActor10(Reference<ReadYourWritesTransaction> const& tr,Reference<TaskBucket> const& taskBucket,Reference<Task> const& parentTask,RestoreFile const& lf,int64_t const& offset,int64_t const& len,TaskCompletionKey const& completionKey,Reference<TaskFuture> const& waitFor = Reference<TaskFuture>()) 
															#line 29677 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<Key>(),
		   AddTaskActor10State<AddTaskActor10>(tr, taskBucket, parentTask, lf, offset, len, completionKey, waitFor)
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("addTask");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< AddTaskActor10, 0, Key >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< AddTaskActor10, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< AddTaskActor10, 2, Void >*)0, actor_cancelled()); break;
		}

	}
};
															#line 3552 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<Key> addTask( Reference<ReadYourWritesTransaction> const& tr, Reference<TaskBucket> const& taskBucket, Reference<Task> const& parentTask, RestoreFile const& lf, int64_t const& offset, int64_t const& len, TaskCompletionKey const& completionKey, Reference<TaskFuture> const& waitFor = Reference<TaskFuture>() ) {
															#line 3552 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<Key>(new AddTaskActor10(tr, taskBucket, parentTask, lf, offset, len, completionKey, waitFor));
															#line 29706 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 3576 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

	Future<Void> execute(Database cx,
	                     Reference<TaskBucket> tb,
	                     Reference<FutureBucket> fb,
	                     Reference<Task> task) override {
		return _execute(cx, tb, fb, task);
	};
	Future<Void> finish(Reference<ReadYourWritesTransaction> tr,
	                    Reference<TaskBucket> tb,
	                    Reference<FutureBucket> fb,
	                    Reference<Task> task) override {
		return _finish(tr, tb, fb, task);
	};
};
StringRef RestoreLogDataTaskFunc::name = LiteralStringRef("restore_log_data");
REGISTER_TASKFUNC(RestoreLogDataTaskFunc);

struct RestoreDispatchTaskFunc : RestoreTaskFuncBase {
	static StringRef name;
	static constexpr uint32_t version = 1;
	StringRef getName() const override { return name; };

	static struct {
		static TaskParam<Version> beginVersion() { return LiteralStringRef(__FUNCTION__); }
		static TaskParam<std::string> beginFile() { return LiteralStringRef(__FUNCTION__); }
		static TaskParam<int64_t> beginBlock() { return LiteralStringRef(__FUNCTION__); }
		static TaskParam<int64_t> batchSize() { return LiteralStringRef(__FUNCTION__); }
		static TaskParam<int64_t> remainingInBatch() { return LiteralStringRef(__FUNCTION__); }
	} Params;

																#line 29740 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via _finish()
															#line 3606 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class _finishActor13>
															#line 3606 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class _finishActor13State {
															#line 29746 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 3606 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	_finishActor13State(Reference<ReadYourWritesTransaction> const& tr,Reference<TaskBucket> const& taskBucket,Reference<FutureBucket> const& futureBucket,Reference<Task> const& task) 
															#line 3606 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 3606 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : tr(tr),
															#line 3606 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   taskBucket(taskBucket),
															#line 3606 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   futureBucket(futureBucket),
															#line 3606 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   task(task),
															#line 3610 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   restore(task),
															#line 3612 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   beginVersion(Params.beginVersion().get(task)),
															#line 3613 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   onDone(futureBucket->unpack(task->params[Task::reservedTaskParamKeyDone])),
															#line 3615 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   remainingInBatch(Params.remainingInBatch().get(task)),
															#line 3616 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   addingToExistingBatch(remainingInBatch > 0),
															#line 3617 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   restoreVersion(),
															#line 3618 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   onlyApplyMutationLogs(restore.onlyApplyMutationLogs().get(tr))
															#line 29773 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("_finish", reinterpret_cast<unsigned long>(this));

	}
	~_finishActor13State() 
	{
		fdb_probe_actor_destroy("_finish", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 3620 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_0 = store(restoreVersion, restore.restoreVersion().getOrThrow(tr)) && success(onlyApplyMutationLogs) && checkTaskVersion(tr->getDatabase(), task, name, version);
															#line 3620 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_finishActor13*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 29790 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<_finishActor13*>(this)->actor_wait_state = 1;
															#line 3620 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< _finishActor13, 0, Void >*>(static_cast<_finishActor13*>(this)));
															#line 29795 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~_finishActor13State();
		static_cast<_finishActor13*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void const& _,int loopDepth) 
	{
															#line 3626 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!addingToExistingBatch && beginVersion > 0)
															#line 29818 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 3627 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			restore.setApplyEndVersion(tr, std::min(beginVersion, restoreVersion + 1));
															#line 29822 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 3631 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<int64_t> __when_expr_1 = restore.getApplyVersionLag(tr);
															#line 3631 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_finishActor13*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 29828 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<_finishActor13*>(this)->actor_wait_state = 2;
															#line 3631 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< _finishActor13, 1, int64_t >*>(static_cast<_finishActor13*>(this)));
															#line 29833 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void && _,int loopDepth) 
	{
															#line 3626 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!addingToExistingBatch && beginVersion > 0)
															#line 29842 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 3627 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			restore.setApplyEndVersion(tr, std::min(beginVersion, restoreVersion + 1));
															#line 29846 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 3631 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<int64_t> __when_expr_1 = restore.getApplyVersionLag(tr);
															#line 3631 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_finishActor13*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 29852 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<_finishActor13*>(this)->actor_wait_state = 2;
															#line 3631 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< _finishActor13, 1, int64_t >*>(static_cast<_finishActor13*>(this)));
															#line 29857 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<_finishActor13*>(this)->actor_wait_state > 0) static_cast<_finishActor13*>(this)->actor_wait_state = 0;
		static_cast<_finishActor13*>(this)->ActorCallback< _finishActor13, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor13, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< _finishActor13, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< _finishActor13, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont2(int loopDepth) 
	{
															#line 3632 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		batchSize = Params.batchSize().get(task);
															#line 3635 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!addingToExistingBatch && applyLag > (BUGGIFY ? 1 : CLIENT_KNOBS->CORE_VERSIONSPERSECOND * 300))
															#line 29931 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 3637 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_2 = delay(FLOW_KNOBS->PREVENT_FAST_SPIN_DELAY);
															#line 3637 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_finishActor13*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 29937 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont2when1(__when_expr_2.get(), loopDepth); };
			static_cast<_finishActor13*>(this)->actor_wait_state = 3;
															#line 3637 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< _finishActor13, 2, Void >*>(static_cast<_finishActor13*>(this)));
															#line 29942 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1cont4(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont1when1(int64_t const& __applyLag,int loopDepth) 
	{
															#line 3631 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		applyLag = __applyLag;
															#line 29956 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont2(loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(int64_t && __applyLag,int loopDepth) 
	{
		applyLag = std::move(__applyLag);
		loopDepth = a_body1cont2(loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<_finishActor13*>(this)->actor_wait_state > 0) static_cast<_finishActor13*>(this)->actor_wait_state = 0;
		static_cast<_finishActor13*>(this)->ActorCallback< _finishActor13, 1, int64_t >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor13, 1, int64_t >*,int64_t const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< _finishActor13, 1, int64_t >*,int64_t && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< _finishActor13, 1, int64_t >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont4(int loopDepth) 
	{
															#line 3653 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		beginFile = Params.beginFile().getOrDefault(task);
															#line 3656 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		taskBatchSize = BUGGIFY ? 1 : CLIENT_KNOBS->RESTORE_DISPATCH_ADDTASK_SIZE;
															#line 3657 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<RestoreConfig::FileSetT::Values> __when_expr_5 = restore.fileSet().getRange(tr, { beginVersion, beginFile }, {}, taskBatchSize);
															#line 3657 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_finishActor13*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 30029 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_5.isReady()) { if (__when_expr_5.isError()) return a_body1Catch1(__when_expr_5.getError(), loopDepth); else return a_body1cont4when1(__when_expr_5.get(), loopDepth); };
		static_cast<_finishActor13*>(this)->actor_wait_state = 6;
															#line 3657 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_5.addCallbackAndClear(static_cast<ActorCallback< _finishActor13, 5, RestoreConfig::FileSetT::Values >*>(static_cast<_finishActor13*>(this)));
															#line 30034 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont5(Void const& _,int loopDepth) 
	{
															#line 3638 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_3 = success(RestoreDispatchTaskFunc::addTask( tr, taskBucket, task, beginVersion, "", 0, batchSize, remainingInBatch));
															#line 3638 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_finishActor13*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 30045 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1cont5when1(__when_expr_3.get(), loopDepth); };
		static_cast<_finishActor13*>(this)->actor_wait_state = 4;
															#line 3638 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< _finishActor13, 3, Void >*>(static_cast<_finishActor13*>(this)));
															#line 30050 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont5(Void && _,int loopDepth) 
	{
															#line 3638 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_3 = success(RestoreDispatchTaskFunc::addTask( tr, taskBucket, task, beginVersion, "", 0, batchSize, remainingInBatch));
															#line 3638 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_finishActor13*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 30061 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1cont5when1(__when_expr_3.get(), loopDepth); };
		static_cast<_finishActor13*>(this)->actor_wait_state = 4;
															#line 3638 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< _finishActor13, 3, Void >*>(static_cast<_finishActor13*>(this)));
															#line 30066 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont5(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont5(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<_finishActor13*>(this)->actor_wait_state > 0) static_cast<_finishActor13*>(this)->actor_wait_state = 0;
		static_cast<_finishActor13*>(this)->ActorCallback< _finishActor13, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor13, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< _finishActor13, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< _finishActor13, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1cont6(Void const& _,int loopDepth) 
	{
															#line 3641 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent("FileRestoreDispatch") .detail("RestoreUID", restore.getUid()) .detail("BeginVersion", beginVersion) .detail("ApplyLag", applyLag) .detail("BatchSize", batchSize) .detail("Decision", "too_far_behind") .detail("TaskInstance", THIS_ADDR);
															#line 3649 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_4 = taskBucket->finish(tr, task);
															#line 3649 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_finishActor13*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 30142 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1Catch1(__when_expr_4.getError(), loopDepth); else return a_body1cont6when1(__when_expr_4.get(), loopDepth); };
		static_cast<_finishActor13*>(this)->actor_wait_state = 5;
															#line 3649 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< _finishActor13, 4, Void >*>(static_cast<_finishActor13*>(this)));
															#line 30147 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont6(Void && _,int loopDepth) 
	{
															#line 3641 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent("FileRestoreDispatch") .detail("RestoreUID", restore.getUid()) .detail("BeginVersion", beginVersion) .detail("ApplyLag", applyLag) .detail("BatchSize", batchSize) .detail("Decision", "too_far_behind") .detail("TaskInstance", THIS_ADDR);
															#line 3649 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_4 = taskBucket->finish(tr, task);
															#line 3649 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_finishActor13*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 30160 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1Catch1(__when_expr_4.getError(), loopDepth); else return a_body1cont6when1(__when_expr_4.get(), loopDepth); };
		static_cast<_finishActor13*>(this)->actor_wait_state = 5;
															#line 3649 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< _finishActor13, 4, Void >*>(static_cast<_finishActor13*>(this)));
															#line 30165 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont5when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont6(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont5when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont6(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<_finishActor13*>(this)->actor_wait_state > 0) static_cast<_finishActor13*>(this)->actor_wait_state = 0;
		static_cast<_finishActor13*>(this)->ActorCallback< _finishActor13, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor13, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont5when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< _finishActor13, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont5when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< _finishActor13, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 3);

	}
	int a_body1cont7(Void const& _,int loopDepth) 
	{
															#line 3650 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<_finishActor13*>(this)->SAV<Void>::futures) { (void)(Void()); this->~_finishActor13State(); static_cast<_finishActor13*>(this)->destroy(); return 0; }
															#line 30237 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<_finishActor13*>(this)->SAV< Void >::value()) Void(Void());
		this->~_finishActor13State();
		static_cast<_finishActor13*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont7(Void && _,int loopDepth) 
	{
															#line 3650 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<_finishActor13*>(this)->SAV<Void>::futures) { (void)(Void()); this->~_finishActor13State(); static_cast<_finishActor13*>(this)->destroy(); return 0; }
															#line 30249 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<_finishActor13*>(this)->SAV< Void >::value()) Void(Void());
		this->~_finishActor13State();
		static_cast<_finishActor13*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont6when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont7(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont6when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont7(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose5() 
	{
		if (static_cast<_finishActor13*>(this)->actor_wait_state > 0) static_cast<_finishActor13*>(this)->actor_wait_state = 0;
		static_cast<_finishActor13*>(this)->ActorCallback< _finishActor13, 4, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor13, 4, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont6when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_fire(ActorCallback< _finishActor13, 4, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont6when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_error(ActorCallback< _finishActor13, 4, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 4);

	}
	int a_body1cont9(int loopDepth) 
	{
															#line 3661 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		allPartsDone = Reference<TaskFuture>();
															#line 3664 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (addingToExistingBatch)
															#line 30326 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 3665 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Key> __when_expr_6 = restore.batchFuture().getD(tr);
															#line 3665 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_finishActor13*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 30332 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_6.isReady()) { if (__when_expr_6.isError()) return a_body1Catch1(__when_expr_6.getError(), loopDepth); else return a_body1cont9when1(__when_expr_6.get(), loopDepth); };
			static_cast<_finishActor13*>(this)->actor_wait_state = 7;
															#line 3665 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_6.addCallbackAndClear(static_cast<ActorCallback< _finishActor13, 6, Key >*>(static_cast<_finishActor13*>(this)));
															#line 30337 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
															#line 3669 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			allPartsDone = futureBucket->future(tr);
															#line 3670 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			restore.batchFuture().set(tr, allPartsDone->pack());
															#line 3672 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			remainingInBatch = batchSize;
															#line 30348 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = a_body1cont10(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont4when1(RestoreConfig::FileSetT::Values const& __files,int loopDepth) 
	{
															#line 3657 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		files = __files;
															#line 30358 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont9(loopDepth);

		return loopDepth;
	}
	int a_body1cont4when1(RestoreConfig::FileSetT::Values && __files,int loopDepth) 
	{
		files = std::move(__files);
		loopDepth = a_body1cont9(loopDepth);

		return loopDepth;
	}
	void a_exitChoose6() 
	{
		if (static_cast<_finishActor13*>(this)->actor_wait_state > 0) static_cast<_finishActor13*>(this)->actor_wait_state = 0;
		static_cast<_finishActor13*>(this)->ActorCallback< _finishActor13, 5, RestoreConfig::FileSetT::Values >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor13, 5, RestoreConfig::FileSetT::Values >*,RestoreConfig::FileSetT::Values const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1cont4when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_fire(ActorCallback< _finishActor13, 5, RestoreConfig::FileSetT::Values >*,RestoreConfig::FileSetT::Values && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1cont4when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_error(ActorCallback< _finishActor13, 5, RestoreConfig::FileSetT::Values >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 5);

	}
	int a_body1cont10(int loopDepth) 
	{
															#line 3676 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (files.size() == 0)
															#line 30425 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 3679 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (addingToExistingBatch)
															#line 30429 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			{
															#line 3682 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				StrictFuture<Void> __when_expr_7 = success(RestoreDispatchTaskFunc::addTask(tr, taskBucket, task, restoreVersion + 1, "", 0, batchSize, 0, TaskCompletionKey::noSignal(), allPartsDone));
															#line 3682 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				if (static_cast<_finishActor13*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 30435 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				if (__when_expr_7.isReady()) { if (__when_expr_7.isError()) return a_body1Catch1(__when_expr_7.getError(), loopDepth); else return a_body1cont10when1(__when_expr_7.get(), loopDepth); };
				static_cast<_finishActor13*>(this)->actor_wait_state = 8;
															#line 3682 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				__when_expr_7.addCallbackAndClear(static_cast<ActorCallback< _finishActor13, 7, Void >*>(static_cast<_finishActor13*>(this)));
															#line 30440 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				loopDepth = 0;
			}
			else
			{
															#line 3702 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				if (beginVersion < restoreVersion)
															#line 30447 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				{
															#line 3704 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
					StrictFuture<Void> __when_expr_8 = success(RestoreDispatchTaskFunc::addTask(tr, taskBucket, task, restoreVersion, "", 0, batchSize));
															#line 3704 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
					if (static_cast<_finishActor13*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 30453 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
					if (__when_expr_8.isReady()) { if (__when_expr_8.isError()) return a_body1Catch1(__when_expr_8.getError(), loopDepth); else return a_body1cont10when2(__when_expr_8.get(), loopDepth); };
					static_cast<_finishActor13*>(this)->actor_wait_state = 9;
															#line 3704 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
					__when_expr_8.addCallbackAndClear(static_cast<ActorCallback< _finishActor13, 8, Void >*>(static_cast<_finishActor13*>(this)));
															#line 30458 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
					loopDepth = 0;
				}
				else
				{
															#line 3715 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
					if (applyLag == 0)
															#line 30465 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
					{
															#line 3717 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
						StrictFuture<Void> __when_expr_9 = success(RestoreCompleteTaskFunc::addTask(tr, taskBucket, task, TaskCompletionKey::noSignal()));
															#line 3717 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
						if (static_cast<_finishActor13*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 30471 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
						if (__when_expr_9.isReady()) { if (__when_expr_9.isError()) return a_body1Catch1(__when_expr_9.getError(), loopDepth); else return a_body1cont10when3(__when_expr_9.get(), loopDepth); };
						static_cast<_finishActor13*>(this)->actor_wait_state = 10;
															#line 3717 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
						__when_expr_9.addCallbackAndClear(static_cast<ActorCallback< _finishActor13, 9, Void >*>(static_cast<_finishActor13*>(this)));
															#line 30476 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
						loopDepth = 0;
					}
					else
					{
															#line 3730 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
						StrictFuture<Void> __when_expr_10 = delay(FLOW_KNOBS->PREVENT_FAST_SPIN_DELAY);
															#line 3730 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
						if (static_cast<_finishActor13*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 30485 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
						if (__when_expr_10.isReady()) { if (__when_expr_10.isError()) return a_body1Catch1(__when_expr_10.getError(), loopDepth); else return a_body1cont10when4(__when_expr_10.get(), loopDepth); };
						static_cast<_finishActor13*>(this)->actor_wait_state = 11;
															#line 3730 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
						__when_expr_10.addCallbackAndClear(static_cast<ActorCallback< _finishActor13, 10, Void >*>(static_cast<_finishActor13*>(this)));
															#line 30490 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
						loopDepth = 0;
					}
				}
			}
		}
		else
		{
			loopDepth = a_body1cont10cont1(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont11(Key const& fKey,int loopDepth) 
	{
															#line 3666 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		allPartsDone = Reference<TaskFuture>(new TaskFuture(futureBucket, fKey));
															#line 30507 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont10(loopDepth);

		return loopDepth;
	}
	int a_body1cont11(Key && fKey,int loopDepth) 
	{
															#line 3666 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		allPartsDone = Reference<TaskFuture>(new TaskFuture(futureBucket, fKey));
															#line 30516 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont10(loopDepth);

		return loopDepth;
	}
	int a_body1cont9when1(Key const& fKey,int loopDepth) 
	{
		loopDepth = a_body1cont11(fKey, loopDepth);

		return loopDepth;
	}
	int a_body1cont9when1(Key && fKey,int loopDepth) 
	{
		loopDepth = a_body1cont11(std::move(fKey), loopDepth);

		return loopDepth;
	}
	void a_exitChoose7() 
	{
		if (static_cast<_finishActor13*>(this)->actor_wait_state > 0) static_cast<_finishActor13*>(this)->actor_wait_state = 0;
		static_cast<_finishActor13*>(this)->ActorCallback< _finishActor13, 6, Key >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor13, 6, Key >*,Key const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1cont9when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 6);

	}
	void a_callback_fire(ActorCallback< _finishActor13, 6, Key >*,Key && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1cont9when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 6);

	}
	void a_callback_error(ActorCallback< _finishActor13, 6, Key >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 6);

	}
	int a_body1cont10cont1(int loopDepth) 
	{
															#line 3753 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		addTaskFutures = std::vector<Future<Key>>();
															#line 3754 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		endVersion = files[0].version;
															#line 3755 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		blocksDispatched = 0;
															#line 3756 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		beginBlock = Params.beginBlock().getOrDefault(task);
															#line 3757 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		i = 0;
															#line 3759 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		for(;i < files.size();++i) {
															#line 3760 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			RestoreConfig::RestoreFile& f = files[i];
															#line 3765 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (f.version != endVersion && remainingInBatch <= 0)
															#line 30602 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			{
															#line 3767 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				++endVersion;
															#line 3768 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				beginFile = "";
															#line 3769 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				beginBlock = 0;
															#line 30610 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				break;
			}
															#line 3774 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			endVersion = f.version;
															#line 3775 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			beginFile = f.fileName;
															#line 3777 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			j = beginBlock * f.blockSize;
															#line 3779 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			for(;j < f.fileSize;j += f.blockSize) {
															#line 3781 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				if (blocksDispatched == taskBatchSize)
															#line 30623 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				{
					break;
				}
															#line 3784 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				if (f.isRange)
															#line 30629 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				{
															#line 3785 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
					addTaskFutures.push_back( RestoreRangeTaskFunc::addTask(tr, taskBucket, task, f, j, std::min<int64_t>(f.blockSize, f.fileSize - j), TaskCompletionKey::joinWith(allPartsDone)));
															#line 30633 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				}
				else
				{
															#line 3794 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
					addTaskFutures.push_back( RestoreLogDataTaskFunc::addTask(tr, taskBucket, task, f, j, std::min<int64_t>(f.blockSize, f.fileSize - j), TaskCompletionKey::joinWith(allPartsDone)));
															#line 30639 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				}
															#line 3805 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				++beginBlock;
															#line 3806 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				++blocksDispatched;
															#line 3807 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				--remainingInBatch;
															#line 30647 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			}
															#line 3811 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (blocksDispatched == taskBatchSize)
															#line 30651 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			{
				break;
			}
															#line 3816 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			beginFile = beginFile + '\x00';
															#line 3817 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			beginBlock = 0;
															#line 3819 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			TraceEvent("FileRestoreDispatchedFile") .suppressFor(60) .detail("RestoreUID", restore.getUid()) .detail("FileName", f.fileName) .detail("TaskInstance", THIS_ADDR);
															#line 30661 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 3828 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (blocksDispatched == 0)
															#line 30665 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 3829 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			std::string decision;
															#line 3833 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (i == 0)
															#line 30671 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			{
															#line 3834 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				batchSize *= 2;
															#line 3835 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				decision = "increased_batch_size";
															#line 30677 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			}
			else
			{
															#line 3837 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				decision = "all_files_were_empty";
															#line 30683 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			}
															#line 3839 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			TraceEvent("FileRestoreDispatch") .detail("RestoreUID", restore.getUid()) .detail("BeginVersion", beginVersion) .detail("BeginFile", Params.beginFile().get(task)) .detail("BeginBlock", Params.beginBlock().get(task)) .detail("EndVersion", endVersion) .detail("ApplyLag", applyLag) .detail("BatchSize", batchSize) .detail("Decision", decision) .detail("TaskInstance", THIS_ADDR) .detail("RemainingInBatch", remainingInBatch);
															#line 3851 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_13 = success(RestoreDispatchTaskFunc::addTask(tr, taskBucket, task, endVersion, beginFile, beginBlock, batchSize, remainingInBatch, TaskCompletionKey::joinWith((allPartsDone))));
															#line 3851 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_finishActor13*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 30691 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_13.isReady()) { if (__when_expr_13.isError()) return a_body1Catch1(__when_expr_13.getError(), loopDepth); else return a_body1cont10cont1when1(__when_expr_13.get(), loopDepth); };
			static_cast<_finishActor13*>(this)->actor_wait_state = 14;
															#line 3851 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_13.addCallbackAndClear(static_cast<ActorCallback< _finishActor13, 13, Void >*>(static_cast<_finishActor13*>(this)));
															#line 30696 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1cont10cont13(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont10cont2(int loopDepth) 
	{
															#line 3744 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		Future<Void> setDone = addingToExistingBatch ? onDone->set(tr, taskBucket) : Void();
															#line 3746 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_12 = taskBucket->finish(tr, task) && setDone;
															#line 3746 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_finishActor13*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 30714 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_12.isReady()) { if (__when_expr_12.isError()) return a_body1Catch1(__when_expr_12.getError(), loopDepth); else return a_body1cont10cont2when1(__when_expr_12.get(), loopDepth); };
		static_cast<_finishActor13*>(this)->actor_wait_state = 13;
															#line 3746 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_12.addCallbackAndClear(static_cast<ActorCallback< _finishActor13, 12, Void >*>(static_cast<_finishActor13*>(this)));
															#line 30719 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont10cont3(Void const& _,int loopDepth) 
	{
															#line 3693 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent("FileRestoreDispatch") .detail("RestoreUID", restore.getUid()) .detail("BeginVersion", beginVersion) .detail("BeginFile", Params.beginFile().get(task)) .detail("BeginBlock", Params.beginBlock().get(task)) .detail("RestoreVersion", restoreVersion) .detail("ApplyLag", applyLag) .detail("Decision", "end_of_final_batch") .detail("TaskInstance", THIS_ADDR);
															#line 30728 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont10cont2(loopDepth);

		return loopDepth;
	}
	int a_body1cont10cont3(Void && _,int loopDepth) 
	{
															#line 3693 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent("FileRestoreDispatch") .detail("RestoreUID", restore.getUid()) .detail("BeginVersion", beginVersion) .detail("BeginFile", Params.beginFile().get(task)) .detail("BeginBlock", Params.beginBlock().get(task)) .detail("RestoreVersion", restoreVersion) .detail("ApplyLag", applyLag) .detail("Decision", "end_of_final_batch") .detail("TaskInstance", THIS_ADDR);
															#line 30737 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont10cont2(loopDepth);

		return loopDepth;
	}
	int a_body1cont10when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont10cont3(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont10when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont10cont3(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose8() 
	{
		if (static_cast<_finishActor13*>(this)->actor_wait_state > 0) static_cast<_finishActor13*>(this)->actor_wait_state = 0;
		static_cast<_finishActor13*>(this)->ActorCallback< _finishActor13, 7, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor13, 7, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 7);
		a_exitChoose8();
		try {
			a_body1cont10when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 7);

	}
	void a_callback_fire(ActorCallback< _finishActor13, 7, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 7);
		a_exitChoose8();
		try {
			a_body1cont10when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 7);

	}
	void a_callback_error(ActorCallback< _finishActor13, 7, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 7);
		a_exitChoose8();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 7);

	}
	int a_body1cont10cont5(int loopDepth) 
	{
		loopDepth = a_body1cont10cont2(loopDepth);

		return loopDepth;
	}
	int a_body1cont10cont6(Void const& _,int loopDepth) 
	{
															#line 3706 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent("FileRestoreDispatch") .detail("RestoreUID", restore.getUid()) .detail("BeginVersion", beginVersion) .detail("BeginFile", Params.beginFile().get(task)) .detail("BeginBlock", Params.beginBlock().get(task)) .detail("RestoreVersion", restoreVersion) .detail("ApplyLag", applyLag) .detail("Decision", "apply_to_restore_version") .detail("TaskInstance", THIS_ADDR);
															#line 30815 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont10cont5(loopDepth);

		return loopDepth;
	}
	int a_body1cont10cont6(Void && _,int loopDepth) 
	{
															#line 3706 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent("FileRestoreDispatch") .detail("RestoreUID", restore.getUid()) .detail("BeginVersion", beginVersion) .detail("BeginFile", Params.beginFile().get(task)) .detail("BeginBlock", Params.beginBlock().get(task)) .detail("RestoreVersion", restoreVersion) .detail("ApplyLag", applyLag) .detail("Decision", "apply_to_restore_version") .detail("TaskInstance", THIS_ADDR);
															#line 30824 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont10cont5(loopDepth);

		return loopDepth;
	}
	int a_body1cont10when2(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont10cont6(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont10when2(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont10cont6(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose9() 
	{
		if (static_cast<_finishActor13*>(this)->actor_wait_state > 0) static_cast<_finishActor13*>(this)->actor_wait_state = 0;
		static_cast<_finishActor13*>(this)->ActorCallback< _finishActor13, 8, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor13, 8, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 8);
		a_exitChoose9();
		try {
			a_body1cont10when2(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 8);

	}
	void a_callback_fire(ActorCallback< _finishActor13, 8, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 8);
		a_exitChoose9();
		try {
			a_body1cont10when2(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 8);

	}
	void a_callback_error(ActorCallback< _finishActor13, 8, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 8);
		a_exitChoose9();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 8);

	}
	int a_body1cont10cont8(int loopDepth) 
	{
		loopDepth = a_body1cont10cont5(loopDepth);

		return loopDepth;
	}
	int a_body1cont10cont9(Void const& _,int loopDepth) 
	{
															#line 3719 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent("FileRestoreDispatch") .detail("RestoreUID", restore.getUid()) .detail("BeginVersion", beginVersion) .detail("BeginFile", Params.beginFile().get(task)) .detail("BeginBlock", Params.beginBlock().get(task)) .detail("ApplyLag", applyLag) .detail("Decision", "restore_complete") .detail("TaskInstance", THIS_ADDR);
															#line 30902 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont10cont8(loopDepth);

		return loopDepth;
	}
	int a_body1cont10cont9(Void && _,int loopDepth) 
	{
															#line 3719 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent("FileRestoreDispatch") .detail("RestoreUID", restore.getUid()) .detail("BeginVersion", beginVersion) .detail("BeginFile", Params.beginFile().get(task)) .detail("BeginBlock", Params.beginBlock().get(task)) .detail("ApplyLag", applyLag) .detail("Decision", "restore_complete") .detail("TaskInstance", THIS_ADDR);
															#line 30911 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont10cont8(loopDepth);

		return loopDepth;
	}
	int a_body1cont10when3(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont10cont9(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont10when3(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont10cont9(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose10() 
	{
		if (static_cast<_finishActor13*>(this)->actor_wait_state > 0) static_cast<_finishActor13*>(this)->actor_wait_state = 0;
		static_cast<_finishActor13*>(this)->ActorCallback< _finishActor13, 9, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor13, 9, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 9);
		a_exitChoose10();
		try {
			a_body1cont10when3(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 9);

	}
	void a_callback_fire(ActorCallback< _finishActor13, 9, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 9);
		a_exitChoose10();
		try {
			a_body1cont10when3(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 9);

	}
	void a_callback_error(ActorCallback< _finishActor13, 9, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 9);
		a_exitChoose10();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 9);

	}
	int a_body1cont10cont11(Void const& _,int loopDepth) 
	{
															#line 3731 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_11 = success(RestoreDispatchTaskFunc::addTask(tr, taskBucket, task, beginVersion, "", 0, batchSize));
															#line 3731 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_finishActor13*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 30985 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_11.isReady()) { if (__when_expr_11.isError()) return a_body1Catch1(__when_expr_11.getError(), loopDepth); else return a_body1cont10cont11when1(__when_expr_11.get(), loopDepth); };
		static_cast<_finishActor13*>(this)->actor_wait_state = 12;
															#line 3731 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_11.addCallbackAndClear(static_cast<ActorCallback< _finishActor13, 11, Void >*>(static_cast<_finishActor13*>(this)));
															#line 30990 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont10cont11(Void && _,int loopDepth) 
	{
															#line 3731 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_11 = success(RestoreDispatchTaskFunc::addTask(tr, taskBucket, task, beginVersion, "", 0, batchSize));
															#line 3731 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_finishActor13*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 31001 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_11.isReady()) { if (__when_expr_11.isError()) return a_body1Catch1(__when_expr_11.getError(), loopDepth); else return a_body1cont10cont11when1(__when_expr_11.get(), loopDepth); };
		static_cast<_finishActor13*>(this)->actor_wait_state = 12;
															#line 3731 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_11.addCallbackAndClear(static_cast<ActorCallback< _finishActor13, 11, Void >*>(static_cast<_finishActor13*>(this)));
															#line 31006 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont10when4(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont10cont11(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont10when4(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont10cont11(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose11() 
	{
		if (static_cast<_finishActor13*>(this)->actor_wait_state > 0) static_cast<_finishActor13*>(this)->actor_wait_state = 0;
		static_cast<_finishActor13*>(this)->ActorCallback< _finishActor13, 10, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor13, 10, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 10);
		a_exitChoose11();
		try {
			a_body1cont10when4(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 10);

	}
	void a_callback_fire(ActorCallback< _finishActor13, 10, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 10);
		a_exitChoose11();
		try {
			a_body1cont10when4(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 10);

	}
	void a_callback_error(ActorCallback< _finishActor13, 10, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 10);
		a_exitChoose11();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 10);

	}
	int a_body1cont10cont11cont1(Void const& _,int loopDepth) 
	{
															#line 3733 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent("FileRestoreDispatch") .detail("RestoreUID", restore.getUid()) .detail("BeginVersion", beginVersion) .detail("ApplyLag", applyLag) .detail("Decision", "apply_still_behind") .detail("TaskInstance", THIS_ADDR);
															#line 31078 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont10cont8(loopDepth);

		return loopDepth;
	}
	int a_body1cont10cont11cont1(Void && _,int loopDepth) 
	{
															#line 3733 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent("FileRestoreDispatch") .detail("RestoreUID", restore.getUid()) .detail("BeginVersion", beginVersion) .detail("ApplyLag", applyLag) .detail("Decision", "apply_still_behind") .detail("TaskInstance", THIS_ADDR);
															#line 31087 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont10cont8(loopDepth);

		return loopDepth;
	}
	int a_body1cont10cont11when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont10cont11cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont10cont11when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont10cont11cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose12() 
	{
		if (static_cast<_finishActor13*>(this)->actor_wait_state > 0) static_cast<_finishActor13*>(this)->actor_wait_state = 0;
		static_cast<_finishActor13*>(this)->ActorCallback< _finishActor13, 11, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor13, 11, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 11);
		a_exitChoose12();
		try {
			a_body1cont10cont11when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 11);

	}
	void a_callback_fire(ActorCallback< _finishActor13, 11, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 11);
		a_exitChoose12();
		try {
			a_body1cont10cont11when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 11);

	}
	void a_callback_error(ActorCallback< _finishActor13, 11, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 11);
		a_exitChoose12();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 11);

	}
	int a_body1cont10cont12(Void const& _,int loopDepth) 
	{
															#line 3747 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<_finishActor13*>(this)->SAV<Void>::futures) { (void)(Void()); this->~_finishActor13State(); static_cast<_finishActor13*>(this)->destroy(); return 0; }
															#line 31159 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<_finishActor13*>(this)->SAV< Void >::value()) Void(Void());
		this->~_finishActor13State();
		static_cast<_finishActor13*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont10cont12(Void && _,int loopDepth) 
	{
															#line 3747 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<_finishActor13*>(this)->SAV<Void>::futures) { (void)(Void()); this->~_finishActor13State(); static_cast<_finishActor13*>(this)->destroy(); return 0; }
															#line 31171 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<_finishActor13*>(this)->SAV< Void >::value()) Void(Void());
		this->~_finishActor13State();
		static_cast<_finishActor13*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont10cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont10cont12(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont10cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont10cont12(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose13() 
	{
		if (static_cast<_finishActor13*>(this)->actor_wait_state > 0) static_cast<_finishActor13*>(this)->actor_wait_state = 0;
		static_cast<_finishActor13*>(this)->ActorCallback< _finishActor13, 12, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor13, 12, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 12);
		a_exitChoose13();
		try {
			a_body1cont10cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 12);

	}
	void a_callback_fire(ActorCallback< _finishActor13, 12, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 12);
		a_exitChoose13();
		try {
			a_body1cont10cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 12);

	}
	void a_callback_error(ActorCallback< _finishActor13, 12, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 12);
		a_exitChoose13();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 12);

	}
	int a_body1cont10cont13(int loopDepth) 
	{
															#line 3872 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		restore.filesBlocksDispatched().atomicOp(tr, blocksDispatched, MutationRef::Type::AddValue);
															#line 3877 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!beginFile.empty())
															#line 31248 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 3878 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			remainingInBatch = std::max<int64_t>(1, remainingInBatch);
															#line 31252 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 3882 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (remainingInBatch > 0)
															#line 31256 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 3883 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			addTaskFutures.push_back(RestoreDispatchTaskFunc::addTask(tr, taskBucket, task, endVersion, beginFile, beginBlock, batchSize, remainingInBatch, TaskCompletionKey::joinWith(allPartsDone)));
															#line 31260 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
		else
		{
															#line 3893 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			addTaskFutures.push_back(RestoreDispatchTaskFunc::addTask(tr, taskBucket, task, endVersion, beginFile, beginBlock, batchSize, 0, TaskCompletionKey::noSignal(), allPartsDone));
															#line 31266 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 3904 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_15 = waitForAll(addTaskFutures);
															#line 3904 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_finishActor13*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 31272 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_15.isReady()) { if (__when_expr_15.isError()) return a_body1Catch1(__when_expr_15.getError(), loopDepth); else return a_body1cont10cont13when1(__when_expr_15.get(), loopDepth); };
		static_cast<_finishActor13*>(this)->actor_wait_state = 16;
															#line 3904 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_15.addCallbackAndClear(static_cast<ActorCallback< _finishActor13, 15, Void >*>(static_cast<_finishActor13*>(this)));
															#line 31277 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont10cont21(Void const& _,int loopDepth) 
	{
															#line 3864 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		Future<Void> setDone = addingToExistingBatch ? onDone->set(tr, taskBucket) : Void();
															#line 3866 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_14 = setDone && taskBucket->finish(tr, task);
															#line 3866 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_finishActor13*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 31290 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_14.isReady()) { if (__when_expr_14.isError()) return a_body1Catch1(__when_expr_14.getError(), loopDepth); else return a_body1cont10cont21when1(__when_expr_14.get(), loopDepth); };
		static_cast<_finishActor13*>(this)->actor_wait_state = 15;
															#line 3866 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_14.addCallbackAndClear(static_cast<ActorCallback< _finishActor13, 14, Void >*>(static_cast<_finishActor13*>(this)));
															#line 31295 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont10cont21(Void && _,int loopDepth) 
	{
															#line 3864 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		Future<Void> setDone = addingToExistingBatch ? onDone->set(tr, taskBucket) : Void();
															#line 3866 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_14 = setDone && taskBucket->finish(tr, task);
															#line 3866 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_finishActor13*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 31308 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_14.isReady()) { if (__when_expr_14.isError()) return a_body1Catch1(__when_expr_14.getError(), loopDepth); else return a_body1cont10cont21when1(__when_expr_14.get(), loopDepth); };
		static_cast<_finishActor13*>(this)->actor_wait_state = 15;
															#line 3866 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_14.addCallbackAndClear(static_cast<ActorCallback< _finishActor13, 14, Void >*>(static_cast<_finishActor13*>(this)));
															#line 31313 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont10cont1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont10cont21(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont10cont1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont10cont21(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose14() 
	{
		if (static_cast<_finishActor13*>(this)->actor_wait_state > 0) static_cast<_finishActor13*>(this)->actor_wait_state = 0;
		static_cast<_finishActor13*>(this)->ActorCallback< _finishActor13, 13, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor13, 13, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 13);
		a_exitChoose14();
		try {
			a_body1cont10cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 13);

	}
	void a_callback_fire(ActorCallback< _finishActor13, 13, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 13);
		a_exitChoose14();
		try {
			a_body1cont10cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 13);

	}
	void a_callback_error(ActorCallback< _finishActor13, 13, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 13);
		a_exitChoose14();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 13);

	}
	int a_body1cont10cont21cont1(Void const& _,int loopDepth) 
	{
															#line 3868 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<_finishActor13*>(this)->SAV<Void>::futures) { (void)(Void()); this->~_finishActor13State(); static_cast<_finishActor13*>(this)->destroy(); return 0; }
															#line 31385 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<_finishActor13*>(this)->SAV< Void >::value()) Void(Void());
		this->~_finishActor13State();
		static_cast<_finishActor13*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont10cont21cont1(Void && _,int loopDepth) 
	{
															#line 3868 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<_finishActor13*>(this)->SAV<Void>::futures) { (void)(Void()); this->~_finishActor13State(); static_cast<_finishActor13*>(this)->destroy(); return 0; }
															#line 31397 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<_finishActor13*>(this)->SAV< Void >::value()) Void(Void());
		this->~_finishActor13State();
		static_cast<_finishActor13*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont10cont21when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont10cont21cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont10cont21when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont10cont21cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose15() 
	{
		if (static_cast<_finishActor13*>(this)->actor_wait_state > 0) static_cast<_finishActor13*>(this)->actor_wait_state = 0;
		static_cast<_finishActor13*>(this)->ActorCallback< _finishActor13, 14, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor13, 14, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 14);
		a_exitChoose15();
		try {
			a_body1cont10cont21when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 14);

	}
	void a_callback_fire(ActorCallback< _finishActor13, 14, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 14);
		a_exitChoose15();
		try {
			a_body1cont10cont21when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 14);

	}
	void a_callback_error(ActorCallback< _finishActor13, 14, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 14);
		a_exitChoose15();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 14);

	}
	int a_body1cont10cont13cont1(Void const& _,int loopDepth) 
	{
															#line 3907 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		Future<Void> setDone = addingToExistingBatch ? onDone->set(tr, taskBucket) : Void();
															#line 3909 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_16 = setDone && taskBucket->finish(tr, task);
															#line 3909 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_finishActor13*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 31476 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_16.isReady()) { if (__when_expr_16.isError()) return a_body1Catch1(__when_expr_16.getError(), loopDepth); else return a_body1cont10cont13cont1when1(__when_expr_16.get(), loopDepth); };
		static_cast<_finishActor13*>(this)->actor_wait_state = 17;
															#line 3909 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_16.addCallbackAndClear(static_cast<ActorCallback< _finishActor13, 16, Void >*>(static_cast<_finishActor13*>(this)));
															#line 31481 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont10cont13cont1(Void && _,int loopDepth) 
	{
															#line 3907 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		Future<Void> setDone = addingToExistingBatch ? onDone->set(tr, taskBucket) : Void();
															#line 3909 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_16 = setDone && taskBucket->finish(tr, task);
															#line 3909 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_finishActor13*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 31494 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_16.isReady()) { if (__when_expr_16.isError()) return a_body1Catch1(__when_expr_16.getError(), loopDepth); else return a_body1cont10cont13cont1when1(__when_expr_16.get(), loopDepth); };
		static_cast<_finishActor13*>(this)->actor_wait_state = 17;
															#line 3909 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_16.addCallbackAndClear(static_cast<ActorCallback< _finishActor13, 16, Void >*>(static_cast<_finishActor13*>(this)));
															#line 31499 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont10cont13when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont10cont13cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont10cont13when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont10cont13cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose16() 
	{
		if (static_cast<_finishActor13*>(this)->actor_wait_state > 0) static_cast<_finishActor13*>(this)->actor_wait_state = 0;
		static_cast<_finishActor13*>(this)->ActorCallback< _finishActor13, 15, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor13, 15, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 15);
		a_exitChoose16();
		try {
			a_body1cont10cont13when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 15);

	}
	void a_callback_fire(ActorCallback< _finishActor13, 15, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 15);
		a_exitChoose16();
		try {
			a_body1cont10cont13when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 15);

	}
	void a_callback_error(ActorCallback< _finishActor13, 15, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 15);
		a_exitChoose16();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 15);

	}
	int a_body1cont10cont13cont5(Void const& _,int loopDepth) 
	{
															#line 3911 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent("FileRestoreDispatch") .detail("RestoreUID", restore.getUid()) .detail("BeginVersion", beginVersion) .detail("BeginFile", Params.beginFile().get(task)) .detail("BeginBlock", Params.beginBlock().get(task)) .detail("EndVersion", endVersion) .detail("ApplyLag", applyLag) .detail("BatchSize", batchSize) .detail("Decision", "dispatched_files") .detail("FilesDispatched", i) .detail("BlocksDispatched", blocksDispatched) .detail("TaskInstance", THIS_ADDR) .detail("RemainingInBatch", remainingInBatch);
															#line 3925 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<_finishActor13*>(this)->SAV<Void>::futures) { (void)(Void()); this->~_finishActor13State(); static_cast<_finishActor13*>(this)->destroy(); return 0; }
															#line 31573 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<_finishActor13*>(this)->SAV< Void >::value()) Void(Void());
		this->~_finishActor13State();
		static_cast<_finishActor13*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont10cont13cont5(Void && _,int loopDepth) 
	{
															#line 3911 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent("FileRestoreDispatch") .detail("RestoreUID", restore.getUid()) .detail("BeginVersion", beginVersion) .detail("BeginFile", Params.beginFile().get(task)) .detail("BeginBlock", Params.beginBlock().get(task)) .detail("EndVersion", endVersion) .detail("ApplyLag", applyLag) .detail("BatchSize", batchSize) .detail("Decision", "dispatched_files") .detail("FilesDispatched", i) .detail("BlocksDispatched", blocksDispatched) .detail("TaskInstance", THIS_ADDR) .detail("RemainingInBatch", remainingInBatch);
															#line 3925 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<_finishActor13*>(this)->SAV<Void>::futures) { (void)(Void()); this->~_finishActor13State(); static_cast<_finishActor13*>(this)->destroy(); return 0; }
															#line 31587 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<_finishActor13*>(this)->SAV< Void >::value()) Void(Void());
		this->~_finishActor13State();
		static_cast<_finishActor13*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont10cont13cont1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont10cont13cont5(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont10cont13cont1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont10cont13cont5(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose17() 
	{
		if (static_cast<_finishActor13*>(this)->actor_wait_state > 0) static_cast<_finishActor13*>(this)->actor_wait_state = 0;
		static_cast<_finishActor13*>(this)->ActorCallback< _finishActor13, 16, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor13, 16, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 16);
		a_exitChoose17();
		try {
			a_body1cont10cont13cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 16);

	}
	void a_callback_fire(ActorCallback< _finishActor13, 16, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 16);
		a_exitChoose17();
		try {
			a_body1cont10cont13cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 16);

	}
	void a_callback_error(ActorCallback< _finishActor13, 16, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 16);
		a_exitChoose17();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 16);

	}
															#line 3606 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 3606 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskBucket> taskBucket;
															#line 3606 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<FutureBucket> futureBucket;
															#line 3606 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<Task> task;
															#line 3610 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	RestoreConfig restore;
															#line 3612 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Version beginVersion;
															#line 3613 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskFuture> onDone;
															#line 3615 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int64_t remainingInBatch;
															#line 3616 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	bool addingToExistingBatch;
															#line 3617 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Version restoreVersion;
															#line 3618 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Future<Optional<bool>> onlyApplyMutationLogs;
															#line 3631 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int64_t applyLag;
															#line 3632 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int64_t batchSize;
															#line 3653 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	std::string beginFile;
															#line 3656 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int taskBatchSize;
															#line 3657 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	RestoreConfig::FileSetT::Values files;
															#line 3661 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskFuture> allPartsDone;
															#line 3753 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	std::vector<Future<Key>> addTaskFutures;
															#line 3754 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Version endVersion;
															#line 3755 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int blocksDispatched;
															#line 3756 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int64_t beginBlock;
															#line 3757 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int i;
															#line 3777 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int64_t j;
															#line 31704 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via _finish()
															#line 3606 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class _finishActor13 final : public Actor<Void>, public ActorCallback< _finishActor13, 0, Void >, public ActorCallback< _finishActor13, 1, int64_t >, public ActorCallback< _finishActor13, 2, Void >, public ActorCallback< _finishActor13, 3, Void >, public ActorCallback< _finishActor13, 4, Void >, public ActorCallback< _finishActor13, 5, RestoreConfig::FileSetT::Values >, public ActorCallback< _finishActor13, 6, Key >, public ActorCallback< _finishActor13, 7, Void >, public ActorCallback< _finishActor13, 8, Void >, public ActorCallback< _finishActor13, 9, Void >, public ActorCallback< _finishActor13, 10, Void >, public ActorCallback< _finishActor13, 11, Void >, public ActorCallback< _finishActor13, 12, Void >, public ActorCallback< _finishActor13, 13, Void >, public ActorCallback< _finishActor13, 14, Void >, public ActorCallback< _finishActor13, 15, Void >, public ActorCallback< _finishActor13, 16, Void >, public FastAllocated<_finishActor13>, public _finishActor13State<_finishActor13> {
															#line 31709 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<_finishActor13>::operator new;
	using FastAllocated<_finishActor13>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< _finishActor13, 0, Void >;
friend struct ActorCallback< _finishActor13, 1, int64_t >;
friend struct ActorCallback< _finishActor13, 2, Void >;
friend struct ActorCallback< _finishActor13, 3, Void >;
friend struct ActorCallback< _finishActor13, 4, Void >;
friend struct ActorCallback< _finishActor13, 5, RestoreConfig::FileSetT::Values >;
friend struct ActorCallback< _finishActor13, 6, Key >;
friend struct ActorCallback< _finishActor13, 7, Void >;
friend struct ActorCallback< _finishActor13, 8, Void >;
friend struct ActorCallback< _finishActor13, 9, Void >;
friend struct ActorCallback< _finishActor13, 10, Void >;
friend struct ActorCallback< _finishActor13, 11, Void >;
friend struct ActorCallback< _finishActor13, 12, Void >;
friend struct ActorCallback< _finishActor13, 13, Void >;
friend struct ActorCallback< _finishActor13, 14, Void >;
friend struct ActorCallback< _finishActor13, 15, Void >;
friend struct ActorCallback< _finishActor13, 16, Void >;
															#line 3606 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	_finishActor13(Reference<ReadYourWritesTransaction> const& tr,Reference<TaskBucket> const& taskBucket,Reference<FutureBucket> const& futureBucket,Reference<Task> const& task) 
															#line 31736 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<Void>(),
		   _finishActor13State<_finishActor13>(tr, taskBucket, futureBucket, task)
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("_finish");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< _finishActor13, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< _finishActor13, 1, int64_t >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< _finishActor13, 2, Void >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< _finishActor13, 3, Void >*)0, actor_cancelled()); break;
		case 5: this->a_callback_error((ActorCallback< _finishActor13, 4, Void >*)0, actor_cancelled()); break;
		case 6: this->a_callback_error((ActorCallback< _finishActor13, 5, RestoreConfig::FileSetT::Values >*)0, actor_cancelled()); break;
		case 7: this->a_callback_error((ActorCallback< _finishActor13, 6, Key >*)0, actor_cancelled()); break;
		case 8: this->a_callback_error((ActorCallback< _finishActor13, 7, Void >*)0, actor_cancelled()); break;
		case 9: this->a_callback_error((ActorCallback< _finishActor13, 8, Void >*)0, actor_cancelled()); break;
		case 10: this->a_callback_error((ActorCallback< _finishActor13, 9, Void >*)0, actor_cancelled()); break;
		case 11: this->a_callback_error((ActorCallback< _finishActor13, 10, Void >*)0, actor_cancelled()); break;
		case 12: this->a_callback_error((ActorCallback< _finishActor13, 11, Void >*)0, actor_cancelled()); break;
		case 13: this->a_callback_error((ActorCallback< _finishActor13, 12, Void >*)0, actor_cancelled()); break;
		case 14: this->a_callback_error((ActorCallback< _finishActor13, 13, Void >*)0, actor_cancelled()); break;
		case 15: this->a_callback_error((ActorCallback< _finishActor13, 14, Void >*)0, actor_cancelled()); break;
		case 16: this->a_callback_error((ActorCallback< _finishActor13, 15, Void >*)0, actor_cancelled()); break;
		case 17: this->a_callback_error((ActorCallback< _finishActor13, 16, Void >*)0, actor_cancelled()); break;
		}

	}
};
															#line 3606 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<Void> _finish( Reference<ReadYourWritesTransaction> const& tr, Reference<TaskBucket> const& taskBucket, Reference<FutureBucket> const& futureBucket, Reference<Task> const& task ) {
															#line 3606 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<Void>(new _finishActor13(tr, taskBucket, futureBucket, task));
															#line 31779 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 3927 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

																#line 31784 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via addTask()
															#line 3928 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class AddTaskActor11>
															#line 3928 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class AddTaskActor11State {
															#line 31790 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 3928 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	AddTaskActor11State(Reference<ReadYourWritesTransaction> const& tr,Reference<TaskBucket> const& taskBucket,Reference<Task> const& parentTask,Version const& beginVersion,std::string const& beginFile,int64_t const& beginBlock,int64_t const& batchSize,int64_t const& remainingInBatch = 0,TaskCompletionKey const& completionKey = TaskCompletionKey::noSignal(),Reference<TaskFuture> const& waitFor = Reference<TaskFuture>()) 
															#line 3928 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 3928 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : tr(tr),
															#line 3928 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   taskBucket(taskBucket),
															#line 3928 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   parentTask(parentTask),
															#line 3928 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   beginVersion(beginVersion),
															#line 3928 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   beginFile(beginFile),
															#line 3928 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   beginBlock(beginBlock),
															#line 3928 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   batchSize(batchSize),
															#line 3928 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   remainingInBatch(remainingInBatch),
															#line 3928 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   completionKey(completionKey),
															#line 3928 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   waitFor(waitFor)
															#line 31815 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("addTask", reinterpret_cast<unsigned long>(this));

	}
	~AddTaskActor11State() 
	{
		fdb_probe_actor_destroy("addTask", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 3938 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Key> __when_expr_0 = completionKey.get(tr, taskBucket);
															#line 3938 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<AddTaskActor11*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 31832 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<AddTaskActor11*>(this)->actor_wait_state = 1;
															#line 3938 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< AddTaskActor11, 0, Key >*>(static_cast<AddTaskActor11*>(this)));
															#line 31837 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~AddTaskActor11State();
		static_cast<AddTaskActor11*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Key const& doneKey,int loopDepth) 
	{
															#line 3941 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		unsigned int priority = (remainingInBatch > 0) ? 1 : 0;
															#line 3942 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		task = Reference<Task>(new Task(RestoreDispatchTaskFunc::name, RestoreDispatchTaskFunc::version, doneKey, priority));
															#line 3946 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_1 = RestoreConfig(parentTask).toTask(tr, task);
															#line 3946 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<AddTaskActor11*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 31866 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<AddTaskActor11*>(this)->actor_wait_state = 2;
															#line 3946 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< AddTaskActor11, 1, Void >*>(static_cast<AddTaskActor11*>(this)));
															#line 31871 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Key && doneKey,int loopDepth) 
	{
															#line 3941 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		unsigned int priority = (remainingInBatch > 0) ? 1 : 0;
															#line 3942 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		task = Reference<Task>(new Task(RestoreDispatchTaskFunc::name, RestoreDispatchTaskFunc::version, doneKey, priority));
															#line 3946 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_1 = RestoreConfig(parentTask).toTask(tr, task);
															#line 3946 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<AddTaskActor11*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 31886 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<AddTaskActor11*>(this)->actor_wait_state = 2;
															#line 3946 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< AddTaskActor11, 1, Void >*>(static_cast<AddTaskActor11*>(this)));
															#line 31891 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1when1(Key const& doneKey,int loopDepth) 
	{
		loopDepth = a_body1cont1(doneKey, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Key && doneKey,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(doneKey), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<AddTaskActor11*>(this)->actor_wait_state > 0) static_cast<AddTaskActor11*>(this)->actor_wait_state = 0;
		static_cast<AddTaskActor11*>(this)->ActorCallback< AddTaskActor11, 0, Key >::remove();

	}
	void a_callback_fire(ActorCallback< AddTaskActor11, 0, Key >*,Key const& value) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< AddTaskActor11, 0, Key >*,Key && value) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< AddTaskActor11, 0, Key >*,Error err) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont2(Void const& _,int loopDepth) 
	{
															#line 3947 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		Params.beginVersion().set(task, beginVersion);
															#line 3948 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		Params.batchSize().set(task, batchSize);
															#line 3949 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		Params.remainingInBatch().set(task, remainingInBatch);
															#line 3950 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		Params.beginBlock().set(task, beginBlock);
															#line 3951 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		Params.beginFile().set(task, beginFile);
															#line 3953 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!waitFor)
															#line 31973 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 3954 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (!static_cast<AddTaskActor11*>(this)->SAV<Key>::futures) { (void)(taskBucket->addTask(tr, task)); this->~AddTaskActor11State(); static_cast<AddTaskActor11*>(this)->destroy(); return 0; }
															#line 31977 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			new (&static_cast<AddTaskActor11*>(this)->SAV< Key >::value()) Key(taskBucket->addTask(tr, task));
			this->~AddTaskActor11State();
			static_cast<AddTaskActor11*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 3957 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_2 = waitFor->onSetAddTask(tr, taskBucket, task);
															#line 3957 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<AddTaskActor11*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 31987 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont2when1(__when_expr_2.get(), loopDepth); };
		static_cast<AddTaskActor11*>(this)->actor_wait_state = 3;
															#line 3957 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< AddTaskActor11, 2, Void >*>(static_cast<AddTaskActor11*>(this)));
															#line 31992 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont2(Void && _,int loopDepth) 
	{
															#line 3947 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		Params.beginVersion().set(task, beginVersion);
															#line 3948 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		Params.batchSize().set(task, batchSize);
															#line 3949 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		Params.remainingInBatch().set(task, remainingInBatch);
															#line 3950 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		Params.beginBlock().set(task, beginBlock);
															#line 3951 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		Params.beginFile().set(task, beginFile);
															#line 3953 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!waitFor)
															#line 32011 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 3954 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (!static_cast<AddTaskActor11*>(this)->SAV<Key>::futures) { (void)(taskBucket->addTask(tr, task)); this->~AddTaskActor11State(); static_cast<AddTaskActor11*>(this)->destroy(); return 0; }
															#line 32015 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			new (&static_cast<AddTaskActor11*>(this)->SAV< Key >::value()) Key(taskBucket->addTask(tr, task));
			this->~AddTaskActor11State();
			static_cast<AddTaskActor11*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 3957 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_2 = waitFor->onSetAddTask(tr, taskBucket, task);
															#line 3957 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<AddTaskActor11*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 32025 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont2when1(__when_expr_2.get(), loopDepth); };
		static_cast<AddTaskActor11*>(this)->actor_wait_state = 3;
															#line 3957 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< AddTaskActor11, 2, Void >*>(static_cast<AddTaskActor11*>(this)));
															#line 32030 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<AddTaskActor11*>(this)->actor_wait_state > 0) static_cast<AddTaskActor11*>(this)->actor_wait_state = 0;
		static_cast<AddTaskActor11*>(this)->ActorCallback< AddTaskActor11, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< AddTaskActor11, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< AddTaskActor11, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< AddTaskActor11, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont3(Void const& _,int loopDepth) 
	{
															#line 3958 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<AddTaskActor11*>(this)->SAV<Key>::futures) { (void)(LiteralStringRef("OnSetAddTask")); this->~AddTaskActor11State(); static_cast<AddTaskActor11*>(this)->destroy(); return 0; }
															#line 32102 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<AddTaskActor11*>(this)->SAV< Key >::value()) Key(LiteralStringRef("OnSetAddTask"));
		this->~AddTaskActor11State();
		static_cast<AddTaskActor11*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont3(Void && _,int loopDepth) 
	{
															#line 3958 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<AddTaskActor11*>(this)->SAV<Key>::futures) { (void)(LiteralStringRef("OnSetAddTask")); this->~AddTaskActor11State(); static_cast<AddTaskActor11*>(this)->destroy(); return 0; }
															#line 32114 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<AddTaskActor11*>(this)->SAV< Key >::value()) Key(LiteralStringRef("OnSetAddTask"));
		this->~AddTaskActor11State();
		static_cast<AddTaskActor11*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont3(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont3(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<AddTaskActor11*>(this)->actor_wait_state > 0) static_cast<AddTaskActor11*>(this)->actor_wait_state = 0;
		static_cast<AddTaskActor11*>(this)->ActorCallback< AddTaskActor11, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< AddTaskActor11, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< AddTaskActor11, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< AddTaskActor11, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 2);

	}
															#line 3928 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 3928 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskBucket> taskBucket;
															#line 3928 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<Task> parentTask;
															#line 3928 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Version beginVersion;
															#line 3928 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	std::string beginFile;
															#line 3928 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int64_t beginBlock;
															#line 3928 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int64_t batchSize;
															#line 3928 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int64_t remainingInBatch;
															#line 3928 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	TaskCompletionKey completionKey;
															#line 3928 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskFuture> waitFor;
															#line 3942 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<Task> task;
															#line 32207 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via addTask()
															#line 3928 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class AddTaskActor11 final : public Actor<Key>, public ActorCallback< AddTaskActor11, 0, Key >, public ActorCallback< AddTaskActor11, 1, Void >, public ActorCallback< AddTaskActor11, 2, Void >, public FastAllocated<AddTaskActor11>, public AddTaskActor11State<AddTaskActor11> {
															#line 32212 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<AddTaskActor11>::operator new;
	using FastAllocated<AddTaskActor11>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Key>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< AddTaskActor11, 0, Key >;
friend struct ActorCallback< AddTaskActor11, 1, Void >;
friend struct ActorCallback< AddTaskActor11, 2, Void >;
															#line 3928 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	AddTaskActor11(Reference<ReadYourWritesTransaction> const& tr,Reference<TaskBucket> const& taskBucket,Reference<Task> const& parentTask,Version const& beginVersion,std::string const& beginFile,int64_t const& beginBlock,int64_t const& batchSize,int64_t const& remainingInBatch = 0,TaskCompletionKey const& completionKey = TaskCompletionKey::noSignal(),Reference<TaskFuture> const& waitFor = Reference<TaskFuture>()) 
															#line 32225 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<Key>(),
		   AddTaskActor11State<AddTaskActor11>(tr, taskBucket, parentTask, beginVersion, beginFile, beginBlock, batchSize, remainingInBatch, completionKey, waitFor)
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("addTask");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< AddTaskActor11, 0, Key >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< AddTaskActor11, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< AddTaskActor11, 2, Void >*)0, actor_cancelled()); break;
		}

	}
};
															#line 3928 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<Key> addTask( Reference<ReadYourWritesTransaction> const& tr, Reference<TaskBucket> const& taskBucket, Reference<Task> const& parentTask, Version const& beginVersion, std::string const& beginFile, int64_t const& beginBlock, int64_t const& batchSize, int64_t const& remainingInBatch = 0, TaskCompletionKey const& completionKey = TaskCompletionKey::noSignal(), Reference<TaskFuture> const& waitFor = Reference<TaskFuture>() ) {
															#line 3928 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<Key>(new AddTaskActor11(tr, taskBucket, parentTask, beginVersion, beginFile, beginBlock, batchSize, remainingInBatch, completionKey, waitFor));
															#line 32254 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 3960 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

	Future<Void> execute(Database cx,
	                     Reference<TaskBucket> tb,
	                     Reference<FutureBucket> fb,
	                     Reference<Task> task) override {
		return Void();
	};
	Future<Void> finish(Reference<ReadYourWritesTransaction> tr,
	                    Reference<TaskBucket> tb,
	                    Reference<FutureBucket> fb,
	                    Reference<Task> task) override {
		return _finish(tr, tb, fb, task);
	};
};
StringRef RestoreDispatchTaskFunc::name = LiteralStringRef("restore_dispatch");
REGISTER_TASKFUNC(RestoreDispatchTaskFunc);

															#line 32275 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via restoreStatus()
															#line 3977 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class RestoreStatusActor>
															#line 3977 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class RestoreStatusActorState {
															#line 32281 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 3977 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	RestoreStatusActorState(Reference<ReadYourWritesTransaction> const& tr,Key const& tagName) 
															#line 3977 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 3977 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : tr(tr),
															#line 3977 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   tagName(tagName)
															#line 32290 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("restoreStatus", reinterpret_cast<unsigned long>(this));

	}
	~RestoreStatusActorState() 
	{
		fdb_probe_actor_destroy("restoreStatus", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 3978 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::PRIORITY_SYSTEM_IMMEDIATE);
															#line 3979 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 3980 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 3982 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tags = std::vector<KeyBackedTag>();
															#line 3983 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (tagName.size() == 0)
															#line 32313 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			{
															#line 3984 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				StrictFuture<std::vector<KeyBackedTag>> __when_expr_0 = getAllRestoreTags(tr);
															#line 3984 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				if (static_cast<RestoreStatusActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 32319 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
				static_cast<RestoreStatusActor*>(this)->actor_wait_state = 1;
															#line 3984 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< RestoreStatusActor, 0, std::vector<KeyBackedTag> >*>(static_cast<RestoreStatusActor*>(this)));
															#line 32324 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				loopDepth = 0;
			}
			else
			{
															#line 3987 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				tags.push_back(makeRestoreTag(tagName.toString()));
															#line 32331 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				loopDepth = a_body1cont1(loopDepth);
			}
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~RestoreStatusActorState();
		static_cast<RestoreStatusActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 3989 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		result = std::string();
															#line 3990 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		i = 0;
															#line 3992 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		;
															#line 32359 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont1loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1cont2(std::vector<KeyBackedTag> const& t,int loopDepth) 
	{
															#line 3985 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tags = t;
															#line 32368 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont2(std::vector<KeyBackedTag> && t,int loopDepth) 
	{
															#line 3985 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tags = t;
															#line 32377 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1when1(std::vector<KeyBackedTag> const& t,int loopDepth) 
	{
		loopDepth = a_body1cont2(t, loopDepth);

		return loopDepth;
	}
	int a_body1when1(std::vector<KeyBackedTag> && t,int loopDepth) 
	{
		loopDepth = a_body1cont2(std::move(t), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<RestoreStatusActor*>(this)->actor_wait_state > 0) static_cast<RestoreStatusActor*>(this)->actor_wait_state = 0;
		static_cast<RestoreStatusActor*>(this)->ActorCallback< RestoreStatusActor, 0, std::vector<KeyBackedTag> >::remove();

	}
	void a_callback_fire(ActorCallback< RestoreStatusActor, 0, std::vector<KeyBackedTag> >*,std::vector<KeyBackedTag> const& value) 
	{
		fdb_probe_actor_enter("restoreStatus", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("restoreStatus", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< RestoreStatusActor, 0, std::vector<KeyBackedTag> >*,std::vector<KeyBackedTag> && value) 
	{
		fdb_probe_actor_enter("restoreStatus", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("restoreStatus", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< RestoreStatusActor, 0, std::vector<KeyBackedTag> >*,Error err) 
	{
		fdb_probe_actor_enter("restoreStatus", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("restoreStatus", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont5(int loopDepth) 
	{
															#line 3999 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<RestoreStatusActor*>(this)->SAV<std::string>::futures) { (void)(result); this->~RestoreStatusActorState(); static_cast<RestoreStatusActor*>(this)->destroy(); return 0; }
															#line 32449 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<RestoreStatusActor*>(this)->SAV< std::string >::value()) std::string(std::move(result)); // state_var_RVO
		this->~RestoreStatusActorState();
		static_cast<RestoreStatusActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1cont1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1(int loopDepth) 
	{
															#line 3992 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!(i < tags.size()))
															#line 32468 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
			return a_body1cont1break1(loopDepth==0?0:loopDepth-1); // break
		}
															#line 3993 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<UidAndAbortedFlagT> __when_expr_1 = tags[i].getD(tr);
															#line 3993 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<RestoreStatusActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 32476 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), std::max(0, loopDepth - 1)); else return a_body1cont1loopBody1when1(__when_expr_1.get(), loopDepth); };
		static_cast<RestoreStatusActor*>(this)->actor_wait_state = 2;
															#line 3993 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< RestoreStatusActor, 1, UidAndAbortedFlagT >*>(static_cast<RestoreStatusActor*>(this)));
															#line 32481 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1break1(int loopDepth) 
	{
		try {
			return a_body1cont5(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1(UidAndAbortedFlagT const& u,int loopDepth) 
	{
															#line 3994 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<std::string> __when_expr_2 = RestoreConfig(u.first).getFullStatus(tr);
															#line 3994 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<RestoreStatusActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 32505 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), std::max(0, loopDepth - 1)); else return a_body1cont1loopBody1cont1when1(__when_expr_2.get(), loopDepth); };
		static_cast<RestoreStatusActor*>(this)->actor_wait_state = 3;
															#line 3994 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< RestoreStatusActor, 2, std::string >*>(static_cast<RestoreStatusActor*>(this)));
															#line 32510 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1(UidAndAbortedFlagT && u,int loopDepth) 
	{
															#line 3994 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<std::string> __when_expr_2 = RestoreConfig(u.first).getFullStatus(tr);
															#line 3994 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<RestoreStatusActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 32521 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), std::max(0, loopDepth - 1)); else return a_body1cont1loopBody1cont1when1(__when_expr_2.get(), loopDepth); };
		static_cast<RestoreStatusActor*>(this)->actor_wait_state = 3;
															#line 3994 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< RestoreStatusActor, 2, std::string >*>(static_cast<RestoreStatusActor*>(this)));
															#line 32526 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1loopBody1when1(UidAndAbortedFlagT const& u,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont1(u, loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1when1(UidAndAbortedFlagT && u,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont1(std::move(u), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<RestoreStatusActor*>(this)->actor_wait_state > 0) static_cast<RestoreStatusActor*>(this)->actor_wait_state = 0;
		static_cast<RestoreStatusActor*>(this)->ActorCallback< RestoreStatusActor, 1, UidAndAbortedFlagT >::remove();

	}
	void a_callback_fire(ActorCallback< RestoreStatusActor, 1, UidAndAbortedFlagT >*,UidAndAbortedFlagT const& value) 
	{
		fdb_probe_actor_enter("restoreStatus", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("restoreStatus", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< RestoreStatusActor, 1, UidAndAbortedFlagT >*,UidAndAbortedFlagT && value) 
	{
		fdb_probe_actor_enter("restoreStatus", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("restoreStatus", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< RestoreStatusActor, 1, UidAndAbortedFlagT >*,Error err) 
	{
		fdb_probe_actor_enter("restoreStatus", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("restoreStatus", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont1loopBody1cont3(std::string const& s,int loopDepth) 
	{
															#line 3995 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		result.append(s);
															#line 3996 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		result.append("\n\n");
															#line 3992 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		++i;
															#line 32602 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (loopDepth == 0) return a_body1cont1loopHead1(0);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont3(std::string && s,int loopDepth) 
	{
															#line 3995 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		result.append(s);
															#line 3996 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		result.append("\n\n");
															#line 3992 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		++i;
															#line 32615 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (loopDepth == 0) return a_body1cont1loopHead1(0);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1when1(std::string const& s,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont3(s, loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1when1(std::string && s,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont3(std::move(s), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<RestoreStatusActor*>(this)->actor_wait_state > 0) static_cast<RestoreStatusActor*>(this)->actor_wait_state = 0;
		static_cast<RestoreStatusActor*>(this)->ActorCallback< RestoreStatusActor, 2, std::string >::remove();

	}
	void a_callback_fire(ActorCallback< RestoreStatusActor, 2, std::string >*,std::string const& value) 
	{
		fdb_probe_actor_enter("restoreStatus", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont1loopBody1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("restoreStatus", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< RestoreStatusActor, 2, std::string >*,std::string && value) 
	{
		fdb_probe_actor_enter("restoreStatus", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont1loopBody1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("restoreStatus", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< RestoreStatusActor, 2, std::string >*,Error err) 
	{
		fdb_probe_actor_enter("restoreStatus", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("restoreStatus", reinterpret_cast<unsigned long>(this), 2);

	}
															#line 3977 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 3977 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Key tagName;
															#line 3982 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	std::vector<KeyBackedTag> tags;
															#line 3989 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	std::string result;
															#line 3990 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int i;
															#line 32693 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via restoreStatus()
															#line 3977 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class RestoreStatusActor final : public Actor<std::string>, public ActorCallback< RestoreStatusActor, 0, std::vector<KeyBackedTag> >, public ActorCallback< RestoreStatusActor, 1, UidAndAbortedFlagT >, public ActorCallback< RestoreStatusActor, 2, std::string >, public FastAllocated<RestoreStatusActor>, public RestoreStatusActorState<RestoreStatusActor> {
															#line 32698 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<RestoreStatusActor>::operator new;
	using FastAllocated<RestoreStatusActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<std::string>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< RestoreStatusActor, 0, std::vector<KeyBackedTag> >;
friend struct ActorCallback< RestoreStatusActor, 1, UidAndAbortedFlagT >;
friend struct ActorCallback< RestoreStatusActor, 2, std::string >;
															#line 3977 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	RestoreStatusActor(Reference<ReadYourWritesTransaction> const& tr,Key const& tagName) 
															#line 32711 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<std::string>(),
		   RestoreStatusActorState<RestoreStatusActor>(tr, tagName)
	{
		fdb_probe_actor_enter("restoreStatus", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("restoreStatus");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("restoreStatus", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< RestoreStatusActor, 0, std::vector<KeyBackedTag> >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< RestoreStatusActor, 1, UidAndAbortedFlagT >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< RestoreStatusActor, 2, std::string >*)0, actor_cancelled()); break;
		}

	}
};
															#line 3977 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] Future<std::string> restoreStatus( Reference<ReadYourWritesTransaction> const& tr, Key const& tagName ) {
															#line 3977 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<std::string>(new RestoreStatusActor(tr, tagName));
															#line 32740 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 4001 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

															#line 32745 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via abortRestore()
															#line 4002 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class AbortRestoreActor>
															#line 4002 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class AbortRestoreActorState {
															#line 32751 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 4002 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	AbortRestoreActorState(Reference<ReadYourWritesTransaction> const& tr,Key const& tagName) 
															#line 4002 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 4002 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : tr(tr),
															#line 4002 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   tagName(tagName)
															#line 32760 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("abortRestore", reinterpret_cast<unsigned long>(this));

	}
	~AbortRestoreActorState() 
	{
		fdb_probe_actor_destroy("abortRestore", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 4003 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 4004 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 4005 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::COMMIT_ON_FIRST_PROXY);
															#line 4007 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tag = makeRestoreTag(tagName.toString());
															#line 4008 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Optional<UidAndAbortedFlagT>> __when_expr_0 = tag.get(tr);
															#line 4008 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<AbortRestoreActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 32785 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<AbortRestoreActor*>(this)->actor_wait_state = 1;
															#line 4008 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< AbortRestoreActor, 0, Optional<UidAndAbortedFlagT> >*>(static_cast<AbortRestoreActor*>(this)));
															#line 32790 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~AbortRestoreActorState();
		static_cast<AbortRestoreActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 4009 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!current.present())
															#line 32813 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 4010 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (!static_cast<AbortRestoreActor*>(this)->SAV<ERestoreState>::futures) { (void)(ERestoreState::UNITIALIZED); this->~AbortRestoreActorState(); static_cast<AbortRestoreActor*>(this)->destroy(); return 0; }
															#line 32817 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			new (&static_cast<AbortRestoreActor*>(this)->SAV< ERestoreState >::value()) ERestoreState(ERestoreState::UNITIALIZED);
			this->~AbortRestoreActorState();
			static_cast<AbortRestoreActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 4012 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		restore = RestoreConfig(current.get().first);
															#line 4014 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<ERestoreState> __when_expr_1 = restore.stateEnum().getD(tr);
															#line 4014 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<AbortRestoreActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 32829 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<AbortRestoreActor*>(this)->actor_wait_state = 2;
															#line 4014 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< AbortRestoreActor, 1, ERestoreState >*>(static_cast<AbortRestoreActor*>(this)));
															#line 32834 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1when1(Optional<UidAndAbortedFlagT> const& __current,int loopDepth) 
	{
															#line 4008 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		current = __current;
															#line 32843 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1when1(Optional<UidAndAbortedFlagT> && __current,int loopDepth) 
	{
		current = std::move(__current);
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<AbortRestoreActor*>(this)->actor_wait_state > 0) static_cast<AbortRestoreActor*>(this)->actor_wait_state = 0;
		static_cast<AbortRestoreActor*>(this)->ActorCallback< AbortRestoreActor, 0, Optional<UidAndAbortedFlagT> >::remove();

	}
	void a_callback_fire(ActorCallback< AbortRestoreActor, 0, Optional<UidAndAbortedFlagT> >*,Optional<UidAndAbortedFlagT> const& value) 
	{
		fdb_probe_actor_enter("abortRestore", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("abortRestore", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< AbortRestoreActor, 0, Optional<UidAndAbortedFlagT> >*,Optional<UidAndAbortedFlagT> && value) 
	{
		fdb_probe_actor_enter("abortRestore", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("abortRestore", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< AbortRestoreActor, 0, Optional<UidAndAbortedFlagT> >*,Error err) 
	{
		fdb_probe_actor_enter("abortRestore", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("abortRestore", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont2(int loopDepth) 
	{
															#line 4015 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<bool> __when_expr_2 = restore.isRunnable(tr);
															#line 4015 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<AbortRestoreActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 32912 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont2when1(__when_expr_2.get(), loopDepth); };
		static_cast<AbortRestoreActor*>(this)->actor_wait_state = 3;
															#line 4015 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< AbortRestoreActor, 2, bool >*>(static_cast<AbortRestoreActor*>(this)));
															#line 32917 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1when1(ERestoreState const& __status,int loopDepth) 
	{
															#line 4014 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		status = __status;
															#line 32926 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont2(loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(ERestoreState && __status,int loopDepth) 
	{
		status = std::move(__status);
		loopDepth = a_body1cont2(loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<AbortRestoreActor*>(this)->actor_wait_state > 0) static_cast<AbortRestoreActor*>(this)->actor_wait_state = 0;
		static_cast<AbortRestoreActor*>(this)->ActorCallback< AbortRestoreActor, 1, ERestoreState >::remove();

	}
	void a_callback_fire(ActorCallback< AbortRestoreActor, 1, ERestoreState >*,ERestoreState const& value) 
	{
		fdb_probe_actor_enter("abortRestore", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("abortRestore", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< AbortRestoreActor, 1, ERestoreState >*,ERestoreState && value) 
	{
		fdb_probe_actor_enter("abortRestore", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("abortRestore", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< AbortRestoreActor, 1, ERestoreState >*,Error err) 
	{
		fdb_probe_actor_enter("abortRestore", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("abortRestore", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont4(int loopDepth) 
	{
															#line 4017 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!runnable)
															#line 32993 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 4018 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (!static_cast<AbortRestoreActor*>(this)->SAV<ERestoreState>::futures) { (void)(status); this->~AbortRestoreActorState(); static_cast<AbortRestoreActor*>(this)->destroy(); return 0; }
															#line 32997 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			new (&static_cast<AbortRestoreActor*>(this)->SAV< ERestoreState >::value()) ERestoreState(std::move(status)); // state_var_RVO
			this->~AbortRestoreActorState();
			static_cast<AbortRestoreActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 4020 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		restore.stateEnum().set(tr, ERestoreState::ABORTED);
															#line 4023 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		restore.clearApplyMutationsKeys(tr);
															#line 4026 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_3 = tag.cancel(tr);
															#line 4026 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<AbortRestoreActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 33011 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1cont4when1(__when_expr_3.get(), loopDepth); };
		static_cast<AbortRestoreActor*>(this)->actor_wait_state = 4;
															#line 4026 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< AbortRestoreActor, 3, Void >*>(static_cast<AbortRestoreActor*>(this)));
															#line 33016 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont2when1(bool const& __runnable,int loopDepth) 
	{
															#line 4015 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		runnable = __runnable;
															#line 33025 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont4(loopDepth);

		return loopDepth;
	}
	int a_body1cont2when1(bool && __runnable,int loopDepth) 
	{
		runnable = std::move(__runnable);
		loopDepth = a_body1cont4(loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<AbortRestoreActor*>(this)->actor_wait_state > 0) static_cast<AbortRestoreActor*>(this)->actor_wait_state = 0;
		static_cast<AbortRestoreActor*>(this)->ActorCallback< AbortRestoreActor, 2, bool >::remove();

	}
	void a_callback_fire(ActorCallback< AbortRestoreActor, 2, bool >*,bool const& value) 
	{
		fdb_probe_actor_enter("abortRestore", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("abortRestore", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< AbortRestoreActor, 2, bool >*,bool && value) 
	{
		fdb_probe_actor_enter("abortRestore", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("abortRestore", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< AbortRestoreActor, 2, bool >*,Error err) 
	{
		fdb_probe_actor_enter("abortRestore", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("abortRestore", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1cont5(Void const& _,int loopDepth) 
	{
															#line 4027 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_4 = unlockDatabase(tr, current.get().first);
															#line 4027 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<AbortRestoreActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 33094 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1Catch1(__when_expr_4.getError(), loopDepth); else return a_body1cont5when1(__when_expr_4.get(), loopDepth); };
		static_cast<AbortRestoreActor*>(this)->actor_wait_state = 5;
															#line 4027 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< AbortRestoreActor, 4, Void >*>(static_cast<AbortRestoreActor*>(this)));
															#line 33099 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont5(Void && _,int loopDepth) 
	{
															#line 4027 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_4 = unlockDatabase(tr, current.get().first);
															#line 4027 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<AbortRestoreActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 33110 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1Catch1(__when_expr_4.getError(), loopDepth); else return a_body1cont5when1(__when_expr_4.get(), loopDepth); };
		static_cast<AbortRestoreActor*>(this)->actor_wait_state = 5;
															#line 4027 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< AbortRestoreActor, 4, Void >*>(static_cast<AbortRestoreActor*>(this)));
															#line 33115 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont4when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont5(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont4when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont5(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<AbortRestoreActor*>(this)->actor_wait_state > 0) static_cast<AbortRestoreActor*>(this)->actor_wait_state = 0;
		static_cast<AbortRestoreActor*>(this)->ActorCallback< AbortRestoreActor, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< AbortRestoreActor, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("abortRestore", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont4when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("abortRestore", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< AbortRestoreActor, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("abortRestore", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont4when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("abortRestore", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< AbortRestoreActor, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("abortRestore", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("abortRestore", reinterpret_cast<unsigned long>(this), 3);

	}
	int a_body1cont7(Void const& _,int loopDepth) 
	{
															#line 4028 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<AbortRestoreActor*>(this)->SAV<ERestoreState>::futures) { (void)(ERestoreState::ABORTED); this->~AbortRestoreActorState(); static_cast<AbortRestoreActor*>(this)->destroy(); return 0; }
															#line 33187 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<AbortRestoreActor*>(this)->SAV< ERestoreState >::value()) ERestoreState(ERestoreState::ABORTED);
		this->~AbortRestoreActorState();
		static_cast<AbortRestoreActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont7(Void && _,int loopDepth) 
	{
															#line 4028 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<AbortRestoreActor*>(this)->SAV<ERestoreState>::futures) { (void)(ERestoreState::ABORTED); this->~AbortRestoreActorState(); static_cast<AbortRestoreActor*>(this)->destroy(); return 0; }
															#line 33199 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<AbortRestoreActor*>(this)->SAV< ERestoreState >::value()) ERestoreState(ERestoreState::ABORTED);
		this->~AbortRestoreActorState();
		static_cast<AbortRestoreActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont5when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont7(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont5when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont7(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose5() 
	{
		if (static_cast<AbortRestoreActor*>(this)->actor_wait_state > 0) static_cast<AbortRestoreActor*>(this)->actor_wait_state = 0;
		static_cast<AbortRestoreActor*>(this)->ActorCallback< AbortRestoreActor, 4, Void >::remove();

	}
	void a_callback_fire(ActorCallback< AbortRestoreActor, 4, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("abortRestore", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont5when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("abortRestore", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_fire(ActorCallback< AbortRestoreActor, 4, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("abortRestore", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont5when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("abortRestore", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_error(ActorCallback< AbortRestoreActor, 4, Void >*,Error err) 
	{
		fdb_probe_actor_enter("abortRestore", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("abortRestore", reinterpret_cast<unsigned long>(this), 4);

	}
															#line 4002 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 4002 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Key tagName;
															#line 4007 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	KeyBackedTag tag;
															#line 4008 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Optional<UidAndAbortedFlagT> current;
															#line 4012 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	RestoreConfig restore;
															#line 4014 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	ERestoreState status;
															#line 4015 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	bool runnable;
															#line 33284 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via abortRestore()
															#line 4002 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class AbortRestoreActor final : public Actor<ERestoreState>, public ActorCallback< AbortRestoreActor, 0, Optional<UidAndAbortedFlagT> >, public ActorCallback< AbortRestoreActor, 1, ERestoreState >, public ActorCallback< AbortRestoreActor, 2, bool >, public ActorCallback< AbortRestoreActor, 3, Void >, public ActorCallback< AbortRestoreActor, 4, Void >, public FastAllocated<AbortRestoreActor>, public AbortRestoreActorState<AbortRestoreActor> {
															#line 33289 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<AbortRestoreActor>::operator new;
	using FastAllocated<AbortRestoreActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<ERestoreState>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< AbortRestoreActor, 0, Optional<UidAndAbortedFlagT> >;
friend struct ActorCallback< AbortRestoreActor, 1, ERestoreState >;
friend struct ActorCallback< AbortRestoreActor, 2, bool >;
friend struct ActorCallback< AbortRestoreActor, 3, Void >;
friend struct ActorCallback< AbortRestoreActor, 4, Void >;
															#line 4002 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	AbortRestoreActor(Reference<ReadYourWritesTransaction> const& tr,Key const& tagName) 
															#line 33304 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<ERestoreState>(),
		   AbortRestoreActorState<AbortRestoreActor>(tr, tagName)
	{
		fdb_probe_actor_enter("abortRestore", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("abortRestore");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("abortRestore", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< AbortRestoreActor, 0, Optional<UidAndAbortedFlagT> >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< AbortRestoreActor, 1, ERestoreState >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< AbortRestoreActor, 2, bool >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< AbortRestoreActor, 3, Void >*)0, actor_cancelled()); break;
		case 5: this->a_callback_error((ActorCallback< AbortRestoreActor, 4, Void >*)0, actor_cancelled()); break;
		}

	}
};
															#line 4002 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] Future<ERestoreState> abortRestore( Reference<ReadYourWritesTransaction> const& tr, Key const& tagName ) {
															#line 4002 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<ERestoreState>(new AbortRestoreActor(tr, tagName));
															#line 33335 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 4030 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

															#line 33340 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via abortRestore()
															#line 4031 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class AbortRestoreActor1>
															#line 4031 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class AbortRestoreActor1State {
															#line 33346 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 4031 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	AbortRestoreActor1State(Database const& cx,Key const& tagName) 
															#line 4031 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 4031 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : cx(cx),
															#line 4031 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   tagName(tagName),
															#line 4032 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   tr(Reference<ReadYourWritesTransaction>(new ReadYourWritesTransaction(cx)))
															#line 33357 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("abortRestore", reinterpret_cast<unsigned long>(this));

	}
	~AbortRestoreActor1State() 
	{
		fdb_probe_actor_destroy("abortRestore", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 4035 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			;
															#line 33372 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~AbortRestoreActor1State();
		static_cast<AbortRestoreActor1*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 4048 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr = Reference<ReadYourWritesTransaction>(new ReadYourWritesTransaction(cx));
															#line 4052 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		;
															#line 33397 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont1loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
		try {
															#line 4037 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<ERestoreState> __when_expr_0 = abortRestore(tr, tagName);
															#line 4037 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<AbortRestoreActor1*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 33416 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1loopBody1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
			static_cast<AbortRestoreActor1*>(this)->actor_wait_state = 1;
															#line 4037 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< AbortRestoreActor1, 0, ERestoreState >*>(static_cast<AbortRestoreActor1*>(this)));
															#line 33421 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1break1(int loopDepth) 
	{
		try {
			return a_body1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 4044 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_2 = tr->onError(e);
															#line 4044 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<AbortRestoreActor1*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 33458 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1Catch1when1(__when_expr_2.get(), loopDepth); };
			static_cast<AbortRestoreActor1*>(this)->actor_wait_state = 3;
															#line 4044 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< AbortRestoreActor1, 2, Void >*>(static_cast<AbortRestoreActor1*>(this)));
															#line 33463 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(ERestoreState const& estate,int loopDepth) 
	{
															#line 4038 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (estate != ERestoreState::ABORTED)
															#line 33478 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 4039 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (!static_cast<AbortRestoreActor1*>(this)->SAV<ERestoreState>::futures) { (void)(estate); this->~AbortRestoreActor1State(); static_cast<AbortRestoreActor1*>(this)->destroy(); return 0; }
															#line 33482 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			new (&static_cast<AbortRestoreActor1*>(this)->SAV< ERestoreState >::value()) ERestoreState(estate);
			this->~AbortRestoreActor1State();
			static_cast<AbortRestoreActor1*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 4041 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_1 = tr->commit();
															#line 4041 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<AbortRestoreActor1*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 33492 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
		static_cast<AbortRestoreActor1*>(this)->actor_wait_state = 2;
															#line 4041 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< AbortRestoreActor1, 1, Void >*>(static_cast<AbortRestoreActor1*>(this)));
															#line 33497 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2(ERestoreState && estate,int loopDepth) 
	{
															#line 4038 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (estate != ERestoreState::ABORTED)
															#line 33506 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 4039 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (!static_cast<AbortRestoreActor1*>(this)->SAV<ERestoreState>::futures) { (void)(estate); this->~AbortRestoreActor1State(); static_cast<AbortRestoreActor1*>(this)->destroy(); return 0; }
															#line 33510 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			new (&static_cast<AbortRestoreActor1*>(this)->SAV< ERestoreState >::value()) ERestoreState(estate);
			this->~AbortRestoreActor1State();
			static_cast<AbortRestoreActor1*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 4041 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_1 = tr->commit();
															#line 4041 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<AbortRestoreActor1*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 33520 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
		static_cast<AbortRestoreActor1*>(this)->actor_wait_state = 2;
															#line 4041 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< AbortRestoreActor1, 1, Void >*>(static_cast<AbortRestoreActor1*>(this)));
															#line 33525 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1when1(ERestoreState const& estate,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(estate, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(ERestoreState && estate,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(std::move(estate), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<AbortRestoreActor1*>(this)->actor_wait_state > 0) static_cast<AbortRestoreActor1*>(this)->actor_wait_state = 0;
		static_cast<AbortRestoreActor1*>(this)->ActorCallback< AbortRestoreActor1, 0, ERestoreState >::remove();

	}
	void a_callback_fire(ActorCallback< AbortRestoreActor1, 0, ERestoreState >*,ERestoreState const& value) 
	{
		fdb_probe_actor_enter("abortRestore", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("abortRestore", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< AbortRestoreActor1, 0, ERestoreState >*,ERestoreState && value) 
	{
		fdb_probe_actor_enter("abortRestore", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("abortRestore", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< AbortRestoreActor1, 0, ERestoreState >*,Error err) 
	{
		fdb_probe_actor_enter("abortRestore", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("abortRestore", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1cont3(Void const& _,int loopDepth) 
	{
		return a_body1break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1loopBody1cont3(Void && _,int loopDepth) 
	{
		return a_body1break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<AbortRestoreActor1*>(this)->actor_wait_state > 0) static_cast<AbortRestoreActor1*>(this)->actor_wait_state = 0;
		static_cast<AbortRestoreActor1*>(this)->ActorCallback< AbortRestoreActor1, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< AbortRestoreActor1, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("abortRestore", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("abortRestore", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< AbortRestoreActor1, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("abortRestore", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("abortRestore", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< AbortRestoreActor1, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("abortRestore", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("abortRestore", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<AbortRestoreActor1*>(this)->actor_wait_state > 0) static_cast<AbortRestoreActor1*>(this)->actor_wait_state = 0;
		static_cast<AbortRestoreActor1*>(this)->ActorCallback< AbortRestoreActor1, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< AbortRestoreActor1, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("abortRestore", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("abortRestore", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< AbortRestoreActor1, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("abortRestore", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("abortRestore", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< AbortRestoreActor1, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("abortRestore", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("abortRestore", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1cont1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1cont1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1(int loopDepth) 
	{
		try {
															#line 4054 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 4055 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 4056 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::COMMIT_ON_FIRST_PROXY);
															#line 4057 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->addReadConflictRange(singleKeyRange(KeyRef()));
															#line 4058 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->addWriteConflictRange(singleKeyRange(KeyRef()));
															#line 4059 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_3 = tr->commit();
															#line 4059 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<AbortRestoreActor1*>(this)->actor_wait_state < 0) return a_body1cont1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 33767 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1cont1loopBody1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1cont1loopBody1when1(__when_expr_3.get(), loopDepth); };
			static_cast<AbortRestoreActor1*>(this)->actor_wait_state = 4;
															#line 4059 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< AbortRestoreActor1, 3, Void >*>(static_cast<AbortRestoreActor1*>(this)));
															#line 33772 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1cont1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1cont1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1cont1loopHead1(0);

		return loopDepth;
	}
	int a_body1cont1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 4062 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_4 = tr->onError(e);
															#line 4062 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<AbortRestoreActor1*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 33796 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1Catch1(__when_expr_4.getError(), std::max(0, loopDepth - 1)); else return a_body1cont1loopBody1Catch1when1(__when_expr_4.get(), loopDepth); };
			static_cast<AbortRestoreActor1*>(this)->actor_wait_state = 5;
															#line 4062 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< AbortRestoreActor1, 4, Void >*>(static_cast<AbortRestoreActor1*>(this)));
															#line 33801 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1cont1loopBody1cont2(Void const& _,int loopDepth) 
	{
															#line 4060 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<AbortRestoreActor1*>(this)->SAV<ERestoreState>::futures) { (void)(ERestoreState::ABORTED); this->~AbortRestoreActor1State(); static_cast<AbortRestoreActor1*>(this)->destroy(); return 0; }
															#line 33816 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<AbortRestoreActor1*>(this)->SAV< ERestoreState >::value()) ERestoreState(ERestoreState::ABORTED);
		this->~AbortRestoreActor1State();
		static_cast<AbortRestoreActor1*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1loopBody1cont2(Void && _,int loopDepth) 
	{
															#line 4060 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<AbortRestoreActor1*>(this)->SAV<ERestoreState>::futures) { (void)(ERestoreState::ABORTED); this->~AbortRestoreActor1State(); static_cast<AbortRestoreActor1*>(this)->destroy(); return 0; }
															#line 33828 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<AbortRestoreActor1*>(this)->SAV< ERestoreState >::value()) ERestoreState(ERestoreState::ABORTED);
		this->~AbortRestoreActor1State();
		static_cast<AbortRestoreActor1*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<AbortRestoreActor1*>(this)->actor_wait_state > 0) static_cast<AbortRestoreActor1*>(this)->actor_wait_state = 0;
		static_cast<AbortRestoreActor1*>(this)->ActorCallback< AbortRestoreActor1, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< AbortRestoreActor1, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("abortRestore", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("abortRestore", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< AbortRestoreActor1, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("abortRestore", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("abortRestore", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< AbortRestoreActor1, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("abortRestore", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("abortRestore", reinterpret_cast<unsigned long>(this), 3);

	}
	int a_body1cont1loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose5() 
	{
		if (static_cast<AbortRestoreActor1*>(this)->actor_wait_state > 0) static_cast<AbortRestoreActor1*>(this)->actor_wait_state = 0;
		static_cast<AbortRestoreActor1*>(this)->ActorCallback< AbortRestoreActor1, 4, Void >::remove();

	}
	void a_callback_fire(ActorCallback< AbortRestoreActor1, 4, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("abortRestore", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("abortRestore", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_fire(ActorCallback< AbortRestoreActor1, 4, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("abortRestore", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("abortRestore", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_error(ActorCallback< AbortRestoreActor1, 4, Void >*,Error err) 
	{
		fdb_probe_actor_enter("abortRestore", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("abortRestore", reinterpret_cast<unsigned long>(this), 4);

	}
															#line 4031 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Database cx;
															#line 4031 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Key tagName;
															#line 4032 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 33980 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via abortRestore()
															#line 4031 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class AbortRestoreActor1 final : public Actor<ERestoreState>, public ActorCallback< AbortRestoreActor1, 0, ERestoreState >, public ActorCallback< AbortRestoreActor1, 1, Void >, public ActorCallback< AbortRestoreActor1, 2, Void >, public ActorCallback< AbortRestoreActor1, 3, Void >, public ActorCallback< AbortRestoreActor1, 4, Void >, public FastAllocated<AbortRestoreActor1>, public AbortRestoreActor1State<AbortRestoreActor1> {
															#line 33985 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<AbortRestoreActor1>::operator new;
	using FastAllocated<AbortRestoreActor1>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<ERestoreState>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< AbortRestoreActor1, 0, ERestoreState >;
friend struct ActorCallback< AbortRestoreActor1, 1, Void >;
friend struct ActorCallback< AbortRestoreActor1, 2, Void >;
friend struct ActorCallback< AbortRestoreActor1, 3, Void >;
friend struct ActorCallback< AbortRestoreActor1, 4, Void >;
															#line 4031 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	AbortRestoreActor1(Database const& cx,Key const& tagName) 
															#line 34000 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<ERestoreState>(),
		   AbortRestoreActor1State<AbortRestoreActor1>(cx, tagName)
	{
		fdb_probe_actor_enter("abortRestore", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("abortRestore");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("abortRestore", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< AbortRestoreActor1, 0, ERestoreState >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< AbortRestoreActor1, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< AbortRestoreActor1, 2, Void >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< AbortRestoreActor1, 3, Void >*)0, actor_cancelled()); break;
		case 5: this->a_callback_error((ActorCallback< AbortRestoreActor1, 4, Void >*)0, actor_cancelled()); break;
		}

	}
};
															#line 4031 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] Future<ERestoreState> abortRestore( Database const& cx, Key const& tagName ) {
															#line 4031 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<ERestoreState>(new AbortRestoreActor1(cx, tagName));
															#line 34031 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 4066 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

struct StartFullRestoreTaskFunc : RestoreTaskFuncBase {
	static StringRef name;
	static constexpr uint32_t version = 1;

	static struct {
		static TaskParam<Version> firstVersion() { return LiteralStringRef(__FUNCTION__); }
	} Params;

	// Find all files needed for the restore and save them in the RestoreConfig for the task.
	// Update the total number of files and blocks and change state to starting.
																#line 34046 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via _execute()
															#line 4077 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class _executeActor7>
															#line 4077 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class _executeActor7State {
															#line 34052 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 4077 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	_executeActor7State(Database const& cx,Reference<TaskBucket> const& taskBucket,Reference<FutureBucket> const& futureBucket,Reference<Task> const& task) 
															#line 4077 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 4077 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : cx(cx),
															#line 4077 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   taskBucket(taskBucket),
															#line 4077 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   futureBucket(futureBucket),
															#line 4077 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   task(task),
															#line 4081 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   tr(new ReadYourWritesTransaction(cx)),
															#line 4082 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   restore(task),
															#line 4083 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   restoreVersion(),
															#line 4084 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   beginVersion(),
															#line 4085 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   bc(),
															#line 4086 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   ranges(),
															#line 4087 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   logsOnly(),
															#line 4088 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   inconsistentSnapshotOnly()
															#line 34081 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("_execute", reinterpret_cast<unsigned long>(this));

	}
	~_executeActor7State() 
	{
		fdb_probe_actor_destroy("_execute", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 4090 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			;
															#line 34096 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~_executeActor7State();
		static_cast<_executeActor7*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 4128 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr->reset();
															#line 4129 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		;
															#line 34121 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont1loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
		try {
															#line 4092 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 4093 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 4095 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_0 = checkTaskVersion(tr->getDatabase(), task, name, version);
															#line 4095 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_executeActor7*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 34144 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1loopBody1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
			static_cast<_executeActor7*>(this)->actor_wait_state = 1;
															#line 4095 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< _executeActor7, 0, Void >*>(static_cast<_executeActor7*>(this)));
															#line 34149 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1break1(int loopDepth) 
	{
		try {
			return a_body1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 4124 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_11 = tr->onError(e);
															#line 4124 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_executeActor7*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 34186 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_11.isReady()) { if (__when_expr_11.isError()) return a_body1Catch1(__when_expr_11.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1Catch1when1(__when_expr_11.get(), loopDepth); };
			static_cast<_executeActor7*>(this)->actor_wait_state = 12;
															#line 4124 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_11.addCallbackAndClear(static_cast<ActorCallback< _executeActor7, 11, Void >*>(static_cast<_executeActor7*>(this)));
															#line 34191 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(Void const& _,int loopDepth) 
	{
															#line 4096 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_1 = store(beginVersion, restore.beginVersion().getD(tr, Snapshot::False, ::invalidVersion));
															#line 4096 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor7*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 34208 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
		static_cast<_executeActor7*>(this)->actor_wait_state = 2;
															#line 4096 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< _executeActor7, 1, Void >*>(static_cast<_executeActor7*>(this)));
															#line 34213 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2(Void && _,int loopDepth) 
	{
															#line 4096 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_1 = store(beginVersion, restore.beginVersion().getD(tr, Snapshot::False, ::invalidVersion));
															#line 4096 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor7*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 34224 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
		static_cast<_executeActor7*>(this)->actor_wait_state = 2;
															#line 4096 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< _executeActor7, 1, Void >*>(static_cast<_executeActor7*>(this)));
															#line 34229 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<_executeActor7*>(this)->actor_wait_state > 0) static_cast<_executeActor7*>(this)->actor_wait_state = 0;
		static_cast<_executeActor7*>(this)->ActorCallback< _executeActor7, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor7, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< _executeActor7, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< _executeActor7, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1cont3(Void const& _,int loopDepth) 
	{
															#line 4098 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_2 = store(restoreVersion, restore.restoreVersion().getOrThrow(tr));
															#line 4098 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor7*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 34303 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1loopBody1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1loopBody1cont3when1(__when_expr_2.get(), loopDepth); };
		static_cast<_executeActor7*>(this)->actor_wait_state = 3;
															#line 4098 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< _executeActor7, 2, Void >*>(static_cast<_executeActor7*>(this)));
															#line 34308 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont3(Void && _,int loopDepth) 
	{
															#line 4098 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_2 = store(restoreVersion, restore.restoreVersion().getOrThrow(tr));
															#line 4098 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor7*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 34319 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1loopBody1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1loopBody1cont3when1(__when_expr_2.get(), loopDepth); };
		static_cast<_executeActor7*>(this)->actor_wait_state = 3;
															#line 4098 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< _executeActor7, 2, Void >*>(static_cast<_executeActor7*>(this)));
															#line 34324 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<_executeActor7*>(this)->actor_wait_state > 0) static_cast<_executeActor7*>(this)->actor_wait_state = 0;
		static_cast<_executeActor7*>(this)->ActorCallback< _executeActor7, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor7, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< _executeActor7, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< _executeActor7, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1loopBody1cont4(Void const& _,int loopDepth) 
	{
															#line 4099 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_3 = store(ranges, restore.getRestoreRangesOrDefault(tr));
															#line 4099 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor7*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 34398 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1loopBody1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1loopBody1cont4when1(__when_expr_3.get(), loopDepth); };
		static_cast<_executeActor7*>(this)->actor_wait_state = 4;
															#line 4099 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< _executeActor7, 3, Void >*>(static_cast<_executeActor7*>(this)));
															#line 34403 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont4(Void && _,int loopDepth) 
	{
															#line 4099 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_3 = store(ranges, restore.getRestoreRangesOrDefault(tr));
															#line 4099 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor7*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 34414 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1loopBody1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1loopBody1cont4when1(__when_expr_3.get(), loopDepth); };
		static_cast<_executeActor7*>(this)->actor_wait_state = 4;
															#line 4099 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< _executeActor7, 3, Void >*>(static_cast<_executeActor7*>(this)));
															#line 34419 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont3when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont4(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont3when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont4(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<_executeActor7*>(this)->actor_wait_state > 0) static_cast<_executeActor7*>(this)->actor_wait_state = 0;
		static_cast<_executeActor7*>(this)->ActorCallback< _executeActor7, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor7, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont3when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< _executeActor7, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont3when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< _executeActor7, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1loopBody1cont5(Void const& _,int loopDepth) 
	{
															#line 4100 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_4 = store(logsOnly, restore.onlyApplyMutationLogs().getD(tr, Snapshot::False, false));
															#line 4100 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor7*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 34493 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1loopBody1Catch1(__when_expr_4.getError(), loopDepth); else return a_body1loopBody1cont5when1(__when_expr_4.get(), loopDepth); };
		static_cast<_executeActor7*>(this)->actor_wait_state = 5;
															#line 4100 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< _executeActor7, 4, Void >*>(static_cast<_executeActor7*>(this)));
															#line 34498 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont5(Void && _,int loopDepth) 
	{
															#line 4100 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_4 = store(logsOnly, restore.onlyApplyMutationLogs().getD(tr, Snapshot::False, false));
															#line 4100 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor7*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 34509 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1loopBody1Catch1(__when_expr_4.getError(), loopDepth); else return a_body1loopBody1cont5when1(__when_expr_4.get(), loopDepth); };
		static_cast<_executeActor7*>(this)->actor_wait_state = 5;
															#line 4100 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< _executeActor7, 4, Void >*>(static_cast<_executeActor7*>(this)));
															#line 34514 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont4when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont5(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont4when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont5(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<_executeActor7*>(this)->actor_wait_state > 0) static_cast<_executeActor7*>(this)->actor_wait_state = 0;
		static_cast<_executeActor7*>(this)->ActorCallback< _executeActor7, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor7, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1cont4when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< _executeActor7, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1cont4when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< _executeActor7, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 3);

	}
	int a_body1loopBody1cont6(Void const& _,int loopDepth) 
	{
															#line 4101 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_5 = store(inconsistentSnapshotOnly, restore.inconsistentSnapshotOnly().getD(tr, Snapshot::False, false));
															#line 4101 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor7*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 34588 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_5.isReady()) { if (__when_expr_5.isError()) return a_body1loopBody1Catch1(__when_expr_5.getError(), loopDepth); else return a_body1loopBody1cont6when1(__when_expr_5.get(), loopDepth); };
		static_cast<_executeActor7*>(this)->actor_wait_state = 6;
															#line 4101 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_5.addCallbackAndClear(static_cast<ActorCallback< _executeActor7, 5, Void >*>(static_cast<_executeActor7*>(this)));
															#line 34593 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont6(Void && _,int loopDepth) 
	{
															#line 4101 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_5 = store(inconsistentSnapshotOnly, restore.inconsistentSnapshotOnly().getD(tr, Snapshot::False, false));
															#line 4101 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor7*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 34604 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_5.isReady()) { if (__when_expr_5.isError()) return a_body1loopBody1Catch1(__when_expr_5.getError(), loopDepth); else return a_body1loopBody1cont6when1(__when_expr_5.get(), loopDepth); };
		static_cast<_executeActor7*>(this)->actor_wait_state = 6;
															#line 4101 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_5.addCallbackAndClear(static_cast<ActorCallback< _executeActor7, 5, Void >*>(static_cast<_executeActor7*>(this)));
															#line 34609 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont5when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont6(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont5when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont6(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose5() 
	{
		if (static_cast<_executeActor7*>(this)->actor_wait_state > 0) static_cast<_executeActor7*>(this)->actor_wait_state = 0;
		static_cast<_executeActor7*>(this)->ActorCallback< _executeActor7, 4, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor7, 4, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1loopBody1cont5when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_fire(ActorCallback< _executeActor7, 4, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1loopBody1cont5when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_error(ActorCallback< _executeActor7, 4, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 4);

	}
	int a_body1loopBody1cont7(Void const& _,int loopDepth) 
	{
															#line 4104 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_6 = taskBucket->keepRunning(tr, task);
															#line 4104 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor7*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 34683 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_6.isReady()) { if (__when_expr_6.isError()) return a_body1loopBody1Catch1(__when_expr_6.getError(), loopDepth); else return a_body1loopBody1cont7when1(__when_expr_6.get(), loopDepth); };
		static_cast<_executeActor7*>(this)->actor_wait_state = 7;
															#line 4104 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_6.addCallbackAndClear(static_cast<ActorCallback< _executeActor7, 6, Void >*>(static_cast<_executeActor7*>(this)));
															#line 34688 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont7(Void && _,int loopDepth) 
	{
															#line 4104 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_6 = taskBucket->keepRunning(tr, task);
															#line 4104 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor7*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 34699 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_6.isReady()) { if (__when_expr_6.isError()) return a_body1loopBody1Catch1(__when_expr_6.getError(), loopDepth); else return a_body1loopBody1cont7when1(__when_expr_6.get(), loopDepth); };
		static_cast<_executeActor7*>(this)->actor_wait_state = 7;
															#line 4104 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_6.addCallbackAndClear(static_cast<ActorCallback< _executeActor7, 6, Void >*>(static_cast<_executeActor7*>(this)));
															#line 34704 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont6when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont7(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont6when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont7(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose6() 
	{
		if (static_cast<_executeActor7*>(this)->actor_wait_state > 0) static_cast<_executeActor7*>(this)->actor_wait_state = 0;
		static_cast<_executeActor7*>(this)->ActorCallback< _executeActor7, 5, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor7, 5, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1loopBody1cont6when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_fire(ActorCallback< _executeActor7, 5, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1loopBody1cont6when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_error(ActorCallback< _executeActor7, 5, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 5);

	}
	int a_body1loopBody1cont8(Void const& _,int loopDepth) 
	{
															#line 4106 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<ERestoreState> __when_expr_7 = restore.stateEnum().getD(tr);
															#line 4106 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor7*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 34778 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_7.isReady()) { if (__when_expr_7.isError()) return a_body1loopBody1Catch1(__when_expr_7.getError(), loopDepth); else return a_body1loopBody1cont8when1(__when_expr_7.get(), loopDepth); };
		static_cast<_executeActor7*>(this)->actor_wait_state = 8;
															#line 4106 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_7.addCallbackAndClear(static_cast<ActorCallback< _executeActor7, 7, ERestoreState >*>(static_cast<_executeActor7*>(this)));
															#line 34783 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont8(Void && _,int loopDepth) 
	{
															#line 4106 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<ERestoreState> __when_expr_7 = restore.stateEnum().getD(tr);
															#line 4106 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor7*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 34794 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_7.isReady()) { if (__when_expr_7.isError()) return a_body1loopBody1Catch1(__when_expr_7.getError(), loopDepth); else return a_body1loopBody1cont8when1(__when_expr_7.get(), loopDepth); };
		static_cast<_executeActor7*>(this)->actor_wait_state = 8;
															#line 4106 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_7.addCallbackAndClear(static_cast<ActorCallback< _executeActor7, 7, ERestoreState >*>(static_cast<_executeActor7*>(this)));
															#line 34799 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont7when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont8(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont7when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont8(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose7() 
	{
		if (static_cast<_executeActor7*>(this)->actor_wait_state > 0) static_cast<_executeActor7*>(this)->actor_wait_state = 0;
		static_cast<_executeActor7*>(this)->ActorCallback< _executeActor7, 6, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor7, 6, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1loopBody1cont7when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 6);

	}
	void a_callback_fire(ActorCallback< _executeActor7, 6, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1loopBody1cont7when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 6);

	}
	void a_callback_error(ActorCallback< _executeActor7, 6, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 6);

	}
	int a_body1loopBody1cont9(ERestoreState const& oldState,int loopDepth) 
	{
															#line 4107 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (oldState != ERestoreState::QUEUED && oldState != ERestoreState::STARTING)
															#line 34871 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 4108 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_8 = restore.logError(cx, restore_error(), format("StartFullRestore: Encountered unexpected state(%d)", oldState), THIS);
															#line 4108 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_executeActor7*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 34877 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_8.isReady()) { if (__when_expr_8.isError()) return a_body1loopBody1Catch1(__when_expr_8.getError(), loopDepth); else return a_body1loopBody1cont9when1(__when_expr_8.get(), loopDepth); };
			static_cast<_executeActor7*>(this)->actor_wait_state = 9;
															#line 4108 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_8.addCallbackAndClear(static_cast<ActorCallback< _executeActor7, 8, Void >*>(static_cast<_executeActor7*>(this)));
															#line 34882 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1loopBody1cont10(loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont9(ERestoreState && oldState,int loopDepth) 
	{
															#line 4107 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (oldState != ERestoreState::QUEUED && oldState != ERestoreState::STARTING)
															#line 34896 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 4108 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_8 = restore.logError(cx, restore_error(), format("StartFullRestore: Encountered unexpected state(%d)", oldState), THIS);
															#line 4108 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_executeActor7*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 34902 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_8.isReady()) { if (__when_expr_8.isError()) return a_body1loopBody1Catch1(__when_expr_8.getError(), loopDepth); else return a_body1loopBody1cont9when1(__when_expr_8.get(), loopDepth); };
			static_cast<_executeActor7*>(this)->actor_wait_state = 9;
															#line 4108 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_8.addCallbackAndClear(static_cast<ActorCallback< _executeActor7, 8, Void >*>(static_cast<_executeActor7*>(this)));
															#line 34907 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1loopBody1cont10(loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont8when1(ERestoreState const& oldState,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont9(oldState, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont8when1(ERestoreState && oldState,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont9(std::move(oldState), loopDepth);

		return loopDepth;
	}
	void a_exitChoose8() 
	{
		if (static_cast<_executeActor7*>(this)->actor_wait_state > 0) static_cast<_executeActor7*>(this)->actor_wait_state = 0;
		static_cast<_executeActor7*>(this)->ActorCallback< _executeActor7, 7, ERestoreState >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor7, 7, ERestoreState >*,ERestoreState const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 7);
		a_exitChoose8();
		try {
			a_body1loopBody1cont8when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 7);

	}
	void a_callback_fire(ActorCallback< _executeActor7, 7, ERestoreState >*,ERestoreState && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 7);
		a_exitChoose8();
		try {
			a_body1loopBody1cont8when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 7);

	}
	void a_callback_error(ActorCallback< _executeActor7, 7, ERestoreState >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 7);
		a_exitChoose8();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 7);

	}
	int a_body1loopBody1cont10(int loopDepth) 
	{
															#line 4114 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		restore.stateEnum().set(tr, ERestoreState::STARTING);
															#line 4115 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		restore.fileSet().clear(tr);
															#line 4116 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		restore.fileBlockCount().clear(tr);
															#line 4117 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		restore.fileCount().clear(tr);
															#line 4118 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Reference<IBackupContainer>> __when_expr_9 = restore.sourceContainer().getOrThrow(tr);
															#line 4118 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor7*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 34994 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_9.isReady()) { if (__when_expr_9.isError()) return a_body1loopBody1Catch1(__when_expr_9.getError(), loopDepth); else return a_body1loopBody1cont10when1(__when_expr_9.get(), loopDepth); };
		static_cast<_executeActor7*>(this)->actor_wait_state = 10;
															#line 4118 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_9.addCallbackAndClear(static_cast<ActorCallback< _executeActor7, 9, Reference<IBackupContainer> >*>(static_cast<_executeActor7*>(this)));
															#line 34999 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont11(Void const& _,int loopDepth) 
	{
															#line 4112 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<_executeActor7*>(this)->SAV<Void>::futures) { (void)(Void()); this->~_executeActor7State(); static_cast<_executeActor7*>(this)->destroy(); return 0; }
															#line 35008 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<_executeActor7*>(this)->SAV< Void >::value()) Void(Void());
		this->~_executeActor7State();
		static_cast<_executeActor7*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1cont11(Void && _,int loopDepth) 
	{
															#line 4112 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<_executeActor7*>(this)->SAV<Void>::futures) { (void)(Void()); this->~_executeActor7State(); static_cast<_executeActor7*>(this)->destroy(); return 0; }
															#line 35020 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<_executeActor7*>(this)->SAV< Void >::value()) Void(Void());
		this->~_executeActor7State();
		static_cast<_executeActor7*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1cont9when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont11(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont9when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont11(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose9() 
	{
		if (static_cast<_executeActor7*>(this)->actor_wait_state > 0) static_cast<_executeActor7*>(this)->actor_wait_state = 0;
		static_cast<_executeActor7*>(this)->ActorCallback< _executeActor7, 8, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor7, 8, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 8);
		a_exitChoose9();
		try {
			a_body1loopBody1cont9when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 8);

	}
	void a_callback_fire(ActorCallback< _executeActor7, 8, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 8);
		a_exitChoose9();
		try {
			a_body1loopBody1cont9when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 8);

	}
	void a_callback_error(ActorCallback< _executeActor7, 8, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 8);
		a_exitChoose9();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 8);

	}
	int a_body1loopBody1cont10cont1(Reference<IBackupContainer> const& _bc,int loopDepth) 
	{
															#line 4119 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		bc = getBackupContainerWithProxy(_bc);
															#line 4121 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_10 = tr->commit();
															#line 4121 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor7*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 35099 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_10.isReady()) { if (__when_expr_10.isError()) return a_body1loopBody1Catch1(__when_expr_10.getError(), loopDepth); else return a_body1loopBody1cont10cont1when1(__when_expr_10.get(), loopDepth); };
		static_cast<_executeActor7*>(this)->actor_wait_state = 11;
															#line 4121 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_10.addCallbackAndClear(static_cast<ActorCallback< _executeActor7, 10, Void >*>(static_cast<_executeActor7*>(this)));
															#line 35104 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont10cont1(Reference<IBackupContainer> && _bc,int loopDepth) 
	{
															#line 4119 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		bc = getBackupContainerWithProxy(_bc);
															#line 4121 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_10 = tr->commit();
															#line 4121 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor7*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 35117 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_10.isReady()) { if (__when_expr_10.isError()) return a_body1loopBody1Catch1(__when_expr_10.getError(), loopDepth); else return a_body1loopBody1cont10cont1when1(__when_expr_10.get(), loopDepth); };
		static_cast<_executeActor7*>(this)->actor_wait_state = 11;
															#line 4121 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_10.addCallbackAndClear(static_cast<ActorCallback< _executeActor7, 10, Void >*>(static_cast<_executeActor7*>(this)));
															#line 35122 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont10when1(Reference<IBackupContainer> const& _bc,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont10cont1(_bc, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont10when1(Reference<IBackupContainer> && _bc,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont10cont1(std::move(_bc), loopDepth);

		return loopDepth;
	}
	void a_exitChoose10() 
	{
		if (static_cast<_executeActor7*>(this)->actor_wait_state > 0) static_cast<_executeActor7*>(this)->actor_wait_state = 0;
		static_cast<_executeActor7*>(this)->ActorCallback< _executeActor7, 9, Reference<IBackupContainer> >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor7, 9, Reference<IBackupContainer> >*,Reference<IBackupContainer> const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 9);
		a_exitChoose10();
		try {
			a_body1loopBody1cont10when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 9);

	}
	void a_callback_fire(ActorCallback< _executeActor7, 9, Reference<IBackupContainer> >*,Reference<IBackupContainer> && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 9);
		a_exitChoose10();
		try {
			a_body1loopBody1cont10when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 9);

	}
	void a_callback_error(ActorCallback< _executeActor7, 9, Reference<IBackupContainer> >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 9);
		a_exitChoose10();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 9);

	}
	int a_body1loopBody1cont10cont2(Void const& _,int loopDepth) 
	{
		return a_body1break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1loopBody1cont10cont2(Void && _,int loopDepth) 
	{
		return a_body1break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1loopBody1cont10cont1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont10cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont10cont1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont10cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose11() 
	{
		if (static_cast<_executeActor7*>(this)->actor_wait_state > 0) static_cast<_executeActor7*>(this)->actor_wait_state = 0;
		static_cast<_executeActor7*>(this)->ActorCallback< _executeActor7, 10, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor7, 10, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 10);
		a_exitChoose11();
		try {
			a_body1loopBody1cont10cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 10);

	}
	void a_callback_fire(ActorCallback< _executeActor7, 10, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 10);
		a_exitChoose11();
		try {
			a_body1loopBody1cont10cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 10);

	}
	void a_callback_error(ActorCallback< _executeActor7, 10, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 10);
		a_exitChoose11();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 10);

	}
	int a_body1loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose12() 
	{
		if (static_cast<_executeActor7*>(this)->actor_wait_state > 0) static_cast<_executeActor7*>(this)->actor_wait_state = 0;
		static_cast<_executeActor7*>(this)->ActorCallback< _executeActor7, 11, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor7, 11, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 11);
		a_exitChoose12();
		try {
			a_body1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 11);

	}
	void a_callback_fire(ActorCallback< _executeActor7, 11, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 11);
		a_exitChoose12();
		try {
			a_body1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 11);

	}
	void a_callback_error(ActorCallback< _executeActor7, 11, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 11);
		a_exitChoose12();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 11);

	}
	int a_body1cont2(int loopDepth) 
	{
															#line 4149 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		firstConsistentVersion = invalidVersion;
															#line 4150 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (beginVersion == invalidVersion)
															#line 35346 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 4151 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			beginVersion = 0;
															#line 35350 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 4153 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		keyRangesFilter = Standalone<VectorRef<KeyRangeRef>>();
															#line 4154 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		for( auto const& r : ranges ) {
															#line 4155 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			keyRangesFilter.push_back_deep(keyRangesFilter.arena(), KeyRangeRef(r));
															#line 35358 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 4157 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Optional<RestorableFileSet>> __when_expr_15 = bc->getRestoreSet(restoreVersion, keyRangesFilter, logsOnly, beginVersion);
															#line 4157 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor7*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 35364 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_15.isReady()) { if (__when_expr_15.isError()) return a_body1Catch1(__when_expr_15.getError(), loopDepth); else return a_body1cont2when1(__when_expr_15.get(), loopDepth); };
		static_cast<_executeActor7*>(this)->actor_wait_state = 16;
															#line 4157 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_15.addCallbackAndClear(static_cast<ActorCallback< _executeActor7, 15, Optional<RestorableFileSet> >*>(static_cast<_executeActor7*>(this)));
															#line 35369 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1cont1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1(int loopDepth) 
	{
		try {
															#line 4131 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 4132 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 4133 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Version> __when_expr_12 = tr->getReadVersion();
															#line 4133 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_executeActor7*>(this)->actor_wait_state < 0) return a_body1cont1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 35392 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_12.isReady()) { if (__when_expr_12.isError()) return a_body1cont1loopBody1Catch1(__when_expr_12.getError(), loopDepth); else return a_body1cont1loopBody1when1(__when_expr_12.get(), loopDepth); };
			static_cast<_executeActor7*>(this)->actor_wait_state = 13;
															#line 4133 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_12.addCallbackAndClear(static_cast<ActorCallback< _executeActor7, 12, Version >*>(static_cast<_executeActor7*>(this)));
															#line 35397 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1cont1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1cont1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont1break1(int loopDepth) 
	{
		try {
			return a_body1cont2(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1cont1loopHead1(0);

		return loopDepth;
	}
	int a_body1cont1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 4145 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_14 = tr->onError(e);
															#line 4145 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_executeActor7*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 35434 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_14.isReady()) { if (__when_expr_14.isError()) return a_body1Catch1(__when_expr_14.getError(), std::max(0, loopDepth - 1)); else return a_body1cont1loopBody1Catch1when1(__when_expr_14.get(), loopDepth); };
			static_cast<_executeActor7*>(this)->actor_wait_state = 15;
															#line 4145 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_14.addCallbackAndClear(static_cast<ActorCallback< _executeActor7, 14, Void >*>(static_cast<_executeActor7*>(this)));
															#line 35439 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1cont1loopBody1cont2(Version const& destVersion,int loopDepth) 
	{
															#line 4134 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent("FileRestoreVersionUpgrade") .detail("RestoreVersion", restoreVersion) .detail("Dest", destVersion);
															#line 4137 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (destVersion <= restoreVersion)
															#line 35456 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 4138 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			TEST(true);
															#line 4139 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->set(minRequiredCommitVersionKey, BinaryWriter::toValue(restoreVersion + 1, Unversioned()));
															#line 4140 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_13 = tr->commit();
															#line 4140 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_executeActor7*>(this)->actor_wait_state < 0) return a_body1cont1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 35466 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_13.isReady()) { if (__when_expr_13.isError()) return a_body1cont1loopBody1Catch1(__when_expr_13.getError(), loopDepth); else return a_body1cont1loopBody1cont2when1(__when_expr_13.get(), loopDepth); };
			static_cast<_executeActor7*>(this)->actor_wait_state = 14;
															#line 4140 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_13.addCallbackAndClear(static_cast<ActorCallback< _executeActor7, 13, Void >*>(static_cast<_executeActor7*>(this)));
															#line 35471 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			return a_body1cont1break1(loopDepth==0?0:loopDepth-1); // break
		}

		return loopDepth;
	}
	int a_body1cont1loopBody1cont2(Version && destVersion,int loopDepth) 
	{
															#line 4134 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent("FileRestoreVersionUpgrade") .detail("RestoreVersion", restoreVersion) .detail("Dest", destVersion);
															#line 4137 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (destVersion <= restoreVersion)
															#line 35487 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 4138 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			TEST(true);
															#line 4139 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->set(minRequiredCommitVersionKey, BinaryWriter::toValue(restoreVersion + 1, Unversioned()));
															#line 4140 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_13 = tr->commit();
															#line 4140 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_executeActor7*>(this)->actor_wait_state < 0) return a_body1cont1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 35497 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_13.isReady()) { if (__when_expr_13.isError()) return a_body1cont1loopBody1Catch1(__when_expr_13.getError(), loopDepth); else return a_body1cont1loopBody1cont2when1(__when_expr_13.get(), loopDepth); };
			static_cast<_executeActor7*>(this)->actor_wait_state = 14;
															#line 4140 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_13.addCallbackAndClear(static_cast<ActorCallback< _executeActor7, 13, Void >*>(static_cast<_executeActor7*>(this)));
															#line 35502 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			return a_body1cont1break1(loopDepth==0?0:loopDepth-1); // break
		}

		return loopDepth;
	}
	int a_body1cont1loopBody1when1(Version const& destVersion,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont2(destVersion, loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1when1(Version && destVersion,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont2(std::move(destVersion), loopDepth);

		return loopDepth;
	}
	void a_exitChoose13() 
	{
		if (static_cast<_executeActor7*>(this)->actor_wait_state > 0) static_cast<_executeActor7*>(this)->actor_wait_state = 0;
		static_cast<_executeActor7*>(this)->ActorCallback< _executeActor7, 12, Version >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor7, 12, Version >*,Version const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 12);
		a_exitChoose13();
		try {
			a_body1cont1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 12);

	}
	void a_callback_fire(ActorCallback< _executeActor7, 12, Version >*,Version && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 12);
		a_exitChoose13();
		try {
			a_body1cont1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 12);

	}
	void a_callback_error(ActorCallback< _executeActor7, 12, Version >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 12);
		a_exitChoose13();
		try {
			a_body1cont1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 12);

	}
	int a_body1cont1loopBody1cont3(int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont6(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont4(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont4(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont4(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont4(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose14() 
	{
		if (static_cast<_executeActor7*>(this)->actor_wait_state > 0) static_cast<_executeActor7*>(this)->actor_wait_state = 0;
		static_cast<_executeActor7*>(this)->ActorCallback< _executeActor7, 13, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor7, 13, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 13);
		a_exitChoose14();
		try {
			a_body1cont1loopBody1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 13);

	}
	void a_callback_fire(ActorCallback< _executeActor7, 13, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 13);
		a_exitChoose14();
		try {
			a_body1cont1loopBody1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 13);

	}
	void a_callback_error(ActorCallback< _executeActor7, 13, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 13);
		a_exitChoose14();
		try {
			a_body1cont1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 13);

	}
	int a_body1cont1loopBody1cont6(int loopDepth) 
	{
		try {
			loopDepth = a_body1cont1loopBody1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1cont1loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose15() 
	{
		if (static_cast<_executeActor7*>(this)->actor_wait_state > 0) static_cast<_executeActor7*>(this)->actor_wait_state = 0;
		static_cast<_executeActor7*>(this)->ActorCallback< _executeActor7, 14, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor7, 14, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 14);
		a_exitChoose15();
		try {
			a_body1cont1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 14);

	}
	void a_callback_fire(ActorCallback< _executeActor7, 14, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 14);
		a_exitChoose15();
		try {
			a_body1cont1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 14);

	}
	void a_callback_error(ActorCallback< _executeActor7, 14, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 14);
		a_exitChoose15();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 14);

	}
	int a_body1cont3(int loopDepth) 
	{
															#line 4159 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!restorable.present())
															#line 35748 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 4160 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			return a_body1Catch1(restore_missing_data(), loopDepth);
															#line 35752 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 4164 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		files = std::vector<RestoreConfig::RestoreFile>();
															#line 4165 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!logsOnly)
															#line 35758 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 4166 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			beginVersion = restorable.get().snapshot.beginVersion;
															#line 4167 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (!inconsistentSnapshotOnly)
															#line 35764 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			{
															#line 4168 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				for( const RangeFile& f : restorable.get().ranges ) {
															#line 4169 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
					files.push_back({ f.version, f.fileName, true, f.blockSize, f.fileSize });
															#line 4172 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
					firstConsistentVersion = std::max(firstConsistentVersion, f.version);
															#line 35772 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				}
			}
			else
			{
															#line 4175 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				for(int i = 0;i < restorable.get().ranges.size();++i) {
															#line 4176 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
					const RangeFile& f = restorable.get().ranges[i];
															#line 4177 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
					files.push_back({ f.version, f.fileName, true, f.blockSize, f.fileSize });
															#line 4180 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
					if (i != 0 && f.version != firstConsistentVersion)
															#line 35785 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
					{
															#line 4181 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
						firstConsistentVersion = invalidVersion;
															#line 35789 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
					}
					else
					{
															#line 4183 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
						firstConsistentVersion = f.version;
															#line 35795 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
					}
				}
			}
		}
		else
		{
															#line 4189 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			firstConsistentVersion = beginVersion;
															#line 35804 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 4191 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!inconsistentSnapshotOnly)
															#line 35808 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 4192 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			for( const LogFile& f : restorable.get().logs ) {
															#line 4193 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				files.push_back({ f.beginVersion, f.fileName, false, f.blockSize, f.fileSize, f.endVersion });
															#line 35814 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			}
		}
															#line 4197 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		Params.firstVersion().set(task, beginVersion);
															#line 4199 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr->reset();
															#line 4200 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		;
															#line 35823 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont3loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1cont2when1(Optional<RestorableFileSet> const& __restorable,int loopDepth) 
	{
															#line 4157 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		restorable = __restorable;
															#line 35832 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1cont2when1(Optional<RestorableFileSet> && __restorable,int loopDepth) 
	{
		restorable = std::move(__restorable);
		loopDepth = a_body1cont3(loopDepth);

		return loopDepth;
	}
	void a_exitChoose16() 
	{
		if (static_cast<_executeActor7*>(this)->actor_wait_state > 0) static_cast<_executeActor7*>(this)->actor_wait_state = 0;
		static_cast<_executeActor7*>(this)->ActorCallback< _executeActor7, 15, Optional<RestorableFileSet> >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor7, 15, Optional<RestorableFileSet> >*,Optional<RestorableFileSet> const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 15);
		a_exitChoose16();
		try {
			a_body1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 15);

	}
	void a_callback_fire(ActorCallback< _executeActor7, 15, Optional<RestorableFileSet> >*,Optional<RestorableFileSet> && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 15);
		a_exitChoose16();
		try {
			a_body1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 15);

	}
	void a_callback_error(ActorCallback< _executeActor7, 15, Optional<RestorableFileSet> >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 15);
		a_exitChoose16();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 15);

	}
	int a_body1cont6(int loopDepth) 
	{
															#line 4212 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		start = files.begin();
															#line 4213 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		end = files.end();
															#line 4215 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr->reset();
															#line 4216 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		;
															#line 35905 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont6loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1cont3loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1(int loopDepth) 
	{
		try {
															#line 4202 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 4203 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 4204 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			restore.firstConsistentVersion().set(tr, firstConsistentVersion);
															#line 4205 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_16 = tr->commit();
															#line 4205 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_executeActor7*>(this)->actor_wait_state < 0) return a_body1cont3loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 35930 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_16.isReady()) { if (__when_expr_16.isError()) return a_body1cont3loopBody1Catch1(__when_expr_16.getError(), loopDepth); else return a_body1cont3loopBody1when1(__when_expr_16.get(), loopDepth); };
			static_cast<_executeActor7*>(this)->actor_wait_state = 17;
															#line 4205 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_16.addCallbackAndClear(static_cast<ActorCallback< _executeActor7, 16, Void >*>(static_cast<_executeActor7*>(this)));
															#line 35935 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1cont3loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1cont3loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont3break1(int loopDepth) 
	{
		try {
			return a_body1cont6(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont3loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1cont3loopHead1(0);

		return loopDepth;
	}
	int a_body1cont3loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 4208 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_17 = tr->onError(e);
															#line 4208 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_executeActor7*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 35972 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_17.isReady()) { if (__when_expr_17.isError()) return a_body1Catch1(__when_expr_17.getError(), std::max(0, loopDepth - 1)); else return a_body1cont3loopBody1Catch1when1(__when_expr_17.get(), loopDepth); };
			static_cast<_executeActor7*>(this)->actor_wait_state = 18;
															#line 4208 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_17.addCallbackAndClear(static_cast<ActorCallback< _executeActor7, 17, Void >*>(static_cast<_executeActor7*>(this)));
															#line 35977 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1cont3loopBody1cont2(Void const& _,int loopDepth) 
	{
		return a_body1cont3break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1cont3loopBody1cont2(Void && _,int loopDepth) 
	{
		return a_body1cont3break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1cont3loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose17() 
	{
		if (static_cast<_executeActor7*>(this)->actor_wait_state > 0) static_cast<_executeActor7*>(this)->actor_wait_state = 0;
		static_cast<_executeActor7*>(this)->ActorCallback< _executeActor7, 16, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor7, 16, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 16);
		a_exitChoose17();
		try {
			a_body1cont3loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont3loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont3loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 16);

	}
	void a_callback_fire(ActorCallback< _executeActor7, 16, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 16);
		a_exitChoose17();
		try {
			a_body1cont3loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont3loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont3loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 16);

	}
	void a_callback_error(ActorCallback< _executeActor7, 16, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 16);
		a_exitChoose17();
		try {
			a_body1cont3loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont3loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont3loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 16);

	}
	int a_body1cont3loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose18() 
	{
		if (static_cast<_executeActor7*>(this)->actor_wait_state > 0) static_cast<_executeActor7*>(this)->actor_wait_state = 0;
		static_cast<_executeActor7*>(this)->ActorCallback< _executeActor7, 17, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor7, 17, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 17);
		a_exitChoose18();
		try {
			a_body1cont3loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 17);

	}
	void a_callback_fire(ActorCallback< _executeActor7, 17, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 17);
		a_exitChoose18();
		try {
			a_body1cont3loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 17);

	}
	void a_callback_error(ActorCallback< _executeActor7, 17, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 17);
		a_exitChoose18();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 17);

	}
	int a_body1cont18(int loopDepth) 
	{
															#line 4254 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<_executeActor7*>(this)->SAV<Void>::futures) { (void)(Void()); this->~_executeActor7State(); static_cast<_executeActor7*>(this)->destroy(); return 0; }
															#line 36142 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<_executeActor7*>(this)->SAV< Void >::value()) Void(Void());
		this->~_executeActor7State();
		static_cast<_executeActor7*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont6loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1cont6loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1cont6loopBody1(int loopDepth) 
	{
															#line 4216 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!(start != end))
															#line 36161 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
			return a_body1cont6break1(loopDepth==0?0:loopDepth-1); // break
		}
		try {
															#line 4218 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 4219 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 4221 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_18 = taskBucket->keepRunning(tr, task);
															#line 4221 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_executeActor7*>(this)->actor_wait_state < 0) return a_body1cont6loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 36174 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_18.isReady()) { if (__when_expr_18.isError()) return a_body1cont6loopBody1Catch1(__when_expr_18.getError(), loopDepth); else return a_body1cont6loopBody1when1(__when_expr_18.get(), loopDepth); };
			static_cast<_executeActor7*>(this)->actor_wait_state = 19;
															#line 4221 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_18.addCallbackAndClear(static_cast<ActorCallback< _executeActor7, 18, Void >*>(static_cast<_executeActor7*>(this)));
															#line 36179 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1cont6loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1cont6loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont6break1(int loopDepth) 
	{
		try {
			return a_body1cont18(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont6loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1cont6loopHead1(0);

		return loopDepth;
	}
	int a_body1cont6loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 4250 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_20 = tr->onError(e);
															#line 4250 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_executeActor7*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 36216 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_20.isReady()) { if (__when_expr_20.isError()) return a_body1Catch1(__when_expr_20.getError(), std::max(0, loopDepth - 1)); else return a_body1cont6loopBody1Catch1when1(__when_expr_20.get(), loopDepth); };
			static_cast<_executeActor7*>(this)->actor_wait_state = 21;
															#line 4250 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_20.addCallbackAndClear(static_cast<ActorCallback< _executeActor7, 20, Void >*>(static_cast<_executeActor7*>(this)));
															#line 36221 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1cont6loopBody1cont3(Void const& _,int loopDepth) 
	{
															#line 4223 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		i = start;
															#line 4225 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		txBytes = 0;
															#line 4226 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		nFileBlocks = 0;
															#line 4227 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		nFiles = 0;
															#line 4228 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		auto fileSet = restore.fileSet();
															#line 4229 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		for(;i != end && txBytes < 1e6;++i) {
															#line 4230 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			txBytes += fileSet.insert(tr, *i);
															#line 4231 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			nFileBlocks += (i->fileSize + i->blockSize - 1) / i->blockSize;
															#line 4232 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			++nFiles;
															#line 36252 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 4235 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		restore.fileCount().atomicOp(tr, nFiles, MutationRef::Type::AddValue);
															#line 4236 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		restore.fileBlockCount().atomicOp(tr, nFileBlocks, MutationRef::Type::AddValue);
															#line 4238 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_19 = tr->commit();
															#line 4238 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor7*>(this)->actor_wait_state < 0) return a_body1cont6loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 36262 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_19.isReady()) { if (__when_expr_19.isError()) return a_body1cont6loopBody1Catch1(__when_expr_19.getError(), loopDepth); else return a_body1cont6loopBody1cont3when1(__when_expr_19.get(), loopDepth); };
		static_cast<_executeActor7*>(this)->actor_wait_state = 20;
															#line 4238 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_19.addCallbackAndClear(static_cast<ActorCallback< _executeActor7, 19, Void >*>(static_cast<_executeActor7*>(this)));
															#line 36267 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont6loopBody1cont3(Void && _,int loopDepth) 
	{
															#line 4223 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		i = start;
															#line 4225 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		txBytes = 0;
															#line 4226 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		nFileBlocks = 0;
															#line 4227 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		nFiles = 0;
															#line 4228 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		auto fileSet = restore.fileSet();
															#line 4229 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		for(;i != end && txBytes < 1e6;++i) {
															#line 4230 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			txBytes += fileSet.insert(tr, *i);
															#line 4231 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			nFileBlocks += (i->fileSize + i->blockSize - 1) / i->blockSize;
															#line 4232 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			++nFiles;
															#line 36292 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 4235 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		restore.fileCount().atomicOp(tr, nFiles, MutationRef::Type::AddValue);
															#line 4236 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		restore.fileBlockCount().atomicOp(tr, nFileBlocks, MutationRef::Type::AddValue);
															#line 4238 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_19 = tr->commit();
															#line 4238 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_executeActor7*>(this)->actor_wait_state < 0) return a_body1cont6loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 36302 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_19.isReady()) { if (__when_expr_19.isError()) return a_body1cont6loopBody1Catch1(__when_expr_19.getError(), loopDepth); else return a_body1cont6loopBody1cont3when1(__when_expr_19.get(), loopDepth); };
		static_cast<_executeActor7*>(this)->actor_wait_state = 20;
															#line 4238 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_19.addCallbackAndClear(static_cast<ActorCallback< _executeActor7, 19, Void >*>(static_cast<_executeActor7*>(this)));
															#line 36307 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont6loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont6loopBody1cont3(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont6loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont6loopBody1cont3(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose19() 
	{
		if (static_cast<_executeActor7*>(this)->actor_wait_state > 0) static_cast<_executeActor7*>(this)->actor_wait_state = 0;
		static_cast<_executeActor7*>(this)->ActorCallback< _executeActor7, 18, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor7, 18, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 18);
		a_exitChoose19();
		try {
			a_body1cont6loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont6loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont6loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 18);

	}
	void a_callback_fire(ActorCallback< _executeActor7, 18, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 18);
		a_exitChoose19();
		try {
			a_body1cont6loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont6loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont6loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 18);

	}
	void a_callback_error(ActorCallback< _executeActor7, 18, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 18);
		a_exitChoose19();
		try {
			a_body1cont6loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont6loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont6loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 18);

	}
	int a_body1cont6loopBody1cont4(Void const& _,int loopDepth) 
	{
															#line 4240 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent("FileRestoreLoadedFiles") .detail("RestoreUID", restore.getUid()) .detail("FileCount", nFiles) .detail("FileBlockCount", nFileBlocks) .detail("TransactionBytes", txBytes) .detail("TaskInstance", THIS_ADDR);
															#line 4247 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		start = i;
															#line 4248 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr->reset();
															#line 36383 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont6loopBody1cont7(loopDepth);

		return loopDepth;
	}
	int a_body1cont6loopBody1cont4(Void && _,int loopDepth) 
	{
															#line 4240 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent("FileRestoreLoadedFiles") .detail("RestoreUID", restore.getUid()) .detail("FileCount", nFiles) .detail("FileBlockCount", nFileBlocks) .detail("TransactionBytes", txBytes) .detail("TaskInstance", THIS_ADDR);
															#line 4247 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		start = i;
															#line 4248 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr->reset();
															#line 36396 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont6loopBody1cont7(loopDepth);

		return loopDepth;
	}
	int a_body1cont6loopBody1cont3when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont6loopBody1cont4(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont6loopBody1cont3when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont6loopBody1cont4(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose20() 
	{
		if (static_cast<_executeActor7*>(this)->actor_wait_state > 0) static_cast<_executeActor7*>(this)->actor_wait_state = 0;
		static_cast<_executeActor7*>(this)->ActorCallback< _executeActor7, 19, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor7, 19, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 19);
		a_exitChoose20();
		try {
			a_body1cont6loopBody1cont3when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont6loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont6loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 19);

	}
	void a_callback_fire(ActorCallback< _executeActor7, 19, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 19);
		a_exitChoose20();
		try {
			a_body1cont6loopBody1cont3when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont6loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont6loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 19);

	}
	void a_callback_error(ActorCallback< _executeActor7, 19, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 19);
		a_exitChoose20();
		try {
			a_body1cont6loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont6loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont6loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 19);

	}
	int a_body1cont6loopBody1cont7(int loopDepth) 
	{
		try {
			loopDepth = a_body1cont6loopBody1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1cont6loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont6loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont6loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont6loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont6loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont6loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont6loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont6loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose21() 
	{
		if (static_cast<_executeActor7*>(this)->actor_wait_state > 0) static_cast<_executeActor7*>(this)->actor_wait_state = 0;
		static_cast<_executeActor7*>(this)->ActorCallback< _executeActor7, 20, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _executeActor7, 20, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 20);
		a_exitChoose21();
		try {
			a_body1cont6loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 20);

	}
	void a_callback_fire(ActorCallback< _executeActor7, 20, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 20);
		a_exitChoose21();
		try {
			a_body1cont6loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 20);

	}
	void a_callback_error(ActorCallback< _executeActor7, 20, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), 20);
		a_exitChoose21();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), 20);

	}
															#line 4077 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Database cx;
															#line 4077 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskBucket> taskBucket;
															#line 4077 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<FutureBucket> futureBucket;
															#line 4077 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<Task> task;
															#line 4081 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 4082 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	RestoreConfig restore;
															#line 4083 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Version restoreVersion;
															#line 4084 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Version beginVersion;
															#line 4085 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<IBackupContainer> bc;
															#line 4086 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	std::vector<KeyRange> ranges;
															#line 4087 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	bool logsOnly;
															#line 4088 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	bool inconsistentSnapshotOnly;
															#line 4149 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Version firstConsistentVersion;
															#line 4153 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Standalone<VectorRef<KeyRangeRef>> keyRangesFilter;
															#line 4157 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Optional<RestorableFileSet> restorable;
															#line 4164 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	std::vector<RestoreConfig::RestoreFile> files;
															#line 4212 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	std::vector<RestoreConfig::RestoreFile>::iterator start;
															#line 4213 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	std::vector<RestoreConfig::RestoreFile>::iterator end;
															#line 4223 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	std::vector<RestoreConfig::RestoreFile>::iterator i;
															#line 4225 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int txBytes;
															#line 4226 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int nFileBlocks;
															#line 4227 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int nFiles;
															#line 36596 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via _execute()
															#line 4077 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class _executeActor7 final : public Actor<Void>, public ActorCallback< _executeActor7, 0, Void >, public ActorCallback< _executeActor7, 1, Void >, public ActorCallback< _executeActor7, 2, Void >, public ActorCallback< _executeActor7, 3, Void >, public ActorCallback< _executeActor7, 4, Void >, public ActorCallback< _executeActor7, 5, Void >, public ActorCallback< _executeActor7, 6, Void >, public ActorCallback< _executeActor7, 7, ERestoreState >, public ActorCallback< _executeActor7, 8, Void >, public ActorCallback< _executeActor7, 9, Reference<IBackupContainer> >, public ActorCallback< _executeActor7, 10, Void >, public ActorCallback< _executeActor7, 11, Void >, public ActorCallback< _executeActor7, 12, Version >, public ActorCallback< _executeActor7, 13, Void >, public ActorCallback< _executeActor7, 14, Void >, public ActorCallback< _executeActor7, 15, Optional<RestorableFileSet> >, public ActorCallback< _executeActor7, 16, Void >, public ActorCallback< _executeActor7, 17, Void >, public ActorCallback< _executeActor7, 18, Void >, public ActorCallback< _executeActor7, 19, Void >, public ActorCallback< _executeActor7, 20, Void >, public FastAllocated<_executeActor7>, public _executeActor7State<_executeActor7> {
															#line 36601 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<_executeActor7>::operator new;
	using FastAllocated<_executeActor7>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< _executeActor7, 0, Void >;
friend struct ActorCallback< _executeActor7, 1, Void >;
friend struct ActorCallback< _executeActor7, 2, Void >;
friend struct ActorCallback< _executeActor7, 3, Void >;
friend struct ActorCallback< _executeActor7, 4, Void >;
friend struct ActorCallback< _executeActor7, 5, Void >;
friend struct ActorCallback< _executeActor7, 6, Void >;
friend struct ActorCallback< _executeActor7, 7, ERestoreState >;
friend struct ActorCallback< _executeActor7, 8, Void >;
friend struct ActorCallback< _executeActor7, 9, Reference<IBackupContainer> >;
friend struct ActorCallback< _executeActor7, 10, Void >;
friend struct ActorCallback< _executeActor7, 11, Void >;
friend struct ActorCallback< _executeActor7, 12, Version >;
friend struct ActorCallback< _executeActor7, 13, Void >;
friend struct ActorCallback< _executeActor7, 14, Void >;
friend struct ActorCallback< _executeActor7, 15, Optional<RestorableFileSet> >;
friend struct ActorCallback< _executeActor7, 16, Void >;
friend struct ActorCallback< _executeActor7, 17, Void >;
friend struct ActorCallback< _executeActor7, 18, Void >;
friend struct ActorCallback< _executeActor7, 19, Void >;
friend struct ActorCallback< _executeActor7, 20, Void >;
															#line 4077 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	_executeActor7(Database const& cx,Reference<TaskBucket> const& taskBucket,Reference<FutureBucket> const& futureBucket,Reference<Task> const& task) 
															#line 36632 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<Void>(),
		   _executeActor7State<_executeActor7>(cx, taskBucket, futureBucket, task)
	{
		fdb_probe_actor_enter("_execute", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("_execute");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("_execute", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< _executeActor7, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< _executeActor7, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< _executeActor7, 2, Void >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< _executeActor7, 3, Void >*)0, actor_cancelled()); break;
		case 5: this->a_callback_error((ActorCallback< _executeActor7, 4, Void >*)0, actor_cancelled()); break;
		case 6: this->a_callback_error((ActorCallback< _executeActor7, 5, Void >*)0, actor_cancelled()); break;
		case 7: this->a_callback_error((ActorCallback< _executeActor7, 6, Void >*)0, actor_cancelled()); break;
		case 8: this->a_callback_error((ActorCallback< _executeActor7, 7, ERestoreState >*)0, actor_cancelled()); break;
		case 9: this->a_callback_error((ActorCallback< _executeActor7, 8, Void >*)0, actor_cancelled()); break;
		case 10: this->a_callback_error((ActorCallback< _executeActor7, 9, Reference<IBackupContainer> >*)0, actor_cancelled()); break;
		case 11: this->a_callback_error((ActorCallback< _executeActor7, 10, Void >*)0, actor_cancelled()); break;
		case 12: this->a_callback_error((ActorCallback< _executeActor7, 11, Void >*)0, actor_cancelled()); break;
		case 13: this->a_callback_error((ActorCallback< _executeActor7, 12, Version >*)0, actor_cancelled()); break;
		case 14: this->a_callback_error((ActorCallback< _executeActor7, 13, Void >*)0, actor_cancelled()); break;
		case 15: this->a_callback_error((ActorCallback< _executeActor7, 14, Void >*)0, actor_cancelled()); break;
		case 16: this->a_callback_error((ActorCallback< _executeActor7, 15, Optional<RestorableFileSet> >*)0, actor_cancelled()); break;
		case 17: this->a_callback_error((ActorCallback< _executeActor7, 16, Void >*)0, actor_cancelled()); break;
		case 18: this->a_callback_error((ActorCallback< _executeActor7, 17, Void >*)0, actor_cancelled()); break;
		case 19: this->a_callback_error((ActorCallback< _executeActor7, 18, Void >*)0, actor_cancelled()); break;
		case 20: this->a_callback_error((ActorCallback< _executeActor7, 19, Void >*)0, actor_cancelled()); break;
		case 21: this->a_callback_error((ActorCallback< _executeActor7, 20, Void >*)0, actor_cancelled()); break;
		}

	}
};
															#line 4077 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<Void> _execute( Database const& cx, Reference<TaskBucket> const& taskBucket, Reference<FutureBucket> const& futureBucket, Reference<Task> const& task ) {
															#line 4077 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<Void>(new _executeActor7(cx, taskBucket, futureBucket, task));
															#line 36679 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 4256 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

																#line 36684 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via _finish()
															#line 4257 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class _finishActor14>
															#line 4257 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class _finishActor14State {
															#line 36690 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 4257 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	_finishActor14State(Reference<ReadYourWritesTransaction> const& tr,Reference<TaskBucket> const& taskBucket,Reference<FutureBucket> const& futureBucket,Reference<Task> const& task) 
															#line 4257 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 4257 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : tr(tr),
															#line 4257 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   taskBucket(taskBucket),
															#line 4257 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   futureBucket(futureBucket),
															#line 4257 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   task(task),
															#line 4261 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   restore(task),
															#line 4263 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   firstVersion(Params.firstVersion().getOrDefault(task, invalidVersion))
															#line 36707 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("_finish", reinterpret_cast<unsigned long>(this));

	}
	~_finishActor14State() 
	{
		fdb_probe_actor_destroy("_finish", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 4264 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (firstVersion == invalidVersion)
															#line 36722 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			{
															#line 4265 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				StrictFuture<Void> __when_expr_0 = restore.logError( tr->getDatabase(), restore_missing_data(), "StartFullRestore: The backup had no data.", THIS);
															#line 4265 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				if (static_cast<_finishActor14*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 36728 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
				static_cast<_finishActor14*>(this)->actor_wait_state = 1;
															#line 4265 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< _finishActor14, 0, Void >*>(static_cast<_finishActor14*>(this)));
															#line 36733 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				loopDepth = 0;
			}
			else
			{
				loopDepth = a_body1cont1(loopDepth);
			}
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~_finishActor14State();
		static_cast<_finishActor14*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 4272 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		restore.stateEnum().set(tr, ERestoreState::RUNNING);
															#line 4276 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		restore.setApplyBeginVersion(tr, firstVersion);
															#line 4277 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		restore.setApplyEndVersion(tr, firstVersion);
															#line 4280 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_3 = success(RestoreDispatchTaskFunc::addTask( tr, taskBucket, task, 0, "", 0, CLIENT_KNOBS->RESTORE_DISPATCH_BATCH_SIZE));
															#line 4280 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_finishActor14*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 36769 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1cont1when1(__when_expr_3.get(), loopDepth); };
		static_cast<_finishActor14*>(this)->actor_wait_state = 4;
															#line 4280 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< _finishActor14, 3, Void >*>(static_cast<_finishActor14*>(this)));
															#line 36774 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont2(Void const& _,int loopDepth) 
	{
															#line 4267 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<std::string> __when_expr_1 = restore.tag().getD(tr);
															#line 4267 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_finishActor14*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 36785 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont2when1(__when_expr_1.get(), loopDepth); };
		static_cast<_finishActor14*>(this)->actor_wait_state = 2;
															#line 4267 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< _finishActor14, 1, std::string >*>(static_cast<_finishActor14*>(this)));
															#line 36790 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont2(Void && _,int loopDepth) 
	{
															#line 4267 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<std::string> __when_expr_1 = restore.tag().getD(tr);
															#line 4267 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_finishActor14*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 36801 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont2when1(__when_expr_1.get(), loopDepth); };
		static_cast<_finishActor14*>(this)->actor_wait_state = 2;
															#line 4267 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< _finishActor14, 1, std::string >*>(static_cast<_finishActor14*>(this)));
															#line 36806 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<_finishActor14*>(this)->actor_wait_state > 0) static_cast<_finishActor14*>(this)->actor_wait_state = 0;
		static_cast<_finishActor14*>(this)->ActorCallback< _finishActor14, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor14, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< _finishActor14, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< _finishActor14, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont3(std::string const& tag,int loopDepth) 
	{
															#line 4268 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_2 = success(abortRestore(tr, StringRef(tag)));
															#line 4268 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_finishActor14*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 36880 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont3when1(__when_expr_2.get(), loopDepth); };
		static_cast<_finishActor14*>(this)->actor_wait_state = 3;
															#line 4268 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< _finishActor14, 2, Void >*>(static_cast<_finishActor14*>(this)));
															#line 36885 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont3(std::string && tag,int loopDepth) 
	{
															#line 4268 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_2 = success(abortRestore(tr, StringRef(tag)));
															#line 4268 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_finishActor14*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 36896 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont3when1(__when_expr_2.get(), loopDepth); };
		static_cast<_finishActor14*>(this)->actor_wait_state = 3;
															#line 4268 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< _finishActor14, 2, Void >*>(static_cast<_finishActor14*>(this)));
															#line 36901 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont2when1(std::string const& tag,int loopDepth) 
	{
		loopDepth = a_body1cont3(tag, loopDepth);

		return loopDepth;
	}
	int a_body1cont2when1(std::string && tag,int loopDepth) 
	{
		loopDepth = a_body1cont3(std::move(tag), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<_finishActor14*>(this)->actor_wait_state > 0) static_cast<_finishActor14*>(this)->actor_wait_state = 0;
		static_cast<_finishActor14*>(this)->ActorCallback< _finishActor14, 1, std::string >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor14, 1, std::string >*,std::string const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< _finishActor14, 1, std::string >*,std::string && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< _finishActor14, 1, std::string >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont4(Void const& _,int loopDepth) 
	{
															#line 4269 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<_finishActor14*>(this)->SAV<Void>::futures) { (void)(Void()); this->~_finishActor14State(); static_cast<_finishActor14*>(this)->destroy(); return 0; }
															#line 36973 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<_finishActor14*>(this)->SAV< Void >::value()) Void(Void());
		this->~_finishActor14State();
		static_cast<_finishActor14*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont4(Void && _,int loopDepth) 
	{
															#line 4269 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<_finishActor14*>(this)->SAV<Void>::futures) { (void)(Void()); this->~_finishActor14State(); static_cast<_finishActor14*>(this)->destroy(); return 0; }
															#line 36985 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<_finishActor14*>(this)->SAV< Void >::value()) Void(Void());
		this->~_finishActor14State();
		static_cast<_finishActor14*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont3when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont4(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont3when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont4(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<_finishActor14*>(this)->actor_wait_state > 0) static_cast<_finishActor14*>(this)->actor_wait_state = 0;
		static_cast<_finishActor14*>(this)->ActorCallback< _finishActor14, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor14, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont3when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< _finishActor14, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont3when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< _finishActor14, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1cont6(Void const& _,int loopDepth) 
	{
															#line 4283 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_4 = taskBucket->finish(tr, task);
															#line 4283 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_finishActor14*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 37062 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1Catch1(__when_expr_4.getError(), loopDepth); else return a_body1cont6when1(__when_expr_4.get(), loopDepth); };
		static_cast<_finishActor14*>(this)->actor_wait_state = 5;
															#line 4283 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< _finishActor14, 4, Void >*>(static_cast<_finishActor14*>(this)));
															#line 37067 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont6(Void && _,int loopDepth) 
	{
															#line 4283 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_4 = taskBucket->finish(tr, task);
															#line 4283 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_finishActor14*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 37078 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1Catch1(__when_expr_4.getError(), loopDepth); else return a_body1cont6when1(__when_expr_4.get(), loopDepth); };
		static_cast<_finishActor14*>(this)->actor_wait_state = 5;
															#line 4283 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< _finishActor14, 4, Void >*>(static_cast<_finishActor14*>(this)));
															#line 37083 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont6(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont6(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<_finishActor14*>(this)->actor_wait_state > 0) static_cast<_finishActor14*>(this)->actor_wait_state = 0;
		static_cast<_finishActor14*>(this)->ActorCallback< _finishActor14, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor14, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< _finishActor14, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< _finishActor14, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 3);

	}
	int a_body1cont7(Void const& _,int loopDepth) 
	{
															#line 4284 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		logsOnly = restore.onlyApplyMutationLogs().get(tr);
															#line 4285 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_5 = success(logsOnly);
															#line 4285 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_finishActor14*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 37159 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_5.isReady()) { if (__when_expr_5.isError()) return a_body1Catch1(__when_expr_5.getError(), loopDepth); else return a_body1cont7when1(__when_expr_5.get(), loopDepth); };
		static_cast<_finishActor14*>(this)->actor_wait_state = 6;
															#line 4285 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_5.addCallbackAndClear(static_cast<ActorCallback< _finishActor14, 5, Void >*>(static_cast<_finishActor14*>(this)));
															#line 37164 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont7(Void && _,int loopDepth) 
	{
															#line 4284 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		logsOnly = restore.onlyApplyMutationLogs().get(tr);
															#line 4285 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_5 = success(logsOnly);
															#line 4285 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<_finishActor14*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 37177 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_5.isReady()) { if (__when_expr_5.isError()) return a_body1Catch1(__when_expr_5.getError(), loopDepth); else return a_body1cont7when1(__when_expr_5.get(), loopDepth); };
		static_cast<_finishActor14*>(this)->actor_wait_state = 6;
															#line 4285 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_5.addCallbackAndClear(static_cast<ActorCallback< _finishActor14, 5, Void >*>(static_cast<_finishActor14*>(this)));
															#line 37182 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont6when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont7(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont6when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont7(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose5() 
	{
		if (static_cast<_finishActor14*>(this)->actor_wait_state > 0) static_cast<_finishActor14*>(this)->actor_wait_state = 0;
		static_cast<_finishActor14*>(this)->ActorCallback< _finishActor14, 4, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor14, 4, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont6when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_fire(ActorCallback< _finishActor14, 4, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont6when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_error(ActorCallback< _finishActor14, 4, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 4);

	}
	int a_body1cont8(Void const& _,int loopDepth) 
	{
															#line 4286 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (logsOnly.get().present() && logsOnly.get().get())
															#line 37254 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 4289 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			Value versionEncoded = BinaryWriter::toValue(Params.firstVersion().get(task), Unversioned());
															#line 4290 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_6 = krmSetRange(tr, restore.applyMutationsMapPrefix(), normalKeys, versionEncoded);
															#line 4290 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_finishActor14*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 37262 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_6.isReady()) { if (__when_expr_6.isError()) return a_body1Catch1(__when_expr_6.getError(), loopDepth); else return a_body1cont8when1(__when_expr_6.get(), loopDepth); };
			static_cast<_finishActor14*>(this)->actor_wait_state = 7;
															#line 4290 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_6.addCallbackAndClear(static_cast<ActorCallback< _finishActor14, 6, Void >*>(static_cast<_finishActor14*>(this)));
															#line 37267 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1cont9(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont8(Void && _,int loopDepth) 
	{
															#line 4286 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (logsOnly.get().present() && logsOnly.get().get())
															#line 37281 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 4289 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			Value versionEncoded = BinaryWriter::toValue(Params.firstVersion().get(task), Unversioned());
															#line 4290 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_6 = krmSetRange(tr, restore.applyMutationsMapPrefix(), normalKeys, versionEncoded);
															#line 4290 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<_finishActor14*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 37289 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_6.isReady()) { if (__when_expr_6.isError()) return a_body1Catch1(__when_expr_6.getError(), loopDepth); else return a_body1cont8when1(__when_expr_6.get(), loopDepth); };
			static_cast<_finishActor14*>(this)->actor_wait_state = 7;
															#line 4290 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_6.addCallbackAndClear(static_cast<ActorCallback< _finishActor14, 6, Void >*>(static_cast<_finishActor14*>(this)));
															#line 37294 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1cont9(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont7when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont8(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont7when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont8(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose6() 
	{
		if (static_cast<_finishActor14*>(this)->actor_wait_state > 0) static_cast<_finishActor14*>(this)->actor_wait_state = 0;
		static_cast<_finishActor14*>(this)->ActorCallback< _finishActor14, 5, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor14, 5, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1cont7when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_fire(ActorCallback< _finishActor14, 5, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1cont7when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_error(ActorCallback< _finishActor14, 5, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 5);

	}
	int a_body1cont9(int loopDepth) 
	{
															#line 4292 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<_finishActor14*>(this)->SAV<Void>::futures) { (void)(Void()); this->~_finishActor14State(); static_cast<_finishActor14*>(this)->destroy(); return 0; }
															#line 37371 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<_finishActor14*>(this)->SAV< Void >::value()) Void(Void());
		this->~_finishActor14State();
		static_cast<_finishActor14*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont10(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont9(loopDepth);

		return loopDepth;
	}
	int a_body1cont10(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont9(loopDepth);

		return loopDepth;
	}
	int a_body1cont8when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont10(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont8when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont10(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose7() 
	{
		if (static_cast<_finishActor14*>(this)->actor_wait_state > 0) static_cast<_finishActor14*>(this)->actor_wait_state = 0;
		static_cast<_finishActor14*>(this)->ActorCallback< _finishActor14, 6, Void >::remove();

	}
	void a_callback_fire(ActorCallback< _finishActor14, 6, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1cont8when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 6);

	}
	void a_callback_fire(ActorCallback< _finishActor14, 6, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1cont8when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 6);

	}
	void a_callback_error(ActorCallback< _finishActor14, 6, Void >*,Error err) 
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), 6);

	}
															#line 4257 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 4257 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskBucket> taskBucket;
															#line 4257 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<FutureBucket> futureBucket;
															#line 4257 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<Task> task;
															#line 4261 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	RestoreConfig restore;
															#line 4263 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Version firstVersion;
															#line 4284 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Future<Optional<bool>> logsOnly;
															#line 37468 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via _finish()
															#line 4257 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class _finishActor14 final : public Actor<Void>, public ActorCallback< _finishActor14, 0, Void >, public ActorCallback< _finishActor14, 1, std::string >, public ActorCallback< _finishActor14, 2, Void >, public ActorCallback< _finishActor14, 3, Void >, public ActorCallback< _finishActor14, 4, Void >, public ActorCallback< _finishActor14, 5, Void >, public ActorCallback< _finishActor14, 6, Void >, public FastAllocated<_finishActor14>, public _finishActor14State<_finishActor14> {
															#line 37473 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<_finishActor14>::operator new;
	using FastAllocated<_finishActor14>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< _finishActor14, 0, Void >;
friend struct ActorCallback< _finishActor14, 1, std::string >;
friend struct ActorCallback< _finishActor14, 2, Void >;
friend struct ActorCallback< _finishActor14, 3, Void >;
friend struct ActorCallback< _finishActor14, 4, Void >;
friend struct ActorCallback< _finishActor14, 5, Void >;
friend struct ActorCallback< _finishActor14, 6, Void >;
															#line 4257 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	_finishActor14(Reference<ReadYourWritesTransaction> const& tr,Reference<TaskBucket> const& taskBucket,Reference<FutureBucket> const& futureBucket,Reference<Task> const& task) 
															#line 37490 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<Void>(),
		   _finishActor14State<_finishActor14>(tr, taskBucket, futureBucket, task)
	{
		fdb_probe_actor_enter("_finish", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("_finish");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("_finish", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< _finishActor14, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< _finishActor14, 1, std::string >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< _finishActor14, 2, Void >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< _finishActor14, 3, Void >*)0, actor_cancelled()); break;
		case 5: this->a_callback_error((ActorCallback< _finishActor14, 4, Void >*)0, actor_cancelled()); break;
		case 6: this->a_callback_error((ActorCallback< _finishActor14, 5, Void >*)0, actor_cancelled()); break;
		case 7: this->a_callback_error((ActorCallback< _finishActor14, 6, Void >*)0, actor_cancelled()); break;
		}

	}
};
															#line 4257 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<Void> _finish( Reference<ReadYourWritesTransaction> const& tr, Reference<TaskBucket> const& taskBucket, Reference<FutureBucket> const& futureBucket, Reference<Task> const& task ) {
															#line 4257 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<Void>(new _finishActor14(tr, taskBucket, futureBucket, task));
															#line 37523 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 4294 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

																#line 37528 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via addTask()
															#line 4295 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class AddTaskActor12>
															#line 4295 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class AddTaskActor12State {
															#line 37534 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 4295 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	AddTaskActor12State(Reference<ReadYourWritesTransaction> const& tr,Reference<TaskBucket> const& taskBucket,UID const& uid,TaskCompletionKey const& completionKey,Reference<TaskFuture> const& waitFor = Reference<TaskFuture>()) 
															#line 4295 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 4295 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : tr(tr),
															#line 4295 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   taskBucket(taskBucket),
															#line 4295 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   uid(uid),
															#line 4295 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   completionKey(completionKey),
															#line 4295 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   waitFor(waitFor)
															#line 37549 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("addTask", reinterpret_cast<unsigned long>(this));

	}
	~AddTaskActor12State() 
	{
		fdb_probe_actor_destroy("addTask", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 4300 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 4301 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 4303 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Key> __when_expr_0 = completionKey.get(tr, taskBucket);
															#line 4303 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<AddTaskActor12*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 37570 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<AddTaskActor12*>(this)->actor_wait_state = 1;
															#line 4303 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< AddTaskActor12, 0, Key >*>(static_cast<AddTaskActor12*>(this)));
															#line 37575 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~AddTaskActor12State();
		static_cast<AddTaskActor12*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Key const& doneKey,int loopDepth) 
	{
															#line 4304 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		task = Reference<Task>(new Task(StartFullRestoreTaskFunc::name, StartFullRestoreTaskFunc::version, doneKey));
															#line 4307 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		restore = RestoreConfig(uid);
															#line 4309 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_1 = restore.toTask(tr, task);
															#line 4309 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<AddTaskActor12*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 37604 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<AddTaskActor12*>(this)->actor_wait_state = 2;
															#line 4309 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< AddTaskActor12, 1, Void >*>(static_cast<AddTaskActor12*>(this)));
															#line 37609 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Key && doneKey,int loopDepth) 
	{
															#line 4304 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		task = Reference<Task>(new Task(StartFullRestoreTaskFunc::name, StartFullRestoreTaskFunc::version, doneKey));
															#line 4307 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		restore = RestoreConfig(uid);
															#line 4309 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_1 = restore.toTask(tr, task);
															#line 4309 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<AddTaskActor12*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 37624 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<AddTaskActor12*>(this)->actor_wait_state = 2;
															#line 4309 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< AddTaskActor12, 1, Void >*>(static_cast<AddTaskActor12*>(this)));
															#line 37629 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1when1(Key const& doneKey,int loopDepth) 
	{
		loopDepth = a_body1cont1(doneKey, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Key && doneKey,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(doneKey), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<AddTaskActor12*>(this)->actor_wait_state > 0) static_cast<AddTaskActor12*>(this)->actor_wait_state = 0;
		static_cast<AddTaskActor12*>(this)->ActorCallback< AddTaskActor12, 0, Key >::remove();

	}
	void a_callback_fire(ActorCallback< AddTaskActor12, 0, Key >*,Key const& value) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< AddTaskActor12, 0, Key >*,Key && value) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< AddTaskActor12, 0, Key >*,Error err) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont2(Void const& _,int loopDepth) 
	{
															#line 4311 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!waitFor)
															#line 37701 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 4312 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (!static_cast<AddTaskActor12*>(this)->SAV<Key>::futures) { (void)(taskBucket->addTask(tr, task)); this->~AddTaskActor12State(); static_cast<AddTaskActor12*>(this)->destroy(); return 0; }
															#line 37705 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			new (&static_cast<AddTaskActor12*>(this)->SAV< Key >::value()) Key(taskBucket->addTask(tr, task));
			this->~AddTaskActor12State();
			static_cast<AddTaskActor12*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 4315 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_2 = waitFor->onSetAddTask(tr, taskBucket, task);
															#line 4315 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<AddTaskActor12*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 37715 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont2when1(__when_expr_2.get(), loopDepth); };
		static_cast<AddTaskActor12*>(this)->actor_wait_state = 3;
															#line 4315 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< AddTaskActor12, 2, Void >*>(static_cast<AddTaskActor12*>(this)));
															#line 37720 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont2(Void && _,int loopDepth) 
	{
															#line 4311 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!waitFor)
															#line 37729 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 4312 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (!static_cast<AddTaskActor12*>(this)->SAV<Key>::futures) { (void)(taskBucket->addTask(tr, task)); this->~AddTaskActor12State(); static_cast<AddTaskActor12*>(this)->destroy(); return 0; }
															#line 37733 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			new (&static_cast<AddTaskActor12*>(this)->SAV< Key >::value()) Key(taskBucket->addTask(tr, task));
			this->~AddTaskActor12State();
			static_cast<AddTaskActor12*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 4315 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_2 = waitFor->onSetAddTask(tr, taskBucket, task);
															#line 4315 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<AddTaskActor12*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 37743 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont2when1(__when_expr_2.get(), loopDepth); };
		static_cast<AddTaskActor12*>(this)->actor_wait_state = 3;
															#line 4315 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< AddTaskActor12, 2, Void >*>(static_cast<AddTaskActor12*>(this)));
															#line 37748 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<AddTaskActor12*>(this)->actor_wait_state > 0) static_cast<AddTaskActor12*>(this)->actor_wait_state = 0;
		static_cast<AddTaskActor12*>(this)->ActorCallback< AddTaskActor12, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< AddTaskActor12, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< AddTaskActor12, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< AddTaskActor12, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont3(Void const& _,int loopDepth) 
	{
															#line 4316 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<AddTaskActor12*>(this)->SAV<Key>::futures) { (void)(LiteralStringRef("OnSetAddTask")); this->~AddTaskActor12State(); static_cast<AddTaskActor12*>(this)->destroy(); return 0; }
															#line 37820 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<AddTaskActor12*>(this)->SAV< Key >::value()) Key(LiteralStringRef("OnSetAddTask"));
		this->~AddTaskActor12State();
		static_cast<AddTaskActor12*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont3(Void && _,int loopDepth) 
	{
															#line 4316 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<AddTaskActor12*>(this)->SAV<Key>::futures) { (void)(LiteralStringRef("OnSetAddTask")); this->~AddTaskActor12State(); static_cast<AddTaskActor12*>(this)->destroy(); return 0; }
															#line 37832 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<AddTaskActor12*>(this)->SAV< Key >::value()) Key(LiteralStringRef("OnSetAddTask"));
		this->~AddTaskActor12State();
		static_cast<AddTaskActor12*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont3(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont3(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<AddTaskActor12*>(this)->actor_wait_state > 0) static_cast<AddTaskActor12*>(this)->actor_wait_state = 0;
		static_cast<AddTaskActor12*>(this)->ActorCallback< AddTaskActor12, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< AddTaskActor12, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< AddTaskActor12, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< AddTaskActor12, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), 2);

	}
															#line 4295 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 4295 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskBucket> taskBucket;
															#line 4295 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	UID uid;
															#line 4295 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	TaskCompletionKey completionKey;
															#line 4295 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<TaskFuture> waitFor;
															#line 4304 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<Task> task;
															#line 4307 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	RestoreConfig restore;
															#line 37917 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via addTask()
															#line 4295 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class AddTaskActor12 final : public Actor<Key>, public ActorCallback< AddTaskActor12, 0, Key >, public ActorCallback< AddTaskActor12, 1, Void >, public ActorCallback< AddTaskActor12, 2, Void >, public FastAllocated<AddTaskActor12>, public AddTaskActor12State<AddTaskActor12> {
															#line 37922 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<AddTaskActor12>::operator new;
	using FastAllocated<AddTaskActor12>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Key>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< AddTaskActor12, 0, Key >;
friend struct ActorCallback< AddTaskActor12, 1, Void >;
friend struct ActorCallback< AddTaskActor12, 2, Void >;
															#line 4295 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	AddTaskActor12(Reference<ReadYourWritesTransaction> const& tr,Reference<TaskBucket> const& taskBucket,UID const& uid,TaskCompletionKey const& completionKey,Reference<TaskFuture> const& waitFor = Reference<TaskFuture>()) 
															#line 37935 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<Key>(),
		   AddTaskActor12State<AddTaskActor12>(tr, taskBucket, uid, completionKey, waitFor)
	{
		fdb_probe_actor_enter("addTask", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("addTask");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("addTask", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< AddTaskActor12, 0, Key >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< AddTaskActor12, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< AddTaskActor12, 2, Void >*)0, actor_cancelled()); break;
		}

	}
};
															#line 4295 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<Key> addTask( Reference<ReadYourWritesTransaction> const& tr, Reference<TaskBucket> const& taskBucket, UID const& uid, TaskCompletionKey const& completionKey, Reference<TaskFuture> const& waitFor = Reference<TaskFuture>() ) {
															#line 4295 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<Key>(new AddTaskActor12(tr, taskBucket, uid, completionKey, waitFor));
															#line 37964 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 4318 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

	StringRef getName() const override { return name; };

	Future<Void> execute(Database cx,
	                     Reference<TaskBucket> tb,
	                     Reference<FutureBucket> fb,
	                     Reference<Task> task) override {
		return _execute(cx, tb, fb, task);
	};
	Future<Void> finish(Reference<ReadYourWritesTransaction> tr,
	                    Reference<TaskBucket> tb,
	                    Reference<FutureBucket> fb,
	                    Reference<Task> task) override {
		return _finish(tr, tb, fb, task);
	};
};
StringRef StartFullRestoreTaskFunc::name = LiteralStringRef("restore_start");
REGISTER_TASKFUNC(StartFullRestoreTaskFunc);
} // namespace fileBackup

struct LogInfo : public ReferenceCounted<LogInfo> {
	std::string fileName;
	Reference<IAsyncFile> logFile;
	Version beginVersion;
	Version endVersion;
	int64_t offset;

	LogInfo() : offset(0){};
};

class FileBackupAgentImpl {
public:
	static constexpr int MAX_RESTORABLE_FILE_METASECTION_BYTES = 1024 * 8;

	// Parallel restore
																#line 38003 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via parallelRestoreFinish()
															#line 4353 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class ParallelRestoreFinishActor>
															#line 4353 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class ParallelRestoreFinishActorState {
															#line 38009 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 4353 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	ParallelRestoreFinishActorState(Database const& cx,UID const& randomUID,UnlockDB const& unlockDB = UnlockDB::True) 
															#line 4353 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 4353 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : cx(cx),
															#line 4353 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   randomUID(randomUID),
															#line 4353 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   unlockDB(unlockDB),
															#line 4354 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   tr(cx),
															#line 4355 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   restoreRequestDoneKeyValue()
															#line 38024 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("parallelRestoreFinish", reinterpret_cast<unsigned long>(this));

	}
	~ParallelRestoreFinishActorState() 
	{
		fdb_probe_actor_destroy("parallelRestoreFinish", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 4356 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			TraceEvent("FastRestoreToolWaitForRestoreToFinish").detail("DBLock", randomUID);
															#line 4358 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			;
															#line 38041 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~ParallelRestoreFinishActorState();
		static_cast<ParallelRestoreFinishActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 4378 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent("FastRestoreToolRestoreFinished") .detail("ClearRestoreRequestDoneKey", restoreRequestDoneKeyValue.present());
															#line 4381 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_4 = runRYWTransaction(cx, [](Reference<ReadYourWritesTransaction> tr) -> Future<Void> { tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS); tr->setOption(FDBTransactionOptions::LOCK_AWARE); tr->clear(restoreRequestDoneKey); return Void(); });
															#line 4381 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<ParallelRestoreFinishActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 38068 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1Catch1(__when_expr_4.getError(), loopDepth); else return a_body1cont1when1(__when_expr_4.get(), loopDepth); };
		static_cast<ParallelRestoreFinishActor*>(this)->actor_wait_state = 5;
															#line 4381 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< ParallelRestoreFinishActor, 4, Void >*>(static_cast<ParallelRestoreFinishActor*>(this)));
															#line 38073 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
		try {
															#line 4360 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr.setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 4361 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr.setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 4362 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Optional<Value>> __when_expr_0 = tr.get(restoreRequestDoneKey);
															#line 4362 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<ParallelRestoreFinishActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 38096 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1loopBody1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
			static_cast<ParallelRestoreFinishActor*>(this)->actor_wait_state = 1;
															#line 4362 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< ParallelRestoreFinishActor, 0, Optional<Value> >*>(static_cast<ParallelRestoreFinishActor*>(this)));
															#line 38101 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1break1(int loopDepth) 
	{
		try {
			return a_body1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 4374 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_3 = tr.onError(e);
															#line 4374 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<ParallelRestoreFinishActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 38138 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch1(__when_expr_3.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1Catch1when1(__when_expr_3.get(), loopDepth); };
			static_cast<ParallelRestoreFinishActor*>(this)->actor_wait_state = 4;
															#line 4374 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< ParallelRestoreFinishActor, 3, Void >*>(static_cast<ParallelRestoreFinishActor*>(this)));
															#line 38143 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(Optional<Value> const& _restoreRequestDoneKeyValue,int loopDepth) 
	{
															#line 4363 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		restoreRequestDoneKeyValue = _restoreRequestDoneKeyValue;
															#line 4365 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (restoreRequestDoneKeyValue.present())
															#line 38160 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
			return a_body1break1(loopDepth==0?0:loopDepth-1); // break
		}
		else
		{
															#line 4368 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			watchForRestoreRequestDone = tr.watch(restoreRequestDoneKey);
															#line 4369 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_1 = tr.commit();
															#line 4369 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<ParallelRestoreFinishActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 38172 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
			static_cast<ParallelRestoreFinishActor*>(this)->actor_wait_state = 2;
															#line 4369 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< ParallelRestoreFinishActor, 1, Void >*>(static_cast<ParallelRestoreFinishActor*>(this)));
															#line 38177 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(Optional<Value> && _restoreRequestDoneKeyValue,int loopDepth) 
	{
															#line 4363 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		restoreRequestDoneKeyValue = _restoreRequestDoneKeyValue;
															#line 4365 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (restoreRequestDoneKeyValue.present())
															#line 38189 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
			return a_body1break1(loopDepth==0?0:loopDepth-1); // break
		}
		else
		{
															#line 4368 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			watchForRestoreRequestDone = tr.watch(restoreRequestDoneKey);
															#line 4369 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_1 = tr.commit();
															#line 4369 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<ParallelRestoreFinishActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 38201 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
			static_cast<ParallelRestoreFinishActor*>(this)->actor_wait_state = 2;
															#line 4369 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< ParallelRestoreFinishActor, 1, Void >*>(static_cast<ParallelRestoreFinishActor*>(this)));
															#line 38206 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}

		return loopDepth;
	}
	int a_body1loopBody1when1(Optional<Value> const& _restoreRequestDoneKeyValue,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(_restoreRequestDoneKeyValue, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Optional<Value> && _restoreRequestDoneKeyValue,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(std::move(_restoreRequestDoneKeyValue), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<ParallelRestoreFinishActor*>(this)->actor_wait_state > 0) static_cast<ParallelRestoreFinishActor*>(this)->actor_wait_state = 0;
		static_cast<ParallelRestoreFinishActor*>(this)->ActorCallback< ParallelRestoreFinishActor, 0, Optional<Value> >::remove();

	}
	void a_callback_fire(ActorCallback< ParallelRestoreFinishActor, 0, Optional<Value> >*,Optional<Value> const& value) 
	{
		fdb_probe_actor_enter("parallelRestoreFinish", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("parallelRestoreFinish", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< ParallelRestoreFinishActor, 0, Optional<Value> >*,Optional<Value> && value) 
	{
		fdb_probe_actor_enter("parallelRestoreFinish", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("parallelRestoreFinish", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< ParallelRestoreFinishActor, 0, Optional<Value> >*,Error err) 
	{
		fdb_probe_actor_enter("parallelRestoreFinish", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("parallelRestoreFinish", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1cont5(Void const& _,int loopDepth) 
	{
															#line 4370 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_2 = watchForRestoreRequestDone;
															#line 4370 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<ParallelRestoreFinishActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 38281 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1loopBody1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1loopBody1cont5when1(__when_expr_2.get(), loopDepth); };
		static_cast<ParallelRestoreFinishActor*>(this)->actor_wait_state = 3;
															#line 4370 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< ParallelRestoreFinishActor, 2, Void >*>(static_cast<ParallelRestoreFinishActor*>(this)));
															#line 38286 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont5(Void && _,int loopDepth) 
	{
															#line 4370 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_2 = watchForRestoreRequestDone;
															#line 4370 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<ParallelRestoreFinishActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 38297 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1loopBody1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1loopBody1cont5when1(__when_expr_2.get(), loopDepth); };
		static_cast<ParallelRestoreFinishActor*>(this)->actor_wait_state = 3;
															#line 4370 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< ParallelRestoreFinishActor, 2, Void >*>(static_cast<ParallelRestoreFinishActor*>(this)));
															#line 38302 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont5(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont5(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<ParallelRestoreFinishActor*>(this)->actor_wait_state > 0) static_cast<ParallelRestoreFinishActor*>(this)->actor_wait_state = 0;
		static_cast<ParallelRestoreFinishActor*>(this)->ActorCallback< ParallelRestoreFinishActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< ParallelRestoreFinishActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("parallelRestoreFinish", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("parallelRestoreFinish", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< ParallelRestoreFinishActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("parallelRestoreFinish", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("parallelRestoreFinish", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< ParallelRestoreFinishActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("parallelRestoreFinish", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("parallelRestoreFinish", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1loopBody1cont6(Void const& _,int loopDepth) 
	{
		return a_body1break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1loopBody1cont6(Void && _,int loopDepth) 
	{
		return a_body1break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1loopBody1cont5when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont6(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont5when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont6(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<ParallelRestoreFinishActor*>(this)->actor_wait_state > 0) static_cast<ParallelRestoreFinishActor*>(this)->actor_wait_state = 0;
		static_cast<ParallelRestoreFinishActor*>(this)->ActorCallback< ParallelRestoreFinishActor, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< ParallelRestoreFinishActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("parallelRestoreFinish", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont5when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("parallelRestoreFinish", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< ParallelRestoreFinishActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("parallelRestoreFinish", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont5when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("parallelRestoreFinish", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< ParallelRestoreFinishActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("parallelRestoreFinish", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("parallelRestoreFinish", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<ParallelRestoreFinishActor*>(this)->actor_wait_state > 0) static_cast<ParallelRestoreFinishActor*>(this)->actor_wait_state = 0;
		static_cast<ParallelRestoreFinishActor*>(this)->ActorCallback< ParallelRestoreFinishActor, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< ParallelRestoreFinishActor, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("parallelRestoreFinish", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("parallelRestoreFinish", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< ParallelRestoreFinishActor, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("parallelRestoreFinish", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("parallelRestoreFinish", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< ParallelRestoreFinishActor, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("parallelRestoreFinish", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("parallelRestoreFinish", reinterpret_cast<unsigned long>(this), 3);

	}
	int a_body1cont2(Void const& _,int loopDepth) 
	{
															#line 4388 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (unlockDB)
															#line 38524 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 4389 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			TraceEvent("FastRestoreToolRestoreFinished").detail("UnlockDBStart", randomUID);
															#line 4390 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_5 = unlockDatabase(cx, randomUID);
															#line 4390 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<ParallelRestoreFinishActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 38532 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_5.isReady()) { if (__when_expr_5.isError()) return a_body1Catch1(__when_expr_5.getError(), loopDepth); else return a_body1cont2when1(__when_expr_5.get(), loopDepth); };
			static_cast<ParallelRestoreFinishActor*>(this)->actor_wait_state = 6;
															#line 4390 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_5.addCallbackAndClear(static_cast<ActorCallback< ParallelRestoreFinishActor, 5, Void >*>(static_cast<ParallelRestoreFinishActor*>(this)));
															#line 38537 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
															#line 4393 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			TraceEvent("FastRestoreToolRestoreFinished").detail("DBLeftLockedAfterRestore", randomUID);
															#line 38544 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = a_body1cont3(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont2(Void && _,int loopDepth) 
	{
															#line 4388 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (unlockDB)
															#line 38554 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 4389 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			TraceEvent("FastRestoreToolRestoreFinished").detail("UnlockDBStart", randomUID);
															#line 4390 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_5 = unlockDatabase(cx, randomUID);
															#line 4390 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<ParallelRestoreFinishActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 38562 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_5.isReady()) { if (__when_expr_5.isError()) return a_body1Catch1(__when_expr_5.getError(), loopDepth); else return a_body1cont2when1(__when_expr_5.get(), loopDepth); };
			static_cast<ParallelRestoreFinishActor*>(this)->actor_wait_state = 6;
															#line 4390 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_5.addCallbackAndClear(static_cast<ActorCallback< ParallelRestoreFinishActor, 5, Void >*>(static_cast<ParallelRestoreFinishActor*>(this)));
															#line 38567 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
															#line 4393 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			TraceEvent("FastRestoreToolRestoreFinished").detail("DBLeftLockedAfterRestore", randomUID);
															#line 38574 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = a_body1cont3(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose5() 
	{
		if (static_cast<ParallelRestoreFinishActor*>(this)->actor_wait_state > 0) static_cast<ParallelRestoreFinishActor*>(this)->actor_wait_state = 0;
		static_cast<ParallelRestoreFinishActor*>(this)->ActorCallback< ParallelRestoreFinishActor, 4, Void >::remove();

	}
	void a_callback_fire(ActorCallback< ParallelRestoreFinishActor, 4, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("parallelRestoreFinish", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("parallelRestoreFinish", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_fire(ActorCallback< ParallelRestoreFinishActor, 4, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("parallelRestoreFinish", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("parallelRestoreFinish", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_error(ActorCallback< ParallelRestoreFinishActor, 4, Void >*,Error err) 
	{
		fdb_probe_actor_enter("parallelRestoreFinish", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("parallelRestoreFinish", reinterpret_cast<unsigned long>(this), 4);

	}
	int a_body1cont3(int loopDepth) 
	{
															#line 4396 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<ParallelRestoreFinishActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~ParallelRestoreFinishActorState(); static_cast<ParallelRestoreFinishActor*>(this)->destroy(); return 0; }
															#line 38647 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<ParallelRestoreFinishActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~ParallelRestoreFinishActorState();
		static_cast<ParallelRestoreFinishActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont4(Void const& _,int loopDepth) 
	{
															#line 4391 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent("FastRestoreToolRestoreFinished").detail("UnlockDBFinish", randomUID);
															#line 38659 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1cont4(Void && _,int loopDepth) 
	{
															#line 4391 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent("FastRestoreToolRestoreFinished").detail("UnlockDBFinish", randomUID);
															#line 38668 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont4(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont4(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose6() 
	{
		if (static_cast<ParallelRestoreFinishActor*>(this)->actor_wait_state > 0) static_cast<ParallelRestoreFinishActor*>(this)->actor_wait_state = 0;
		static_cast<ParallelRestoreFinishActor*>(this)->ActorCallback< ParallelRestoreFinishActor, 5, Void >::remove();

	}
	void a_callback_fire(ActorCallback< ParallelRestoreFinishActor, 5, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("parallelRestoreFinish", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("parallelRestoreFinish", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_fire(ActorCallback< ParallelRestoreFinishActor, 5, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("parallelRestoreFinish", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("parallelRestoreFinish", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_error(ActorCallback< ParallelRestoreFinishActor, 5, Void >*,Error err) 
	{
		fdb_probe_actor_enter("parallelRestoreFinish", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("parallelRestoreFinish", reinterpret_cast<unsigned long>(this), 5);

	}
															#line 4353 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Database cx;
															#line 4353 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	UID randomUID;
															#line 4353 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	UnlockDB unlockDB;
															#line 4354 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	ReadYourWritesTransaction tr;
															#line 4355 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Optional<Value> restoreRequestDoneKeyValue;
															#line 4368 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Future<Void> watchForRestoreRequestDone;
															#line 38748 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via parallelRestoreFinish()
															#line 4353 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class ParallelRestoreFinishActor final : public Actor<Void>, public ActorCallback< ParallelRestoreFinishActor, 0, Optional<Value> >, public ActorCallback< ParallelRestoreFinishActor, 1, Void >, public ActorCallback< ParallelRestoreFinishActor, 2, Void >, public ActorCallback< ParallelRestoreFinishActor, 3, Void >, public ActorCallback< ParallelRestoreFinishActor, 4, Void >, public ActorCallback< ParallelRestoreFinishActor, 5, Void >, public FastAllocated<ParallelRestoreFinishActor>, public ParallelRestoreFinishActorState<ParallelRestoreFinishActor> {
															#line 38753 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<ParallelRestoreFinishActor>::operator new;
	using FastAllocated<ParallelRestoreFinishActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< ParallelRestoreFinishActor, 0, Optional<Value> >;
friend struct ActorCallback< ParallelRestoreFinishActor, 1, Void >;
friend struct ActorCallback< ParallelRestoreFinishActor, 2, Void >;
friend struct ActorCallback< ParallelRestoreFinishActor, 3, Void >;
friend struct ActorCallback< ParallelRestoreFinishActor, 4, Void >;
friend struct ActorCallback< ParallelRestoreFinishActor, 5, Void >;
															#line 4353 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	ParallelRestoreFinishActor(Database const& cx,UID const& randomUID,UnlockDB const& unlockDB = UnlockDB::True) 
															#line 38769 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<Void>(),
		   ParallelRestoreFinishActorState<ParallelRestoreFinishActor>(cx, randomUID, unlockDB)
	{
		fdb_probe_actor_enter("parallelRestoreFinish", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("parallelRestoreFinish");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("parallelRestoreFinish", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< ParallelRestoreFinishActor, 0, Optional<Value> >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< ParallelRestoreFinishActor, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< ParallelRestoreFinishActor, 2, Void >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< ParallelRestoreFinishActor, 3, Void >*)0, actor_cancelled()); break;
		case 5: this->a_callback_error((ActorCallback< ParallelRestoreFinishActor, 4, Void >*)0, actor_cancelled()); break;
		case 6: this->a_callback_error((ActorCallback< ParallelRestoreFinishActor, 5, Void >*)0, actor_cancelled()); break;
		}

	}
};
															#line 4353 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<Void> parallelRestoreFinish( Database const& cx, UID const& randomUID, UnlockDB const& unlockDB = UnlockDB::True ) {
															#line 4353 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<Void>(new ParallelRestoreFinishActor(cx, randomUID, unlockDB));
															#line 38801 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 4398 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

																#line 38806 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via submitParallelRestore()
															#line 4399 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class SubmitParallelRestoreActor>
															#line 4399 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class SubmitParallelRestoreActorState {
															#line 38812 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 4399 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	SubmitParallelRestoreActorState(Database const& cx,Key const& backupTag,Standalone<VectorRef<KeyRangeRef>> const& backupRanges,Key const& bcUrl,Optional<std::string> const& proxy,Version const& targetVersion,LockDB const& lockDB,UID const& randomUID,Key const& addPrefix,Key const& removePrefix) 
															#line 4399 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 4399 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : cx(cx),
															#line 4399 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   backupTag(backupTag),
															#line 4399 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   backupRanges(backupRanges),
															#line 4399 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   bcUrl(bcUrl),
															#line 4399 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   proxy(proxy),
															#line 4399 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   targetVersion(targetVersion),
															#line 4399 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   lockDB(lockDB),
															#line 4399 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   randomUID(randomUID),
															#line 4399 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   addPrefix(addPrefix),
															#line 4399 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   removePrefix(removePrefix),
															#line 4410 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   bc(IBackupContainer::openContainer(bcUrl.toString(), proxy, {}))
															#line 38839 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("submitParallelRestore", reinterpret_cast<unsigned long>(this));

	}
	~SubmitParallelRestoreActorState() 
	{
		fdb_probe_actor_destroy("submitParallelRestore", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 4411 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<BackupDescription> __when_expr_0 = bc->describeBackup();
															#line 4411 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<SubmitParallelRestoreActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 38856 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<SubmitParallelRestoreActor*>(this)->actor_wait_state = 1;
															#line 4411 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< SubmitParallelRestoreActor, 0, BackupDescription >*>(static_cast<SubmitParallelRestoreActor*>(this)));
															#line 38861 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~SubmitParallelRestoreActorState();
		static_cast<SubmitParallelRestoreActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 4412 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_1 = desc.resolveVersionTimes(cx);
															#line 4412 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<SubmitParallelRestoreActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 38886 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<SubmitParallelRestoreActor*>(this)->actor_wait_state = 2;
															#line 4412 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< SubmitParallelRestoreActor, 1, Void >*>(static_cast<SubmitParallelRestoreActor*>(this)));
															#line 38891 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1when1(BackupDescription const& __desc,int loopDepth) 
	{
															#line 4411 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		desc = __desc;
															#line 38900 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1when1(BackupDescription && __desc,int loopDepth) 
	{
		desc = std::move(__desc);
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<SubmitParallelRestoreActor*>(this)->actor_wait_state > 0) static_cast<SubmitParallelRestoreActor*>(this)->actor_wait_state = 0;
		static_cast<SubmitParallelRestoreActor*>(this)->ActorCallback< SubmitParallelRestoreActor, 0, BackupDescription >::remove();

	}
	void a_callback_fire(ActorCallback< SubmitParallelRestoreActor, 0, BackupDescription >*,BackupDescription const& value) 
	{
		fdb_probe_actor_enter("submitParallelRestore", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("submitParallelRestore", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< SubmitParallelRestoreActor, 0, BackupDescription >*,BackupDescription && value) 
	{
		fdb_probe_actor_enter("submitParallelRestore", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("submitParallelRestore", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< SubmitParallelRestoreActor, 0, BackupDescription >*,Error err) 
	{
		fdb_probe_actor_enter("submitParallelRestore", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("submitParallelRestore", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont2(Void const& _,int loopDepth) 
	{
															#line 4414 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (targetVersion == invalidVersion && desc.maxRestorableVersion.present())
															#line 38967 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 4415 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			targetVersion = desc.maxRestorableVersion.get();
															#line 4416 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			TraceEvent(SevWarn, "FastRestoreSubmitRestoreRequestWithInvalidTargetVersion") .detail("OverrideTargetVersion", targetVersion);
															#line 38973 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 4420 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Optional<RestorableFileSet>> __when_expr_2 = bc->getRestoreSet(targetVersion);
															#line 4420 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<SubmitParallelRestoreActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 38979 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont2when1(__when_expr_2.get(), loopDepth); };
		static_cast<SubmitParallelRestoreActor*>(this)->actor_wait_state = 3;
															#line 4420 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< SubmitParallelRestoreActor, 2, Optional<RestorableFileSet> >*>(static_cast<SubmitParallelRestoreActor*>(this)));
															#line 38984 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont2(Void && _,int loopDepth) 
	{
															#line 4414 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (targetVersion == invalidVersion && desc.maxRestorableVersion.present())
															#line 38993 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 4415 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			targetVersion = desc.maxRestorableVersion.get();
															#line 4416 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			TraceEvent(SevWarn, "FastRestoreSubmitRestoreRequestWithInvalidTargetVersion") .detail("OverrideTargetVersion", targetVersion);
															#line 38999 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 4420 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Optional<RestorableFileSet>> __when_expr_2 = bc->getRestoreSet(targetVersion);
															#line 4420 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<SubmitParallelRestoreActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 39005 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont2when1(__when_expr_2.get(), loopDepth); };
		static_cast<SubmitParallelRestoreActor*>(this)->actor_wait_state = 3;
															#line 4420 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< SubmitParallelRestoreActor, 2, Optional<RestorableFileSet> >*>(static_cast<SubmitParallelRestoreActor*>(this)));
															#line 39010 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<SubmitParallelRestoreActor*>(this)->actor_wait_state > 0) static_cast<SubmitParallelRestoreActor*>(this)->actor_wait_state = 0;
		static_cast<SubmitParallelRestoreActor*>(this)->ActorCallback< SubmitParallelRestoreActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< SubmitParallelRestoreActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("submitParallelRestore", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("submitParallelRestore", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< SubmitParallelRestoreActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("submitParallelRestore", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("submitParallelRestore", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< SubmitParallelRestoreActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("submitParallelRestore", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("submitParallelRestore", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont3(Optional<RestorableFileSet> const& restoreSet,int loopDepth) 
	{
															#line 4422 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!restoreSet.present())
															#line 39082 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 4423 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			TraceEvent(SevWarn, "FileBackupAgentRestoreNotPossible") .detail("BackupContainer", bc->getURL()) .detail("TargetVersion", targetVersion);
															#line 4426 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			return a_body1Catch1(restore_invalid_version(), loopDepth);
															#line 39088 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 4429 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent("FastRestoreSubmitRestoreRequest") .detail("BackupDesc", desc.toString()) .detail("TargetVersion", targetVersion);
															#line 4433 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr = Reference<ReadYourWritesTransaction>(new ReadYourWritesTransaction(cx));
															#line 4434 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		restoreIndex = 0;
															#line 4435 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		numTries = 0;
															#line 4437 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		;
															#line 39100 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont3loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1cont3(Optional<RestorableFileSet> && restoreSet,int loopDepth) 
	{
															#line 4422 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!restoreSet.present())
															#line 39109 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 4423 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			TraceEvent(SevWarn, "FileBackupAgentRestoreNotPossible") .detail("BackupContainer", bc->getURL()) .detail("TargetVersion", targetVersion);
															#line 4426 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			return a_body1Catch1(restore_invalid_version(), loopDepth);
															#line 39115 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 4429 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent("FastRestoreSubmitRestoreRequest") .detail("BackupDesc", desc.toString()) .detail("TargetVersion", targetVersion);
															#line 4433 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr = Reference<ReadYourWritesTransaction>(new ReadYourWritesTransaction(cx));
															#line 4434 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		restoreIndex = 0;
															#line 4435 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		numTries = 0;
															#line 4437 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		;
															#line 39127 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont3loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1cont2when1(Optional<RestorableFileSet> const& restoreSet,int loopDepth) 
	{
		loopDepth = a_body1cont3(restoreSet, loopDepth);

		return loopDepth;
	}
	int a_body1cont2when1(Optional<RestorableFileSet> && restoreSet,int loopDepth) 
	{
		loopDepth = a_body1cont3(std::move(restoreSet), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<SubmitParallelRestoreActor*>(this)->actor_wait_state > 0) static_cast<SubmitParallelRestoreActor*>(this)->actor_wait_state = 0;
		static_cast<SubmitParallelRestoreActor*>(this)->ActorCallback< SubmitParallelRestoreActor, 2, Optional<RestorableFileSet> >::remove();

	}
	void a_callback_fire(ActorCallback< SubmitParallelRestoreActor, 2, Optional<RestorableFileSet> >*,Optional<RestorableFileSet> const& value) 
	{
		fdb_probe_actor_enter("submitParallelRestore", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("submitParallelRestore", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< SubmitParallelRestoreActor, 2, Optional<RestorableFileSet> >*,Optional<RestorableFileSet> && value) 
	{
		fdb_probe_actor_enter("submitParallelRestore", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("submitParallelRestore", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< SubmitParallelRestoreActor, 2, Optional<RestorableFileSet> >*,Error err) 
	{
		fdb_probe_actor_enter("submitParallelRestore", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("submitParallelRestore", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1cont5(int loopDepth) 
	{
															#line 4457 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr->reset();
															#line 4458 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		numTries = 0;
															#line 4459 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		;
															#line 39203 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont5loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1cont3loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1(int loopDepth) 
	{
		try {
															#line 4439 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (lockDB)
															#line 39220 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			{
															#line 4440 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				StrictFuture<Void> __when_expr_3 = lockDatabase(cx, randomUID);
															#line 4440 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				if (static_cast<SubmitParallelRestoreActor*>(this)->actor_wait_state < 0) return a_body1cont3loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 39226 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1cont3loopBody1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1cont3loopBody1when1(__when_expr_3.get(), loopDepth); };
				static_cast<SubmitParallelRestoreActor*>(this)->actor_wait_state = 4;
															#line 4440 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< SubmitParallelRestoreActor, 3, Void >*>(static_cast<SubmitParallelRestoreActor*>(this)));
															#line 39231 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				loopDepth = 0;
			}
			else
			{
				loopDepth = a_body1cont3loopBody1cont2(loopDepth);
			}
		}
		catch (Error& error) {
			loopDepth = a_body1cont3loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1cont3loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont3break1(int loopDepth) 
	{
		try {
			return a_body1cont5(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont3loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1cont3loopHead1(0);

		return loopDepth;
	}
	int a_body1cont3loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 4447 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			TraceEvent(numTries > 50 ? SevError : SevInfo, "FastRestoreToolSubmitRestoreRequestsMayFail") .error(e) .detail("Reason", "DB is not properly locked") .detail("ExpectedLockID", randomUID);
															#line 4451 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			numTries++;
															#line 4452 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_5 = tr->onError(e);
															#line 4452 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<SubmitParallelRestoreActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 39277 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_5.isReady()) { if (__when_expr_5.isError()) return a_body1Catch1(__when_expr_5.getError(), std::max(0, loopDepth - 1)); else return a_body1cont3loopBody1Catch1when1(__when_expr_5.get(), loopDepth); };
			static_cast<SubmitParallelRestoreActor*>(this)->actor_wait_state = 6;
															#line 4452 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_5.addCallbackAndClear(static_cast<ActorCallback< SubmitParallelRestoreActor, 5, Void >*>(static_cast<SubmitParallelRestoreActor*>(this)));
															#line 39282 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1cont3loopBody1cont2(int loopDepth) 
	{
															#line 4442 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_4 = checkDatabaseLock(tr, randomUID);
															#line 4442 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<SubmitParallelRestoreActor*>(this)->actor_wait_state < 0) return a_body1cont3loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 39299 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1cont3loopBody1Catch1(__when_expr_4.getError(), loopDepth); else return a_body1cont3loopBody1cont2when1(__when_expr_4.get(), loopDepth); };
		static_cast<SubmitParallelRestoreActor*>(this)->actor_wait_state = 5;
															#line 4442 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< SubmitParallelRestoreActor, 4, Void >*>(static_cast<SubmitParallelRestoreActor*>(this)));
															#line 39304 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont3loopBody1cont3(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1cont2(loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1cont3(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1cont2(loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1cont3(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1cont3(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<SubmitParallelRestoreActor*>(this)->actor_wait_state > 0) static_cast<SubmitParallelRestoreActor*>(this)->actor_wait_state = 0;
		static_cast<SubmitParallelRestoreActor*>(this)->ActorCallback< SubmitParallelRestoreActor, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< SubmitParallelRestoreActor, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("submitParallelRestore", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont3loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont3loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont3loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("submitParallelRestore", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< SubmitParallelRestoreActor, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("submitParallelRestore", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont3loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont3loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont3loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("submitParallelRestore", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< SubmitParallelRestoreActor, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("submitParallelRestore", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont3loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont3loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont3loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("submitParallelRestore", reinterpret_cast<unsigned long>(this), 3);

	}
	int a_body1cont3loopBody1cont4(Void const& _,int loopDepth) 
	{
															#line 4444 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent("FastRestoreToolSubmitRestoreRequests").detail("DBIsLocked", randomUID);
															#line 39388 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		return a_body1cont3break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1cont3loopBody1cont4(Void && _,int loopDepth) 
	{
															#line 4444 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent("FastRestoreToolSubmitRestoreRequests").detail("DBIsLocked", randomUID);
															#line 39397 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		return a_body1cont3break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1cont3loopBody1cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1cont4(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1cont4(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose5() 
	{
		if (static_cast<SubmitParallelRestoreActor*>(this)->actor_wait_state > 0) static_cast<SubmitParallelRestoreActor*>(this)->actor_wait_state = 0;
		static_cast<SubmitParallelRestoreActor*>(this)->ActorCallback< SubmitParallelRestoreActor, 4, Void >::remove();

	}
	void a_callback_fire(ActorCallback< SubmitParallelRestoreActor, 4, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("submitParallelRestore", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont3loopBody1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont3loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont3loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("submitParallelRestore", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_fire(ActorCallback< SubmitParallelRestoreActor, 4, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("submitParallelRestore", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont3loopBody1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont3loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont3loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("submitParallelRestore", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_error(ActorCallback< SubmitParallelRestoreActor, 4, Void >*,Error err) 
	{
		fdb_probe_actor_enter("submitParallelRestore", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont3loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont3loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont3loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("submitParallelRestore", reinterpret_cast<unsigned long>(this), 4);

	}
	int a_body1cont3loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose6() 
	{
		if (static_cast<SubmitParallelRestoreActor*>(this)->actor_wait_state > 0) static_cast<SubmitParallelRestoreActor*>(this)->actor_wait_state = 0;
		static_cast<SubmitParallelRestoreActor*>(this)->ActorCallback< SubmitParallelRestoreActor, 5, Void >::remove();

	}
	void a_callback_fire(ActorCallback< SubmitParallelRestoreActor, 5, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("submitParallelRestore", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1cont3loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("submitParallelRestore", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_fire(ActorCallback< SubmitParallelRestoreActor, 5, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("submitParallelRestore", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1cont3loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("submitParallelRestore", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_error(ActorCallback< SubmitParallelRestoreActor, 5, Void >*,Error err) 
	{
		fdb_probe_actor_enter("submitParallelRestore", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("submitParallelRestore", reinterpret_cast<unsigned long>(this), 5);

	}
	int a_body1cont7(int loopDepth) 
	{
															#line 4491 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<SubmitParallelRestoreActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~SubmitParallelRestoreActorState(); static_cast<SubmitParallelRestoreActor*>(this)->destroy(); return 0; }
															#line 39544 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<SubmitParallelRestoreActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~SubmitParallelRestoreActorState();
		static_cast<SubmitParallelRestoreActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont5loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1cont5loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1cont5loopBody1(int loopDepth) 
	{
															#line 4460 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 4461 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr->setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 39565 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		try {
															#line 4464 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			for(restoreIndex = 0;restoreIndex < backupRanges.size();restoreIndex++) {
															#line 4465 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				auto range = backupRanges[restoreIndex];
															#line 4466 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				Standalone<StringRef> restoreTag(backupTag.toString() + "_" + std::to_string(restoreIndex));
															#line 4468 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				struct RestoreRequest restoreRequest(restoreIndex, restoreTag, bcUrl, proxy, targetVersion, range, deterministicRandom()->randomUniqueID(), addPrefix, removePrefix);
															#line 4477 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				tr->set(restoreRequestKeyFor(restoreRequest.index), restoreRequestValue(restoreRequest));
															#line 39577 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			}
															#line 4479 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->set(restoreRequestTriggerKey, restoreRequestTriggerValue(deterministicRandom()->randomUniqueID(), backupRanges.size()));
															#line 4481 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_6 = tr->commit();
															#line 4481 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<SubmitParallelRestoreActor*>(this)->actor_wait_state < 0) return a_body1cont5loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 39585 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_6.isReady()) { if (__when_expr_6.isError()) return a_body1cont5loopBody1Catch1(__when_expr_6.getError(), loopDepth); else return a_body1cont5loopBody1when1(__when_expr_6.get(), loopDepth); };
			static_cast<SubmitParallelRestoreActor*>(this)->actor_wait_state = 7;
															#line 4481 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_6.addCallbackAndClear(static_cast<ActorCallback< SubmitParallelRestoreActor, 6, Void >*>(static_cast<SubmitParallelRestoreActor*>(this)));
															#line 39590 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1cont5loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1cont5loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont5break1(int loopDepth) 
	{
		try {
			return a_body1cont7(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont5loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1cont5loopHead1(0);

		return loopDepth;
	}
	int a_body1cont5loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 4484 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			TraceEvent(numTries > 50 ? SevError : SevInfo, "FastRestoreToolSubmitRestoreRequestsRetry") .error(e) .detail("RestoreIndex", restoreIndex);
															#line 4487 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			numTries++;
															#line 4488 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_7 = tr->onError(e);
															#line 4488 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<SubmitParallelRestoreActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 39631 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_7.isReady()) { if (__when_expr_7.isError()) return a_body1Catch1(__when_expr_7.getError(), std::max(0, loopDepth - 1)); else return a_body1cont5loopBody1Catch1when1(__when_expr_7.get(), loopDepth); };
			static_cast<SubmitParallelRestoreActor*>(this)->actor_wait_state = 8;
															#line 4488 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_7.addCallbackAndClear(static_cast<ActorCallback< SubmitParallelRestoreActor, 7, Void >*>(static_cast<SubmitParallelRestoreActor*>(this)));
															#line 39636 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1cont5loopBody1cont2(Void const& _,int loopDepth) 
	{
		return a_body1cont5break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1cont5loopBody1cont2(Void && _,int loopDepth) 
	{
		return a_body1cont5break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1cont5loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont5loopBody1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont5loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont5loopBody1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose7() 
	{
		if (static_cast<SubmitParallelRestoreActor*>(this)->actor_wait_state > 0) static_cast<SubmitParallelRestoreActor*>(this)->actor_wait_state = 0;
		static_cast<SubmitParallelRestoreActor*>(this)->ActorCallback< SubmitParallelRestoreActor, 6, Void >::remove();

	}
	void a_callback_fire(ActorCallback< SubmitParallelRestoreActor, 6, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("submitParallelRestore", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1cont5loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont5loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont5loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("submitParallelRestore", reinterpret_cast<unsigned long>(this), 6);

	}
	void a_callback_fire(ActorCallback< SubmitParallelRestoreActor, 6, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("submitParallelRestore", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1cont5loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont5loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont5loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("submitParallelRestore", reinterpret_cast<unsigned long>(this), 6);

	}
	void a_callback_error(ActorCallback< SubmitParallelRestoreActor, 6, Void >*,Error err) 
	{
		fdb_probe_actor_enter("submitParallelRestore", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1cont5loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont5loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont5loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("submitParallelRestore", reinterpret_cast<unsigned long>(this), 6);

	}
	int a_body1cont5loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont5loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont5loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont5loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont5loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont5loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont5loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont5loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose8() 
	{
		if (static_cast<SubmitParallelRestoreActor*>(this)->actor_wait_state > 0) static_cast<SubmitParallelRestoreActor*>(this)->actor_wait_state = 0;
		static_cast<SubmitParallelRestoreActor*>(this)->ActorCallback< SubmitParallelRestoreActor, 7, Void >::remove();

	}
	void a_callback_fire(ActorCallback< SubmitParallelRestoreActor, 7, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("submitParallelRestore", reinterpret_cast<unsigned long>(this), 7);
		a_exitChoose8();
		try {
			a_body1cont5loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("submitParallelRestore", reinterpret_cast<unsigned long>(this), 7);

	}
	void a_callback_fire(ActorCallback< SubmitParallelRestoreActor, 7, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("submitParallelRestore", reinterpret_cast<unsigned long>(this), 7);
		a_exitChoose8();
		try {
			a_body1cont5loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("submitParallelRestore", reinterpret_cast<unsigned long>(this), 7);

	}
	void a_callback_error(ActorCallback< SubmitParallelRestoreActor, 7, Void >*,Error err) 
	{
		fdb_probe_actor_enter("submitParallelRestore", reinterpret_cast<unsigned long>(this), 7);
		a_exitChoose8();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("submitParallelRestore", reinterpret_cast<unsigned long>(this), 7);

	}
															#line 4399 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Database cx;
															#line 4399 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Key backupTag;
															#line 4399 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Standalone<VectorRef<KeyRangeRef>> backupRanges;
															#line 4399 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Key bcUrl;
															#line 4399 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Optional<std::string> proxy;
															#line 4399 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Version targetVersion;
															#line 4399 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	LockDB lockDB;
															#line 4399 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	UID randomUID;
															#line 4399 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Key addPrefix;
															#line 4399 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Key removePrefix;
															#line 4410 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<IBackupContainer> bc;
															#line 4411 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	BackupDescription desc;
															#line 4433 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 4434 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int restoreIndex;
															#line 4435 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int numTries;
															#line 39827 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via submitParallelRestore()
															#line 4399 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class SubmitParallelRestoreActor final : public Actor<Void>, public ActorCallback< SubmitParallelRestoreActor, 0, BackupDescription >, public ActorCallback< SubmitParallelRestoreActor, 1, Void >, public ActorCallback< SubmitParallelRestoreActor, 2, Optional<RestorableFileSet> >, public ActorCallback< SubmitParallelRestoreActor, 3, Void >, public ActorCallback< SubmitParallelRestoreActor, 4, Void >, public ActorCallback< SubmitParallelRestoreActor, 5, Void >, public ActorCallback< SubmitParallelRestoreActor, 6, Void >, public ActorCallback< SubmitParallelRestoreActor, 7, Void >, public FastAllocated<SubmitParallelRestoreActor>, public SubmitParallelRestoreActorState<SubmitParallelRestoreActor> {
															#line 39832 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<SubmitParallelRestoreActor>::operator new;
	using FastAllocated<SubmitParallelRestoreActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< SubmitParallelRestoreActor, 0, BackupDescription >;
friend struct ActorCallback< SubmitParallelRestoreActor, 1, Void >;
friend struct ActorCallback< SubmitParallelRestoreActor, 2, Optional<RestorableFileSet> >;
friend struct ActorCallback< SubmitParallelRestoreActor, 3, Void >;
friend struct ActorCallback< SubmitParallelRestoreActor, 4, Void >;
friend struct ActorCallback< SubmitParallelRestoreActor, 5, Void >;
friend struct ActorCallback< SubmitParallelRestoreActor, 6, Void >;
friend struct ActorCallback< SubmitParallelRestoreActor, 7, Void >;
															#line 4399 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	SubmitParallelRestoreActor(Database const& cx,Key const& backupTag,Standalone<VectorRef<KeyRangeRef>> const& backupRanges,Key const& bcUrl,Optional<std::string> const& proxy,Version const& targetVersion,LockDB const& lockDB,UID const& randomUID,Key const& addPrefix,Key const& removePrefix) 
															#line 39850 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<Void>(),
		   SubmitParallelRestoreActorState<SubmitParallelRestoreActor>(cx, backupTag, backupRanges, bcUrl, proxy, targetVersion, lockDB, randomUID, addPrefix, removePrefix)
	{
		fdb_probe_actor_enter("submitParallelRestore", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("submitParallelRestore");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("submitParallelRestore", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< SubmitParallelRestoreActor, 0, BackupDescription >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< SubmitParallelRestoreActor, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< SubmitParallelRestoreActor, 2, Optional<RestorableFileSet> >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< SubmitParallelRestoreActor, 3, Void >*)0, actor_cancelled()); break;
		case 5: this->a_callback_error((ActorCallback< SubmitParallelRestoreActor, 4, Void >*)0, actor_cancelled()); break;
		case 6: this->a_callback_error((ActorCallback< SubmitParallelRestoreActor, 5, Void >*)0, actor_cancelled()); break;
		case 7: this->a_callback_error((ActorCallback< SubmitParallelRestoreActor, 6, Void >*)0, actor_cancelled()); break;
		case 8: this->a_callback_error((ActorCallback< SubmitParallelRestoreActor, 7, Void >*)0, actor_cancelled()); break;
		}

	}
};
															#line 4399 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<Void> submitParallelRestore( Database const& cx, Key const& backupTag, Standalone<VectorRef<KeyRangeRef>> const& backupRanges, Key const& bcUrl, Optional<std::string> const& proxy, Version const& targetVersion, LockDB const& lockDB, UID const& randomUID, Key const& addPrefix, Key const& removePrefix ) {
															#line 4399 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<Void>(new SubmitParallelRestoreActor(cx, backupTag, backupRanges, bcUrl, proxy, targetVersion, lockDB, randomUID, addPrefix, removePrefix));
															#line 39884 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 4493 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

	// This method will return the final status of the backup at tag, and return the URL that was used on the tag
	// when that status value was read.
																#line 39891 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via waitBackup()
															#line 4496 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class WaitBackupActor>
															#line 4496 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class WaitBackupActorState {
															#line 39897 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 4496 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	WaitBackupActorState(FileBackupAgent* const& backupAgent,Database const& cx,std::string const& tagName,StopWhenDone const& stopWhenDone,Reference<IBackupContainer>* const& pContainer = nullptr,UID* const& pUID = nullptr) 
															#line 4496 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 4496 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : backupAgent(backupAgent),
															#line 4496 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   cx(cx),
															#line 4496 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   tagName(tagName),
															#line 4496 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   stopWhenDone(stopWhenDone),
															#line 4496 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   pContainer(pContainer),
															#line 4496 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   pUID(pUID),
															#line 4502 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   backTrace(),
															#line 4503 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   tag(makeBackupTag(tagName))
															#line 39918 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("waitBackup", reinterpret_cast<unsigned long>(this));

	}
	~WaitBackupActorState() 
	{
		fdb_probe_actor_destroy("waitBackup", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 4505 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			;
															#line 39933 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~WaitBackupActorState();
		static_cast<WaitBackupActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
															#line 4506 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr = Reference<ReadYourWritesTransaction>(new ReadYourWritesTransaction(cx));
															#line 4507 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 4508 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr->setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 39967 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		try {
															#line 4511 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Optional<UidAndAbortedFlagT>> __when_expr_0 = tag.get(tr);
															#line 4511 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<WaitBackupActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 39973 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1loopBody1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
			static_cast<WaitBackupActor*>(this)->actor_wait_state = 1;
															#line 4511 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< WaitBackupActor, 0, Optional<UidAndAbortedFlagT> >*>(static_cast<WaitBackupActor*>(this)));
															#line 39978 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 4543 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_5 = tr->onError(e);
															#line 4543 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<WaitBackupActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 40002 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_5.isReady()) { if (__when_expr_5.isError()) return a_body1Catch1(__when_expr_5.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1Catch1when1(__when_expr_5.get(), loopDepth); };
			static_cast<WaitBackupActor*>(this)->actor_wait_state = 6;
															#line 4543 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_5.addCallbackAndClear(static_cast<ActorCallback< WaitBackupActor, 5, Void >*>(static_cast<WaitBackupActor*>(this)));
															#line 40007 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(int loopDepth) 
	{
															#line 4512 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!oldUidAndAborted.present())
															#line 40022 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 4513 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (!static_cast<WaitBackupActor*>(this)->SAV<EBackupState>::futures) { (void)(EBackupState::STATE_NEVERRAN); this->~WaitBackupActorState(); static_cast<WaitBackupActor*>(this)->destroy(); return 0; }
															#line 40026 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			new (&static_cast<WaitBackupActor*>(this)->SAV< EBackupState >::value()) EBackupState(EBackupState::STATE_NEVERRAN);
			this->~WaitBackupActorState();
			static_cast<WaitBackupActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 4516 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		config = BackupConfig(oldUidAndAborted.get().first);
															#line 4517 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<EBackupState> __when_expr_1 = config.stateEnum().getD(tr, Snapshot::False, EBackupState::STATE_NEVERRAN);
															#line 4517 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<WaitBackupActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 40038 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
		static_cast<WaitBackupActor*>(this)->actor_wait_state = 2;
															#line 4517 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< WaitBackupActor, 1, EBackupState >*>(static_cast<WaitBackupActor*>(this)));
															#line 40043 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1when1(Optional<UidAndAbortedFlagT> const& __oldUidAndAborted,int loopDepth) 
	{
															#line 4511 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		oldUidAndAborted = __oldUidAndAborted;
															#line 40052 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1loopBody1cont2(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Optional<UidAndAbortedFlagT> && __oldUidAndAborted,int loopDepth) 
	{
		oldUidAndAborted = std::move(__oldUidAndAborted);
		loopDepth = a_body1loopBody1cont2(loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<WaitBackupActor*>(this)->actor_wait_state > 0) static_cast<WaitBackupActor*>(this)->actor_wait_state = 0;
		static_cast<WaitBackupActor*>(this)->ActorCallback< WaitBackupActor, 0, Optional<UidAndAbortedFlagT> >::remove();

	}
	void a_callback_fire(ActorCallback< WaitBackupActor, 0, Optional<UidAndAbortedFlagT> >*,Optional<UidAndAbortedFlagT> const& value) 
	{
		fdb_probe_actor_enter("waitBackup", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitBackup", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< WaitBackupActor, 0, Optional<UidAndAbortedFlagT> >*,Optional<UidAndAbortedFlagT> && value) 
	{
		fdb_probe_actor_enter("waitBackup", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitBackup", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< WaitBackupActor, 0, Optional<UidAndAbortedFlagT> >*,Error err) 
	{
		fdb_probe_actor_enter("waitBackup", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitBackup", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1cont3(int loopDepth) 
	{
															#line 4523 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!FileBackupAgent::isRunnable(status) || ((!stopWhenDone) && (EBackupState::STATE_RUNNING_DIFFERENTIAL == status)))
															#line 40119 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 4526 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (pContainer != nullptr)
															#line 40123 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			{
															#line 4527 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				StrictFuture<Reference<IBackupContainer>> __when_expr_2 = config.backupContainer().getOrThrow(tr, Snapshot::False, backup_invalid_info());
															#line 4527 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				if (static_cast<WaitBackupActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 40129 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1loopBody1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1loopBody1cont3when1(__when_expr_2.get(), loopDepth); };
				static_cast<WaitBackupActor*>(this)->actor_wait_state = 3;
															#line 4527 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< WaitBackupActor, 2, Reference<IBackupContainer> >*>(static_cast<WaitBackupActor*>(this)));
															#line 40134 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				loopDepth = 0;
			}
			else
			{
				loopDepth = a_body1loopBody1cont6(loopDepth);
			}
		}
		else
		{
			loopDepth = a_body1loopBody1cont5(loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(EBackupState const& __status,int loopDepth) 
	{
															#line 4517 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		status = __status;
															#line 40153 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1loopBody1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(EBackupState && __status,int loopDepth) 
	{
		status = std::move(__status);
		loopDepth = a_body1loopBody1cont3(loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<WaitBackupActor*>(this)->actor_wait_state > 0) static_cast<WaitBackupActor*>(this)->actor_wait_state = 0;
		static_cast<WaitBackupActor*>(this)->ActorCallback< WaitBackupActor, 1, EBackupState >::remove();

	}
	void a_callback_fire(ActorCallback< WaitBackupActor, 1, EBackupState >*,EBackupState const& value) 
	{
		fdb_probe_actor_enter("waitBackup", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitBackup", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< WaitBackupActor, 1, EBackupState >*,EBackupState && value) 
	{
		fdb_probe_actor_enter("waitBackup", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitBackup", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< WaitBackupActor, 1, EBackupState >*,Error err) 
	{
		fdb_probe_actor_enter("waitBackup", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitBackup", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1loopBody1cont5(int loopDepth) 
	{
															#line 4539 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		watchFuture = tr->watch(config.stateEnum().key);
															#line 4540 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_3 = tr->commit();
															#line 4540 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<WaitBackupActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 40224 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1loopBody1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1loopBody1cont5when1(__when_expr_3.get(), loopDepth); };
		static_cast<WaitBackupActor*>(this)->actor_wait_state = 4;
															#line 4540 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< WaitBackupActor, 3, Void >*>(static_cast<WaitBackupActor*>(this)));
															#line 40229 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont6(int loopDepth) 
	{
															#line 4532 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (pUID != nullptr)
															#line 40238 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 4533 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			*pUID = oldUidAndAborted.get().first;
															#line 40242 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 4536 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<WaitBackupActor*>(this)->SAV<EBackupState>::futures) { (void)(status); this->~WaitBackupActorState(); static_cast<WaitBackupActor*>(this)->destroy(); return 0; }
															#line 40246 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<WaitBackupActor*>(this)->SAV< EBackupState >::value()) EBackupState(std::move(status)); // state_var_RVO
		this->~WaitBackupActorState();
		static_cast<WaitBackupActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1cont7(Reference<IBackupContainer> const& c,int loopDepth) 
	{
															#line 4529 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		*pContainer = fileBackup::getBackupContainerWithProxy(c);
															#line 40258 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1loopBody1cont6(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont7(Reference<IBackupContainer> && c,int loopDepth) 
	{
															#line 4529 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		*pContainer = fileBackup::getBackupContainerWithProxy(c);
															#line 40267 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1loopBody1cont6(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont3when1(Reference<IBackupContainer> const& c,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont7(c, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont3when1(Reference<IBackupContainer> && c,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont7(std::move(c), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<WaitBackupActor*>(this)->actor_wait_state > 0) static_cast<WaitBackupActor*>(this)->actor_wait_state = 0;
		static_cast<WaitBackupActor*>(this)->ActorCallback< WaitBackupActor, 2, Reference<IBackupContainer> >::remove();

	}
	void a_callback_fire(ActorCallback< WaitBackupActor, 2, Reference<IBackupContainer> >*,Reference<IBackupContainer> const& value) 
	{
		fdb_probe_actor_enter("waitBackup", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont3when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitBackup", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< WaitBackupActor, 2, Reference<IBackupContainer> >*,Reference<IBackupContainer> && value) 
	{
		fdb_probe_actor_enter("waitBackup", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont3when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitBackup", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< WaitBackupActor, 2, Reference<IBackupContainer> >*,Error err) 
	{
		fdb_probe_actor_enter("waitBackup", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitBackup", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1loopBody1cont11(Void const& _,int loopDepth) 
	{
															#line 4541 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_4 = watchFuture;
															#line 4541 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<WaitBackupActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 40341 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1loopBody1Catch1(__when_expr_4.getError(), loopDepth); else return a_body1loopBody1cont11when1(__when_expr_4.get(), loopDepth); };
		static_cast<WaitBackupActor*>(this)->actor_wait_state = 5;
															#line 4541 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< WaitBackupActor, 4, Void >*>(static_cast<WaitBackupActor*>(this)));
															#line 40346 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont11(Void && _,int loopDepth) 
	{
															#line 4541 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_4 = watchFuture;
															#line 4541 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<WaitBackupActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 40357 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1loopBody1Catch1(__when_expr_4.getError(), loopDepth); else return a_body1loopBody1cont11when1(__when_expr_4.get(), loopDepth); };
		static_cast<WaitBackupActor*>(this)->actor_wait_state = 5;
															#line 4541 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< WaitBackupActor, 4, Void >*>(static_cast<WaitBackupActor*>(this)));
															#line 40362 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont5when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont11(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont5when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont11(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<WaitBackupActor*>(this)->actor_wait_state > 0) static_cast<WaitBackupActor*>(this)->actor_wait_state = 0;
		static_cast<WaitBackupActor*>(this)->ActorCallback< WaitBackupActor, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< WaitBackupActor, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("waitBackup", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1cont5when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitBackup", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< WaitBackupActor, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("waitBackup", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1cont5when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitBackup", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< WaitBackupActor, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("waitBackup", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitBackup", reinterpret_cast<unsigned long>(this), 3);

	}
	int a_body1loopBody1cont11cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont11cont2(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont11cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont11cont2(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont11when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont11cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont11when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont11cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose5() 
	{
		if (static_cast<WaitBackupActor*>(this)->actor_wait_state > 0) static_cast<WaitBackupActor*>(this)->actor_wait_state = 0;
		static_cast<WaitBackupActor*>(this)->ActorCallback< WaitBackupActor, 4, Void >::remove();

	}
	void a_callback_fire(ActorCallback< WaitBackupActor, 4, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("waitBackup", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1loopBody1cont11when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitBackup", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_fire(ActorCallback< WaitBackupActor, 4, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("waitBackup", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1loopBody1cont11when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitBackup", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_error(ActorCallback< WaitBackupActor, 4, Void >*,Error err) 
	{
		fdb_probe_actor_enter("waitBackup", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitBackup", reinterpret_cast<unsigned long>(this), 4);

	}
	int a_body1loopBody1cont11cont2(int loopDepth) 
	{
		try {
			loopDepth = a_body1loopBody1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose6() 
	{
		if (static_cast<WaitBackupActor*>(this)->actor_wait_state > 0) static_cast<WaitBackupActor*>(this)->actor_wait_state = 0;
		static_cast<WaitBackupActor*>(this)->ActorCallback< WaitBackupActor, 5, Void >::remove();

	}
	void a_callback_fire(ActorCallback< WaitBackupActor, 5, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("waitBackup", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitBackup", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_fire(ActorCallback< WaitBackupActor, 5, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("waitBackup", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitBackup", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_error(ActorCallback< WaitBackupActor, 5, Void >*,Error err) 
	{
		fdb_probe_actor_enter("waitBackup", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitBackup", reinterpret_cast<unsigned long>(this), 5);

	}
															#line 4496 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	FileBackupAgent* backupAgent;
															#line 4496 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Database cx;
															#line 4496 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	std::string tagName;
															#line 4496 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	StopWhenDone stopWhenDone;
															#line 4496 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<IBackupContainer>* pContainer;
															#line 4496 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	UID* pUID;
															#line 4502 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	std::string backTrace;
															#line 4503 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	KeyBackedTag tag;
															#line 4506 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 4511 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Optional<UidAndAbortedFlagT> oldUidAndAborted;
															#line 4516 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	BackupConfig config;
															#line 4517 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	EBackupState status;
															#line 4539 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Future<Void> watchFuture;
															#line 40619 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via waitBackup()
															#line 4496 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class WaitBackupActor final : public Actor<EBackupState>, public ActorCallback< WaitBackupActor, 0, Optional<UidAndAbortedFlagT> >, public ActorCallback< WaitBackupActor, 1, EBackupState >, public ActorCallback< WaitBackupActor, 2, Reference<IBackupContainer> >, public ActorCallback< WaitBackupActor, 3, Void >, public ActorCallback< WaitBackupActor, 4, Void >, public ActorCallback< WaitBackupActor, 5, Void >, public FastAllocated<WaitBackupActor>, public WaitBackupActorState<WaitBackupActor> {
															#line 40624 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<WaitBackupActor>::operator new;
	using FastAllocated<WaitBackupActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<EBackupState>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< WaitBackupActor, 0, Optional<UidAndAbortedFlagT> >;
friend struct ActorCallback< WaitBackupActor, 1, EBackupState >;
friend struct ActorCallback< WaitBackupActor, 2, Reference<IBackupContainer> >;
friend struct ActorCallback< WaitBackupActor, 3, Void >;
friend struct ActorCallback< WaitBackupActor, 4, Void >;
friend struct ActorCallback< WaitBackupActor, 5, Void >;
															#line 4496 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	WaitBackupActor(FileBackupAgent* const& backupAgent,Database const& cx,std::string const& tagName,StopWhenDone const& stopWhenDone,Reference<IBackupContainer>* const& pContainer = nullptr,UID* const& pUID = nullptr) 
															#line 40640 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<EBackupState>(),
		   WaitBackupActorState<WaitBackupActor>(backupAgent, cx, tagName, stopWhenDone, pContainer, pUID)
	{
		fdb_probe_actor_enter("waitBackup", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("waitBackup");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("waitBackup", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< WaitBackupActor, 0, Optional<UidAndAbortedFlagT> >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< WaitBackupActor, 1, EBackupState >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< WaitBackupActor, 2, Reference<IBackupContainer> >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< WaitBackupActor, 3, Void >*)0, actor_cancelled()); break;
		case 5: this->a_callback_error((ActorCallback< WaitBackupActor, 4, Void >*)0, actor_cancelled()); break;
		case 6: this->a_callback_error((ActorCallback< WaitBackupActor, 5, Void >*)0, actor_cancelled()); break;
		}

	}
};
															#line 4496 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<EBackupState> waitBackup( FileBackupAgent* const& backupAgent, Database const& cx, std::string const& tagName, StopWhenDone const& stopWhenDone, Reference<IBackupContainer>* const& pContainer = nullptr, UID* const& pUID = nullptr ) {
															#line 4496 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<EBackupState>(new WaitBackupActor(backupAgent, cx, tagName, stopWhenDone, pContainer, pUID));
															#line 40672 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 4547 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

	// TODO: Get rid of all of these confusing boolean flags
																#line 40678 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via submitBackup()
															#line 4549 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class SubmitBackupActor>
															#line 4549 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class SubmitBackupActorState {
															#line 40684 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 4549 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	SubmitBackupActorState(FileBackupAgent* const& backupAgent,Reference<ReadYourWritesTransaction> const& tr,Key const& outContainer,Optional<std::string> const& proxy,int const& initialSnapshotIntervalSeconds,int const& snapshotIntervalSeconds,std::string const& tagName,Standalone<VectorRef<KeyRangeRef>> const& backupRanges,StopWhenDone const& stopWhenDone,UsePartitionedLog const& partitionedLog,IncrementalBackupOnly const& incrementalBackupOnly,Optional<std::string> const& encryptionKeyFileName) 
															#line 4549 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 4549 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : backupAgent(backupAgent),
															#line 4549 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   tr(tr),
															#line 4549 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   outContainer(outContainer),
															#line 4549 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   proxy(proxy),
															#line 4549 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   initialSnapshotIntervalSeconds(initialSnapshotIntervalSeconds),
															#line 4549 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   snapshotIntervalSeconds(snapshotIntervalSeconds),
															#line 4549 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   tagName(tagName),
															#line 4549 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   backupRanges(backupRanges),
															#line 4549 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   stopWhenDone(stopWhenDone),
															#line 4549 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   partitionedLog(partitionedLog),
															#line 4549 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   incrementalBackupOnly(incrementalBackupOnly),
															#line 4549 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   encryptionKeyFileName(encryptionKeyFileName)
															#line 40713 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("submitBackup", reinterpret_cast<unsigned long>(this));

	}
	~SubmitBackupActorState() 
	{
		fdb_probe_actor_destroy("submitBackup", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 4561 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 4562 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 4563 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::COMMIT_ON_FIRST_PROXY);
															#line 4565 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			TraceEvent(SevInfo, "FBA_SubmitBackup") .detail("TagName", tagName.c_str()) .detail("StopWhenDone", stopWhenDone) .detail("UsePartitionedLog", partitionedLog) .detail("OutContainer", outContainer.toString());
															#line 4571 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tag = makeBackupTag(tagName);
															#line 4572 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Optional<UidAndAbortedFlagT>> __when_expr_0 = tag.get(tr);
															#line 4572 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<SubmitBackupActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 40740 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<SubmitBackupActor*>(this)->actor_wait_state = 1;
															#line 4572 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< SubmitBackupActor, 0, Optional<UidAndAbortedFlagT> >*>(static_cast<SubmitBackupActor*>(this)));
															#line 40745 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~SubmitBackupActorState();
		static_cast<SubmitBackupActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Optional<UidAndAbortedFlagT> const& uidAndAbortedFlag,int loopDepth) 
	{
															#line 4573 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (uidAndAbortedFlag.present())
															#line 40768 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 4574 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			prevConfig = BackupConfig(uidAndAbortedFlag.get().first);
															#line 4575 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<EBackupState> __when_expr_1 = prevConfig.stateEnum().getD(tr, Snapshot::False, EBackupState::STATE_NEVERRAN);
															#line 4575 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<SubmitBackupActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 40776 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
			static_cast<SubmitBackupActor*>(this)->actor_wait_state = 2;
															#line 4575 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< SubmitBackupActor, 1, EBackupState >*>(static_cast<SubmitBackupActor*>(this)));
															#line 40781 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1cont2(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont1(Optional<UidAndAbortedFlagT> && uidAndAbortedFlag,int loopDepth) 
	{
															#line 4573 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (uidAndAbortedFlag.present())
															#line 40795 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 4574 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			prevConfig = BackupConfig(uidAndAbortedFlag.get().first);
															#line 4575 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<EBackupState> __when_expr_1 = prevConfig.stateEnum().getD(tr, Snapshot::False, EBackupState::STATE_NEVERRAN);
															#line 4575 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<SubmitBackupActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 40803 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
			static_cast<SubmitBackupActor*>(this)->actor_wait_state = 2;
															#line 4575 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< SubmitBackupActor, 1, EBackupState >*>(static_cast<SubmitBackupActor*>(this)));
															#line 40808 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1cont2(loopDepth);
		}

		return loopDepth;
	}
	int a_body1when1(Optional<UidAndAbortedFlagT> const& uidAndAbortedFlag,int loopDepth) 
	{
		loopDepth = a_body1cont1(uidAndAbortedFlag, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Optional<UidAndAbortedFlagT> && uidAndAbortedFlag,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(uidAndAbortedFlag), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<SubmitBackupActor*>(this)->actor_wait_state > 0) static_cast<SubmitBackupActor*>(this)->actor_wait_state = 0;
		static_cast<SubmitBackupActor*>(this)->ActorCallback< SubmitBackupActor, 0, Optional<UidAndAbortedFlagT> >::remove();

	}
	void a_callback_fire(ActorCallback< SubmitBackupActor, 0, Optional<UidAndAbortedFlagT> >*,Optional<UidAndAbortedFlagT> const& value) 
	{
		fdb_probe_actor_enter("submitBackup", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("submitBackup", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< SubmitBackupActor, 0, Optional<UidAndAbortedFlagT> >*,Optional<UidAndAbortedFlagT> && value) 
	{
		fdb_probe_actor_enter("submitBackup", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("submitBackup", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< SubmitBackupActor, 0, Optional<UidAndAbortedFlagT> >*,Error err) 
	{
		fdb_probe_actor_enter("submitBackup", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("submitBackup", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont2(int loopDepth) 
	{
															#line 4585 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		config = BackupConfig(deterministicRandom()->randomUniqueID());
															#line 4586 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		uid = config.getUid();
															#line 4589 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		nowStr = BackupAgentBase::getCurrentTime();
															#line 4590 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		backupContainer = outContainer.toString();
															#line 4594 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (backupContainer.find("file://") == 0)
															#line 40893 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 4595 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			backupContainer = joinPath(backupContainer, std::string("backup-") + nowStr.toString());
															#line 40897 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 4598 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		bc = IBackupContainer::openContainer(backupContainer, proxy, encryptionKeyFileName);
															#line 40901 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		try {
															#line 4601 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_2 = timeoutError(bc->create(), 30);
															#line 4601 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<SubmitBackupActor*>(this)->actor_wait_state < 0) return a_body1cont2Catch1(actor_cancelled(), loopDepth);
															#line 40907 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1cont2Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont2when1(__when_expr_2.get(), loopDepth); };
			static_cast<SubmitBackupActor*>(this)->actor_wait_state = 3;
															#line 4601 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< SubmitBackupActor, 2, Void >*>(static_cast<SubmitBackupActor*>(this)));
															#line 40912 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1cont2Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1cont2Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont3(int loopDepth) 
	{
															#line 4577 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (FileBackupAgent::isRunnable(prevBackupStatus))
															#line 40927 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 4578 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			return a_body1Catch1(backup_duplicate(), loopDepth);
															#line 40931 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 4582 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		prevConfig.clear(tr);
															#line 40935 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont2(loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(EBackupState const& __prevBackupStatus,int loopDepth) 
	{
															#line 4575 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		prevBackupStatus = __prevBackupStatus;
															#line 40944 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(EBackupState && __prevBackupStatus,int loopDepth) 
	{
		prevBackupStatus = std::move(__prevBackupStatus);
		loopDepth = a_body1cont3(loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<SubmitBackupActor*>(this)->actor_wait_state > 0) static_cast<SubmitBackupActor*>(this)->actor_wait_state = 0;
		static_cast<SubmitBackupActor*>(this)->ActorCallback< SubmitBackupActor, 1, EBackupState >::remove();

	}
	void a_callback_fire(ActorCallback< SubmitBackupActor, 1, EBackupState >*,EBackupState const& value) 
	{
		fdb_probe_actor_enter("submitBackup", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("submitBackup", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< SubmitBackupActor, 1, EBackupState >*,EBackupState && value) 
	{
		fdb_probe_actor_enter("submitBackup", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("submitBackup", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< SubmitBackupActor, 1, EBackupState >*,Error err) 
	{
		fdb_probe_actor_enter("submitBackup", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("submitBackup", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont6(int loopDepth) 
	{
															#line 4609 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Optional<Value>> __when_expr_3 = backupAgent->lastBackupTimestamp().get(tr);
															#line 4609 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<SubmitBackupActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 41013 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1cont6when1(__when_expr_3.get(), loopDepth); };
		static_cast<SubmitBackupActor*>(this)->actor_wait_state = 4;
															#line 4609 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< SubmitBackupActor, 3, Optional<Value> >*>(static_cast<SubmitBackupActor*>(this)));
															#line 41018 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont2Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 4603 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (e.code() == error_code_actor_cancelled)
															#line 41028 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			{
															#line 4604 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				return a_body1Catch1(e, loopDepth);
															#line 41032 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			}
															#line 4605 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			fprintf(stderr, "ERROR: Could not create backup container: %s\n", e.what());
															#line 4606 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			return a_body1Catch1(backup_error(), loopDepth);
															#line 41038 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont8(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont9(loopDepth);

		return loopDepth;
	}
	int a_body1cont8(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont9(loopDepth);

		return loopDepth;
	}
	int a_body1cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont8(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont8(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<SubmitBackupActor*>(this)->actor_wait_state > 0) static_cast<SubmitBackupActor*>(this)->actor_wait_state = 0;
		static_cast<SubmitBackupActor*>(this)->ActorCallback< SubmitBackupActor, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< SubmitBackupActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("submitBackup", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont2Catch1(error, 0);
		} catch (...) {
			a_body1cont2Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("submitBackup", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< SubmitBackupActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("submitBackup", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont2Catch1(error, 0);
		} catch (...) {
			a_body1cont2Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("submitBackup", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< SubmitBackupActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("submitBackup", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont2Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont2Catch1(error, 0);
		} catch (...) {
			a_body1cont2Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("submitBackup", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1cont9(int loopDepth) 
	{
		try {
			loopDepth = a_body1cont6(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont10(Optional<Value> const& lastBackupTimestamp,int loopDepth) 
	{
															#line 4611 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if ((lastBackupTimestamp.present()) && (lastBackupTimestamp.get() >= nowStr))
															#line 41140 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 4612 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			fprintf(stderr, "ERROR: The last backup `%s' happened in the future.\n", printable(lastBackupTimestamp.get()).c_str());
															#line 4615 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			return a_body1Catch1(backup_error(), loopDepth);
															#line 41146 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 4618 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		KeyRangeMap<int> backupRangeSet;
															#line 4619 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		for( auto& backupRange : backupRanges ) {
															#line 4620 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			backupRangeSet.insert(backupRange, 1);
															#line 41154 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 4623 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		backupRangeSet.coalesce(allKeys);
															#line 4624 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		normalizedRanges = std::vector<KeyRange>();
															#line 4626 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		for( auto& backupRange : backupRangeSet.ranges() ) {
															#line 4627 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (backupRange.value())
															#line 41164 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			{
															#line 4628 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				normalizedRanges.push_back(KeyRange(KeyRangeRef(backupRange.range().begin, backupRange.range().end)));
															#line 41168 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			}
		}
															#line 4632 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		config.clear(tr);
															#line 4634 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		destUidValue = Key(BinaryWriter::toValue(uid, Unversioned()));
															#line 4635 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (normalizedRanges.size() == 1)
															#line 41177 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 4636 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<RangeResult> __when_expr_4 = tr->getRange(KeyRangeRef(destUidLookupPrefix, strinc(destUidLookupPrefix)), CLIENT_KNOBS->TOO_MANY);
															#line 4636 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<SubmitBackupActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 41183 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1Catch1(__when_expr_4.getError(), loopDepth); else return a_body1cont10when1(__when_expr_4.get(), loopDepth); };
			static_cast<SubmitBackupActor*>(this)->actor_wait_state = 5;
															#line 4636 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< SubmitBackupActor, 4, RangeResult >*>(static_cast<SubmitBackupActor*>(this)));
															#line 41188 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1cont10cont1(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont10(Optional<Value> && lastBackupTimestamp,int loopDepth) 
	{
															#line 4611 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if ((lastBackupTimestamp.present()) && (lastBackupTimestamp.get() >= nowStr))
															#line 41202 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 4612 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			fprintf(stderr, "ERROR: The last backup `%s' happened in the future.\n", printable(lastBackupTimestamp.get()).c_str());
															#line 4615 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			return a_body1Catch1(backup_error(), loopDepth);
															#line 41208 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 4618 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		KeyRangeMap<int> backupRangeSet;
															#line 4619 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		for( auto& backupRange : backupRanges ) {
															#line 4620 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			backupRangeSet.insert(backupRange, 1);
															#line 41216 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 4623 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		backupRangeSet.coalesce(allKeys);
															#line 4624 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		normalizedRanges = std::vector<KeyRange>();
															#line 4626 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		for( auto& backupRange : backupRangeSet.ranges() ) {
															#line 4627 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (backupRange.value())
															#line 41226 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			{
															#line 4628 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				normalizedRanges.push_back(KeyRange(KeyRangeRef(backupRange.range().begin, backupRange.range().end)));
															#line 41230 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			}
		}
															#line 4632 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		config.clear(tr);
															#line 4634 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		destUidValue = Key(BinaryWriter::toValue(uid, Unversioned()));
															#line 4635 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (normalizedRanges.size() == 1)
															#line 41239 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 4636 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<RangeResult> __when_expr_4 = tr->getRange(KeyRangeRef(destUidLookupPrefix, strinc(destUidLookupPrefix)), CLIENT_KNOBS->TOO_MANY);
															#line 4636 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<SubmitBackupActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 41245 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1Catch1(__when_expr_4.getError(), loopDepth); else return a_body1cont10when1(__when_expr_4.get(), loopDepth); };
			static_cast<SubmitBackupActor*>(this)->actor_wait_state = 5;
															#line 4636 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< SubmitBackupActor, 4, RangeResult >*>(static_cast<SubmitBackupActor*>(this)));
															#line 41250 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1cont10cont1(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont6when1(Optional<Value> const& lastBackupTimestamp,int loopDepth) 
	{
		loopDepth = a_body1cont10(lastBackupTimestamp, loopDepth);

		return loopDepth;
	}
	int a_body1cont6when1(Optional<Value> && lastBackupTimestamp,int loopDepth) 
	{
		loopDepth = a_body1cont10(std::move(lastBackupTimestamp), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<SubmitBackupActor*>(this)->actor_wait_state > 0) static_cast<SubmitBackupActor*>(this)->actor_wait_state = 0;
		static_cast<SubmitBackupActor*>(this)->ActorCallback< SubmitBackupActor, 3, Optional<Value> >::remove();

	}
	void a_callback_fire(ActorCallback< SubmitBackupActor, 3, Optional<Value> >*,Optional<Value> const& value) 
	{
		fdb_probe_actor_enter("submitBackup", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont6when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("submitBackup", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< SubmitBackupActor, 3, Optional<Value> >*,Optional<Value> && value) 
	{
		fdb_probe_actor_enter("submitBackup", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont6when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("submitBackup", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< SubmitBackupActor, 3, Optional<Value> >*,Error err) 
	{
		fdb_probe_actor_enter("submitBackup", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("submitBackup", reinterpret_cast<unsigned long>(this), 3);

	}
	int a_body1cont10cont1(int loopDepth) 
	{
															#line 4656 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr->set(config.getUidAsKey().withPrefix(destUidValue).withPrefix(backupLatestVersionsPrefix), BinaryWriter::toValue<Version>(tr->getReadVersion().get(), Unversioned()));
															#line 4658 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		config.destUidValue().set(tr, destUidValue);
															#line 4661 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tag.set(tr, { uid, false });
															#line 4663 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		backupAgent->lastBackupTimestamp().set(tr, nowStr);
															#line 4666 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		config.tag().set(tr, tagName);
															#line 4667 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		config.stateEnum().set(tr, EBackupState::STATE_SUBMITTED);
															#line 4668 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		config.backupContainer().set(tr, bc);
															#line 4669 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		config.stopWhenDone().set(tr, stopWhenDone);
															#line 4670 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		config.backupRanges().set(tr, normalizedRanges);
															#line 4671 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		config.initialSnapshotIntervalSeconds().set(tr, initialSnapshotIntervalSeconds);
															#line 4672 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		config.snapshotIntervalSeconds().set(tr, snapshotIntervalSeconds);
															#line 4673 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		config.partitionedLogEnabled().set(tr, partitionedLog);
															#line 4674 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		config.incrementalBackupOnly().set(tr, incrementalBackupOnly);
															#line 4676 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Key> __when_expr_5 = fileBackup::StartFullBackupTaskFunc::addTask( tr, backupAgent->taskBucket, uid, TaskCompletionKey::noSignal());
															#line 4676 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<SubmitBackupActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 41355 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_5.isReady()) { if (__when_expr_5.isError()) return a_body1Catch1(__when_expr_5.getError(), loopDepth); else return a_body1cont10cont1when1(__when_expr_5.get(), loopDepth); };
		static_cast<SubmitBackupActor*>(this)->actor_wait_state = 6;
															#line 4676 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_5.addCallbackAndClear(static_cast<ActorCallback< SubmitBackupActor, 5, Key >*>(static_cast<SubmitBackupActor*>(this)));
															#line 41360 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont10cont6(RangeResult const& existingDestUidValues,int loopDepth) 
	{
															#line 4638 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		bool found = false;
															#line 4639 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		for( auto it : existingDestUidValues ) {
															#line 4640 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (BinaryReader::fromStringRef<KeyRange>(it.key.removePrefix(destUidLookupPrefix), IncludeVersion()) == normalizedRanges[0])
															#line 41373 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			{
															#line 4642 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				destUidValue = it.value;
															#line 4643 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				found = true;
															#line 41379 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				break;
			}
		}
															#line 4647 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!found)
															#line 41385 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 4648 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			destUidValue = BinaryWriter::toValue(deterministicRandom()->randomUniqueID(), Unversioned());
															#line 4649 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->set( BinaryWriter::toValue(normalizedRanges[0], IncludeVersion(ProtocolVersion::withSharedMutations())) .withPrefix(destUidLookupPrefix), destUidValue);
															#line 41391 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
		loopDepth = a_body1cont10cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont10cont6(RangeResult && existingDestUidValues,int loopDepth) 
	{
															#line 4638 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		bool found = false;
															#line 4639 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		for( auto it : existingDestUidValues ) {
															#line 4640 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (BinaryReader::fromStringRef<KeyRange>(it.key.removePrefix(destUidLookupPrefix), IncludeVersion()) == normalizedRanges[0])
															#line 41405 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			{
															#line 4642 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				destUidValue = it.value;
															#line 4643 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				found = true;
															#line 41411 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				break;
			}
		}
															#line 4647 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!found)
															#line 41417 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 4648 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			destUidValue = BinaryWriter::toValue(deterministicRandom()->randomUniqueID(), Unversioned());
															#line 4649 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->set( BinaryWriter::toValue(normalizedRanges[0], IncludeVersion(ProtocolVersion::withSharedMutations())) .withPrefix(destUidLookupPrefix), destUidValue);
															#line 41423 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
		loopDepth = a_body1cont10cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont10when1(RangeResult const& existingDestUidValues,int loopDepth) 
	{
		loopDepth = a_body1cont10cont6(existingDestUidValues, loopDepth);

		return loopDepth;
	}
	int a_body1cont10when1(RangeResult && existingDestUidValues,int loopDepth) 
	{
		loopDepth = a_body1cont10cont6(std::move(existingDestUidValues), loopDepth);

		return loopDepth;
	}
	void a_exitChoose5() 
	{
		if (static_cast<SubmitBackupActor*>(this)->actor_wait_state > 0) static_cast<SubmitBackupActor*>(this)->actor_wait_state = 0;
		static_cast<SubmitBackupActor*>(this)->ActorCallback< SubmitBackupActor, 4, RangeResult >::remove();

	}
	void a_callback_fire(ActorCallback< SubmitBackupActor, 4, RangeResult >*,RangeResult const& value) 
	{
		fdb_probe_actor_enter("submitBackup", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont10when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("submitBackup", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_fire(ActorCallback< SubmitBackupActor, 4, RangeResult >*,RangeResult && value) 
	{
		fdb_probe_actor_enter("submitBackup", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont10when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("submitBackup", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_error(ActorCallback< SubmitBackupActor, 4, RangeResult >*,Error err) 
	{
		fdb_probe_actor_enter("submitBackup", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("submitBackup", reinterpret_cast<unsigned long>(this), 4);

	}
	int a_body1cont10cont11(Key const& taskKey,int loopDepth) 
	{
															#line 4679 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<SubmitBackupActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~SubmitBackupActorState(); static_cast<SubmitBackupActor*>(this)->destroy(); return 0; }
															#line 41496 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<SubmitBackupActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~SubmitBackupActorState();
		static_cast<SubmitBackupActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont10cont11(Key && taskKey,int loopDepth) 
	{
															#line 4679 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<SubmitBackupActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~SubmitBackupActorState(); static_cast<SubmitBackupActor*>(this)->destroy(); return 0; }
															#line 41508 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<SubmitBackupActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~SubmitBackupActorState();
		static_cast<SubmitBackupActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont10cont1when1(Key const& taskKey,int loopDepth) 
	{
		loopDepth = a_body1cont10cont11(taskKey, loopDepth);

		return loopDepth;
	}
	int a_body1cont10cont1when1(Key && taskKey,int loopDepth) 
	{
		loopDepth = a_body1cont10cont11(std::move(taskKey), loopDepth);

		return loopDepth;
	}
	void a_exitChoose6() 
	{
		if (static_cast<SubmitBackupActor*>(this)->actor_wait_state > 0) static_cast<SubmitBackupActor*>(this)->actor_wait_state = 0;
		static_cast<SubmitBackupActor*>(this)->ActorCallback< SubmitBackupActor, 5, Key >::remove();

	}
	void a_callback_fire(ActorCallback< SubmitBackupActor, 5, Key >*,Key const& value) 
	{
		fdb_probe_actor_enter("submitBackup", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1cont10cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("submitBackup", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_fire(ActorCallback< SubmitBackupActor, 5, Key >*,Key && value) 
	{
		fdb_probe_actor_enter("submitBackup", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1cont10cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("submitBackup", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_error(ActorCallback< SubmitBackupActor, 5, Key >*,Error err) 
	{
		fdb_probe_actor_enter("submitBackup", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("submitBackup", reinterpret_cast<unsigned long>(this), 5);

	}
															#line 4549 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	FileBackupAgent* backupAgent;
															#line 4549 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 4549 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Key outContainer;
															#line 4549 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Optional<std::string> proxy;
															#line 4549 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int initialSnapshotIntervalSeconds;
															#line 4549 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int snapshotIntervalSeconds;
															#line 4549 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	std::string tagName;
															#line 4549 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Standalone<VectorRef<KeyRangeRef>> backupRanges;
															#line 4549 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	StopWhenDone stopWhenDone;
															#line 4549 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	UsePartitionedLog partitionedLog;
															#line 4549 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	IncrementalBackupOnly incrementalBackupOnly;
															#line 4549 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Optional<std::string> encryptionKeyFileName;
															#line 4571 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	KeyBackedTag tag;
															#line 4574 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	BackupConfig prevConfig;
															#line 4575 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	EBackupState prevBackupStatus;
															#line 4585 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	BackupConfig config;
															#line 4586 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	UID uid;
															#line 4589 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Standalone<StringRef> nowStr;
															#line 4590 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	std::string backupContainer;
															#line 4598 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<IBackupContainer> bc;
															#line 4624 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	std::vector<KeyRange> normalizedRanges;
															#line 4634 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Key destUidValue;
															#line 41623 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via submitBackup()
															#line 4549 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class SubmitBackupActor final : public Actor<Void>, public ActorCallback< SubmitBackupActor, 0, Optional<UidAndAbortedFlagT> >, public ActorCallback< SubmitBackupActor, 1, EBackupState >, public ActorCallback< SubmitBackupActor, 2, Void >, public ActorCallback< SubmitBackupActor, 3, Optional<Value> >, public ActorCallback< SubmitBackupActor, 4, RangeResult >, public ActorCallback< SubmitBackupActor, 5, Key >, public FastAllocated<SubmitBackupActor>, public SubmitBackupActorState<SubmitBackupActor> {
															#line 41628 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<SubmitBackupActor>::operator new;
	using FastAllocated<SubmitBackupActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< SubmitBackupActor, 0, Optional<UidAndAbortedFlagT> >;
friend struct ActorCallback< SubmitBackupActor, 1, EBackupState >;
friend struct ActorCallback< SubmitBackupActor, 2, Void >;
friend struct ActorCallback< SubmitBackupActor, 3, Optional<Value> >;
friend struct ActorCallback< SubmitBackupActor, 4, RangeResult >;
friend struct ActorCallback< SubmitBackupActor, 5, Key >;
															#line 4549 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	SubmitBackupActor(FileBackupAgent* const& backupAgent,Reference<ReadYourWritesTransaction> const& tr,Key const& outContainer,Optional<std::string> const& proxy,int const& initialSnapshotIntervalSeconds,int const& snapshotIntervalSeconds,std::string const& tagName,Standalone<VectorRef<KeyRangeRef>> const& backupRanges,StopWhenDone const& stopWhenDone,UsePartitionedLog const& partitionedLog,IncrementalBackupOnly const& incrementalBackupOnly,Optional<std::string> const& encryptionKeyFileName) 
															#line 41644 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<Void>(),
		   SubmitBackupActorState<SubmitBackupActor>(backupAgent, tr, outContainer, proxy, initialSnapshotIntervalSeconds, snapshotIntervalSeconds, tagName, backupRanges, stopWhenDone, partitionedLog, incrementalBackupOnly, encryptionKeyFileName)
	{
		fdb_probe_actor_enter("submitBackup", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("submitBackup");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("submitBackup", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< SubmitBackupActor, 0, Optional<UidAndAbortedFlagT> >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< SubmitBackupActor, 1, EBackupState >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< SubmitBackupActor, 2, Void >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< SubmitBackupActor, 3, Optional<Value> >*)0, actor_cancelled()); break;
		case 5: this->a_callback_error((ActorCallback< SubmitBackupActor, 4, RangeResult >*)0, actor_cancelled()); break;
		case 6: this->a_callback_error((ActorCallback< SubmitBackupActor, 5, Key >*)0, actor_cancelled()); break;
		}

	}
};
															#line 4549 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<Void> submitBackup( FileBackupAgent* const& backupAgent, Reference<ReadYourWritesTransaction> const& tr, Key const& outContainer, Optional<std::string> const& proxy, int const& initialSnapshotIntervalSeconds, int const& snapshotIntervalSeconds, std::string const& tagName, Standalone<VectorRef<KeyRangeRef>> const& backupRanges, StopWhenDone const& stopWhenDone, UsePartitionedLog const& partitionedLog, IncrementalBackupOnly const& incrementalBackupOnly, Optional<std::string> const& encryptionKeyFileName ) {
															#line 4549 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<Void>(new SubmitBackupActor(backupAgent, tr, outContainer, proxy, initialSnapshotIntervalSeconds, snapshotIntervalSeconds, tagName, backupRanges, stopWhenDone, partitionedLog, incrementalBackupOnly, encryptionKeyFileName));
															#line 41676 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 4681 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

																#line 41681 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via submitRestore()
															#line 4682 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class SubmitRestoreActor>
															#line 4682 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class SubmitRestoreActorState {
															#line 41687 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 4682 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	SubmitRestoreActorState(FileBackupAgent* const& backupAgent,Reference<ReadYourWritesTransaction> const& tr,Key const& tagName,Key const& backupURL,Optional<std::string> const& proxy,Standalone<VectorRef<KeyRangeRef>> const& ranges,Version const& restoreVersion,Key const& addPrefix,Key const& removePrefix,LockDB const& lockDB,OnlyApplyMutationLogs const& onlyApplyMutationLogs,InconsistentSnapshotOnly const& inconsistentSnapshotOnly,Version const& beginVersion,UID const& uid) 
															#line 4682 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 4682 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : backupAgent(backupAgent),
															#line 4682 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   tr(tr),
															#line 4682 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   tagName(tagName),
															#line 4682 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   backupURL(backupURL),
															#line 4682 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   proxy(proxy),
															#line 4682 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   ranges(ranges),
															#line 4682 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   restoreVersion(restoreVersion),
															#line 4682 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   addPrefix(addPrefix),
															#line 4682 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   removePrefix(removePrefix),
															#line 4682 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   lockDB(lockDB),
															#line 4682 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   onlyApplyMutationLogs(onlyApplyMutationLogs),
															#line 4682 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   inconsistentSnapshotOnly(inconsistentSnapshotOnly),
															#line 4682 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   beginVersion(beginVersion),
															#line 4682 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   uid(uid)
															#line 41720 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("submitRestore", reinterpret_cast<unsigned long>(this));

	}
	~SubmitRestoreActorState() 
	{
		fdb_probe_actor_destroy("submitRestore", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 4696 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			KeyRangeMap<int> restoreRangeSet;
															#line 4697 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			for( auto& range : ranges ) {
															#line 4698 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				restoreRangeSet.insert(range, 1);
															#line 41739 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			}
															#line 4700 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			restoreRangeSet.coalesce(allKeys);
															#line 4701 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			restoreRanges = std::vector<KeyRange>();
															#line 4702 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			for( auto& restoreRange : restoreRangeSet.ranges() ) {
															#line 4703 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				if (restoreRange.value())
															#line 41749 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				{
															#line 4704 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
					restoreRanges.push_back(KeyRange(KeyRangeRef(restoreRange.range().begin, restoreRange.range().end)));
															#line 41753 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				}
			}
															#line 4707 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			for( auto& restoreRange : restoreRanges ) {
															#line 4708 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				ASSERT(restoreRange.begin.startsWith(removePrefix) && restoreRange.end.startsWith(removePrefix));
															#line 41760 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			}
															#line 4711 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 4712 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 4715 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tag = makeRestoreTag(tagName.toString());
															#line 4716 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Optional<UidAndAbortedFlagT>> __when_expr_0 = tag.get(tr);
															#line 4716 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<SubmitRestoreActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 41772 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<SubmitRestoreActor*>(this)->actor_wait_state = 1;
															#line 4716 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< SubmitRestoreActor, 0, Optional<UidAndAbortedFlagT> >*>(static_cast<SubmitRestoreActor*>(this)));
															#line 41777 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~SubmitRestoreActorState();
		static_cast<SubmitRestoreActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 4717 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (oldUidAndAborted.present())
															#line 41800 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 4718 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (oldUidAndAborted.get().first == uid)
															#line 41804 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			{
															#line 4719 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				if (oldUidAndAborted.get().second)
															#line 41808 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				{
															#line 4720 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
					return a_body1Catch1(restore_duplicate_uid(), loopDepth);
															#line 41812 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				}
				else
				{
															#line 4722 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
					if (!static_cast<SubmitRestoreActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~SubmitRestoreActorState(); static_cast<SubmitRestoreActor*>(this)->destroy(); return 0; }
															#line 41818 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
					new (&static_cast<SubmitRestoreActor*>(this)->SAV< Void >::value()) Void(Void());
					this->~SubmitRestoreActorState();
					static_cast<SubmitRestoreActor*>(this)->finishSendAndDelPromiseRef();
					return 0;
				}
			}
															#line 4726 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			oldRestore = RestoreConfig(oldUidAndAborted.get().first);
															#line 4729 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<bool> __when_expr_1 = oldRestore.isRunnable(tr);
															#line 4729 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<SubmitRestoreActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 41831 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
			static_cast<SubmitRestoreActor*>(this)->actor_wait_state = 2;
															#line 4729 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< SubmitRestoreActor, 1, bool >*>(static_cast<SubmitRestoreActor*>(this)));
															#line 41836 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1cont6(loopDepth);
		}

		return loopDepth;
	}
	int a_body1when1(Optional<UidAndAbortedFlagT> const& __oldUidAndAborted,int loopDepth) 
	{
															#line 4716 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		oldUidAndAborted = __oldUidAndAborted;
															#line 41850 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1when1(Optional<UidAndAbortedFlagT> && __oldUidAndAborted,int loopDepth) 
	{
		oldUidAndAborted = std::move(__oldUidAndAborted);
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<SubmitRestoreActor*>(this)->actor_wait_state > 0) static_cast<SubmitRestoreActor*>(this)->actor_wait_state = 0;
		static_cast<SubmitRestoreActor*>(this)->ActorCallback< SubmitRestoreActor, 0, Optional<UidAndAbortedFlagT> >::remove();

	}
	void a_callback_fire(ActorCallback< SubmitRestoreActor, 0, Optional<UidAndAbortedFlagT> >*,Optional<UidAndAbortedFlagT> const& value) 
	{
		fdb_probe_actor_enter("submitRestore", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("submitRestore", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< SubmitRestoreActor, 0, Optional<UidAndAbortedFlagT> >*,Optional<UidAndAbortedFlagT> && value) 
	{
		fdb_probe_actor_enter("submitRestore", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("submitRestore", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< SubmitRestoreActor, 0, Optional<UidAndAbortedFlagT> >*,Error err) 
	{
		fdb_probe_actor_enter("submitRestore", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("submitRestore", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont6(int loopDepth) 
	{
															#line 4739 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		index = int();
															#line 4740 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		index = 0;
															#line 41919 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont6loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1cont7(bool const& runnable,int loopDepth) 
	{
															#line 4731 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (runnable)
															#line 41928 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 4732 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			return a_body1Catch1(restore_duplicate_tag(), loopDepth);
															#line 41932 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 4736 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		oldRestore.clear(tr);
															#line 41936 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont6(loopDepth);

		return loopDepth;
	}
	int a_body1cont7(bool && runnable,int loopDepth) 
	{
															#line 4731 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (runnable)
															#line 41945 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 4732 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			return a_body1Catch1(restore_duplicate_tag(), loopDepth);
															#line 41949 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 4736 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		oldRestore.clear(tr);
															#line 41953 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont6(loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(bool const& runnable,int loopDepth) 
	{
		loopDepth = a_body1cont7(runnable, loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(bool && runnable,int loopDepth) 
	{
		loopDepth = a_body1cont7(std::move(runnable), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<SubmitRestoreActor*>(this)->actor_wait_state > 0) static_cast<SubmitRestoreActor*>(this)->actor_wait_state = 0;
		static_cast<SubmitRestoreActor*>(this)->ActorCallback< SubmitRestoreActor, 1, bool >::remove();

	}
	void a_callback_fire(ActorCallback< SubmitRestoreActor, 1, bool >*,bool const& value) 
	{
		fdb_probe_actor_enter("submitRestore", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("submitRestore", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< SubmitRestoreActor, 1, bool >*,bool && value) 
	{
		fdb_probe_actor_enter("submitRestore", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("submitRestore", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< SubmitRestoreActor, 1, bool >*,Error err) 
	{
		fdb_probe_actor_enter("submitRestore", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("submitRestore", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont13(int loopDepth) 
	{
															#line 4750 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		restore = RestoreConfig(uid);
															#line 4753 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tag.set(tr, { uid, false });
															#line 4755 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		Reference<IBackupContainer> bc = IBackupContainer::openContainer(backupURL.toString(), proxy, {});
															#line 4758 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		restore.tag().set(tr, tagName.toString());
															#line 4759 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		restore.sourceContainer().set(tr, bc);
															#line 4760 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		restore.stateEnum().set(tr, ERestoreState::QUEUED);
															#line 4761 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		restore.restoreVersion().set(tr, restoreVersion);
															#line 4762 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		restore.onlyApplyMutationLogs().set(tr, onlyApplyMutationLogs);
															#line 4763 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		restore.inconsistentSnapshotOnly().set(tr, inconsistentSnapshotOnly);
															#line 4764 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		restore.beginVersion().set(tr, beginVersion);
															#line 4765 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (BUGGIFY && restoreRanges.size() == 1)
															#line 42045 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 4766 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			restore.restoreRange().set(tr, restoreRanges[0]);
															#line 42049 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
		else
		{
															#line 4768 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			restore.restoreRanges().set(tr, restoreRanges);
															#line 42055 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 4771 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		restore.initApplyMutations(tr, addPrefix, removePrefix);
															#line 4773 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Key> __when_expr_3 = fileBackup::StartFullRestoreTaskFunc::addTask( tr, backupAgent->taskBucket, uid, TaskCompletionKey::noSignal());
															#line 4773 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<SubmitRestoreActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 42063 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1cont13when1(__when_expr_3.get(), loopDepth); };
		static_cast<SubmitRestoreActor*>(this)->actor_wait_state = 4;
															#line 4773 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< SubmitRestoreActor, 3, Key >*>(static_cast<SubmitRestoreActor*>(this)));
															#line 42068 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont6loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1cont6loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1cont6loopBody1(int loopDepth) 
	{
															#line 4740 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!(index < restoreRanges.size()))
															#line 42084 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
			return a_body1cont6break1(loopDepth==0?0:loopDepth-1); // break
		}
															#line 4741 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		KeyRange restoreIntoRange = KeyRangeRef(restoreRanges[index].begin, restoreRanges[index].end) .removePrefix(removePrefix) .withPrefix(addPrefix);
															#line 4744 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<RangeResult> __when_expr_2 = tr->getRange(restoreIntoRange, 1);
															#line 4744 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<SubmitRestoreActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 42094 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), std::max(0, loopDepth - 1)); else return a_body1cont6loopBody1when1(__when_expr_2.get(), loopDepth); };
		static_cast<SubmitRestoreActor*>(this)->actor_wait_state = 3;
															#line 4744 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< SubmitRestoreActor, 2, RangeResult >*>(static_cast<SubmitRestoreActor*>(this)));
															#line 42099 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont6break1(int loopDepth) 
	{
		try {
			return a_body1cont13(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont6loopBody1cont1(RangeResult const& existingRows,int loopDepth) 
	{
															#line 4745 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (existingRows.size() > 0 && !onlyApplyMutationLogs)
															#line 42121 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 4746 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			return a_body1Catch1(restore_destination_not_empty(), std::max(0, loopDepth - 1));
															#line 42125 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 4740 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		index++;
															#line 42129 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (loopDepth == 0) return a_body1cont6loopHead1(0);

		return loopDepth;
	}
	int a_body1cont6loopBody1cont1(RangeResult && existingRows,int loopDepth) 
	{
															#line 4745 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (existingRows.size() > 0 && !onlyApplyMutationLogs)
															#line 42138 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 4746 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			return a_body1Catch1(restore_destination_not_empty(), std::max(0, loopDepth - 1));
															#line 42142 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 4740 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		index++;
															#line 42146 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (loopDepth == 0) return a_body1cont6loopHead1(0);

		return loopDepth;
	}
	int a_body1cont6loopBody1when1(RangeResult const& existingRows,int loopDepth) 
	{
		loopDepth = a_body1cont6loopBody1cont1(existingRows, loopDepth);

		return loopDepth;
	}
	int a_body1cont6loopBody1when1(RangeResult && existingRows,int loopDepth) 
	{
		loopDepth = a_body1cont6loopBody1cont1(std::move(existingRows), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<SubmitRestoreActor*>(this)->actor_wait_state > 0) static_cast<SubmitRestoreActor*>(this)->actor_wait_state = 0;
		static_cast<SubmitRestoreActor*>(this)->ActorCallback< SubmitRestoreActor, 2, RangeResult >::remove();

	}
	void a_callback_fire(ActorCallback< SubmitRestoreActor, 2, RangeResult >*,RangeResult const& value) 
	{
		fdb_probe_actor_enter("submitRestore", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont6loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("submitRestore", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< SubmitRestoreActor, 2, RangeResult >*,RangeResult && value) 
	{
		fdb_probe_actor_enter("submitRestore", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont6loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("submitRestore", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< SubmitRestoreActor, 2, RangeResult >*,Error err) 
	{
		fdb_probe_actor_enter("submitRestore", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("submitRestore", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1cont13cont1(Key const& taskKey,int loopDepth) 
	{
															#line 4776 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (lockDB)
															#line 42218 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 4777 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_4 = lockDatabase(tr, uid);
															#line 4777 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<SubmitRestoreActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 42224 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1Catch1(__when_expr_4.getError(), loopDepth); else return a_body1cont13cont1when1(__when_expr_4.get(), loopDepth); };
			static_cast<SubmitRestoreActor*>(this)->actor_wait_state = 5;
															#line 4777 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< SubmitRestoreActor, 4, Void >*>(static_cast<SubmitRestoreActor*>(this)));
															#line 42229 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
															#line 4779 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_5 = checkDatabaseLock(tr, uid);
															#line 4779 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<SubmitRestoreActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 42238 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_5.isReady()) { if (__when_expr_5.isError()) return a_body1Catch1(__when_expr_5.getError(), loopDepth); else return a_body1cont13cont1when2(__when_expr_5.get(), loopDepth); };
			static_cast<SubmitRestoreActor*>(this)->actor_wait_state = 6;
															#line 4779 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_5.addCallbackAndClear(static_cast<ActorCallback< SubmitRestoreActor, 5, Void >*>(static_cast<SubmitRestoreActor*>(this)));
															#line 42243 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}

		return loopDepth;
	}
	int a_body1cont13cont1(Key && taskKey,int loopDepth) 
	{
															#line 4776 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (lockDB)
															#line 42253 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 4777 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_4 = lockDatabase(tr, uid);
															#line 4777 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<SubmitRestoreActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 42259 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1Catch1(__when_expr_4.getError(), loopDepth); else return a_body1cont13cont1when1(__when_expr_4.get(), loopDepth); };
			static_cast<SubmitRestoreActor*>(this)->actor_wait_state = 5;
															#line 4777 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< SubmitRestoreActor, 4, Void >*>(static_cast<SubmitRestoreActor*>(this)));
															#line 42264 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
															#line 4779 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_5 = checkDatabaseLock(tr, uid);
															#line 4779 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<SubmitRestoreActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 42273 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_5.isReady()) { if (__when_expr_5.isError()) return a_body1Catch1(__when_expr_5.getError(), loopDepth); else return a_body1cont13cont1when2(__when_expr_5.get(), loopDepth); };
			static_cast<SubmitRestoreActor*>(this)->actor_wait_state = 6;
															#line 4779 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_5.addCallbackAndClear(static_cast<ActorCallback< SubmitRestoreActor, 5, Void >*>(static_cast<SubmitRestoreActor*>(this)));
															#line 42278 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}

		return loopDepth;
	}
	int a_body1cont13when1(Key const& taskKey,int loopDepth) 
	{
		loopDepth = a_body1cont13cont1(taskKey, loopDepth);

		return loopDepth;
	}
	int a_body1cont13when1(Key && taskKey,int loopDepth) 
	{
		loopDepth = a_body1cont13cont1(std::move(taskKey), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<SubmitRestoreActor*>(this)->actor_wait_state > 0) static_cast<SubmitRestoreActor*>(this)->actor_wait_state = 0;
		static_cast<SubmitRestoreActor*>(this)->ActorCallback< SubmitRestoreActor, 3, Key >::remove();

	}
	void a_callback_fire(ActorCallback< SubmitRestoreActor, 3, Key >*,Key const& value) 
	{
		fdb_probe_actor_enter("submitRestore", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont13when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("submitRestore", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< SubmitRestoreActor, 3, Key >*,Key && value) 
	{
		fdb_probe_actor_enter("submitRestore", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont13when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("submitRestore", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< SubmitRestoreActor, 3, Key >*,Error err) 
	{
		fdb_probe_actor_enter("submitRestore", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("submitRestore", reinterpret_cast<unsigned long>(this), 3);

	}
	int a_body1cont13cont4(int loopDepth) 
	{
															#line 4781 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<SubmitRestoreActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~SubmitRestoreActorState(); static_cast<SubmitRestoreActor*>(this)->destroy(); return 0; }
															#line 42351 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<SubmitRestoreActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~SubmitRestoreActorState();
		static_cast<SubmitRestoreActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont13cont5(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont13cont4(loopDepth);

		return loopDepth;
	}
	int a_body1cont13cont5(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont13cont4(loopDepth);

		return loopDepth;
	}
	int a_body1cont13cont1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont13cont5(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont13cont1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont13cont5(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose5() 
	{
		if (static_cast<SubmitRestoreActor*>(this)->actor_wait_state > 0) static_cast<SubmitRestoreActor*>(this)->actor_wait_state = 0;
		static_cast<SubmitRestoreActor*>(this)->ActorCallback< SubmitRestoreActor, 4, Void >::remove();

	}
	void a_callback_fire(ActorCallback< SubmitRestoreActor, 4, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("submitRestore", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont13cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("submitRestore", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_fire(ActorCallback< SubmitRestoreActor, 4, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("submitRestore", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont13cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("submitRestore", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_error(ActorCallback< SubmitRestoreActor, 4, Void >*,Error err) 
	{
		fdb_probe_actor_enter("submitRestore", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("submitRestore", reinterpret_cast<unsigned long>(this), 4);

	}
	int a_body1cont13cont6(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont13cont4(loopDepth);

		return loopDepth;
	}
	int a_body1cont13cont6(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont13cont4(loopDepth);

		return loopDepth;
	}
	int a_body1cont13cont1when2(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont13cont6(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont13cont1when2(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont13cont6(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose6() 
	{
		if (static_cast<SubmitRestoreActor*>(this)->actor_wait_state > 0) static_cast<SubmitRestoreActor*>(this)->actor_wait_state = 0;
		static_cast<SubmitRestoreActor*>(this)->ActorCallback< SubmitRestoreActor, 5, Void >::remove();

	}
	void a_callback_fire(ActorCallback< SubmitRestoreActor, 5, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("submitRestore", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1cont13cont1when2(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("submitRestore", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_fire(ActorCallback< SubmitRestoreActor, 5, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("submitRestore", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1cont13cont1when2(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("submitRestore", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_error(ActorCallback< SubmitRestoreActor, 5, Void >*,Error err) 
	{
		fdb_probe_actor_enter("submitRestore", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("submitRestore", reinterpret_cast<unsigned long>(this), 5);

	}
															#line 4682 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	FileBackupAgent* backupAgent;
															#line 4682 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 4682 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Key tagName;
															#line 4682 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Key backupURL;
															#line 4682 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Optional<std::string> proxy;
															#line 4682 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Standalone<VectorRef<KeyRangeRef>> ranges;
															#line 4682 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Version restoreVersion;
															#line 4682 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Key addPrefix;
															#line 4682 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Key removePrefix;
															#line 4682 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	LockDB lockDB;
															#line 4682 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	OnlyApplyMutationLogs onlyApplyMutationLogs;
															#line 4682 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	InconsistentSnapshotOnly inconsistentSnapshotOnly;
															#line 4682 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Version beginVersion;
															#line 4682 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	UID uid;
															#line 4701 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	std::vector<KeyRange> restoreRanges;
															#line 4715 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	KeyBackedTag tag;
															#line 4716 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Optional<UidAndAbortedFlagT> oldUidAndAborted;
															#line 4726 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	RestoreConfig oldRestore;
															#line 4739 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int index;
															#line 4750 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	RestoreConfig restore;
															#line 42549 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via submitRestore()
															#line 4682 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class SubmitRestoreActor final : public Actor<Void>, public ActorCallback< SubmitRestoreActor, 0, Optional<UidAndAbortedFlagT> >, public ActorCallback< SubmitRestoreActor, 1, bool >, public ActorCallback< SubmitRestoreActor, 2, RangeResult >, public ActorCallback< SubmitRestoreActor, 3, Key >, public ActorCallback< SubmitRestoreActor, 4, Void >, public ActorCallback< SubmitRestoreActor, 5, Void >, public FastAllocated<SubmitRestoreActor>, public SubmitRestoreActorState<SubmitRestoreActor> {
															#line 42554 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<SubmitRestoreActor>::operator new;
	using FastAllocated<SubmitRestoreActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< SubmitRestoreActor, 0, Optional<UidAndAbortedFlagT> >;
friend struct ActorCallback< SubmitRestoreActor, 1, bool >;
friend struct ActorCallback< SubmitRestoreActor, 2, RangeResult >;
friend struct ActorCallback< SubmitRestoreActor, 3, Key >;
friend struct ActorCallback< SubmitRestoreActor, 4, Void >;
friend struct ActorCallback< SubmitRestoreActor, 5, Void >;
															#line 4682 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	SubmitRestoreActor(FileBackupAgent* const& backupAgent,Reference<ReadYourWritesTransaction> const& tr,Key const& tagName,Key const& backupURL,Optional<std::string> const& proxy,Standalone<VectorRef<KeyRangeRef>> const& ranges,Version const& restoreVersion,Key const& addPrefix,Key const& removePrefix,LockDB const& lockDB,OnlyApplyMutationLogs const& onlyApplyMutationLogs,InconsistentSnapshotOnly const& inconsistentSnapshotOnly,Version const& beginVersion,UID const& uid) 
															#line 42570 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<Void>(),
		   SubmitRestoreActorState<SubmitRestoreActor>(backupAgent, tr, tagName, backupURL, proxy, ranges, restoreVersion, addPrefix, removePrefix, lockDB, onlyApplyMutationLogs, inconsistentSnapshotOnly, beginVersion, uid)
	{
		fdb_probe_actor_enter("submitRestore", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("submitRestore");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("submitRestore", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< SubmitRestoreActor, 0, Optional<UidAndAbortedFlagT> >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< SubmitRestoreActor, 1, bool >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< SubmitRestoreActor, 2, RangeResult >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< SubmitRestoreActor, 3, Key >*)0, actor_cancelled()); break;
		case 5: this->a_callback_error((ActorCallback< SubmitRestoreActor, 4, Void >*)0, actor_cancelled()); break;
		case 6: this->a_callback_error((ActorCallback< SubmitRestoreActor, 5, Void >*)0, actor_cancelled()); break;
		}

	}
};
															#line 4682 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<Void> submitRestore( FileBackupAgent* const& backupAgent, Reference<ReadYourWritesTransaction> const& tr, Key const& tagName, Key const& backupURL, Optional<std::string> const& proxy, Standalone<VectorRef<KeyRangeRef>> const& ranges, Version const& restoreVersion, Key const& addPrefix, Key const& removePrefix, LockDB const& lockDB, OnlyApplyMutationLogs const& onlyApplyMutationLogs, InconsistentSnapshotOnly const& inconsistentSnapshotOnly, Version const& beginVersion, UID const& uid ) {
															#line 4682 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<Void>(new SubmitRestoreActor(backupAgent, tr, tagName, backupURL, proxy, ranges, restoreVersion, addPrefix, removePrefix, lockDB, onlyApplyMutationLogs, inconsistentSnapshotOnly, beginVersion, uid));
															#line 42602 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 4783 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

	// This method will return the final status of the backup
																#line 42608 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via waitRestore()
															#line 4785 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class WaitRestoreActor>
															#line 4785 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class WaitRestoreActorState {
															#line 42614 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 4785 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	WaitRestoreActorState(Database const& cx,Key const& tagName,Verbose const& verbose) 
															#line 4785 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 4785 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : cx(cx),
															#line 4785 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   tagName(tagName),
															#line 4785 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   verbose(verbose),
															#line 4786 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   status()
															#line 42627 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("waitRestore", reinterpret_cast<unsigned long>(this));

	}
	~WaitRestoreActorState() 
	{
		fdb_probe_actor_destroy("waitRestore", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 4787 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			;
															#line 42642 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~WaitRestoreActorState();
		static_cast<WaitRestoreActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 4831 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<WaitRestoreActor*>(this)->SAV<ERestoreState>::futures) { (void)(status); this->~WaitRestoreActorState(); static_cast<WaitRestoreActor*>(this)->destroy(); return 0; }
															#line 42665 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<WaitRestoreActor*>(this)->SAV< ERestoreState >::value()) ERestoreState(std::move(status)); // state_var_RVO
		this->~WaitRestoreActorState();
		static_cast<WaitRestoreActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
															#line 4788 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr = Reference<ReadYourWritesTransaction>(new ReadYourWritesTransaction(cx));
															#line 42684 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		try {
															#line 4790 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::PRIORITY_SYSTEM_IMMEDIATE);
															#line 4791 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 4792 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 4794 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tag = makeRestoreTag(tagName.toString());
															#line 4795 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Optional<UidAndAbortedFlagT>> __when_expr_0 = tag.get(tr);
															#line 4795 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<WaitRestoreActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 42698 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1loopBody1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
			static_cast<WaitRestoreActor*>(this)->actor_wait_state = 1;
															#line 4795 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< WaitRestoreActor, 0, Optional<UidAndAbortedFlagT> >*>(static_cast<WaitRestoreActor*>(this)));
															#line 42703 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1break1(int loopDepth) 
	{
		try {
			return a_body1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 4827 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_7 = tr->onError(e);
															#line 4827 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<WaitRestoreActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 42740 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_7.isReady()) { if (__when_expr_7.isError()) return a_body1Catch1(__when_expr_7.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1Catch1when1(__when_expr_7.get(), loopDepth); };
			static_cast<WaitRestoreActor*>(this)->actor_wait_state = 8;
															#line 4827 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_7.addCallbackAndClear(static_cast<ActorCallback< WaitRestoreActor, 7, Void >*>(static_cast<WaitRestoreActor*>(this)));
															#line 42745 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(Optional<UidAndAbortedFlagT> const& current,int loopDepth) 
	{
															#line 4796 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!current.present())
															#line 42760 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 4797 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (verbose)
															#line 42764 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			{
															#line 4798 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				printf("waitRestore: Tag: %s  State: %s\n", tagName.toString().c_str(), FileBackupAgent::restoreStateText(ERestoreState::UNITIALIZED).toString().c_str());
															#line 42768 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			}
															#line 4801 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (!static_cast<WaitRestoreActor*>(this)->SAV<ERestoreState>::futures) { (void)(ERestoreState::UNITIALIZED); this->~WaitRestoreActorState(); static_cast<WaitRestoreActor*>(this)->destroy(); return 0; }
															#line 42772 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			new (&static_cast<WaitRestoreActor*>(this)->SAV< ERestoreState >::value()) ERestoreState(ERestoreState::UNITIALIZED);
			this->~WaitRestoreActorState();
			static_cast<WaitRestoreActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 4804 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		restore = RestoreConfig(current.get().first);
															#line 4806 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (verbose)
															#line 42782 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 4807 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<std::string> __when_expr_1 = restore.getProgress(tr);
															#line 4807 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<WaitRestoreActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 42788 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
			static_cast<WaitRestoreActor*>(this)->actor_wait_state = 2;
															#line 4807 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< WaitRestoreActor, 1, std::string >*>(static_cast<WaitRestoreActor*>(this)));
															#line 42793 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1loopBody1cont3(loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(Optional<UidAndAbortedFlagT> && current,int loopDepth) 
	{
															#line 4796 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!current.present())
															#line 42807 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 4797 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (verbose)
															#line 42811 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			{
															#line 4798 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				printf("waitRestore: Tag: %s  State: %s\n", tagName.toString().c_str(), FileBackupAgent::restoreStateText(ERestoreState::UNITIALIZED).toString().c_str());
															#line 42815 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			}
															#line 4801 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (!static_cast<WaitRestoreActor*>(this)->SAV<ERestoreState>::futures) { (void)(ERestoreState::UNITIALIZED); this->~WaitRestoreActorState(); static_cast<WaitRestoreActor*>(this)->destroy(); return 0; }
															#line 42819 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			new (&static_cast<WaitRestoreActor*>(this)->SAV< ERestoreState >::value()) ERestoreState(ERestoreState::UNITIALIZED);
			this->~WaitRestoreActorState();
			static_cast<WaitRestoreActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 4804 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		restore = RestoreConfig(current.get().first);
															#line 4806 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (verbose)
															#line 42829 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 4807 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<std::string> __when_expr_1 = restore.getProgress(tr);
															#line 4807 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<WaitRestoreActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 42835 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
			static_cast<WaitRestoreActor*>(this)->actor_wait_state = 2;
															#line 4807 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< WaitRestoreActor, 1, std::string >*>(static_cast<WaitRestoreActor*>(this)));
															#line 42840 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1loopBody1cont3(loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1when1(Optional<UidAndAbortedFlagT> const& current,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(current, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Optional<UidAndAbortedFlagT> && current,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(std::move(current), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<WaitRestoreActor*>(this)->actor_wait_state > 0) static_cast<WaitRestoreActor*>(this)->actor_wait_state = 0;
		static_cast<WaitRestoreActor*>(this)->ActorCallback< WaitRestoreActor, 0, Optional<UidAndAbortedFlagT> >::remove();

	}
	void a_callback_fire(ActorCallback< WaitRestoreActor, 0, Optional<UidAndAbortedFlagT> >*,Optional<UidAndAbortedFlagT> const& value) 
	{
		fdb_probe_actor_enter("waitRestore", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitRestore", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< WaitRestoreActor, 0, Optional<UidAndAbortedFlagT> >*,Optional<UidAndAbortedFlagT> && value) 
	{
		fdb_probe_actor_enter("waitRestore", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitRestore", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< WaitRestoreActor, 0, Optional<UidAndAbortedFlagT> >*,Error err) 
	{
		fdb_probe_actor_enter("waitRestore", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitRestore", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1cont3(int loopDepth) 
	{
															#line 4811 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<ERestoreState> __when_expr_2 = restore.stateEnum().getD(tr);
															#line 4811 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<WaitRestoreActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 42919 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1loopBody1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1loopBody1cont3when1(__when_expr_2.get(), loopDepth); };
		static_cast<WaitRestoreActor*>(this)->actor_wait_state = 3;
															#line 4811 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< WaitRestoreActor, 2, ERestoreState >*>(static_cast<WaitRestoreActor*>(this)));
															#line 42924 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont6(int loopDepth) 
	{
															#line 4808 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		printf("%s\n", details.c_str());
															#line 42933 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1loopBody1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(std::string const& __details,int loopDepth) 
	{
															#line 4807 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		details = __details;
															#line 42942 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1loopBody1cont6(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(std::string && __details,int loopDepth) 
	{
		details = std::move(__details);
		loopDepth = a_body1loopBody1cont6(loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<WaitRestoreActor*>(this)->actor_wait_state > 0) static_cast<WaitRestoreActor*>(this)->actor_wait_state = 0;
		static_cast<WaitRestoreActor*>(this)->ActorCallback< WaitRestoreActor, 1, std::string >::remove();

	}
	void a_callback_fire(ActorCallback< WaitRestoreActor, 1, std::string >*,std::string const& value) 
	{
		fdb_probe_actor_enter("waitRestore", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitRestore", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< WaitRestoreActor, 1, std::string >*,std::string && value) 
	{
		fdb_probe_actor_enter("waitRestore", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitRestore", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< WaitRestoreActor, 1, std::string >*,Error err) 
	{
		fdb_probe_actor_enter("waitRestore", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitRestore", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1loopBody1cont8(ERestoreState const& status_,int loopDepth) 
	{
															#line 4812 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		status = status_;
															#line 4813 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<bool> __when_expr_3 = restore.isRunnable(tr);
															#line 4813 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<WaitRestoreActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 43013 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1loopBody1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1loopBody1cont8when1(__when_expr_3.get(), loopDepth); };
		static_cast<WaitRestoreActor*>(this)->actor_wait_state = 4;
															#line 4813 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< WaitRestoreActor, 3, bool >*>(static_cast<WaitRestoreActor*>(this)));
															#line 43018 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont8(ERestoreState && status_,int loopDepth) 
	{
															#line 4812 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		status = status_;
															#line 4813 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<bool> __when_expr_3 = restore.isRunnable(tr);
															#line 4813 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<WaitRestoreActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 43031 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1loopBody1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1loopBody1cont8when1(__when_expr_3.get(), loopDepth); };
		static_cast<WaitRestoreActor*>(this)->actor_wait_state = 4;
															#line 4813 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< WaitRestoreActor, 3, bool >*>(static_cast<WaitRestoreActor*>(this)));
															#line 43036 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont3when1(ERestoreState const& status_,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont8(status_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont3when1(ERestoreState && status_,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont8(std::move(status_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<WaitRestoreActor*>(this)->actor_wait_state > 0) static_cast<WaitRestoreActor*>(this)->actor_wait_state = 0;
		static_cast<WaitRestoreActor*>(this)->ActorCallback< WaitRestoreActor, 2, ERestoreState >::remove();

	}
	void a_callback_fire(ActorCallback< WaitRestoreActor, 2, ERestoreState >*,ERestoreState const& value) 
	{
		fdb_probe_actor_enter("waitRestore", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont3when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitRestore", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< WaitRestoreActor, 2, ERestoreState >*,ERestoreState && value) 
	{
		fdb_probe_actor_enter("waitRestore", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont3when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitRestore", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< WaitRestoreActor, 2, ERestoreState >*,Error err) 
	{
		fdb_probe_actor_enter("waitRestore", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitRestore", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1loopBody1cont9(int loopDepth) 
	{
															#line 4816 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!runnable)
															#line 43108 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
			return a_body1break1(loopDepth==0?0:loopDepth-1); // break
		}
															#line 4820 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		watchFuture = tr->watch(restore.stateEnum().key);
															#line 4821 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_4 = tr->commit();
															#line 4821 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<WaitRestoreActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 43118 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1loopBody1Catch1(__when_expr_4.getError(), loopDepth); else return a_body1loopBody1cont9when1(__when_expr_4.get(), loopDepth); };
		static_cast<WaitRestoreActor*>(this)->actor_wait_state = 5;
															#line 4821 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< WaitRestoreActor, 4, Void >*>(static_cast<WaitRestoreActor*>(this)));
															#line 43123 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont8when1(bool const& __runnable,int loopDepth) 
	{
															#line 4813 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		runnable = __runnable;
															#line 43132 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1loopBody1cont9(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont8when1(bool && __runnable,int loopDepth) 
	{
		runnable = std::move(__runnable);
		loopDepth = a_body1loopBody1cont9(loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<WaitRestoreActor*>(this)->actor_wait_state > 0) static_cast<WaitRestoreActor*>(this)->actor_wait_state = 0;
		static_cast<WaitRestoreActor*>(this)->ActorCallback< WaitRestoreActor, 3, bool >::remove();

	}
	void a_callback_fire(ActorCallback< WaitRestoreActor, 3, bool >*,bool const& value) 
	{
		fdb_probe_actor_enter("waitRestore", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1cont8when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitRestore", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< WaitRestoreActor, 3, bool >*,bool && value) 
	{
		fdb_probe_actor_enter("waitRestore", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1cont8when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitRestore", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< WaitRestoreActor, 3, bool >*,Error err) 
	{
		fdb_probe_actor_enter("waitRestore", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitRestore", reinterpret_cast<unsigned long>(this), 3);

	}
	int a_body1loopBody1cont10(Void const& _,int loopDepth) 
	{
															#line 4822 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (verbose)
															#line 43199 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 4823 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_5 = watchFuture || delay(1);
															#line 4823 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<WaitRestoreActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 43205 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_5.isReady()) { if (__when_expr_5.isError()) return a_body1loopBody1Catch1(__when_expr_5.getError(), loopDepth); else return a_body1loopBody1cont10when1(__when_expr_5.get(), loopDepth); };
			static_cast<WaitRestoreActor*>(this)->actor_wait_state = 6;
															#line 4823 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_5.addCallbackAndClear(static_cast<ActorCallback< WaitRestoreActor, 5, Void >*>(static_cast<WaitRestoreActor*>(this)));
															#line 43210 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
															#line 4825 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_6 = watchFuture;
															#line 4825 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<WaitRestoreActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 43219 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_6.isReady()) { if (__when_expr_6.isError()) return a_body1loopBody1Catch1(__when_expr_6.getError(), loopDepth); else return a_body1loopBody1cont10when2(__when_expr_6.get(), loopDepth); };
			static_cast<WaitRestoreActor*>(this)->actor_wait_state = 7;
															#line 4825 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_6.addCallbackAndClear(static_cast<ActorCallback< WaitRestoreActor, 6, Void >*>(static_cast<WaitRestoreActor*>(this)));
															#line 43224 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}

		return loopDepth;
	}
	int a_body1loopBody1cont10(Void && _,int loopDepth) 
	{
															#line 4822 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (verbose)
															#line 43234 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 4823 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_5 = watchFuture || delay(1);
															#line 4823 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<WaitRestoreActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 43240 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_5.isReady()) { if (__when_expr_5.isError()) return a_body1loopBody1Catch1(__when_expr_5.getError(), loopDepth); else return a_body1loopBody1cont10when1(__when_expr_5.get(), loopDepth); };
			static_cast<WaitRestoreActor*>(this)->actor_wait_state = 6;
															#line 4823 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_5.addCallbackAndClear(static_cast<ActorCallback< WaitRestoreActor, 5, Void >*>(static_cast<WaitRestoreActor*>(this)));
															#line 43245 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
															#line 4825 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_6 = watchFuture;
															#line 4825 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<WaitRestoreActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 43254 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_6.isReady()) { if (__when_expr_6.isError()) return a_body1loopBody1Catch1(__when_expr_6.getError(), loopDepth); else return a_body1loopBody1cont10when2(__when_expr_6.get(), loopDepth); };
			static_cast<WaitRestoreActor*>(this)->actor_wait_state = 7;
															#line 4825 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_6.addCallbackAndClear(static_cast<ActorCallback< WaitRestoreActor, 6, Void >*>(static_cast<WaitRestoreActor*>(this)));
															#line 43259 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}

		return loopDepth;
	}
	int a_body1loopBody1cont9when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont10(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont9when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont10(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose5() 
	{
		if (static_cast<WaitRestoreActor*>(this)->actor_wait_state > 0) static_cast<WaitRestoreActor*>(this)->actor_wait_state = 0;
		static_cast<WaitRestoreActor*>(this)->ActorCallback< WaitRestoreActor, 4, Void >::remove();

	}
	void a_callback_fire(ActorCallback< WaitRestoreActor, 4, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("waitRestore", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1loopBody1cont9when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitRestore", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_fire(ActorCallback< WaitRestoreActor, 4, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("waitRestore", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1loopBody1cont9when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitRestore", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_error(ActorCallback< WaitRestoreActor, 4, Void >*,Error err) 
	{
		fdb_probe_actor_enter("waitRestore", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitRestore", reinterpret_cast<unsigned long>(this), 4);

	}
	int a_body1loopBody1cont10cont1(int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont10cont4(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont10cont2(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont10cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont10cont2(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont10cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont10when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont10cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont10when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont10cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose6() 
	{
		if (static_cast<WaitRestoreActor*>(this)->actor_wait_state > 0) static_cast<WaitRestoreActor*>(this)->actor_wait_state = 0;
		static_cast<WaitRestoreActor*>(this)->ActorCallback< WaitRestoreActor, 5, Void >::remove();

	}
	void a_callback_fire(ActorCallback< WaitRestoreActor, 5, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("waitRestore", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1loopBody1cont10when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitRestore", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_fire(ActorCallback< WaitRestoreActor, 5, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("waitRestore", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1loopBody1cont10when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitRestore", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_error(ActorCallback< WaitRestoreActor, 5, Void >*,Error err) 
	{
		fdb_probe_actor_enter("waitRestore", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitRestore", reinterpret_cast<unsigned long>(this), 5);

	}
	int a_body1loopBody1cont10cont3(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont10cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont10cont3(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont10cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont10when2(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont10cont3(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont10when2(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont10cont3(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose7() 
	{
		if (static_cast<WaitRestoreActor*>(this)->actor_wait_state > 0) static_cast<WaitRestoreActor*>(this)->actor_wait_state = 0;
		static_cast<WaitRestoreActor*>(this)->ActorCallback< WaitRestoreActor, 6, Void >::remove();

	}
	void a_callback_fire(ActorCallback< WaitRestoreActor, 6, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("waitRestore", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1loopBody1cont10when2(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitRestore", reinterpret_cast<unsigned long>(this), 6);

	}
	void a_callback_fire(ActorCallback< WaitRestoreActor, 6, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("waitRestore", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1loopBody1cont10when2(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitRestore", reinterpret_cast<unsigned long>(this), 6);

	}
	void a_callback_error(ActorCallback< WaitRestoreActor, 6, Void >*,Error err) 
	{
		fdb_probe_actor_enter("waitRestore", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitRestore", reinterpret_cast<unsigned long>(this), 6);

	}
	int a_body1loopBody1cont10cont4(int loopDepth) 
	{
		try {
			loopDepth = a_body1loopBody1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose8() 
	{
		if (static_cast<WaitRestoreActor*>(this)->actor_wait_state > 0) static_cast<WaitRestoreActor*>(this)->actor_wait_state = 0;
		static_cast<WaitRestoreActor*>(this)->ActorCallback< WaitRestoreActor, 7, Void >::remove();

	}
	void a_callback_fire(ActorCallback< WaitRestoreActor, 7, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("waitRestore", reinterpret_cast<unsigned long>(this), 7);
		a_exitChoose8();
		try {
			a_body1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitRestore", reinterpret_cast<unsigned long>(this), 7);

	}
	void a_callback_fire(ActorCallback< WaitRestoreActor, 7, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("waitRestore", reinterpret_cast<unsigned long>(this), 7);
		a_exitChoose8();
		try {
			a_body1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitRestore", reinterpret_cast<unsigned long>(this), 7);

	}
	void a_callback_error(ActorCallback< WaitRestoreActor, 7, Void >*,Error err) 
	{
		fdb_probe_actor_enter("waitRestore", reinterpret_cast<unsigned long>(this), 7);
		a_exitChoose8();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitRestore", reinterpret_cast<unsigned long>(this), 7);

	}
															#line 4785 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Database cx;
															#line 4785 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Key tagName;
															#line 4785 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Verbose verbose;
															#line 4786 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	ERestoreState status;
															#line 4788 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 4794 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	KeyBackedTag tag;
															#line 4804 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	RestoreConfig restore;
															#line 4807 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	std::string details;
															#line 4813 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	bool runnable;
															#line 4820 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Future<Void> watchFuture;
															#line 43592 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via waitRestore()
															#line 4785 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class WaitRestoreActor final : public Actor<ERestoreState>, public ActorCallback< WaitRestoreActor, 0, Optional<UidAndAbortedFlagT> >, public ActorCallback< WaitRestoreActor, 1, std::string >, public ActorCallback< WaitRestoreActor, 2, ERestoreState >, public ActorCallback< WaitRestoreActor, 3, bool >, public ActorCallback< WaitRestoreActor, 4, Void >, public ActorCallback< WaitRestoreActor, 5, Void >, public ActorCallback< WaitRestoreActor, 6, Void >, public ActorCallback< WaitRestoreActor, 7, Void >, public FastAllocated<WaitRestoreActor>, public WaitRestoreActorState<WaitRestoreActor> {
															#line 43597 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<WaitRestoreActor>::operator new;
	using FastAllocated<WaitRestoreActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<ERestoreState>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< WaitRestoreActor, 0, Optional<UidAndAbortedFlagT> >;
friend struct ActorCallback< WaitRestoreActor, 1, std::string >;
friend struct ActorCallback< WaitRestoreActor, 2, ERestoreState >;
friend struct ActorCallback< WaitRestoreActor, 3, bool >;
friend struct ActorCallback< WaitRestoreActor, 4, Void >;
friend struct ActorCallback< WaitRestoreActor, 5, Void >;
friend struct ActorCallback< WaitRestoreActor, 6, Void >;
friend struct ActorCallback< WaitRestoreActor, 7, Void >;
															#line 4785 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	WaitRestoreActor(Database const& cx,Key const& tagName,Verbose const& verbose) 
															#line 43615 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<ERestoreState>(),
		   WaitRestoreActorState<WaitRestoreActor>(cx, tagName, verbose)
	{
		fdb_probe_actor_enter("waitRestore", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("waitRestore");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("waitRestore", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< WaitRestoreActor, 0, Optional<UidAndAbortedFlagT> >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< WaitRestoreActor, 1, std::string >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< WaitRestoreActor, 2, ERestoreState >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< WaitRestoreActor, 3, bool >*)0, actor_cancelled()); break;
		case 5: this->a_callback_error((ActorCallback< WaitRestoreActor, 4, Void >*)0, actor_cancelled()); break;
		case 6: this->a_callback_error((ActorCallback< WaitRestoreActor, 5, Void >*)0, actor_cancelled()); break;
		case 7: this->a_callback_error((ActorCallback< WaitRestoreActor, 6, Void >*)0, actor_cancelled()); break;
		case 8: this->a_callback_error((ActorCallback< WaitRestoreActor, 7, Void >*)0, actor_cancelled()); break;
		}

	}
};
															#line 4785 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<ERestoreState> waitRestore( Database const& cx, Key const& tagName, Verbose const& verbose ) {
															#line 4785 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<ERestoreState>(new WaitRestoreActor(cx, tagName, verbose));
															#line 43649 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 4833 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

																#line 43654 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via discontinueBackup()
															#line 4834 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class DiscontinueBackupActor>
															#line 4834 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class DiscontinueBackupActorState {
															#line 43660 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 4834 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	DiscontinueBackupActorState(FileBackupAgent* const& backupAgent,Reference<ReadYourWritesTransaction> const& tr,Key const& tagName) 
															#line 4834 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 4834 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : backupAgent(backupAgent),
															#line 4834 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   tr(tr),
															#line 4834 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   tagName(tagName)
															#line 43671 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("discontinueBackup", reinterpret_cast<unsigned long>(this));

	}
	~DiscontinueBackupActorState() 
	{
		fdb_probe_actor_destroy("discontinueBackup", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 4837 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 4838 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 4840 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tag = makeBackupTag(tagName.toString());
															#line 4841 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<UidAndAbortedFlagT> __when_expr_0 = tag.getOrThrow(tr, Snapshot::False, backup_unneeded());
															#line 4841 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<DiscontinueBackupActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 43694 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<DiscontinueBackupActor*>(this)->actor_wait_state = 1;
															#line 4841 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< DiscontinueBackupActor, 0, UidAndAbortedFlagT >*>(static_cast<DiscontinueBackupActor*>(this)));
															#line 43699 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~DiscontinueBackupActorState();
		static_cast<DiscontinueBackupActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 4842 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		config = BackupConfig(current.first);
															#line 4843 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<EBackupState> __when_expr_1 = config.stateEnum().getD(tr, Snapshot::False, EBackupState::STATE_NEVERRAN);
															#line 4843 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<DiscontinueBackupActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 43726 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<DiscontinueBackupActor*>(this)->actor_wait_state = 2;
															#line 4843 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< DiscontinueBackupActor, 1, EBackupState >*>(static_cast<DiscontinueBackupActor*>(this)));
															#line 43731 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1when1(UidAndAbortedFlagT const& __current,int loopDepth) 
	{
															#line 4841 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		current = __current;
															#line 43740 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1when1(UidAndAbortedFlagT && __current,int loopDepth) 
	{
		current = std::move(__current);
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<DiscontinueBackupActor*>(this)->actor_wait_state > 0) static_cast<DiscontinueBackupActor*>(this)->actor_wait_state = 0;
		static_cast<DiscontinueBackupActor*>(this)->ActorCallback< DiscontinueBackupActor, 0, UidAndAbortedFlagT >::remove();

	}
	void a_callback_fire(ActorCallback< DiscontinueBackupActor, 0, UidAndAbortedFlagT >*,UidAndAbortedFlagT const& value) 
	{
		fdb_probe_actor_enter("discontinueBackup", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("discontinueBackup", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< DiscontinueBackupActor, 0, UidAndAbortedFlagT >*,UidAndAbortedFlagT && value) 
	{
		fdb_probe_actor_enter("discontinueBackup", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("discontinueBackup", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< DiscontinueBackupActor, 0, UidAndAbortedFlagT >*,Error err) 
	{
		fdb_probe_actor_enter("discontinueBackup", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("discontinueBackup", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont2(int loopDepth) 
	{
															#line 4845 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!FileBackupAgent::isRunnable(status))
															#line 43807 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 4846 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			return a_body1Catch1(backup_unneeded(), loopDepth);
															#line 43811 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 4851 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Optional<Version>> __when_expr_2 = config.getLatestRestorableVersion(tr);
															#line 4851 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<DiscontinueBackupActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 43817 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont2when1(__when_expr_2.get(), loopDepth); };
		static_cast<DiscontinueBackupActor*>(this)->actor_wait_state = 3;
															#line 4851 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< DiscontinueBackupActor, 2, Optional<Version> >*>(static_cast<DiscontinueBackupActor*>(this)));
															#line 43822 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1when1(EBackupState const& __status,int loopDepth) 
	{
															#line 4843 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		status = __status;
															#line 43831 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont2(loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(EBackupState && __status,int loopDepth) 
	{
		status = std::move(__status);
		loopDepth = a_body1cont2(loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<DiscontinueBackupActor*>(this)->actor_wait_state > 0) static_cast<DiscontinueBackupActor*>(this)->actor_wait_state = 0;
		static_cast<DiscontinueBackupActor*>(this)->ActorCallback< DiscontinueBackupActor, 1, EBackupState >::remove();

	}
	void a_callback_fire(ActorCallback< DiscontinueBackupActor, 1, EBackupState >*,EBackupState const& value) 
	{
		fdb_probe_actor_enter("discontinueBackup", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("discontinueBackup", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< DiscontinueBackupActor, 1, EBackupState >*,EBackupState && value) 
	{
		fdb_probe_actor_enter("discontinueBackup", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("discontinueBackup", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< DiscontinueBackupActor, 1, EBackupState >*,Error err) 
	{
		fdb_probe_actor_enter("discontinueBackup", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("discontinueBackup", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont3(int loopDepth) 
	{
															#line 4853 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent(SevInfo, "FBA_DiscontinueBackup") .detail("AlreadyRestorable", latestRestorableVersion.present() ? "Yes" : "No") .detail("TagName", tag.tagName.c_str()) .detail("Status", BackupAgentBase::getStateText(status));
															#line 4858 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (latestRestorableVersion.present())
															#line 43900 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 4860 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_3 = tag.cancel(tr);
															#line 4860 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<DiscontinueBackupActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 43906 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1cont3when1(__when_expr_3.get(), loopDepth); };
			static_cast<DiscontinueBackupActor*>(this)->actor_wait_state = 4;
															#line 4860 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< DiscontinueBackupActor, 3, Void >*>(static_cast<DiscontinueBackupActor*>(this)));
															#line 43911 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1cont5(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont2when1(Optional<Version> const& __latestRestorableVersion,int loopDepth) 
	{
															#line 4851 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		latestRestorableVersion = __latestRestorableVersion;
															#line 43925 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1cont2when1(Optional<Version> && __latestRestorableVersion,int loopDepth) 
	{
		latestRestorableVersion = std::move(__latestRestorableVersion);
		loopDepth = a_body1cont3(loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<DiscontinueBackupActor*>(this)->actor_wait_state > 0) static_cast<DiscontinueBackupActor*>(this)->actor_wait_state = 0;
		static_cast<DiscontinueBackupActor*>(this)->ActorCallback< DiscontinueBackupActor, 2, Optional<Version> >::remove();

	}
	void a_callback_fire(ActorCallback< DiscontinueBackupActor, 2, Optional<Version> >*,Optional<Version> const& value) 
	{
		fdb_probe_actor_enter("discontinueBackup", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("discontinueBackup", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< DiscontinueBackupActor, 2, Optional<Version> >*,Optional<Version> && value) 
	{
		fdb_probe_actor_enter("discontinueBackup", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("discontinueBackup", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< DiscontinueBackupActor, 2, Optional<Version> >*,Error err) 
	{
		fdb_probe_actor_enter("discontinueBackup", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("discontinueBackup", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1cont5(int loopDepth) 
	{
															#line 4874 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<bool> __when_expr_7 = config.stopWhenDone().getOrThrow(tr);
															#line 4874 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<DiscontinueBackupActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 43994 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_7.isReady()) { if (__when_expr_7.isError()) return a_body1Catch1(__when_expr_7.getError(), loopDepth); else return a_body1cont5when1(__when_expr_7.get(), loopDepth); };
		static_cast<DiscontinueBackupActor*>(this)->actor_wait_state = 8;
															#line 4874 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_7.addCallbackAndClear(static_cast<ActorCallback< DiscontinueBackupActor, 7, bool >*>(static_cast<DiscontinueBackupActor*>(this)));
															#line 43999 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont6(Void const& _,int loopDepth) 
	{
															#line 4862 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr->setOption(FDBTransactionOptions::COMMIT_ON_FIRST_PROXY);
															#line 4864 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Key> __when_expr_4 = config.destUidValue().getOrThrow(tr);
															#line 4864 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<DiscontinueBackupActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 44012 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1Catch1(__when_expr_4.getError(), loopDepth); else return a_body1cont6when1(__when_expr_4.get(), loopDepth); };
		static_cast<DiscontinueBackupActor*>(this)->actor_wait_state = 5;
															#line 4864 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< DiscontinueBackupActor, 4, Key >*>(static_cast<DiscontinueBackupActor*>(this)));
															#line 44017 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont6(Void && _,int loopDepth) 
	{
															#line 4862 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr->setOption(FDBTransactionOptions::COMMIT_ON_FIRST_PROXY);
															#line 4864 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Key> __when_expr_4 = config.destUidValue().getOrThrow(tr);
															#line 4864 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<DiscontinueBackupActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 44030 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1Catch1(__when_expr_4.getError(), loopDepth); else return a_body1cont6when1(__when_expr_4.get(), loopDepth); };
		static_cast<DiscontinueBackupActor*>(this)->actor_wait_state = 5;
															#line 4864 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< DiscontinueBackupActor, 4, Key >*>(static_cast<DiscontinueBackupActor*>(this)));
															#line 44035 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont3when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont6(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont3when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont6(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<DiscontinueBackupActor*>(this)->actor_wait_state > 0) static_cast<DiscontinueBackupActor*>(this)->actor_wait_state = 0;
		static_cast<DiscontinueBackupActor*>(this)->ActorCallback< DiscontinueBackupActor, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< DiscontinueBackupActor, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("discontinueBackup", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont3when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("discontinueBackup", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< DiscontinueBackupActor, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("discontinueBackup", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont3when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("discontinueBackup", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< DiscontinueBackupActor, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("discontinueBackup", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("discontinueBackup", reinterpret_cast<unsigned long>(this), 3);

	}
	int a_body1cont7(int loopDepth) 
	{
															#line 4865 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_5 = success(tr->getReadVersion());
															#line 4865 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<DiscontinueBackupActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 44109 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_5.isReady()) { if (__when_expr_5.isError()) return a_body1Catch1(__when_expr_5.getError(), loopDepth); else return a_body1cont7when1(__when_expr_5.get(), loopDepth); };
		static_cast<DiscontinueBackupActor*>(this)->actor_wait_state = 6;
															#line 4865 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_5.addCallbackAndClear(static_cast<ActorCallback< DiscontinueBackupActor, 5, Void >*>(static_cast<DiscontinueBackupActor*>(this)));
															#line 44114 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont6when1(Key const& __destUidValue,int loopDepth) 
	{
															#line 4864 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		destUidValue = __destUidValue;
															#line 44123 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont7(loopDepth);

		return loopDepth;
	}
	int a_body1cont6when1(Key && __destUidValue,int loopDepth) 
	{
		destUidValue = std::move(__destUidValue);
		loopDepth = a_body1cont7(loopDepth);

		return loopDepth;
	}
	void a_exitChoose5() 
	{
		if (static_cast<DiscontinueBackupActor*>(this)->actor_wait_state > 0) static_cast<DiscontinueBackupActor*>(this)->actor_wait_state = 0;
		static_cast<DiscontinueBackupActor*>(this)->ActorCallback< DiscontinueBackupActor, 4, Key >::remove();

	}
	void a_callback_fire(ActorCallback< DiscontinueBackupActor, 4, Key >*,Key const& value) 
	{
		fdb_probe_actor_enter("discontinueBackup", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont6when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("discontinueBackup", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_fire(ActorCallback< DiscontinueBackupActor, 4, Key >*,Key && value) 
	{
		fdb_probe_actor_enter("discontinueBackup", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont6when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("discontinueBackup", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_error(ActorCallback< DiscontinueBackupActor, 4, Key >*,Error err) 
	{
		fdb_probe_actor_enter("discontinueBackup", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("discontinueBackup", reinterpret_cast<unsigned long>(this), 4);

	}
	int a_body1cont8(Void const& _,int loopDepth) 
	{
															#line 4866 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_6 = eraseLogData(tr, config.getUidAsKey(), destUidValue) && fileBackup::clearBackupStartID(tr, config.getUid());
															#line 4866 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<DiscontinueBackupActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 44192 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_6.isReady()) { if (__when_expr_6.isError()) return a_body1Catch1(__when_expr_6.getError(), loopDepth); else return a_body1cont8when1(__when_expr_6.get(), loopDepth); };
		static_cast<DiscontinueBackupActor*>(this)->actor_wait_state = 7;
															#line 4866 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_6.addCallbackAndClear(static_cast<ActorCallback< DiscontinueBackupActor, 6, Void >*>(static_cast<DiscontinueBackupActor*>(this)));
															#line 44197 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont8(Void && _,int loopDepth) 
	{
															#line 4866 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_6 = eraseLogData(tr, config.getUidAsKey(), destUidValue) && fileBackup::clearBackupStartID(tr, config.getUid());
															#line 4866 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<DiscontinueBackupActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 44208 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_6.isReady()) { if (__when_expr_6.isError()) return a_body1Catch1(__when_expr_6.getError(), loopDepth); else return a_body1cont8when1(__when_expr_6.get(), loopDepth); };
		static_cast<DiscontinueBackupActor*>(this)->actor_wait_state = 7;
															#line 4866 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_6.addCallbackAndClear(static_cast<ActorCallback< DiscontinueBackupActor, 6, Void >*>(static_cast<DiscontinueBackupActor*>(this)));
															#line 44213 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont7when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont8(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont7when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont8(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose6() 
	{
		if (static_cast<DiscontinueBackupActor*>(this)->actor_wait_state > 0) static_cast<DiscontinueBackupActor*>(this)->actor_wait_state = 0;
		static_cast<DiscontinueBackupActor*>(this)->ActorCallback< DiscontinueBackupActor, 5, Void >::remove();

	}
	void a_callback_fire(ActorCallback< DiscontinueBackupActor, 5, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("discontinueBackup", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1cont7when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("discontinueBackup", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_fire(ActorCallback< DiscontinueBackupActor, 5, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("discontinueBackup", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1cont7when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("discontinueBackup", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_error(ActorCallback< DiscontinueBackupActor, 5, Void >*,Error err) 
	{
		fdb_probe_actor_enter("discontinueBackup", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("discontinueBackup", reinterpret_cast<unsigned long>(this), 5);

	}
	int a_body1cont9(Void const& _,int loopDepth) 
	{
															#line 4869 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		config.stateEnum().set(tr, EBackupState::STATE_COMPLETED);
															#line 4871 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<DiscontinueBackupActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~DiscontinueBackupActorState(); static_cast<DiscontinueBackupActor*>(this)->destroy(); return 0; }
															#line 44287 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<DiscontinueBackupActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~DiscontinueBackupActorState();
		static_cast<DiscontinueBackupActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont9(Void && _,int loopDepth) 
	{
															#line 4869 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		config.stateEnum().set(tr, EBackupState::STATE_COMPLETED);
															#line 4871 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<DiscontinueBackupActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~DiscontinueBackupActorState(); static_cast<DiscontinueBackupActor*>(this)->destroy(); return 0; }
															#line 44301 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<DiscontinueBackupActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~DiscontinueBackupActorState();
		static_cast<DiscontinueBackupActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont8when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont9(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont8when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont9(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose7() 
	{
		if (static_cast<DiscontinueBackupActor*>(this)->actor_wait_state > 0) static_cast<DiscontinueBackupActor*>(this)->actor_wait_state = 0;
		static_cast<DiscontinueBackupActor*>(this)->ActorCallback< DiscontinueBackupActor, 6, Void >::remove();

	}
	void a_callback_fire(ActorCallback< DiscontinueBackupActor, 6, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("discontinueBackup", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1cont8when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("discontinueBackup", reinterpret_cast<unsigned long>(this), 6);

	}
	void a_callback_fire(ActorCallback< DiscontinueBackupActor, 6, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("discontinueBackup", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1cont8when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("discontinueBackup", reinterpret_cast<unsigned long>(this), 6);

	}
	void a_callback_error(ActorCallback< DiscontinueBackupActor, 6, Void >*,Error err) 
	{
		fdb_probe_actor_enter("discontinueBackup", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("discontinueBackup", reinterpret_cast<unsigned long>(this), 6);

	}
	int a_body1cont11(int loopDepth) 
	{
															#line 4876 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (stopWhenDone)
															#line 44376 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 4877 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			return a_body1Catch1(backup_duplicate(), loopDepth);
															#line 44380 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 4880 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		config.stopWhenDone().set(tr, true);
															#line 4882 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<DiscontinueBackupActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~DiscontinueBackupActorState(); static_cast<DiscontinueBackupActor*>(this)->destroy(); return 0; }
															#line 44386 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<DiscontinueBackupActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~DiscontinueBackupActorState();
		static_cast<DiscontinueBackupActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont5when1(bool const& __stopWhenDone,int loopDepth) 
	{
															#line 4874 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		stopWhenDone = __stopWhenDone;
															#line 44398 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont11(loopDepth);

		return loopDepth;
	}
	int a_body1cont5when1(bool && __stopWhenDone,int loopDepth) 
	{
		stopWhenDone = std::move(__stopWhenDone);
		loopDepth = a_body1cont11(loopDepth);

		return loopDepth;
	}
	void a_exitChoose8() 
	{
		if (static_cast<DiscontinueBackupActor*>(this)->actor_wait_state > 0) static_cast<DiscontinueBackupActor*>(this)->actor_wait_state = 0;
		static_cast<DiscontinueBackupActor*>(this)->ActorCallback< DiscontinueBackupActor, 7, bool >::remove();

	}
	void a_callback_fire(ActorCallback< DiscontinueBackupActor, 7, bool >*,bool const& value) 
	{
		fdb_probe_actor_enter("discontinueBackup", reinterpret_cast<unsigned long>(this), 7);
		a_exitChoose8();
		try {
			a_body1cont5when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("discontinueBackup", reinterpret_cast<unsigned long>(this), 7);

	}
	void a_callback_fire(ActorCallback< DiscontinueBackupActor, 7, bool >*,bool && value) 
	{
		fdb_probe_actor_enter("discontinueBackup", reinterpret_cast<unsigned long>(this), 7);
		a_exitChoose8();
		try {
			a_body1cont5when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("discontinueBackup", reinterpret_cast<unsigned long>(this), 7);

	}
	void a_callback_error(ActorCallback< DiscontinueBackupActor, 7, bool >*,Error err) 
	{
		fdb_probe_actor_enter("discontinueBackup", reinterpret_cast<unsigned long>(this), 7);
		a_exitChoose8();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("discontinueBackup", reinterpret_cast<unsigned long>(this), 7);

	}
															#line 4834 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	FileBackupAgent* backupAgent;
															#line 4834 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 4834 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Key tagName;
															#line 4840 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	KeyBackedTag tag;
															#line 4841 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	UidAndAbortedFlagT current;
															#line 4842 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	BackupConfig config;
															#line 4843 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	EBackupState status;
															#line 4851 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Optional<Version> latestRestorableVersion;
															#line 4864 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Key destUidValue;
															#line 4874 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	bool stopWhenDone;
															#line 44481 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via discontinueBackup()
															#line 4834 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class DiscontinueBackupActor final : public Actor<Void>, public ActorCallback< DiscontinueBackupActor, 0, UidAndAbortedFlagT >, public ActorCallback< DiscontinueBackupActor, 1, EBackupState >, public ActorCallback< DiscontinueBackupActor, 2, Optional<Version> >, public ActorCallback< DiscontinueBackupActor, 3, Void >, public ActorCallback< DiscontinueBackupActor, 4, Key >, public ActorCallback< DiscontinueBackupActor, 5, Void >, public ActorCallback< DiscontinueBackupActor, 6, Void >, public ActorCallback< DiscontinueBackupActor, 7, bool >, public FastAllocated<DiscontinueBackupActor>, public DiscontinueBackupActorState<DiscontinueBackupActor> {
															#line 44486 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<DiscontinueBackupActor>::operator new;
	using FastAllocated<DiscontinueBackupActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< DiscontinueBackupActor, 0, UidAndAbortedFlagT >;
friend struct ActorCallback< DiscontinueBackupActor, 1, EBackupState >;
friend struct ActorCallback< DiscontinueBackupActor, 2, Optional<Version> >;
friend struct ActorCallback< DiscontinueBackupActor, 3, Void >;
friend struct ActorCallback< DiscontinueBackupActor, 4, Key >;
friend struct ActorCallback< DiscontinueBackupActor, 5, Void >;
friend struct ActorCallback< DiscontinueBackupActor, 6, Void >;
friend struct ActorCallback< DiscontinueBackupActor, 7, bool >;
															#line 4834 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	DiscontinueBackupActor(FileBackupAgent* const& backupAgent,Reference<ReadYourWritesTransaction> const& tr,Key const& tagName) 
															#line 44504 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<Void>(),
		   DiscontinueBackupActorState<DiscontinueBackupActor>(backupAgent, tr, tagName)
	{
		fdb_probe_actor_enter("discontinueBackup", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("discontinueBackup");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("discontinueBackup", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< DiscontinueBackupActor, 0, UidAndAbortedFlagT >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< DiscontinueBackupActor, 1, EBackupState >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< DiscontinueBackupActor, 2, Optional<Version> >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< DiscontinueBackupActor, 3, Void >*)0, actor_cancelled()); break;
		case 5: this->a_callback_error((ActorCallback< DiscontinueBackupActor, 4, Key >*)0, actor_cancelled()); break;
		case 6: this->a_callback_error((ActorCallback< DiscontinueBackupActor, 5, Void >*)0, actor_cancelled()); break;
		case 7: this->a_callback_error((ActorCallback< DiscontinueBackupActor, 6, Void >*)0, actor_cancelled()); break;
		case 8: this->a_callback_error((ActorCallback< DiscontinueBackupActor, 7, bool >*)0, actor_cancelled()); break;
		}

	}
};
															#line 4834 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<Void> discontinueBackup( FileBackupAgent* const& backupAgent, Reference<ReadYourWritesTransaction> const& tr, Key const& tagName ) {
															#line 4834 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<Void>(new DiscontinueBackupActor(backupAgent, tr, tagName));
															#line 44538 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 4884 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

																#line 44543 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via abortBackup()
															#line 4885 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class AbortBackupActor>
															#line 4885 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class AbortBackupActorState {
															#line 44549 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 4885 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	AbortBackupActorState(FileBackupAgent* const& backupAgent,Reference<ReadYourWritesTransaction> const& tr,std::string const& tagName) 
															#line 4885 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 4885 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : backupAgent(backupAgent),
															#line 4885 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   tr(tr),
															#line 4885 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   tagName(tagName)
															#line 44560 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("abortBackup", reinterpret_cast<unsigned long>(this));

	}
	~AbortBackupActorState() 
	{
		fdb_probe_actor_destroy("abortBackup", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 4888 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 4889 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 4891 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tag = makeBackupTag(tagName);
															#line 4892 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<UidAndAbortedFlagT> __when_expr_0 = tag.getOrThrow(tr, Snapshot::False, backup_unneeded());
															#line 4892 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<AbortBackupActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 44583 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<AbortBackupActor*>(this)->actor_wait_state = 1;
															#line 4892 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< AbortBackupActor, 0, UidAndAbortedFlagT >*>(static_cast<AbortBackupActor*>(this)));
															#line 44588 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~AbortBackupActorState();
		static_cast<AbortBackupActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 4894 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		config = BackupConfig(current.first);
															#line 4895 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Key> __when_expr_1 = config.destUidValue().getOrThrow(tr);
															#line 4895 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<AbortBackupActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 44615 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<AbortBackupActor*>(this)->actor_wait_state = 2;
															#line 4895 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< AbortBackupActor, 1, Key >*>(static_cast<AbortBackupActor*>(this)));
															#line 44620 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1when1(UidAndAbortedFlagT const& __current,int loopDepth) 
	{
															#line 4892 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		current = __current;
															#line 44629 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1when1(UidAndAbortedFlagT && __current,int loopDepth) 
	{
		current = std::move(__current);
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<AbortBackupActor*>(this)->actor_wait_state > 0) static_cast<AbortBackupActor*>(this)->actor_wait_state = 0;
		static_cast<AbortBackupActor*>(this)->ActorCallback< AbortBackupActor, 0, UidAndAbortedFlagT >::remove();

	}
	void a_callback_fire(ActorCallback< AbortBackupActor, 0, UidAndAbortedFlagT >*,UidAndAbortedFlagT const& value) 
	{
		fdb_probe_actor_enter("abortBackup", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("abortBackup", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< AbortBackupActor, 0, UidAndAbortedFlagT >*,UidAndAbortedFlagT && value) 
	{
		fdb_probe_actor_enter("abortBackup", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("abortBackup", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< AbortBackupActor, 0, UidAndAbortedFlagT >*,Error err) 
	{
		fdb_probe_actor_enter("abortBackup", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("abortBackup", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont2(int loopDepth) 
	{
															#line 4896 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<EBackupState> __when_expr_2 = config.stateEnum().getD(tr, Snapshot::False, EBackupState::STATE_NEVERRAN);
															#line 4896 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<AbortBackupActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 44698 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont2when1(__when_expr_2.get(), loopDepth); };
		static_cast<AbortBackupActor*>(this)->actor_wait_state = 3;
															#line 4896 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< AbortBackupActor, 2, EBackupState >*>(static_cast<AbortBackupActor*>(this)));
															#line 44703 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1when1(Key const& __destUidValue,int loopDepth) 
	{
															#line 4895 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		destUidValue = __destUidValue;
															#line 44712 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont2(loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Key && __destUidValue,int loopDepth) 
	{
		destUidValue = std::move(__destUidValue);
		loopDepth = a_body1cont2(loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<AbortBackupActor*>(this)->actor_wait_state > 0) static_cast<AbortBackupActor*>(this)->actor_wait_state = 0;
		static_cast<AbortBackupActor*>(this)->ActorCallback< AbortBackupActor, 1, Key >::remove();

	}
	void a_callback_fire(ActorCallback< AbortBackupActor, 1, Key >*,Key const& value) 
	{
		fdb_probe_actor_enter("abortBackup", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("abortBackup", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< AbortBackupActor, 1, Key >*,Key && value) 
	{
		fdb_probe_actor_enter("abortBackup", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("abortBackup", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< AbortBackupActor, 1, Key >*,Error err) 
	{
		fdb_probe_actor_enter("abortBackup", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("abortBackup", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont3(EBackupState const& status,int loopDepth) 
	{
															#line 4898 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!backupAgent->isRunnable(status))
															#line 44779 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 4899 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			return a_body1Catch1(backup_unneeded(), loopDepth);
															#line 44783 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 4902 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent(SevInfo, "FBA_AbortBackup") .detail("TagName", tagName.c_str()) .detail("Status", BackupAgentBase::getStateText(status));
															#line 4907 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_3 = tag.cancel(tr);
															#line 4907 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<AbortBackupActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 44791 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1cont3when1(__when_expr_3.get(), loopDepth); };
		static_cast<AbortBackupActor*>(this)->actor_wait_state = 4;
															#line 4907 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< AbortBackupActor, 3, Void >*>(static_cast<AbortBackupActor*>(this)));
															#line 44796 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont3(EBackupState && status,int loopDepth) 
	{
															#line 4898 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!backupAgent->isRunnable(status))
															#line 44805 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 4899 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			return a_body1Catch1(backup_unneeded(), loopDepth);
															#line 44809 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 4902 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent(SevInfo, "FBA_AbortBackup") .detail("TagName", tagName.c_str()) .detail("Status", BackupAgentBase::getStateText(status));
															#line 4907 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_3 = tag.cancel(tr);
															#line 4907 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<AbortBackupActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 44817 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1cont3when1(__when_expr_3.get(), loopDepth); };
		static_cast<AbortBackupActor*>(this)->actor_wait_state = 4;
															#line 4907 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< AbortBackupActor, 3, Void >*>(static_cast<AbortBackupActor*>(this)));
															#line 44822 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont2when1(EBackupState const& status,int loopDepth) 
	{
		loopDepth = a_body1cont3(status, loopDepth);

		return loopDepth;
	}
	int a_body1cont2when1(EBackupState && status,int loopDepth) 
	{
		loopDepth = a_body1cont3(std::move(status), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<AbortBackupActor*>(this)->actor_wait_state > 0) static_cast<AbortBackupActor*>(this)->actor_wait_state = 0;
		static_cast<AbortBackupActor*>(this)->ActorCallback< AbortBackupActor, 2, EBackupState >::remove();

	}
	void a_callback_fire(ActorCallback< AbortBackupActor, 2, EBackupState >*,EBackupState const& value) 
	{
		fdb_probe_actor_enter("abortBackup", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("abortBackup", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< AbortBackupActor, 2, EBackupState >*,EBackupState && value) 
	{
		fdb_probe_actor_enter("abortBackup", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("abortBackup", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< AbortBackupActor, 2, EBackupState >*,Error err) 
	{
		fdb_probe_actor_enter("abortBackup", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("abortBackup", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1cont4(Void const& _,int loopDepth) 
	{
															#line 4909 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_4 = eraseLogData(tr, config.getUidAsKey(), destUidValue) && fileBackup::clearBackupStartID(tr, config.getUid());
															#line 4909 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<AbortBackupActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 44896 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1Catch1(__when_expr_4.getError(), loopDepth); else return a_body1cont4when1(__when_expr_4.get(), loopDepth); };
		static_cast<AbortBackupActor*>(this)->actor_wait_state = 5;
															#line 4909 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< AbortBackupActor, 4, Void >*>(static_cast<AbortBackupActor*>(this)));
															#line 44901 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont4(Void && _,int loopDepth) 
	{
															#line 4909 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_4 = eraseLogData(tr, config.getUidAsKey(), destUidValue) && fileBackup::clearBackupStartID(tr, config.getUid());
															#line 4909 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<AbortBackupActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 44912 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1Catch1(__when_expr_4.getError(), loopDepth); else return a_body1cont4when1(__when_expr_4.get(), loopDepth); };
		static_cast<AbortBackupActor*>(this)->actor_wait_state = 5;
															#line 4909 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< AbortBackupActor, 4, Void >*>(static_cast<AbortBackupActor*>(this)));
															#line 44917 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont3when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont4(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont3when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont4(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<AbortBackupActor*>(this)->actor_wait_state > 0) static_cast<AbortBackupActor*>(this)->actor_wait_state = 0;
		static_cast<AbortBackupActor*>(this)->ActorCallback< AbortBackupActor, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< AbortBackupActor, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("abortBackup", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont3when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("abortBackup", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< AbortBackupActor, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("abortBackup", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont3when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("abortBackup", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< AbortBackupActor, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("abortBackup", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("abortBackup", reinterpret_cast<unsigned long>(this), 3);

	}
	int a_body1cont6(Void const& _,int loopDepth) 
	{
															#line 4912 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		config.stateEnum().set(tr, EBackupState::STATE_ABORTED);
															#line 4914 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<AbortBackupActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~AbortBackupActorState(); static_cast<AbortBackupActor*>(this)->destroy(); return 0; }
															#line 44991 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<AbortBackupActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~AbortBackupActorState();
		static_cast<AbortBackupActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont6(Void && _,int loopDepth) 
	{
															#line 4912 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		config.stateEnum().set(tr, EBackupState::STATE_ABORTED);
															#line 4914 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<AbortBackupActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~AbortBackupActorState(); static_cast<AbortBackupActor*>(this)->destroy(); return 0; }
															#line 45005 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<AbortBackupActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~AbortBackupActorState();
		static_cast<AbortBackupActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont4when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont6(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont4when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont6(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose5() 
	{
		if (static_cast<AbortBackupActor*>(this)->actor_wait_state > 0) static_cast<AbortBackupActor*>(this)->actor_wait_state = 0;
		static_cast<AbortBackupActor*>(this)->ActorCallback< AbortBackupActor, 4, Void >::remove();

	}
	void a_callback_fire(ActorCallback< AbortBackupActor, 4, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("abortBackup", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont4when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("abortBackup", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_fire(ActorCallback< AbortBackupActor, 4, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("abortBackup", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont4when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("abortBackup", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_error(ActorCallback< AbortBackupActor, 4, Void >*,Error err) 
	{
		fdb_probe_actor_enter("abortBackup", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("abortBackup", reinterpret_cast<unsigned long>(this), 4);

	}
															#line 4885 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	FileBackupAgent* backupAgent;
															#line 4885 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 4885 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	std::string tagName;
															#line 4891 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	KeyBackedTag tag;
															#line 4892 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	UidAndAbortedFlagT current;
															#line 4894 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	BackupConfig config;
															#line 4895 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Key destUidValue;
															#line 45090 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via abortBackup()
															#line 4885 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class AbortBackupActor final : public Actor<Void>, public ActorCallback< AbortBackupActor, 0, UidAndAbortedFlagT >, public ActorCallback< AbortBackupActor, 1, Key >, public ActorCallback< AbortBackupActor, 2, EBackupState >, public ActorCallback< AbortBackupActor, 3, Void >, public ActorCallback< AbortBackupActor, 4, Void >, public FastAllocated<AbortBackupActor>, public AbortBackupActorState<AbortBackupActor> {
															#line 45095 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<AbortBackupActor>::operator new;
	using FastAllocated<AbortBackupActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< AbortBackupActor, 0, UidAndAbortedFlagT >;
friend struct ActorCallback< AbortBackupActor, 1, Key >;
friend struct ActorCallback< AbortBackupActor, 2, EBackupState >;
friend struct ActorCallback< AbortBackupActor, 3, Void >;
friend struct ActorCallback< AbortBackupActor, 4, Void >;
															#line 4885 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	AbortBackupActor(FileBackupAgent* const& backupAgent,Reference<ReadYourWritesTransaction> const& tr,std::string const& tagName) 
															#line 45110 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<Void>(),
		   AbortBackupActorState<AbortBackupActor>(backupAgent, tr, tagName)
	{
		fdb_probe_actor_enter("abortBackup", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("abortBackup");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("abortBackup", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< AbortBackupActor, 0, UidAndAbortedFlagT >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< AbortBackupActor, 1, Key >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< AbortBackupActor, 2, EBackupState >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< AbortBackupActor, 3, Void >*)0, actor_cancelled()); break;
		case 5: this->a_callback_error((ActorCallback< AbortBackupActor, 4, Void >*)0, actor_cancelled()); break;
		}

	}
};
															#line 4885 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<Void> abortBackup( FileBackupAgent* const& backupAgent, Reference<ReadYourWritesTransaction> const& tr, std::string const& tagName ) {
															#line 4885 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<Void>(new AbortBackupActor(backupAgent, tr, tagName));
															#line 45141 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 4916 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

																#line 45146 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via changePause()
															#line 4917 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class ChangePauseActor>
															#line 4917 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class ChangePauseActorState {
															#line 45152 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 4917 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	ChangePauseActorState(FileBackupAgent* const& backupAgent,Database const& db,bool const& pause) 
															#line 4917 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 4917 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : backupAgent(backupAgent),
															#line 4917 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   db(db),
															#line 4917 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   pause(pause),
															#line 4918 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   tr(new ReadYourWritesTransaction(db)),
															#line 4919 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   change(backupAgent->taskBucket->changePause(db, pause))
															#line 45167 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("changePause", reinterpret_cast<unsigned long>(this));

	}
	~ChangePauseActorState() 
	{
		fdb_probe_actor_destroy("changePause", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 4921 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			;
															#line 45182 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~ChangePauseActorState();
		static_cast<ChangePauseActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 4934 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_2 = change;
															#line 4934 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<ChangePauseActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 45207 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont1when1(__when_expr_2.get(), loopDepth); };
		static_cast<ChangePauseActor*>(this)->actor_wait_state = 3;
															#line 4934 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< ChangePauseActor, 2, Void >*>(static_cast<ChangePauseActor*>(this)));
															#line 45212 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
															#line 4922 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 4923 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr->setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 4924 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr->setOption(FDBTransactionOptions::PRIORITY_SYSTEM_IMMEDIATE);
															#line 45232 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		try {
															#line 4927 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->set(backupPausedKey, pause ? LiteralStringRef("1") : LiteralStringRef("0"));
															#line 4928 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_0 = tr->commit();
															#line 4928 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<ChangePauseActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 45240 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1loopBody1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
			static_cast<ChangePauseActor*>(this)->actor_wait_state = 1;
															#line 4928 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< ChangePauseActor, 0, Void >*>(static_cast<ChangePauseActor*>(this)));
															#line 45245 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1break1(int loopDepth) 
	{
		try {
			return a_body1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 4931 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_1 = tr->onError(e);
															#line 4931 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<ChangePauseActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 45282 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1Catch1when1(__when_expr_1.get(), loopDepth); };
			static_cast<ChangePauseActor*>(this)->actor_wait_state = 2;
															#line 4931 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< ChangePauseActor, 1, Void >*>(static_cast<ChangePauseActor*>(this)));
															#line 45287 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(Void const& _,int loopDepth) 
	{
		return a_body1break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1loopBody1cont2(Void && _,int loopDepth) 
	{
		return a_body1break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<ChangePauseActor*>(this)->actor_wait_state > 0) static_cast<ChangePauseActor*>(this)->actor_wait_state = 0;
		static_cast<ChangePauseActor*>(this)->ActorCallback< ChangePauseActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< ChangePauseActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("changePause", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changePause", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< ChangePauseActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("changePause", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changePause", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< ChangePauseActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("changePause", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changePause", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<ChangePauseActor*>(this)->actor_wait_state > 0) static_cast<ChangePauseActor*>(this)->actor_wait_state = 0;
		static_cast<ChangePauseActor*>(this)->ActorCallback< ChangePauseActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< ChangePauseActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("changePause", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changePause", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< ChangePauseActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("changePause", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changePause", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< ChangePauseActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("changePause", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changePause", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont2(Void const& _,int loopDepth) 
	{
															#line 4935 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent("FileBackupAgentChangePaused").detail("Action", pause ? "Paused" : "Resumed");
															#line 4936 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<ChangePauseActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~ChangePauseActorState(); static_cast<ChangePauseActor*>(this)->destroy(); return 0; }
															#line 45454 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<ChangePauseActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~ChangePauseActorState();
		static_cast<ChangePauseActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont2(Void && _,int loopDepth) 
	{
															#line 4935 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent("FileBackupAgentChangePaused").detail("Action", pause ? "Paused" : "Resumed");
															#line 4936 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<ChangePauseActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~ChangePauseActorState(); static_cast<ChangePauseActor*>(this)->destroy(); return 0; }
															#line 45468 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<ChangePauseActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~ChangePauseActorState();
		static_cast<ChangePauseActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<ChangePauseActor*>(this)->actor_wait_state > 0) static_cast<ChangePauseActor*>(this)->actor_wait_state = 0;
		static_cast<ChangePauseActor*>(this)->ActorCallback< ChangePauseActor, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< ChangePauseActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("changePause", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changePause", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< ChangePauseActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("changePause", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changePause", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< ChangePauseActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("changePause", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changePause", reinterpret_cast<unsigned long>(this), 2);

	}
															#line 4917 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	FileBackupAgent* backupAgent;
															#line 4917 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Database db;
															#line 4917 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	bool pause;
															#line 4918 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 4919 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Future<Void> change;
															#line 45549 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via changePause()
															#line 4917 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class ChangePauseActor final : public Actor<Void>, public ActorCallback< ChangePauseActor, 0, Void >, public ActorCallback< ChangePauseActor, 1, Void >, public ActorCallback< ChangePauseActor, 2, Void >, public FastAllocated<ChangePauseActor>, public ChangePauseActorState<ChangePauseActor> {
															#line 45554 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<ChangePauseActor>::operator new;
	using FastAllocated<ChangePauseActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< ChangePauseActor, 0, Void >;
friend struct ActorCallback< ChangePauseActor, 1, Void >;
friend struct ActorCallback< ChangePauseActor, 2, Void >;
															#line 4917 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	ChangePauseActor(FileBackupAgent* const& backupAgent,Database const& db,bool const& pause) 
															#line 45567 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<Void>(),
		   ChangePauseActorState<ChangePauseActor>(backupAgent, db, pause)
	{
		fdb_probe_actor_enter("changePause", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("changePause");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("changePause", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< ChangePauseActor, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< ChangePauseActor, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< ChangePauseActor, 2, Void >*)0, actor_cancelled()); break;
		}

	}
};
															#line 4917 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<Void> changePause( FileBackupAgent* const& backupAgent, Database const& db, bool const& pause ) {
															#line 4917 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<Void>(new ChangePauseActor(backupAgent, db, pause));
															#line 45596 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 4938 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

	struct TimestampedVersion {
		Optional<Version> version;
		Optional<int64_t> epochs;

		bool present() const { return version.present(); }

		JsonBuilderObject toJSON() const {
			JsonBuilderObject doc;
			if (version.present()) {
				doc.setKey("Version", version.get());
				if (epochs.present()) {
					doc.setKey("EpochSeconds", epochs.get());
					doc.setKey("Timestamp", timeStampToString(epochs));
				}
			}
			return doc;
		}
	};

	// Helper actor for generating status
	// If f is present, lookup epochs using timekeeper and tr, return TimestampedVersion
																#line 45622 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via getTimestampedVersion()
															#line 4960 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class GetTimestampedVersionActor>
															#line 4960 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class GetTimestampedVersionActorState {
															#line 45628 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 4960 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	GetTimestampedVersionActorState(Reference<ReadYourWritesTransaction> const& tr,Future<Optional<Version>> const& f) 
															#line 4960 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 4960 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : tr(tr),
															#line 4960 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   f(f),
															#line 4962 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   tv()
															#line 45639 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("getTimestampedVersion", reinterpret_cast<unsigned long>(this));

	}
	~GetTimestampedVersionActorState() 
	{
		fdb_probe_actor_destroy("getTimestampedVersion", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 4963 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_0 = store(tv.version, f);
															#line 4963 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<GetTimestampedVersionActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 45656 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<GetTimestampedVersionActor*>(this)->actor_wait_state = 1;
															#line 4963 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< GetTimestampedVersionActor, 0, Void >*>(static_cast<GetTimestampedVersionActor*>(this)));
															#line 45661 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~GetTimestampedVersionActorState();
		static_cast<GetTimestampedVersionActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void const& _,int loopDepth) 
	{
															#line 4964 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (tv.version.present())
															#line 45684 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 4965 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_1 = store(tv.epochs, timeKeeperEpochsFromVersion(tv.version.get(), tr));
															#line 4965 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<GetTimestampedVersionActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 45690 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
			static_cast<GetTimestampedVersionActor*>(this)->actor_wait_state = 2;
															#line 4965 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< GetTimestampedVersionActor, 1, Void >*>(static_cast<GetTimestampedVersionActor*>(this)));
															#line 45695 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1cont2(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont1(Void && _,int loopDepth) 
	{
															#line 4964 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (tv.version.present())
															#line 45709 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 4965 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_1 = store(tv.epochs, timeKeeperEpochsFromVersion(tv.version.get(), tr));
															#line 4965 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<GetTimestampedVersionActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 45715 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
			static_cast<GetTimestampedVersionActor*>(this)->actor_wait_state = 2;
															#line 4965 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< GetTimestampedVersionActor, 1, Void >*>(static_cast<GetTimestampedVersionActor*>(this)));
															#line 45720 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1cont2(loopDepth);
		}

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<GetTimestampedVersionActor*>(this)->actor_wait_state > 0) static_cast<GetTimestampedVersionActor*>(this)->actor_wait_state = 0;
		static_cast<GetTimestampedVersionActor*>(this)->ActorCallback< GetTimestampedVersionActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetTimestampedVersionActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getTimestampedVersion", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getTimestampedVersion", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< GetTimestampedVersionActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getTimestampedVersion", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getTimestampedVersion", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< GetTimestampedVersionActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getTimestampedVersion", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getTimestampedVersion", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont2(int loopDepth) 
	{
															#line 4967 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<GetTimestampedVersionActor*>(this)->SAV<TimestampedVersion>::futures) { (void)(tv); this->~GetTimestampedVersionActorState(); static_cast<GetTimestampedVersionActor*>(this)->destroy(); return 0; }
															#line 45797 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<GetTimestampedVersionActor*>(this)->SAV< TimestampedVersion >::value()) TimestampedVersion(std::move(tv)); // state_var_RVO
		this->~GetTimestampedVersionActorState();
		static_cast<GetTimestampedVersionActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont3(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont2(loopDepth);

		return loopDepth;
	}
	int a_body1cont3(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont2(loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont3(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont3(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<GetTimestampedVersionActor*>(this)->actor_wait_state > 0) static_cast<GetTimestampedVersionActor*>(this)->actor_wait_state = 0;
		static_cast<GetTimestampedVersionActor*>(this)->ActorCallback< GetTimestampedVersionActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetTimestampedVersionActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getTimestampedVersion", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getTimestampedVersion", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< GetTimestampedVersionActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getTimestampedVersion", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getTimestampedVersion", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< GetTimestampedVersionActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getTimestampedVersion", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getTimestampedVersion", reinterpret_cast<unsigned long>(this), 1);

	}
															#line 4960 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 4960 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Future<Optional<Version>> f;
															#line 4962 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	TimestampedVersion tv;
															#line 45886 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via getTimestampedVersion()
															#line 4960 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class GetTimestampedVersionActor final : public Actor<TimestampedVersion>, public ActorCallback< GetTimestampedVersionActor, 0, Void >, public ActorCallback< GetTimestampedVersionActor, 1, Void >, public FastAllocated<GetTimestampedVersionActor>, public GetTimestampedVersionActorState<GetTimestampedVersionActor> {
															#line 45891 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<GetTimestampedVersionActor>::operator new;
	using FastAllocated<GetTimestampedVersionActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<TimestampedVersion>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< GetTimestampedVersionActor, 0, Void >;
friend struct ActorCallback< GetTimestampedVersionActor, 1, Void >;
															#line 4960 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	GetTimestampedVersionActor(Reference<ReadYourWritesTransaction> const& tr,Future<Optional<Version>> const& f) 
															#line 45903 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<TimestampedVersion>(),
		   GetTimestampedVersionActorState<GetTimestampedVersionActor>(tr, f)
	{
		fdb_probe_actor_enter("getTimestampedVersion", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("getTimestampedVersion");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("getTimestampedVersion", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< GetTimestampedVersionActor, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< GetTimestampedVersionActor, 1, Void >*)0, actor_cancelled()); break;
		}

	}
};
															#line 4960 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<TimestampedVersion> getTimestampedVersion( Reference<ReadYourWritesTransaction> const& tr, Future<Optional<Version>> const& f ) {
															#line 4960 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<TimestampedVersion>(new GetTimestampedVersionActor(tr, f));
															#line 45931 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 4969 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

																#line 45936 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via getStatusJSON()
															#line 4970 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class GetStatusJSONActor>
															#line 4970 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class GetStatusJSONActorState {
															#line 45942 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 4970 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	GetStatusJSONActorState(FileBackupAgent* const& backupAgent,Database const& cx,std::string const& tagName) 
															#line 4970 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 4970 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : backupAgent(backupAgent),
															#line 4970 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   cx(cx),
															#line 4970 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   tagName(tagName),
															#line 4971 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   tr(new ReadYourWritesTransaction(cx))
															#line 45955 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("getStatusJSON", reinterpret_cast<unsigned long>(this));

	}
	~GetStatusJSONActorState() 
	{
		fdb_probe_actor_destroy("getStatusJSON", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 4973 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			;
															#line 45970 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~GetStatusJSONActorState();
		static_cast<GetStatusJSONActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
		try {
															#line 4975 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			doc = JsonBuilderObject();
															#line 4976 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			doc.setKey("SchemaVersion", "1.0.0");
															#line 4978 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 4979 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 4981 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tag = makeBackupTag(tagName);
															#line 4982 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			uidAndAbortedFlag = Optional<UidAndAbortedFlagT>();
															#line 4983 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			paused = Optional<Value>();
															#line 4984 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			recentReadVersion = Version();
															#line 4986 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_0 = store(paused, tr->get(backupAgent->taskBucket->getPauseKey())) && store(uidAndAbortedFlag, tag.get(tr)) && store(recentReadVersion, tr->getReadVersion());
															#line 4986 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<GetStatusJSONActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 46019 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1loopBody1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
			static_cast<GetStatusJSONActor*>(this)->actor_wait_state = 1;
															#line 4986 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< GetStatusJSONActor, 0, Void >*>(static_cast<GetStatusJSONActor*>(this)));
															#line 46024 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 5116 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_5 = tr->onError(e);
															#line 5116 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<GetStatusJSONActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 46048 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_5.isReady()) { if (__when_expr_5.isError()) return a_body1Catch1(__when_expr_5.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1Catch1when1(__when_expr_5.get(), loopDepth); };
			static_cast<GetStatusJSONActor*>(this)->actor_wait_state = 6;
															#line 5116 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_5.addCallbackAndClear(static_cast<ActorCallback< GetStatusJSONActor, 5, Void >*>(static_cast<GetStatusJSONActor*>(this)));
															#line 46053 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(Void const& _,int loopDepth) 
	{
															#line 4989 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		doc.setKey("BackupAgentsPaused", paused.present());
															#line 4990 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		doc.setKey("Tag", tag.tagName);
															#line 4992 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (uidAndAbortedFlag.present())
															#line 46072 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 4993 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			doc.setKey("UID", uidAndAbortedFlag.get().first.toString());
															#line 4995 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			config = BackupConfig(uidAndAbortedFlag.get().first);
															#line 4997 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<EBackupState> __when_expr_1 = config.stateEnum().getD(tr, Snapshot::False, EBackupState::STATE_NEVERRAN);
															#line 4997 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<GetStatusJSONActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 46082 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
			static_cast<GetStatusJSONActor*>(this)->actor_wait_state = 2;
															#line 4997 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< GetStatusJSONActor, 1, EBackupState >*>(static_cast<GetStatusJSONActor*>(this)));
															#line 46087 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1loopBody1cont3(loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(Void && _,int loopDepth) 
	{
															#line 4989 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		doc.setKey("BackupAgentsPaused", paused.present());
															#line 4990 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		doc.setKey("Tag", tag.tagName);
															#line 4992 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (uidAndAbortedFlag.present())
															#line 46105 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 4993 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			doc.setKey("UID", uidAndAbortedFlag.get().first.toString());
															#line 4995 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			config = BackupConfig(uidAndAbortedFlag.get().first);
															#line 4997 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<EBackupState> __when_expr_1 = config.stateEnum().getD(tr, Snapshot::False, EBackupState::STATE_NEVERRAN);
															#line 4997 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<GetStatusJSONActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 46115 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
			static_cast<GetStatusJSONActor*>(this)->actor_wait_state = 2;
															#line 4997 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< GetStatusJSONActor, 1, EBackupState >*>(static_cast<GetStatusJSONActor*>(this)));
															#line 46120 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1loopBody1cont3(loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<GetStatusJSONActor*>(this)->actor_wait_state > 0) static_cast<GetStatusJSONActor*>(this)->actor_wait_state = 0;
		static_cast<GetStatusJSONActor*>(this)->ActorCallback< GetStatusJSONActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetStatusJSONActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getStatusJSON", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getStatusJSON", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< GetStatusJSONActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getStatusJSON", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getStatusJSON", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< GetStatusJSONActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getStatusJSON", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getStatusJSON", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1cont3(int loopDepth) 
	{
															#line 5114 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<GetStatusJSONActor*>(this)->SAV<std::string>::futures) { (void)(doc.getJson()); this->~GetStatusJSONActorState(); static_cast<GetStatusJSONActor*>(this)->destroy(); return 0; }
															#line 46197 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<GetStatusJSONActor*>(this)->SAV< std::string >::value()) std::string(doc.getJson());
		this->~GetStatusJSONActorState();
		static_cast<GetStatusJSONActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1cont4(int loopDepth) 
	{
															#line 4999 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		JsonBuilderObject statusDoc;
															#line 5000 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		statusDoc.setKey("Name", BackupAgentBase::getStateName(backupState));
															#line 5001 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		statusDoc.setKey("Description", BackupAgentBase::getStateText(backupState));
															#line 5002 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		statusDoc.setKey("Completed", backupState == EBackupState::STATE_COMPLETED);
															#line 5003 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		statusDoc.setKey("Running", BackupAgentBase::isRunnable(backupState));
															#line 5004 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		doc.setKey("Status", statusDoc);
															#line 5006 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		done = Void();
															#line 5008 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (backupState != EBackupState::STATE_NEVERRAN)
															#line 46223 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 5009 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			bc = Reference<IBackupContainer>();
															#line 5010 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			latestRestorable = TimestampedVersion();
															#line 5012 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_2 = store(latestRestorable, getTimestampedVersion(tr, config.getLatestRestorableVersion(tr))) && store(bc, config.backupContainer().getOrThrow(tr));
															#line 5012 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<GetStatusJSONActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 46233 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1loopBody1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1loopBody1cont4when1(__when_expr_2.get(), loopDepth); };
			static_cast<GetStatusJSONActor*>(this)->actor_wait_state = 3;
															#line 5012 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< GetStatusJSONActor, 2, Void >*>(static_cast<GetStatusJSONActor*>(this)));
															#line 46238 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1loopBody1cont5(loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(EBackupState const& __backupState,int loopDepth) 
	{
															#line 4997 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		backupState = __backupState;
															#line 46252 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1loopBody1cont4(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(EBackupState && __backupState,int loopDepth) 
	{
		backupState = std::move(__backupState);
		loopDepth = a_body1loopBody1cont4(loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<GetStatusJSONActor*>(this)->actor_wait_state > 0) static_cast<GetStatusJSONActor*>(this)->actor_wait_state = 0;
		static_cast<GetStatusJSONActor*>(this)->ActorCallback< GetStatusJSONActor, 1, EBackupState >::remove();

	}
	void a_callback_fire(ActorCallback< GetStatusJSONActor, 1, EBackupState >*,EBackupState const& value) 
	{
		fdb_probe_actor_enter("getStatusJSON", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getStatusJSON", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< GetStatusJSONActor, 1, EBackupState >*,EBackupState && value) 
	{
		fdb_probe_actor_enter("getStatusJSON", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getStatusJSON", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< GetStatusJSONActor, 1, EBackupState >*,Error err) 
	{
		fdb_probe_actor_enter("getStatusJSON", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getStatusJSON", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1loopBody1cont5(int loopDepth) 
	{
															#line 5031 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (backupState == EBackupState::STATE_RUNNING_DIFFERENTIAL || backupState == EBackupState::STATE_RUNNING)
															#line 46319 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 5033 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			snapshotInterval = int64_t();
															#line 5034 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			logBytesWritten = int64_t();
															#line 5035 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			rangeBytesWritten = int64_t();
															#line 5036 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			stopWhenDone = bool();
															#line 5037 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			snapshotBegin = TimestampedVersion();
															#line 5038 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			snapshotTargetEnd = TimestampedVersion();
															#line 5039 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			latestLogEnd = TimestampedVersion();
															#line 5040 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			latestSnapshotEnd = TimestampedVersion();
															#line 5041 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			snapshotLastDispatch = TimestampedVersion();
															#line 5042 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			snapshotLastDispatchShardsBehind = Optional<int64_t>();
															#line 5044 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_3 = store(snapshotInterval, config.snapshotIntervalSeconds().getOrThrow(tr)) && store(logBytesWritten, config.logBytesWritten().getD(tr)) && store(rangeBytesWritten, config.rangeBytesWritten().getD(tr)) && store(stopWhenDone, config.stopWhenDone().getOrThrow(tr)) && store(snapshotBegin, getTimestampedVersion(tr, config.snapshotBeginVersion().get(tr))) && store(snapshotTargetEnd, getTimestampedVersion(tr, config.snapshotTargetEndVersion().get(tr))) && store(latestLogEnd, getTimestampedVersion(tr, config.latestLogEndVersion().get(tr))) && store(latestSnapshotEnd, getTimestampedVersion(tr, config.latestSnapshotEndVersion().get(tr))) && store(snapshotLastDispatch, getTimestampedVersion(tr, config.snapshotDispatchLastVersion().get(tr))) && store(snapshotLastDispatchShardsBehind, config.snapshotDispatchLastShardsBehind().get(tr));
															#line 5044 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<GetStatusJSONActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 46345 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1loopBody1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1loopBody1cont5when1(__when_expr_3.get(), loopDepth); };
			static_cast<GetStatusJSONActor*>(this)->actor_wait_state = 4;
															#line 5044 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< GetStatusJSONActor, 3, Void >*>(static_cast<GetStatusJSONActor*>(this)));
															#line 46350 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1loopBody1cont10(loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont6(Void const& _,int loopDepth) 
	{
															#line 5015 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		bc = fileBackup::getBackupContainerWithProxy(bc);
															#line 5017 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		doc.setKey("Restorable", latestRestorable.present());
															#line 5019 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (latestRestorable.present())
															#line 46368 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 5020 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			JsonBuilderObject o = latestRestorable.toJSON();
															#line 5021 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (backupState != EBackupState::STATE_COMPLETED)
															#line 46374 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			{
															#line 5022 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				o.setKey("LagSeconds", (recentReadVersion - latestRestorable.version.get()) / CLIENT_KNOBS->CORE_VERSIONSPERSECOND);
															#line 46378 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			}
															#line 5026 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			doc.setKey("LatestRestorablePoint", o);
															#line 46382 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 5028 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		doc.setKey("DestinationURL", bc->getURL());
															#line 46386 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1loopBody1cont5(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont6(Void && _,int loopDepth) 
	{
															#line 5015 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		bc = fileBackup::getBackupContainerWithProxy(bc);
															#line 5017 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		doc.setKey("Restorable", latestRestorable.present());
															#line 5019 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (latestRestorable.present())
															#line 46399 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 5020 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			JsonBuilderObject o = latestRestorable.toJSON();
															#line 5021 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (backupState != EBackupState::STATE_COMPLETED)
															#line 46405 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			{
															#line 5022 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				o.setKey("LagSeconds", (recentReadVersion - latestRestorable.version.get()) / CLIENT_KNOBS->CORE_VERSIONSPERSECOND);
															#line 46409 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			}
															#line 5026 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			doc.setKey("LatestRestorablePoint", o);
															#line 46413 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 5028 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		doc.setKey("DestinationURL", bc->getURL());
															#line 46417 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1loopBody1cont5(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont4when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont6(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont4when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont6(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<GetStatusJSONActor*>(this)->actor_wait_state > 0) static_cast<GetStatusJSONActor*>(this)->actor_wait_state = 0;
		static_cast<GetStatusJSONActor*>(this)->ActorCallback< GetStatusJSONActor, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetStatusJSONActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getStatusJSON", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont4when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getStatusJSON", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< GetStatusJSONActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getStatusJSON", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont4when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getStatusJSON", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< GetStatusJSONActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getStatusJSON", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getStatusJSON", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1loopBody1cont10(int loopDepth) 
	{
															#line 5098 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<KeyBackedMap<int64_t, std::pair<std::string, Version>>::PairsType> __when_expr_4 = config.lastErrorPerType().getRange( tr, 0, std::numeric_limits<int>::max(), CLIENT_KNOBS->TOO_MANY);
															#line 5098 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<GetStatusJSONActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 46491 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1loopBody1Catch1(__when_expr_4.getError(), loopDepth); else return a_body1loopBody1cont10when1(__when_expr_4.get(), loopDepth); };
		static_cast<GetStatusJSONActor*>(this)->actor_wait_state = 5;
															#line 5098 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< GetStatusJSONActor, 4, KeyBackedMap<int64_t, std::pair<std::string, Version>>::PairsType >*>(static_cast<GetStatusJSONActor*>(this)));
															#line 46496 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont11(Void const& _,int loopDepth) 
	{
															#line 5059 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		doc.setKey("StopAfterSnapshot", stopWhenDone);
															#line 5060 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		doc.setKey("SnapshotIntervalSeconds", snapshotInterval);
															#line 5061 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		doc.setKey("LogBytesWritten", logBytesWritten);
															#line 5062 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		doc.setKey("RangeBytesWritten", rangeBytesWritten);
															#line 5064 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (latestLogEnd.present())
															#line 46513 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 5065 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			doc.setKey("LatestLogEnd", latestLogEnd.toJSON());
															#line 46517 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 5068 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (latestSnapshotEnd.present())
															#line 46521 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 5069 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			doc.setKey("LatestSnapshotEnd", latestSnapshotEnd.toJSON());
															#line 46525 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 5072 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		JsonBuilderObject snapshot;
															#line 5074 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (snapshotBegin.present())
															#line 46531 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 5075 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			snapshot.setKey("Begin", snapshotBegin.toJSON());
															#line 5077 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (snapshotTargetEnd.present())
															#line 46537 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			{
															#line 5078 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				snapshot.setKey("EndTarget", snapshotTargetEnd.toJSON());
															#line 5080 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				Version interval = snapshotTargetEnd.version.get() - snapshotBegin.version.get();
															#line 5081 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				snapshot.setKey("IntervalSeconds", interval / CLIENT_KNOBS->CORE_VERSIONSPERSECOND);
															#line 5083 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				Version elapsed = recentReadVersion - snapshotBegin.version.get();
															#line 5084 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				double progress = (interval > 0) ? (100.0 * elapsed / interval) : 100;
															#line 5085 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				snapshot.setKey("ExpectedProgress", progress);
															#line 46551 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			}
															#line 5088 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			JsonBuilderObject dispatchDoc = snapshotLastDispatch.toJSON();
															#line 5089 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (snapshotLastDispatchShardsBehind.present())
															#line 46557 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			{
															#line 5090 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				dispatchDoc.setKey("ShardsBehind", snapshotLastDispatchShardsBehind.get());
															#line 46561 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			}
															#line 5092 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			snapshot.setKey("LastDispatch", dispatchDoc);
															#line 46565 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 5095 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		doc.setKey("CurrentSnapshot", snapshot);
															#line 46569 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1loopBody1cont10(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont11(Void && _,int loopDepth) 
	{
															#line 5059 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		doc.setKey("StopAfterSnapshot", stopWhenDone);
															#line 5060 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		doc.setKey("SnapshotIntervalSeconds", snapshotInterval);
															#line 5061 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		doc.setKey("LogBytesWritten", logBytesWritten);
															#line 5062 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		doc.setKey("RangeBytesWritten", rangeBytesWritten);
															#line 5064 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (latestLogEnd.present())
															#line 46586 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 5065 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			doc.setKey("LatestLogEnd", latestLogEnd.toJSON());
															#line 46590 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 5068 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (latestSnapshotEnd.present())
															#line 46594 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 5069 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			doc.setKey("LatestSnapshotEnd", latestSnapshotEnd.toJSON());
															#line 46598 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 5072 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		JsonBuilderObject snapshot;
															#line 5074 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (snapshotBegin.present())
															#line 46604 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 5075 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			snapshot.setKey("Begin", snapshotBegin.toJSON());
															#line 5077 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (snapshotTargetEnd.present())
															#line 46610 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			{
															#line 5078 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				snapshot.setKey("EndTarget", snapshotTargetEnd.toJSON());
															#line 5080 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				Version interval = snapshotTargetEnd.version.get() - snapshotBegin.version.get();
															#line 5081 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				snapshot.setKey("IntervalSeconds", interval / CLIENT_KNOBS->CORE_VERSIONSPERSECOND);
															#line 5083 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				Version elapsed = recentReadVersion - snapshotBegin.version.get();
															#line 5084 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				double progress = (interval > 0) ? (100.0 * elapsed / interval) : 100;
															#line 5085 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				snapshot.setKey("ExpectedProgress", progress);
															#line 46624 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			}
															#line 5088 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			JsonBuilderObject dispatchDoc = snapshotLastDispatch.toJSON();
															#line 5089 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (snapshotLastDispatchShardsBehind.present())
															#line 46630 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			{
															#line 5090 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				dispatchDoc.setKey("ShardsBehind", snapshotLastDispatchShardsBehind.get());
															#line 46634 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			}
															#line 5092 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			snapshot.setKey("LastDispatch", dispatchDoc);
															#line 46638 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 5095 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		doc.setKey("CurrentSnapshot", snapshot);
															#line 46642 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1loopBody1cont10(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont5when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont11(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont5when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont11(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<GetStatusJSONActor*>(this)->actor_wait_state > 0) static_cast<GetStatusJSONActor*>(this)->actor_wait_state = 0;
		static_cast<GetStatusJSONActor*>(this)->ActorCallback< GetStatusJSONActor, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetStatusJSONActor, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getStatusJSON", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1cont5when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getStatusJSON", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< GetStatusJSONActor, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getStatusJSON", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1cont5when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getStatusJSON", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< GetStatusJSONActor, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getStatusJSON", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getStatusJSON", reinterpret_cast<unsigned long>(this), 3);

	}
	int a_body1loopBody1cont10cont1(KeyBackedMap<int64_t, std::pair<std::string, Version>>::PairsType const& errors,int loopDepth) 
	{
															#line 5101 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		JsonBuilderArray errorList;
															#line 5102 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		for( auto& e : errors ) {
															#line 5103 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			std::string msg = e.second.first;
															#line 5104 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			Version ver = e.second.second;
															#line 5106 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			JsonBuilderObject errDoc;
															#line 5107 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			errDoc.setKey("Message", msg.c_str());
															#line 5108 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			errDoc.setKey("RelativeSeconds", (ver - recentReadVersion) / CLIENT_KNOBS->CORE_VERSIONSPERSECOND);
															#line 46726 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 5111 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		doc.setKey("Errors", errorList);
															#line 46730 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1loopBody1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont10cont1(KeyBackedMap<int64_t, std::pair<std::string, Version>>::PairsType && errors,int loopDepth) 
	{
															#line 5101 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		JsonBuilderArray errorList;
															#line 5102 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		for( auto& e : errors ) {
															#line 5103 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			std::string msg = e.second.first;
															#line 5104 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			Version ver = e.second.second;
															#line 5106 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			JsonBuilderObject errDoc;
															#line 5107 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			errDoc.setKey("Message", msg.c_str());
															#line 5108 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			errDoc.setKey("RelativeSeconds", (ver - recentReadVersion) / CLIENT_KNOBS->CORE_VERSIONSPERSECOND);
															#line 46751 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 5111 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		doc.setKey("Errors", errorList);
															#line 46755 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1loopBody1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont10when1(KeyBackedMap<int64_t, std::pair<std::string, Version>>::PairsType const& errors,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont10cont1(errors, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont10when1(KeyBackedMap<int64_t, std::pair<std::string, Version>>::PairsType && errors,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont10cont1(std::move(errors), loopDepth);

		return loopDepth;
	}
	void a_exitChoose5() 
	{
		if (static_cast<GetStatusJSONActor*>(this)->actor_wait_state > 0) static_cast<GetStatusJSONActor*>(this)->actor_wait_state = 0;
		static_cast<GetStatusJSONActor*>(this)->ActorCallback< GetStatusJSONActor, 4, KeyBackedMap<int64_t, std::pair<std::string, Version>>::PairsType >::remove();

	}
	void a_callback_fire(ActorCallback< GetStatusJSONActor, 4, KeyBackedMap<int64_t, std::pair<std::string, Version>>::PairsType >*,KeyBackedMap<int64_t, std::pair<std::string, Version>>::PairsType const& value) 
	{
		fdb_probe_actor_enter("getStatusJSON", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1loopBody1cont10when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getStatusJSON", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_fire(ActorCallback< GetStatusJSONActor, 4, KeyBackedMap<int64_t, std::pair<std::string, Version>>::PairsType >*,KeyBackedMap<int64_t, std::pair<std::string, Version>>::PairsType && value) 
	{
		fdb_probe_actor_enter("getStatusJSON", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1loopBody1cont10when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getStatusJSON", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_error(ActorCallback< GetStatusJSONActor, 4, KeyBackedMap<int64_t, std::pair<std::string, Version>>::PairsType >*,Error err) 
	{
		fdb_probe_actor_enter("getStatusJSON", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getStatusJSON", reinterpret_cast<unsigned long>(this), 4);

	}
	int a_body1loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose6() 
	{
		if (static_cast<GetStatusJSONActor*>(this)->actor_wait_state > 0) static_cast<GetStatusJSONActor*>(this)->actor_wait_state = 0;
		static_cast<GetStatusJSONActor*>(this)->ActorCallback< GetStatusJSONActor, 5, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetStatusJSONActor, 5, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getStatusJSON", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getStatusJSON", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_fire(ActorCallback< GetStatusJSONActor, 5, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getStatusJSON", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getStatusJSON", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_error(ActorCallback< GetStatusJSONActor, 5, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getStatusJSON", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getStatusJSON", reinterpret_cast<unsigned long>(this), 5);

	}
															#line 4970 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	FileBackupAgent* backupAgent;
															#line 4970 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Database cx;
															#line 4970 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	std::string tagName;
															#line 4971 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 4975 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	JsonBuilderObject doc;
															#line 4981 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	KeyBackedTag tag;
															#line 4982 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Optional<UidAndAbortedFlagT> uidAndAbortedFlag;
															#line 4983 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Optional<Value> paused;
															#line 4984 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Version recentReadVersion;
															#line 4995 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	BackupConfig config;
															#line 4997 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	EBackupState backupState;
															#line 5006 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Future<Void> done;
															#line 5009 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<IBackupContainer> bc;
															#line 5010 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	TimestampedVersion latestRestorable;
															#line 5033 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int64_t snapshotInterval;
															#line 5034 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int64_t logBytesWritten;
															#line 5035 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int64_t rangeBytesWritten;
															#line 5036 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	bool stopWhenDone;
															#line 5037 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	TimestampedVersion snapshotBegin;
															#line 5038 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	TimestampedVersion snapshotTargetEnd;
															#line 5039 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	TimestampedVersion latestLogEnd;
															#line 5040 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	TimestampedVersion latestSnapshotEnd;
															#line 5041 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	TimestampedVersion snapshotLastDispatch;
															#line 5042 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Optional<int64_t> snapshotLastDispatchShardsBehind;
															#line 46946 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via getStatusJSON()
															#line 4970 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class GetStatusJSONActor final : public Actor<std::string>, public ActorCallback< GetStatusJSONActor, 0, Void >, public ActorCallback< GetStatusJSONActor, 1, EBackupState >, public ActorCallback< GetStatusJSONActor, 2, Void >, public ActorCallback< GetStatusJSONActor, 3, Void >, public ActorCallback< GetStatusJSONActor, 4, KeyBackedMap<int64_t, std::pair<std::string, Version>>::PairsType >, public ActorCallback< GetStatusJSONActor, 5, Void >, public FastAllocated<GetStatusJSONActor>, public GetStatusJSONActorState<GetStatusJSONActor> {
															#line 46951 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<GetStatusJSONActor>::operator new;
	using FastAllocated<GetStatusJSONActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<std::string>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< GetStatusJSONActor, 0, Void >;
friend struct ActorCallback< GetStatusJSONActor, 1, EBackupState >;
friend struct ActorCallback< GetStatusJSONActor, 2, Void >;
friend struct ActorCallback< GetStatusJSONActor, 3, Void >;
friend struct ActorCallback< GetStatusJSONActor, 4, KeyBackedMap<int64_t, std::pair<std::string, Version>>::PairsType >;
friend struct ActorCallback< GetStatusJSONActor, 5, Void >;
															#line 4970 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	GetStatusJSONActor(FileBackupAgent* const& backupAgent,Database const& cx,std::string const& tagName) 
															#line 46967 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<std::string>(),
		   GetStatusJSONActorState<GetStatusJSONActor>(backupAgent, cx, tagName)
	{
		fdb_probe_actor_enter("getStatusJSON", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("getStatusJSON");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("getStatusJSON", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< GetStatusJSONActor, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< GetStatusJSONActor, 1, EBackupState >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< GetStatusJSONActor, 2, Void >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< GetStatusJSONActor, 3, Void >*)0, actor_cancelled()); break;
		case 5: this->a_callback_error((ActorCallback< GetStatusJSONActor, 4, KeyBackedMap<int64_t, std::pair<std::string, Version>>::PairsType >*)0, actor_cancelled()); break;
		case 6: this->a_callback_error((ActorCallback< GetStatusJSONActor, 5, Void >*)0, actor_cancelled()); break;
		}

	}
};
															#line 4970 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<std::string> getStatusJSON( FileBackupAgent* const& backupAgent, Database const& cx, std::string const& tagName ) {
															#line 4970 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<std::string>(new GetStatusJSONActor(backupAgent, cx, tagName));
															#line 46999 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 5120 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

																#line 47004 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via getStatus()
															#line 5121 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class GetStatusActor>
															#line 5121 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class GetStatusActorState {
															#line 47010 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 5121 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	GetStatusActorState(FileBackupAgent* const& backupAgent,Database const& cx,ShowErrors const& showErrors,std::string const& tagName) 
															#line 5121 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 5121 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : backupAgent(backupAgent),
															#line 5121 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   cx(cx),
															#line 5121 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   showErrors(showErrors),
															#line 5121 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   tagName(tagName),
															#line 5125 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   tr(new ReadYourWritesTransaction(cx)),
															#line 5126 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   statusText()
															#line 47027 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("getStatus", reinterpret_cast<unsigned long>(this));

	}
	~GetStatusActorState() 
	{
		fdb_probe_actor_destroy("getStatus", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 5128 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			;
															#line 47042 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~GetStatusActorState();
		static_cast<GetStatusActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 5301 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<GetStatusActor*>(this)->SAV<std::string>::futures) { (void)(statusText); this->~GetStatusActorState(); static_cast<GetStatusActor*>(this)->destroy(); return 0; }
															#line 47065 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<GetStatusActor*>(this)->SAV< std::string >::value()) std::string(std::move(statusText)); // state_var_RVO
		this->~GetStatusActorState();
		static_cast<GetStatusActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
		try {
															#line 5130 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 5131 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 5133 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tag = KeyBackedTag();
															#line 5134 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			config = BackupConfig();
															#line 5135 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			backupState = EBackupState();
															#line 5137 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			statusText = "";
															#line 5138 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tag = makeBackupTag(tagName);
															#line 5139 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Optional<UidAndAbortedFlagT>> __when_expr_0 = tag.get(tr);
															#line 5139 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<GetStatusActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 47101 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1loopBody1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
			static_cast<GetStatusActor*>(this)->actor_wait_state = 1;
															#line 5139 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< GetStatusActor, 0, Optional<UidAndAbortedFlagT> >*>(static_cast<GetStatusActor*>(this)));
															#line 47106 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1break1(int loopDepth) 
	{
		try {
			return a_body1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 5297 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_7 = tr->onError(e);
															#line 5297 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<GetStatusActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 47143 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_7.isReady()) { if (__when_expr_7.isError()) return a_body1Catch1(__when_expr_7.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1Catch1when1(__when_expr_7.get(), loopDepth); };
			static_cast<GetStatusActor*>(this)->actor_wait_state = 8;
															#line 5297 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_7.addCallbackAndClear(static_cast<ActorCallback< GetStatusActor, 7, Void >*>(static_cast<GetStatusActor*>(this)));
															#line 47148 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(int loopDepth) 
	{
															#line 5140 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		fPaused = tr->get(backupAgent->taskBucket->getPauseKey());
															#line 5141 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (uidAndAbortedFlag.present())
															#line 47165 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 5142 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			config = BackupConfig(uidAndAbortedFlag.get().first);
															#line 5143 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<EBackupState> __when_expr_1 = config.stateEnum().getD(tr, Snapshot::False, EBackupState::STATE_NEVERRAN);
															#line 5143 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<GetStatusActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 47173 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
			static_cast<GetStatusActor*>(this)->actor_wait_state = 2;
															#line 5143 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< GetStatusActor, 1, EBackupState >*>(static_cast<GetStatusActor*>(this)));
															#line 47178 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1loopBody1cont3(loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1when1(Optional<UidAndAbortedFlagT> const& __uidAndAbortedFlag,int loopDepth) 
	{
															#line 5139 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		uidAndAbortedFlag = __uidAndAbortedFlag;
															#line 47192 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1loopBody1cont2(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Optional<UidAndAbortedFlagT> && __uidAndAbortedFlag,int loopDepth) 
	{
		uidAndAbortedFlag = std::move(__uidAndAbortedFlag);
		loopDepth = a_body1loopBody1cont2(loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<GetStatusActor*>(this)->actor_wait_state > 0) static_cast<GetStatusActor*>(this)->actor_wait_state = 0;
		static_cast<GetStatusActor*>(this)->ActorCallback< GetStatusActor, 0, Optional<UidAndAbortedFlagT> >::remove();

	}
	void a_callback_fire(ActorCallback< GetStatusActor, 0, Optional<UidAndAbortedFlagT> >*,Optional<UidAndAbortedFlagT> const& value) 
	{
		fdb_probe_actor_enter("getStatus", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getStatus", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< GetStatusActor, 0, Optional<UidAndAbortedFlagT> >*,Optional<UidAndAbortedFlagT> && value) 
	{
		fdb_probe_actor_enter("getStatus", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getStatus", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< GetStatusActor, 0, Optional<UidAndAbortedFlagT> >*,Error err) 
	{
		fdb_probe_actor_enter("getStatus", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getStatus", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1cont3(int loopDepth) 
	{
															#line 5148 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!uidAndAbortedFlag.present() || backupState == EBackupState::STATE_NEVERRAN)
															#line 47259 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 5149 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			statusText += "No previous backups found.\n";
															#line 47263 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = a_body1loopBody1cont6(loopDepth);
		}
		else
		{
															#line 5151 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			backupStatus = std::string(BackupAgentBase::getStateText(backupState));
															#line 5152 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			bc = Reference<IBackupContainer>();
															#line 5153 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			latestRestorableVersion = Optional<Version>();
															#line 5154 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			recentReadVersion = Version();
															#line 5156 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_2 = store(latestRestorableVersion, config.getLatestRestorableVersion(tr)) && store(bc, config.backupContainer().getOrThrow(tr)) && store(recentReadVersion, tr->getReadVersion());
															#line 5156 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<GetStatusActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 47280 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1loopBody1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1loopBody1cont3when1(__when_expr_2.get(), loopDepth); };
			static_cast<GetStatusActor*>(this)->actor_wait_state = 3;
															#line 5156 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< GetStatusActor, 2, Void >*>(static_cast<GetStatusActor*>(this)));
															#line 47285 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}

		return loopDepth;
	}
	int a_body1loopBody1cont4(EBackupState const& status,int loopDepth) 
	{
															#line 5145 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		backupState = status;
															#line 47295 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1loopBody1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont4(EBackupState && status,int loopDepth) 
	{
															#line 5145 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		backupState = status;
															#line 47304 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1loopBody1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(EBackupState const& status,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont4(status, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(EBackupState && status,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont4(std::move(status), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<GetStatusActor*>(this)->actor_wait_state > 0) static_cast<GetStatusActor*>(this)->actor_wait_state = 0;
		static_cast<GetStatusActor*>(this)->ActorCallback< GetStatusActor, 1, EBackupState >::remove();

	}
	void a_callback_fire(ActorCallback< GetStatusActor, 1, EBackupState >*,EBackupState const& value) 
	{
		fdb_probe_actor_enter("getStatus", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getStatus", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< GetStatusActor, 1, EBackupState >*,EBackupState && value) 
	{
		fdb_probe_actor_enter("getStatus", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getStatus", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< GetStatusActor, 1, EBackupState >*,Error err) 
	{
		fdb_probe_actor_enter("getStatus", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getStatus", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1loopBody1cont6(int loopDepth) 
	{
															#line 5290 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Optional<Value>> __when_expr_6 = fPaused;
															#line 5290 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<GetStatusActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 47378 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_6.isReady()) { if (__when_expr_6.isError()) return a_body1loopBody1Catch1(__when_expr_6.getError(), loopDepth); else return a_body1loopBody1cont6when1(__when_expr_6.get(), loopDepth); };
		static_cast<GetStatusActor*>(this)->actor_wait_state = 7;
															#line 5290 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_6.addCallbackAndClear(static_cast<ActorCallback< GetStatusActor, 6, Optional<Value> >*>(static_cast<GetStatusActor*>(this)));
															#line 47383 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont8(Void const& _,int loopDepth) 
	{
															#line 5159 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		bc = fileBackup::getBackupContainerWithProxy(bc);
															#line 5161 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		bool snapshotProgress = false;
															#line 5163 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		switch (backupState) { case EBackupState::STATE_SUBMITTED: statusText += "The backup on tag `" + tagName + "' is in progress (just started) to " + bc->getURL() + ".\n"; break; case EBackupState::STATE_RUNNING: statusText += "The backup on tag `" + tagName + "' is in progress to " + bc->getURL() + ".\n"; snapshotProgress = true; break; case EBackupState::STATE_RUNNING_DIFFERENTIAL: statusText += "The backup on tag `" + tagName + "' is restorable but continuing to " + bc->getURL() + ".\n"; snapshotProgress = true; break; case EBackupState::STATE_COMPLETED: statusText += "The previous backup on tag `" + tagName + "' at " + bc->getURL() + " completed at version " + format("%lld", latestRestorableVersion.orDefault(-1)) + ".\n"; break; default: statusText += "The previous backup on tag `" + tagName + "' at " + bc->getURL() + " " + backupStatus + ".\n"; break; };
															#line 5187 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		statusText += format("BackupUID: %s\n", uidAndAbortedFlag.get().first.toString().c_str());
															#line 5188 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		statusText += format("BackupURL: %s\n", bc->getURL().c_str());
															#line 5190 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (snapshotProgress)
															#line 47402 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 5191 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			snapshotInterval = int64_t();
															#line 5192 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			snapshotBeginVersion = Version();
															#line 5193 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			snapshotTargetEndVersion = Version();
															#line 5194 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			latestSnapshotEndVersion = Optional<Version>();
															#line 5195 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			latestLogEndVersion = Optional<Version>();
															#line 5196 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			logBytesWritten = Optional<int64_t>();
															#line 5197 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			rangeBytesWritten = Optional<int64_t>();
															#line 5198 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			latestSnapshotEndVersionTimestamp = Optional<int64_t>();
															#line 5199 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			latestLogEndVersionTimestamp = Optional<int64_t>();
															#line 5200 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			snapshotBeginVersionTimestamp = Optional<int64_t>();
															#line 5201 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			snapshotTargetEndVersionTimestamp = Optional<int64_t>();
															#line 5202 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			stopWhenDone = bool();
															#line 5204 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_3 = store(snapshotBeginVersion, config.snapshotBeginVersion().getOrThrow(tr)) && store(snapshotTargetEndVersion, config.snapshotTargetEndVersion().getOrThrow(tr)) && store(snapshotInterval, config.snapshotIntervalSeconds().getOrThrow(tr)) && store(logBytesWritten, config.logBytesWritten().get(tr)) && store(rangeBytesWritten, config.rangeBytesWritten().get(tr)) && store(latestLogEndVersion, config.latestLogEndVersion().get(tr)) && store(latestSnapshotEndVersion, config.latestSnapshotEndVersion().get(tr)) && store(stopWhenDone, config.stopWhenDone().getOrThrow(tr));
															#line 5204 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<GetStatusActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 47432 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1loopBody1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1loopBody1cont8when1(__when_expr_3.get(), loopDepth); };
			static_cast<GetStatusActor*>(this)->actor_wait_state = 4;
															#line 5204 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< GetStatusActor, 3, Void >*>(static_cast<GetStatusActor*>(this)));
															#line 47437 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1loopBody1cont9(loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont8(Void && _,int loopDepth) 
	{
															#line 5159 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		bc = fileBackup::getBackupContainerWithProxy(bc);
															#line 5161 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		bool snapshotProgress = false;
															#line 5163 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		switch (backupState) { case EBackupState::STATE_SUBMITTED: statusText += "The backup on tag `" + tagName + "' is in progress (just started) to " + bc->getURL() + ".\n"; break; case EBackupState::STATE_RUNNING: statusText += "The backup on tag `" + tagName + "' is in progress to " + bc->getURL() + ".\n"; snapshotProgress = true; break; case EBackupState::STATE_RUNNING_DIFFERENTIAL: statusText += "The backup on tag `" + tagName + "' is restorable but continuing to " + bc->getURL() + ".\n"; snapshotProgress = true; break; case EBackupState::STATE_COMPLETED: statusText += "The previous backup on tag `" + tagName + "' at " + bc->getURL() + " completed at version " + format("%lld", latestRestorableVersion.orDefault(-1)) + ".\n"; break; default: statusText += "The previous backup on tag `" + tagName + "' at " + bc->getURL() + " " + backupStatus + ".\n"; break; };
															#line 5187 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		statusText += format("BackupUID: %s\n", uidAndAbortedFlag.get().first.toString().c_str());
															#line 5188 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		statusText += format("BackupURL: %s\n", bc->getURL().c_str());
															#line 5190 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (snapshotProgress)
															#line 47461 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 5191 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			snapshotInterval = int64_t();
															#line 5192 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			snapshotBeginVersion = Version();
															#line 5193 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			snapshotTargetEndVersion = Version();
															#line 5194 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			latestSnapshotEndVersion = Optional<Version>();
															#line 5195 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			latestLogEndVersion = Optional<Version>();
															#line 5196 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			logBytesWritten = Optional<int64_t>();
															#line 5197 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			rangeBytesWritten = Optional<int64_t>();
															#line 5198 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			latestSnapshotEndVersionTimestamp = Optional<int64_t>();
															#line 5199 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			latestLogEndVersionTimestamp = Optional<int64_t>();
															#line 5200 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			snapshotBeginVersionTimestamp = Optional<int64_t>();
															#line 5201 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			snapshotTargetEndVersionTimestamp = Optional<int64_t>();
															#line 5202 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			stopWhenDone = bool();
															#line 5204 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_3 = store(snapshotBeginVersion, config.snapshotBeginVersion().getOrThrow(tr)) && store(snapshotTargetEndVersion, config.snapshotTargetEndVersion().getOrThrow(tr)) && store(snapshotInterval, config.snapshotIntervalSeconds().getOrThrow(tr)) && store(logBytesWritten, config.logBytesWritten().get(tr)) && store(rangeBytesWritten, config.rangeBytesWritten().get(tr)) && store(latestLogEndVersion, config.latestLogEndVersion().get(tr)) && store(latestSnapshotEndVersion, config.latestSnapshotEndVersion().get(tr)) && store(stopWhenDone, config.stopWhenDone().getOrThrow(tr));
															#line 5204 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<GetStatusActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 47491 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1loopBody1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1loopBody1cont8when1(__when_expr_3.get(), loopDepth); };
			static_cast<GetStatusActor*>(this)->actor_wait_state = 4;
															#line 5204 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< GetStatusActor, 3, Void >*>(static_cast<GetStatusActor*>(this)));
															#line 47496 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1loopBody1cont9(loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont3when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont8(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont3when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont8(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<GetStatusActor*>(this)->actor_wait_state > 0) static_cast<GetStatusActor*>(this)->actor_wait_state = 0;
		static_cast<GetStatusActor*>(this)->ActorCallback< GetStatusActor, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetStatusActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getStatus", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont3when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getStatus", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< GetStatusActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getStatus", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont3when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getStatus", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< GetStatusActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getStatus", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getStatus", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1loopBody1cont9(int loopDepth) 
	{
															#line 5250 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (showErrors)
															#line 47573 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 5251 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<KeyBackedMap<int64_t, std::pair<std::string, Version>>::PairsType> __when_expr_5 = config.lastErrorPerType().getRange( tr, 0, std::numeric_limits<int>::max(), CLIENT_KNOBS->TOO_MANY);
															#line 5251 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<GetStatusActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 47579 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_5.isReady()) { if (__when_expr_5.isError()) return a_body1loopBody1Catch1(__when_expr_5.getError(), loopDepth); else return a_body1loopBody1cont9when1(__when_expr_5.get(), loopDepth); };
			static_cast<GetStatusActor*>(this)->actor_wait_state = 6;
															#line 5251 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_5.addCallbackAndClear(static_cast<ActorCallback< GetStatusActor, 5, KeyBackedMap<int64_t, std::pair<std::string, Version>>::PairsType >*>(static_cast<GetStatusActor*>(this)));
															#line 47584 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1loopBody1cont11(loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont10(Void const& _,int loopDepth) 
	{
															#line 5213 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_4 = store(latestSnapshotEndVersionTimestamp, getTimestampFromVersion(latestSnapshotEndVersion, tr)) && store(latestLogEndVersionTimestamp, getTimestampFromVersion(latestLogEndVersion, tr)) && store(snapshotBeginVersionTimestamp, timeKeeperEpochsFromVersion(snapshotBeginVersion, tr)) && store(snapshotTargetEndVersionTimestamp, timeKeeperEpochsFromVersion(snapshotTargetEndVersion, tr));
															#line 5213 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<GetStatusActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 47600 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1loopBody1Catch1(__when_expr_4.getError(), loopDepth); else return a_body1loopBody1cont10when1(__when_expr_4.get(), loopDepth); };
		static_cast<GetStatusActor*>(this)->actor_wait_state = 5;
															#line 5213 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< GetStatusActor, 4, Void >*>(static_cast<GetStatusActor*>(this)));
															#line 47605 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont10(Void && _,int loopDepth) 
	{
															#line 5213 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_4 = store(latestSnapshotEndVersionTimestamp, getTimestampFromVersion(latestSnapshotEndVersion, tr)) && store(latestLogEndVersionTimestamp, getTimestampFromVersion(latestLogEndVersion, tr)) && store(snapshotBeginVersionTimestamp, timeKeeperEpochsFromVersion(snapshotBeginVersion, tr)) && store(snapshotTargetEndVersionTimestamp, timeKeeperEpochsFromVersion(snapshotTargetEndVersion, tr));
															#line 5213 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<GetStatusActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 47616 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1loopBody1Catch1(__when_expr_4.getError(), loopDepth); else return a_body1loopBody1cont10when1(__when_expr_4.get(), loopDepth); };
		static_cast<GetStatusActor*>(this)->actor_wait_state = 5;
															#line 5213 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< GetStatusActor, 4, Void >*>(static_cast<GetStatusActor*>(this)));
															#line 47621 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont8when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont10(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont8when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont10(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<GetStatusActor*>(this)->actor_wait_state > 0) static_cast<GetStatusActor*>(this)->actor_wait_state = 0;
		static_cast<GetStatusActor*>(this)->ActorCallback< GetStatusActor, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetStatusActor, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getStatus", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1cont8when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getStatus", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< GetStatusActor, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getStatus", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1cont8when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getStatus", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< GetStatusActor, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getStatus", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getStatus", reinterpret_cast<unsigned long>(this), 3);

	}
	int a_body1loopBody1cont10cont1(Void const& _,int loopDepth) 
	{
															#line 5221 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		statusText += format("Snapshot interval is %lld seconds.  ", snapshotInterval);
															#line 5222 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (backupState == EBackupState::STATE_RUNNING_DIFFERENTIAL)
															#line 47695 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 5223 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			statusText += format("Current snapshot progress target is %3.2f%% (>100%% means the " "snapshot is supposed to be done)\n", 100.0 * (recentReadVersion - snapshotBeginVersion) / (snapshotTargetEndVersion - snapshotBeginVersion));
															#line 47699 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
		else
		{
															#line 5228 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			statusText += "The initial snapshot is still running.\n";
															#line 47705 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 5230 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		statusText += format("\nDetails:\n LogBytes written - %lld\n RangeBytes written - %lld\n " "Last complete log version and timestamp        - %s, %s\n " "Last complete snapshot version and timestamp   - %s, %s\n " "Current Snapshot start version and timestamp   - %s, %s\n " "Expected snapshot end version and timestamp    - %s, %s\n " "Backup supposed to stop at next snapshot completion - %s\n", logBytesWritten.orDefault(0), rangeBytesWritten.orDefault(0), versionToString(latestLogEndVersion).c_str(), timeStampToString(latestLogEndVersionTimestamp).c_str(), versionToString(latestSnapshotEndVersion).c_str(), timeStampToString(latestSnapshotEndVersionTimestamp).c_str(), versionToString(snapshotBeginVersion).c_str(), timeStampToString(snapshotBeginVersionTimestamp).c_str(), versionToString(snapshotTargetEndVersion).c_str(), timeStampToString(snapshotTargetEndVersionTimestamp).c_str(), boolToYesOrNo(stopWhenDone).c_str());
															#line 47709 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1loopBody1cont9(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont10cont1(Void && _,int loopDepth) 
	{
															#line 5221 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		statusText += format("Snapshot interval is %lld seconds.  ", snapshotInterval);
															#line 5222 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (backupState == EBackupState::STATE_RUNNING_DIFFERENTIAL)
															#line 47720 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 5223 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			statusText += format("Current snapshot progress target is %3.2f%% (>100%% means the " "snapshot is supposed to be done)\n", 100.0 * (recentReadVersion - snapshotBeginVersion) / (snapshotTargetEndVersion - snapshotBeginVersion));
															#line 47724 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
		else
		{
															#line 5228 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			statusText += "The initial snapshot is still running.\n";
															#line 47730 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 5230 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		statusText += format("\nDetails:\n LogBytes written - %lld\n RangeBytes written - %lld\n " "Last complete log version and timestamp        - %s, %s\n " "Last complete snapshot version and timestamp   - %s, %s\n " "Current Snapshot start version and timestamp   - %s, %s\n " "Expected snapshot end version and timestamp    - %s, %s\n " "Backup supposed to stop at next snapshot completion - %s\n", logBytesWritten.orDefault(0), rangeBytesWritten.orDefault(0), versionToString(latestLogEndVersion).c_str(), timeStampToString(latestLogEndVersionTimestamp).c_str(), versionToString(latestSnapshotEndVersion).c_str(), timeStampToString(latestSnapshotEndVersionTimestamp).c_str(), versionToString(snapshotBeginVersion).c_str(), timeStampToString(snapshotBeginVersionTimestamp).c_str(), versionToString(snapshotTargetEndVersion).c_str(), timeStampToString(snapshotTargetEndVersionTimestamp).c_str(), boolToYesOrNo(stopWhenDone).c_str());
															#line 47734 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1loopBody1cont9(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont10when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont10cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont10when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont10cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose5() 
	{
		if (static_cast<GetStatusActor*>(this)->actor_wait_state > 0) static_cast<GetStatusActor*>(this)->actor_wait_state = 0;
		static_cast<GetStatusActor*>(this)->ActorCallback< GetStatusActor, 4, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetStatusActor, 4, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getStatus", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1loopBody1cont10when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getStatus", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_fire(ActorCallback< GetStatusActor, 4, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getStatus", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1loopBody1cont10when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getStatus", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_error(ActorCallback< GetStatusActor, 4, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getStatus", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getStatus", reinterpret_cast<unsigned long>(this), 4);

	}
	int a_body1loopBody1cont11(int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont6(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont12(KeyBackedMap<int64_t, std::pair<std::string, Version>>::PairsType const& errors,int loopDepth) 
	{
															#line 5254 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		std::string recentErrors;
															#line 5255 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		std::string pastErrors;
															#line 5257 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		for( auto& e : errors ) {
															#line 5258 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			Version v = e.second.second;
															#line 5259 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			std::string msg = format( "%s ago : %s\n", secondsToTimeFormat((recentReadVersion - v) / CLIENT_KNOBS->CORE_VERSIONSPERSECOND) .c_str(), e.second.first.c_str());
															#line 5267 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (v >= latestRestorableVersion.orDefault(0))
															#line 47822 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			{
															#line 5268 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				recentErrors += msg;
															#line 47826 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			}
			else
			{
															#line 5270 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				pastErrors += msg;
															#line 47832 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			}
		}
															#line 5274 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!recentErrors.empty())
															#line 47837 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 5275 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (latestRestorableVersion.present())
															#line 47841 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			{
															#line 5276 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				statusText += format("Recent Errors (since latest restorable point %s ago)\n", secondsToTimeFormat((recentReadVersion - latestRestorableVersion.get()) / CLIENT_KNOBS->CORE_VERSIONSPERSECOND) .c_str()) + recentErrors;
															#line 47845 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			}
			else
			{
															#line 5283 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				statusText += "Recent Errors (since initialization)\n" + recentErrors;
															#line 47851 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			}
		}
															#line 5285 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!pastErrors.empty())
															#line 47856 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 5286 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			statusText += "Older Errors\n" + pastErrors;
															#line 47860 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
		loopDepth = a_body1loopBody1cont11(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont12(KeyBackedMap<int64_t, std::pair<std::string, Version>>::PairsType && errors,int loopDepth) 
	{
															#line 5254 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		std::string recentErrors;
															#line 5255 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		std::string pastErrors;
															#line 5257 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		for( auto& e : errors ) {
															#line 5258 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			Version v = e.second.second;
															#line 5259 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			std::string msg = format( "%s ago : %s\n", secondsToTimeFormat((recentReadVersion - v) / CLIENT_KNOBS->CORE_VERSIONSPERSECOND) .c_str(), e.second.first.c_str());
															#line 5267 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (v >= latestRestorableVersion.orDefault(0))
															#line 47880 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			{
															#line 5268 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				recentErrors += msg;
															#line 47884 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			}
			else
			{
															#line 5270 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				pastErrors += msg;
															#line 47890 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			}
		}
															#line 5274 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!recentErrors.empty())
															#line 47895 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 5275 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (latestRestorableVersion.present())
															#line 47899 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			{
															#line 5276 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				statusText += format("Recent Errors (since latest restorable point %s ago)\n", secondsToTimeFormat((recentReadVersion - latestRestorableVersion.get()) / CLIENT_KNOBS->CORE_VERSIONSPERSECOND) .c_str()) + recentErrors;
															#line 47903 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			}
			else
			{
															#line 5283 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				statusText += "Recent Errors (since initialization)\n" + recentErrors;
															#line 47909 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			}
		}
															#line 5285 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!pastErrors.empty())
															#line 47914 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 5286 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			statusText += "Older Errors\n" + pastErrors;
															#line 47918 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
		loopDepth = a_body1loopBody1cont11(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont9when1(KeyBackedMap<int64_t, std::pair<std::string, Version>>::PairsType const& errors,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont12(errors, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont9when1(KeyBackedMap<int64_t, std::pair<std::string, Version>>::PairsType && errors,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont12(std::move(errors), loopDepth);

		return loopDepth;
	}
	void a_exitChoose6() 
	{
		if (static_cast<GetStatusActor*>(this)->actor_wait_state > 0) static_cast<GetStatusActor*>(this)->actor_wait_state = 0;
		static_cast<GetStatusActor*>(this)->ActorCallback< GetStatusActor, 5, KeyBackedMap<int64_t, std::pair<std::string, Version>>::PairsType >::remove();

	}
	void a_callback_fire(ActorCallback< GetStatusActor, 5, KeyBackedMap<int64_t, std::pair<std::string, Version>>::PairsType >*,KeyBackedMap<int64_t, std::pair<std::string, Version>>::PairsType const& value) 
	{
		fdb_probe_actor_enter("getStatus", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1loopBody1cont9when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getStatus", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_fire(ActorCallback< GetStatusActor, 5, KeyBackedMap<int64_t, std::pair<std::string, Version>>::PairsType >*,KeyBackedMap<int64_t, std::pair<std::string, Version>>::PairsType && value) 
	{
		fdb_probe_actor_enter("getStatus", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1loopBody1cont9when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getStatus", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_error(ActorCallback< GetStatusActor, 5, KeyBackedMap<int64_t, std::pair<std::string, Version>>::PairsType >*,Error err) 
	{
		fdb_probe_actor_enter("getStatus", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getStatus", reinterpret_cast<unsigned long>(this), 5);

	}
	int a_body1loopBody1cont13(Optional<Value> const& paused,int loopDepth) 
	{
															#line 5291 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (paused.present())
															#line 47991 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 5292 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			statusText += format("\nAll backup agents have been paused.\n");
															#line 47995 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
		return a_body1break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1loopBody1cont13(Optional<Value> && paused,int loopDepth) 
	{
															#line 5291 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (paused.present())
															#line 48005 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 5292 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			statusText += format("\nAll backup agents have been paused.\n");
															#line 48009 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
		return a_body1break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1loopBody1cont6when1(Optional<Value> const& paused,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont13(paused, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont6when1(Optional<Value> && paused,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont13(std::move(paused), loopDepth);

		return loopDepth;
	}
	void a_exitChoose7() 
	{
		if (static_cast<GetStatusActor*>(this)->actor_wait_state > 0) static_cast<GetStatusActor*>(this)->actor_wait_state = 0;
		static_cast<GetStatusActor*>(this)->ActorCallback< GetStatusActor, 6, Optional<Value> >::remove();

	}
	void a_callback_fire(ActorCallback< GetStatusActor, 6, Optional<Value> >*,Optional<Value> const& value) 
	{
		fdb_probe_actor_enter("getStatus", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1loopBody1cont6when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getStatus", reinterpret_cast<unsigned long>(this), 6);

	}
	void a_callback_fire(ActorCallback< GetStatusActor, 6, Optional<Value> >*,Optional<Value> && value) 
	{
		fdb_probe_actor_enter("getStatus", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1loopBody1cont6when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getStatus", reinterpret_cast<unsigned long>(this), 6);

	}
	void a_callback_error(ActorCallback< GetStatusActor, 6, Optional<Value> >*,Error err) 
	{
		fdb_probe_actor_enter("getStatus", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getStatus", reinterpret_cast<unsigned long>(this), 6);

	}
	int a_body1loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose8() 
	{
		if (static_cast<GetStatusActor*>(this)->actor_wait_state > 0) static_cast<GetStatusActor*>(this)->actor_wait_state = 0;
		static_cast<GetStatusActor*>(this)->ActorCallback< GetStatusActor, 7, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetStatusActor, 7, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getStatus", reinterpret_cast<unsigned long>(this), 7);
		a_exitChoose8();
		try {
			a_body1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getStatus", reinterpret_cast<unsigned long>(this), 7);

	}
	void a_callback_fire(ActorCallback< GetStatusActor, 7, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getStatus", reinterpret_cast<unsigned long>(this), 7);
		a_exitChoose8();
		try {
			a_body1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getStatus", reinterpret_cast<unsigned long>(this), 7);

	}
	void a_callback_error(ActorCallback< GetStatusActor, 7, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getStatus", reinterpret_cast<unsigned long>(this), 7);
		a_exitChoose8();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getStatus", reinterpret_cast<unsigned long>(this), 7);

	}
															#line 5121 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	FileBackupAgent* backupAgent;
															#line 5121 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Database cx;
															#line 5121 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	ShowErrors showErrors;
															#line 5121 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	std::string tagName;
															#line 5125 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 5126 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	std::string statusText;
															#line 5133 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	KeyBackedTag tag;
															#line 5134 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	BackupConfig config;
															#line 5135 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	EBackupState backupState;
															#line 5139 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Optional<UidAndAbortedFlagT> uidAndAbortedFlag;
															#line 5140 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Future<Optional<Value>> fPaused;
															#line 5151 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	std::string backupStatus;
															#line 5152 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<IBackupContainer> bc;
															#line 5153 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Optional<Version> latestRestorableVersion;
															#line 5154 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Version recentReadVersion;
															#line 5191 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int64_t snapshotInterval;
															#line 5192 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Version snapshotBeginVersion;
															#line 5193 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Version snapshotTargetEndVersion;
															#line 5194 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Optional<Version> latestSnapshotEndVersion;
															#line 5195 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Optional<Version> latestLogEndVersion;
															#line 5196 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Optional<int64_t> logBytesWritten;
															#line 5197 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Optional<int64_t> rangeBytesWritten;
															#line 5198 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Optional<int64_t> latestSnapshotEndVersionTimestamp;
															#line 5199 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Optional<int64_t> latestLogEndVersionTimestamp;
															#line 5200 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Optional<int64_t> snapshotBeginVersionTimestamp;
															#line 5201 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Optional<int64_t> snapshotTargetEndVersionTimestamp;
															#line 5202 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	bool stopWhenDone;
															#line 48207 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via getStatus()
															#line 5121 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class GetStatusActor final : public Actor<std::string>, public ActorCallback< GetStatusActor, 0, Optional<UidAndAbortedFlagT> >, public ActorCallback< GetStatusActor, 1, EBackupState >, public ActorCallback< GetStatusActor, 2, Void >, public ActorCallback< GetStatusActor, 3, Void >, public ActorCallback< GetStatusActor, 4, Void >, public ActorCallback< GetStatusActor, 5, KeyBackedMap<int64_t, std::pair<std::string, Version>>::PairsType >, public ActorCallback< GetStatusActor, 6, Optional<Value> >, public ActorCallback< GetStatusActor, 7, Void >, public FastAllocated<GetStatusActor>, public GetStatusActorState<GetStatusActor> {
															#line 48212 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<GetStatusActor>::operator new;
	using FastAllocated<GetStatusActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<std::string>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< GetStatusActor, 0, Optional<UidAndAbortedFlagT> >;
friend struct ActorCallback< GetStatusActor, 1, EBackupState >;
friend struct ActorCallback< GetStatusActor, 2, Void >;
friend struct ActorCallback< GetStatusActor, 3, Void >;
friend struct ActorCallback< GetStatusActor, 4, Void >;
friend struct ActorCallback< GetStatusActor, 5, KeyBackedMap<int64_t, std::pair<std::string, Version>>::PairsType >;
friend struct ActorCallback< GetStatusActor, 6, Optional<Value> >;
friend struct ActorCallback< GetStatusActor, 7, Void >;
															#line 5121 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	GetStatusActor(FileBackupAgent* const& backupAgent,Database const& cx,ShowErrors const& showErrors,std::string const& tagName) 
															#line 48230 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<std::string>(),
		   GetStatusActorState<GetStatusActor>(backupAgent, cx, showErrors, tagName)
	{
		fdb_probe_actor_enter("getStatus", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("getStatus");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("getStatus", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< GetStatusActor, 0, Optional<UidAndAbortedFlagT> >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< GetStatusActor, 1, EBackupState >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< GetStatusActor, 2, Void >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< GetStatusActor, 3, Void >*)0, actor_cancelled()); break;
		case 5: this->a_callback_error((ActorCallback< GetStatusActor, 4, Void >*)0, actor_cancelled()); break;
		case 6: this->a_callback_error((ActorCallback< GetStatusActor, 5, KeyBackedMap<int64_t, std::pair<std::string, Version>>::PairsType >*)0, actor_cancelled()); break;
		case 7: this->a_callback_error((ActorCallback< GetStatusActor, 6, Optional<Value> >*)0, actor_cancelled()); break;
		case 8: this->a_callback_error((ActorCallback< GetStatusActor, 7, Void >*)0, actor_cancelled()); break;
		}

	}
};
															#line 5121 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<std::string> getStatus( FileBackupAgent* const& backupAgent, Database const& cx, ShowErrors const& showErrors, std::string const& tagName ) {
															#line 5121 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<std::string>(new GetStatusActor(backupAgent, cx, showErrors, tagName));
															#line 48264 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 5303 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

																#line 48269 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via getLastRestorable()
															#line 5304 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class GetLastRestorableActor>
															#line 5304 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class GetLastRestorableActorState {
															#line 48275 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 5304 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	GetLastRestorableActorState(FileBackupAgent* const& backupAgent,Reference<ReadYourWritesTransaction> const& tr,Key const& tagName,Snapshot const& snapshot) 
															#line 5304 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 5304 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : backupAgent(backupAgent),
															#line 5304 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   tr(tr),
															#line 5304 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   tagName(tagName),
															#line 5304 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   snapshot(snapshot)
															#line 48288 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("getLastRestorable", reinterpret_cast<unsigned long>(this));

	}
	~GetLastRestorableActorState() 
	{
		fdb_probe_actor_destroy("getLastRestorable", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 5308 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 5309 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 5310 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Optional<Value>> __when_expr_0 = tr->get(backupAgent->lastRestorable.pack(tagName), snapshot);
															#line 5310 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<GetLastRestorableActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 48309 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<GetLastRestorableActor*>(this)->actor_wait_state = 1;
															#line 5310 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< GetLastRestorableActor, 0, Optional<Value> >*>(static_cast<GetLastRestorableActor*>(this)));
															#line 48314 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~GetLastRestorableActorState();
		static_cast<GetLastRestorableActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 5312 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<GetLastRestorableActor*>(this)->SAV<Optional<Version>>::futures) { (void)((version.present()) ? Optional<Version>(BinaryReader::fromStringRef<Version>(version.get(), Unversioned())) : Optional<Version>()); this->~GetLastRestorableActorState(); static_cast<GetLastRestorableActor*>(this)->destroy(); return 0; }
															#line 48337 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<GetLastRestorableActor*>(this)->SAV< Optional<Version> >::value()) Optional<Version>((version.present()) ? Optional<Version>(BinaryReader::fromStringRef<Version>(version.get(), Unversioned())) : Optional<Version>());
		this->~GetLastRestorableActorState();
		static_cast<GetLastRestorableActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1when1(Optional<Value> const& __version,int loopDepth) 
	{
															#line 5310 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		version = __version;
															#line 48349 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1when1(Optional<Value> && __version,int loopDepth) 
	{
		version = std::move(__version);
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<GetLastRestorableActor*>(this)->actor_wait_state > 0) static_cast<GetLastRestorableActor*>(this)->actor_wait_state = 0;
		static_cast<GetLastRestorableActor*>(this)->ActorCallback< GetLastRestorableActor, 0, Optional<Value> >::remove();

	}
	void a_callback_fire(ActorCallback< GetLastRestorableActor, 0, Optional<Value> >*,Optional<Value> const& value) 
	{
		fdb_probe_actor_enter("getLastRestorable", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getLastRestorable", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< GetLastRestorableActor, 0, Optional<Value> >*,Optional<Value> && value) 
	{
		fdb_probe_actor_enter("getLastRestorable", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getLastRestorable", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< GetLastRestorableActor, 0, Optional<Value> >*,Error err) 
	{
		fdb_probe_actor_enter("getLastRestorable", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getLastRestorable", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 5304 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	FileBackupAgent* backupAgent;
															#line 5304 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 5304 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Key tagName;
															#line 5304 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Snapshot snapshot;
															#line 5310 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Optional<Value> version;
															#line 48422 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via getLastRestorable()
															#line 5304 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class GetLastRestorableActor final : public Actor<Optional<Version>>, public ActorCallback< GetLastRestorableActor, 0, Optional<Value> >, public FastAllocated<GetLastRestorableActor>, public GetLastRestorableActorState<GetLastRestorableActor> {
															#line 48427 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<GetLastRestorableActor>::operator new;
	using FastAllocated<GetLastRestorableActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Optional<Version>>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< GetLastRestorableActor, 0, Optional<Value> >;
															#line 5304 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	GetLastRestorableActor(FileBackupAgent* const& backupAgent,Reference<ReadYourWritesTransaction> const& tr,Key const& tagName,Snapshot const& snapshot) 
															#line 48438 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<Optional<Version>>(),
		   GetLastRestorableActorState<GetLastRestorableActor>(backupAgent, tr, tagName, snapshot)
	{
		fdb_probe_actor_enter("getLastRestorable", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("getLastRestorable");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("getLastRestorable", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< GetLastRestorableActor, 0, Optional<Value> >*)0, actor_cancelled()); break;
		}

	}
};
															#line 5304 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<Optional<Version>> getLastRestorable( FileBackupAgent* const& backupAgent, Reference<ReadYourWritesTransaction> const& tr, Key const& tagName, Snapshot const& snapshot ) {
															#line 5304 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<Optional<Version>>(new GetLastRestorableActor(backupAgent, tr, tagName, snapshot));
															#line 48465 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 5316 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

	static StringRef read(StringRef& data, int bytes) {
		if (bytes > data.size())
			throw restore_error();
		StringRef r = data.substr(0, bytes);
		data = data.substr(bytes);
		return r;
	}

	// Submits the restore request to the database and throws "restore_invalid_version" error if
	// restore is not possible. Parameters:
	//   cx: the database to be restored to
	//   cxOrig: if present, is used to resolve the restore timestamp into a version.
	//   tagName: restore tag
	//   url: the backup container's URL that contains all backup files
	//   ranges: the restored key ranges; if empty, restore all key ranges in the backup
	//   waitForComplete: if set, wait until the restore is completed before returning; otherwise,
	//                    return when the request is submitted to the database.
	//   targetVersion: the version to be restored.
	//   verbose: print verbose information.
	//   addPrefix: each key is added this prefix during restore.
	//   removePrefix: for each key to be restored, remove this prefix first.
	//   lockDB: if set lock the database with randomUid before performing restore;
	//           otherwise, check database is locked with the randomUid
	//   onlyApplyMutationLogs: only perform incremental restore, by only applying mutation logs
	//   inconsistentSnapshotOnly: Ignore mutation log files during the restore to speedup the process.
	//                             When set to true, gives an inconsistent snapshot, thus not recommended
	//   beginVersion: restore's begin version
	//   randomUid: the UID for lock the database
																#line 48498 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via restore()
															#line 5345 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class RestoreActor>
															#line 5345 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class RestoreActorState {
															#line 48504 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 5345 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	RestoreActorState(FileBackupAgent* const& backupAgent,Database const& cx,Optional<Database> const& cxOrig,Key const& tagName,Key const& url,Optional<std::string> const& proxy,Standalone<VectorRef<KeyRangeRef>> const& ranges,WaitForComplete const& waitForComplete,Version const& targetVersion,Verbose const& verbose,Key const& addPrefix,Key const& removePrefix,LockDB const& lockDB,OnlyApplyMutationLogs const& onlyApplyMutationLogs,InconsistentSnapshotOnly const& inconsistentSnapshotOnly,Version const& beginVersion,Optional<std::string> const& encryptionKeyFileName,UID const& randomUid) 
															#line 5345 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 5345 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : backupAgent(backupAgent),
															#line 5345 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   cx(cx),
															#line 5345 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   cxOrig(cxOrig),
															#line 5345 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   tagName(tagName),
															#line 5345 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   url(url),
															#line 5345 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   proxy(proxy),
															#line 5345 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   ranges(ranges),
															#line 5345 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   waitForComplete(waitForComplete),
															#line 5345 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   targetVersion(targetVersion),
															#line 5345 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   verbose(verbose),
															#line 5345 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   addPrefix(addPrefix),
															#line 5345 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   removePrefix(removePrefix),
															#line 5345 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   lockDB(lockDB),
															#line 5345 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   onlyApplyMutationLogs(onlyApplyMutationLogs),
															#line 5345 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   inconsistentSnapshotOnly(inconsistentSnapshotOnly),
															#line 5345 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   beginVersion(beginVersion),
															#line 5345 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   encryptionKeyFileName(encryptionKeyFileName),
															#line 5345 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   randomUid(randomUid)
															#line 48545 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("restore", reinterpret_cast<unsigned long>(this));

	}
	~RestoreActorState() 
	{
		fdb_probe_actor_destroy("restore", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 5364 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (ranges.empty())
															#line 48560 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			{
															#line 5365 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				return a_body1Catch1(restore_error(), loopDepth);
															#line 48564 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			}
															#line 5368 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			bc = IBackupContainer::openContainer(url.toString(), proxy, {});
															#line 5370 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<BackupDescription> __when_expr_0 = bc->describeBackup(true);
															#line 5370 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<RestoreActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 48572 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<RestoreActor*>(this)->actor_wait_state = 1;
															#line 5370 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< RestoreActor, 0, BackupDescription >*>(static_cast<RestoreActor*>(this)));
															#line 48577 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~RestoreActorState();
		static_cast<RestoreActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 5371 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (cxOrig.present())
															#line 48600 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 5372 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_1 = desc.resolveVersionTimes(cxOrig.get());
															#line 5372 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<RestoreActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 48606 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
			static_cast<RestoreActor*>(this)->actor_wait_state = 2;
															#line 5372 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< RestoreActor, 1, Void >*>(static_cast<RestoreActor*>(this)));
															#line 48611 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1cont3(loopDepth);
		}

		return loopDepth;
	}
	int a_body1when1(BackupDescription const& __desc,int loopDepth) 
	{
															#line 5370 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		desc = __desc;
															#line 48625 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1when1(BackupDescription && __desc,int loopDepth) 
	{
		desc = std::move(__desc);
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<RestoreActor*>(this)->actor_wait_state > 0) static_cast<RestoreActor*>(this)->actor_wait_state = 0;
		static_cast<RestoreActor*>(this)->ActorCallback< RestoreActor, 0, BackupDescription >::remove();

	}
	void a_callback_fire(ActorCallback< RestoreActor, 0, BackupDescription >*,BackupDescription const& value) 
	{
		fdb_probe_actor_enter("restore", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("restore", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< RestoreActor, 0, BackupDescription >*,BackupDescription && value) 
	{
		fdb_probe_actor_enter("restore", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("restore", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< RestoreActor, 0, BackupDescription >*,Error err) 
	{
		fdb_probe_actor_enter("restore", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("restore", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont3(int loopDepth) 
	{
															#line 5375 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		printf("Backup Description\n%s", desc.toString().c_str());
															#line 5376 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (targetVersion == invalidVersion && desc.maxRestorableVersion.present())
															#line 48694 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 5377 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			targetVersion = desc.maxRestorableVersion.get();
															#line 48698 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 5379 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (targetVersion == invalidVersion && onlyApplyMutationLogs && desc.contiguousLogEnd.present())
															#line 48702 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 5380 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			targetVersion = desc.contiguousLogEnd.get() - 1;
															#line 48706 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 5383 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Optional<RestorableFileSet>> __when_expr_2 = bc->getRestoreSet(targetVersion, ranges, onlyApplyMutationLogs, beginVersion);
															#line 5383 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<RestoreActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 48712 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont3when1(__when_expr_2.get(), loopDepth); };
		static_cast<RestoreActor*>(this)->actor_wait_state = 3;
															#line 5383 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< RestoreActor, 2, Optional<RestorableFileSet> >*>(static_cast<RestoreActor*>(this)));
															#line 48717 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont4(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1cont4(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont4(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont4(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<RestoreActor*>(this)->actor_wait_state > 0) static_cast<RestoreActor*>(this)->actor_wait_state = 0;
		static_cast<RestoreActor*>(this)->ActorCallback< RestoreActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< RestoreActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("restore", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("restore", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< RestoreActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("restore", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("restore", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< RestoreActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("restore", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("restore", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont5(Optional<RestorableFileSet> const& restoreSet,int loopDepth) 
	{
															#line 5386 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!restoreSet.present())
															#line 48801 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 5387 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			TraceEvent(SevWarn, "FileBackupAgentRestoreNotPossible") .detail("BackupContainer", bc->getURL()) .detail("BeginVersion", beginVersion) .detail("TargetVersion", targetVersion);
															#line 5391 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			fmt::print(stderr, "ERROR: Restore version {0} is not possible from {1}\n", targetVersion, bc->getURL());
															#line 5392 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			return a_body1Catch1(restore_invalid_version(), loopDepth);
															#line 48809 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 5395 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (verbose)
															#line 48813 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 5396 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			printf("Restoring backup to version: %lld\n", (long long)targetVersion);
															#line 48817 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 5399 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr = Reference<ReadYourWritesTransaction>(new ReadYourWritesTransaction(cx));
															#line 5400 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		;
															#line 48823 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont5loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1cont5(Optional<RestorableFileSet> && restoreSet,int loopDepth) 
	{
															#line 5386 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!restoreSet.present())
															#line 48832 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 5387 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			TraceEvent(SevWarn, "FileBackupAgentRestoreNotPossible") .detail("BackupContainer", bc->getURL()) .detail("BeginVersion", beginVersion) .detail("TargetVersion", targetVersion);
															#line 5391 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			fmt::print(stderr, "ERROR: Restore version {0} is not possible from {1}\n", targetVersion, bc->getURL());
															#line 5392 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			return a_body1Catch1(restore_invalid_version(), loopDepth);
															#line 48840 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 5395 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (verbose)
															#line 48844 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 5396 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			printf("Restoring backup to version: %lld\n", (long long)targetVersion);
															#line 48848 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 5399 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr = Reference<ReadYourWritesTransaction>(new ReadYourWritesTransaction(cx));
															#line 5400 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		;
															#line 48854 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont5loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1cont3when1(Optional<RestorableFileSet> const& restoreSet,int loopDepth) 
	{
		loopDepth = a_body1cont5(restoreSet, loopDepth);

		return loopDepth;
	}
	int a_body1cont3when1(Optional<RestorableFileSet> && restoreSet,int loopDepth) 
	{
		loopDepth = a_body1cont5(std::move(restoreSet), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<RestoreActor*>(this)->actor_wait_state > 0) static_cast<RestoreActor*>(this)->actor_wait_state = 0;
		static_cast<RestoreActor*>(this)->ActorCallback< RestoreActor, 2, Optional<RestorableFileSet> >::remove();

	}
	void a_callback_fire(ActorCallback< RestoreActor, 2, Optional<RestorableFileSet> >*,Optional<RestorableFileSet> const& value) 
	{
		fdb_probe_actor_enter("restore", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont3when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("restore", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< RestoreActor, 2, Optional<RestorableFileSet> >*,Optional<RestorableFileSet> && value) 
	{
		fdb_probe_actor_enter("restore", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont3when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("restore", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< RestoreActor, 2, Optional<RestorableFileSet> >*,Error err) 
	{
		fdb_probe_actor_enter("restore", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("restore", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1cont8(int loopDepth) 
	{
															#line 5428 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (waitForComplete)
															#line 48926 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 5429 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<ERestoreState> __when_expr_6 = waitRestore(cx, tagName, verbose);
															#line 5429 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<RestoreActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 48932 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_6.isReady()) { if (__when_expr_6.isError()) return a_body1Catch1(__when_expr_6.getError(), loopDepth); else return a_body1cont8when1(__when_expr_6.get(), loopDepth); };
			static_cast<RestoreActor*>(this)->actor_wait_state = 7;
															#line 5429 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_6.addCallbackAndClear(static_cast<ActorCallback< RestoreActor, 6, ERestoreState >*>(static_cast<RestoreActor*>(this)));
															#line 48937 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1cont11(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont5loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1cont5loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1cont5loopBody1(int loopDepth) 
	{
		try {
															#line 5402 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 5403 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr->setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 5404 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_3 = submitRestore(backupAgent, tr, tagName, url, proxy, ranges, targetVersion, addPrefix, removePrefix, lockDB, onlyApplyMutationLogs, inconsistentSnapshotOnly, beginVersion, randomUid);
															#line 5404 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<RestoreActor*>(this)->actor_wait_state < 0) return a_body1cont5loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 48965 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1cont5loopBody1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1cont5loopBody1when1(__when_expr_3.get(), loopDepth); };
			static_cast<RestoreActor*>(this)->actor_wait_state = 4;
															#line 5404 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< RestoreActor, 3, Void >*>(static_cast<RestoreActor*>(this)));
															#line 48970 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1cont5loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1cont5loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont5break1(int loopDepth) 
	{
		try {
			return a_body1cont8(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont5loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1cont5loopHead1(0);

		return loopDepth;
	}
	int a_body1cont5loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 5421 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (e.code() == error_code_restore_duplicate_tag)
															#line 49005 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			{
															#line 5422 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				return a_body1Catch1(e, std::max(0, loopDepth - 1));
															#line 49009 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			}
															#line 5424 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_5 = tr->onError(e);
															#line 5424 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<RestoreActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 49015 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_5.isReady()) { if (__when_expr_5.isError()) return a_body1Catch1(__when_expr_5.getError(), std::max(0, loopDepth - 1)); else return a_body1cont5loopBody1Catch1when1(__when_expr_5.get(), loopDepth); };
			static_cast<RestoreActor*>(this)->actor_wait_state = 6;
															#line 5424 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_5.addCallbackAndClear(static_cast<ActorCallback< RestoreActor, 5, Void >*>(static_cast<RestoreActor*>(this)));
															#line 49020 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1cont5loopBody1cont2(Void const& _,int loopDepth) 
	{
															#line 5418 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_4 = tr->commit();
															#line 5418 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<RestoreActor*>(this)->actor_wait_state < 0) return a_body1cont5loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 49037 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1cont5loopBody1Catch1(__when_expr_4.getError(), loopDepth); else return a_body1cont5loopBody1cont2when1(__when_expr_4.get(), loopDepth); };
		static_cast<RestoreActor*>(this)->actor_wait_state = 5;
															#line 5418 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< RestoreActor, 4, Void >*>(static_cast<RestoreActor*>(this)));
															#line 49042 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont5loopBody1cont2(Void && _,int loopDepth) 
	{
															#line 5418 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_4 = tr->commit();
															#line 5418 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<RestoreActor*>(this)->actor_wait_state < 0) return a_body1cont5loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 49053 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1cont5loopBody1Catch1(__when_expr_4.getError(), loopDepth); else return a_body1cont5loopBody1cont2when1(__when_expr_4.get(), loopDepth); };
		static_cast<RestoreActor*>(this)->actor_wait_state = 5;
															#line 5418 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< RestoreActor, 4, Void >*>(static_cast<RestoreActor*>(this)));
															#line 49058 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont5loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont5loopBody1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont5loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont5loopBody1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<RestoreActor*>(this)->actor_wait_state > 0) static_cast<RestoreActor*>(this)->actor_wait_state = 0;
		static_cast<RestoreActor*>(this)->ActorCallback< RestoreActor, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< RestoreActor, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("restore", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont5loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont5loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont5loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("restore", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< RestoreActor, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("restore", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont5loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont5loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont5loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("restore", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< RestoreActor, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("restore", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont5loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont5loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont5loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("restore", reinterpret_cast<unsigned long>(this), 3);

	}
	int a_body1cont5loopBody1cont3(Void const& _,int loopDepth) 
	{
		return a_body1cont5break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1cont5loopBody1cont3(Void && _,int loopDepth) 
	{
		return a_body1cont5break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1cont5loopBody1cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont5loopBody1cont3(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont5loopBody1cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont5loopBody1cont3(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose5() 
	{
		if (static_cast<RestoreActor*>(this)->actor_wait_state > 0) static_cast<RestoreActor*>(this)->actor_wait_state = 0;
		static_cast<RestoreActor*>(this)->ActorCallback< RestoreActor, 4, Void >::remove();

	}
	void a_callback_fire(ActorCallback< RestoreActor, 4, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("restore", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont5loopBody1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont5loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont5loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("restore", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_fire(ActorCallback< RestoreActor, 4, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("restore", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont5loopBody1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont5loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont5loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("restore", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_error(ActorCallback< RestoreActor, 4, Void >*,Error err) 
	{
		fdb_probe_actor_enter("restore", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont5loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont5loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont5loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("restore", reinterpret_cast<unsigned long>(this), 4);

	}
	int a_body1cont5loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont5loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont5loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont5loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont5loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont5loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont5loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont5loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose6() 
	{
		if (static_cast<RestoreActor*>(this)->actor_wait_state > 0) static_cast<RestoreActor*>(this)->actor_wait_state = 0;
		static_cast<RestoreActor*>(this)->ActorCallback< RestoreActor, 5, Void >::remove();

	}
	void a_callback_fire(ActorCallback< RestoreActor, 5, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("restore", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1cont5loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("restore", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_fire(ActorCallback< RestoreActor, 5, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("restore", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1cont5loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("restore", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_error(ActorCallback< RestoreActor, 5, Void >*,Error err) 
	{
		fdb_probe_actor_enter("restore", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("restore", reinterpret_cast<unsigned long>(this), 5);

	}
	int a_body1cont11(int loopDepth) 
	{
															#line 5434 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<RestoreActor*>(this)->SAV<Version>::futures) { (void)(targetVersion); this->~RestoreActorState(); static_cast<RestoreActor*>(this)->destroy(); return 0; }
															#line 49280 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<RestoreActor*>(this)->SAV< Version >::value()) Version(std::move(targetVersion)); // state_var_RVO
		this->~RestoreActorState();
		static_cast<RestoreActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont12(ERestoreState const& finalState,int loopDepth) 
	{
															#line 5430 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (finalState != ERestoreState::COMPLETED)
															#line 49292 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 5431 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			return a_body1Catch1(restore_error(), loopDepth);
															#line 49296 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
		loopDepth = a_body1cont11(loopDepth);

		return loopDepth;
	}
	int a_body1cont12(ERestoreState && finalState,int loopDepth) 
	{
															#line 5430 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (finalState != ERestoreState::COMPLETED)
															#line 49306 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 5431 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			return a_body1Catch1(restore_error(), loopDepth);
															#line 49310 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
		loopDepth = a_body1cont11(loopDepth);

		return loopDepth;
	}
	int a_body1cont8when1(ERestoreState const& finalState,int loopDepth) 
	{
		loopDepth = a_body1cont12(finalState, loopDepth);

		return loopDepth;
	}
	int a_body1cont8when1(ERestoreState && finalState,int loopDepth) 
	{
		loopDepth = a_body1cont12(std::move(finalState), loopDepth);

		return loopDepth;
	}
	void a_exitChoose7() 
	{
		if (static_cast<RestoreActor*>(this)->actor_wait_state > 0) static_cast<RestoreActor*>(this)->actor_wait_state = 0;
		static_cast<RestoreActor*>(this)->ActorCallback< RestoreActor, 6, ERestoreState >::remove();

	}
	void a_callback_fire(ActorCallback< RestoreActor, 6, ERestoreState >*,ERestoreState const& value) 
	{
		fdb_probe_actor_enter("restore", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1cont8when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("restore", reinterpret_cast<unsigned long>(this), 6);

	}
	void a_callback_fire(ActorCallback< RestoreActor, 6, ERestoreState >*,ERestoreState && value) 
	{
		fdb_probe_actor_enter("restore", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1cont8when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("restore", reinterpret_cast<unsigned long>(this), 6);

	}
	void a_callback_error(ActorCallback< RestoreActor, 6, ERestoreState >*,Error err) 
	{
		fdb_probe_actor_enter("restore", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("restore", reinterpret_cast<unsigned long>(this), 6);

	}
															#line 5345 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	FileBackupAgent* backupAgent;
															#line 5345 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Database cx;
															#line 5345 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Optional<Database> cxOrig;
															#line 5345 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Key tagName;
															#line 5345 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Key url;
															#line 5345 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Optional<std::string> proxy;
															#line 5345 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Standalone<VectorRef<KeyRangeRef>> ranges;
															#line 5345 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	WaitForComplete waitForComplete;
															#line 5345 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Version targetVersion;
															#line 5345 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Verbose verbose;
															#line 5345 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Key addPrefix;
															#line 5345 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Key removePrefix;
															#line 5345 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	LockDB lockDB;
															#line 5345 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	OnlyApplyMutationLogs onlyApplyMutationLogs;
															#line 5345 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	InconsistentSnapshotOnly inconsistentSnapshotOnly;
															#line 5345 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Version beginVersion;
															#line 5345 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Optional<std::string> encryptionKeyFileName;
															#line 5345 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	UID randomUid;
															#line 5368 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<IBackupContainer> bc;
															#line 5370 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	BackupDescription desc;
															#line 5399 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 49421 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via restore()
															#line 5345 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class RestoreActor final : public Actor<Version>, public ActorCallback< RestoreActor, 0, BackupDescription >, public ActorCallback< RestoreActor, 1, Void >, public ActorCallback< RestoreActor, 2, Optional<RestorableFileSet> >, public ActorCallback< RestoreActor, 3, Void >, public ActorCallback< RestoreActor, 4, Void >, public ActorCallback< RestoreActor, 5, Void >, public ActorCallback< RestoreActor, 6, ERestoreState >, public FastAllocated<RestoreActor>, public RestoreActorState<RestoreActor> {
															#line 49426 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<RestoreActor>::operator new;
	using FastAllocated<RestoreActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Version>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< RestoreActor, 0, BackupDescription >;
friend struct ActorCallback< RestoreActor, 1, Void >;
friend struct ActorCallback< RestoreActor, 2, Optional<RestorableFileSet> >;
friend struct ActorCallback< RestoreActor, 3, Void >;
friend struct ActorCallback< RestoreActor, 4, Void >;
friend struct ActorCallback< RestoreActor, 5, Void >;
friend struct ActorCallback< RestoreActor, 6, ERestoreState >;
															#line 5345 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	RestoreActor(FileBackupAgent* const& backupAgent,Database const& cx,Optional<Database> const& cxOrig,Key const& tagName,Key const& url,Optional<std::string> const& proxy,Standalone<VectorRef<KeyRangeRef>> const& ranges,WaitForComplete const& waitForComplete,Version const& targetVersion,Verbose const& verbose,Key const& addPrefix,Key const& removePrefix,LockDB const& lockDB,OnlyApplyMutationLogs const& onlyApplyMutationLogs,InconsistentSnapshotOnly const& inconsistentSnapshotOnly,Version const& beginVersion,Optional<std::string> const& encryptionKeyFileName,UID const& randomUid) 
															#line 49443 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<Version>(),
		   RestoreActorState<RestoreActor>(backupAgent, cx, cxOrig, tagName, url, proxy, ranges, waitForComplete, targetVersion, verbose, addPrefix, removePrefix, lockDB, onlyApplyMutationLogs, inconsistentSnapshotOnly, beginVersion, encryptionKeyFileName, randomUid)
	{
		fdb_probe_actor_enter("restore", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("restore");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("restore", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< RestoreActor, 0, BackupDescription >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< RestoreActor, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< RestoreActor, 2, Optional<RestorableFileSet> >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< RestoreActor, 3, Void >*)0, actor_cancelled()); break;
		case 5: this->a_callback_error((ActorCallback< RestoreActor, 4, Void >*)0, actor_cancelled()); break;
		case 6: this->a_callback_error((ActorCallback< RestoreActor, 5, Void >*)0, actor_cancelled()); break;
		case 7: this->a_callback_error((ActorCallback< RestoreActor, 6, ERestoreState >*)0, actor_cancelled()); break;
		}

	}
};
															#line 5345 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<Version> restore( FileBackupAgent* const& backupAgent, Database const& cx, Optional<Database> const& cxOrig, Key const& tagName, Key const& url, Optional<std::string> const& proxy, Standalone<VectorRef<KeyRangeRef>> const& ranges, WaitForComplete const& waitForComplete, Version const& targetVersion, Verbose const& verbose, Key const& addPrefix, Key const& removePrefix, LockDB const& lockDB, OnlyApplyMutationLogs const& onlyApplyMutationLogs, InconsistentSnapshotOnly const& inconsistentSnapshotOnly, Version const& beginVersion, Optional<std::string> const& encryptionKeyFileName, UID const& randomUid ) {
															#line 5345 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<Version>(new RestoreActor(backupAgent, cx, cxOrig, tagName, url, proxy, ranges, waitForComplete, targetVersion, verbose, addPrefix, removePrefix, lockDB, onlyApplyMutationLogs, inconsistentSnapshotOnly, beginVersion, encryptionKeyFileName, randomUid));
															#line 49476 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 5436 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

	// used for correctness only, locks the database before discontinuing the backup and that same lock is then used
	// while doing the restore. the tagname of the backup must be the same as the restore.
																#line 49483 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
// This generated class is to be used only via atomicRestore()
															#line 5439 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class AtomicRestoreActor>
															#line 5439 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class AtomicRestoreActorState {
															#line 49489 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 5439 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	AtomicRestoreActorState(FileBackupAgent* const& backupAgent,Database const& cx,Key const& tagName,Standalone<VectorRef<KeyRangeRef>> const& ranges,Key const& addPrefix,Key const& removePrefix,UsePartitionedLog const& fastRestore) 
															#line 5439 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 5439 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : backupAgent(backupAgent),
															#line 5439 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   cx(cx),
															#line 5439 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   tagName(tagName),
															#line 5439 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   ranges(ranges),
															#line 5439 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   addPrefix(addPrefix),
															#line 5439 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   removePrefix(removePrefix),
															#line 5439 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   fastRestore(fastRestore),
															#line 5446 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   ryw_tr(Reference<ReadYourWritesTransaction>(new ReadYourWritesTransaction(cx))),
															#line 5448 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   backupConfig()
															#line 49512 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("atomicRestore", reinterpret_cast<unsigned long>(this));

	}
	~AtomicRestoreActorState() 
	{
		fdb_probe_actor_destroy("atomicRestore", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 5449 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			;
															#line 49527 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~AtomicRestoreActorState();
		static_cast<AtomicRestoreActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 5469 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr = Transaction(cx);
															#line 5470 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		commitVersion = Version();
															#line 5471 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		randomUid = deterministicRandom()->randomUniqueID();
															#line 5472 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		;
															#line 49556 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont1loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
		try {
															#line 5451 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			ryw_tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 5452 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			ryw_tr->setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 5453 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tag = makeBackupTag(tagName.toString());
															#line 5454 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<UidAndAbortedFlagT> __when_expr_0 = tag.getOrThrow(ryw_tr);
															#line 5454 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<AtomicRestoreActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 49581 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1loopBody1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
			static_cast<AtomicRestoreActor*>(this)->actor_wait_state = 1;
															#line 5454 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< AtomicRestoreActor, 0, UidAndAbortedFlagT >*>(static_cast<AtomicRestoreActor*>(this)));
															#line 49586 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1break1(int loopDepth) 
	{
		try {
			return a_body1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 5464 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_2 = ryw_tr->onError(e);
															#line 5464 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<AtomicRestoreActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 49623 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1Catch1when1(__when_expr_2.get(), loopDepth); };
			static_cast<AtomicRestoreActor*>(this)->actor_wait_state = 3;
															#line 5464 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< AtomicRestoreActor, 2, Void >*>(static_cast<AtomicRestoreActor*>(this)));
															#line 49628 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(UidAndAbortedFlagT const& uidFlag,int loopDepth) 
	{
															#line 5455 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		backupConfig = BackupConfig(uidFlag.first);
															#line 5456 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<EBackupState> __when_expr_1 = backupConfig.stateEnum().getOrThrow(ryw_tr);
															#line 5456 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<AtomicRestoreActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 49647 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
		static_cast<AtomicRestoreActor*>(this)->actor_wait_state = 2;
															#line 5456 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< AtomicRestoreActor, 1, EBackupState >*>(static_cast<AtomicRestoreActor*>(this)));
															#line 49652 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2(UidAndAbortedFlagT && uidFlag,int loopDepth) 
	{
															#line 5455 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		backupConfig = BackupConfig(uidFlag.first);
															#line 5456 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<EBackupState> __when_expr_1 = backupConfig.stateEnum().getOrThrow(ryw_tr);
															#line 5456 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<AtomicRestoreActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 49665 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
		static_cast<AtomicRestoreActor*>(this)->actor_wait_state = 2;
															#line 5456 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< AtomicRestoreActor, 1, EBackupState >*>(static_cast<AtomicRestoreActor*>(this)));
															#line 49670 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1when1(UidAndAbortedFlagT const& uidFlag,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(uidFlag, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(UidAndAbortedFlagT && uidFlag,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(std::move(uidFlag), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<AtomicRestoreActor*>(this)->actor_wait_state > 0) static_cast<AtomicRestoreActor*>(this)->actor_wait_state = 0;
		static_cast<AtomicRestoreActor*>(this)->ActorCallback< AtomicRestoreActor, 0, UidAndAbortedFlagT >::remove();

	}
	void a_callback_fire(ActorCallback< AtomicRestoreActor, 0, UidAndAbortedFlagT >*,UidAndAbortedFlagT const& value) 
	{
		fdb_probe_actor_enter("atomicRestore", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("atomicRestore", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< AtomicRestoreActor, 0, UidAndAbortedFlagT >*,UidAndAbortedFlagT && value) 
	{
		fdb_probe_actor_enter("atomicRestore", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("atomicRestore", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< AtomicRestoreActor, 0, UidAndAbortedFlagT >*,Error err) 
	{
		fdb_probe_actor_enter("atomicRestore", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("atomicRestore", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1cont3(int loopDepth) 
	{
															#line 5458 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (status != EBackupState::STATE_RUNNING_DIFFERENTIAL)
															#line 49742 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 5459 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			return a_body1loopBody1Catch1(backup_duplicate(), loopDepth);
															#line 49746 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
		return a_body1break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(EBackupState const& __status,int loopDepth) 
	{
															#line 5456 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		status = __status;
															#line 49756 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1loopBody1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(EBackupState && __status,int loopDepth) 
	{
		status = std::move(__status);
		loopDepth = a_body1loopBody1cont3(loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<AtomicRestoreActor*>(this)->actor_wait_state > 0) static_cast<AtomicRestoreActor*>(this)->actor_wait_state = 0;
		static_cast<AtomicRestoreActor*>(this)->ActorCallback< AtomicRestoreActor, 1, EBackupState >::remove();

	}
	void a_callback_fire(ActorCallback< AtomicRestoreActor, 1, EBackupState >*,EBackupState const& value) 
	{
		fdb_probe_actor_enter("atomicRestore", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("atomicRestore", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< AtomicRestoreActor, 1, EBackupState >*,EBackupState && value) 
	{
		fdb_probe_actor_enter("atomicRestore", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("atomicRestore", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< AtomicRestoreActor, 1, EBackupState >*,Error err) 
	{
		fdb_probe_actor_enter("atomicRestore", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("atomicRestore", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<AtomicRestoreActor*>(this)->actor_wait_state > 0) static_cast<AtomicRestoreActor*>(this)->actor_wait_state = 0;
		static_cast<AtomicRestoreActor*>(this)->ActorCallback< AtomicRestoreActor, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< AtomicRestoreActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("atomicRestore", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("atomicRestore", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< AtomicRestoreActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("atomicRestore", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("atomicRestore", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< AtomicRestoreActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("atomicRestore", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("atomicRestore", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1cont2(int loopDepth) 
	{
															#line 5487 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		ryw_tr->reset();
															#line 5488 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		;
															#line 49900 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont2loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1cont1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1(int loopDepth) 
	{
		try {
															#line 5476 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr.addWriteConflictRange(backupConfig.snapshotRangeDispatchMap().space.range());
															#line 5477 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_3 = lockDatabase(&tr, randomUid);
															#line 5477 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<AtomicRestoreActor*>(this)->actor_wait_state < 0) return a_body1cont1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 49921 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1cont1loopBody1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1cont1loopBody1when1(__when_expr_3.get(), loopDepth); };
			static_cast<AtomicRestoreActor*>(this)->actor_wait_state = 4;
															#line 5477 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< AtomicRestoreActor, 3, Void >*>(static_cast<AtomicRestoreActor*>(this)));
															#line 49926 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1cont1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1cont1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont1break1(int loopDepth) 
	{
		try {
			return a_body1cont2(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1cont1loopHead1(0);

		return loopDepth;
	}
	int a_body1cont1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 5483 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_5 = tr.onError(e);
															#line 5483 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<AtomicRestoreActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 49963 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_5.isReady()) { if (__when_expr_5.isError()) return a_body1Catch1(__when_expr_5.getError(), std::max(0, loopDepth - 1)); else return a_body1cont1loopBody1Catch1when1(__when_expr_5.get(), loopDepth); };
			static_cast<AtomicRestoreActor*>(this)->actor_wait_state = 6;
															#line 5483 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_5.addCallbackAndClear(static_cast<ActorCallback< AtomicRestoreActor, 5, Void >*>(static_cast<AtomicRestoreActor*>(this)));
															#line 49968 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1cont1loopBody1cont2(Void const& _,int loopDepth) 
	{
															#line 5478 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_4 = tr.commit();
															#line 5478 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<AtomicRestoreActor*>(this)->actor_wait_state < 0) return a_body1cont1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 49985 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1cont1loopBody1Catch1(__when_expr_4.getError(), loopDepth); else return a_body1cont1loopBody1cont2when1(__when_expr_4.get(), loopDepth); };
		static_cast<AtomicRestoreActor*>(this)->actor_wait_state = 5;
															#line 5478 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< AtomicRestoreActor, 4, Void >*>(static_cast<AtomicRestoreActor*>(this)));
															#line 49990 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1loopBody1cont2(Void && _,int loopDepth) 
	{
															#line 5478 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_4 = tr.commit();
															#line 5478 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<AtomicRestoreActor*>(this)->actor_wait_state < 0) return a_body1cont1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 50001 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1cont1loopBody1Catch1(__when_expr_4.getError(), loopDepth); else return a_body1cont1loopBody1cont2when1(__when_expr_4.get(), loopDepth); };
		static_cast<AtomicRestoreActor*>(this)->actor_wait_state = 5;
															#line 5478 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< AtomicRestoreActor, 4, Void >*>(static_cast<AtomicRestoreActor*>(this)));
															#line 50006 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<AtomicRestoreActor*>(this)->actor_wait_state > 0) static_cast<AtomicRestoreActor*>(this)->actor_wait_state = 0;
		static_cast<AtomicRestoreActor*>(this)->ActorCallback< AtomicRestoreActor, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< AtomicRestoreActor, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("atomicRestore", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("atomicRestore", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< AtomicRestoreActor, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("atomicRestore", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("atomicRestore", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< AtomicRestoreActor, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("atomicRestore", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("atomicRestore", reinterpret_cast<unsigned long>(this), 3);

	}
	int a_body1cont1loopBody1cont3(Void const& _,int loopDepth) 
	{
															#line 5479 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		commitVersion = tr.getCommittedVersion();
															#line 5480 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent("AS_Locked").detail("CommitVer", commitVersion);
															#line 50080 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		return a_body1cont1break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1cont1loopBody1cont3(Void && _,int loopDepth) 
	{
															#line 5479 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		commitVersion = tr.getCommittedVersion();
															#line 5480 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent("AS_Locked").detail("CommitVer", commitVersion);
															#line 50091 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		return a_body1cont1break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1cont1loopBody1cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont3(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont3(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose5() 
	{
		if (static_cast<AtomicRestoreActor*>(this)->actor_wait_state > 0) static_cast<AtomicRestoreActor*>(this)->actor_wait_state = 0;
		static_cast<AtomicRestoreActor*>(this)->ActorCallback< AtomicRestoreActor, 4, Void >::remove();

	}
	void a_callback_fire(ActorCallback< AtomicRestoreActor, 4, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("atomicRestore", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont1loopBody1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("atomicRestore", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_fire(ActorCallback< AtomicRestoreActor, 4, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("atomicRestore", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont1loopBody1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("atomicRestore", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_error(ActorCallback< AtomicRestoreActor, 4, Void >*,Error err) 
	{
		fdb_probe_actor_enter("atomicRestore", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("atomicRestore", reinterpret_cast<unsigned long>(this), 4);

	}
	int a_body1cont1loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose6() 
	{
		if (static_cast<AtomicRestoreActor*>(this)->actor_wait_state > 0) static_cast<AtomicRestoreActor*>(this)->actor_wait_state = 0;
		static_cast<AtomicRestoreActor*>(this)->ActorCallback< AtomicRestoreActor, 5, Void >::remove();

	}
	void a_callback_fire(ActorCallback< AtomicRestoreActor, 5, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("atomicRestore", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1cont1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("atomicRestore", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_fire(ActorCallback< AtomicRestoreActor, 5, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("atomicRestore", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1cont1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("atomicRestore", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_error(ActorCallback< AtomicRestoreActor, 5, Void >*,Error err) 
	{
		fdb_probe_actor_enter("atomicRestore", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("atomicRestore", reinterpret_cast<unsigned long>(this), 5);

	}
	int a_body1cont3(int loopDepth) 
	{
															#line 5503 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		ryw_tr->reset();
															#line 5504 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		;
															#line 50240 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont3loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1cont2loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1cont2loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1cont2loopBody1(int loopDepth) 
	{
		try {
															#line 5490 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Optional<Version>> __when_expr_6 = backupConfig.getLatestRestorableVersion(ryw_tr);
															#line 5490 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<AtomicRestoreActor*>(this)->actor_wait_state < 0) return a_body1cont2loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 50259 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_6.isReady()) { if (__when_expr_6.isError()) return a_body1cont2loopBody1Catch1(__when_expr_6.getError(), loopDepth); else return a_body1cont2loopBody1when1(__when_expr_6.get(), loopDepth); };
			static_cast<AtomicRestoreActor*>(this)->actor_wait_state = 7;
															#line 5490 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_6.addCallbackAndClear(static_cast<ActorCallback< AtomicRestoreActor, 6, Optional<Version> >*>(static_cast<AtomicRestoreActor*>(this)));
															#line 50264 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1cont2loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1cont2loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont2break1(int loopDepth) 
	{
		try {
			return a_body1cont3(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont2loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1cont2loopHead1(0);

		return loopDepth;
	}
	int a_body1cont2loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 5499 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_8 = ryw_tr->onError(e);
															#line 5499 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<AtomicRestoreActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 50301 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_8.isReady()) { if (__when_expr_8.isError()) return a_body1Catch1(__when_expr_8.getError(), std::max(0, loopDepth - 1)); else return a_body1cont2loopBody1Catch1when1(__when_expr_8.get(), loopDepth); };
			static_cast<AtomicRestoreActor*>(this)->actor_wait_state = 9;
															#line 5499 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_8.addCallbackAndClear(static_cast<ActorCallback< AtomicRestoreActor, 8, Void >*>(static_cast<AtomicRestoreActor*>(this)));
															#line 50306 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1cont2loopBody1cont2(Optional<Version> const& restoreVersion,int loopDepth) 
	{
															#line 5491 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (restoreVersion.present() && restoreVersion.get() >= commitVersion)
															#line 50321 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 5492 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			TraceEvent("AS_RestoreVersion").detail("RestoreVer", restoreVersion.get());
															#line 50325 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			return a_body1cont2break1(loopDepth==0?0:loopDepth-1); // break
		}
		else
		{
															#line 5495 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			ryw_tr->reset();
															#line 5496 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_7 = delay(0.2);
															#line 5496 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<AtomicRestoreActor*>(this)->actor_wait_state < 0) return a_body1cont2loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 50336 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_7.isReady()) { if (__when_expr_7.isError()) return a_body1cont2loopBody1Catch1(__when_expr_7.getError(), loopDepth); else return a_body1cont2loopBody1cont2when1(__when_expr_7.get(), loopDepth); };
			static_cast<AtomicRestoreActor*>(this)->actor_wait_state = 8;
															#line 5496 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_7.addCallbackAndClear(static_cast<ActorCallback< AtomicRestoreActor, 7, Void >*>(static_cast<AtomicRestoreActor*>(this)));
															#line 50341 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}

		return loopDepth;
	}
	int a_body1cont2loopBody1cont2(Optional<Version> && restoreVersion,int loopDepth) 
	{
															#line 5491 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (restoreVersion.present() && restoreVersion.get() >= commitVersion)
															#line 50351 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 5492 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			TraceEvent("AS_RestoreVersion").detail("RestoreVer", restoreVersion.get());
															#line 50355 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			return a_body1cont2break1(loopDepth==0?0:loopDepth-1); // break
		}
		else
		{
															#line 5495 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			ryw_tr->reset();
															#line 5496 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_7 = delay(0.2);
															#line 5496 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<AtomicRestoreActor*>(this)->actor_wait_state < 0) return a_body1cont2loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 50366 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_7.isReady()) { if (__when_expr_7.isError()) return a_body1cont2loopBody1Catch1(__when_expr_7.getError(), loopDepth); else return a_body1cont2loopBody1cont2when1(__when_expr_7.get(), loopDepth); };
			static_cast<AtomicRestoreActor*>(this)->actor_wait_state = 8;
															#line 5496 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_7.addCallbackAndClear(static_cast<ActorCallback< AtomicRestoreActor, 7, Void >*>(static_cast<AtomicRestoreActor*>(this)));
															#line 50371 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}

		return loopDepth;
	}
	int a_body1cont2loopBody1when1(Optional<Version> const& restoreVersion,int loopDepth) 
	{
		loopDepth = a_body1cont2loopBody1cont2(restoreVersion, loopDepth);

		return loopDepth;
	}
	int a_body1cont2loopBody1when1(Optional<Version> && restoreVersion,int loopDepth) 
	{
		loopDepth = a_body1cont2loopBody1cont2(std::move(restoreVersion), loopDepth);

		return loopDepth;
	}
	void a_exitChoose7() 
	{
		if (static_cast<AtomicRestoreActor*>(this)->actor_wait_state > 0) static_cast<AtomicRestoreActor*>(this)->actor_wait_state = 0;
		static_cast<AtomicRestoreActor*>(this)->ActorCallback< AtomicRestoreActor, 6, Optional<Version> >::remove();

	}
	void a_callback_fire(ActorCallback< AtomicRestoreActor, 6, Optional<Version> >*,Optional<Version> const& value) 
	{
		fdb_probe_actor_enter("atomicRestore", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1cont2loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont2loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont2loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("atomicRestore", reinterpret_cast<unsigned long>(this), 6);

	}
	void a_callback_fire(ActorCallback< AtomicRestoreActor, 6, Optional<Version> >*,Optional<Version> && value) 
	{
		fdb_probe_actor_enter("atomicRestore", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1cont2loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont2loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont2loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("atomicRestore", reinterpret_cast<unsigned long>(this), 6);

	}
	void a_callback_error(ActorCallback< AtomicRestoreActor, 6, Optional<Version> >*,Error err) 
	{
		fdb_probe_actor_enter("atomicRestore", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1cont2loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont2loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont2loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("atomicRestore", reinterpret_cast<unsigned long>(this), 6);

	}
	int a_body1cont2loopBody1cont3(int loopDepth) 
	{
		loopDepth = a_body1cont2loopBody1cont6(loopDepth);

		return loopDepth;
	}
	int a_body1cont2loopBody1cont5(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont2loopBody1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1cont2loopBody1cont5(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont2loopBody1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1cont2loopBody1cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont2loopBody1cont5(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont2loopBody1cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont2loopBody1cont5(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose8() 
	{
		if (static_cast<AtomicRestoreActor*>(this)->actor_wait_state > 0) static_cast<AtomicRestoreActor*>(this)->actor_wait_state = 0;
		static_cast<AtomicRestoreActor*>(this)->ActorCallback< AtomicRestoreActor, 7, Void >::remove();

	}
	void a_callback_fire(ActorCallback< AtomicRestoreActor, 7, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("atomicRestore", reinterpret_cast<unsigned long>(this), 7);
		a_exitChoose8();
		try {
			a_body1cont2loopBody1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont2loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont2loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("atomicRestore", reinterpret_cast<unsigned long>(this), 7);

	}
	void a_callback_fire(ActorCallback< AtomicRestoreActor, 7, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("atomicRestore", reinterpret_cast<unsigned long>(this), 7);
		a_exitChoose8();
		try {
			a_body1cont2loopBody1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont2loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont2loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("atomicRestore", reinterpret_cast<unsigned long>(this), 7);

	}
	void a_callback_error(ActorCallback< AtomicRestoreActor, 7, Void >*,Error err) 
	{
		fdb_probe_actor_enter("atomicRestore", reinterpret_cast<unsigned long>(this), 7);
		a_exitChoose8();
		try {
			a_body1cont2loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont2loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont2loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("atomicRestore", reinterpret_cast<unsigned long>(this), 7);

	}
	int a_body1cont2loopBody1cont6(int loopDepth) 
	{
		try {
			loopDepth = a_body1cont2loopBody1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1cont2loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont2loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont2loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont2loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont2loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont2loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont2loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont2loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose9() 
	{
		if (static_cast<AtomicRestoreActor*>(this)->actor_wait_state > 0) static_cast<AtomicRestoreActor*>(this)->actor_wait_state = 0;
		static_cast<AtomicRestoreActor*>(this)->ActorCallback< AtomicRestoreActor, 8, Void >::remove();

	}
	void a_callback_fire(ActorCallback< AtomicRestoreActor, 8, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("atomicRestore", reinterpret_cast<unsigned long>(this), 8);
		a_exitChoose9();
		try {
			a_body1cont2loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("atomicRestore", reinterpret_cast<unsigned long>(this), 8);

	}
	void a_callback_fire(ActorCallback< AtomicRestoreActor, 8, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("atomicRestore", reinterpret_cast<unsigned long>(this), 8);
		a_exitChoose9();
		try {
			a_body1cont2loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("atomicRestore", reinterpret_cast<unsigned long>(this), 8);

	}
	void a_callback_error(ActorCallback< AtomicRestoreActor, 8, Void >*,Error err) 
	{
		fdb_probe_actor_enter("atomicRestore", reinterpret_cast<unsigned long>(this), 8);
		a_exitChoose9();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("atomicRestore", reinterpret_cast<unsigned long>(this), 8);

	}
	int a_body1cont4(int loopDepth) 
	{
															#line 5518 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_12 = success(waitBackup(backupAgent, cx, tagName.toString(), StopWhenDone::True));
															#line 5518 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<AtomicRestoreActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 50615 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_12.isReady()) { if (__when_expr_12.isError()) return a_body1Catch1(__when_expr_12.getError(), loopDepth); else return a_body1cont4when1(__when_expr_12.get(), loopDepth); };
		static_cast<AtomicRestoreActor*>(this)->actor_wait_state = 13;
															#line 5518 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_12.addCallbackAndClear(static_cast<ActorCallback< AtomicRestoreActor, 12, Void >*>(static_cast<AtomicRestoreActor*>(this)));
															#line 50620 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont3loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1cont3loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1(int loopDepth) 
	{
		try {
															#line 5506 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_9 = discontinueBackup(backupAgent, ryw_tr, tagName);
															#line 5506 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<AtomicRestoreActor*>(this)->actor_wait_state < 0) return a_body1cont3loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 50639 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_9.isReady()) { if (__when_expr_9.isError()) return a_body1cont3loopBody1Catch1(__when_expr_9.getError(), loopDepth); else return a_body1cont3loopBody1when1(__when_expr_9.get(), loopDepth); };
			static_cast<AtomicRestoreActor*>(this)->actor_wait_state = 10;
															#line 5506 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_9.addCallbackAndClear(static_cast<ActorCallback< AtomicRestoreActor, 9, Void >*>(static_cast<AtomicRestoreActor*>(this)));
															#line 50644 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1cont3loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1cont3loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont3break1(int loopDepth) 
	{
		try {
			return a_body1cont4(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont3loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1cont3loopHead1(0);

		return loopDepth;
	}
	int a_body1cont3loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 5511 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (e.code() == error_code_backup_unneeded || e.code() == error_code_backup_duplicate)
															#line 50679 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			{
				return a_body1cont3break1(loopDepth==0?0:loopDepth-1); // break
			}
															#line 5514 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_11 = ryw_tr->onError(e);
															#line 5514 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<AtomicRestoreActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 50687 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_11.isReady()) { if (__when_expr_11.isError()) return a_body1Catch1(__when_expr_11.getError(), std::max(0, loopDepth - 1)); else return a_body1cont3loopBody1Catch1when1(__when_expr_11.get(), loopDepth); };
			static_cast<AtomicRestoreActor*>(this)->actor_wait_state = 12;
															#line 5514 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_11.addCallbackAndClear(static_cast<ActorCallback< AtomicRestoreActor, 11, Void >*>(static_cast<AtomicRestoreActor*>(this)));
															#line 50692 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1cont3loopBody1cont2(Void const& _,int loopDepth) 
	{
															#line 5507 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_10 = ryw_tr->commit();
															#line 5507 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<AtomicRestoreActor*>(this)->actor_wait_state < 0) return a_body1cont3loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 50709 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_10.isReady()) { if (__when_expr_10.isError()) return a_body1cont3loopBody1Catch1(__when_expr_10.getError(), loopDepth); else return a_body1cont3loopBody1cont2when1(__when_expr_10.get(), loopDepth); };
		static_cast<AtomicRestoreActor*>(this)->actor_wait_state = 11;
															#line 5507 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_10.addCallbackAndClear(static_cast<ActorCallback< AtomicRestoreActor, 10, Void >*>(static_cast<AtomicRestoreActor*>(this)));
															#line 50714 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont3loopBody1cont2(Void && _,int loopDepth) 
	{
															#line 5507 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_10 = ryw_tr->commit();
															#line 5507 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<AtomicRestoreActor*>(this)->actor_wait_state < 0) return a_body1cont3loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 50725 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_10.isReady()) { if (__when_expr_10.isError()) return a_body1cont3loopBody1Catch1(__when_expr_10.getError(), loopDepth); else return a_body1cont3loopBody1cont2when1(__when_expr_10.get(), loopDepth); };
		static_cast<AtomicRestoreActor*>(this)->actor_wait_state = 11;
															#line 5507 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_10.addCallbackAndClear(static_cast<ActorCallback< AtomicRestoreActor, 10, Void >*>(static_cast<AtomicRestoreActor*>(this)));
															#line 50730 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont3loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose10() 
	{
		if (static_cast<AtomicRestoreActor*>(this)->actor_wait_state > 0) static_cast<AtomicRestoreActor*>(this)->actor_wait_state = 0;
		static_cast<AtomicRestoreActor*>(this)->ActorCallback< AtomicRestoreActor, 9, Void >::remove();

	}
	void a_callback_fire(ActorCallback< AtomicRestoreActor, 9, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("atomicRestore", reinterpret_cast<unsigned long>(this), 9);
		a_exitChoose10();
		try {
			a_body1cont3loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont3loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont3loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("atomicRestore", reinterpret_cast<unsigned long>(this), 9);

	}
	void a_callback_fire(ActorCallback< AtomicRestoreActor, 9, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("atomicRestore", reinterpret_cast<unsigned long>(this), 9);
		a_exitChoose10();
		try {
			a_body1cont3loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont3loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont3loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("atomicRestore", reinterpret_cast<unsigned long>(this), 9);

	}
	void a_callback_error(ActorCallback< AtomicRestoreActor, 9, Void >*,Error err) 
	{
		fdb_probe_actor_enter("atomicRestore", reinterpret_cast<unsigned long>(this), 9);
		a_exitChoose10();
		try {
			a_body1cont3loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont3loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont3loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("atomicRestore", reinterpret_cast<unsigned long>(this), 9);

	}
	int a_body1cont3loopBody1cont3(Void const& _,int loopDepth) 
	{
															#line 5508 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent("AS_DiscontinuedBackup").log();
															#line 50802 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		return a_body1cont3break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1cont3loopBody1cont3(Void && _,int loopDepth) 
	{
															#line 5508 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent("AS_DiscontinuedBackup").log();
															#line 50811 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		return a_body1cont3break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1cont3loopBody1cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1cont3(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1cont3(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose11() 
	{
		if (static_cast<AtomicRestoreActor*>(this)->actor_wait_state > 0) static_cast<AtomicRestoreActor*>(this)->actor_wait_state = 0;
		static_cast<AtomicRestoreActor*>(this)->ActorCallback< AtomicRestoreActor, 10, Void >::remove();

	}
	void a_callback_fire(ActorCallback< AtomicRestoreActor, 10, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("atomicRestore", reinterpret_cast<unsigned long>(this), 10);
		a_exitChoose11();
		try {
			a_body1cont3loopBody1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont3loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont3loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("atomicRestore", reinterpret_cast<unsigned long>(this), 10);

	}
	void a_callback_fire(ActorCallback< AtomicRestoreActor, 10, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("atomicRestore", reinterpret_cast<unsigned long>(this), 10);
		a_exitChoose11();
		try {
			a_body1cont3loopBody1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont3loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont3loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("atomicRestore", reinterpret_cast<unsigned long>(this), 10);

	}
	void a_callback_error(ActorCallback< AtomicRestoreActor, 10, Void >*,Error err) 
	{
		fdb_probe_actor_enter("atomicRestore", reinterpret_cast<unsigned long>(this), 10);
		a_exitChoose11();
		try {
			a_body1cont3loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont3loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont3loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("atomicRestore", reinterpret_cast<unsigned long>(this), 10);

	}
	int a_body1cont3loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose12() 
	{
		if (static_cast<AtomicRestoreActor*>(this)->actor_wait_state > 0) static_cast<AtomicRestoreActor*>(this)->actor_wait_state = 0;
		static_cast<AtomicRestoreActor*>(this)->ActorCallback< AtomicRestoreActor, 11, Void >::remove();

	}
	void a_callback_fire(ActorCallback< AtomicRestoreActor, 11, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("atomicRestore", reinterpret_cast<unsigned long>(this), 11);
		a_exitChoose12();
		try {
			a_body1cont3loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("atomicRestore", reinterpret_cast<unsigned long>(this), 11);

	}
	void a_callback_fire(ActorCallback< AtomicRestoreActor, 11, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("atomicRestore", reinterpret_cast<unsigned long>(this), 11);
		a_exitChoose12();
		try {
			a_body1cont3loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("atomicRestore", reinterpret_cast<unsigned long>(this), 11);

	}
	void a_callback_error(ActorCallback< AtomicRestoreActor, 11, Void >*,Error err) 
	{
		fdb_probe_actor_enter("atomicRestore", reinterpret_cast<unsigned long>(this), 11);
		a_exitChoose12();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("atomicRestore", reinterpret_cast<unsigned long>(this), 11);

	}
	int a_body1cont5(Void const& _,int loopDepth) 
	{
															#line 5519 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent("AS_BackupStopped").log();
															#line 5521 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		ryw_tr->reset();
															#line 5522 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		;
															#line 50962 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont5loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1cont5(Void && _,int loopDepth) 
	{
															#line 5519 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent("AS_BackupStopped").log();
															#line 5521 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		ryw_tr->reset();
															#line 5522 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		;
															#line 50975 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont5loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1cont4when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont5(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont4when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont5(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose13() 
	{
		if (static_cast<AtomicRestoreActor*>(this)->actor_wait_state > 0) static_cast<AtomicRestoreActor*>(this)->actor_wait_state = 0;
		static_cast<AtomicRestoreActor*>(this)->ActorCallback< AtomicRestoreActor, 12, Void >::remove();

	}
	void a_callback_fire(ActorCallback< AtomicRestoreActor, 12, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("atomicRestore", reinterpret_cast<unsigned long>(this), 12);
		a_exitChoose13();
		try {
			a_body1cont4when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("atomicRestore", reinterpret_cast<unsigned long>(this), 12);

	}
	void a_callback_fire(ActorCallback< AtomicRestoreActor, 12, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("atomicRestore", reinterpret_cast<unsigned long>(this), 12);
		a_exitChoose13();
		try {
			a_body1cont4when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("atomicRestore", reinterpret_cast<unsigned long>(this), 12);

	}
	void a_callback_error(ActorCallback< AtomicRestoreActor, 12, Void >*,Error err) 
	{
		fdb_probe_actor_enter("atomicRestore", reinterpret_cast<unsigned long>(this), 12);
		a_exitChoose13();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("atomicRestore", reinterpret_cast<unsigned long>(this), 12);

	}
	int a_body1cont6(int loopDepth) 
	{
															#line 5539 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Reference<IBackupContainer>> __when_expr_15 = backupConfig.backupContainer().getOrThrow(cx);
															#line 5539 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<AtomicRestoreActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 51049 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_15.isReady()) { if (__when_expr_15.isError()) return a_body1Catch1(__when_expr_15.getError(), loopDepth); else return a_body1cont6when1(__when_expr_15.get(), loopDepth); };
		static_cast<AtomicRestoreActor*>(this)->actor_wait_state = 16;
															#line 5539 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_15.addCallbackAndClear(static_cast<ActorCallback< AtomicRestoreActor, 15, Reference<IBackupContainer> >*>(static_cast<AtomicRestoreActor*>(this)));
															#line 51054 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont5loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1cont5loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1cont5loopBody1(int loopDepth) 
	{
		try {
															#line 5525 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			ryw_tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 5526 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			ryw_tr->setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 5527 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			for( auto& range : ranges ) {
															#line 5528 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				ryw_tr->addReadConflictRange(range);
															#line 5529 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				ryw_tr->clear(range);
															#line 51079 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			}
															#line 5531 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_13 = ryw_tr->commit();
															#line 5531 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<AtomicRestoreActor*>(this)->actor_wait_state < 0) return a_body1cont5loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 51085 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_13.isReady()) { if (__when_expr_13.isError()) return a_body1cont5loopBody1Catch1(__when_expr_13.getError(), loopDepth); else return a_body1cont5loopBody1when1(__when_expr_13.get(), loopDepth); };
			static_cast<AtomicRestoreActor*>(this)->actor_wait_state = 14;
															#line 5531 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_13.addCallbackAndClear(static_cast<ActorCallback< AtomicRestoreActor, 13, Void >*>(static_cast<AtomicRestoreActor*>(this)));
															#line 51090 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1cont5loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1cont5loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont5break1(int loopDepth) 
	{
		try {
			return a_body1cont6(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont5loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1cont5loopHead1(0);

		return loopDepth;
	}
	int a_body1cont5loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 5535 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_14 = ryw_tr->onError(e);
															#line 5535 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<AtomicRestoreActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 51127 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_14.isReady()) { if (__when_expr_14.isError()) return a_body1Catch1(__when_expr_14.getError(), std::max(0, loopDepth - 1)); else return a_body1cont5loopBody1Catch1when1(__when_expr_14.get(), loopDepth); };
			static_cast<AtomicRestoreActor*>(this)->actor_wait_state = 15;
															#line 5535 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_14.addCallbackAndClear(static_cast<ActorCallback< AtomicRestoreActor, 14, Void >*>(static_cast<AtomicRestoreActor*>(this)));
															#line 51132 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1cont5loopBody1cont2(Void const& _,int loopDepth) 
	{
															#line 5532 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent("AS_ClearedRange").log();
															#line 51147 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		return a_body1cont5break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1cont5loopBody1cont2(Void && _,int loopDepth) 
	{
															#line 5532 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent("AS_ClearedRange").log();
															#line 51156 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		return a_body1cont5break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1cont5loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont5loopBody1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont5loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont5loopBody1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose14() 
	{
		if (static_cast<AtomicRestoreActor*>(this)->actor_wait_state > 0) static_cast<AtomicRestoreActor*>(this)->actor_wait_state = 0;
		static_cast<AtomicRestoreActor*>(this)->ActorCallback< AtomicRestoreActor, 13, Void >::remove();

	}
	void a_callback_fire(ActorCallback< AtomicRestoreActor, 13, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("atomicRestore", reinterpret_cast<unsigned long>(this), 13);
		a_exitChoose14();
		try {
			a_body1cont5loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont5loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont5loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("atomicRestore", reinterpret_cast<unsigned long>(this), 13);

	}
	void a_callback_fire(ActorCallback< AtomicRestoreActor, 13, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("atomicRestore", reinterpret_cast<unsigned long>(this), 13);
		a_exitChoose14();
		try {
			a_body1cont5loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont5loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont5loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("atomicRestore", reinterpret_cast<unsigned long>(this), 13);

	}
	void a_callback_error(ActorCallback< AtomicRestoreActor, 13, Void >*,Error err) 
	{
		fdb_probe_actor_enter("atomicRestore", reinterpret_cast<unsigned long>(this), 13);
		a_exitChoose14();
		try {
			a_body1cont5loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont5loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont5loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("atomicRestore", reinterpret_cast<unsigned long>(this), 13);

	}
	int a_body1cont5loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont5loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont5loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont5loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont5loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont5loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont5loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont5loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose15() 
	{
		if (static_cast<AtomicRestoreActor*>(this)->actor_wait_state > 0) static_cast<AtomicRestoreActor*>(this)->actor_wait_state = 0;
		static_cast<AtomicRestoreActor*>(this)->ActorCallback< AtomicRestoreActor, 14, Void >::remove();

	}
	void a_callback_fire(ActorCallback< AtomicRestoreActor, 14, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("atomicRestore", reinterpret_cast<unsigned long>(this), 14);
		a_exitChoose15();
		try {
			a_body1cont5loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("atomicRestore", reinterpret_cast<unsigned long>(this), 14);

	}
	void a_callback_fire(ActorCallback< AtomicRestoreActor, 14, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("atomicRestore", reinterpret_cast<unsigned long>(this), 14);
		a_exitChoose15();
		try {
			a_body1cont5loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("atomicRestore", reinterpret_cast<unsigned long>(this), 14);

	}
	void a_callback_error(ActorCallback< AtomicRestoreActor, 14, Void >*,Error err) 
	{
		fdb_probe_actor_enter("atomicRestore", reinterpret_cast<unsigned long>(this), 14);
		a_exitChoose15();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("atomicRestore", reinterpret_cast<unsigned long>(this), 14);

	}
	int a_body1cont7(Reference<IBackupContainer> const& _bc,int loopDepth) 
	{
															#line 5540 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		Reference<IBackupContainer> bc = fileBackup::getBackupContainerWithProxy(_bc);
															#line 5542 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (fastRestore)
															#line 51305 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 5543 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			TraceEvent("AtomicParallelRestoreStartRestore").log();
															#line 5544 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			Version targetVersion = ::invalidVersion;
															#line 5545 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_16 = submitParallelRestore(cx, tagName, ranges, KeyRef(bc->getURL()), bc->getProxy(), targetVersion, LockDB::True, randomUid, addPrefix, removePrefix);
															#line 5545 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<AtomicRestoreActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 51315 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_16.isReady()) { if (__when_expr_16.isError()) return a_body1Catch1(__when_expr_16.getError(), loopDepth); else return a_body1cont7when1(__when_expr_16.get(), loopDepth); };
			static_cast<AtomicRestoreActor*>(this)->actor_wait_state = 17;
															#line 5545 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_16.addCallbackAndClear(static_cast<ActorCallback< AtomicRestoreActor, 16, Void >*>(static_cast<AtomicRestoreActor*>(this)));
															#line 51320 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
															#line 5565 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			TraceEvent("AS_StartRestore").log();
															#line 5566 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Version> __when_expr_20 = restore(backupAgent, cx, cx, tagName, KeyRef(bc->getURL()), bc->getProxy(), ranges, WaitForComplete::True, ::invalidVersion, Verbose::True, addPrefix, removePrefix, LockDB::True, OnlyApplyMutationLogs::False, InconsistentSnapshotOnly::False, ::invalidVersion, {}, randomUid);
															#line 5566 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<AtomicRestoreActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 51331 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_20.isReady()) { if (__when_expr_20.isError()) return a_body1Catch1(__when_expr_20.getError(), loopDepth); else return a_body1cont7when2(__when_expr_20.get(), loopDepth); };
			static_cast<AtomicRestoreActor*>(this)->actor_wait_state = 21;
															#line 5566 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_20.addCallbackAndClear(static_cast<ActorCallback< AtomicRestoreActor, 20, Version >*>(static_cast<AtomicRestoreActor*>(this)));
															#line 51336 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}

		return loopDepth;
	}
	int a_body1cont7(Reference<IBackupContainer> && _bc,int loopDepth) 
	{
															#line 5540 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		Reference<IBackupContainer> bc = fileBackup::getBackupContainerWithProxy(_bc);
															#line 5542 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (fastRestore)
															#line 51348 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 5543 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			TraceEvent("AtomicParallelRestoreStartRestore").log();
															#line 5544 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			Version targetVersion = ::invalidVersion;
															#line 5545 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_16 = submitParallelRestore(cx, tagName, ranges, KeyRef(bc->getURL()), bc->getProxy(), targetVersion, LockDB::True, randomUid, addPrefix, removePrefix);
															#line 5545 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<AtomicRestoreActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 51358 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_16.isReady()) { if (__when_expr_16.isError()) return a_body1Catch1(__when_expr_16.getError(), loopDepth); else return a_body1cont7when1(__when_expr_16.get(), loopDepth); };
			static_cast<AtomicRestoreActor*>(this)->actor_wait_state = 17;
															#line 5545 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_16.addCallbackAndClear(static_cast<ActorCallback< AtomicRestoreActor, 16, Void >*>(static_cast<AtomicRestoreActor*>(this)));
															#line 51363 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
															#line 5565 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			TraceEvent("AS_StartRestore").log();
															#line 5566 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Version> __when_expr_20 = restore(backupAgent, cx, cx, tagName, KeyRef(bc->getURL()), bc->getProxy(), ranges, WaitForComplete::True, ::invalidVersion, Verbose::True, addPrefix, removePrefix, LockDB::True, OnlyApplyMutationLogs::False, InconsistentSnapshotOnly::False, ::invalidVersion, {}, randomUid);
															#line 5566 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<AtomicRestoreActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 51374 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_20.isReady()) { if (__when_expr_20.isError()) return a_body1Catch1(__when_expr_20.getError(), loopDepth); else return a_body1cont7when2(__when_expr_20.get(), loopDepth); };
			static_cast<AtomicRestoreActor*>(this)->actor_wait_state = 21;
															#line 5566 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_20.addCallbackAndClear(static_cast<ActorCallback< AtomicRestoreActor, 20, Version >*>(static_cast<AtomicRestoreActor*>(this)));
															#line 51379 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}

		return loopDepth;
	}
	int a_body1cont6when1(Reference<IBackupContainer> const& _bc,int loopDepth) 
	{
		loopDepth = a_body1cont7(_bc, loopDepth);

		return loopDepth;
	}
	int a_body1cont6when1(Reference<IBackupContainer> && _bc,int loopDepth) 
	{
		loopDepth = a_body1cont7(std::move(_bc), loopDepth);

		return loopDepth;
	}
	void a_exitChoose16() 
	{
		if (static_cast<AtomicRestoreActor*>(this)->actor_wait_state > 0) static_cast<AtomicRestoreActor*>(this)->actor_wait_state = 0;
		static_cast<AtomicRestoreActor*>(this)->ActorCallback< AtomicRestoreActor, 15, Reference<IBackupContainer> >::remove();

	}
	void a_callback_fire(ActorCallback< AtomicRestoreActor, 15, Reference<IBackupContainer> >*,Reference<IBackupContainer> const& value) 
	{
		fdb_probe_actor_enter("atomicRestore", reinterpret_cast<unsigned long>(this), 15);
		a_exitChoose16();
		try {
			a_body1cont6when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("atomicRestore", reinterpret_cast<unsigned long>(this), 15);

	}
	void a_callback_fire(ActorCallback< AtomicRestoreActor, 15, Reference<IBackupContainer> >*,Reference<IBackupContainer> && value) 
	{
		fdb_probe_actor_enter("atomicRestore", reinterpret_cast<unsigned long>(this), 15);
		a_exitChoose16();
		try {
			a_body1cont6when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("atomicRestore", reinterpret_cast<unsigned long>(this), 15);

	}
	void a_callback_error(ActorCallback< AtomicRestoreActor, 15, Reference<IBackupContainer> >*,Error err) 
	{
		fdb_probe_actor_enter("atomicRestore", reinterpret_cast<unsigned long>(this), 15);
		a_exitChoose16();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("atomicRestore", reinterpret_cast<unsigned long>(this), 15);

	}
	int a_body1cont9(Void const& _,int loopDepth) 
	{
															#line 5555 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		hasPrefix = (addPrefix.size() > 0 || removePrefix.size() > 0);
															#line 5556 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent("AtomicParallelRestoreWaitForRestoreFinish").detail("HasPrefix", hasPrefix);
															#line 5557 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_17 = parallelRestoreFinish(cx, randomUid, UnlockDB{ !hasPrefix });
															#line 5557 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<AtomicRestoreActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 51458 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_17.isReady()) { if (__when_expr_17.isError()) return a_body1Catch1(__when_expr_17.getError(), loopDepth); else return a_body1cont9when1(__when_expr_17.get(), loopDepth); };
		static_cast<AtomicRestoreActor*>(this)->actor_wait_state = 18;
															#line 5557 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_17.addCallbackAndClear(static_cast<ActorCallback< AtomicRestoreActor, 17, Void >*>(static_cast<AtomicRestoreActor*>(this)));
															#line 51463 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont9(Void && _,int loopDepth) 
	{
															#line 5555 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		hasPrefix = (addPrefix.size() > 0 || removePrefix.size() > 0);
															#line 5556 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent("AtomicParallelRestoreWaitForRestoreFinish").detail("HasPrefix", hasPrefix);
															#line 5557 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_17 = parallelRestoreFinish(cx, randomUid, UnlockDB{ !hasPrefix });
															#line 5557 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<AtomicRestoreActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 51478 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_17.isReady()) { if (__when_expr_17.isError()) return a_body1Catch1(__when_expr_17.getError(), loopDepth); else return a_body1cont9when1(__when_expr_17.get(), loopDepth); };
		static_cast<AtomicRestoreActor*>(this)->actor_wait_state = 18;
															#line 5557 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_17.addCallbackAndClear(static_cast<ActorCallback< AtomicRestoreActor, 17, Void >*>(static_cast<AtomicRestoreActor*>(this)));
															#line 51483 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont7when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont9(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont7when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont9(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose17() 
	{
		if (static_cast<AtomicRestoreActor*>(this)->actor_wait_state > 0) static_cast<AtomicRestoreActor*>(this)->actor_wait_state = 0;
		static_cast<AtomicRestoreActor*>(this)->ActorCallback< AtomicRestoreActor, 16, Void >::remove();

	}
	void a_callback_fire(ActorCallback< AtomicRestoreActor, 16, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("atomicRestore", reinterpret_cast<unsigned long>(this), 16);
		a_exitChoose17();
		try {
			a_body1cont7when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("atomicRestore", reinterpret_cast<unsigned long>(this), 16);

	}
	void a_callback_fire(ActorCallback< AtomicRestoreActor, 16, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("atomicRestore", reinterpret_cast<unsigned long>(this), 16);
		a_exitChoose17();
		try {
			a_body1cont7when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("atomicRestore", reinterpret_cast<unsigned long>(this), 16);

	}
	void a_callback_error(ActorCallback< AtomicRestoreActor, 16, Void >*,Error err) 
	{
		fdb_probe_actor_enter("atomicRestore", reinterpret_cast<unsigned long>(this), 16);
		a_exitChoose17();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("atomicRestore", reinterpret_cast<unsigned long>(this), 16);

	}
	int a_body1cont10(Void const& _,int loopDepth) 
	{
															#line 5559 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (hasPrefix)
															#line 51555 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 5560 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_18 = transformRestoredDatabase(cx, ranges, addPrefix, removePrefix);
															#line 5560 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<AtomicRestoreActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 51561 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_18.isReady()) { if (__when_expr_18.isError()) return a_body1Catch1(__when_expr_18.getError(), loopDepth); else return a_body1cont10when1(__when_expr_18.get(), loopDepth); };
			static_cast<AtomicRestoreActor*>(this)->actor_wait_state = 19;
															#line 5560 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_18.addCallbackAndClear(static_cast<ActorCallback< AtomicRestoreActor, 18, Void >*>(static_cast<AtomicRestoreActor*>(this)));
															#line 51566 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1cont10cont1(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont10(Void && _,int loopDepth) 
	{
															#line 5559 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (hasPrefix)
															#line 51580 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
															#line 5560 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_18 = transformRestoredDatabase(cx, ranges, addPrefix, removePrefix);
															#line 5560 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<AtomicRestoreActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 51586 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_18.isReady()) { if (__when_expr_18.isError()) return a_body1Catch1(__when_expr_18.getError(), loopDepth); else return a_body1cont10when1(__when_expr_18.get(), loopDepth); };
			static_cast<AtomicRestoreActor*>(this)->actor_wait_state = 19;
															#line 5560 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_18.addCallbackAndClear(static_cast<ActorCallback< AtomicRestoreActor, 18, Void >*>(static_cast<AtomicRestoreActor*>(this)));
															#line 51591 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1cont10cont1(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont9when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont10(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont9when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont10(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose18() 
	{
		if (static_cast<AtomicRestoreActor*>(this)->actor_wait_state > 0) static_cast<AtomicRestoreActor*>(this)->actor_wait_state = 0;
		static_cast<AtomicRestoreActor*>(this)->ActorCallback< AtomicRestoreActor, 17, Void >::remove();

	}
	void a_callback_fire(ActorCallback< AtomicRestoreActor, 17, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("atomicRestore", reinterpret_cast<unsigned long>(this), 17);
		a_exitChoose18();
		try {
			a_body1cont9when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("atomicRestore", reinterpret_cast<unsigned long>(this), 17);

	}
	void a_callback_fire(ActorCallback< AtomicRestoreActor, 17, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("atomicRestore", reinterpret_cast<unsigned long>(this), 17);
		a_exitChoose18();
		try {
			a_body1cont9when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("atomicRestore", reinterpret_cast<unsigned long>(this), 17);

	}
	void a_callback_error(ActorCallback< AtomicRestoreActor, 17, Void >*,Error err) 
	{
		fdb_probe_actor_enter("atomicRestore", reinterpret_cast<unsigned long>(this), 17);
		a_exitChoose18();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("atomicRestore", reinterpret_cast<unsigned long>(this), 17);

	}
	int a_body1cont10cont1(int loopDepth) 
	{
															#line 5563 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<AtomicRestoreActor*>(this)->SAV<Version>::futures) { (void)(-1); this->~AtomicRestoreActorState(); static_cast<AtomicRestoreActor*>(this)->destroy(); return 0; }
															#line 51668 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<AtomicRestoreActor*>(this)->SAV< Version >::value()) Version(-1);
		this->~AtomicRestoreActorState();
		static_cast<AtomicRestoreActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont10cont2(Void const& _,int loopDepth) 
	{
															#line 5561 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_19 = unlockDatabase(cx, randomUid);
															#line 5561 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<AtomicRestoreActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 51682 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_19.isReady()) { if (__when_expr_19.isError()) return a_body1Catch1(__when_expr_19.getError(), loopDepth); else return a_body1cont10cont2when1(__when_expr_19.get(), loopDepth); };
		static_cast<AtomicRestoreActor*>(this)->actor_wait_state = 20;
															#line 5561 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_19.addCallbackAndClear(static_cast<ActorCallback< AtomicRestoreActor, 19, Void >*>(static_cast<AtomicRestoreActor*>(this)));
															#line 51687 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont10cont2(Void && _,int loopDepth) 
	{
															#line 5561 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_19 = unlockDatabase(cx, randomUid);
															#line 5561 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<AtomicRestoreActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 51698 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_19.isReady()) { if (__when_expr_19.isError()) return a_body1Catch1(__when_expr_19.getError(), loopDepth); else return a_body1cont10cont2when1(__when_expr_19.get(), loopDepth); };
		static_cast<AtomicRestoreActor*>(this)->actor_wait_state = 20;
															#line 5561 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_19.addCallbackAndClear(static_cast<ActorCallback< AtomicRestoreActor, 19, Void >*>(static_cast<AtomicRestoreActor*>(this)));
															#line 51703 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont10when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont10cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont10when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont10cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose19() 
	{
		if (static_cast<AtomicRestoreActor*>(this)->actor_wait_state > 0) static_cast<AtomicRestoreActor*>(this)->actor_wait_state = 0;
		static_cast<AtomicRestoreActor*>(this)->ActorCallback< AtomicRestoreActor, 18, Void >::remove();

	}
	void a_callback_fire(ActorCallback< AtomicRestoreActor, 18, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("atomicRestore", reinterpret_cast<unsigned long>(this), 18);
		a_exitChoose19();
		try {
			a_body1cont10when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("atomicRestore", reinterpret_cast<unsigned long>(this), 18);

	}
	void a_callback_fire(ActorCallback< AtomicRestoreActor, 18, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("atomicRestore", reinterpret_cast<unsigned long>(this), 18);
		a_exitChoose19();
		try {
			a_body1cont10when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("atomicRestore", reinterpret_cast<unsigned long>(this), 18);

	}
	void a_callback_error(ActorCallback< AtomicRestoreActor, 18, Void >*,Error err) 
	{
		fdb_probe_actor_enter("atomicRestore", reinterpret_cast<unsigned long>(this), 18);
		a_exitChoose19();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("atomicRestore", reinterpret_cast<unsigned long>(this), 18);

	}
	int a_body1cont10cont3(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont10cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont10cont3(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont10cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont10cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont10cont3(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont10cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont10cont3(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose20() 
	{
		if (static_cast<AtomicRestoreActor*>(this)->actor_wait_state > 0) static_cast<AtomicRestoreActor*>(this)->actor_wait_state = 0;
		static_cast<AtomicRestoreActor*>(this)->ActorCallback< AtomicRestoreActor, 19, Void >::remove();

	}
	void a_callback_fire(ActorCallback< AtomicRestoreActor, 19, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("atomicRestore", reinterpret_cast<unsigned long>(this), 19);
		a_exitChoose20();
		try {
			a_body1cont10cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("atomicRestore", reinterpret_cast<unsigned long>(this), 19);

	}
	void a_callback_fire(ActorCallback< AtomicRestoreActor, 19, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("atomicRestore", reinterpret_cast<unsigned long>(this), 19);
		a_exitChoose20();
		try {
			a_body1cont10cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("atomicRestore", reinterpret_cast<unsigned long>(this), 19);

	}
	void a_callback_error(ActorCallback< AtomicRestoreActor, 19, Void >*,Error err) 
	{
		fdb_probe_actor_enter("atomicRestore", reinterpret_cast<unsigned long>(this), 19);
		a_exitChoose20();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("atomicRestore", reinterpret_cast<unsigned long>(this), 19);

	}
	int a_body1cont11(Version const& ver,int loopDepth) 
	{
															#line 5584 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<AtomicRestoreActor*>(this)->SAV<Version>::futures) { (void)(ver); this->~AtomicRestoreActorState(); static_cast<AtomicRestoreActor*>(this)->destroy(); return 0; }
															#line 51850 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<AtomicRestoreActor*>(this)->SAV< Version >::value()) Version(ver);
		this->~AtomicRestoreActorState();
		static_cast<AtomicRestoreActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont11(Version && ver,int loopDepth) 
	{
															#line 5584 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<AtomicRestoreActor*>(this)->SAV<Version>::futures) { (void)(ver); this->~AtomicRestoreActorState(); static_cast<AtomicRestoreActor*>(this)->destroy(); return 0; }
															#line 51862 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<AtomicRestoreActor*>(this)->SAV< Version >::value()) Version(ver);
		this->~AtomicRestoreActorState();
		static_cast<AtomicRestoreActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont7when2(Version const& ver,int loopDepth) 
	{
		loopDepth = a_body1cont11(ver, loopDepth);

		return loopDepth;
	}
	int a_body1cont7when2(Version && ver,int loopDepth) 
	{
		loopDepth = a_body1cont11(std::move(ver), loopDepth);

		return loopDepth;
	}
	void a_exitChoose21() 
	{
		if (static_cast<AtomicRestoreActor*>(this)->actor_wait_state > 0) static_cast<AtomicRestoreActor*>(this)->actor_wait_state = 0;
		static_cast<AtomicRestoreActor*>(this)->ActorCallback< AtomicRestoreActor, 20, Version >::remove();

	}
	void a_callback_fire(ActorCallback< AtomicRestoreActor, 20, Version >*,Version const& value) 
	{
		fdb_probe_actor_enter("atomicRestore", reinterpret_cast<unsigned long>(this), 20);
		a_exitChoose21();
		try {
			a_body1cont7when2(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("atomicRestore", reinterpret_cast<unsigned long>(this), 20);

	}
	void a_callback_fire(ActorCallback< AtomicRestoreActor, 20, Version >*,Version && value) 
	{
		fdb_probe_actor_enter("atomicRestore", reinterpret_cast<unsigned long>(this), 20);
		a_exitChoose21();
		try {
			a_body1cont7when2(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("atomicRestore", reinterpret_cast<unsigned long>(this), 20);

	}
	void a_callback_error(ActorCallback< AtomicRestoreActor, 20, Version >*,Error err) 
	{
		fdb_probe_actor_enter("atomicRestore", reinterpret_cast<unsigned long>(this), 20);
		a_exitChoose21();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("atomicRestore", reinterpret_cast<unsigned long>(this), 20);

	}
															#line 5439 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	FileBackupAgent* backupAgent;
															#line 5439 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Database cx;
															#line 5439 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Key tagName;
															#line 5439 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Standalone<VectorRef<KeyRangeRef>> ranges;
															#line 5439 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Key addPrefix;
															#line 5439 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Key removePrefix;
															#line 5439 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	UsePartitionedLog fastRestore;
															#line 5446 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Reference<ReadYourWritesTransaction> ryw_tr;
															#line 5448 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	BackupConfig backupConfig;
															#line 5453 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	KeyBackedTag tag;
															#line 5456 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	EBackupState status;
															#line 5469 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Transaction tr;
															#line 5470 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Version commitVersion;
															#line 5471 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	UID randomUid;
															#line 5555 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	bool hasPrefix;
															#line 51963 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via atomicRestore()
															#line 5439 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class AtomicRestoreActor final : public Actor<Version>, public ActorCallback< AtomicRestoreActor, 0, UidAndAbortedFlagT >, public ActorCallback< AtomicRestoreActor, 1, EBackupState >, public ActorCallback< AtomicRestoreActor, 2, Void >, public ActorCallback< AtomicRestoreActor, 3, Void >, public ActorCallback< AtomicRestoreActor, 4, Void >, public ActorCallback< AtomicRestoreActor, 5, Void >, public ActorCallback< AtomicRestoreActor, 6, Optional<Version> >, public ActorCallback< AtomicRestoreActor, 7, Void >, public ActorCallback< AtomicRestoreActor, 8, Void >, public ActorCallback< AtomicRestoreActor, 9, Void >, public ActorCallback< AtomicRestoreActor, 10, Void >, public ActorCallback< AtomicRestoreActor, 11, Void >, public ActorCallback< AtomicRestoreActor, 12, Void >, public ActorCallback< AtomicRestoreActor, 13, Void >, public ActorCallback< AtomicRestoreActor, 14, Void >, public ActorCallback< AtomicRestoreActor, 15, Reference<IBackupContainer> >, public ActorCallback< AtomicRestoreActor, 16, Void >, public ActorCallback< AtomicRestoreActor, 17, Void >, public ActorCallback< AtomicRestoreActor, 18, Void >, public ActorCallback< AtomicRestoreActor, 19, Void >, public ActorCallback< AtomicRestoreActor, 20, Version >, public FastAllocated<AtomicRestoreActor>, public AtomicRestoreActorState<AtomicRestoreActor> {
															#line 51968 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<AtomicRestoreActor>::operator new;
	using FastAllocated<AtomicRestoreActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Version>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< AtomicRestoreActor, 0, UidAndAbortedFlagT >;
friend struct ActorCallback< AtomicRestoreActor, 1, EBackupState >;
friend struct ActorCallback< AtomicRestoreActor, 2, Void >;
friend struct ActorCallback< AtomicRestoreActor, 3, Void >;
friend struct ActorCallback< AtomicRestoreActor, 4, Void >;
friend struct ActorCallback< AtomicRestoreActor, 5, Void >;
friend struct ActorCallback< AtomicRestoreActor, 6, Optional<Version> >;
friend struct ActorCallback< AtomicRestoreActor, 7, Void >;
friend struct ActorCallback< AtomicRestoreActor, 8, Void >;
friend struct ActorCallback< AtomicRestoreActor, 9, Void >;
friend struct ActorCallback< AtomicRestoreActor, 10, Void >;
friend struct ActorCallback< AtomicRestoreActor, 11, Void >;
friend struct ActorCallback< AtomicRestoreActor, 12, Void >;
friend struct ActorCallback< AtomicRestoreActor, 13, Void >;
friend struct ActorCallback< AtomicRestoreActor, 14, Void >;
friend struct ActorCallback< AtomicRestoreActor, 15, Reference<IBackupContainer> >;
friend struct ActorCallback< AtomicRestoreActor, 16, Void >;
friend struct ActorCallback< AtomicRestoreActor, 17, Void >;
friend struct ActorCallback< AtomicRestoreActor, 18, Void >;
friend struct ActorCallback< AtomicRestoreActor, 19, Void >;
friend struct ActorCallback< AtomicRestoreActor, 20, Version >;
															#line 5439 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	AtomicRestoreActor(FileBackupAgent* const& backupAgent,Database const& cx,Key const& tagName,Standalone<VectorRef<KeyRangeRef>> const& ranges,Key const& addPrefix,Key const& removePrefix,UsePartitionedLog const& fastRestore) 
															#line 51999 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<Version>(),
		   AtomicRestoreActorState<AtomicRestoreActor>(backupAgent, cx, tagName, ranges, addPrefix, removePrefix, fastRestore)
	{
		fdb_probe_actor_enter("atomicRestore", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("atomicRestore");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("atomicRestore", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< AtomicRestoreActor, 0, UidAndAbortedFlagT >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< AtomicRestoreActor, 1, EBackupState >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< AtomicRestoreActor, 2, Void >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< AtomicRestoreActor, 3, Void >*)0, actor_cancelled()); break;
		case 5: this->a_callback_error((ActorCallback< AtomicRestoreActor, 4, Void >*)0, actor_cancelled()); break;
		case 6: this->a_callback_error((ActorCallback< AtomicRestoreActor, 5, Void >*)0, actor_cancelled()); break;
		case 7: this->a_callback_error((ActorCallback< AtomicRestoreActor, 6, Optional<Version> >*)0, actor_cancelled()); break;
		case 8: this->a_callback_error((ActorCallback< AtomicRestoreActor, 7, Void >*)0, actor_cancelled()); break;
		case 9: this->a_callback_error((ActorCallback< AtomicRestoreActor, 8, Void >*)0, actor_cancelled()); break;
		case 10: this->a_callback_error((ActorCallback< AtomicRestoreActor, 9, Void >*)0, actor_cancelled()); break;
		case 11: this->a_callback_error((ActorCallback< AtomicRestoreActor, 10, Void >*)0, actor_cancelled()); break;
		case 12: this->a_callback_error((ActorCallback< AtomicRestoreActor, 11, Void >*)0, actor_cancelled()); break;
		case 13: this->a_callback_error((ActorCallback< AtomicRestoreActor, 12, Void >*)0, actor_cancelled()); break;
		case 14: this->a_callback_error((ActorCallback< AtomicRestoreActor, 13, Void >*)0, actor_cancelled()); break;
		case 15: this->a_callback_error((ActorCallback< AtomicRestoreActor, 14, Void >*)0, actor_cancelled()); break;
		case 16: this->a_callback_error((ActorCallback< AtomicRestoreActor, 15, Reference<IBackupContainer> >*)0, actor_cancelled()); break;
		case 17: this->a_callback_error((ActorCallback< AtomicRestoreActor, 16, Void >*)0, actor_cancelled()); break;
		case 18: this->a_callback_error((ActorCallback< AtomicRestoreActor, 17, Void >*)0, actor_cancelled()); break;
		case 19: this->a_callback_error((ActorCallback< AtomicRestoreActor, 18, Void >*)0, actor_cancelled()); break;
		case 20: this->a_callback_error((ActorCallback< AtomicRestoreActor, 19, Void >*)0, actor_cancelled()); break;
		case 21: this->a_callback_error((ActorCallback< AtomicRestoreActor, 20, Version >*)0, actor_cancelled()); break;
		}

	}
};
															#line 5439 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<Version> atomicRestore( FileBackupAgent* const& backupAgent, Database const& cx, Key const& tagName, Standalone<VectorRef<KeyRangeRef>> const& ranges, Key const& addPrefix, Key const& removePrefix, UsePartitionedLog const& fastRestore ) {
															#line 5439 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<Version>(new AtomicRestoreActor(backupAgent, cx, tagName, ranges, addPrefix, removePrefix, fastRestore));
															#line 52046 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 5587 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

	// Similar to atomicRestore, only used in simulation test.
	// locks the database before discontinuing the backup and that same lock is then used while doing the restore.
	// the tagname of the backup must be the same as the restore.
	static Future<Void> atomicParallelRestore(FileBackupAgent* backupAgent,
	                                          Database cx,
	                                          Key tagName,
	                                          Standalone<VectorRef<KeyRangeRef>> ranges,
	                                          Key addPrefix,
	                                          Key removePrefix) {
		return success(
		    atomicRestore(backupAgent, cx, tagName, ranges, addPrefix, removePrefix, UsePartitionedLog::True));
	}
};

const int FileBackupAgent::dataFooterSize = 20;

// Return if parallel restore has finished
Future<Void> FileBackupAgent::parallelRestoreFinish(Database cx, UID randomUID, UnlockDB unlockDB) {
	return FileBackupAgentImpl::parallelRestoreFinish(cx, randomUID, unlockDB);
}

Future<Void> FileBackupAgent::submitParallelRestore(Database cx,
                                                    Key backupTag,
                                                    Standalone<VectorRef<KeyRangeRef>> backupRanges,
                                                    Key bcUrl,
                                                    Optional<std::string> proxy,
                                                    Version targetVersion,
                                                    LockDB lockDB,
                                                    UID randomUID,
                                                    Key addPrefix,
                                                    Key removePrefix) {
	return FileBackupAgentImpl::submitParallelRestore(
	    cx, backupTag, backupRanges, bcUrl, proxy, targetVersion, lockDB, randomUID, addPrefix, removePrefix);
}

Future<Void> FileBackupAgent::atomicParallelRestore(Database cx,
                                                    Key tagName,
                                                    Standalone<VectorRef<KeyRangeRef>> ranges,
                                                    Key addPrefix,
                                                    Key removePrefix) {
	return FileBackupAgentImpl::atomicParallelRestore(this, cx, tagName, ranges, addPrefix, removePrefix);
}

Future<Version> FileBackupAgent::restore(Database cx,
                                         Optional<Database> cxOrig,
                                         Key tagName,
                                         Key url,
                                         Optional<std::string> proxy,
                                         Standalone<VectorRef<KeyRangeRef>> ranges,
                                         WaitForComplete waitForComplete,
                                         Version targetVersion,
                                         Verbose verbose,
                                         Key addPrefix,
                                         Key removePrefix,
                                         LockDB lockDB,
                                         OnlyApplyMutationLogs onlyApplyMutationLogs,
                                         InconsistentSnapshotOnly inconsistentSnapshotOnly,
                                         Version beginVersion,
                                         Optional<std::string> const& encryptionKeyFileName) {
	return FileBackupAgentImpl::restore(this,
	                                    cx,
	                                    cxOrig,
	                                    tagName,
	                                    url,
	                                    proxy,
	                                    ranges,
	                                    waitForComplete,
	                                    targetVersion,
	                                    verbose,
	                                    addPrefix,
	                                    removePrefix,
	                                    lockDB,
	                                    onlyApplyMutationLogs,
	                                    inconsistentSnapshotOnly,
	                                    beginVersion,
	                                    encryptionKeyFileName,
	                                    deterministicRandom()->randomUniqueID());
}

Future<Version> FileBackupAgent::atomicRestore(Database cx,
                                               Key tagName,
                                               Standalone<VectorRef<KeyRangeRef>> ranges,
                                               Key addPrefix,
                                               Key removePrefix) {
	return FileBackupAgentImpl::atomicRestore(
	    this, cx, tagName, ranges, addPrefix, removePrefix, UsePartitionedLog::False);
}

Future<ERestoreState> FileBackupAgent::abortRestore(Reference<ReadYourWritesTransaction> tr, Key tagName) {
	return fileBackup::abortRestore(tr, tagName);
}

Future<ERestoreState> FileBackupAgent::abortRestore(Database cx, Key tagName) {
	return fileBackup::abortRestore(cx, tagName);
}

Future<std::string> FileBackupAgent::restoreStatus(Reference<ReadYourWritesTransaction> tr, Key tagName) {
	return fileBackup::restoreStatus(tr, tagName);
}

Future<ERestoreState> FileBackupAgent::waitRestore(Database cx, Key tagName, Verbose verbose) {
	return FileBackupAgentImpl::waitRestore(cx, tagName, verbose);
};

Future<Void> FileBackupAgent::submitBackup(Reference<ReadYourWritesTransaction> tr,
                                           Key outContainer,
                                           Optional<std::string> proxy,
                                           int initialSnapshotIntervalSeconds,
                                           int snapshotIntervalSeconds,
                                           std::string const& tagName,
                                           Standalone<VectorRef<KeyRangeRef>> backupRanges,
                                           StopWhenDone stopWhenDone,
                                           UsePartitionedLog partitionedLog,
                                           IncrementalBackupOnly incrementalBackupOnly,
                                           Optional<std::string> const& encryptionKeyFileName) {
	return FileBackupAgentImpl::submitBackup(this,
	                                         tr,
	                                         outContainer,
	                                         proxy,
	                                         initialSnapshotIntervalSeconds,
	                                         snapshotIntervalSeconds,
	                                         tagName,
	                                         backupRanges,
	                                         stopWhenDone,
	                                         partitionedLog,
	                                         incrementalBackupOnly,
	                                         encryptionKeyFileName);
}

Future<Void> FileBackupAgent::discontinueBackup(Reference<ReadYourWritesTransaction> tr, Key tagName) {
	return FileBackupAgentImpl::discontinueBackup(this, tr, tagName);
}

Future<Void> FileBackupAgent::abortBackup(Reference<ReadYourWritesTransaction> tr, std::string tagName) {
	return FileBackupAgentImpl::abortBackup(this, tr, tagName);
}

Future<std::string> FileBackupAgent::getStatus(Database cx, ShowErrors showErrors, std::string tagName) {
	return FileBackupAgentImpl::getStatus(this, cx, showErrors, tagName);
}

Future<std::string> FileBackupAgent::getStatusJSON(Database cx, std::string tagName) {
	return FileBackupAgentImpl::getStatusJSON(this, cx, tagName);
}

Future<Optional<Version>> FileBackupAgent::getLastRestorable(Reference<ReadYourWritesTransaction> tr,
                                                             Key tagName,
                                                             Snapshot snapshot) {
	return FileBackupAgentImpl::getLastRestorable(this, tr, tagName, snapshot);
}

void FileBackupAgent::setLastRestorable(Reference<ReadYourWritesTransaction> tr, Key tagName, Version version) {
	tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
	tr->setOption(FDBTransactionOptions::LOCK_AWARE);
	tr->set(lastRestorable.pack(tagName), BinaryWriter::toValue<Version>(version, Unversioned()));
}

Future<EBackupState> FileBackupAgent::waitBackup(Database cx,
                                                 std::string tagName,
                                                 StopWhenDone stopWhenDone,
                                                 Reference<IBackupContainer>* pContainer,
                                                 UID* pUID) {
	return FileBackupAgentImpl::waitBackup(this, cx, tagName, stopWhenDone, pContainer, pUID);
}

Future<Void> FileBackupAgent::changePause(Database db, bool pause) {
	return FileBackupAgentImpl::changePause(this, db, pause);
}

// Fast Restore addPrefix test helper functions
static std::pair<bool, bool> insideValidRange(KeyValueRef kv,
                                              Standalone<VectorRef<KeyRangeRef>> restoreRanges,
                                              Standalone<VectorRef<KeyRangeRef>> backupRanges) {
	bool insideRestoreRange = false;
	bool insideBackupRange = false;
	for (auto& range : restoreRanges) {
		TraceEvent(SevFRTestInfo, "InsideValidRestoreRange")
		    .detail("Key", kv.key)
		    .detail("Range", range)
		    .detail("Inside", (kv.key >= range.begin && kv.key < range.end));
		if (kv.key >= range.begin && kv.key < range.end) {
			insideRestoreRange = true;
			break;
		}
	}
	for (auto& range : backupRanges) {
		TraceEvent(SevFRTestInfo, "InsideValidBackupRange")
		    .detail("Key", kv.key)
		    .detail("Range", range)
		    .detail("Inside", (kv.key >= range.begin && kv.key < range.end));
		if (kv.key >= range.begin && kv.key < range.end) {
			insideBackupRange = true;
			break;
		}
	}
	return std::make_pair(insideBackupRange, insideRestoreRange);
}

// Write [begin, end) in kvs to DB
															#line 52250 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
namespace {
// This generated class is to be used only via writeKVs()
															#line 5787 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class WriteKVsActor>
															#line 5787 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class WriteKVsActorState {
															#line 52257 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 5787 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	WriteKVsActorState(Database const& cx,Standalone<VectorRef<KeyValueRef>> const& kvs,int const& begin,int const& end) 
															#line 5787 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 5787 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : cx(cx),
															#line 5787 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   kvs(kvs),
															#line 5787 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   begin(begin),
															#line 5787 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   end(end)
															#line 52270 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("writeKVs", reinterpret_cast<unsigned long>(this));

	}
	~WriteKVsActorState() 
	{
		fdb_probe_actor_destroy("writeKVs", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 5788 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_0 = runRYWTransaction(cx, [=](Reference<ReadYourWritesTransaction> tr) -> Future<Void> { tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS); tr->setOption(FDBTransactionOptions::LOCK_AWARE); int index = begin; while (index < end) { TraceEvent(SevFRTestInfo, "TransformDatabaseContentsWriteKV") .detail("Index", index) .detail("KVs", kvs.size()) .detail("Key", kvs[index].key) .detail("Value", kvs[index].value); tr->set(kvs[index].key, kvs[index].value); ++index; } return Void(); });
															#line 5788 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<WriteKVsActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 52287 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<WriteKVsActor*>(this)->actor_wait_state = 1;
															#line 5788 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< WriteKVsActor, 0, Void >*>(static_cast<WriteKVsActor*>(this)));
															#line 52292 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~WriteKVsActorState();
		static_cast<WriteKVsActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void const& _,int loopDepth) 
	{
															#line 5805 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr = ReadYourWritesTransaction(cx);
															#line 5806 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		;
															#line 52317 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont1loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1(Void && _,int loopDepth) 
	{
															#line 5805 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr = ReadYourWritesTransaction(cx);
															#line 5806 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		;
															#line 52328 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont1loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<WriteKVsActor*>(this)->actor_wait_state > 0) static_cast<WriteKVsActor*>(this)->actor_wait_state = 0;
		static_cast<WriteKVsActor*>(this)->ActorCallback< WriteKVsActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< WriteKVsActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("writeKVs", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("writeKVs", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< WriteKVsActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("writeKVs", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("writeKVs", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< WriteKVsActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("writeKVs", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("writeKVs", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont2(int loopDepth) 
	{
															#line 5825 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent(SevFRTestInfo, "TransformDatabaseContentsWriteKVDone").detail("Begin", begin).detail("End", end);
															#line 5827 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<WriteKVsActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~WriteKVsActorState(); static_cast<WriteKVsActor*>(this)->destroy(); return 0; }
															#line 52402 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<WriteKVsActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~WriteKVsActorState();
		static_cast<WriteKVsActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1cont1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1(int loopDepth) 
	{
		try {
															#line 5808 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr.setOption(FDBTransactionOptions::READ_SYSTEM_KEYS);
															#line 5809 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr.setOption(FDBTransactionOptions::READ_LOCK_AWARE);
															#line 5810 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			KeyRef k1 = kvs[begin].key;
															#line 5811 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			KeyRef k2 = end < kvs.size() ? kvs[end].key : normalKeys.end;
															#line 5812 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			TraceEvent(SevFRTestInfo, "TransformDatabaseContentsWriteKVReadBack") .detail("Range", KeyRangeRef(k1, k2)) .detail("Begin", begin) .detail("End", end);
															#line 5816 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<RangeResult> __when_expr_1 = tr.getRange(KeyRangeRef(k1, k2), CLIENT_KNOBS->TOO_MANY);
															#line 5816 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<WriteKVsActor*>(this)->actor_wait_state < 0) return a_body1cont1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 52434 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1cont1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1loopBody1when1(__when_expr_1.get(), loopDepth); };
			static_cast<WriteKVsActor*>(this)->actor_wait_state = 2;
															#line 5816 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< WriteKVsActor, 1, RangeResult >*>(static_cast<WriteKVsActor*>(this)));
															#line 52439 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1cont1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1cont1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont1break1(int loopDepth) 
	{
		try {
			return a_body1cont2(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1cont1loopHead1(0);

		return loopDepth;
	}
	int a_body1cont1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 5820 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			TraceEvent("TransformDatabaseContentsWriteKVReadBackError").error(e);
															#line 5821 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_2 = tr.onError(e);
															#line 5821 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<WriteKVsActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 52478 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), std::max(0, loopDepth - 1)); else return a_body1cont1loopBody1Catch1when1(__when_expr_2.get(), loopDepth); };
			static_cast<WriteKVsActor*>(this)->actor_wait_state = 3;
															#line 5821 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< WriteKVsActor, 2, Void >*>(static_cast<WriteKVsActor*>(this)));
															#line 52483 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1cont1loopBody1cont2(RangeResult const& readKVs,int loopDepth) 
	{
															#line 5817 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		ASSERT(readKVs.size() > 0 || begin == end);
															#line 52498 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		return a_body1cont1break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1cont1loopBody1cont2(RangeResult && readKVs,int loopDepth) 
	{
															#line 5817 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		ASSERT(readKVs.size() > 0 || begin == end);
															#line 52507 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		return a_body1cont1break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1cont1loopBody1when1(RangeResult const& readKVs,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont2(readKVs, loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1when1(RangeResult && readKVs,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont2(std::move(readKVs), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<WriteKVsActor*>(this)->actor_wait_state > 0) static_cast<WriteKVsActor*>(this)->actor_wait_state = 0;
		static_cast<WriteKVsActor*>(this)->ActorCallback< WriteKVsActor, 1, RangeResult >::remove();

	}
	void a_callback_fire(ActorCallback< WriteKVsActor, 1, RangeResult >*,RangeResult const& value) 
	{
		fdb_probe_actor_enter("writeKVs", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("writeKVs", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< WriteKVsActor, 1, RangeResult >*,RangeResult && value) 
	{
		fdb_probe_actor_enter("writeKVs", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("writeKVs", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< WriteKVsActor, 1, RangeResult >*,Error err) 
	{
		fdb_probe_actor_enter("writeKVs", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("writeKVs", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont1loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<WriteKVsActor*>(this)->actor_wait_state > 0) static_cast<WriteKVsActor*>(this)->actor_wait_state = 0;
		static_cast<WriteKVsActor*>(this)->ActorCallback< WriteKVsActor, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< WriteKVsActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("writeKVs", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("writeKVs", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< WriteKVsActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("writeKVs", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("writeKVs", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< WriteKVsActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("writeKVs", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("writeKVs", reinterpret_cast<unsigned long>(this), 2);

	}
															#line 5787 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Database cx;
															#line 5787 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Standalone<VectorRef<KeyValueRef>> kvs;
															#line 5787 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int begin;
															#line 5787 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int end;
															#line 5805 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	ReadYourWritesTransaction tr;
															#line 52660 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via writeKVs()
															#line 5787 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class WriteKVsActor final : public Actor<Void>, public ActorCallback< WriteKVsActor, 0, Void >, public ActorCallback< WriteKVsActor, 1, RangeResult >, public ActorCallback< WriteKVsActor, 2, Void >, public FastAllocated<WriteKVsActor>, public WriteKVsActorState<WriteKVsActor> {
															#line 52665 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<WriteKVsActor>::operator new;
	using FastAllocated<WriteKVsActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< WriteKVsActor, 0, Void >;
friend struct ActorCallback< WriteKVsActor, 1, RangeResult >;
friend struct ActorCallback< WriteKVsActor, 2, Void >;
															#line 5787 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	WriteKVsActor(Database const& cx,Standalone<VectorRef<KeyValueRef>> const& kvs,int const& begin,int const& end) 
															#line 52678 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<Void>(),
		   WriteKVsActorState<WriteKVsActor>(cx, kvs, begin, end)
	{
		fdb_probe_actor_enter("writeKVs", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("writeKVs");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("writeKVs", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< WriteKVsActor, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< WriteKVsActor, 1, RangeResult >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< WriteKVsActor, 2, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 5787 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<Void> writeKVs( Database const& cx, Standalone<VectorRef<KeyValueRef>> const& kvs, int const& begin, int const& end ) {
															#line 5787 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<Void>(new WriteKVsActor(cx, kvs, begin, end));
															#line 52708 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 5829 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

// restoreRanges is the actual range that has applied removePrefix and addPrefix processed by restore system
// Assume: restoreRanges do not overlap which is achieved by ensuring backup ranges do not overlap
															#line 52715 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
namespace {
// This generated class is to be used only via transformDatabaseContents()
															#line 5832 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class TransformDatabaseContentsActor>
															#line 5832 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class TransformDatabaseContentsActorState {
															#line 52722 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 5832 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	TransformDatabaseContentsActorState(Database const& cx,Key const& addPrefix,Key const& removePrefix,Standalone<VectorRef<KeyRangeRef>> const& restoreRanges) 
															#line 5832 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 5832 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : cx(cx),
															#line 5832 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   addPrefix(addPrefix),
															#line 5832 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   removePrefix(removePrefix),
															#line 5832 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   restoreRanges(restoreRanges),
															#line 5836 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   tr(cx),
															#line 5837 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   oldData()
															#line 52739 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("transformDatabaseContents", reinterpret_cast<unsigned long>(this));

	}
	~TransformDatabaseContentsActorState() 
	{
		fdb_probe_actor_destroy("transformDatabaseContents", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 5839 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			TraceEvent("FastRestoreWorkloadTransformDatabaseContents") .detail("AddPrefix", addPrefix) .detail("RemovePrefix", removePrefix);
															#line 5842 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			i = 0;
															#line 5843 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			;
															#line 52758 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~TransformDatabaseContentsActorState();
		static_cast<TransformDatabaseContentsActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 5866 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		newKVs = Standalone<VectorRef<KeyValueRef>>();
															#line 5867 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		for(int i = 0;i < oldData.size();++i) {
															#line 5868 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			Key newKey(oldData[i].key);
															#line 5869 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			TraceEvent(SevFRTestInfo, "TransformDatabaseContents") .detail("Keys", oldData.size()) .detail("Index", i) .detail("GetKey", oldData[i].key) .detail("GetValue", oldData[i].value);
															#line 5874 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (newKey.size() < removePrefix.size())
															#line 52789 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			{
															#line 5875 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				TraceEvent(SevError, "TransformDatabaseContents") .detail("Key", newKey) .detail("RemovePrefix", removePrefix);
															#line 52793 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				continue;
			}
															#line 5880 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			newKey = newKey.removePrefix(removePrefix).withPrefix(addPrefix);
															#line 5881 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			newKVs.push_back_deep(newKVs.arena(), KeyValueRef(newKey.contents(), oldData[i].value));
															#line 5882 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			TraceEvent(SevFRTestInfo, "TransformDatabaseContents") .detail("Keys", newKVs.size()) .detail("Index", i) .detail("NewKey", newKVs.back().key) .detail("NewValue", newKVs.back().value);
															#line 52802 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 5889 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		backupRanges = Standalone<VectorRef<KeyRangeRef>>();
															#line 5890 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		for( auto& range : restoreRanges ) {
															#line 5891 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			KeyRange tmpRange = range;
															#line 5892 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			backupRanges.push_back_deep(backupRanges.arena(), tmpRange.removePrefix(removePrefix).withPrefix(addPrefix));
															#line 52812 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 5896 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<Void> __when_expr_2 = runRYWTransaction(cx, [=](Reference<ReadYourWritesTransaction> tr) -> Future<Void> { tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS); tr->setOption(FDBTransactionOptions::LOCK_AWARE); for (int i = 0; i < restoreRanges.size(); i++) { TraceEvent(SevFRTestInfo, "TransformDatabaseContents") .detail("ClearRestoreRange", restoreRanges[i]) .detail("ClearBackupRange", backupRanges[i]); tr->clear(restoreRanges[i]); tr->clear(backupRanges[i]); } return Void(); });
															#line 5896 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<TransformDatabaseContentsActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 52818 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont1when1(__when_expr_2.get(), loopDepth); };
		static_cast<TransformDatabaseContentsActor*>(this)->actor_wait_state = 3;
															#line 5896 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< TransformDatabaseContentsActor, 2, Void >*>(static_cast<TransformDatabaseContentsActor*>(this)));
															#line 52823 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
		try {
															#line 5845 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr.setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 5846 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr.setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 5847 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			i = 0;
															#line 52844 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = a_body1loopBody1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1break1(int loopDepth) 
	{
		try {
			return a_body1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 5856 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			TraceEvent("FastRestoreWorkloadTransformDatabaseContentsGetAllKeys") .error(e) .detail("Index", i) .detail("RestoreRange", restoreRanges[i]);
															#line 5860 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			oldData = Standalone<VectorRef<KeyValueRef>>();
															#line 5861 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_1 = tr.onError(e);
															#line 5861 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<TransformDatabaseContentsActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 52885 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1Catch1when1(__when_expr_1.get(), loopDepth); };
			static_cast<TransformDatabaseContentsActor*>(this)->actor_wait_state = 2;
															#line 5861 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< TransformDatabaseContentsActor, 1, Void >*>(static_cast<TransformDatabaseContentsActor*>(this)));
															#line 52890 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(int loopDepth) 
	{
		return a_body1break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1loopBody1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1loopBody1(int loopDepth) 
	{
															#line 5847 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!(i < restoreRanges.size()))
															#line 52918 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		{
			return a_body1loopBody1break1(loopDepth==0?0:loopDepth-1); // break
		}
															#line 5848 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		StrictFuture<RangeResult> __when_expr_0 = tr.getRange(restoreRanges[i], CLIENT_KNOBS->TOO_MANY);
															#line 5848 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (static_cast<TransformDatabaseContentsActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 52926 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1loopBody1Catch1(__when_expr_0.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1loopBody1when1(__when_expr_0.get(), loopDepth); };
		static_cast<TransformDatabaseContentsActor*>(this)->actor_wait_state = 1;
															#line 5848 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< TransformDatabaseContentsActor, 0, RangeResult >*>(static_cast<TransformDatabaseContentsActor*>(this)));
															#line 52931 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1break1(int loopDepth) 
	{
		try {
			return a_body1loopBody1cont2(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1loopBody1cont1(RangeResult const& kvs,int loopDepth) 
	{
															#line 5849 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		ASSERT(!kvs.more);
															#line 5850 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		for( auto kv : kvs ) {
															#line 5851 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			oldData.push_back_deep(oldData.arena(), KeyValueRef(kv.key, kv.value));
															#line 52957 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 5847 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		++i;
															#line 52961 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (loopDepth == 0) return a_body1loopBody1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1loopBody1cont1(RangeResult && kvs,int loopDepth) 
	{
															#line 5849 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		ASSERT(!kvs.more);
															#line 5850 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		for( auto kv : kvs ) {
															#line 5851 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			oldData.push_back_deep(oldData.arena(), KeyValueRef(kv.key, kv.value));
															#line 52974 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
															#line 5847 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		++i;
															#line 52978 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		if (loopDepth == 0) return a_body1loopBody1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1loopBody1when1(RangeResult const& kvs,int loopDepth) 
	{
		loopDepth = a_body1loopBody1loopBody1cont1(kvs, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1loopBody1when1(RangeResult && kvs,int loopDepth) 
	{
		loopDepth = a_body1loopBody1loopBody1cont1(std::move(kvs), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<TransformDatabaseContentsActor*>(this)->actor_wait_state > 0) static_cast<TransformDatabaseContentsActor*>(this)->actor_wait_state = 0;
		static_cast<TransformDatabaseContentsActor*>(this)->ActorCallback< TransformDatabaseContentsActor, 0, RangeResult >::remove();

	}
	void a_callback_fire(ActorCallback< TransformDatabaseContentsActor, 0, RangeResult >*,RangeResult const& value) 
	{
		fdb_probe_actor_enter("transformDatabaseContents", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("transformDatabaseContents", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< TransformDatabaseContentsActor, 0, RangeResult >*,RangeResult && value) 
	{
		fdb_probe_actor_enter("transformDatabaseContents", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("transformDatabaseContents", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< TransformDatabaseContentsActor, 0, RangeResult >*,Error err) 
	{
		fdb_probe_actor_enter("transformDatabaseContents", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("transformDatabaseContents", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<TransformDatabaseContentsActor*>(this)->actor_wait_state > 0) static_cast<TransformDatabaseContentsActor*>(this)->actor_wait_state = 0;
		static_cast<TransformDatabaseContentsActor*>(this)->ActorCallback< TransformDatabaseContentsActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< TransformDatabaseContentsActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("transformDatabaseContents", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("transformDatabaseContents", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< TransformDatabaseContentsActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("transformDatabaseContents", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("transformDatabaseContents", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< TransformDatabaseContentsActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("transformDatabaseContents", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("transformDatabaseContents", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont2(Void const& _,int loopDepth) 
	{
															#line 5910 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr.reset();
															#line 5911 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		;
															#line 53127 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont2loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1cont2(Void && _,int loopDepth) 
	{
															#line 5910 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr.reset();
															#line 5911 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		;
															#line 53138 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont2loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<TransformDatabaseContentsActor*>(this)->actor_wait_state > 0) static_cast<TransformDatabaseContentsActor*>(this)->actor_wait_state = 0;
		static_cast<TransformDatabaseContentsActor*>(this)->ActorCallback< TransformDatabaseContentsActor, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< TransformDatabaseContentsActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("transformDatabaseContents", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("transformDatabaseContents", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< TransformDatabaseContentsActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("transformDatabaseContents", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("transformDatabaseContents", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< TransformDatabaseContentsActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("transformDatabaseContents", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("transformDatabaseContents", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1cont6(int loopDepth) 
	{
															#line 5929 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		fwrites = std::vector<Future<Void>>();
															#line 5930 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		;
															#line 53212 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont6loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1cont2loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1cont2loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1cont2loopBody1(int loopDepth) 
	{
		try {
															#line 5913 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr.setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 5914 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr.setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 5915 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<RangeResult> __when_expr_3 = tr.getRange(normalKeys, CLIENT_KNOBS->TOO_MANY);
															#line 5915 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<TransformDatabaseContentsActor*>(this)->actor_wait_state < 0) return a_body1cont2loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 53235 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1cont2loopBody1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1cont2loopBody1when1(__when_expr_3.get(), loopDepth); };
			static_cast<TransformDatabaseContentsActor*>(this)->actor_wait_state = 4;
															#line 5915 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< TransformDatabaseContentsActor, 3, RangeResult >*>(static_cast<TransformDatabaseContentsActor*>(this)));
															#line 53240 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1cont2loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1cont2loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont2break1(int loopDepth) 
	{
		try {
			return a_body1cont6(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont2loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1cont2loopHead1(0);

		return loopDepth;
	}
	int a_body1cont2loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 5924 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_4 = tr.onError(e);
															#line 5924 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<TransformDatabaseContentsActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 53277 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1Catch1(__when_expr_4.getError(), std::max(0, loopDepth - 1)); else return a_body1cont2loopBody1Catch1when1(__when_expr_4.get(), loopDepth); };
			static_cast<TransformDatabaseContentsActor*>(this)->actor_wait_state = 5;
															#line 5924 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< TransformDatabaseContentsActor, 4, Void >*>(static_cast<TransformDatabaseContentsActor*>(this)));
															#line 53282 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1cont2loopBody1cont2(RangeResult const& emptyData,int loopDepth) 
	{
															#line 5916 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		for(int i = 0;i < emptyData.size();++i) {
															#line 5917 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			TraceEvent(SevError, "ExpectEmptyData") .detail("Index", i) .detail("Key", emptyData[i].key) .detail("Value", emptyData[i].value);
															#line 53299 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
		return a_body1cont2break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1cont2loopBody1cont2(RangeResult && emptyData,int loopDepth) 
	{
															#line 5916 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		for(int i = 0;i < emptyData.size();++i) {
															#line 5917 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			TraceEvent(SevError, "ExpectEmptyData") .detail("Index", i) .detail("Key", emptyData[i].key) .detail("Value", emptyData[i].value);
															#line 53311 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
		return a_body1cont2break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1cont2loopBody1when1(RangeResult const& emptyData,int loopDepth) 
	{
		loopDepth = a_body1cont2loopBody1cont2(emptyData, loopDepth);

		return loopDepth;
	}
	int a_body1cont2loopBody1when1(RangeResult && emptyData,int loopDepth) 
	{
		loopDepth = a_body1cont2loopBody1cont2(std::move(emptyData), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<TransformDatabaseContentsActor*>(this)->actor_wait_state > 0) static_cast<TransformDatabaseContentsActor*>(this)->actor_wait_state = 0;
		static_cast<TransformDatabaseContentsActor*>(this)->ActorCallback< TransformDatabaseContentsActor, 3, RangeResult >::remove();

	}
	void a_callback_fire(ActorCallback< TransformDatabaseContentsActor, 3, RangeResult >*,RangeResult const& value) 
	{
		fdb_probe_actor_enter("transformDatabaseContents", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont2loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont2loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont2loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("transformDatabaseContents", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< TransformDatabaseContentsActor, 3, RangeResult >*,RangeResult && value) 
	{
		fdb_probe_actor_enter("transformDatabaseContents", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont2loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont2loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont2loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("transformDatabaseContents", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< TransformDatabaseContentsActor, 3, RangeResult >*,Error err) 
	{
		fdb_probe_actor_enter("transformDatabaseContents", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont2loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont2loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont2loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("transformDatabaseContents", reinterpret_cast<unsigned long>(this), 3);

	}
	int a_body1cont2loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont2loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont2loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont2loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont2loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont2loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont2loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont2loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose5() 
	{
		if (static_cast<TransformDatabaseContentsActor*>(this)->actor_wait_state > 0) static_cast<TransformDatabaseContentsActor*>(this)->actor_wait_state = 0;
		static_cast<TransformDatabaseContentsActor*>(this)->ActorCallback< TransformDatabaseContentsActor, 4, Void >::remove();

	}
	void a_callback_fire(ActorCallback< TransformDatabaseContentsActor, 4, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("transformDatabaseContents", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont2loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("transformDatabaseContents", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_fire(ActorCallback< TransformDatabaseContentsActor, 4, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("transformDatabaseContents", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont2loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("transformDatabaseContents", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_error(ActorCallback< TransformDatabaseContentsActor, 4, Void >*,Error err) 
	{
		fdb_probe_actor_enter("transformDatabaseContents", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("transformDatabaseContents", reinterpret_cast<unsigned long>(this), 4);

	}
	int a_body1cont7(int loopDepth) 
	{
															#line 5948 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		tr.reset();
															#line 5949 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		;
															#line 53461 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		loopDepth = a_body1cont7loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1cont6loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1cont6loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1cont6loopBody1(int loopDepth) 
	{
		try {
															#line 5932 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			begin = 0;
															#line 5933 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			len = 0;
															#line 5934 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			for(;begin < newKVs.size();) {
															#line 5935 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				len = std::min(100, newKVs.size() - begin);
															#line 5936 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				fwrites.push_back(writeKVs(cx, newKVs, begin, begin + len));
															#line 5937 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				begin = begin + len;
															#line 53488 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			}
															#line 5939 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_5 = waitForAll(fwrites);
															#line 5939 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<TransformDatabaseContentsActor*>(this)->actor_wait_state < 0) return a_body1cont6loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 53494 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_5.isReady()) { if (__when_expr_5.isError()) return a_body1cont6loopBody1Catch1(__when_expr_5.getError(), loopDepth); else return a_body1cont6loopBody1when1(__when_expr_5.get(), loopDepth); };
			static_cast<TransformDatabaseContentsActor*>(this)->actor_wait_state = 6;
															#line 5939 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_5.addCallbackAndClear(static_cast<ActorCallback< TransformDatabaseContentsActor, 5, Void >*>(static_cast<TransformDatabaseContentsActor*>(this)));
															#line 53499 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1cont6loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1cont6loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont6break1(int loopDepth) 
	{
		try {
			return a_body1cont7(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont6loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1cont6loopHead1(0);

		return loopDepth;
	}
	int a_body1cont6loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 5942 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			TraceEvent(SevError, "FastRestoreWorkloadTransformDatabaseContentsUnexpectedErrorOnWriteKVs").error(e);
															#line 5943 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_6 = tr.onError(e);
															#line 5943 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<TransformDatabaseContentsActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 53538 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_6.isReady()) { if (__when_expr_6.isError()) return a_body1Catch1(__when_expr_6.getError(), std::max(0, loopDepth - 1)); else return a_body1cont6loopBody1Catch1when1(__when_expr_6.get(), loopDepth); };
			static_cast<TransformDatabaseContentsActor*>(this)->actor_wait_state = 7;
															#line 5943 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_6.addCallbackAndClear(static_cast<ActorCallback< TransformDatabaseContentsActor, 6, Void >*>(static_cast<TransformDatabaseContentsActor*>(this)));
															#line 53543 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1cont6loopBody1cont2(Void const& _,int loopDepth) 
	{
		return a_body1cont6break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1cont6loopBody1cont2(Void && _,int loopDepth) 
	{
		return a_body1cont6break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1cont6loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont6loopBody1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont6loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont6loopBody1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose6() 
	{
		if (static_cast<TransformDatabaseContentsActor*>(this)->actor_wait_state > 0) static_cast<TransformDatabaseContentsActor*>(this)->actor_wait_state = 0;
		static_cast<TransformDatabaseContentsActor*>(this)->ActorCallback< TransformDatabaseContentsActor, 5, Void >::remove();

	}
	void a_callback_fire(ActorCallback< TransformDatabaseContentsActor, 5, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("transformDatabaseContents", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1cont6loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont6loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont6loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("transformDatabaseContents", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_fire(ActorCallback< TransformDatabaseContentsActor, 5, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("transformDatabaseContents", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1cont6loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont6loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont6loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("transformDatabaseContents", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_error(ActorCallback< TransformDatabaseContentsActor, 5, Void >*,Error err) 
	{
		fdb_probe_actor_enter("transformDatabaseContents", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1cont6loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont6loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont6loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("transformDatabaseContents", reinterpret_cast<unsigned long>(this), 5);

	}
	int a_body1cont6loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont6loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont6loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont6loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont6loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont6loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont6loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont6loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose7() 
	{
		if (static_cast<TransformDatabaseContentsActor*>(this)->actor_wait_state > 0) static_cast<TransformDatabaseContentsActor*>(this)->actor_wait_state = 0;
		static_cast<TransformDatabaseContentsActor*>(this)->ActorCallback< TransformDatabaseContentsActor, 6, Void >::remove();

	}
	void a_callback_fire(ActorCallback< TransformDatabaseContentsActor, 6, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("transformDatabaseContents", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1cont6loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("transformDatabaseContents", reinterpret_cast<unsigned long>(this), 6);

	}
	void a_callback_fire(ActorCallback< TransformDatabaseContentsActor, 6, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("transformDatabaseContents", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1cont6loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("transformDatabaseContents", reinterpret_cast<unsigned long>(this), 6);

	}
	void a_callback_error(ActorCallback< TransformDatabaseContentsActor, 6, Void >*,Error err) 
	{
		fdb_probe_actor_enter("transformDatabaseContents", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("transformDatabaseContents", reinterpret_cast<unsigned long>(this), 6);

	}
	int a_body1cont8(int loopDepth) 
	{
															#line 5970 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent("FastRestoreWorkloadTransformDatabaseContentsFinish") .detail("AddPrefix", addPrefix) .detail("RemovePrefix", removePrefix);
															#line 5974 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<TransformDatabaseContentsActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~TransformDatabaseContentsActorState(); static_cast<TransformDatabaseContentsActor*>(this)->destroy(); return 0; }
															#line 53710 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<TransformDatabaseContentsActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~TransformDatabaseContentsActorState();
		static_cast<TransformDatabaseContentsActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont7loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1cont7loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1cont7loopBody1(int loopDepth) 
	{
		try {
															#line 5951 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr.setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 5952 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			tr.setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 5953 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<RangeResult> __when_expr_7 = tr.getRange(normalKeys, CLIENT_KNOBS->TOO_MANY);
															#line 5953 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<TransformDatabaseContentsActor*>(this)->actor_wait_state < 0) return a_body1cont7loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 53736 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_7.isReady()) { if (__when_expr_7.isError()) return a_body1cont7loopBody1Catch1(__when_expr_7.getError(), loopDepth); else return a_body1cont7loopBody1when1(__when_expr_7.get(), loopDepth); };
			static_cast<TransformDatabaseContentsActor*>(this)->actor_wait_state = 8;
															#line 5953 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_7.addCallbackAndClear(static_cast<ActorCallback< TransformDatabaseContentsActor, 7, RangeResult >*>(static_cast<TransformDatabaseContentsActor*>(this)));
															#line 53741 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1cont7loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1cont7loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont7break1(int loopDepth) 
	{
		try {
			return a_body1cont8(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont7loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1cont7loopHead1(0);

		return loopDepth;
	}
	int a_body1cont7loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 5966 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			StrictFuture<Void> __when_expr_8 = tr.onError(e);
															#line 5966 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			if (static_cast<TransformDatabaseContentsActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 53778 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			if (__when_expr_8.isReady()) { if (__when_expr_8.isError()) return a_body1Catch1(__when_expr_8.getError(), std::max(0, loopDepth - 1)); else return a_body1cont7loopBody1Catch1when1(__when_expr_8.get(), loopDepth); };
			static_cast<TransformDatabaseContentsActor*>(this)->actor_wait_state = 9;
															#line 5966 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			__when_expr_8.addCallbackAndClear(static_cast<ActorCallback< TransformDatabaseContentsActor, 8, Void >*>(static_cast<TransformDatabaseContentsActor*>(this)));
															#line 53783 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1cont7loopBody1cont2(RangeResult const& allData,int loopDepth) 
	{
															#line 5954 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent(SevFRTestInfo, "SanityCheckData").detail("Size", allData.size());
															#line 5955 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		for(int i = 0;i < allData.size();++i) {
															#line 5956 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			std::pair<bool, bool> backupRestoreValid = insideValidRange(allData[i], restoreRanges, backupRanges);
															#line 5957 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			TraceEvent(backupRestoreValid.first ? SevFRTestInfo : SevError, "SanityCheckData") .detail("Index", i) .detail("Key", allData[i].key) .detail("Value", allData[i].value) .detail("InsideBackupRange", backupRestoreValid.first) .detail("InsideRestoreRange", backupRestoreValid.second);
															#line 53804 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
		return a_body1cont7break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1cont7loopBody1cont2(RangeResult && allData,int loopDepth) 
	{
															#line 5954 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		TraceEvent(SevFRTestInfo, "SanityCheckData").detail("Size", allData.size());
															#line 5955 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		for(int i = 0;i < allData.size();++i) {
															#line 5956 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			std::pair<bool, bool> backupRestoreValid = insideValidRange(allData[i], restoreRanges, backupRanges);
															#line 5957 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			TraceEvent(backupRestoreValid.first ? SevFRTestInfo : SevError, "SanityCheckData") .detail("Index", i) .detail("Key", allData[i].key) .detail("Value", allData[i].value) .detail("InsideBackupRange", backupRestoreValid.first) .detail("InsideRestoreRange", backupRestoreValid.second);
															#line 53820 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
		return a_body1cont7break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1cont7loopBody1when1(RangeResult const& allData,int loopDepth) 
	{
		loopDepth = a_body1cont7loopBody1cont2(allData, loopDepth);

		return loopDepth;
	}
	int a_body1cont7loopBody1when1(RangeResult && allData,int loopDepth) 
	{
		loopDepth = a_body1cont7loopBody1cont2(std::move(allData), loopDepth);

		return loopDepth;
	}
	void a_exitChoose8() 
	{
		if (static_cast<TransformDatabaseContentsActor*>(this)->actor_wait_state > 0) static_cast<TransformDatabaseContentsActor*>(this)->actor_wait_state = 0;
		static_cast<TransformDatabaseContentsActor*>(this)->ActorCallback< TransformDatabaseContentsActor, 7, RangeResult >::remove();

	}
	void a_callback_fire(ActorCallback< TransformDatabaseContentsActor, 7, RangeResult >*,RangeResult const& value) 
	{
		fdb_probe_actor_enter("transformDatabaseContents", reinterpret_cast<unsigned long>(this), 7);
		a_exitChoose8();
		try {
			a_body1cont7loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont7loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont7loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("transformDatabaseContents", reinterpret_cast<unsigned long>(this), 7);

	}
	void a_callback_fire(ActorCallback< TransformDatabaseContentsActor, 7, RangeResult >*,RangeResult && value) 
	{
		fdb_probe_actor_enter("transformDatabaseContents", reinterpret_cast<unsigned long>(this), 7);
		a_exitChoose8();
		try {
			a_body1cont7loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont7loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont7loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("transformDatabaseContents", reinterpret_cast<unsigned long>(this), 7);

	}
	void a_callback_error(ActorCallback< TransformDatabaseContentsActor, 7, RangeResult >*,Error err) 
	{
		fdb_probe_actor_enter("transformDatabaseContents", reinterpret_cast<unsigned long>(this), 7);
		a_exitChoose8();
		try {
			a_body1cont7loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont7loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont7loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("transformDatabaseContents", reinterpret_cast<unsigned long>(this), 7);

	}
	int a_body1cont7loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont7loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont7loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont7loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont7loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont7loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont7loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont7loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose9() 
	{
		if (static_cast<TransformDatabaseContentsActor*>(this)->actor_wait_state > 0) static_cast<TransformDatabaseContentsActor*>(this)->actor_wait_state = 0;
		static_cast<TransformDatabaseContentsActor*>(this)->ActorCallback< TransformDatabaseContentsActor, 8, Void >::remove();

	}
	void a_callback_fire(ActorCallback< TransformDatabaseContentsActor, 8, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("transformDatabaseContents", reinterpret_cast<unsigned long>(this), 8);
		a_exitChoose9();
		try {
			a_body1cont7loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("transformDatabaseContents", reinterpret_cast<unsigned long>(this), 8);

	}
	void a_callback_fire(ActorCallback< TransformDatabaseContentsActor, 8, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("transformDatabaseContents", reinterpret_cast<unsigned long>(this), 8);
		a_exitChoose9();
		try {
			a_body1cont7loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("transformDatabaseContents", reinterpret_cast<unsigned long>(this), 8);

	}
	void a_callback_error(ActorCallback< TransformDatabaseContentsActor, 8, Void >*,Error err) 
	{
		fdb_probe_actor_enter("transformDatabaseContents", reinterpret_cast<unsigned long>(this), 8);
		a_exitChoose9();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("transformDatabaseContents", reinterpret_cast<unsigned long>(this), 8);

	}
															#line 5832 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Database cx;
															#line 5832 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Key addPrefix;
															#line 5832 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Key removePrefix;
															#line 5832 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Standalone<VectorRef<KeyRangeRef>> restoreRanges;
															#line 5836 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	ReadYourWritesTransaction tr;
															#line 5837 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Standalone<VectorRef<KeyValueRef>> oldData;
															#line 5842 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int i;
															#line 5866 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Standalone<VectorRef<KeyValueRef>> newKVs;
															#line 5889 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Standalone<VectorRef<KeyRangeRef>> backupRanges;
															#line 5929 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	std::vector<Future<Void>> fwrites;
															#line 5932 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int begin;
															#line 5933 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	int len;
															#line 53988 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via transformDatabaseContents()
															#line 5832 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class TransformDatabaseContentsActor final : public Actor<Void>, public ActorCallback< TransformDatabaseContentsActor, 0, RangeResult >, public ActorCallback< TransformDatabaseContentsActor, 1, Void >, public ActorCallback< TransformDatabaseContentsActor, 2, Void >, public ActorCallback< TransformDatabaseContentsActor, 3, RangeResult >, public ActorCallback< TransformDatabaseContentsActor, 4, Void >, public ActorCallback< TransformDatabaseContentsActor, 5, Void >, public ActorCallback< TransformDatabaseContentsActor, 6, Void >, public ActorCallback< TransformDatabaseContentsActor, 7, RangeResult >, public ActorCallback< TransformDatabaseContentsActor, 8, Void >, public FastAllocated<TransformDatabaseContentsActor>, public TransformDatabaseContentsActorState<TransformDatabaseContentsActor> {
															#line 53993 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<TransformDatabaseContentsActor>::operator new;
	using FastAllocated<TransformDatabaseContentsActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< TransformDatabaseContentsActor, 0, RangeResult >;
friend struct ActorCallback< TransformDatabaseContentsActor, 1, Void >;
friend struct ActorCallback< TransformDatabaseContentsActor, 2, Void >;
friend struct ActorCallback< TransformDatabaseContentsActor, 3, RangeResult >;
friend struct ActorCallback< TransformDatabaseContentsActor, 4, Void >;
friend struct ActorCallback< TransformDatabaseContentsActor, 5, Void >;
friend struct ActorCallback< TransformDatabaseContentsActor, 6, Void >;
friend struct ActorCallback< TransformDatabaseContentsActor, 7, RangeResult >;
friend struct ActorCallback< TransformDatabaseContentsActor, 8, Void >;
															#line 5832 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	TransformDatabaseContentsActor(Database const& cx,Key const& addPrefix,Key const& removePrefix,Standalone<VectorRef<KeyRangeRef>> const& restoreRanges) 
															#line 54012 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<Void>(),
		   TransformDatabaseContentsActorState<TransformDatabaseContentsActor>(cx, addPrefix, removePrefix, restoreRanges)
	{
		fdb_probe_actor_enter("transformDatabaseContents", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("transformDatabaseContents");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("transformDatabaseContents", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< TransformDatabaseContentsActor, 0, RangeResult >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< TransformDatabaseContentsActor, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< TransformDatabaseContentsActor, 2, Void >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< TransformDatabaseContentsActor, 3, RangeResult >*)0, actor_cancelled()); break;
		case 5: this->a_callback_error((ActorCallback< TransformDatabaseContentsActor, 4, Void >*)0, actor_cancelled()); break;
		case 6: this->a_callback_error((ActorCallback< TransformDatabaseContentsActor, 5, Void >*)0, actor_cancelled()); break;
		case 7: this->a_callback_error((ActorCallback< TransformDatabaseContentsActor, 6, Void >*)0, actor_cancelled()); break;
		case 8: this->a_callback_error((ActorCallback< TransformDatabaseContentsActor, 7, RangeResult >*)0, actor_cancelled()); break;
		case 9: this->a_callback_error((ActorCallback< TransformDatabaseContentsActor, 8, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 5832 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] static Future<Void> transformDatabaseContents( Database const& cx, Key const& addPrefix, Key const& removePrefix, Standalone<VectorRef<KeyRangeRef>> const& restoreRanges ) {
															#line 5832 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<Void>(new TransformDatabaseContentsActor(cx, addPrefix, removePrefix, restoreRanges));
															#line 54048 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 5976 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

// addPrefix and removePrefix are the options used in the restore request:
// every backup key applied removePrefix and addPrefix in restore;
// transformRestoredDatabase actor will revert it by remove addPrefix and add removePrefix.
															#line 54056 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
namespace {
// This generated class is to be used only via transformRestoredDatabase()
															#line 5980 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
template <class TransformRestoredDatabaseActor>
															#line 5980 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class TransformRestoredDatabaseActorState {
															#line 54063 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
															#line 5980 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	TransformRestoredDatabaseActorState(Database const& cx,Standalone<VectorRef<KeyRangeRef>> const& backupRanges,Key const& addPrefix,Key const& removePrefix) 
															#line 5980 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
															#line 5980 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		 : cx(cx),
															#line 5980 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   backupRanges(backupRanges),
															#line 5980 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   addPrefix(addPrefix),
															#line 5980 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		   removePrefix(removePrefix)
															#line 54076 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
	{
		fdb_probe_actor_create("transformRestoredDatabase", reinterpret_cast<unsigned long>(this));

	}
	~TransformRestoredDatabaseActorState() 
	{
		fdb_probe_actor_destroy("transformRestoredDatabase", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
			try {
															#line 5985 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				Standalone<VectorRef<KeyRangeRef>> restoreRanges;
															#line 5986 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				for(int i = 0;i < backupRanges.size();++i) {
															#line 5987 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
					KeyRange range(backupRanges[i]);
															#line 5988 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
					Key begin = range.begin.removePrefix(removePrefix).withPrefix(addPrefix);
															#line 5989 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
					Key end = range.end.removePrefix(removePrefix).withPrefix(addPrefix);
															#line 5990 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
					TraceEvent("FastRestoreTransformRestoredDatabase") .detail("From", KeyRangeRef(begin.contents(), end.contents())) .detail("To", range);
															#line 5993 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
					restoreRanges.push_back_deep(restoreRanges.arena(), KeyRangeRef(begin.contents(), end.contents()));
															#line 54104 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				}
															#line 5995 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				StrictFuture<Void> __when_expr_0 = transformDatabaseContents(cx, removePrefix, addPrefix, restoreRanges);
															#line 5995 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				if (static_cast<TransformRestoredDatabaseActor*>(this)->actor_wait_state < 0) return a_body1Catch2(actor_cancelled(), loopDepth);
															#line 54110 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch2(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
				static_cast<TransformRestoredDatabaseActor*>(this)->actor_wait_state = 1;
															#line 5995 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
				__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< TransformRestoredDatabaseActor, 0, Void >*>(static_cast<TransformRestoredDatabaseActor*>(this)));
															#line 54115 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
				loopDepth = 0;
			}
			catch (Error& error) {
				loopDepth = a_body1Catch2(error, loopDepth);
			} catch (...) {
				loopDepth = a_body1Catch2(unknown_error(), loopDepth);
			}
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~TransformRestoredDatabaseActorState();
		static_cast<TransformRestoredDatabaseActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 6001 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
		if (!static_cast<TransformRestoredDatabaseActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~TransformRestoredDatabaseActorState(); static_cast<TransformRestoredDatabaseActor*>(this)->destroy(); return 0; }
															#line 54144 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		new (&static_cast<TransformRestoredDatabaseActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~TransformRestoredDatabaseActorState();
		static_cast<TransformRestoredDatabaseActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1Catch2(const Error& e,int loopDepth=0) 
	{
		try {
															#line 5997 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			TraceEvent(SevError, "FastRestoreTransformRestoredDatabaseUnexpectedError").error(e);
															#line 5998 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
			return a_body1Catch1(e, loopDepth);
															#line 54159 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont2(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont4(loopDepth);

		return loopDepth;
	}
	int a_body1cont2(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont4(loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<TransformRestoredDatabaseActor*>(this)->actor_wait_state > 0) static_cast<TransformRestoredDatabaseActor*>(this)->actor_wait_state = 0;
		static_cast<TransformRestoredDatabaseActor*>(this)->ActorCallback< TransformRestoredDatabaseActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< TransformRestoredDatabaseActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("transformRestoredDatabase", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("transformRestoredDatabase", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< TransformRestoredDatabaseActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("transformRestoredDatabase", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("transformRestoredDatabase", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< TransformRestoredDatabaseActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("transformRestoredDatabase", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch2(err, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("transformRestoredDatabase", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont4(int loopDepth) 
	{
		try {
			loopDepth = a_body1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
															#line 5980 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Database cx;
															#line 5980 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Standalone<VectorRef<KeyRangeRef>> backupRanges;
															#line 5980 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Key addPrefix;
															#line 5980 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	Key removePrefix;
															#line 54265 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
};
// This generated class is to be used only via transformRestoredDatabase()
															#line 5980 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
class TransformRestoredDatabaseActor final : public Actor<Void>, public ActorCallback< TransformRestoredDatabaseActor, 0, Void >, public FastAllocated<TransformRestoredDatabaseActor>, public TransformRestoredDatabaseActorState<TransformRestoredDatabaseActor> {
															#line 54270 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
public:
	using FastAllocated<TransformRestoredDatabaseActor>::operator new;
	using FastAllocated<TransformRestoredDatabaseActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< TransformRestoredDatabaseActor, 0, Void >;
															#line 5980 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	TransformRestoredDatabaseActor(Database const& cx,Standalone<VectorRef<KeyRangeRef>> const& backupRanges,Key const& addPrefix,Key const& removePrefix) 
															#line 54281 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
		 : Actor<Void>(),
		   TransformRestoredDatabaseActorState<TransformRestoredDatabaseActor>(cx, backupRanges, addPrefix, removePrefix)
	{
		fdb_probe_actor_enter("transformRestoredDatabase", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("transformRestoredDatabase");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("transformRestoredDatabase", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< TransformRestoredDatabaseActor, 0, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 5980 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
[[nodiscard]] Future<Void> transformRestoredDatabase( Database const& cx, Standalone<VectorRef<KeyRangeRef>> const& backupRanges, Key const& addPrefix, Key const& removePrefix ) {
															#line 5980 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"
	return Future<Void>(new TransformRestoredDatabaseActor(cx, backupRanges, addPrefix, removePrefix));
															#line 54309 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.g.cpp"
}

#line 6003 "/usr/src/libfdb_c/fdbclient/FileBackupAgent.actor.cpp"

void simulateBlobFailure() {
	if (BUGGIFY && deterministicRandom()->random01() < 0.01) { // Simulate blob failures
		double i = deterministicRandom()->random01();
		if (i < 0.5) {
			throw http_request_failed();
		} else if (i < 0.7) {
			throw connection_failed();
		} else if (i < 0.8) {
			throw timed_out();
		} else if (i < 0.9) {
			throw lookup_failed();
		}
	}
}
