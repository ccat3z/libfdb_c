#define POST_ACTOR_COMPILER 1
#line 1 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
/*
 * ManagementAPI.actor.cpp
 *
 * This source file is part of the FoundationDB open source project
 *
 * Copyright 2013-2022 Apple Inc. and the FoundationDB project authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <cinttypes>
#include <string>
#include <vector>

#include "fdbclient/GenericManagementAPI.actor.h"
#include "fmt/format.h"
#include "fdbclient/Knobs.h"
#include "flow/Arena.h"
#include "fdbclient/ClusterConnectionMemoryRecord.h"
#include "fdbclient/FDBOptions.g.h"
#include "fdbclient/FDBTypes.h"
#include "fdbclient/ReadYourWrites.h"
#include "fdbclient/ManagementAPI.actor.h"

#include "fdbclient/SystemData.h"
#include "fdbclient/NativeAPI.actor.h"
#include "fdbclient/CoordinationInterface.h"
#include "fdbclient/DatabaseContext.h"
#include "fdbrpc/simulator.h"
#include "fdbclient/StatusClient.h"
#include "flow/Trace.h"
#include "flow/UnitTest.h"
#include "fdbrpc/ReplicationPolicy.h"
#include "fdbrpc/Replication.h"
#include "fdbclient/Schemas.h"
#include "fdbrpc/SimulatorProcessInfo.h"

#include "flow/actorcompiler.h" // This must be the last #include.

bool isInteger(const std::string& s) {
	if (s.empty())
		return false;
	char* p;
	strtol(s.c_str(), &p, 10);
	return (*p == 0);
}

// Defines the mapping between configuration names (as exposed by fdbcli, buildConfiguration()) and actual configuration
// parameters
std::map<std::string, std::string> configForToken(std::string const& mode) {
	std::map<std::string, std::string> out;
	std::string p = configKeysPrefix.toString();

	if (mode == "new") {
		out[p + "initialized"] = "1";
		return out;
	}

	if (mode == "tss") {
		// Set temporary marker in config map to mark that this is a tss configuration and not a normal storage/log
		// configuration. A bit of a hack but reuses the parsing code nicely.
		out[p + "istss"] = "1";
		return out;
	}

	if (mode == "locked") {
		// Setting this key is interpreted as an instruction to use the normal version-stamp-based mechanism for locking
		// the database.
		out[databaseLockedKey.toString()] = deterministicRandom()->randomUniqueID().toString();
		return out;
	}

	size_t pos;

	// key:=value is unvalidated and unchecked
	pos = mode.find(":=");
	if (pos != std::string::npos) {
		out[p + mode.substr(0, pos)] = mode.substr(pos + 2);
		return out;
	}

	// key=value is constrained to a limited set of options and basic validation is performed
	pos = mode.find("=");
	if (pos != std::string::npos) {
		std::string key = mode.substr(0, pos);
		std::string value = mode.substr(pos + 1);

		if (key == "proxies" && isInteger(value)) {
			printf("Warning: Proxy role is being split into GRV Proxy and Commit Proxy, now prefer configuring "
			       "'grv_proxies' and 'commit_proxies' separately. Generally we should follow that 'commit_proxies'"
			       " is three times of 'grv_proxies' count and 'grv_proxies' should be not more than 4.\n");
			int proxiesCount = atoi(value.c_str());
			if (proxiesCount == -1) {
				proxiesCount = CLIENT_KNOBS->DEFAULT_AUTO_GRV_PROXIES + CLIENT_KNOBS->DEFAULT_AUTO_COMMIT_PROXIES;
				ASSERT_WE_THINK(proxiesCount >= 2);
			}

			if (proxiesCount < 2) {
				printf("Error: At least 2 proxies (1 GRV proxy and 1 Commit proxy) are required.\n");
				return out;
			}

			int grvProxyCount = std::max(1,
			                             std::min(CLIENT_KNOBS->DEFAULT_MAX_GRV_PROXIES,
			                                      proxiesCount / (CLIENT_KNOBS->DEFAULT_COMMIT_GRV_PROXIES_RATIO + 1)));
			int commitProxyCount = proxiesCount - grvProxyCount;
			ASSERT_WE_THINK(grvProxyCount >= 1 && commitProxyCount >= 1);

			out[p + "grv_proxies"] = std::to_string(grvProxyCount);
			out[p + "commit_proxies"] = std::to_string(commitProxyCount);
			printf("%d proxies are automatically converted into %d GRV proxies and %d Commit proxies.\n",
			       proxiesCount,
			       grvProxyCount,
			       commitProxyCount);

			TraceEvent("DatabaseConfigurationProxiesSpecified")
			    .detail("SpecifiedProxies", atoi(value.c_str()))
			    .detail("EffectiveSpecifiedProxies", proxiesCount)
			    .detail("ConvertedGrvProxies", grvProxyCount)
			    .detail("ConvertedCommitProxies", commitProxyCount);
		}

		if ((key == "logs" || key == "commit_proxies" || key == "grv_proxies" || key == "resolvers" ||
		     key == "remote_logs" || key == "log_routers" || key == "usable_regions" ||
		     key == "repopulate_anti_quorum" || key == "count") &&
		    isInteger(value)) {
			out[p + key] = value;
		}

		if (key == "regions") {
			json_spirit::mValue mv;
			json_spirit::read_string(value, mv);

			StatusObject regionObj;
			regionObj["regions"] = mv;
			out[p + key] =
			    BinaryWriter::toValue(regionObj, IncludeVersion(ProtocolVersion::withRegionConfiguration())).toString();
		}

		if (key == "perpetual_storage_wiggle" && isInteger(value)) {
			int ppWiggle = std::stoi(value);
			if (ppWiggle >= 2 || ppWiggle < 0) {
				printf("Error: Only 0 and 1 are valid values of perpetual_storage_wiggle at present.\n");
				return out;
			}
			out[p + key] = value;
		}
		if (key == "perpetual_storage_wiggle_locality") {
			if (!isValidPerpetualStorageWiggleLocality(value)) {
				printf("Error: perpetual_storage_wiggle_locality should be in <locality_key>:<locality_value> "
				       "format or enter 0 to disable the locality match for wiggling.\n");
				return out;
			}
			out[p + key] = value;
		}
		if (key == "storage_migration_type") {
			StorageMigrationType type;
			if (value == "disabled") {
				type = StorageMigrationType::DISABLED;
			} else if (value == "aggressive") {
				type = StorageMigrationType::AGGRESSIVE;
			} else if (value == "gradual") {
				type = StorageMigrationType::GRADUAL;
			} else {
				printf("Error: Only disabled|aggressive|gradual are valid for storage_migration_type.\n");
				return out;
			}
			out[p + key] = format("%d", type);
		}

		if (key == "blob_granules_enabled") {
			int enabled = std::stoi(value);
			if (enabled != 0 && enabled != 1) {
				printf("Error: Only 0 or 1 are valid values for blob_granules_enabled. "
				       "1 enables blob granules and 0 disables them.\n");
				return out;
			}
			out[p + key] = value;
		}

		if (key == "tenant_mode") {
			TenantMode tenantMode;
			if (value == "disabled") {
				tenantMode = TenantMode::DISABLED;
			} else if (value == "optional_experimental") {
				tenantMode = TenantMode::OPTIONAL_TENANT;
			} else if (value == "required_experimental") {
				tenantMode = TenantMode::REQUIRED;
			} else {
				printf("Error: Only disabled|optional_experimental|required_experimental are valid for tenant_mode.\n");
				return out;
			}
			out[p + key] = format("%d", tenantMode);
		}

		if (key == "encryption_at_rest_mode") {
			EncryptionAtRestMode mode;
			if (value == "disabled") {
				mode = EncryptionAtRestMode::DISABLED;
			} else if (value == "domain_aware") {
				mode = EncryptionAtRestMode::DOMAIN_AWARE;
			} else if (value == "cluster_aware") {
				mode = EncryptionAtRestMode::CLUSTER_AWARE;
			} else {
				printf("Error: Only disabled|domain_aware|cluster_aware are valid for encryption_at_rest_mode.\n");
				return out;
			}
			out[p + key] = format("%d", mode);
		}

		if (key == "exclude") {
			int p = 0;
			while (p < value.size()) {
				int end = value.find_first_of(',', p);
				if (end == value.npos) {
					end = value.size();
				}
				auto addrRef = StringRef(value).substr(p, end - p);
				AddressExclusion addr = AddressExclusion::parse(addrRef);
				if (addr.isValid()) {
					out[encodeExcludedServersKey(addr)] = "";
				} else {
					printf("Error: invalid address format: %s\n", addrRef.toString().c_str());
				}
				p = end + 1;
			}
		}

		if (key == "storage_engine" || key == "log_engine" || key == "perpetual_storage_wiggle_engine") {
			StringRef s = value;

			// Parse as engine_name[:p=v]... to handle future storage engine params
			Value engine = s.eat(":");
			std::map<Key, Value> params;
			while (!s.empty()) {
				params[s.eat("=")] = s.eat(":");
			}

			try {
				out[p + key] = format("%d", KeyValueStoreType::fromString(engine.toString()).storeType());
			} catch (Error& e) {
				printf("Error: Invalid value for %s (%s): %s\n", key.c_str(), value.c_str(), e.what());
			}
			return out;
		}

		return out;
	}

	Optional<KeyValueStoreType> logType;
	Optional<KeyValueStoreType> storeType;

	// These are legacy shorthand commands to set a specific log engine and storage engine
	// based only on the storage engine name.  Most of them assume SQLite should be the
	// log engine.
	if (mode == "ssd-1") {
		logType = KeyValueStoreType::SSD_BTREE_V1;
		storeType = KeyValueStoreType::SSD_BTREE_V1;
	} else if (mode == "ssd" || mode == "ssd-2") {
		logType = KeyValueStoreType::SSD_BTREE_V2;
		storeType = KeyValueStoreType::SSD_BTREE_V2;
	} else if (mode == "ssd-redwood-1" || mode == "ssd-redwood-1-experimental") {
		logType = KeyValueStoreType::SSD_BTREE_V2;
		storeType = KeyValueStoreType::SSD_REDWOOD_V1;
	} else if (mode == "ssd-rocksdb-v1") {
		logType = KeyValueStoreType::SSD_BTREE_V2;
		storeType = KeyValueStoreType::SSD_ROCKSDB_V1;
	} else if (mode == "ssd-sharded-rocksdb") {
		logType = KeyValueStoreType::SSD_BTREE_V2;
		storeType = KeyValueStoreType::SSD_SHARDED_ROCKSDB;
	} else if (mode == "memory" || mode == "memory-2") {
		logType = KeyValueStoreType::SSD_BTREE_V2;
		storeType = KeyValueStoreType::MEMORY;
	} else if (mode == "memory-1") {
		logType = KeyValueStoreType::MEMORY;
		storeType = KeyValueStoreType::MEMORY;
	} else if (mode == "memory-radixtree-beta") {
		logType = KeyValueStoreType::SSD_BTREE_V2;
		storeType = KeyValueStoreType::MEMORY_RADIXTREE;
	}
	// Add any new store types to fdbserver/workloads/ConfigureDatabase, too

	if (storeType.present()) {
		out[p + "log_engine"] = format("%d", logType.get().storeType());
		out[p + "storage_engine"] = format("%d", storeType.get().storeType());
		return out;
	}

	std::string redundancy, log_replicas;
	Reference<IReplicationPolicy> storagePolicy;
	Reference<IReplicationPolicy> tLogPolicy;

	bool redundancySpecified = true;
	if (mode == "single") {
		redundancy = "1";
		log_replicas = "1";
		storagePolicy = tLogPolicy = Reference<IReplicationPolicy>(new PolicyOne());

	} else if (mode == "double" || mode == "fast_recovery_double") {
		redundancy = "2";
		log_replicas = "2";
		storagePolicy = tLogPolicy = Reference<IReplicationPolicy>(
		    new PolicyAcross(2, "zoneid", Reference<IReplicationPolicy>(new PolicyOne())));
	} else if (mode == "triple" || mode == "fast_recovery_triple") {
		redundancy = "3";
		log_replicas = "3";
		storagePolicy = tLogPolicy = Reference<IReplicationPolicy>(
		    new PolicyAcross(3, "zoneid", Reference<IReplicationPolicy>(new PolicyOne())));
	} else if (mode == "three_datacenter" || mode == "multi_dc") {
		redundancy = "6";
		log_replicas = "4";
		storagePolicy = Reference<IReplicationPolicy>(
		    new PolicyAcross(3,
		                     "dcid",
		                     Reference<IReplicationPolicy>(
		                         new PolicyAcross(2, "zoneid", Reference<IReplicationPolicy>(new PolicyOne())))));
		tLogPolicy = Reference<IReplicationPolicy>(
		    new PolicyAcross(2,
		                     "dcid",
		                     Reference<IReplicationPolicy>(
		                         new PolicyAcross(2, "zoneid", Reference<IReplicationPolicy>(new PolicyOne())))));
	} else if (mode == "three_datacenter_fallback") {
		redundancy = "4";
		log_replicas = "4";
		storagePolicy = tLogPolicy = Reference<IReplicationPolicy>(
		    new PolicyAcross(2,
		                     "dcid",
		                     Reference<IReplicationPolicy>(
		                         new PolicyAcross(2, "zoneid", Reference<IReplicationPolicy>(new PolicyOne())))));
	} else if (mode == "three_data_hall") {
		redundancy = "3";
		log_replicas = "4";
		storagePolicy = Reference<IReplicationPolicy>(
		    new PolicyAcross(3, "data_hall", Reference<IReplicationPolicy>(new PolicyOne())));
		tLogPolicy = Reference<IReplicationPolicy>(
		    new PolicyAcross(2,
		                     "data_hall",
		                     Reference<IReplicationPolicy>(
		                         new PolicyAcross(2, "zoneid", Reference<IReplicationPolicy>(new PolicyOne())))));
	} else if (mode == "three_data_hall_fallback") {
		redundancy = "2";
		log_replicas = "4";
		storagePolicy = Reference<IReplicationPolicy>(
		    new PolicyAcross(2, "data_hall", Reference<IReplicationPolicy>(new PolicyOne())));
		tLogPolicy = Reference<IReplicationPolicy>(
		    new PolicyAcross(2,
		                     "data_hall",
		                     Reference<IReplicationPolicy>(
		                         new PolicyAcross(2, "zoneid", Reference<IReplicationPolicy>(new PolicyOne())))));
	} else
		redundancySpecified = false;
	if (redundancySpecified) {
		out[p + "storage_replicas"] = redundancy;
		out[p + "log_replicas"] = log_replicas;
		out[p + "log_anti_quorum"] = "0";

		BinaryWriter policyWriter(IncludeVersion(ProtocolVersion::withReplicationPolicy()));
		serializeReplicationPolicy(policyWriter, storagePolicy);
		out[p + "storage_replication_policy"] = policyWriter.toValue().toString();

		policyWriter = BinaryWriter(IncludeVersion(ProtocolVersion::withReplicationPolicy()));
		serializeReplicationPolicy(policyWriter, tLogPolicy);
		out[p + "log_replication_policy"] = policyWriter.toValue().toString();
		return out;
	}

	std::string remote_redundancy, remote_log_replicas;
	Reference<IReplicationPolicy> remoteTLogPolicy;
	bool remoteRedundancySpecified = true;
	if (mode == "remote_default") {
		remote_redundancy = "0";
		remote_log_replicas = "0";
		remoteTLogPolicy = Reference<IReplicationPolicy>();
	} else if (mode == "remote_single") {
		remote_redundancy = "1";
		remote_log_replicas = "1";
		remoteTLogPolicy = Reference<IReplicationPolicy>(new PolicyOne());
	} else if (mode == "remote_double") {
		remote_redundancy = "2";
		remote_log_replicas = "2";
		remoteTLogPolicy = Reference<IReplicationPolicy>(
		    new PolicyAcross(2, "zoneid", Reference<IReplicationPolicy>(new PolicyOne())));
	} else if (mode == "remote_triple") {
		remote_redundancy = "3";
		remote_log_replicas = "3";
		remoteTLogPolicy = Reference<IReplicationPolicy>(
		    new PolicyAcross(3, "zoneid", Reference<IReplicationPolicy>(new PolicyOne())));
	} else if (mode == "remote_three_data_hall") { // FIXME: not tested in simulation
		remote_redundancy = "3";
		remote_log_replicas = "4";
		remoteTLogPolicy = Reference<IReplicationPolicy>(
		    new PolicyAcross(2,
		                     "data_hall",
		                     Reference<IReplicationPolicy>(
		                         new PolicyAcross(2, "zoneid", Reference<IReplicationPolicy>(new PolicyOne())))));
	} else
		remoteRedundancySpecified = false;
	if (remoteRedundancySpecified) {
		out[p + "remote_log_replicas"] = remote_log_replicas;

		BinaryWriter policyWriter(IncludeVersion(ProtocolVersion::withReplicationPolicy()));
		serializeReplicationPolicy(policyWriter, remoteTLogPolicy);
		out[p + "remote_log_policy"] = policyWriter.toValue().toString();
		return out;
	}

	return out;
}

ConfigurationResult buildConfiguration(std::vector<StringRef> const& modeTokens,
                                       std::map<std::string, std::string>& outConf) {
	for (auto it : modeTokens) {
		std::string mode = it.toString();
		auto m = configForToken(mode);
		if (!m.size()) {
			TraceEvent(SevWarnAlways, "UnknownOption").detail("Option", mode);
			return ConfigurationResult::UNKNOWN_OPTION;
		}

		for (auto t = m.begin(); t != m.end(); ++t) {
			if (outConf.count(t->first)) {
				TraceEvent(SevWarnAlways, "ConflictingOption")
				    .detail("Option", t->first)
				    .detail("Value", t->second)
				    .detail("ExistingValue", outConf[t->first]);
				return ConfigurationResult::CONFLICTING_OPTIONS;
			}
			outConf[t->first] = t->second;
		}
	}
	auto p = configKeysPrefix.toString();
	if (!outConf.count(p + "storage_replication_policy") && outConf.count(p + "storage_replicas")) {
		int storageCount = stoi(outConf[p + "storage_replicas"]);
		Reference<IReplicationPolicy> storagePolicy = Reference<IReplicationPolicy>(
		    new PolicyAcross(storageCount, "zoneid", Reference<IReplicationPolicy>(new PolicyOne())));
		BinaryWriter policyWriter(IncludeVersion(ProtocolVersion::withReplicationPolicy()));
		serializeReplicationPolicy(policyWriter, storagePolicy);
		outConf[p + "storage_replication_policy"] = policyWriter.toValue().toString();
	}

	if (!outConf.count(p + "log_replication_policy") && outConf.count(p + "log_replicas")) {
		int logCount = stoi(outConf[p + "log_replicas"]);
		Reference<IReplicationPolicy> logPolicy = Reference<IReplicationPolicy>(
		    new PolicyAcross(logCount, "zoneid", Reference<IReplicationPolicy>(new PolicyOne())));
		BinaryWriter policyWriter(IncludeVersion(ProtocolVersion::withReplicationPolicy()));
		serializeReplicationPolicy(policyWriter, logPolicy);
		outConf[p + "log_replication_policy"] = policyWriter.toValue().toString();
	}
	if (outConf.count(p + "istss")) {
		// redo config parameters to be tss config instead of normal config

		// save param values from parsing as a normal config
		bool isNew = outConf.count(p + "initialized");
		Optional<std::string> count;
		Optional<std::string> storageEngine;
		if (outConf.count(p + "count")) {
			count = Optional<std::string>(outConf[p + "count"]);
		}
		if (outConf.count(p + "storage_engine")) {
			storageEngine = Optional<std::string>(outConf[p + "storage_engine"]);
		}

		// A new tss setup must have count + storage engine. An adjustment must have at least one.
		if ((isNew && (!count.present() || !storageEngine.present())) ||
		    (!isNew && !count.present() && !storageEngine.present())) {
			return ConfigurationResult::INCOMPLETE_CONFIGURATION;
		}

		// clear map and only reset tss parameters
		outConf.clear();
		if (count.present()) {
			outConf[p + "tss_count"] = count.get();
		}
		if (storageEngine.present()) {
			outConf[p + "tss_storage_engine"] = storageEngine.get();
		}
	}
	return ConfigurationResult::SUCCESS;
}

ConfigurationResult buildConfiguration(std::string const& configMode, std::map<std::string, std::string>& outConf) {
	std::vector<StringRef> modes;

	int p = 0;
	while (p < configMode.size()) {
		int end = configMode.find_first_of(' ', p);
		if (end == configMode.npos)
			end = configMode.size();
		modes.push_back(StringRef(configMode).substr(p, end - p));
		p = end + 1;
	}

	return buildConfiguration(modes, outConf);
}

bool isCompleteConfiguration(std::map<std::string, std::string> const& options) {
	std::string p = configKeysPrefix.toString();

	return options.count(p + "log_replicas") == 1 && options.count(p + "log_anti_quorum") == 1 &&
	       options.count(p + "storage_replicas") == 1 && options.count(p + "log_engine") == 1 &&
	       options.count(p + "storage_engine") == 1;
}

/*
    - Validates encryption and tenant mode configurations
    - During cluster creation (configure new) we allow the following:
        - If encryption mode is disabled/cluster_aware then any tenant mode is allowed
        - If the encryption mode is domain_aware then the only allowed tenant mode is required
    - During cluster configuration changes the following is allowed:
        - Encryption mode cannot be changed (can only be set during creation)
        - If the encryption mode is disabled/cluster_aware then any tenant mode changes are allowed
        - If the encryption mode is domain_aware then tenant mode changes are not allowed (as the only supported mode is
          required)
*/
bool isEncryptionAtRestModeConfigValid(Optional<DatabaseConfiguration> oldConfiguration,
                                       std::map<std::string, std::string> newConfig,
                                       bool creating) {
	EncryptionAtRestMode encryptMode;
	TenantMode tenantMode;
	if (creating) {
		if (newConfig.count(encryptionAtRestModeConfKey.toString()) != 0) {
			encryptMode = EncryptionAtRestMode::fromValueRef(
			    ValueRef(newConfig.find(encryptionAtRestModeConfKey.toString())->second));
			// check if the tenant mode is being set during configure new (otherwise assume tenants are disabled)
			if (newConfig.count(tenantModeConfKey.toString()) != 0) {
				tenantMode = TenantMode::fromValue(ValueRef(newConfig.find(tenantModeConfKey.toString())->second));
			}
		}
	} else {
		ASSERT(oldConfiguration.present());
		encryptMode = oldConfiguration.get().encryptionAtRestMode;
		if (newConfig.count(tenantModeConfKey.toString()) != 0) {
			tenantMode = TenantMode::fromValue(ValueRef(newConfig.find(tenantModeConfKey.toString())->second));
		} else {
			// Tenant mode and encryption mode didn't change
			return true;
		}
	}
	TraceEvent(SevDebug, "EncryptAndTenantModes")
	    .detail("EncryptMode", encryptMode.toString())
	    .detail("TenantMode", tenantMode.toString());

	if (encryptMode.mode == EncryptionAtRestMode::DOMAIN_AWARE && tenantMode != TenantMode::REQUIRED) {
		// For domain aware encryption only the required tenant mode is currently supported
		TraceEvent(SevWarnAlways, "InvalidEncryptAndTenantConfiguration")
		    .detail("EncryptMode", encryptMode.toString())
		    .detail("TenantMode", tenantMode.toString());
		return false;
	}

	return true;
}

bool isTenantModeModeConfigValid(DatabaseConfiguration oldConfiguration, DatabaseConfiguration newConfiguration) {
	TenantMode oldTenantMode = oldConfiguration.tenantMode;
	TenantMode newTenantMode = newConfiguration.tenantMode;
	TraceEvent(SevDebug, "TenantModes")
	    .detail("OldTenantMode", oldTenantMode.toString())
	    .detail("NewTenantMode", newTenantMode.toString());
	if (oldTenantMode != TenantMode::REQUIRED && newTenantMode == TenantMode::REQUIRED) {
		// TODO: Changing from optional/disabled to required tenant mode should be allowed if there is no non-tenant
		// data present
		TraceEvent(SevWarnAlways, "InvalidTenantConfiguration")
		    .detail("OldTenantMode", oldTenantMode.toString())
		    .detail("NewTenantMode", newTenantMode.toString());
		return false;
	}
	return true;
}

															#line 583 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via flowTestCase581()
															#line 581 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
template <class FlowTestCase581Actor>
															#line 581 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class FlowTestCase581ActorState {
															#line 590 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
															#line 581 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	FlowTestCase581ActorState(UnitTestParameters const& params) 
															#line 581 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
															#line 581 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		 : params(params)
															#line 597 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("flowTestCase581", reinterpret_cast<unsigned long>(this));

	}
	~FlowTestCase581ActorState() 
	{
		fdb_probe_actor_destroy("flowTestCase581", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 582 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			DatabaseConfiguration oldConfig;
															#line 583 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			DatabaseConfiguration newConfig;
															#line 584 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			std::vector<TenantMode> tenantModes = { TenantMode::DISABLED, TenantMode::OPTIONAL_TENANT, TenantMode::REQUIRED };
															#line 586 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			oldConfig.tenantMode = TenantMode::REQUIRED;
															#line 587 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			newConfig.tenantMode = deterministicRandom()->randomChoice(tenantModes);
															#line 588 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			ASSERT(isTenantModeModeConfigValid(oldConfig, newConfig));
															#line 590 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			oldConfig.tenantMode = deterministicRandom()->coinflip() ? TenantMode::DISABLED : TenantMode::OPTIONAL_TENANT;
															#line 591 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			newConfig.tenantMode = deterministicRandom()->coinflip() ? TenantMode::DISABLED : TenantMode::OPTIONAL_TENANT;
															#line 592 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			ASSERT(isTenantModeModeConfigValid(oldConfig, newConfig));
															#line 594 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			oldConfig.tenantMode = deterministicRandom()->coinflip() ? TenantMode::DISABLED : TenantMode::OPTIONAL_TENANT;
															#line 595 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			newConfig.tenantMode = TenantMode::REQUIRED;
															#line 596 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			ASSERT(!isTenantModeModeConfigValid(oldConfig, newConfig));
															#line 598 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (!static_cast<FlowTestCase581Actor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~FlowTestCase581ActorState(); static_cast<FlowTestCase581Actor*>(this)->destroy(); return 0; }
															#line 636 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			new (&static_cast<FlowTestCase581Actor*>(this)->SAV< Void >::value()) Void(Void());
			this->~FlowTestCase581ActorState();
			static_cast<FlowTestCase581Actor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~FlowTestCase581ActorState();
		static_cast<FlowTestCase581Actor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
															#line 581 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	UnitTestParameters params;
															#line 660 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
};
// This generated class is to be used only via flowTestCase581()
															#line 581 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class FlowTestCase581Actor final : public Actor<Void>, public FastAllocated<FlowTestCase581Actor>, public FlowTestCase581ActorState<FlowTestCase581Actor> {
															#line 665 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
	using FastAllocated<FlowTestCase581Actor>::operator new;
	using FastAllocated<FlowTestCase581Actor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
															#line 581 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	FlowTestCase581Actor(UnitTestParameters const& params) 
															#line 675 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		 : Actor<Void>(),
		   FlowTestCase581ActorState<FlowTestCase581Actor>(params)
	{
		fdb_probe_actor_enter("flowTestCase581", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("flowTestCase581");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("flowTestCase581", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		}

	}
};
}
															#line 581 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
static Future<Void> flowTestCase581( UnitTestParameters const& params ) {
															#line 581 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	return Future<Void>(new FlowTestCase581Actor(params));
															#line 702 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
}
ACTOR_TEST_CASE(flowTestCase581, "/ManagementAPI/ChangeConfig/TenantMode")

#line 600 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"

// unit test for changing encryption/tenant mode config options
															#line 709 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via flowTestCase602()
															#line 602 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
template <class FlowTestCase602Actor>
															#line 602 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class FlowTestCase602ActorState {
															#line 716 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
															#line 602 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	FlowTestCase602ActorState(UnitTestParameters const& params) 
															#line 602 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
															#line 602 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		 : params(params)
															#line 723 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("flowTestCase602", reinterpret_cast<unsigned long>(this));

	}
	~FlowTestCase602ActorState() 
	{
		fdb_probe_actor_destroy("flowTestCase602", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 603 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			std::map<std::string, std::string> newConfig;
															#line 604 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			std::string encryptModeKey = encryptionAtRestModeConfKey.toString();
															#line 605 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			std::string tenantModeKey = tenantModeConfKey.toString();
															#line 606 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			std::vector<TenantMode> tenantModes = { TenantMode::DISABLED, TenantMode::OPTIONAL_TENANT, TenantMode::REQUIRED };
															#line 607 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			std::vector<EncryptionAtRestMode> encryptionModes = { EncryptionAtRestMode::DISABLED, EncryptionAtRestMode::CLUSTER_AWARE, EncryptionAtRestMode::DOMAIN_AWARE };
															#line 613 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			newConfig[encryptModeKey] = std::to_string(EncryptionAtRestMode::DISABLED);
															#line 614 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			newConfig[tenantModeKey] = std::to_string(deterministicRandom()->randomChoice(tenantModes));
															#line 615 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			ASSERT(isEncryptionAtRestModeConfigValid(Optional<DatabaseConfiguration>(), newConfig, true));
															#line 618 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			newConfig[encryptModeKey] = std::to_string(EncryptionAtRestMode::CLUSTER_AWARE);
															#line 619 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			newConfig[tenantModeKey] = std::to_string(deterministicRandom()->randomChoice(tenantModes));
															#line 620 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			ASSERT(isEncryptionAtRestModeConfigValid(Optional<DatabaseConfiguration>(), newConfig, true));
															#line 623 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			newConfig[encryptModeKey] = std::to_string(EncryptionAtRestMode::DOMAIN_AWARE);
															#line 624 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			newConfig[tenantModeKey] = std::to_string(deterministicRandom()->coinflip() ? TenantMode::DISABLED : TenantMode::OPTIONAL_TENANT);
															#line 626 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			ASSERT(!isEncryptionAtRestModeConfigValid(Optional<DatabaseConfiguration>(), newConfig, true));
															#line 627 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			newConfig[tenantModeKey] = std::to_string(TenantMode::REQUIRED);
															#line 628 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			ASSERT(isEncryptionAtRestModeConfigValid(Optional<DatabaseConfiguration>(), newConfig, true));
															#line 631 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			newConfig.erase(encryptModeKey);
															#line 632 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			newConfig[tenantModeKey] = std::to_string(deterministicRandom()->randomChoice(tenantModes));
															#line 633 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			ASSERT(isEncryptionAtRestModeConfigValid(Optional<DatabaseConfiguration>(), newConfig, true));
															#line 636 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			newConfig.erase(tenantModeKey);
															#line 637 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			newConfig[encryptModeKey] = std::to_string(EncryptionAtRestMode::DOMAIN_AWARE);
															#line 638 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			ASSERT(!isEncryptionAtRestModeConfigValid(Optional<DatabaseConfiguration>(), newConfig, true));
															#line 639 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			newConfig[encryptModeKey] = std::to_string(EncryptionAtRestMode::CLUSTER_AWARE);
															#line 640 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			ASSERT(isEncryptionAtRestModeConfigValid(Optional<DatabaseConfiguration>(), newConfig, true));
															#line 643 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			DatabaseConfiguration oldConfig;
															#line 646 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			oldConfig.encryptionAtRestMode = EncryptionAtRestMode::DISABLED;
															#line 647 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			oldConfig.tenantMode = deterministicRandom()->randomChoice(tenantModes);
															#line 648 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			newConfig[tenantModeKey] = std::to_string(deterministicRandom()->randomChoice(tenantModes));
															#line 649 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			ASSERT(isEncryptionAtRestModeConfigValid(oldConfig, newConfig, false));
															#line 652 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			oldConfig.encryptionAtRestMode = EncryptionAtRestMode::DOMAIN_AWARE;
															#line 653 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			oldConfig.tenantMode = TenantMode::REQUIRED;
															#line 654 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			newConfig[tenantModeKey] = std::to_string(deterministicRandom()->coinflip() ? TenantMode::DISABLED : TenantMode::OPTIONAL_TENANT);
															#line 656 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			ASSERT(!isEncryptionAtRestModeConfigValid(oldConfig, newConfig, false));
															#line 657 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			newConfig[tenantModeKey] = std::to_string(TenantMode::REQUIRED);
															#line 658 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			ASSERT(isEncryptionAtRestModeConfigValid(oldConfig, newConfig, false));
															#line 661 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			oldConfig.encryptionAtRestMode = EncryptionAtRestMode::CLUSTER_AWARE;
															#line 663 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			oldConfig.tenantMode = deterministicRandom()->randomChoice(tenantModes);
															#line 664 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			newConfig[tenantModeKey] = std::to_string(deterministicRandom()->randomChoice(tenantModes));
															#line 665 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			ASSERT(isEncryptionAtRestModeConfigValid(oldConfig, newConfig, false));
															#line 668 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			newConfig.erase(tenantModeKey);
															#line 669 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			oldConfig.tenantMode = deterministicRandom()->randomChoice(tenantModes);
															#line 670 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			oldConfig.encryptionAtRestMode = deterministicRandom()->randomChoice(encryptionModes);
															#line 671 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			ASSERT(isEncryptionAtRestModeConfigValid(oldConfig, newConfig, false));
															#line 673 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (!static_cast<FlowTestCase602Actor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~FlowTestCase602ActorState(); static_cast<FlowTestCase602Actor*>(this)->destroy(); return 0; }
															#line 824 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			new (&static_cast<FlowTestCase602Actor*>(this)->SAV< Void >::value()) Void(Void());
			this->~FlowTestCase602ActorState();
			static_cast<FlowTestCase602Actor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~FlowTestCase602ActorState();
		static_cast<FlowTestCase602Actor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
															#line 602 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	UnitTestParameters params;
															#line 848 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
};
// This generated class is to be used only via flowTestCase602()
															#line 602 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class FlowTestCase602Actor final : public Actor<Void>, public FastAllocated<FlowTestCase602Actor>, public FlowTestCase602ActorState<FlowTestCase602Actor> {
															#line 853 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
	using FastAllocated<FlowTestCase602Actor>::operator new;
	using FastAllocated<FlowTestCase602Actor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
															#line 602 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	FlowTestCase602Actor(UnitTestParameters const& params) 
															#line 863 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		 : Actor<Void>(),
		   FlowTestCase602ActorState<FlowTestCase602Actor>(params)
	{
		fdb_probe_actor_enter("flowTestCase602", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("flowTestCase602");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("flowTestCase602", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		}

	}
};
}
															#line 602 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
static Future<Void> flowTestCase602( UnitTestParameters const& params ) {
															#line 602 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	return Future<Void>(new FlowTestCase602Actor(params));
															#line 890 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
}
ACTOR_TEST_CASE(flowTestCase602, "/ManagementAPI/ChangeConfig/TenantAndEncryptMode")

#line 675 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"

															#line 896 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via getDatabaseConfiguration()
															#line 676 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
template <class GetDatabaseConfigurationActor>
															#line 676 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class GetDatabaseConfigurationActorState {
															#line 903 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
															#line 676 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	GetDatabaseConfigurationActorState(Transaction* const& tr,bool const& useSystemPriority) 
															#line 676 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
															#line 676 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		 : tr(tr),
															#line 676 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   useSystemPriority(useSystemPriority)
															#line 912 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("getDatabaseConfiguration", reinterpret_cast<unsigned long>(this));

	}
	~GetDatabaseConfigurationActorState() 
	{
		fdb_probe_actor_destroy("getDatabaseConfiguration", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 677 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (useSystemPriority)
															#line 927 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 678 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				tr->setOption(FDBTransactionOptions::PRIORITY_SYSTEM_IMMEDIATE);
															#line 931 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			}
															#line 680 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr->setOption(FDBTransactionOptions::READ_LOCK_AWARE);
															#line 681 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr->setOption(FDBTransactionOptions::READ_SYSTEM_KEYS);
															#line 682 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<RangeResult> __when_expr_0 = tr->getRange(configKeys, CLIENT_KNOBS->TOO_MANY);
															#line 682 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<GetDatabaseConfigurationActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 941 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<GetDatabaseConfigurationActor*>(this)->actor_wait_state = 1;
															#line 682 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< GetDatabaseConfigurationActor, 0, RangeResult >*>(static_cast<GetDatabaseConfigurationActor*>(this)));
															#line 946 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~GetDatabaseConfigurationActorState();
		static_cast<GetDatabaseConfigurationActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(RangeResult const& res,int loopDepth) 
	{
															#line 683 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		ASSERT(res.size() < CLIENT_KNOBS->TOO_MANY);
															#line 684 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		DatabaseConfiguration config;
															#line 685 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		config.fromKeyValues((VectorRef<KeyValueRef>)res);
															#line 686 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<GetDatabaseConfigurationActor*>(this)->SAV<DatabaseConfiguration>::futures) { (void)(config); this->~GetDatabaseConfigurationActorState(); static_cast<GetDatabaseConfigurationActor*>(this)->destroy(); return 0; }
															#line 975 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<GetDatabaseConfigurationActor*>(this)->SAV< DatabaseConfiguration >::value()) DatabaseConfiguration(config);
		this->~GetDatabaseConfigurationActorState();
		static_cast<GetDatabaseConfigurationActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1(RangeResult && res,int loopDepth) 
	{
															#line 683 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		ASSERT(res.size() < CLIENT_KNOBS->TOO_MANY);
															#line 684 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		DatabaseConfiguration config;
															#line 685 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		config.fromKeyValues((VectorRef<KeyValueRef>)res);
															#line 686 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<GetDatabaseConfigurationActor*>(this)->SAV<DatabaseConfiguration>::futures) { (void)(config); this->~GetDatabaseConfigurationActorState(); static_cast<GetDatabaseConfigurationActor*>(this)->destroy(); return 0; }
															#line 993 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<GetDatabaseConfigurationActor*>(this)->SAV< DatabaseConfiguration >::value()) DatabaseConfiguration(config);
		this->~GetDatabaseConfigurationActorState();
		static_cast<GetDatabaseConfigurationActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1when1(RangeResult const& res,int loopDepth) 
	{
		loopDepth = a_body1cont1(res, loopDepth);

		return loopDepth;
	}
	int a_body1when1(RangeResult && res,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(res), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<GetDatabaseConfigurationActor*>(this)->actor_wait_state > 0) static_cast<GetDatabaseConfigurationActor*>(this)->actor_wait_state = 0;
		static_cast<GetDatabaseConfigurationActor*>(this)->ActorCallback< GetDatabaseConfigurationActor, 0, RangeResult >::remove();

	}
	void a_callback_fire(ActorCallback< GetDatabaseConfigurationActor, 0, RangeResult >*,RangeResult const& value) 
	{
		fdb_probe_actor_enter("getDatabaseConfiguration", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getDatabaseConfiguration", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< GetDatabaseConfigurationActor, 0, RangeResult >*,RangeResult && value) 
	{
		fdb_probe_actor_enter("getDatabaseConfiguration", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getDatabaseConfiguration", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< GetDatabaseConfigurationActor, 0, RangeResult >*,Error err) 
	{
		fdb_probe_actor_enter("getDatabaseConfiguration", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getDatabaseConfiguration", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 676 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Transaction* tr;
															#line 676 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	bool useSystemPriority;
															#line 1068 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
};
// This generated class is to be used only via getDatabaseConfiguration()
															#line 676 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class GetDatabaseConfigurationActor final : public Actor<DatabaseConfiguration>, public ActorCallback< GetDatabaseConfigurationActor, 0, RangeResult >, public FastAllocated<GetDatabaseConfigurationActor>, public GetDatabaseConfigurationActorState<GetDatabaseConfigurationActor> {
															#line 1073 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
	using FastAllocated<GetDatabaseConfigurationActor>::operator new;
	using FastAllocated<GetDatabaseConfigurationActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<DatabaseConfiguration>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< GetDatabaseConfigurationActor, 0, RangeResult >;
															#line 676 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	GetDatabaseConfigurationActor(Transaction* const& tr,bool const& useSystemPriority) 
															#line 1084 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		 : Actor<DatabaseConfiguration>(),
		   GetDatabaseConfigurationActorState<GetDatabaseConfigurationActor>(tr, useSystemPriority)
	{
		fdb_probe_actor_enter("getDatabaseConfiguration", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("getDatabaseConfiguration");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("getDatabaseConfiguration", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< GetDatabaseConfigurationActor, 0, RangeResult >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 676 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
[[nodiscard]] Future<DatabaseConfiguration> getDatabaseConfiguration( Transaction* const& tr, bool const& useSystemPriority ) {
															#line 676 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	return Future<DatabaseConfiguration>(new GetDatabaseConfigurationActor(tr, useSystemPriority));
															#line 1112 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
}

#line 688 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"

															#line 1117 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via getDatabaseConfiguration()
															#line 689 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
template <class GetDatabaseConfigurationActor1>
															#line 689 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class GetDatabaseConfigurationActor1State {
															#line 1124 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
															#line 689 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	GetDatabaseConfigurationActor1State(Database const& cx,bool const& useSystemPriority) 
															#line 689 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
															#line 689 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		 : cx(cx),
															#line 689 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   useSystemPriority(useSystemPriority),
															#line 690 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   tr(cx)
															#line 1135 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("getDatabaseConfiguration", reinterpret_cast<unsigned long>(this));

	}
	~GetDatabaseConfigurationActor1State() 
	{
		fdb_probe_actor_destroy("getDatabaseConfiguration", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 691 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			;
															#line 1150 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~GetDatabaseConfigurationActor1State();
		static_cast<GetDatabaseConfigurationActor1*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
		try {
															#line 693 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<DatabaseConfiguration> __when_expr_0 = getDatabaseConfiguration(&tr, useSystemPriority);
															#line 693 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<GetDatabaseConfigurationActor1*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 1183 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1loopBody1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
			static_cast<GetDatabaseConfigurationActor1*>(this)->actor_wait_state = 1;
															#line 693 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< GetDatabaseConfigurationActor1, 0, DatabaseConfiguration >*>(static_cast<GetDatabaseConfigurationActor1*>(this)));
															#line 1188 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 696 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Void> __when_expr_1 = tr.onError(e);
															#line 696 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<GetDatabaseConfigurationActor1*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 1212 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1Catch1when1(__when_expr_1.get(), loopDepth); };
			static_cast<GetDatabaseConfigurationActor1*>(this)->actor_wait_state = 2;
															#line 696 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< GetDatabaseConfigurationActor1, 1, Void >*>(static_cast<GetDatabaseConfigurationActor1*>(this)));
															#line 1217 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(DatabaseConfiguration const& config,int loopDepth) 
	{
															#line 694 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<GetDatabaseConfigurationActor1*>(this)->SAV<DatabaseConfiguration>::futures) { (void)(config); this->~GetDatabaseConfigurationActor1State(); static_cast<GetDatabaseConfigurationActor1*>(this)->destroy(); return 0; }
															#line 1232 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<GetDatabaseConfigurationActor1*>(this)->SAV< DatabaseConfiguration >::value()) DatabaseConfiguration(config);
		this->~GetDatabaseConfigurationActor1State();
		static_cast<GetDatabaseConfigurationActor1*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2(DatabaseConfiguration && config,int loopDepth) 
	{
															#line 694 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<GetDatabaseConfigurationActor1*>(this)->SAV<DatabaseConfiguration>::futures) { (void)(config); this->~GetDatabaseConfigurationActor1State(); static_cast<GetDatabaseConfigurationActor1*>(this)->destroy(); return 0; }
															#line 1244 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<GetDatabaseConfigurationActor1*>(this)->SAV< DatabaseConfiguration >::value()) DatabaseConfiguration(config);
		this->~GetDatabaseConfigurationActor1State();
		static_cast<GetDatabaseConfigurationActor1*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1when1(DatabaseConfiguration const& config,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(config, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(DatabaseConfiguration && config,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(std::move(config), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<GetDatabaseConfigurationActor1*>(this)->actor_wait_state > 0) static_cast<GetDatabaseConfigurationActor1*>(this)->actor_wait_state = 0;
		static_cast<GetDatabaseConfigurationActor1*>(this)->ActorCallback< GetDatabaseConfigurationActor1, 0, DatabaseConfiguration >::remove();

	}
	void a_callback_fire(ActorCallback< GetDatabaseConfigurationActor1, 0, DatabaseConfiguration >*,DatabaseConfiguration const& value) 
	{
		fdb_probe_actor_enter("getDatabaseConfiguration", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getDatabaseConfiguration", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< GetDatabaseConfigurationActor1, 0, DatabaseConfiguration >*,DatabaseConfiguration && value) 
	{
		fdb_probe_actor_enter("getDatabaseConfiguration", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getDatabaseConfiguration", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< GetDatabaseConfigurationActor1, 0, DatabaseConfiguration >*,Error err) 
	{
		fdb_probe_actor_enter("getDatabaseConfiguration", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getDatabaseConfiguration", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<GetDatabaseConfigurationActor1*>(this)->actor_wait_state > 0) static_cast<GetDatabaseConfigurationActor1*>(this)->actor_wait_state = 0;
		static_cast<GetDatabaseConfigurationActor1*>(this)->ActorCallback< GetDatabaseConfigurationActor1, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetDatabaseConfigurationActor1, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getDatabaseConfiguration", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getDatabaseConfiguration", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< GetDatabaseConfigurationActor1, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getDatabaseConfiguration", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getDatabaseConfiguration", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< GetDatabaseConfigurationActor1, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getDatabaseConfiguration", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getDatabaseConfiguration", reinterpret_cast<unsigned long>(this), 1);

	}
															#line 689 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Database cx;
															#line 689 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	bool useSystemPriority;
															#line 690 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Transaction tr;
															#line 1396 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
};
// This generated class is to be used only via getDatabaseConfiguration()
															#line 689 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class GetDatabaseConfigurationActor1 final : public Actor<DatabaseConfiguration>, public ActorCallback< GetDatabaseConfigurationActor1, 0, DatabaseConfiguration >, public ActorCallback< GetDatabaseConfigurationActor1, 1, Void >, public FastAllocated<GetDatabaseConfigurationActor1>, public GetDatabaseConfigurationActor1State<GetDatabaseConfigurationActor1> {
															#line 1401 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
	using FastAllocated<GetDatabaseConfigurationActor1>::operator new;
	using FastAllocated<GetDatabaseConfigurationActor1>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<DatabaseConfiguration>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< GetDatabaseConfigurationActor1, 0, DatabaseConfiguration >;
friend struct ActorCallback< GetDatabaseConfigurationActor1, 1, Void >;
															#line 689 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	GetDatabaseConfigurationActor1(Database const& cx,bool const& useSystemPriority) 
															#line 1413 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		 : Actor<DatabaseConfiguration>(),
		   GetDatabaseConfigurationActor1State<GetDatabaseConfigurationActor1>(cx, useSystemPriority)
	{
		fdb_probe_actor_enter("getDatabaseConfiguration", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("getDatabaseConfiguration");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("getDatabaseConfiguration", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< GetDatabaseConfigurationActor1, 0, DatabaseConfiguration >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< GetDatabaseConfigurationActor1, 1, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 689 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
[[nodiscard]] Future<DatabaseConfiguration> getDatabaseConfiguration( Database const& cx, bool const& useSystemPriority ) {
															#line 689 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	return Future<DatabaseConfiguration>(new GetDatabaseConfigurationActor1(cx, useSystemPriority));
															#line 1442 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
}

#line 700 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"

ConfigureAutoResult parseConfig(StatusObject const& status) {
	ConfigureAutoResult result;
	StatusObjectReader statusObj(status);

	StatusObjectReader statusObjCluster;
	if (!statusObj.get("cluster", statusObjCluster))
		return ConfigureAutoResult();

	StatusObjectReader statusObjConfig;
	if (!statusObjCluster.get("configuration", statusObjConfig))
		return ConfigureAutoResult();

	if (!statusObjConfig.get("redundancy.factor", result.old_replication))
		return ConfigureAutoResult();

	result.auto_replication = result.old_replication;

	[[maybe_unused]] int storage_replication;
	int log_replication;
	if (result.old_replication == "single") {
		result.auto_replication = "double";
		storage_replication = 2;
		log_replication = 2;
	} else if (result.old_replication == "double" || result.old_replication == "fast_recovery_double") {
		storage_replication = 2;
		log_replication = 2;
	} else if (result.old_replication == "triple" || result.old_replication == "fast_recovery_triple") {
		storage_replication = 3;
		log_replication = 3;
	} else if (result.old_replication == "three_datacenter") {
		storage_replication = 6;
		log_replication = 4;
	} else if (result.old_replication == "three_datacenter_fallback") {
		storage_replication = 4;
		log_replication = 4;
	} else if (result.old_replication == "three_data_hall") {
		storage_replication = 3;
		log_replication = 4;
	} else if (result.old_replication == "three_data_hall_fallback") {
		storage_replication = 2;
		log_replication = 4;
	} else
		return ConfigureAutoResult();

	StatusObjectReader machinesMap;
	if (!statusObjCluster.get("machines", machinesMap))
		return ConfigureAutoResult();

	std::map<std::string, std::string> machineid_dcid;
	std::set<std::string> datacenters;
	int machineCount = 0;
	for (auto mach : machinesMap.obj()) {
		StatusObjectReader machine(mach.second);
		std::string dcId;
		if (machine.get("datacenter_id", dcId)) {
			machineid_dcid[mach.first] = dcId;
			datacenters.insert(dcId);
		}
		machineCount++;
	}

	result.machines = machineCount;

	if (datacenters.size() > 1)
		return ConfigureAutoResult();

	StatusObjectReader processesMap;
	if (!statusObjCluster.get("processes", processesMap))
		return ConfigureAutoResult();

	std::set<std::string> oldMachinesWithTransaction;
	int oldTransactionProcesses = 0;
	std::map<std::string, std::vector<std::pair<NetworkAddress, ProcessClass>>> machine_processes;
	int processCount = 0;
	for (auto proc : processesMap.obj()) {
		StatusObjectReader process(proc.second);
		if (!process.has("excluded") || !process.last().get_bool()) {
			std::string addrStr;
			if (!process.get("address", addrStr))
				return ConfigureAutoResult();
			std::string class_source;
			if (!process.get("class_source", class_source))
				return ConfigureAutoResult();
			std::string class_type;
			if (!process.get("class_type", class_type))
				return ConfigureAutoResult();
			std::string machineId;
			if (!process.get("machine_id", machineId))
				return ConfigureAutoResult();

			NetworkAddress addr = NetworkAddress::parse(addrStr);
			ProcessClass processClass(class_type, class_source);

			if (processClass.classType() == ProcessClass::TransactionClass ||
			    processClass.classType() == ProcessClass::LogClass) {
				oldMachinesWithTransaction.insert(machineId);
			}

			if (processClass.classType() == ProcessClass::TransactionClass ||
			    processClass.classType() == ProcessClass::CommitProxyClass ||
			    processClass.classType() == ProcessClass::GrvProxyClass ||
			    processClass.classType() == ProcessClass::ResolutionClass ||
			    processClass.classType() == ProcessClass::StatelessClass ||
			    processClass.classType() == ProcessClass::LogClass) {
				oldTransactionProcesses++;
			}

			if (processClass.classSource() == ProcessClass::AutoSource) {
				processClass = ProcessClass(ProcessClass::UnsetClass, ProcessClass::CommandLineSource);
				result.address_class[addr] = processClass;
			}

			if (processClass.classType() != ProcessClass::TesterClass) {
				machine_processes[machineId].emplace_back(addr, processClass);
				processCount++;
			}
		}
	}

	result.processes = processCount;
	result.old_processes_with_transaction = oldTransactionProcesses;
	result.old_machines_with_transaction = oldMachinesWithTransaction.size();

	std::map<std::pair<int, std::string>, std::vector<std::pair<NetworkAddress, ProcessClass>>> count_processes;
	for (auto& it : machine_processes) {
		count_processes[std::make_pair(it.second.size(), it.first)] = it.second;
	}

	std::set<std::string> machinesWithTransaction;
	std::set<std::string> machinesWithStorage;
	int totalTransactionProcesses = 0;
	int existingProxyCount = 0;
	int existingGrvProxyCount = 0;
	int existingResolverCount = 0;
	int existingStatelessCount = 0;
	for (auto& it : machine_processes) {
		for (auto& proc : it.second) {
			if (proc.second == ProcessClass::TransactionClass || proc.second == ProcessClass::LogClass) {
				totalTransactionProcesses++;
				machinesWithTransaction.insert(it.first);
			}
			if (proc.second == ProcessClass::StatelessClass) {
				existingStatelessCount++;
			}
			if (proc.second == ProcessClass::CommitProxyClass) {
				existingProxyCount++;
			}
			if (proc.second == ProcessClass::GrvProxyClass) {
				existingGrvProxyCount++;
			}
			if (proc.second == ProcessClass::ResolutionClass) {
				existingResolverCount++;
			}
			if (proc.second == ProcessClass::StorageClass) {
				machinesWithStorage.insert(it.first);
			}
			if (proc.second == ProcessClass::UnsetClass && proc.second.classSource() == ProcessClass::DBSource) {
				machinesWithStorage.insert(it.first);
			}
		}
	}

	if (processCount < 10)
		return ConfigureAutoResult();

	result.desired_resolvers = 1;
	int resolverCount;
	if (!statusObjConfig.get("resolvers", result.old_resolvers)) {
		result.old_resolvers = CLIENT_KNOBS->DEFAULT_AUTO_RESOLVERS;
		statusObjConfig.get("auto_resolvers", result.old_resolvers);
		result.auto_resolvers = result.desired_resolvers;
		resolverCount = result.auto_resolvers;
	} else {
		result.auto_resolvers = result.old_resolvers;
		resolverCount = result.old_resolvers;
	}

	result.desired_commit_proxies = std::max(std::min(12, processCount / 15), 1);
	int proxyCount;
	if (!statusObjConfig.get("commit_proxies", result.old_commit_proxies)) {
		result.old_commit_proxies = CLIENT_KNOBS->DEFAULT_AUTO_COMMIT_PROXIES;
		statusObjConfig.get("auto_commit_proxies", result.old_commit_proxies);
		result.auto_commit_proxies = result.desired_commit_proxies;
		proxyCount = result.auto_commit_proxies;
	} else {
		result.auto_commit_proxies = result.old_commit_proxies;
		proxyCount = result.old_commit_proxies;
	}

	result.desired_grv_proxies = std::max(std::min(4, processCount / 20), 1);
	int grvProxyCount;
	if (!statusObjConfig.get("grv_proxies", result.old_grv_proxies)) {
		result.old_grv_proxies = CLIENT_KNOBS->DEFAULT_AUTO_GRV_PROXIES;
		statusObjConfig.get("auto_grv_proxies", result.old_grv_proxies);
		result.auto_grv_proxies = result.desired_grv_proxies;
		grvProxyCount = result.auto_grv_proxies;
	} else {
		result.auto_grv_proxies = result.old_grv_proxies;
		grvProxyCount = result.old_grv_proxies;
	}

	result.desired_logs = std::min(12, processCount / 20);
	result.desired_logs = std::max(result.desired_logs, log_replication + 1);
	result.desired_logs = std::min<int>(result.desired_logs, machine_processes.size());
	int logCount;
	if (!statusObjConfig.get("logs", result.old_logs)) {
		result.old_logs = CLIENT_KNOBS->DEFAULT_AUTO_LOGS;
		statusObjConfig.get("auto_logs", result.old_logs);
		result.auto_logs = result.desired_logs;
		logCount = result.auto_logs;
	} else {
		result.auto_logs = result.old_logs;
		logCount = result.old_logs;
	}

	logCount = std::max(logCount, log_replication);

	totalTransactionProcesses += std::min(existingProxyCount, proxyCount);
	totalTransactionProcesses += std::min(existingGrvProxyCount, grvProxyCount);
	totalTransactionProcesses += std::min(existingResolverCount, resolverCount);
	totalTransactionProcesses += existingStatelessCount;

	// if one process on a machine is transaction class, make them all transaction class
	for (auto& it : count_processes) {
		if (machinesWithTransaction.count(it.first.second) && !machinesWithStorage.count(it.first.second)) {
			for (auto& proc : it.second) {
				if (proc.second == ProcessClass::UnsetClass &&
				    proc.second.classSource() == ProcessClass::CommandLineSource) {
					result.address_class[proc.first] =
					    ProcessClass(ProcessClass::TransactionClass, ProcessClass::AutoSource);
					totalTransactionProcesses++;
				}
			}
		}
	}

	int desiredTotalTransactionProcesses = logCount + resolverCount + proxyCount + grvProxyCount;

	// add machines with all transaction class until we have enough processes and enough machines
	for (auto& it : count_processes) {
		if (machinesWithTransaction.size() >= logCount && totalTransactionProcesses >= desiredTotalTransactionProcesses)
			break;

		if (!machinesWithTransaction.count(it.first.second) && !machinesWithStorage.count(it.first.second)) {
			for (auto& proc : it.second) {
				if (proc.second == ProcessClass::UnsetClass &&
				    proc.second.classSource() == ProcessClass::CommandLineSource) {
					ASSERT(proc.second != ProcessClass::TransactionClass);
					result.address_class[proc.first] =
					    ProcessClass(ProcessClass::TransactionClass, ProcessClass::AutoSource);
					totalTransactionProcesses++;
					machinesWithTransaction.insert(it.first.second);
				}
			}
		}
	}

	if (machinesWithTransaction.size() < logCount || totalTransactionProcesses < desiredTotalTransactionProcesses)
		return ConfigureAutoResult();

	result.auto_processes_with_transaction = totalTransactionProcesses;
	result.auto_machines_with_transaction = machinesWithTransaction.size();

	if (3 * totalTransactionProcesses > processCount)
		return ConfigureAutoResult();

	return result;
}

															#line 1716 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via getWorkers()
															#line 970 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
template <class GetWorkersActor>
															#line 970 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class GetWorkersActorState {
															#line 1723 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
															#line 970 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	GetWorkersActorState(Transaction* const& tr) 
															#line 970 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
															#line 970 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		 : tr(tr),
															#line 971 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   processClasses(tr->getRange(processClassKeys, CLIENT_KNOBS->TOO_MANY)),
															#line 972 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   processData(tr->getRange(workerListKeys, CLIENT_KNOBS->TOO_MANY))
															#line 1734 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("getWorkers", reinterpret_cast<unsigned long>(this));

	}
	~GetWorkersActorState() 
	{
		fdb_probe_actor_destroy("getWorkers", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 974 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Void> __when_expr_0 = success(processClasses) && success(processData);
															#line 974 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<GetWorkersActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 1751 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<GetWorkersActor*>(this)->actor_wait_state = 1;
															#line 974 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< GetWorkersActor, 0, Void >*>(static_cast<GetWorkersActor*>(this)));
															#line 1756 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~GetWorkersActorState();
		static_cast<GetWorkersActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void const& _,int loopDepth) 
	{
															#line 975 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		ASSERT(!processClasses.get().more && processClasses.get().size() < CLIENT_KNOBS->TOO_MANY);
															#line 976 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		ASSERT(!processData.get().more && processData.get().size() < CLIENT_KNOBS->TOO_MANY);
															#line 978 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		std::map<Optional<Standalone<StringRef>>, ProcessClass> id_class;
															#line 979 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		for(int i = 0;i < processClasses.get().size();i++) {
															#line 980 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			id_class[decodeProcessClassKey(processClasses.get()[i].key)] = decodeProcessClassValue(processClasses.get()[i].value);
															#line 1787 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		}
															#line 984 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		std::vector<ProcessData> results;
															#line 986 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		for(int i = 0;i < processData.get().size();i++) {
															#line 987 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			ProcessData data = decodeWorkerListValue(processData.get()[i].value);
															#line 988 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			ProcessClass processClass = id_class[data.locality.processId()];
															#line 990 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (processClass.classSource() == ProcessClass::DBSource || data.processClass.classType() == ProcessClass::UnsetClass)
															#line 1799 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 992 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				data.processClass = processClass;
															#line 1803 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			}
															#line 994 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (data.processClass.classType() != ProcessClass::TesterClass)
															#line 1807 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 995 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				results.push_back(data);
															#line 1811 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			}
		}
															#line 998 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<GetWorkersActor*>(this)->SAV<std::vector<ProcessData>>::futures) { (void)(results); this->~GetWorkersActorState(); static_cast<GetWorkersActor*>(this)->destroy(); return 0; }
															#line 1816 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<GetWorkersActor*>(this)->SAV< std::vector<ProcessData> >::value()) std::vector<ProcessData>(results);
		this->~GetWorkersActorState();
		static_cast<GetWorkersActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1(Void && _,int loopDepth) 
	{
															#line 975 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		ASSERT(!processClasses.get().more && processClasses.get().size() < CLIENT_KNOBS->TOO_MANY);
															#line 976 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		ASSERT(!processData.get().more && processData.get().size() < CLIENT_KNOBS->TOO_MANY);
															#line 978 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		std::map<Optional<Standalone<StringRef>>, ProcessClass> id_class;
															#line 979 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		for(int i = 0;i < processClasses.get().size();i++) {
															#line 980 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			id_class[decodeProcessClassKey(processClasses.get()[i].key)] = decodeProcessClassValue(processClasses.get()[i].value);
															#line 1836 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		}
															#line 984 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		std::vector<ProcessData> results;
															#line 986 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		for(int i = 0;i < processData.get().size();i++) {
															#line 987 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			ProcessData data = decodeWorkerListValue(processData.get()[i].value);
															#line 988 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			ProcessClass processClass = id_class[data.locality.processId()];
															#line 990 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (processClass.classSource() == ProcessClass::DBSource || data.processClass.classType() == ProcessClass::UnsetClass)
															#line 1848 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 992 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				data.processClass = processClass;
															#line 1852 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			}
															#line 994 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (data.processClass.classType() != ProcessClass::TesterClass)
															#line 1856 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 995 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				results.push_back(data);
															#line 1860 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			}
		}
															#line 998 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<GetWorkersActor*>(this)->SAV<std::vector<ProcessData>>::futures) { (void)(results); this->~GetWorkersActorState(); static_cast<GetWorkersActor*>(this)->destroy(); return 0; }
															#line 1865 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<GetWorkersActor*>(this)->SAV< std::vector<ProcessData> >::value()) std::vector<ProcessData>(results);
		this->~GetWorkersActorState();
		static_cast<GetWorkersActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<GetWorkersActor*>(this)->actor_wait_state > 0) static_cast<GetWorkersActor*>(this)->actor_wait_state = 0;
		static_cast<GetWorkersActor*>(this)->ActorCallback< GetWorkersActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetWorkersActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getWorkers", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getWorkers", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< GetWorkersActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getWorkers", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getWorkers", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< GetWorkersActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getWorkers", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getWorkers", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 970 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Transaction* tr;
															#line 971 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Future<RangeResult> processClasses;
															#line 972 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Future<RangeResult> processData;
															#line 1942 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
};
// This generated class is to be used only via getWorkers()
															#line 970 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class GetWorkersActor final : public Actor<std::vector<ProcessData>>, public ActorCallback< GetWorkersActor, 0, Void >, public FastAllocated<GetWorkersActor>, public GetWorkersActorState<GetWorkersActor> {
															#line 1947 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
	using FastAllocated<GetWorkersActor>::operator new;
	using FastAllocated<GetWorkersActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<std::vector<ProcessData>>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< GetWorkersActor, 0, Void >;
															#line 970 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	GetWorkersActor(Transaction* const& tr) 
															#line 1958 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		 : Actor<std::vector<ProcessData>>(),
		   GetWorkersActorState<GetWorkersActor>(tr)
	{
		fdb_probe_actor_enter("getWorkers", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("getWorkers");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("getWorkers", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< GetWorkersActor, 0, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 970 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
[[nodiscard]] Future<std::vector<ProcessData>> getWorkers( Transaction* const& tr ) {
															#line 970 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	return Future<std::vector<ProcessData>>(new GetWorkersActor(tr));
															#line 1986 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
}

#line 1000 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"

															#line 1991 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via getWorkers()
															#line 1001 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
template <class GetWorkersActor1>
															#line 1001 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class GetWorkersActor1State {
															#line 1998 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
															#line 1001 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	GetWorkersActor1State(Database const& cx) 
															#line 1001 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
															#line 1001 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		 : cx(cx),
															#line 1002 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   tr(cx)
															#line 2007 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("getWorkers", reinterpret_cast<unsigned long>(this));

	}
	~GetWorkersActor1State() 
	{
		fdb_probe_actor_destroy("getWorkers", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 1003 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			;
															#line 2022 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~GetWorkersActor1State();
		static_cast<GetWorkersActor1*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
		try {
															#line 1005 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr.setOption(FDBTransactionOptions::READ_SYSTEM_KEYS);
															#line 1006 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr.setOption(FDBTransactionOptions::PRIORITY_SYSTEM_IMMEDIATE);
															#line 1007 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr.setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 1008 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<std::vector<ProcessData>> __when_expr_0 = getWorkers(&tr);
															#line 1008 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<GetWorkersActor1*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 2061 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1loopBody1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
			static_cast<GetWorkersActor1*>(this)->actor_wait_state = 1;
															#line 1008 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< GetWorkersActor1, 0, std::vector<ProcessData> >*>(static_cast<GetWorkersActor1*>(this)));
															#line 2066 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 1011 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Void> __when_expr_1 = tr.onError(e);
															#line 1011 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<GetWorkersActor1*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 2090 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1Catch1when1(__when_expr_1.get(), loopDepth); };
			static_cast<GetWorkersActor1*>(this)->actor_wait_state = 2;
															#line 1011 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< GetWorkersActor1, 1, Void >*>(static_cast<GetWorkersActor1*>(this)));
															#line 2095 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(std::vector<ProcessData> const& workers,int loopDepth) 
	{
															#line 1009 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<GetWorkersActor1*>(this)->SAV<std::vector<ProcessData>>::futures) { (void)(workers); this->~GetWorkersActor1State(); static_cast<GetWorkersActor1*>(this)->destroy(); return 0; }
															#line 2110 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<GetWorkersActor1*>(this)->SAV< std::vector<ProcessData> >::value()) std::vector<ProcessData>(workers);
		this->~GetWorkersActor1State();
		static_cast<GetWorkersActor1*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2(std::vector<ProcessData> && workers,int loopDepth) 
	{
															#line 1009 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<GetWorkersActor1*>(this)->SAV<std::vector<ProcessData>>::futures) { (void)(workers); this->~GetWorkersActor1State(); static_cast<GetWorkersActor1*>(this)->destroy(); return 0; }
															#line 2122 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<GetWorkersActor1*>(this)->SAV< std::vector<ProcessData> >::value()) std::vector<ProcessData>(workers);
		this->~GetWorkersActor1State();
		static_cast<GetWorkersActor1*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1when1(std::vector<ProcessData> const& workers,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(workers, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(std::vector<ProcessData> && workers,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(std::move(workers), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<GetWorkersActor1*>(this)->actor_wait_state > 0) static_cast<GetWorkersActor1*>(this)->actor_wait_state = 0;
		static_cast<GetWorkersActor1*>(this)->ActorCallback< GetWorkersActor1, 0, std::vector<ProcessData> >::remove();

	}
	void a_callback_fire(ActorCallback< GetWorkersActor1, 0, std::vector<ProcessData> >*,std::vector<ProcessData> const& value) 
	{
		fdb_probe_actor_enter("getWorkers", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getWorkers", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< GetWorkersActor1, 0, std::vector<ProcessData> >*,std::vector<ProcessData> && value) 
	{
		fdb_probe_actor_enter("getWorkers", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getWorkers", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< GetWorkersActor1, 0, std::vector<ProcessData> >*,Error err) 
	{
		fdb_probe_actor_enter("getWorkers", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getWorkers", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<GetWorkersActor1*>(this)->actor_wait_state > 0) static_cast<GetWorkersActor1*>(this)->actor_wait_state = 0;
		static_cast<GetWorkersActor1*>(this)->ActorCallback< GetWorkersActor1, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetWorkersActor1, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getWorkers", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getWorkers", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< GetWorkersActor1, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getWorkers", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getWorkers", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< GetWorkersActor1, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getWorkers", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getWorkers", reinterpret_cast<unsigned long>(this), 1);

	}
															#line 1001 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Database cx;
															#line 1002 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Transaction tr;
															#line 2272 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
};
// This generated class is to be used only via getWorkers()
															#line 1001 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class GetWorkersActor1 final : public Actor<std::vector<ProcessData>>, public ActorCallback< GetWorkersActor1, 0, std::vector<ProcessData> >, public ActorCallback< GetWorkersActor1, 1, Void >, public FastAllocated<GetWorkersActor1>, public GetWorkersActor1State<GetWorkersActor1> {
															#line 2277 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
	using FastAllocated<GetWorkersActor1>::operator new;
	using FastAllocated<GetWorkersActor1>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<std::vector<ProcessData>>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< GetWorkersActor1, 0, std::vector<ProcessData> >;
friend struct ActorCallback< GetWorkersActor1, 1, Void >;
															#line 1001 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	GetWorkersActor1(Database const& cx) 
															#line 2289 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		 : Actor<std::vector<ProcessData>>(),
		   GetWorkersActor1State<GetWorkersActor1>(cx)
	{
		fdb_probe_actor_enter("getWorkers", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("getWorkers");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("getWorkers", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< GetWorkersActor1, 0, std::vector<ProcessData> >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< GetWorkersActor1, 1, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 1001 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
[[nodiscard]] Future<std::vector<ProcessData>> getWorkers( Database const& cx ) {
															#line 1001 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	return Future<std::vector<ProcessData>>(new GetWorkersActor1(cx));
															#line 2318 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
}

#line 1015 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"

															#line 2323 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via getConnectionString()
															#line 1016 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
template <class GetConnectionStringActor>
															#line 1016 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class GetConnectionStringActorState {
															#line 2330 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
															#line 1016 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	GetConnectionStringActorState(Database const& cx) 
															#line 1016 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
															#line 1016 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		 : cx(cx),
															#line 1017 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   tr(cx)
															#line 2339 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("getConnectionString", reinterpret_cast<unsigned long>(this));

	}
	~GetConnectionStringActorState() 
	{
		fdb_probe_actor_destroy("getConnectionString", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 1018 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			;
															#line 2354 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~GetConnectionStringActorState();
		static_cast<GetConnectionStringActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
		try {
															#line 1020 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr.setOption(FDBTransactionOptions::READ_LOCK_AWARE);
															#line 1021 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr.setOption(FDBTransactionOptions::READ_SYSTEM_KEYS);
															#line 1022 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Optional<Value>> __when_expr_0 = tr.get(coordinatorsKey);
															#line 1022 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<GetConnectionStringActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 2391 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1loopBody1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
			static_cast<GetConnectionStringActor*>(this)->actor_wait_state = 1;
															#line 1022 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< GetConnectionStringActor, 0, Optional<Value> >*>(static_cast<GetConnectionStringActor*>(this)));
															#line 2396 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 1027 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Void> __when_expr_1 = tr.onError(e);
															#line 1027 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<GetConnectionStringActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 2420 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1Catch1when1(__when_expr_1.get(), loopDepth); };
			static_cast<GetConnectionStringActor*>(this)->actor_wait_state = 2;
															#line 1027 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< GetConnectionStringActor, 1, Void >*>(static_cast<GetConnectionStringActor*>(this)));
															#line 2425 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(Optional<Value> const& currentKey,int loopDepth) 
	{
															#line 1023 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!currentKey.present())
															#line 2440 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 1024 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (!static_cast<GetConnectionStringActor*>(this)->SAV<Optional<ClusterConnectionString>>::futures) { (void)(Optional<ClusterConnectionString>()); this->~GetConnectionStringActorState(); static_cast<GetConnectionStringActor*>(this)->destroy(); return 0; }
															#line 2444 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			new (&static_cast<GetConnectionStringActor*>(this)->SAV< Optional<ClusterConnectionString> >::value()) Optional<ClusterConnectionString>(Optional<ClusterConnectionString>());
			this->~GetConnectionStringActorState();
			static_cast<GetConnectionStringActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 1025 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<GetConnectionStringActor*>(this)->SAV<Optional<ClusterConnectionString>>::futures) { (void)(ClusterConnectionString(currentKey.get().toString())); this->~GetConnectionStringActorState(); static_cast<GetConnectionStringActor*>(this)->destroy(); return 0; }
															#line 2452 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<GetConnectionStringActor*>(this)->SAV< Optional<ClusterConnectionString> >::value()) Optional<ClusterConnectionString>(ClusterConnectionString(currentKey.get().toString()));
		this->~GetConnectionStringActorState();
		static_cast<GetConnectionStringActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2(Optional<Value> && currentKey,int loopDepth) 
	{
															#line 1023 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!currentKey.present())
															#line 2464 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 1024 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (!static_cast<GetConnectionStringActor*>(this)->SAV<Optional<ClusterConnectionString>>::futures) { (void)(Optional<ClusterConnectionString>()); this->~GetConnectionStringActorState(); static_cast<GetConnectionStringActor*>(this)->destroy(); return 0; }
															#line 2468 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			new (&static_cast<GetConnectionStringActor*>(this)->SAV< Optional<ClusterConnectionString> >::value()) Optional<ClusterConnectionString>(Optional<ClusterConnectionString>());
			this->~GetConnectionStringActorState();
			static_cast<GetConnectionStringActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 1025 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<GetConnectionStringActor*>(this)->SAV<Optional<ClusterConnectionString>>::futures) { (void)(ClusterConnectionString(currentKey.get().toString())); this->~GetConnectionStringActorState(); static_cast<GetConnectionStringActor*>(this)->destroy(); return 0; }
															#line 2476 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<GetConnectionStringActor*>(this)->SAV< Optional<ClusterConnectionString> >::value()) Optional<ClusterConnectionString>(ClusterConnectionString(currentKey.get().toString()));
		this->~GetConnectionStringActorState();
		static_cast<GetConnectionStringActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1when1(Optional<Value> const& currentKey,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(currentKey, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Optional<Value> && currentKey,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(std::move(currentKey), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<GetConnectionStringActor*>(this)->actor_wait_state > 0) static_cast<GetConnectionStringActor*>(this)->actor_wait_state = 0;
		static_cast<GetConnectionStringActor*>(this)->ActorCallback< GetConnectionStringActor, 0, Optional<Value> >::remove();

	}
	void a_callback_fire(ActorCallback< GetConnectionStringActor, 0, Optional<Value> >*,Optional<Value> const& value) 
	{
		fdb_probe_actor_enter("getConnectionString", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getConnectionString", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< GetConnectionStringActor, 0, Optional<Value> >*,Optional<Value> && value) 
	{
		fdb_probe_actor_enter("getConnectionString", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getConnectionString", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< GetConnectionStringActor, 0, Optional<Value> >*,Error err) 
	{
		fdb_probe_actor_enter("getConnectionString", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getConnectionString", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<GetConnectionStringActor*>(this)->actor_wait_state > 0) static_cast<GetConnectionStringActor*>(this)->actor_wait_state = 0;
		static_cast<GetConnectionStringActor*>(this)->ActorCallback< GetConnectionStringActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetConnectionStringActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getConnectionString", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getConnectionString", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< GetConnectionStringActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getConnectionString", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getConnectionString", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< GetConnectionStringActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getConnectionString", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getConnectionString", reinterpret_cast<unsigned long>(this), 1);

	}
															#line 1016 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Database cx;
															#line 1017 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Transaction tr;
															#line 2626 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
};
// This generated class is to be used only via getConnectionString()
															#line 1016 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class GetConnectionStringActor final : public Actor<Optional<ClusterConnectionString>>, public ActorCallback< GetConnectionStringActor, 0, Optional<Value> >, public ActorCallback< GetConnectionStringActor, 1, Void >, public FastAllocated<GetConnectionStringActor>, public GetConnectionStringActorState<GetConnectionStringActor> {
															#line 2631 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
	using FastAllocated<GetConnectionStringActor>::operator new;
	using FastAllocated<GetConnectionStringActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Optional<ClusterConnectionString>>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< GetConnectionStringActor, 0, Optional<Value> >;
friend struct ActorCallback< GetConnectionStringActor, 1, Void >;
															#line 1016 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	GetConnectionStringActor(Database const& cx) 
															#line 2643 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		 : Actor<Optional<ClusterConnectionString>>(),
		   GetConnectionStringActorState<GetConnectionStringActor>(cx)
	{
		fdb_probe_actor_enter("getConnectionString", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("getConnectionString");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("getConnectionString", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< GetConnectionStringActor, 0, Optional<Value> >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< GetConnectionStringActor, 1, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 1016 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
[[nodiscard]] Future<Optional<ClusterConnectionString>> getConnectionString( Database const& cx ) {
															#line 1016 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	return Future<Optional<ClusterConnectionString>>(new GetConnectionStringActor(cx));
															#line 2672 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
}

#line 1031 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"

static std::vector<std::string> connectionStrings;

namespace {

															#line 2681 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
// This generated class is to be used only via getClusterConnectionStringFromStorageServer()
															#line 1036 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
template <class GetClusterConnectionStringFromStorageServerActor>
															#line 1036 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class GetClusterConnectionStringFromStorageServerActorState {
															#line 2687 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
															#line 1036 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	GetClusterConnectionStringFromStorageServerActorState(Transaction* const& tr) 
															#line 1036 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
															#line 1036 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		 : tr(tr)
															#line 2694 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("getClusterConnectionStringFromStorageServer", reinterpret_cast<unsigned long>(this));

	}
	~GetClusterConnectionStringFromStorageServerActorState() 
	{
		fdb_probe_actor_destroy("getClusterConnectionStringFromStorageServer", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 1038 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr->setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 1039 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 1040 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr->setOption(FDBTransactionOptions::USE_PROVISIONAL_PROXIES);
															#line 1041 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr->setOption(FDBTransactionOptions::PRIORITY_SYSTEM_IMMEDIATE);
															#line 1043 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			retryTimes = 0;
															#line 1044 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			;
															#line 2719 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~GetClusterConnectionStringFromStorageServerActorState();
		static_cast<GetClusterConnectionStringFromStorageServerActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
															#line 1045 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (retryTimes >= CLIENT_KNOBS->CHANGE_QUORUM_BAD_STATE_RETRY_TIMES)
															#line 2749 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 1046 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (!static_cast<GetClusterConnectionStringFromStorageServerActor*>(this)->SAV<Optional<ClusterConnectionString>>::futures) { (void)(Optional<ClusterConnectionString>()); this->~GetClusterConnectionStringFromStorageServerActorState(); static_cast<GetClusterConnectionStringFromStorageServerActor*>(this)->destroy(); return 0; }
															#line 2753 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			new (&static_cast<GetClusterConnectionStringFromStorageServerActor*>(this)->SAV< Optional<ClusterConnectionString> >::value()) Optional<ClusterConnectionString>(Optional<ClusterConnectionString>());
			this->~GetClusterConnectionStringFromStorageServerActorState();
			static_cast<GetClusterConnectionStringFromStorageServerActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 1049 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		StrictFuture<Version> __when_expr_0 = tr->getReadVersion();
															#line 1049 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (static_cast<GetClusterConnectionStringFromStorageServerActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 2763 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
		static_cast<GetClusterConnectionStringFromStorageServerActor*>(this)->actor_wait_state = 1;
															#line 1049 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< GetClusterConnectionStringFromStorageServerActor, 0, Version >*>(static_cast<GetClusterConnectionStringFromStorageServerActor*>(this)));
															#line 2768 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont1(Version const& readVersion,int loopDepth) 
	{
															#line 1050 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		StrictFuture<Optional<Value>> __when_expr_1 = tr->get(coordinatorsKey);
															#line 1050 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (static_cast<GetClusterConnectionStringFromStorageServerActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 2779 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<GetClusterConnectionStringFromStorageServerActor*>(this)->actor_wait_state = 2;
															#line 1050 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< GetClusterConnectionStringFromStorageServerActor, 1, Optional<Value> >*>(static_cast<GetClusterConnectionStringFromStorageServerActor*>(this)));
															#line 2784 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont1(Version && readVersion,int loopDepth) 
	{
															#line 1050 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		StrictFuture<Optional<Value>> __when_expr_1 = tr->get(coordinatorsKey);
															#line 1050 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (static_cast<GetClusterConnectionStringFromStorageServerActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 2795 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<GetClusterConnectionStringFromStorageServerActor*>(this)->actor_wait_state = 2;
															#line 1050 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< GetClusterConnectionStringFromStorageServerActor, 1, Optional<Value> >*>(static_cast<GetClusterConnectionStringFromStorageServerActor*>(this)));
															#line 2800 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1when1(Version const& readVersion,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(readVersion, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Version && readVersion,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(std::move(readVersion), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<GetClusterConnectionStringFromStorageServerActor*>(this)->actor_wait_state > 0) static_cast<GetClusterConnectionStringFromStorageServerActor*>(this)->actor_wait_state = 0;
		static_cast<GetClusterConnectionStringFromStorageServerActor*>(this)->ActorCallback< GetClusterConnectionStringFromStorageServerActor, 0, Version >::remove();

	}
	void a_callback_fire(ActorCallback< GetClusterConnectionStringFromStorageServerActor, 0, Version >*,Version const& value) 
	{
		fdb_probe_actor_enter("getClusterConnectionStringFromStorageServer", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getClusterConnectionStringFromStorageServer", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< GetClusterConnectionStringFromStorageServerActor, 0, Version >*,Version && value) 
	{
		fdb_probe_actor_enter("getClusterConnectionStringFromStorageServer", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getClusterConnectionStringFromStorageServer", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< GetClusterConnectionStringFromStorageServerActor, 0, Version >*,Error err) 
	{
		fdb_probe_actor_enter("getClusterConnectionStringFromStorageServer", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getClusterConnectionStringFromStorageServer", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1cont3(int loopDepth) 
	{
															#line 1051 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (g_network->isSimulated() && currentKey.present())
															#line 2872 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 1059 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			int n = connectionStrings.size() > 0 ? connectionStrings.size() - 1 : 0;
															#line 1060 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			for(int i = 0;i < n;++i) {
															#line 1061 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				ASSERT(currentKey.get() != connectionStrings.at(i));
															#line 2880 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			}
		}
															#line 1065 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!currentKey.present())
															#line 2885 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 1067 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			++retryTimes;
															#line 1068 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Void> __when_expr_2 = delay(CLIENT_KNOBS->CHANGE_QUORUM_BAD_STATE_RETRY_DELAY);
															#line 1068 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<GetClusterConnectionStringFromStorageServerActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 2893 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1cont3when1(__when_expr_2.get(), loopDepth); };
			static_cast<GetClusterConnectionStringFromStorageServerActor*>(this)->actor_wait_state = 3;
															#line 1068 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< GetClusterConnectionStringFromStorageServerActor, 2, Void >*>(static_cast<GetClusterConnectionStringFromStorageServerActor*>(this)));
															#line 2898 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1loopBody1cont4(loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1when1(Optional<Value> const& __currentKey,int loopDepth) 
	{
															#line 1050 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		currentKey = __currentKey;
															#line 2912 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1when1(Optional<Value> && __currentKey,int loopDepth) 
	{
		currentKey = std::move(__currentKey);
		loopDepth = a_body1loopBody1cont3(loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<GetClusterConnectionStringFromStorageServerActor*>(this)->actor_wait_state > 0) static_cast<GetClusterConnectionStringFromStorageServerActor*>(this)->actor_wait_state = 0;
		static_cast<GetClusterConnectionStringFromStorageServerActor*>(this)->ActorCallback< GetClusterConnectionStringFromStorageServerActor, 1, Optional<Value> >::remove();

	}
	void a_callback_fire(ActorCallback< GetClusterConnectionStringFromStorageServerActor, 1, Optional<Value> >*,Optional<Value> const& value) 
	{
		fdb_probe_actor_enter("getClusterConnectionStringFromStorageServer", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getClusterConnectionStringFromStorageServer", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< GetClusterConnectionStringFromStorageServerActor, 1, Optional<Value> >*,Optional<Value> && value) 
	{
		fdb_probe_actor_enter("getClusterConnectionStringFromStorageServer", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getClusterConnectionStringFromStorageServer", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< GetClusterConnectionStringFromStorageServerActor, 1, Optional<Value> >*,Error err) 
	{
		fdb_probe_actor_enter("getClusterConnectionStringFromStorageServer", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getClusterConnectionStringFromStorageServer", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1loopBody1cont4(int loopDepth) 
	{
															#line 1072 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		clusterConnectionString = ClusterConnectionString(currentKey.get().toString());
															#line 1073 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (tr->getDatabase()->getConnectionRecord() && clusterConnectionString.clusterKeyName().toString() != tr->getDatabase()->getConnectionRecord()->getConnectionString().clusterKeyName())
															#line 2981 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 1077 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			++retryTimes;
															#line 1078 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Void> __when_expr_3 = delay(CLIENT_KNOBS->CHANGE_QUORUM_BAD_STATE_RETRY_DELAY);
															#line 1078 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<GetClusterConnectionStringFromStorageServerActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 2989 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch1(__when_expr_3.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1cont4when1(__when_expr_3.get(), loopDepth); };
			static_cast<GetClusterConnectionStringFromStorageServerActor*>(this)->actor_wait_state = 4;
															#line 1078 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< GetClusterConnectionStringFromStorageServerActor, 3, Void >*>(static_cast<GetClusterConnectionStringFromStorageServerActor*>(this)));
															#line 2994 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1loopBody1cont9(loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont7(Void const& _,int loopDepth) 
	{
		return a_body1loopHead1(loopDepth); // continue

		return loopDepth;
	}
	int a_body1loopBody1cont7(Void && _,int loopDepth) 
	{
		return a_body1loopHead1(loopDepth); // continue

		return loopDepth;
	}
	int a_body1loopBody1cont3when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont7(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont3when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont7(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<GetClusterConnectionStringFromStorageServerActor*>(this)->actor_wait_state > 0) static_cast<GetClusterConnectionStringFromStorageServerActor*>(this)->actor_wait_state = 0;
		static_cast<GetClusterConnectionStringFromStorageServerActor*>(this)->ActorCallback< GetClusterConnectionStringFromStorageServerActor, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetClusterConnectionStringFromStorageServerActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getClusterConnectionStringFromStorageServer", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont3when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getClusterConnectionStringFromStorageServer", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< GetClusterConnectionStringFromStorageServerActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getClusterConnectionStringFromStorageServer", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont3when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getClusterConnectionStringFromStorageServer", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< GetClusterConnectionStringFromStorageServerActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getClusterConnectionStringFromStorageServer", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getClusterConnectionStringFromStorageServer", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1loopBody1cont9(int loopDepth) 
	{
															#line 1082 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<GetClusterConnectionStringFromStorageServerActor*>(this)->SAV<Optional<ClusterConnectionString>>::futures) { (void)(clusterConnectionString); this->~GetClusterConnectionStringFromStorageServerActorState(); static_cast<GetClusterConnectionStringFromStorageServerActor*>(this)->destroy(); return 0; }
															#line 3083 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<GetClusterConnectionStringFromStorageServerActor*>(this)->SAV< Optional<ClusterConnectionString> >::value()) Optional<ClusterConnectionString>(std::move(clusterConnectionString)); // state_var_RVO
		this->~GetClusterConnectionStringFromStorageServerActorState();
		static_cast<GetClusterConnectionStringFromStorageServerActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1cont10(Void const& _,int loopDepth) 
	{
		return a_body1loopHead1(loopDepth); // continue

		return loopDepth;
	}
	int a_body1loopBody1cont10(Void && _,int loopDepth) 
	{
		return a_body1loopHead1(loopDepth); // continue

		return loopDepth;
	}
	int a_body1loopBody1cont4when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont10(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont4when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont10(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<GetClusterConnectionStringFromStorageServerActor*>(this)->actor_wait_state > 0) static_cast<GetClusterConnectionStringFromStorageServerActor*>(this)->actor_wait_state = 0;
		static_cast<GetClusterConnectionStringFromStorageServerActor*>(this)->ActorCallback< GetClusterConnectionStringFromStorageServerActor, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetClusterConnectionStringFromStorageServerActor, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getClusterConnectionStringFromStorageServer", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1cont4when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getClusterConnectionStringFromStorageServer", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< GetClusterConnectionStringFromStorageServerActor, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getClusterConnectionStringFromStorageServer", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1cont4when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getClusterConnectionStringFromStorageServer", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< GetClusterConnectionStringFromStorageServerActor, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getClusterConnectionStringFromStorageServer", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getClusterConnectionStringFromStorageServer", reinterpret_cast<unsigned long>(this), 3);

	}
															#line 1036 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Transaction* tr;
															#line 1043 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	int retryTimes;
															#line 1050 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Optional<Value> currentKey;
															#line 1072 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	ClusterConnectionString clusterConnectionString;
															#line 3174 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
};
// This generated class is to be used only via getClusterConnectionStringFromStorageServer()
															#line 1036 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class GetClusterConnectionStringFromStorageServerActor final : public Actor<Optional<ClusterConnectionString>>, public ActorCallback< GetClusterConnectionStringFromStorageServerActor, 0, Version >, public ActorCallback< GetClusterConnectionStringFromStorageServerActor, 1, Optional<Value> >, public ActorCallback< GetClusterConnectionStringFromStorageServerActor, 2, Void >, public ActorCallback< GetClusterConnectionStringFromStorageServerActor, 3, Void >, public FastAllocated<GetClusterConnectionStringFromStorageServerActor>, public GetClusterConnectionStringFromStorageServerActorState<GetClusterConnectionStringFromStorageServerActor> {
															#line 3179 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
	using FastAllocated<GetClusterConnectionStringFromStorageServerActor>::operator new;
	using FastAllocated<GetClusterConnectionStringFromStorageServerActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Optional<ClusterConnectionString>>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< GetClusterConnectionStringFromStorageServerActor, 0, Version >;
friend struct ActorCallback< GetClusterConnectionStringFromStorageServerActor, 1, Optional<Value> >;
friend struct ActorCallback< GetClusterConnectionStringFromStorageServerActor, 2, Void >;
friend struct ActorCallback< GetClusterConnectionStringFromStorageServerActor, 3, Void >;
															#line 1036 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	GetClusterConnectionStringFromStorageServerActor(Transaction* const& tr) 
															#line 3193 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		 : Actor<Optional<ClusterConnectionString>>(),
		   GetClusterConnectionStringFromStorageServerActorState<GetClusterConnectionStringFromStorageServerActor>(tr)
	{
		fdb_probe_actor_enter("getClusterConnectionStringFromStorageServer", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("getClusterConnectionStringFromStorageServer");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("getClusterConnectionStringFromStorageServer", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< GetClusterConnectionStringFromStorageServerActor, 0, Version >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< GetClusterConnectionStringFromStorageServerActor, 1, Optional<Value> >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< GetClusterConnectionStringFromStorageServerActor, 2, Void >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< GetClusterConnectionStringFromStorageServerActor, 3, Void >*)0, actor_cancelled()); break;
		}

	}
};
															#line 1036 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
[[nodiscard]] Future<Optional<ClusterConnectionString>> getClusterConnectionStringFromStorageServer( Transaction* const& tr ) {
															#line 1036 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	return Future<Optional<ClusterConnectionString>>(new GetClusterConnectionStringFromStorageServerActor(tr));
															#line 3223 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
}

#line 1085 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"

															#line 3228 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
// This generated class is to be used only via verifyConfigurationDatabaseAlive()
															#line 1086 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
template <class VerifyConfigurationDatabaseAliveActor>
															#line 1086 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class VerifyConfigurationDatabaseAliveActorState {
															#line 3234 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
															#line 1086 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	VerifyConfigurationDatabaseAliveActorState(Database const& cx) 
															#line 1086 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
															#line 1086 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		 : cx(cx),
															#line 1087 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   backoff(),
															#line 1088 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   configTr()
															#line 3245 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("verifyConfigurationDatabaseAlive", reinterpret_cast<unsigned long>(this));

	}
	~VerifyConfigurationDatabaseAliveActorState() 
	{
		fdb_probe_actor_destroy("verifyConfigurationDatabaseAlive", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 1089 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			;
															#line 3260 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~VerifyConfigurationDatabaseAliveActorState();
		static_cast<VerifyConfigurationDatabaseAliveActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
		try {
															#line 1093 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			configTr = ISingleThreadTransaction::create(ISingleThreadTransaction::Type::PAXOS_CONFIG, cx);
															#line 1094 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			Tuple tuple;
															#line 1095 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tuple.appendNull();
															#line 1096 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tuple << "test"_sr;
															#line 1097 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Optional<Value>> __when_expr_0 = configTr->get(tuple.pack());
															#line 1097 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<VerifyConfigurationDatabaseAliveActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 3301 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1loopBody1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
			static_cast<VerifyConfigurationDatabaseAliveActor*>(this)->actor_wait_state = 1;
															#line 1097 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< VerifyConfigurationDatabaseAliveActor, 0, Optional<Value> >*>(static_cast<VerifyConfigurationDatabaseAliveActor*>(this)));
															#line 3306 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 1101 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			TraceEvent("ChangeQuorumCheckerNewCoordinatorsError").error(e);
															#line 1102 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (e.code() == error_code_coordinators_changed)
															#line 3330 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 1103 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				StrictFuture<Void> __when_expr_1 = backoff.onError();
															#line 1103 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				if (static_cast<VerifyConfigurationDatabaseAliveActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 3336 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1Catch1when1(__when_expr_1.get(), loopDepth); };
				static_cast<VerifyConfigurationDatabaseAliveActor*>(this)->actor_wait_state = 2;
															#line 1103 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< VerifyConfigurationDatabaseAliveActor, 1, Void >*>(static_cast<VerifyConfigurationDatabaseAliveActor*>(this)));
															#line 3341 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				loopDepth = 0;
			}
			else
			{
															#line 1106 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				StrictFuture<Void> __when_expr_2 = configTr->onError(e);
															#line 1106 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				if (static_cast<VerifyConfigurationDatabaseAliveActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 3350 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1Catch1when2(__when_expr_2.get(), loopDepth); };
				static_cast<VerifyConfigurationDatabaseAliveActor*>(this)->actor_wait_state = 3;
															#line 1106 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< VerifyConfigurationDatabaseAliveActor, 2, Void >*>(static_cast<VerifyConfigurationDatabaseAliveActor*>(this)));
															#line 3355 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				loopDepth = 0;
			}
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(Optional<Value> const& serializedValue,int loopDepth) 
	{
															#line 1098 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		TraceEvent("ChangeQuorumCheckerNewCoordinatorsOnline").log();
															#line 1099 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<VerifyConfigurationDatabaseAliveActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~VerifyConfigurationDatabaseAliveActorState(); static_cast<VerifyConfigurationDatabaseAliveActor*>(this)->destroy(); return 0; }
															#line 3373 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<VerifyConfigurationDatabaseAliveActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~VerifyConfigurationDatabaseAliveActorState();
		static_cast<VerifyConfigurationDatabaseAliveActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2(Optional<Value> && serializedValue,int loopDepth) 
	{
															#line 1098 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		TraceEvent("ChangeQuorumCheckerNewCoordinatorsOnline").log();
															#line 1099 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<VerifyConfigurationDatabaseAliveActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~VerifyConfigurationDatabaseAliveActorState(); static_cast<VerifyConfigurationDatabaseAliveActor*>(this)->destroy(); return 0; }
															#line 3387 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<VerifyConfigurationDatabaseAliveActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~VerifyConfigurationDatabaseAliveActorState();
		static_cast<VerifyConfigurationDatabaseAliveActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1when1(Optional<Value> const& serializedValue,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(serializedValue, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Optional<Value> && serializedValue,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(std::move(serializedValue), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<VerifyConfigurationDatabaseAliveActor*>(this)->actor_wait_state > 0) static_cast<VerifyConfigurationDatabaseAliveActor*>(this)->actor_wait_state = 0;
		static_cast<VerifyConfigurationDatabaseAliveActor*>(this)->ActorCallback< VerifyConfigurationDatabaseAliveActor, 0, Optional<Value> >::remove();

	}
	void a_callback_fire(ActorCallback< VerifyConfigurationDatabaseAliveActor, 0, Optional<Value> >*,Optional<Value> const& value) 
	{
		fdb_probe_actor_enter("verifyConfigurationDatabaseAlive", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("verifyConfigurationDatabaseAlive", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< VerifyConfigurationDatabaseAliveActor, 0, Optional<Value> >*,Optional<Value> && value) 
	{
		fdb_probe_actor_enter("verifyConfigurationDatabaseAlive", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("verifyConfigurationDatabaseAlive", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< VerifyConfigurationDatabaseAliveActor, 0, Optional<Value> >*,Error err) 
	{
		fdb_probe_actor_enter("verifyConfigurationDatabaseAlive", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("verifyConfigurationDatabaseAlive", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1Catch1cont1(int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont2(Void const& _,int loopDepth) 
	{
															#line 1104 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		configTr->reset();
															#line 3468 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1Catch1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont2(Void && _,int loopDepth) 
	{
															#line 1104 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		configTr->reset();
															#line 3477 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1Catch1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<VerifyConfigurationDatabaseAliveActor*>(this)->actor_wait_state > 0) static_cast<VerifyConfigurationDatabaseAliveActor*>(this)->actor_wait_state = 0;
		static_cast<VerifyConfigurationDatabaseAliveActor*>(this)->ActorCallback< VerifyConfigurationDatabaseAliveActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< VerifyConfigurationDatabaseAliveActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("verifyConfigurationDatabaseAlive", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("verifyConfigurationDatabaseAlive", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< VerifyConfigurationDatabaseAliveActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("verifyConfigurationDatabaseAlive", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("verifyConfigurationDatabaseAlive", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< VerifyConfigurationDatabaseAliveActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("verifyConfigurationDatabaseAlive", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("verifyConfigurationDatabaseAlive", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1loopBody1Catch1cont4(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont4(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when2(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont4(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when2(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont4(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<VerifyConfigurationDatabaseAliveActor*>(this)->actor_wait_state > 0) static_cast<VerifyConfigurationDatabaseAliveActor*>(this)->actor_wait_state = 0;
		static_cast<VerifyConfigurationDatabaseAliveActor*>(this)->ActorCallback< VerifyConfigurationDatabaseAliveActor, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< VerifyConfigurationDatabaseAliveActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("verifyConfigurationDatabaseAlive", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1Catch1when2(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("verifyConfigurationDatabaseAlive", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< VerifyConfigurationDatabaseAliveActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("verifyConfigurationDatabaseAlive", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1Catch1when2(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("verifyConfigurationDatabaseAlive", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< VerifyConfigurationDatabaseAliveActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("verifyConfigurationDatabaseAlive", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("verifyConfigurationDatabaseAlive", reinterpret_cast<unsigned long>(this), 2);

	}
															#line 1086 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Database cx;
															#line 1087 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Backoff backoff;
															#line 1088 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Reference<ISingleThreadTransaction> configTr;
															#line 3626 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
};
// This generated class is to be used only via verifyConfigurationDatabaseAlive()
															#line 1086 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class VerifyConfigurationDatabaseAliveActor final : public Actor<Void>, public ActorCallback< VerifyConfigurationDatabaseAliveActor, 0, Optional<Value> >, public ActorCallback< VerifyConfigurationDatabaseAliveActor, 1, Void >, public ActorCallback< VerifyConfigurationDatabaseAliveActor, 2, Void >, public FastAllocated<VerifyConfigurationDatabaseAliveActor>, public VerifyConfigurationDatabaseAliveActorState<VerifyConfigurationDatabaseAliveActor> {
															#line 3631 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
	using FastAllocated<VerifyConfigurationDatabaseAliveActor>::operator new;
	using FastAllocated<VerifyConfigurationDatabaseAliveActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< VerifyConfigurationDatabaseAliveActor, 0, Optional<Value> >;
friend struct ActorCallback< VerifyConfigurationDatabaseAliveActor, 1, Void >;
friend struct ActorCallback< VerifyConfigurationDatabaseAliveActor, 2, Void >;
															#line 1086 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	VerifyConfigurationDatabaseAliveActor(Database const& cx) 
															#line 3644 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		 : Actor<Void>(),
		   VerifyConfigurationDatabaseAliveActorState<VerifyConfigurationDatabaseAliveActor>(cx)
	{
		fdb_probe_actor_enter("verifyConfigurationDatabaseAlive", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("verifyConfigurationDatabaseAlive");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("verifyConfigurationDatabaseAlive", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< VerifyConfigurationDatabaseAliveActor, 0, Optional<Value> >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< VerifyConfigurationDatabaseAliveActor, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< VerifyConfigurationDatabaseAliveActor, 2, Void >*)0, actor_cancelled()); break;
		}

	}
};
															#line 1086 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
[[nodiscard]] Future<Void> verifyConfigurationDatabaseAlive( Database const& cx ) {
															#line 1086 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	return Future<Void>(new VerifyConfigurationDatabaseAliveActor(cx));
															#line 3673 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
}

#line 1111 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"

															#line 3678 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
// This generated class is to be used only via resetPreviousCoordinatorsKey()
															#line 1112 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
template <class ResetPreviousCoordinatorsKeyActor>
															#line 1112 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class ResetPreviousCoordinatorsKeyActorState {
															#line 3684 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
															#line 1112 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	ResetPreviousCoordinatorsKeyActorState(Database const& cx) 
															#line 1112 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
															#line 1112 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		 : cx(cx)
															#line 3691 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("resetPreviousCoordinatorsKey", reinterpret_cast<unsigned long>(this));

	}
	~ResetPreviousCoordinatorsKeyActorState() 
	{
		fdb_probe_actor_destroy("resetPreviousCoordinatorsKey", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 1113 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			;
															#line 3706 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~ResetPreviousCoordinatorsKeyActorState();
		static_cast<ResetPreviousCoordinatorsKeyActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
															#line 1119 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		clearTr = ISingleThreadTransaction::create(ISingleThreadTransaction::Type::RYW, cx);
															#line 3736 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		try {
															#line 1122 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			clearTr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 1123 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			clearTr->clear(previousCoordinatorsKey);
															#line 1124 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Void> __when_expr_0 = clearTr->commit();
															#line 1124 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<ResetPreviousCoordinatorsKeyActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 3746 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1loopBody1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
			static_cast<ResetPreviousCoordinatorsKeyActor*>(this)->actor_wait_state = 1;
															#line 1124 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< ResetPreviousCoordinatorsKeyActor, 0, Void >*>(static_cast<ResetPreviousCoordinatorsKeyActor*>(this)));
															#line 3751 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1Catch1(const Error& e2,int loopDepth=0) 
	{
		try {
															#line 1127 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Void> __when_expr_1 = clearTr->onError(e2);
															#line 1127 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<ResetPreviousCoordinatorsKeyActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 3775 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1Catch1when1(__when_expr_1.get(), loopDepth); };
			static_cast<ResetPreviousCoordinatorsKeyActor*>(this)->actor_wait_state = 2;
															#line 1127 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< ResetPreviousCoordinatorsKeyActor, 1, Void >*>(static_cast<ResetPreviousCoordinatorsKeyActor*>(this)));
															#line 3780 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(Void const& _,int loopDepth) 
	{
															#line 1125 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<ResetPreviousCoordinatorsKeyActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~ResetPreviousCoordinatorsKeyActorState(); static_cast<ResetPreviousCoordinatorsKeyActor*>(this)->destroy(); return 0; }
															#line 3795 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<ResetPreviousCoordinatorsKeyActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~ResetPreviousCoordinatorsKeyActorState();
		static_cast<ResetPreviousCoordinatorsKeyActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2(Void && _,int loopDepth) 
	{
															#line 1125 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<ResetPreviousCoordinatorsKeyActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~ResetPreviousCoordinatorsKeyActorState(); static_cast<ResetPreviousCoordinatorsKeyActor*>(this)->destroy(); return 0; }
															#line 3807 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<ResetPreviousCoordinatorsKeyActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~ResetPreviousCoordinatorsKeyActorState();
		static_cast<ResetPreviousCoordinatorsKeyActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<ResetPreviousCoordinatorsKeyActor*>(this)->actor_wait_state > 0) static_cast<ResetPreviousCoordinatorsKeyActor*>(this)->actor_wait_state = 0;
		static_cast<ResetPreviousCoordinatorsKeyActor*>(this)->ActorCallback< ResetPreviousCoordinatorsKeyActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< ResetPreviousCoordinatorsKeyActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("resetPreviousCoordinatorsKey", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("resetPreviousCoordinatorsKey", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< ResetPreviousCoordinatorsKeyActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("resetPreviousCoordinatorsKey", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("resetPreviousCoordinatorsKey", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< ResetPreviousCoordinatorsKeyActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("resetPreviousCoordinatorsKey", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("resetPreviousCoordinatorsKey", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<ResetPreviousCoordinatorsKeyActor*>(this)->actor_wait_state > 0) static_cast<ResetPreviousCoordinatorsKeyActor*>(this)->actor_wait_state = 0;
		static_cast<ResetPreviousCoordinatorsKeyActor*>(this)->ActorCallback< ResetPreviousCoordinatorsKeyActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< ResetPreviousCoordinatorsKeyActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("resetPreviousCoordinatorsKey", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("resetPreviousCoordinatorsKey", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< ResetPreviousCoordinatorsKeyActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("resetPreviousCoordinatorsKey", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("resetPreviousCoordinatorsKey", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< ResetPreviousCoordinatorsKeyActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("resetPreviousCoordinatorsKey", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("resetPreviousCoordinatorsKey", reinterpret_cast<unsigned long>(this), 1);

	}
															#line 1112 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Database cx;
															#line 1119 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Reference<ISingleThreadTransaction> clearTr;
															#line 3957 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
};
// This generated class is to be used only via resetPreviousCoordinatorsKey()
															#line 1112 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class ResetPreviousCoordinatorsKeyActor final : public Actor<Void>, public ActorCallback< ResetPreviousCoordinatorsKeyActor, 0, Void >, public ActorCallback< ResetPreviousCoordinatorsKeyActor, 1, Void >, public FastAllocated<ResetPreviousCoordinatorsKeyActor>, public ResetPreviousCoordinatorsKeyActorState<ResetPreviousCoordinatorsKeyActor> {
															#line 3962 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
	using FastAllocated<ResetPreviousCoordinatorsKeyActor>::operator new;
	using FastAllocated<ResetPreviousCoordinatorsKeyActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< ResetPreviousCoordinatorsKeyActor, 0, Void >;
friend struct ActorCallback< ResetPreviousCoordinatorsKeyActor, 1, Void >;
															#line 1112 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	ResetPreviousCoordinatorsKeyActor(Database const& cx) 
															#line 3974 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		 : Actor<Void>(),
		   ResetPreviousCoordinatorsKeyActorState<ResetPreviousCoordinatorsKeyActor>(cx)
	{
		fdb_probe_actor_enter("resetPreviousCoordinatorsKey", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("resetPreviousCoordinatorsKey");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("resetPreviousCoordinatorsKey", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< ResetPreviousCoordinatorsKeyActor, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< ResetPreviousCoordinatorsKeyActor, 1, Void >*)0, actor_cancelled()); break;
		}

	}
};
															#line 1112 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
[[nodiscard]] Future<Void> resetPreviousCoordinatorsKey( Database const& cx ) {
															#line 1112 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	return Future<Void>(new ResetPreviousCoordinatorsKeyActor(cx));
															#line 4002 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
}

#line 1131 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"

} // namespace

															#line 4009 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via changeQuorumChecker()
															#line 1134 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
template <class ChangeQuorumCheckerActor>
															#line 1134 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class ChangeQuorumCheckerActorState {
															#line 4016 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
															#line 1134 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	ChangeQuorumCheckerActorState(Transaction* const& tr,ClusterConnectionString* const& conn,std::string const& newName,bool const& disableConfigDB) 
															#line 1134 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
															#line 1134 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		 : tr(tr),
															#line 1134 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   conn(conn),
															#line 1134 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   newName(newName),
															#line 1134 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   disableConfigDB(disableConfigDB)
															#line 4029 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("changeQuorumChecker", reinterpret_cast<unsigned long>(this));

	}
	~ChangeQuorumCheckerActorState() 
	{
		fdb_probe_actor_destroy("changeQuorumChecker", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 1138 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			TraceEvent("ChangeQuorumCheckerStart").detail("NewConnectionString", conn->toString());
															#line 1139 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Optional<ClusterConnectionString>> __when_expr_0 = getClusterConnectionStringFromStorageServer(tr);
															#line 1139 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<ChangeQuorumCheckerActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 4048 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<ChangeQuorumCheckerActor*>(this)->actor_wait_state = 1;
															#line 1139 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< ChangeQuorumCheckerActor, 0, Optional<ClusterConnectionString> >*>(static_cast<ChangeQuorumCheckerActor*>(this)));
															#line 4053 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~ChangeQuorumCheckerActorState();
		static_cast<ChangeQuorumCheckerActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 1142 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!clusterConnectionStringOptional.present())
															#line 4076 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 1143 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (!static_cast<ChangeQuorumCheckerActor*>(this)->SAV<Optional<CoordinatorsResult>>::futures) { (void)(CoordinatorsResult::BAD_DATABASE_STATE); this->~ChangeQuorumCheckerActorState(); static_cast<ChangeQuorumCheckerActor*>(this)->destroy(); return 0; }
															#line 4080 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			new (&static_cast<ChangeQuorumCheckerActor*>(this)->SAV< Optional<CoordinatorsResult> >::value()) Optional<CoordinatorsResult>(CoordinatorsResult::BAD_DATABASE_STATE);
			this->~ChangeQuorumCheckerActorState();
			static_cast<ChangeQuorumCheckerActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 1147 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		old = clusterConnectionStringOptional.get();
															#line 1149 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (conn->hostnames.size() + conn->coords.size() == 0)
															#line 4090 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 1150 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			conn->hostnames = old.hostnames;
															#line 1151 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			conn->coords = old.coords;
															#line 4096 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		}
															#line 1153 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		StrictFuture<std::vector<NetworkAddress>> __when_expr_1 = conn->tryResolveHostnames();
															#line 1153 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (static_cast<ChangeQuorumCheckerActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 4102 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<ChangeQuorumCheckerActor*>(this)->actor_wait_state = 2;
															#line 1153 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< ChangeQuorumCheckerActor, 1, std::vector<NetworkAddress> >*>(static_cast<ChangeQuorumCheckerActor*>(this)));
															#line 4107 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1when1(Optional<ClusterConnectionString> const& __clusterConnectionStringOptional,int loopDepth) 
	{
															#line 1139 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		clusterConnectionStringOptional = __clusterConnectionStringOptional;
															#line 4116 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1when1(Optional<ClusterConnectionString> && __clusterConnectionStringOptional,int loopDepth) 
	{
		clusterConnectionStringOptional = std::move(__clusterConnectionStringOptional);
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<ChangeQuorumCheckerActor*>(this)->actor_wait_state > 0) static_cast<ChangeQuorumCheckerActor*>(this)->actor_wait_state = 0;
		static_cast<ChangeQuorumCheckerActor*>(this)->ActorCallback< ChangeQuorumCheckerActor, 0, Optional<ClusterConnectionString> >::remove();

	}
	void a_callback_fire(ActorCallback< ChangeQuorumCheckerActor, 0, Optional<ClusterConnectionString> >*,Optional<ClusterConnectionString> const& value) 
	{
		fdb_probe_actor_enter("changeQuorumChecker", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeQuorumChecker", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< ChangeQuorumCheckerActor, 0, Optional<ClusterConnectionString> >*,Optional<ClusterConnectionString> && value) 
	{
		fdb_probe_actor_enter("changeQuorumChecker", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeQuorumChecker", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< ChangeQuorumCheckerActor, 0, Optional<ClusterConnectionString> >*,Error err) 
	{
		fdb_probe_actor_enter("changeQuorumChecker", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeQuorumChecker", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont2(int loopDepth) 
	{
															#line 1154 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (desiredCoordinators.size() != conn->hostnames.size() + conn->coords.size())
															#line 4183 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 1155 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			TraceEvent("ChangeQuorumCheckerEarlyTermination") .detail("Reason", "One or more hostnames are unresolvable") .backtrace();
															#line 1158 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (!static_cast<ChangeQuorumCheckerActor*>(this)->SAV<Optional<CoordinatorsResult>>::futures) { (void)(CoordinatorsResult::COORDINATOR_UNREACHABLE); this->~ChangeQuorumCheckerActorState(); static_cast<ChangeQuorumCheckerActor*>(this)->destroy(); return 0; }
															#line 4189 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			new (&static_cast<ChangeQuorumCheckerActor*>(this)->SAV< Optional<CoordinatorsResult> >::value()) Optional<CoordinatorsResult>(CoordinatorsResult::COORDINATOR_UNREACHABLE);
			this->~ChangeQuorumCheckerActorState();
			static_cast<ChangeQuorumCheckerActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 1161 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (newName.empty())
															#line 4197 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 1162 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			newName = old.clusterKeyName().toString();
															#line 4201 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		}
															#line 1164 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		std::sort(conn->hostnames.begin(), conn->hostnames.end());
															#line 1165 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		std::sort(conn->coords.begin(), conn->coords.end());
															#line 1166 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		std::sort(old.hostnames.begin(), old.hostnames.end());
															#line 1167 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		std::sort(old.coords.begin(), old.coords.end());
															#line 1168 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (conn->hostnames == old.hostnames && conn->coords == old.coords && old.clusterKeyName() == newName)
															#line 4213 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 1169 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			connectionStrings.clear();
															#line 1170 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (g_network->isSimulated() && g_simulator->configDBType == ConfigDBType::DISABLED)
															#line 4219 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 1171 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				disableConfigDB = true;
															#line 4223 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			}
															#line 1173 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (!disableConfigDB)
															#line 4227 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 1174 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				StrictFuture<Void> __when_expr_2 = verifyConfigurationDatabaseAlive(tr->getDatabase());
															#line 1174 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				if (static_cast<ChangeQuorumCheckerActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 4233 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont2when1(__when_expr_2.get(), loopDepth); };
				static_cast<ChangeQuorumCheckerActor*>(this)->actor_wait_state = 3;
															#line 1174 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< ChangeQuorumCheckerActor, 2, Void >*>(static_cast<ChangeQuorumCheckerActor*>(this)));
															#line 4238 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				loopDepth = 0;
			}
			else
			{
				loopDepth = a_body1cont8(loopDepth);
			}
		}
		else
		{
			loopDepth = a_body1cont5(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont1when1(std::vector<NetworkAddress> const& __desiredCoordinators,int loopDepth) 
	{
															#line 1153 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		desiredCoordinators = __desiredCoordinators;
															#line 4257 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = a_body1cont2(loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(std::vector<NetworkAddress> && __desiredCoordinators,int loopDepth) 
	{
		desiredCoordinators = std::move(__desiredCoordinators);
		loopDepth = a_body1cont2(loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<ChangeQuorumCheckerActor*>(this)->actor_wait_state > 0) static_cast<ChangeQuorumCheckerActor*>(this)->actor_wait_state = 0;
		static_cast<ChangeQuorumCheckerActor*>(this)->ActorCallback< ChangeQuorumCheckerActor, 1, std::vector<NetworkAddress> >::remove();

	}
	void a_callback_fire(ActorCallback< ChangeQuorumCheckerActor, 1, std::vector<NetworkAddress> >*,std::vector<NetworkAddress> const& value) 
	{
		fdb_probe_actor_enter("changeQuorumChecker", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeQuorumChecker", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< ChangeQuorumCheckerActor, 1, std::vector<NetworkAddress> >*,std::vector<NetworkAddress> && value) 
	{
		fdb_probe_actor_enter("changeQuorumChecker", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeQuorumChecker", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< ChangeQuorumCheckerActor, 1, std::vector<NetworkAddress> >*,Error err) 
	{
		fdb_probe_actor_enter("changeQuorumChecker", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeQuorumChecker", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont5(int loopDepth) 
	{
															#line 1188 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		conn->parseKey(newName + ':' + deterministicRandom()->randomAlphaNumeric(32));
															#line 1189 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		connectionStrings.push_back(conn->toString());
															#line 1191 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (g_network->isSimulated())
															#line 4328 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 1192 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			int i = 0;
															#line 1193 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			int protectedCount = 0;
															#line 1194 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			int minimumCoordinators = (desiredCoordinators.size() / 2) + 1;
															#line 1195 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			for(;protectedCount < minimumCoordinators && i < desiredCoordinators.size();) {
															#line 1196 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				auto process = g_simulator->getProcessByAddress(desiredCoordinators[i]);
															#line 1197 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				auto addresses = process->addresses;
															#line 1199 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				if (!process->isReliable())
															#line 4344 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				{
															#line 1200 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
					i++;
															#line 4348 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
					continue;
				}
															#line 1204 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				g_simulator->protectedAddresses.insert(process->addresses.address);
															#line 1205 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				if (addresses.secondaryAddress.present())
															#line 4355 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				{
															#line 1206 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
					g_simulator->protectedAddresses.insert(process->addresses.secondaryAddress.get());
															#line 4359 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				}
															#line 1208 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				TraceEvent("ProtectCoordinator").detail("Address", desiredCoordinators[i]).backtrace();
															#line 1209 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				protectedCount++;
															#line 1210 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				i++;
															#line 4367 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			}
															#line 1213 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (protectedCount < minimumCoordinators)
															#line 4371 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 1214 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				TraceEvent("NotEnoughReliableCoordinators") .detail("NumReliable", protectedCount) .detail("MinimumRequired", minimumCoordinators) .detail("ConnectionString", conn->toString());
															#line 1219 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				if (!static_cast<ChangeQuorumCheckerActor*>(this)->SAV<Optional<CoordinatorsResult>>::futures) { (void)(CoordinatorsResult::COORDINATOR_UNREACHABLE); this->~ChangeQuorumCheckerActorState(); static_cast<ChangeQuorumCheckerActor*>(this)->destroy(); return 0; }
															#line 4377 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				new (&static_cast<ChangeQuorumCheckerActor*>(this)->SAV< Optional<CoordinatorsResult> >::value()) Optional<CoordinatorsResult>(CoordinatorsResult::COORDINATOR_UNREACHABLE);
				this->~ChangeQuorumCheckerActorState();
				static_cast<ChangeQuorumCheckerActor*>(this)->finishSendAndDelPromiseRef();
				return 0;
			}
		}
															#line 1223 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		std::vector<Future<Optional<LeaderInfo>>> leaderServers;
															#line 1224 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		ClientCoordinators coord(Reference<ClusterConnectionMemoryRecord>(new ClusterConnectionMemoryRecord(*conn)));
															#line 1226 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		leaderServers.reserve(coord.clientLeaderServers.size());
															#line 1227 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		for(int i = 0;i < coord.clientLeaderServers.size();i++) {
															#line 1228 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (coord.clientLeaderServers[i].hostname.present())
															#line 4394 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 1229 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				leaderServers.push_back(retryGetReplyFromHostname(GetLeaderRequest(coord.clusterKey, UID()), coord.clientLeaderServers[i].hostname.get(), WLTOKEN_CLIENTLEADERREG_GETLEADER, TaskPriority::CoordinationReply));
															#line 4398 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			}
			else
			{
															#line 1234 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				leaderServers.push_back(retryBrokenPromise(coord.clientLeaderServers[i].getLeader, GetLeaderRequest(coord.clusterKey, UID()), TaskPriority::CoordinationReply));
															#line 4404 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			}
		}
															#line 1241 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		StrictFuture<Void> __when_expr_5 = waitForAll(leaderServers);
															#line 1240 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (static_cast<ChangeQuorumCheckerActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 4411 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		if (__when_expr_5.isReady()) { if (__when_expr_5.isError()) return a_body1Catch1(__when_expr_5.getError(), loopDepth); else return a_body1cont5when1(__when_expr_5.get(), loopDepth); };
															#line 1242 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		StrictFuture<Void> __when_expr_6 = delay(5.0);
															#line 4415 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		if (__when_expr_6.isReady()) { if (__when_expr_6.isError()) return a_body1Catch1(__when_expr_6.getError(), loopDepth); else return a_body1cont5when2(__when_expr_6.get(), loopDepth); };
		static_cast<ChangeQuorumCheckerActor*>(this)->actor_wait_state = 6;
															#line 1241 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		__when_expr_5.addCallbackAndClear(static_cast<ActorCallback< ChangeQuorumCheckerActor, 5, Void >*>(static_cast<ChangeQuorumCheckerActor*>(this)));
															#line 1242 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		__when_expr_6.addCallbackAndClear(static_cast<ActorCallback< ChangeQuorumCheckerActor, 6, Void >*>(static_cast<ChangeQuorumCheckerActor*>(this)));
															#line 4422 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont8(int loopDepth) 
	{
															#line 1176 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (BUGGIFY_WITH_PROB(0.1))
															#line 4431 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 1182 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Void> __when_expr_3 = delay(deterministicRandom()->random01() * 10);
															#line 1182 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<ChangeQuorumCheckerActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 4437 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1cont8when1(__when_expr_3.get(), loopDepth); };
			static_cast<ChangeQuorumCheckerActor*>(this)->actor_wait_state = 4;
															#line 1182 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< ChangeQuorumCheckerActor, 3, Void >*>(static_cast<ChangeQuorumCheckerActor*>(this)));
															#line 4442 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1cont11(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont10(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont8(loopDepth);

		return loopDepth;
	}
	int a_body1cont10(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont8(loopDepth);

		return loopDepth;
	}
	int a_body1cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont10(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont10(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<ChangeQuorumCheckerActor*>(this)->actor_wait_state > 0) static_cast<ChangeQuorumCheckerActor*>(this)->actor_wait_state = 0;
		static_cast<ChangeQuorumCheckerActor*>(this)->ActorCallback< ChangeQuorumCheckerActor, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< ChangeQuorumCheckerActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("changeQuorumChecker", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeQuorumChecker", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< ChangeQuorumCheckerActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("changeQuorumChecker", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeQuorumChecker", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< ChangeQuorumCheckerActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("changeQuorumChecker", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeQuorumChecker", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1cont11(int loopDepth) 
	{
															#line 1184 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		StrictFuture<Void> __when_expr_4 = resetPreviousCoordinatorsKey(tr->getDatabase());
															#line 1184 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (static_cast<ChangeQuorumCheckerActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 4533 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1Catch1(__when_expr_4.getError(), loopDepth); else return a_body1cont11when1(__when_expr_4.get(), loopDepth); };
		static_cast<ChangeQuorumCheckerActor*>(this)->actor_wait_state = 5;
															#line 1184 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< ChangeQuorumCheckerActor, 4, Void >*>(static_cast<ChangeQuorumCheckerActor*>(this)));
															#line 4538 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont12(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont11(loopDepth);

		return loopDepth;
	}
	int a_body1cont12(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont11(loopDepth);

		return loopDepth;
	}
	int a_body1cont8when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont12(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont8when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont12(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<ChangeQuorumCheckerActor*>(this)->actor_wait_state > 0) static_cast<ChangeQuorumCheckerActor*>(this)->actor_wait_state = 0;
		static_cast<ChangeQuorumCheckerActor*>(this)->ActorCallback< ChangeQuorumCheckerActor, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< ChangeQuorumCheckerActor, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("changeQuorumChecker", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont8when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeQuorumChecker", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< ChangeQuorumCheckerActor, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("changeQuorumChecker", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont8when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeQuorumChecker", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< ChangeQuorumCheckerActor, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("changeQuorumChecker", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeQuorumChecker", reinterpret_cast<unsigned long>(this), 3);

	}
	int a_body1cont11cont1(Void const& _,int loopDepth) 
	{
															#line 1185 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<ChangeQuorumCheckerActor*>(this)->SAV<Optional<CoordinatorsResult>>::futures) { (void)(CoordinatorsResult::SAME_NETWORK_ADDRESSES); this->~ChangeQuorumCheckerActorState(); static_cast<ChangeQuorumCheckerActor*>(this)->destroy(); return 0; }
															#line 4622 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<ChangeQuorumCheckerActor*>(this)->SAV< Optional<CoordinatorsResult> >::value()) Optional<CoordinatorsResult>(CoordinatorsResult::SAME_NETWORK_ADDRESSES);
		this->~ChangeQuorumCheckerActorState();
		static_cast<ChangeQuorumCheckerActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont11cont1(Void && _,int loopDepth) 
	{
															#line 1185 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<ChangeQuorumCheckerActor*>(this)->SAV<Optional<CoordinatorsResult>>::futures) { (void)(CoordinatorsResult::SAME_NETWORK_ADDRESSES); this->~ChangeQuorumCheckerActorState(); static_cast<ChangeQuorumCheckerActor*>(this)->destroy(); return 0; }
															#line 4634 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<ChangeQuorumCheckerActor*>(this)->SAV< Optional<CoordinatorsResult> >::value()) Optional<CoordinatorsResult>(CoordinatorsResult::SAME_NETWORK_ADDRESSES);
		this->~ChangeQuorumCheckerActorState();
		static_cast<ChangeQuorumCheckerActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont11when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont11cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont11when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont11cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose5() 
	{
		if (static_cast<ChangeQuorumCheckerActor*>(this)->actor_wait_state > 0) static_cast<ChangeQuorumCheckerActor*>(this)->actor_wait_state = 0;
		static_cast<ChangeQuorumCheckerActor*>(this)->ActorCallback< ChangeQuorumCheckerActor, 4, Void >::remove();

	}
	void a_callback_fire(ActorCallback< ChangeQuorumCheckerActor, 4, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("changeQuorumChecker", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont11when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeQuorumChecker", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_fire(ActorCallback< ChangeQuorumCheckerActor, 4, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("changeQuorumChecker", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont11when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeQuorumChecker", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_error(ActorCallback< ChangeQuorumCheckerActor, 4, Void >*,Error err) 
	{
		fdb_probe_actor_enter("changeQuorumChecker", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeQuorumChecker", reinterpret_cast<unsigned long>(this), 4);

	}
	int a_body1cont13(int loopDepth) 
	{
															#line 1246 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		TraceEvent("ChangeQuorumCheckerSetCoordinatorsKey") .detail("CurrentCoordinators", old.toString()) .detail("NewCoordinators", conn->toString());
															#line 1249 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		tr->set(coordinatorsKey, conn->toString());
															#line 1250 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<ChangeQuorumCheckerActor*>(this)->SAV<Optional<CoordinatorsResult>>::futures) { (void)(Optional<CoordinatorsResult>()); this->~ChangeQuorumCheckerActorState(); static_cast<ChangeQuorumCheckerActor*>(this)->destroy(); return 0; }
															#line 4713 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<ChangeQuorumCheckerActor*>(this)->SAV< Optional<CoordinatorsResult> >::value()) Optional<CoordinatorsResult>(Optional<CoordinatorsResult>());
		this->~ChangeQuorumCheckerActorState();
		static_cast<ChangeQuorumCheckerActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont5when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont13(loopDepth);

		return loopDepth;
	}
	int a_body1cont5when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont13(loopDepth);

		return loopDepth;
	}
	int a_body1cont5when2(Void const& _,int loopDepth) 
	{
															#line 1243 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<ChangeQuorumCheckerActor*>(this)->SAV<Optional<CoordinatorsResult>>::futures) { (void)(CoordinatorsResult::COORDINATOR_UNREACHABLE); this->~ChangeQuorumCheckerActorState(); static_cast<ChangeQuorumCheckerActor*>(this)->destroy(); return 0; }
															#line 4737 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<ChangeQuorumCheckerActor*>(this)->SAV< Optional<CoordinatorsResult> >::value()) Optional<CoordinatorsResult>(CoordinatorsResult::COORDINATOR_UNREACHABLE);
		this->~ChangeQuorumCheckerActorState();
		static_cast<ChangeQuorumCheckerActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont5when2(Void && _,int loopDepth) 
	{
															#line 1243 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<ChangeQuorumCheckerActor*>(this)->SAV<Optional<CoordinatorsResult>>::futures) { (void)(CoordinatorsResult::COORDINATOR_UNREACHABLE); this->~ChangeQuorumCheckerActorState(); static_cast<ChangeQuorumCheckerActor*>(this)->destroy(); return 0; }
															#line 4749 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<ChangeQuorumCheckerActor*>(this)->SAV< Optional<CoordinatorsResult> >::value()) Optional<CoordinatorsResult>(CoordinatorsResult::COORDINATOR_UNREACHABLE);
		this->~ChangeQuorumCheckerActorState();
		static_cast<ChangeQuorumCheckerActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	void a_exitChoose6() 
	{
		if (static_cast<ChangeQuorumCheckerActor*>(this)->actor_wait_state > 0) static_cast<ChangeQuorumCheckerActor*>(this)->actor_wait_state = 0;
		static_cast<ChangeQuorumCheckerActor*>(this)->ActorCallback< ChangeQuorumCheckerActor, 5, Void >::remove();
		static_cast<ChangeQuorumCheckerActor*>(this)->ActorCallback< ChangeQuorumCheckerActor, 6, Void >::remove();

	}
	void a_callback_fire(ActorCallback< ChangeQuorumCheckerActor, 5, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("changeQuorumChecker", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1cont5when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeQuorumChecker", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_fire(ActorCallback< ChangeQuorumCheckerActor, 5, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("changeQuorumChecker", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1cont5when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeQuorumChecker", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_error(ActorCallback< ChangeQuorumCheckerActor, 5, Void >*,Error err) 
	{
		fdb_probe_actor_enter("changeQuorumChecker", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeQuorumChecker", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_fire(ActorCallback< ChangeQuorumCheckerActor, 6, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("changeQuorumChecker", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose6();
		try {
			a_body1cont5when2(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeQuorumChecker", reinterpret_cast<unsigned long>(this), 6);

	}
	void a_callback_fire(ActorCallback< ChangeQuorumCheckerActor, 6, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("changeQuorumChecker", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose6();
		try {
			a_body1cont5when2(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeQuorumChecker", reinterpret_cast<unsigned long>(this), 6);

	}
	void a_callback_error(ActorCallback< ChangeQuorumCheckerActor, 6, Void >*,Error err) 
	{
		fdb_probe_actor_enter("changeQuorumChecker", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose6();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeQuorumChecker", reinterpret_cast<unsigned long>(this), 6);

	}
															#line 1134 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Transaction* tr;
															#line 1134 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	ClusterConnectionString* conn;
															#line 1134 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	std::string newName;
															#line 1134 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	bool disableConfigDB;
															#line 1139 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Optional<ClusterConnectionString> clusterConnectionStringOptional;
															#line 1147 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	ClusterConnectionString old;
															#line 1153 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	std::vector<NetworkAddress> desiredCoordinators;
															#line 4868 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
};
// This generated class is to be used only via changeQuorumChecker()
															#line 1134 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class ChangeQuorumCheckerActor final : public Actor<Optional<CoordinatorsResult>>, public ActorCallback< ChangeQuorumCheckerActor, 0, Optional<ClusterConnectionString> >, public ActorCallback< ChangeQuorumCheckerActor, 1, std::vector<NetworkAddress> >, public ActorCallback< ChangeQuorumCheckerActor, 2, Void >, public ActorCallback< ChangeQuorumCheckerActor, 3, Void >, public ActorCallback< ChangeQuorumCheckerActor, 4, Void >, public ActorCallback< ChangeQuorumCheckerActor, 5, Void >, public ActorCallback< ChangeQuorumCheckerActor, 6, Void >, public FastAllocated<ChangeQuorumCheckerActor>, public ChangeQuorumCheckerActorState<ChangeQuorumCheckerActor> {
															#line 4873 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
	using FastAllocated<ChangeQuorumCheckerActor>::operator new;
	using FastAllocated<ChangeQuorumCheckerActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Optional<CoordinatorsResult>>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< ChangeQuorumCheckerActor, 0, Optional<ClusterConnectionString> >;
friend struct ActorCallback< ChangeQuorumCheckerActor, 1, std::vector<NetworkAddress> >;
friend struct ActorCallback< ChangeQuorumCheckerActor, 2, Void >;
friend struct ActorCallback< ChangeQuorumCheckerActor, 3, Void >;
friend struct ActorCallback< ChangeQuorumCheckerActor, 4, Void >;
friend struct ActorCallback< ChangeQuorumCheckerActor, 5, Void >;
friend struct ActorCallback< ChangeQuorumCheckerActor, 6, Void >;
															#line 1134 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	ChangeQuorumCheckerActor(Transaction* const& tr,ClusterConnectionString* const& conn,std::string const& newName,bool const& disableConfigDB) 
															#line 4890 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		 : Actor<Optional<CoordinatorsResult>>(),
		   ChangeQuorumCheckerActorState<ChangeQuorumCheckerActor>(tr, conn, newName, disableConfigDB)
	{
		fdb_probe_actor_enter("changeQuorumChecker", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("changeQuorumChecker");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("changeQuorumChecker", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< ChangeQuorumCheckerActor, 0, Optional<ClusterConnectionString> >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< ChangeQuorumCheckerActor, 1, std::vector<NetworkAddress> >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< ChangeQuorumCheckerActor, 2, Void >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< ChangeQuorumCheckerActor, 3, Void >*)0, actor_cancelled()); break;
		case 5: this->a_callback_error((ActorCallback< ChangeQuorumCheckerActor, 4, Void >*)0, actor_cancelled()); break;
		case 6: this->a_callback_error((ActorCallback< ChangeQuorumCheckerActor, 5, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 1134 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
[[nodiscard]] Future<Optional<CoordinatorsResult>> changeQuorumChecker( Transaction* const& tr, ClusterConnectionString* const& conn, std::string const& newName, bool const& disableConfigDB ) {
															#line 1134 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	return Future<Optional<CoordinatorsResult>>(new ChangeQuorumCheckerActor(tr, conn, newName, disableConfigDB));
															#line 4923 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
}

#line 1252 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"

															#line 4928 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via changeQuorum()
															#line 1253 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
template <class ChangeQuorumActor>
															#line 1253 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class ChangeQuorumActorState {
															#line 4935 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
															#line 1253 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	ChangeQuorumActorState(Database const& cx,Reference<IQuorumChange> const& change) 
															#line 1253 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
															#line 1253 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		 : cx(cx),
															#line 1253 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   change(change),
															#line 1254 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   tr(cx),
															#line 1255 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   retries(0),
															#line 1256 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   desiredCoordinators(),
															#line 1257 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   notEnoughMachineResults(0)
															#line 4952 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("changeQuorum", reinterpret_cast<unsigned long>(this));

	}
	~ChangeQuorumActorState() 
	{
		fdb_probe_actor_destroy("changeQuorum", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 1259 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			;
															#line 4967 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~ChangeQuorumActorState();
		static_cast<ChangeQuorumActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
		try {
															#line 1261 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Optional<ClusterConnectionString>> __when_expr_0 = getClusterConnectionStringFromStorageServer(&tr);
															#line 1261 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<ChangeQuorumActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 5000 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1loopBody1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
			static_cast<ChangeQuorumActor*>(this)->actor_wait_state = 1;
															#line 1261 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< ChangeQuorumActor, 0, Optional<ClusterConnectionString> >*>(static_cast<ChangeQuorumActor*>(this)));
															#line 5005 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 1356 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			TraceEvent("RetryQuorumChange").error(e).detail("Retries", retries);
															#line 1357 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Void> __when_expr_8 = tr.onError(e);
															#line 1357 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<ChangeQuorumActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 5031 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_8.isReady()) { if (__when_expr_8.isError()) return a_body1Catch1(__when_expr_8.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1Catch1when1(__when_expr_8.get(), loopDepth); };
			static_cast<ChangeQuorumActor*>(this)->actor_wait_state = 8;
															#line 1357 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_8.addCallbackAndClear(static_cast<ActorCallback< ChangeQuorumActor, 8, Void >*>(static_cast<ChangeQuorumActor*>(this)));
															#line 5036 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(int loopDepth) 
	{
															#line 1264 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!clusterConnectionStringOptional.present())
															#line 5051 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 1265 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (!static_cast<ChangeQuorumActor*>(this)->SAV<CoordinatorsResult>::futures) { (void)(CoordinatorsResult::BAD_DATABASE_STATE); this->~ChangeQuorumActorState(); static_cast<ChangeQuorumActor*>(this)->destroy(); return 0; }
															#line 5055 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			new (&static_cast<ChangeQuorumActor*>(this)->SAV< CoordinatorsResult >::value()) CoordinatorsResult(CoordinatorsResult::BAD_DATABASE_STATE);
			this->~ChangeQuorumActorState();
			static_cast<ChangeQuorumActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 1269 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		oldClusterConnectionString = clusterConnectionStringOptional.get();
															#line 1270 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		oldClusterKeyName = oldClusterConnectionString.clusterKeyName();
															#line 1272 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		StrictFuture<std::vector<NetworkAddress>> __when_expr_1 = oldClusterConnectionString.tryResolveHostnames();
															#line 1272 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (static_cast<ChangeQuorumActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 5069 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
		static_cast<ChangeQuorumActor*>(this)->actor_wait_state = 2;
															#line 1272 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< ChangeQuorumActor, 1, std::vector<NetworkAddress> >*>(static_cast<ChangeQuorumActor*>(this)));
															#line 5074 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1when1(Optional<ClusterConnectionString> const& __clusterConnectionStringOptional,int loopDepth) 
	{
															#line 1261 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		clusterConnectionStringOptional = __clusterConnectionStringOptional;
															#line 5083 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont2(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Optional<ClusterConnectionString> && __clusterConnectionStringOptional,int loopDepth) 
	{
		clusterConnectionStringOptional = std::move(__clusterConnectionStringOptional);
		loopDepth = a_body1loopBody1cont2(loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<ChangeQuorumActor*>(this)->actor_wait_state > 0) static_cast<ChangeQuorumActor*>(this)->actor_wait_state = 0;
		static_cast<ChangeQuorumActor*>(this)->ActorCallback< ChangeQuorumActor, 0, Optional<ClusterConnectionString> >::remove();

	}
	void a_callback_fire(ActorCallback< ChangeQuorumActor, 0, Optional<ClusterConnectionString> >*,Optional<ClusterConnectionString> const& value) 
	{
		fdb_probe_actor_enter("changeQuorum", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeQuorum", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< ChangeQuorumActor, 0, Optional<ClusterConnectionString> >*,Optional<ClusterConnectionString> && value) 
	{
		fdb_probe_actor_enter("changeQuorum", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeQuorum", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< ChangeQuorumActor, 0, Optional<ClusterConnectionString> >*,Error err) 
	{
		fdb_probe_actor_enter("changeQuorum", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeQuorum", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1cont3(int loopDepth) 
	{
															#line 1273 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		result = CoordinatorsResult::SUCCESS;
															#line 1274 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!desiredCoordinators.size())
															#line 5152 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 1275 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<std::vector<NetworkAddress>> __when_expr_2 = change->getDesiredCoordinators(&tr, oldCoordinators, Reference<ClusterConnectionMemoryRecord>( new ClusterConnectionMemoryRecord(oldClusterConnectionString)), result);
															#line 1275 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<ChangeQuorumActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 5158 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1loopBody1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1loopBody1cont3when1(__when_expr_2.get(), loopDepth); };
			static_cast<ChangeQuorumActor*>(this)->actor_wait_state = 3;
															#line 1275 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< ChangeQuorumActor, 2, std::vector<NetworkAddress> >*>(static_cast<ChangeQuorumActor*>(this)));
															#line 5163 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1loopBody1cont5(loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(std::vector<NetworkAddress> const& __oldCoordinators,int loopDepth) 
	{
															#line 1272 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		oldCoordinators = __oldCoordinators;
															#line 5177 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(std::vector<NetworkAddress> && __oldCoordinators,int loopDepth) 
	{
		oldCoordinators = std::move(__oldCoordinators);
		loopDepth = a_body1loopBody1cont3(loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<ChangeQuorumActor*>(this)->actor_wait_state > 0) static_cast<ChangeQuorumActor*>(this)->actor_wait_state = 0;
		static_cast<ChangeQuorumActor*>(this)->ActorCallback< ChangeQuorumActor, 1, std::vector<NetworkAddress> >::remove();

	}
	void a_callback_fire(ActorCallback< ChangeQuorumActor, 1, std::vector<NetworkAddress> >*,std::vector<NetworkAddress> const& value) 
	{
		fdb_probe_actor_enter("changeQuorum", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeQuorum", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< ChangeQuorumActor, 1, std::vector<NetworkAddress> >*,std::vector<NetworkAddress> && value) 
	{
		fdb_probe_actor_enter("changeQuorum", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeQuorum", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< ChangeQuorumActor, 1, std::vector<NetworkAddress> >*,Error err) 
	{
		fdb_probe_actor_enter("changeQuorum", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeQuorum", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1loopBody1cont5(int loopDepth) 
	{
															#line 1284 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (result == CoordinatorsResult::NOT_ENOUGH_MACHINES && notEnoughMachineResults < 1)
															#line 5244 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 1287 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			notEnoughMachineResults++;
															#line 1288 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Void> __when_expr_3 = delay(1.0);
															#line 1288 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<ChangeQuorumActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 5252 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1loopBody1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1loopBody1cont5when1(__when_expr_3.get(), loopDepth); };
			static_cast<ChangeQuorumActor*>(this)->actor_wait_state = 4;
															#line 1288 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< ChangeQuorumActor, 3, Void >*>(static_cast<ChangeQuorumActor*>(this)));
															#line 5257 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1loopBody1cont8(loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont6(std::vector<NetworkAddress> const& _desiredCoordinators,int loopDepth) 
	{
															#line 1281 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		desiredCoordinators = _desiredCoordinators;
															#line 5271 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont5(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont6(std::vector<NetworkAddress> && _desiredCoordinators,int loopDepth) 
	{
															#line 1281 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		desiredCoordinators = _desiredCoordinators;
															#line 5280 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont5(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont3when1(std::vector<NetworkAddress> const& _desiredCoordinators,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont6(_desiredCoordinators, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont3when1(std::vector<NetworkAddress> && _desiredCoordinators,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont6(std::move(_desiredCoordinators), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<ChangeQuorumActor*>(this)->actor_wait_state > 0) static_cast<ChangeQuorumActor*>(this)->actor_wait_state = 0;
		static_cast<ChangeQuorumActor*>(this)->ActorCallback< ChangeQuorumActor, 2, std::vector<NetworkAddress> >::remove();

	}
	void a_callback_fire(ActorCallback< ChangeQuorumActor, 2, std::vector<NetworkAddress> >*,std::vector<NetworkAddress> const& value) 
	{
		fdb_probe_actor_enter("changeQuorum", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont3when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeQuorum", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< ChangeQuorumActor, 2, std::vector<NetworkAddress> >*,std::vector<NetworkAddress> && value) 
	{
		fdb_probe_actor_enter("changeQuorum", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont3when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeQuorum", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< ChangeQuorumActor, 2, std::vector<NetworkAddress> >*,Error err) 
	{
		fdb_probe_actor_enter("changeQuorum", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeQuorum", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1loopBody1cont8(int loopDepth) 
	{
															#line 1292 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (result != CoordinatorsResult::SUCCESS)
															#line 5352 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 1293 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (!static_cast<ChangeQuorumActor*>(this)->SAV<CoordinatorsResult>::futures) { (void)(result); this->~ChangeQuorumActorState(); static_cast<ChangeQuorumActor*>(this)->destroy(); return 0; }
															#line 5356 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			new (&static_cast<ChangeQuorumActor*>(this)->SAV< CoordinatorsResult >::value()) CoordinatorsResult(std::move(result)); // state_var_RVO
			this->~ChangeQuorumActorState();
			static_cast<ChangeQuorumActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 1294 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!desiredCoordinators.size())
															#line 5364 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 1295 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (!static_cast<ChangeQuorumActor*>(this)->SAV<CoordinatorsResult>::futures) { (void)(CoordinatorsResult::INVALID_NETWORK_ADDRESSES); this->~ChangeQuorumActorState(); static_cast<ChangeQuorumActor*>(this)->destroy(); return 0; }
															#line 5368 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			new (&static_cast<ChangeQuorumActor*>(this)->SAV< CoordinatorsResult >::value()) CoordinatorsResult(CoordinatorsResult::INVALID_NETWORK_ADDRESSES);
			this->~ChangeQuorumActorState();
			static_cast<ChangeQuorumActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 1296 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		std::sort(desiredCoordinators.begin(), desiredCoordinators.end());
															#line 1298 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		std::string newName = change->getDesiredClusterKeyName();
															#line 1299 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (newName.empty())
															#line 5380 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 1300 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			newName = oldClusterKeyName.toString();
															#line 5384 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		}
															#line 1302 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (oldCoordinators == desiredCoordinators && oldClusterKeyName == newName)
															#line 5388 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 1303 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (!static_cast<ChangeQuorumActor*>(this)->SAV<CoordinatorsResult>::futures) { (void)(retries ? CoordinatorsResult::SUCCESS : CoordinatorsResult::SAME_NETWORK_ADDRESSES); this->~ChangeQuorumActorState(); static_cast<ChangeQuorumActor*>(this)->destroy(); return 0; }
															#line 5392 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			new (&static_cast<ChangeQuorumActor*>(this)->SAV< CoordinatorsResult >::value()) CoordinatorsResult(retries ? CoordinatorsResult::SUCCESS : CoordinatorsResult::SAME_NETWORK_ADDRESSES);
			this->~ChangeQuorumActorState();
			static_cast<ChangeQuorumActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 1305 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		newClusterConnectionString = ClusterConnectionString(desiredCoordinators, StringRef(newName + ':' + deterministicRandom()->randomAlphaNumeric(32)));
															#line 1307 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		newClusterKeyName = newClusterConnectionString.clusterKeyName();
															#line 1309 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (g_network->isSimulated())
															#line 5404 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 1310 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			for(int i = 0;i < (desiredCoordinators.size() / 2) + 1;i++) {
															#line 1311 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				auto process = g_simulator->getProcessByAddress(desiredCoordinators[i]);
															#line 1312 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				ASSERT(process->isReliable() || process->rebooting);
															#line 1314 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				g_simulator->protectedAddresses.insert(process->addresses.address);
															#line 1315 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				if (process->addresses.secondaryAddress.present())
															#line 5416 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				{
															#line 1316 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
					g_simulator->protectedAddresses.insert(process->addresses.secondaryAddress.get());
															#line 5420 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				}
															#line 1318 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				TraceEvent("ProtectCoordinator").detail("Address", desiredCoordinators[i]).backtrace();
															#line 5424 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			}
		}
															#line 1322 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		TraceEvent("AttemptingQuorumChange") .detail("FromCS", oldClusterConnectionString.toString()) .detail("ToCS", newClusterConnectionString.toString());
															#line 1325 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		CODE_PROBE(oldClusterKeyName != newClusterKeyName, "Quorum change with new name");
															#line 1326 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		CODE_PROBE(oldClusterKeyName == newClusterKeyName, "Quorum change with unchanged name");
															#line 1328 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		leaderServers = std::vector<Future<Optional<LeaderInfo>>>();
															#line 1329 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		coord = ClientCoordinators(Reference<ClusterConnectionMemoryRecord>( new ClusterConnectionMemoryRecord(newClusterConnectionString)));
															#line 1332 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!change->getDesiredClusterKeyName().empty())
															#line 5439 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 1333 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<CheckDescriptorMutableReply> __when_expr_4 = coord.clientLeaderServers[0].checkDescriptorMutable.getReply(CheckDescriptorMutableRequest());
															#line 1333 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<ChangeQuorumActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 5445 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1loopBody1Catch1(__when_expr_4.getError(), loopDepth); else return a_body1loopBody1cont8when1(__when_expr_4.get(), loopDepth); };
			static_cast<ChangeQuorumActor*>(this)->actor_wait_state = 5;
															#line 1333 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< ChangeQuorumActor, 4, CheckDescriptorMutableReply >*>(static_cast<ChangeQuorumActor*>(this)));
															#line 5450 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1loopBody1cont11(loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont9(Void const& _,int loopDepth) 
	{
															#line 1289 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		tr.reset();
															#line 5464 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		return a_body1loopHead1(loopDepth); // continue

		return loopDepth;
	}
	int a_body1loopBody1cont9(Void && _,int loopDepth) 
	{
															#line 1289 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		tr.reset();
															#line 5473 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		return a_body1loopHead1(loopDepth); // continue

		return loopDepth;
	}
	int a_body1loopBody1cont5when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont9(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont5when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont9(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<ChangeQuorumActor*>(this)->actor_wait_state > 0) static_cast<ChangeQuorumActor*>(this)->actor_wait_state = 0;
		static_cast<ChangeQuorumActor*>(this)->ActorCallback< ChangeQuorumActor, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< ChangeQuorumActor, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("changeQuorum", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1cont5when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeQuorum", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< ChangeQuorumActor, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("changeQuorum", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1cont5when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeQuorum", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< ChangeQuorumActor, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("changeQuorum", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeQuorum", reinterpret_cast<unsigned long>(this), 3);

	}
	int a_body1loopBody1cont11(int loopDepth) 
	{
															#line 1339 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		leaderServers.reserve(coord.clientLeaderServers.size());
															#line 1340 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		for(int i = 0;i < coord.clientLeaderServers.size();i++) {
															#line 1341 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			leaderServers.push_back(retryBrokenPromise(coord.clientLeaderServers[i].getLeader, GetLeaderRequest(coord.clusterKey, UID()), TaskPriority::CoordinationReply));
															#line 5549 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		}
															#line 1345 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		StrictFuture<Void> __when_expr_5 = waitForAll(leaderServers);
															#line 1344 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (static_cast<ChangeQuorumActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 5555 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		if (__when_expr_5.isReady()) { if (__when_expr_5.isError()) return a_body1loopBody1Catch1(__when_expr_5.getError(), loopDepth); else return a_body1loopBody1cont11when1(__when_expr_5.get(), loopDepth); };
															#line 1346 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		StrictFuture<Void> __when_expr_6 = delay(5.0);
															#line 5559 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		if (__when_expr_6.isReady()) { if (__when_expr_6.isError()) return a_body1loopBody1Catch1(__when_expr_6.getError(), loopDepth); else return a_body1loopBody1cont11when2(__when_expr_6.get(), loopDepth); };
		static_cast<ChangeQuorumActor*>(this)->actor_wait_state = 6;
															#line 1345 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		__when_expr_5.addCallbackAndClear(static_cast<ActorCallback< ChangeQuorumActor, 5, Void >*>(static_cast<ChangeQuorumActor*>(this)));
															#line 1346 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		__when_expr_6.addCallbackAndClear(static_cast<ActorCallback< ChangeQuorumActor, 6, Void >*>(static_cast<ChangeQuorumActor*>(this)));
															#line 5566 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont19(CheckDescriptorMutableReply const& mutabilityReply,int loopDepth) 
	{
															#line 1335 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!mutabilityReply.isMutable)
															#line 5575 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 1336 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (!static_cast<ChangeQuorumActor*>(this)->SAV<CoordinatorsResult>::futures) { (void)(CoordinatorsResult::BAD_DATABASE_STATE); this->~ChangeQuorumActorState(); static_cast<ChangeQuorumActor*>(this)->destroy(); return 0; }
															#line 5579 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			new (&static_cast<ChangeQuorumActor*>(this)->SAV< CoordinatorsResult >::value()) CoordinatorsResult(CoordinatorsResult::BAD_DATABASE_STATE);
			this->~ChangeQuorumActorState();
			static_cast<ChangeQuorumActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
		loopDepth = a_body1loopBody1cont11(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont19(CheckDescriptorMutableReply && mutabilityReply,int loopDepth) 
	{
															#line 1335 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!mutabilityReply.isMutable)
															#line 5593 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 1336 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (!static_cast<ChangeQuorumActor*>(this)->SAV<CoordinatorsResult>::futures) { (void)(CoordinatorsResult::BAD_DATABASE_STATE); this->~ChangeQuorumActorState(); static_cast<ChangeQuorumActor*>(this)->destroy(); return 0; }
															#line 5597 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			new (&static_cast<ChangeQuorumActor*>(this)->SAV< CoordinatorsResult >::value()) CoordinatorsResult(CoordinatorsResult::BAD_DATABASE_STATE);
			this->~ChangeQuorumActorState();
			static_cast<ChangeQuorumActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
		loopDepth = a_body1loopBody1cont11(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont8when1(CheckDescriptorMutableReply const& mutabilityReply,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont19(mutabilityReply, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont8when1(CheckDescriptorMutableReply && mutabilityReply,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont19(std::move(mutabilityReply), loopDepth);

		return loopDepth;
	}
	void a_exitChoose5() 
	{
		if (static_cast<ChangeQuorumActor*>(this)->actor_wait_state > 0) static_cast<ChangeQuorumActor*>(this)->actor_wait_state = 0;
		static_cast<ChangeQuorumActor*>(this)->ActorCallback< ChangeQuorumActor, 4, CheckDescriptorMutableReply >::remove();

	}
	void a_callback_fire(ActorCallback< ChangeQuorumActor, 4, CheckDescriptorMutableReply >*,CheckDescriptorMutableReply const& value) 
	{
		fdb_probe_actor_enter("changeQuorum", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1loopBody1cont8when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeQuorum", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_fire(ActorCallback< ChangeQuorumActor, 4, CheckDescriptorMutableReply >*,CheckDescriptorMutableReply && value) 
	{
		fdb_probe_actor_enter("changeQuorum", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1loopBody1cont8when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeQuorum", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_error(ActorCallback< ChangeQuorumActor, 4, CheckDescriptorMutableReply >*,Error err) 
	{
		fdb_probe_actor_enter("changeQuorum", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeQuorum", reinterpret_cast<unsigned long>(this), 4);

	}
	int a_body1loopBody1cont11cont1(int loopDepth) 
	{
															#line 1351 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		tr.set(coordinatorsKey, newClusterConnectionString.toString());
															#line 1353 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		StrictFuture<Void> __when_expr_7 = tr.commit();
															#line 1353 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (static_cast<ChangeQuorumActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 5678 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		if (__when_expr_7.isReady()) { if (__when_expr_7.isError()) return a_body1loopBody1Catch1(__when_expr_7.getError(), loopDepth); else return a_body1loopBody1cont11cont1when1(__when_expr_7.get(), loopDepth); };
		static_cast<ChangeQuorumActor*>(this)->actor_wait_state = 7;
															#line 1353 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		__when_expr_7.addCallbackAndClear(static_cast<ActorCallback< ChangeQuorumActor, 7, Void >*>(static_cast<ChangeQuorumActor*>(this)));
															#line 5683 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont11when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont11cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont11when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont11cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont11when2(Void const& _,int loopDepth) 
	{
															#line 1347 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<ChangeQuorumActor*>(this)->SAV<CoordinatorsResult>::futures) { (void)(CoordinatorsResult::COORDINATOR_UNREACHABLE); this->~ChangeQuorumActorState(); static_cast<ChangeQuorumActor*>(this)->destroy(); return 0; }
															#line 5704 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<ChangeQuorumActor*>(this)->SAV< CoordinatorsResult >::value()) CoordinatorsResult(CoordinatorsResult::COORDINATOR_UNREACHABLE);
		this->~ChangeQuorumActorState();
		static_cast<ChangeQuorumActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1cont11when2(Void && _,int loopDepth) 
	{
															#line 1347 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<ChangeQuorumActor*>(this)->SAV<CoordinatorsResult>::futures) { (void)(CoordinatorsResult::COORDINATOR_UNREACHABLE); this->~ChangeQuorumActorState(); static_cast<ChangeQuorumActor*>(this)->destroy(); return 0; }
															#line 5716 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<ChangeQuorumActor*>(this)->SAV< CoordinatorsResult >::value()) CoordinatorsResult(CoordinatorsResult::COORDINATOR_UNREACHABLE);
		this->~ChangeQuorumActorState();
		static_cast<ChangeQuorumActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	void a_exitChoose6() 
	{
		if (static_cast<ChangeQuorumActor*>(this)->actor_wait_state > 0) static_cast<ChangeQuorumActor*>(this)->actor_wait_state = 0;
		static_cast<ChangeQuorumActor*>(this)->ActorCallback< ChangeQuorumActor, 5, Void >::remove();
		static_cast<ChangeQuorumActor*>(this)->ActorCallback< ChangeQuorumActor, 6, Void >::remove();

	}
	void a_callback_fire(ActorCallback< ChangeQuorumActor, 5, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("changeQuorum", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1loopBody1cont11when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeQuorum", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_fire(ActorCallback< ChangeQuorumActor, 5, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("changeQuorum", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1loopBody1cont11when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeQuorum", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_error(ActorCallback< ChangeQuorumActor, 5, Void >*,Error err) 
	{
		fdb_probe_actor_enter("changeQuorum", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeQuorum", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_fire(ActorCallback< ChangeQuorumActor, 6, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("changeQuorum", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose6();
		try {
			a_body1loopBody1cont11when2(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeQuorum", reinterpret_cast<unsigned long>(this), 6);

	}
	void a_callback_fire(ActorCallback< ChangeQuorumActor, 6, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("changeQuorum", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose6();
		try {
			a_body1loopBody1cont11when2(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeQuorum", reinterpret_cast<unsigned long>(this), 6);

	}
	void a_callback_error(ActorCallback< ChangeQuorumActor, 6, Void >*,Error err) 
	{
		fdb_probe_actor_enter("changeQuorum", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose6();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeQuorum", reinterpret_cast<unsigned long>(this), 6);

	}
	int a_body1loopBody1cont11cont3(Void const& _,int loopDepth) 
	{
															#line 1354 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		ASSERT(false);
															#line 5825 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont11cont5(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont11cont3(Void && _,int loopDepth) 
	{
															#line 1354 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		ASSERT(false);
															#line 5834 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont11cont5(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont11cont1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont11cont3(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont11cont1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont11cont3(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose7() 
	{
		if (static_cast<ChangeQuorumActor*>(this)->actor_wait_state > 0) static_cast<ChangeQuorumActor*>(this)->actor_wait_state = 0;
		static_cast<ChangeQuorumActor*>(this)->ActorCallback< ChangeQuorumActor, 7, Void >::remove();

	}
	void a_callback_fire(ActorCallback< ChangeQuorumActor, 7, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("changeQuorum", reinterpret_cast<unsigned long>(this), 7);
		a_exitChoose7();
		try {
			a_body1loopBody1cont11cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeQuorum", reinterpret_cast<unsigned long>(this), 7);

	}
	void a_callback_fire(ActorCallback< ChangeQuorumActor, 7, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("changeQuorum", reinterpret_cast<unsigned long>(this), 7);
		a_exitChoose7();
		try {
			a_body1loopBody1cont11cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeQuorum", reinterpret_cast<unsigned long>(this), 7);

	}
	void a_callback_error(ActorCallback< ChangeQuorumActor, 7, Void >*,Error err) 
	{
		fdb_probe_actor_enter("changeQuorum", reinterpret_cast<unsigned long>(this), 7);
		a_exitChoose7();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeQuorum", reinterpret_cast<unsigned long>(this), 7);

	}
	int a_body1loopBody1cont11cont5(int loopDepth) 
	{
		try {
			loopDepth = a_body1loopBody1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
															#line 1358 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		++retries;
															#line 5919 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
															#line 1358 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		++retries;
															#line 5928 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose8() 
	{
		if (static_cast<ChangeQuorumActor*>(this)->actor_wait_state > 0) static_cast<ChangeQuorumActor*>(this)->actor_wait_state = 0;
		static_cast<ChangeQuorumActor*>(this)->ActorCallback< ChangeQuorumActor, 8, Void >::remove();

	}
	void a_callback_fire(ActorCallback< ChangeQuorumActor, 8, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("changeQuorum", reinterpret_cast<unsigned long>(this), 8);
		a_exitChoose8();
		try {
			a_body1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeQuorum", reinterpret_cast<unsigned long>(this), 8);

	}
	void a_callback_fire(ActorCallback< ChangeQuorumActor, 8, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("changeQuorum", reinterpret_cast<unsigned long>(this), 8);
		a_exitChoose8();
		try {
			a_body1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeQuorum", reinterpret_cast<unsigned long>(this), 8);

	}
	void a_callback_error(ActorCallback< ChangeQuorumActor, 8, Void >*,Error err) 
	{
		fdb_probe_actor_enter("changeQuorum", reinterpret_cast<unsigned long>(this), 8);
		a_exitChoose8();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeQuorum", reinterpret_cast<unsigned long>(this), 8);

	}
															#line 1253 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Database cx;
															#line 1253 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Reference<IQuorumChange> change;
															#line 1254 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Transaction tr;
															#line 1255 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	int retries;
															#line 1256 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	std::vector<NetworkAddress> desiredCoordinators;
															#line 1257 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	int notEnoughMachineResults;
															#line 1261 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Optional<ClusterConnectionString> clusterConnectionStringOptional;
															#line 1269 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	ClusterConnectionString oldClusterConnectionString;
															#line 1270 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Key oldClusterKeyName;
															#line 1272 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	std::vector<NetworkAddress> oldCoordinators;
															#line 1273 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	CoordinatorsResult result;
															#line 1305 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	ClusterConnectionString newClusterConnectionString;
															#line 1307 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Key newClusterKeyName;
															#line 1328 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	std::vector<Future<Optional<LeaderInfo>>> leaderServers;
															#line 1329 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	ClientCoordinators coord;
															#line 6026 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
};
// This generated class is to be used only via changeQuorum()
															#line 1253 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class ChangeQuorumActor final : public Actor<CoordinatorsResult>, public ActorCallback< ChangeQuorumActor, 0, Optional<ClusterConnectionString> >, public ActorCallback< ChangeQuorumActor, 1, std::vector<NetworkAddress> >, public ActorCallback< ChangeQuorumActor, 2, std::vector<NetworkAddress> >, public ActorCallback< ChangeQuorumActor, 3, Void >, public ActorCallback< ChangeQuorumActor, 4, CheckDescriptorMutableReply >, public ActorCallback< ChangeQuorumActor, 5, Void >, public ActorCallback< ChangeQuorumActor, 6, Void >, public ActorCallback< ChangeQuorumActor, 7, Void >, public ActorCallback< ChangeQuorumActor, 8, Void >, public FastAllocated<ChangeQuorumActor>, public ChangeQuorumActorState<ChangeQuorumActor> {
															#line 6031 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
	using FastAllocated<ChangeQuorumActor>::operator new;
	using FastAllocated<ChangeQuorumActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<CoordinatorsResult>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< ChangeQuorumActor, 0, Optional<ClusterConnectionString> >;
friend struct ActorCallback< ChangeQuorumActor, 1, std::vector<NetworkAddress> >;
friend struct ActorCallback< ChangeQuorumActor, 2, std::vector<NetworkAddress> >;
friend struct ActorCallback< ChangeQuorumActor, 3, Void >;
friend struct ActorCallback< ChangeQuorumActor, 4, CheckDescriptorMutableReply >;
friend struct ActorCallback< ChangeQuorumActor, 5, Void >;
friend struct ActorCallback< ChangeQuorumActor, 6, Void >;
friend struct ActorCallback< ChangeQuorumActor, 7, Void >;
friend struct ActorCallback< ChangeQuorumActor, 8, Void >;
															#line 1253 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	ChangeQuorumActor(Database const& cx,Reference<IQuorumChange> const& change) 
															#line 6050 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		 : Actor<CoordinatorsResult>(),
		   ChangeQuorumActorState<ChangeQuorumActor>(cx, change)
	{
		fdb_probe_actor_enter("changeQuorum", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("changeQuorum");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("changeQuorum", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< ChangeQuorumActor, 0, Optional<ClusterConnectionString> >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< ChangeQuorumActor, 1, std::vector<NetworkAddress> >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< ChangeQuorumActor, 2, std::vector<NetworkAddress> >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< ChangeQuorumActor, 3, Void >*)0, actor_cancelled()); break;
		case 5: this->a_callback_error((ActorCallback< ChangeQuorumActor, 4, CheckDescriptorMutableReply >*)0, actor_cancelled()); break;
		case 6: this->a_callback_error((ActorCallback< ChangeQuorumActor, 5, Void >*)0, actor_cancelled()); break;
		case 7: this->a_callback_error((ActorCallback< ChangeQuorumActor, 7, Void >*)0, actor_cancelled()); break;
		case 8: this->a_callback_error((ActorCallback< ChangeQuorumActor, 8, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 1253 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
[[nodiscard]] Future<CoordinatorsResult> changeQuorum( Database const& cx, Reference<IQuorumChange> const& change ) {
															#line 1253 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	return Future<CoordinatorsResult>(new ChangeQuorumActor(cx, change));
															#line 6085 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
}

#line 1362 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"

struct NameQuorumChange final : IQuorumChange {
	std::string newName;
	Reference<IQuorumChange> otherChange;
	explicit NameQuorumChange(std::string const& newName, Reference<IQuorumChange> const& otherChange)
	  : newName(newName), otherChange(otherChange) {}
	Future<std::vector<NetworkAddress>> getDesiredCoordinators(Transaction* tr,
	                                                           std::vector<NetworkAddress> oldCoordinators,
	                                                           Reference<IClusterConnectionRecord> ccr,
	                                                           CoordinatorsResult& t) override {
		return otherChange->getDesiredCoordinators(tr, oldCoordinators, ccr, t);
	}
	std::string getDesiredClusterKeyName() const override { return newName; }
};
Reference<IQuorumChange> nameQuorumChange(std::string const& name, Reference<IQuorumChange> const& other) {
	return Reference<IQuorumChange>(new NameQuorumChange(name, other));
}

struct AutoQuorumChange final : IQuorumChange {
	int desired;
	explicit AutoQuorumChange(int desired) : desired(desired) {}

	Future<std::vector<NetworkAddress>> getDesiredCoordinators(Transaction* tr,
	                                                           std::vector<NetworkAddress> oldCoordinators,
	                                                           Reference<IClusterConnectionRecord> ccr,
	                                                           CoordinatorsResult& err) override {
		return getDesired(Reference<AutoQuorumChange>::addRef(this), tr, oldCoordinators, ccr, &err);
	}

																#line 6118 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
// This generated class is to be used only via getRedundancy()
															#line 1391 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
template <class GetRedundancyActor>
															#line 1391 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class GetRedundancyActorState {
															#line 6124 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
															#line 1391 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	GetRedundancyActorState(AutoQuorumChange* const& self,Transaction* const& tr) 
															#line 1391 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
															#line 1391 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		 : self(self),
															#line 1391 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   tr(tr),
															#line 1392 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   fStorageReplicas(tr->get("storage_replicas"_sr.withPrefix(configKeysPrefix))),
															#line 1393 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   fLogReplicas(tr->get("log_replicas"_sr.withPrefix(configKeysPrefix)))
															#line 6137 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("getRedundancy", reinterpret_cast<unsigned long>(this));

	}
	~GetRedundancyActorState() 
	{
		fdb_probe_actor_destroy("getRedundancy", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 1394 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Void> __when_expr_0 = success(fStorageReplicas) && success(fLogReplicas);
															#line 1394 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<GetRedundancyActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 6154 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<GetRedundancyActor*>(this)->actor_wait_state = 1;
															#line 1394 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< GetRedundancyActor, 0, Void >*>(static_cast<GetRedundancyActor*>(this)));
															#line 6159 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~GetRedundancyActorState();
		static_cast<GetRedundancyActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void const& _,int loopDepth) 
	{
															#line 1395 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		int redundancy = std::min(atoi(fStorageReplicas.get().get().toString().c_str()), atoi(fLogReplicas.get().get().toString().c_str()));
															#line 1398 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<GetRedundancyActor*>(this)->SAV<int>::futures) { (void)(redundancy); this->~GetRedundancyActorState(); static_cast<GetRedundancyActor*>(this)->destroy(); return 0; }
															#line 6184 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<GetRedundancyActor*>(this)->SAV< int >::value()) int(redundancy);
		this->~GetRedundancyActorState();
		static_cast<GetRedundancyActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1(Void && _,int loopDepth) 
	{
															#line 1395 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		int redundancy = std::min(atoi(fStorageReplicas.get().get().toString().c_str()), atoi(fLogReplicas.get().get().toString().c_str()));
															#line 1398 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<GetRedundancyActor*>(this)->SAV<int>::futures) { (void)(redundancy); this->~GetRedundancyActorState(); static_cast<GetRedundancyActor*>(this)->destroy(); return 0; }
															#line 6198 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<GetRedundancyActor*>(this)->SAV< int >::value()) int(redundancy);
		this->~GetRedundancyActorState();
		static_cast<GetRedundancyActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<GetRedundancyActor*>(this)->actor_wait_state > 0) static_cast<GetRedundancyActor*>(this)->actor_wait_state = 0;
		static_cast<GetRedundancyActor*>(this)->ActorCallback< GetRedundancyActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetRedundancyActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getRedundancy", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRedundancy", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< GetRedundancyActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getRedundancy", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRedundancy", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< GetRedundancyActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getRedundancy", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRedundancy", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 1391 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	AutoQuorumChange* self;
															#line 1391 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Transaction* tr;
															#line 1392 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Future<Optional<Value>> fStorageReplicas;
															#line 1393 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Future<Optional<Value>> fLogReplicas;
															#line 6277 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
};
// This generated class is to be used only via getRedundancy()
															#line 1391 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class GetRedundancyActor final : public Actor<int>, public ActorCallback< GetRedundancyActor, 0, Void >, public FastAllocated<GetRedundancyActor>, public GetRedundancyActorState<GetRedundancyActor> {
															#line 6282 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
	using FastAllocated<GetRedundancyActor>::operator new;
	using FastAllocated<GetRedundancyActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<int>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< GetRedundancyActor, 0, Void >;
															#line 1391 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	GetRedundancyActor(AutoQuorumChange* const& self,Transaction* const& tr) 
															#line 6293 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		 : Actor<int>(),
		   GetRedundancyActorState<GetRedundancyActor>(self, tr)
	{
		fdb_probe_actor_enter("getRedundancy", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("getRedundancy");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("getRedundancy", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< GetRedundancyActor, 0, Void >*)0, actor_cancelled()); break;
		}

	}
};
															#line 1391 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
[[nodiscard]] static Future<int> getRedundancy( AutoQuorumChange* const& self, Transaction* const& tr ) {
															#line 1391 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	return Future<int>(new GetRedundancyActor(self, tr));
															#line 6320 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
}

#line 1400 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"

																#line 6325 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
// This generated class is to be used only via isAcceptable()
															#line 1401 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
template <class IsAcceptableActor>
															#line 1401 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class IsAcceptableActorState {
															#line 6331 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
															#line 1401 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	IsAcceptableActorState(AutoQuorumChange* const& self,Transaction* const& tr,std::vector<NetworkAddress> const& oldCoordinators,Reference<IClusterConnectionRecord> const& ccr,int const& desiredCount,std::set<AddressExclusion>* const& excluded) 
															#line 1401 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
															#line 1401 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		 : self(self),
															#line 1401 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   tr(tr),
															#line 1401 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   oldCoordinators(oldCoordinators),
															#line 1401 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   ccr(ccr),
															#line 1401 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   desiredCount(desiredCount),
															#line 1401 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   excluded(excluded)
															#line 6348 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("isAcceptable", reinterpret_cast<unsigned long>(this));

	}
	~IsAcceptableActorState() 
	{
		fdb_probe_actor_destroy("isAcceptable", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 1407 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			ClusterConnectionString cs = ccr->getConnectionString();
															#line 1408 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (oldCoordinators.size() != cs.hostnames.size() + cs.coords.size())
															#line 6365 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 1409 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				if (!static_cast<IsAcceptableActor*>(this)->SAV<bool>::futures) { (void)(false); this->~IsAcceptableActorState(); static_cast<IsAcceptableActor*>(this)->destroy(); return 0; }
															#line 6369 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				new (&static_cast<IsAcceptableActor*>(this)->SAV< bool >::value()) bool(false);
				this->~IsAcceptableActorState();
				static_cast<IsAcceptableActor*>(this)->finishSendAndDelPromiseRef();
				return 0;
			}
															#line 1413 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (oldCoordinators.size() < desiredCount)
															#line 6377 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 1414 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				if (!static_cast<IsAcceptableActor*>(this)->SAV<bool>::futures) { (void)(false); this->~IsAcceptableActorState(); static_cast<IsAcceptableActor*>(this)->destroy(); return 0; }
															#line 6381 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				new (&static_cast<IsAcceptableActor*>(this)->SAV< bool >::value()) bool(false);
				this->~IsAcceptableActorState();
				static_cast<IsAcceptableActor*>(this)->finishSendAndDelPromiseRef();
				return 0;
			}
															#line 1415 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (oldCoordinators.size() % 2 != 1)
															#line 6389 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 1416 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				if (!static_cast<IsAcceptableActor*>(this)->SAV<bool>::futures) { (void)(false); this->~IsAcceptableActorState(); static_cast<IsAcceptableActor*>(this)->destroy(); return 0; }
															#line 6393 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				new (&static_cast<IsAcceptableActor*>(this)->SAV< bool >::value()) bool(false);
				this->~IsAcceptableActorState();
				static_cast<IsAcceptableActor*>(this)->finishSendAndDelPromiseRef();
				return 0;
			}
															#line 1419 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			for( auto& c : oldCoordinators ) {
															#line 1420 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				if (addressExcluded(*excluded, c))
															#line 6403 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				{
															#line 1421 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
					if (!static_cast<IsAcceptableActor*>(this)->SAV<bool>::futures) { (void)(false); this->~IsAcceptableActorState(); static_cast<IsAcceptableActor*>(this)->destroy(); return 0; }
															#line 6407 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
					new (&static_cast<IsAcceptableActor*>(this)->SAV< bool >::value()) bool(false);
					this->~IsAcceptableActorState();
					static_cast<IsAcceptableActor*>(this)->finishSendAndDelPromiseRef();
					return 0;
				}
			}
															#line 1426 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			std::sort(oldCoordinators.begin(), oldCoordinators.end());
															#line 1427 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			for(int i = 1;i < oldCoordinators.size();i++) {
															#line 1428 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				if (oldCoordinators[i - 1].ip == oldCoordinators[i].ip)
															#line 6420 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				{
															#line 1429 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
					if (!static_cast<IsAcceptableActor*>(this)->SAV<bool>::futures) { (void)(false); this->~IsAcceptableActorState(); static_cast<IsAcceptableActor*>(this)->destroy(); return 0; }
															#line 6424 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
					new (&static_cast<IsAcceptableActor*>(this)->SAV< bool >::value()) bool(false);
					this->~IsAcceptableActorState();
					static_cast<IsAcceptableActor*>(this)->finishSendAndDelPromiseRef();
					return 0;
				}
			}
															#line 1432 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			ClientCoordinators coord(ccr);
															#line 1433 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			std::vector<Future<Optional<LeaderInfo>>> leaderServers;
															#line 1434 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			leaderServers.reserve(coord.clientLeaderServers.size());
															#line 1435 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			for(int i = 0;i < coord.clientLeaderServers.size();i++) {
															#line 1436 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				if (coord.clientLeaderServers[i].hostname.present())
															#line 6441 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				{
															#line 1437 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
					leaderServers.push_back(retryGetReplyFromHostname(GetLeaderRequest(coord.clusterKey, UID()), coord.clientLeaderServers[i].hostname.get(), WLTOKEN_CLIENTLEADERREG_GETLEADER, TaskPriority::CoordinationReply));
															#line 6445 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				}
				else
				{
															#line 1442 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
					leaderServers.push_back(retryBrokenPromise(coord.clientLeaderServers[i].getLeader, GetLeaderRequest(coord.clusterKey, UID()), TaskPriority::CoordinationReply));
															#line 6451 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				}
			}
															#line 1447 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Optional<std::vector<Optional<LeaderInfo>>>> __when_expr_0 = timeout(getAll(leaderServers), CLIENT_KNOBS->IS_ACCEPTABLE_DELAY);
															#line 1447 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<IsAcceptableActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 6458 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<IsAcceptableActor*>(this)->actor_wait_state = 1;
															#line 1447 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< IsAcceptableActor, 0, Optional<std::vector<Optional<LeaderInfo>>> >*>(static_cast<IsAcceptableActor*>(this)));
															#line 6463 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~IsAcceptableActorState();
		static_cast<IsAcceptableActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Optional<std::vector<Optional<LeaderInfo>>> const& results,int loopDepth) 
	{
															#line 1449 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!results.present())
															#line 6486 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 1450 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (!static_cast<IsAcceptableActor*>(this)->SAV<bool>::futures) { (void)(false); this->~IsAcceptableActorState(); static_cast<IsAcceptableActor*>(this)->destroy(); return 0; }
															#line 6490 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			new (&static_cast<IsAcceptableActor*>(this)->SAV< bool >::value()) bool(false);
			this->~IsAcceptableActorState();
			static_cast<IsAcceptableActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 1452 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		for( auto& r : results.get() ) {
															#line 1453 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (!r.present())
															#line 6500 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 1454 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				if (!static_cast<IsAcceptableActor*>(this)->SAV<bool>::futures) { (void)(false); this->~IsAcceptableActorState(); static_cast<IsAcceptableActor*>(this)->destroy(); return 0; }
															#line 6504 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				new (&static_cast<IsAcceptableActor*>(this)->SAV< bool >::value()) bool(false);
				this->~IsAcceptableActorState();
				static_cast<IsAcceptableActor*>(this)->finishSendAndDelPromiseRef();
				return 0;
			}
		}
															#line 1458 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<IsAcceptableActor*>(this)->SAV<bool>::futures) { (void)(true); this->~IsAcceptableActorState(); static_cast<IsAcceptableActor*>(this)->destroy(); return 0; }
															#line 6513 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<IsAcceptableActor*>(this)->SAV< bool >::value()) bool(true);
		this->~IsAcceptableActorState();
		static_cast<IsAcceptableActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1(Optional<std::vector<Optional<LeaderInfo>>> && results,int loopDepth) 
	{
															#line 1449 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!results.present())
															#line 6525 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 1450 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (!static_cast<IsAcceptableActor*>(this)->SAV<bool>::futures) { (void)(false); this->~IsAcceptableActorState(); static_cast<IsAcceptableActor*>(this)->destroy(); return 0; }
															#line 6529 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			new (&static_cast<IsAcceptableActor*>(this)->SAV< bool >::value()) bool(false);
			this->~IsAcceptableActorState();
			static_cast<IsAcceptableActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 1452 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		for( auto& r : results.get() ) {
															#line 1453 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (!r.present())
															#line 6539 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 1454 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				if (!static_cast<IsAcceptableActor*>(this)->SAV<bool>::futures) { (void)(false); this->~IsAcceptableActorState(); static_cast<IsAcceptableActor*>(this)->destroy(); return 0; }
															#line 6543 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				new (&static_cast<IsAcceptableActor*>(this)->SAV< bool >::value()) bool(false);
				this->~IsAcceptableActorState();
				static_cast<IsAcceptableActor*>(this)->finishSendAndDelPromiseRef();
				return 0;
			}
		}
															#line 1458 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<IsAcceptableActor*>(this)->SAV<bool>::futures) { (void)(true); this->~IsAcceptableActorState(); static_cast<IsAcceptableActor*>(this)->destroy(); return 0; }
															#line 6552 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<IsAcceptableActor*>(this)->SAV< bool >::value()) bool(true);
		this->~IsAcceptableActorState();
		static_cast<IsAcceptableActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1when1(Optional<std::vector<Optional<LeaderInfo>>> const& results,int loopDepth) 
	{
		loopDepth = a_body1cont1(results, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Optional<std::vector<Optional<LeaderInfo>>> && results,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(results), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<IsAcceptableActor*>(this)->actor_wait_state > 0) static_cast<IsAcceptableActor*>(this)->actor_wait_state = 0;
		static_cast<IsAcceptableActor*>(this)->ActorCallback< IsAcceptableActor, 0, Optional<std::vector<Optional<LeaderInfo>>> >::remove();

	}
	void a_callback_fire(ActorCallback< IsAcceptableActor, 0, Optional<std::vector<Optional<LeaderInfo>>> >*,Optional<std::vector<Optional<LeaderInfo>>> const& value) 
	{
		fdb_probe_actor_enter("isAcceptable", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("isAcceptable", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< IsAcceptableActor, 0, Optional<std::vector<Optional<LeaderInfo>>> >*,Optional<std::vector<Optional<LeaderInfo>>> && value) 
	{
		fdb_probe_actor_enter("isAcceptable", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("isAcceptable", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< IsAcceptableActor, 0, Optional<std::vector<Optional<LeaderInfo>>> >*,Error err) 
	{
		fdb_probe_actor_enter("isAcceptable", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("isAcceptable", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 1401 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	AutoQuorumChange* self;
															#line 1401 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Transaction* tr;
															#line 1401 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	std::vector<NetworkAddress> oldCoordinators;
															#line 1401 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Reference<IClusterConnectionRecord> ccr;
															#line 1401 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	int desiredCount;
															#line 1401 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	std::set<AddressExclusion>* excluded;
															#line 6635 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
};
// This generated class is to be used only via isAcceptable()
															#line 1401 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class IsAcceptableActor final : public Actor<bool>, public ActorCallback< IsAcceptableActor, 0, Optional<std::vector<Optional<LeaderInfo>>> >, public FastAllocated<IsAcceptableActor>, public IsAcceptableActorState<IsAcceptableActor> {
															#line 6640 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
	using FastAllocated<IsAcceptableActor>::operator new;
	using FastAllocated<IsAcceptableActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<bool>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< IsAcceptableActor, 0, Optional<std::vector<Optional<LeaderInfo>>> >;
															#line 1401 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	IsAcceptableActor(AutoQuorumChange* const& self,Transaction* const& tr,std::vector<NetworkAddress> const& oldCoordinators,Reference<IClusterConnectionRecord> const& ccr,int const& desiredCount,std::set<AddressExclusion>* const& excluded) 
															#line 6651 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		 : Actor<bool>(),
		   IsAcceptableActorState<IsAcceptableActor>(self, tr, oldCoordinators, ccr, desiredCount, excluded)
	{
		fdb_probe_actor_enter("isAcceptable", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("isAcceptable");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("isAcceptable", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< IsAcceptableActor, 0, Optional<std::vector<Optional<LeaderInfo>>> >*)0, actor_cancelled()); break;
		}

	}
};
															#line 1401 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
[[nodiscard]] static Future<bool> isAcceptable( AutoQuorumChange* const& self, Transaction* const& tr, std::vector<NetworkAddress> const& oldCoordinators, Reference<IClusterConnectionRecord> const& ccr, int const& desiredCount, std::set<AddressExclusion>* const& excluded ) {
															#line 1401 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	return Future<bool>(new IsAcceptableActor(self, tr, oldCoordinators, ccr, desiredCount, excluded));
															#line 6678 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
}

#line 1460 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"

																#line 6683 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
// This generated class is to be used only via getDesired()
															#line 1461 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
template <class GetDesiredActor>
															#line 1461 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class GetDesiredActorState {
															#line 6689 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
															#line 1461 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	GetDesiredActorState(Reference<AutoQuorumChange> const& self,Transaction* const& tr,std::vector<NetworkAddress> const& oldCoordinators,Reference<IClusterConnectionRecord> const& ccr,CoordinatorsResult* const& err) 
															#line 1461 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
															#line 1461 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		 : self(self),
															#line 1461 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   tr(tr),
															#line 1461 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   oldCoordinators(oldCoordinators),
															#line 1461 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   ccr(ccr),
															#line 1461 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   err(err),
															#line 1466 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   desiredCount(self->desired)
															#line 6706 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("getDesired", reinterpret_cast<unsigned long>(this));

	}
	~GetDesiredActorState() 
	{
		fdb_probe_actor_destroy("getDesired", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 1468 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (desiredCount == -1)
															#line 6721 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 1469 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				StrictFuture<int> __when_expr_0 = getRedundancy(self.getPtr(), tr);
															#line 1469 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				if (static_cast<GetDesiredActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 6727 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
				static_cast<GetDesiredActor*>(this)->actor_wait_state = 1;
															#line 1469 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< GetDesiredActor, 0, int >*>(static_cast<GetDesiredActor*>(this)));
															#line 6732 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				loopDepth = 0;
			}
			else
			{
				loopDepth = a_body1cont1(loopDepth);
			}
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~GetDesiredActorState();
		static_cast<GetDesiredActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 1473 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		StrictFuture<std::vector<AddressExclusion>> __when_expr_1 = getAllExcludedServers(tr);
															#line 1473 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (static_cast<GetDesiredActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 6762 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<GetDesiredActor*>(this)->actor_wait_state = 2;
															#line 1473 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< GetDesiredActor, 1, std::vector<AddressExclusion> >*>(static_cast<GetDesiredActor*>(this)));
															#line 6767 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont2(int const& redundancy,int loopDepth) 
	{
															#line 1470 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		desiredCount = redundancy * 2 - 1;
															#line 6776 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont2(int && redundancy,int loopDepth) 
	{
															#line 1470 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		desiredCount = redundancy * 2 - 1;
															#line 6785 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1when1(int const& redundancy,int loopDepth) 
	{
		loopDepth = a_body1cont2(redundancy, loopDepth);

		return loopDepth;
	}
	int a_body1when1(int && redundancy,int loopDepth) 
	{
		loopDepth = a_body1cont2(std::move(redundancy), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<GetDesiredActor*>(this)->actor_wait_state > 0) static_cast<GetDesiredActor*>(this)->actor_wait_state = 0;
		static_cast<GetDesiredActor*>(this)->ActorCallback< GetDesiredActor, 0, int >::remove();

	}
	void a_callback_fire(ActorCallback< GetDesiredActor, 0, int >*,int const& value) 
	{
		fdb_probe_actor_enter("getDesired", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getDesired", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< GetDesiredActor, 0, int >*,int && value) 
	{
		fdb_probe_actor_enter("getDesired", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getDesired", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< GetDesiredActor, 0, int >*,Error err) 
	{
		fdb_probe_actor_enter("getDesired", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getDesired", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont4(std::vector<AddressExclusion> const& excl,int loopDepth) 
	{
															#line 1474 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		excluded = std::set<AddressExclusion>(excl.begin(), excl.end());
															#line 1476 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		StrictFuture<std::vector<ProcessData>> __when_expr_2 = getWorkers(tr);
															#line 1476 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (static_cast<GetDesiredActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 6861 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont4when1(__when_expr_2.get(), loopDepth); };
		static_cast<GetDesiredActor*>(this)->actor_wait_state = 3;
															#line 1476 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< GetDesiredActor, 2, std::vector<ProcessData> >*>(static_cast<GetDesiredActor*>(this)));
															#line 6866 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont4(std::vector<AddressExclusion> && excl,int loopDepth) 
	{
															#line 1474 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		excluded = std::set<AddressExclusion>(excl.begin(), excl.end());
															#line 1476 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		StrictFuture<std::vector<ProcessData>> __when_expr_2 = getWorkers(tr);
															#line 1476 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (static_cast<GetDesiredActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 6879 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont4when1(__when_expr_2.get(), loopDepth); };
		static_cast<GetDesiredActor*>(this)->actor_wait_state = 3;
															#line 1476 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< GetDesiredActor, 2, std::vector<ProcessData> >*>(static_cast<GetDesiredActor*>(this)));
															#line 6884 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1when1(std::vector<AddressExclusion> const& excl,int loopDepth) 
	{
		loopDepth = a_body1cont4(excl, loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(std::vector<AddressExclusion> && excl,int loopDepth) 
	{
		loopDepth = a_body1cont4(std::move(excl), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<GetDesiredActor*>(this)->actor_wait_state > 0) static_cast<GetDesiredActor*>(this)->actor_wait_state = 0;
		static_cast<GetDesiredActor*>(this)->ActorCallback< GetDesiredActor, 1, std::vector<AddressExclusion> >::remove();

	}
	void a_callback_fire(ActorCallback< GetDesiredActor, 1, std::vector<AddressExclusion> >*,std::vector<AddressExclusion> const& value) 
	{
		fdb_probe_actor_enter("getDesired", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getDesired", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< GetDesiredActor, 1, std::vector<AddressExclusion> >*,std::vector<AddressExclusion> && value) 
	{
		fdb_probe_actor_enter("getDesired", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getDesired", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< GetDesiredActor, 1, std::vector<AddressExclusion> >*,Error err) 
	{
		fdb_probe_actor_enter("getDesired", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getDesired", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont5(std::vector<ProcessData> const& _workers,int loopDepth) 
	{
															#line 1477 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		workers = _workers;
															#line 1479 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		std::map<NetworkAddress, LocalityData> addr_locality;
															#line 1480 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		for( auto w : workers ) {
															#line 1481 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			addr_locality[w.address] = w.locality;
															#line 6962 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		}
															#line 1486 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		bool checkAcceptable = true;
															#line 1487 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		std::set<Optional<Standalone<StringRef>>> checkDuplicates;
															#line 1488 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		for( auto addr : oldCoordinators ) {
															#line 1489 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			auto findResult = addr_locality.find(addr);
															#line 1490 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (findResult == addr_locality.end() || checkDuplicates.count(findResult->second.zoneId()))
															#line 6974 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 1491 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				checkAcceptable = false;
															#line 6978 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				break;
			}
															#line 1494 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			checkDuplicates.insert(findResult->second.zoneId());
															#line 6983 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		}
															#line 1497 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (checkAcceptable)
															#line 6987 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 1498 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<bool> __when_expr_3 = isAcceptable(self.getPtr(), tr, oldCoordinators, ccr, desiredCount, &excluded);
															#line 1498 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<GetDesiredActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 6993 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1cont5when1(__when_expr_3.get(), loopDepth); };
			static_cast<GetDesiredActor*>(this)->actor_wait_state = 4;
															#line 1498 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< GetDesiredActor, 3, bool >*>(static_cast<GetDesiredActor*>(this)));
															#line 6998 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1cont6(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont5(std::vector<ProcessData> && _workers,int loopDepth) 
	{
															#line 1477 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		workers = _workers;
															#line 1479 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		std::map<NetworkAddress, LocalityData> addr_locality;
															#line 1480 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		for( auto w : workers ) {
															#line 1481 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			addr_locality[w.address] = w.locality;
															#line 7018 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		}
															#line 1486 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		bool checkAcceptable = true;
															#line 1487 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		std::set<Optional<Standalone<StringRef>>> checkDuplicates;
															#line 1488 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		for( auto addr : oldCoordinators ) {
															#line 1489 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			auto findResult = addr_locality.find(addr);
															#line 1490 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (findResult == addr_locality.end() || checkDuplicates.count(findResult->second.zoneId()))
															#line 7030 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 1491 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				checkAcceptable = false;
															#line 7034 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				break;
			}
															#line 1494 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			checkDuplicates.insert(findResult->second.zoneId());
															#line 7039 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		}
															#line 1497 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (checkAcceptable)
															#line 7043 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 1498 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<bool> __when_expr_3 = isAcceptable(self.getPtr(), tr, oldCoordinators, ccr, desiredCount, &excluded);
															#line 1498 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<GetDesiredActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 7049 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1cont5when1(__when_expr_3.get(), loopDepth); };
			static_cast<GetDesiredActor*>(this)->actor_wait_state = 4;
															#line 1498 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< GetDesiredActor, 3, bool >*>(static_cast<GetDesiredActor*>(this)));
															#line 7054 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1cont6(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont4when1(std::vector<ProcessData> const& _workers,int loopDepth) 
	{
		loopDepth = a_body1cont5(_workers, loopDepth);

		return loopDepth;
	}
	int a_body1cont4when1(std::vector<ProcessData> && _workers,int loopDepth) 
	{
		loopDepth = a_body1cont5(std::move(_workers), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<GetDesiredActor*>(this)->actor_wait_state > 0) static_cast<GetDesiredActor*>(this)->actor_wait_state = 0;
		static_cast<GetDesiredActor*>(this)->ActorCallback< GetDesiredActor, 2, std::vector<ProcessData> >::remove();

	}
	void a_callback_fire(ActorCallback< GetDesiredActor, 2, std::vector<ProcessData> >*,std::vector<ProcessData> const& value) 
	{
		fdb_probe_actor_enter("getDesired", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont4when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getDesired", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< GetDesiredActor, 2, std::vector<ProcessData> >*,std::vector<ProcessData> && value) 
	{
		fdb_probe_actor_enter("getDesired", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont4when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getDesired", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< GetDesiredActor, 2, std::vector<ProcessData> >*,Error err) 
	{
		fdb_probe_actor_enter("getDesired", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getDesired", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1cont6(int loopDepth) 
	{
															#line 1505 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		std::vector<NetworkAddress> chosen;
															#line 1506 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		self->addDesiredWorkers(chosen, workers, desiredCount, excluded);
															#line 1508 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (chosen.size() < desiredCount)
															#line 7135 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 1509 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (chosen.empty() || chosen.size() < oldCoordinators.size())
															#line 7139 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 1510 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				TraceEvent("NotEnoughMachinesForCoordinators") .detail("EligibleWorkers", workers.size()) .detail("ChosenWorkers", chosen.size()) .detail("DesiredCoordinators", desiredCount) .detail("CurrentCoordinators", oldCoordinators.size());
															#line 1515 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				*err = CoordinatorsResult::NOT_ENOUGH_MACHINES;
															#line 1516 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				if (!static_cast<GetDesiredActor*>(this)->SAV<std::vector<NetworkAddress>>::futures) { (void)(std::vector<NetworkAddress>()); this->~GetDesiredActorState(); static_cast<GetDesiredActor*>(this)->destroy(); return 0; }
															#line 7147 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				new (&static_cast<GetDesiredActor*>(this)->SAV< std::vector<NetworkAddress> >::value()) std::vector<NetworkAddress>(std::vector<NetworkAddress>());
				this->~GetDesiredActorState();
				static_cast<GetDesiredActor*>(this)->finishSendAndDelPromiseRef();
				return 0;
			}
															#line 1518 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			chosen.resize((chosen.size() - 1) | 1);
															#line 7155 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		}
															#line 1521 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<GetDesiredActor*>(this)->SAV<std::vector<NetworkAddress>>::futures) { (void)(chosen); this->~GetDesiredActorState(); static_cast<GetDesiredActor*>(this)->destroy(); return 0; }
															#line 7159 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<GetDesiredActor*>(this)->SAV< std::vector<NetworkAddress> >::value()) std::vector<NetworkAddress>(chosen);
		this->~GetDesiredActorState();
		static_cast<GetDesiredActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont10(bool const& ok,int loopDepth) 
	{
															#line 1499 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (ok)
															#line 7171 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 1500 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			*err = CoordinatorsResult::SAME_NETWORK_ADDRESSES;
															#line 1501 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (!static_cast<GetDesiredActor*>(this)->SAV<std::vector<NetworkAddress>>::futures) { (void)(oldCoordinators); this->~GetDesiredActorState(); static_cast<GetDesiredActor*>(this)->destroy(); return 0; }
															#line 7177 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			new (&static_cast<GetDesiredActor*>(this)->SAV< std::vector<NetworkAddress> >::value()) std::vector<NetworkAddress>(std::move(oldCoordinators)); // state_var_RVO
			this->~GetDesiredActorState();
			static_cast<GetDesiredActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
		loopDepth = a_body1cont6(loopDepth);

		return loopDepth;
	}
	int a_body1cont10(bool && ok,int loopDepth) 
	{
															#line 1499 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (ok)
															#line 7191 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 1500 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			*err = CoordinatorsResult::SAME_NETWORK_ADDRESSES;
															#line 1501 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (!static_cast<GetDesiredActor*>(this)->SAV<std::vector<NetworkAddress>>::futures) { (void)(oldCoordinators); this->~GetDesiredActorState(); static_cast<GetDesiredActor*>(this)->destroy(); return 0; }
															#line 7197 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			new (&static_cast<GetDesiredActor*>(this)->SAV< std::vector<NetworkAddress> >::value()) std::vector<NetworkAddress>(std::move(oldCoordinators)); // state_var_RVO
			this->~GetDesiredActorState();
			static_cast<GetDesiredActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
		loopDepth = a_body1cont6(loopDepth);

		return loopDepth;
	}
	int a_body1cont5when1(bool const& ok,int loopDepth) 
	{
		loopDepth = a_body1cont10(ok, loopDepth);

		return loopDepth;
	}
	int a_body1cont5when1(bool && ok,int loopDepth) 
	{
		loopDepth = a_body1cont10(std::move(ok), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<GetDesiredActor*>(this)->actor_wait_state > 0) static_cast<GetDesiredActor*>(this)->actor_wait_state = 0;
		static_cast<GetDesiredActor*>(this)->ActorCallback< GetDesiredActor, 3, bool >::remove();

	}
	void a_callback_fire(ActorCallback< GetDesiredActor, 3, bool >*,bool const& value) 
	{
		fdb_probe_actor_enter("getDesired", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont5when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getDesired", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< GetDesiredActor, 3, bool >*,bool && value) 
	{
		fdb_probe_actor_enter("getDesired", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont5when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getDesired", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< GetDesiredActor, 3, bool >*,Error err) 
	{
		fdb_probe_actor_enter("getDesired", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getDesired", reinterpret_cast<unsigned long>(this), 3);

	}
															#line 1461 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Reference<AutoQuorumChange> self;
															#line 1461 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Transaction* tr;
															#line 1461 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	std::vector<NetworkAddress> oldCoordinators;
															#line 1461 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Reference<IClusterConnectionRecord> ccr;
															#line 1461 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	CoordinatorsResult* err;
															#line 1466 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	int desiredCount;
															#line 1474 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	std::set<AddressExclusion> excluded;
															#line 1477 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	std::vector<ProcessData> workers;
															#line 7286 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
};
// This generated class is to be used only via getDesired()
															#line 1461 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class GetDesiredActor final : public Actor<std::vector<NetworkAddress>>, public ActorCallback< GetDesiredActor, 0, int >, public ActorCallback< GetDesiredActor, 1, std::vector<AddressExclusion> >, public ActorCallback< GetDesiredActor, 2, std::vector<ProcessData> >, public ActorCallback< GetDesiredActor, 3, bool >, public FastAllocated<GetDesiredActor>, public GetDesiredActorState<GetDesiredActor> {
															#line 7291 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
	using FastAllocated<GetDesiredActor>::operator new;
	using FastAllocated<GetDesiredActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<std::vector<NetworkAddress>>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< GetDesiredActor, 0, int >;
friend struct ActorCallback< GetDesiredActor, 1, std::vector<AddressExclusion> >;
friend struct ActorCallback< GetDesiredActor, 2, std::vector<ProcessData> >;
friend struct ActorCallback< GetDesiredActor, 3, bool >;
															#line 1461 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	GetDesiredActor(Reference<AutoQuorumChange> const& self,Transaction* const& tr,std::vector<NetworkAddress> const& oldCoordinators,Reference<IClusterConnectionRecord> const& ccr,CoordinatorsResult* const& err) 
															#line 7305 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		 : Actor<std::vector<NetworkAddress>>(),
		   GetDesiredActorState<GetDesiredActor>(self, tr, oldCoordinators, ccr, err)
	{
		fdb_probe_actor_enter("getDesired", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("getDesired");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("getDesired", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< GetDesiredActor, 0, int >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< GetDesiredActor, 1, std::vector<AddressExclusion> >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< GetDesiredActor, 2, std::vector<ProcessData> >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< GetDesiredActor, 3, bool >*)0, actor_cancelled()); break;
		}

	}
};
															#line 1461 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
[[nodiscard]] static Future<std::vector<NetworkAddress>> getDesired( Reference<AutoQuorumChange> const& self, Transaction* const& tr, std::vector<NetworkAddress> const& oldCoordinators, Reference<IClusterConnectionRecord> const& ccr, CoordinatorsResult* const& err ) {
															#line 1461 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	return Future<std::vector<NetworkAddress>>(new GetDesiredActor(self, tr, oldCoordinators, ccr, err));
															#line 7335 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
}

#line 1523 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"

	// Select a desired set of workers such that
	// (1) the number of workers at each locality type (e.g., dcid) <= desiredCount; and
	// (2) prefer workers at a locality where less workers has been chosen than other localities: evenly distribute
	// workers.
	void addDesiredWorkers(std::vector<NetworkAddress>& chosen,
	                       const std::vector<ProcessData>& workers,
	                       int desiredCount,
	                       const std::set<AddressExclusion>& excluded) {
		std::vector<ProcessData> remainingWorkers(workers);
		deterministicRandom()->randomShuffle(remainingWorkers);

		std::partition(remainingWorkers.begin(), remainingWorkers.end(), [](const ProcessData& data) {
			return (data.processClass == ProcessClass::CoordinatorClass);
		});

		TraceEvent(SevDebug, "AutoSelectCoordinators").detail("CandidateWorkers", remainingWorkers.size());
		for (auto worker = remainingWorkers.begin(); worker != remainingWorkers.end(); worker++) {
			TraceEvent(SevDebug, "AutoSelectCoordinators")
			    .detail("Worker", worker->processClass.toString())
			    .detail("Address", worker->address.toString())
			    .detail("Locality", worker->locality.toString());
		}
		TraceEvent(SevDebug, "AutoSelectCoordinators").detail("ExcludedAddress", excluded.size());
		for (auto& excludedAddr : excluded) {
			TraceEvent(SevDebug, "AutoSelectCoordinators").detail("ExcludedAddress", excludedAddr.toString());
		}

		std::map<StringRef, int> maxCounts;
		std::map<StringRef, std::map<StringRef, int>> currentCounts;
		std::map<StringRef, int> hardLimits;

		std::vector<StringRef> fields({ "dcid"_sr, "data_hall"_sr, "zoneid"_sr, "machineid"_sr });

		for (auto field = fields.begin(); field != fields.end(); field++) {
			if (field->toString() == "zoneid") {
				hardLimits[*field] = 1;
			} else {
				hardLimits[*field] = desiredCount;
			}
		}

		while (chosen.size() < desiredCount) {
			bool found = false;
			for (auto worker = remainingWorkers.begin(); worker != remainingWorkers.end(); worker++) {
				if (addressExcluded(excluded, worker->address)) {
					continue;
				}
				// Exclude faulty node due to machine assassination
				if (g_network->isSimulated() && !g_simulator->getProcessByAddress(worker->address)->isReliable()) {
					TraceEvent("AutoSelectCoordinators").detail("SkipUnreliableWorker", worker->address.toString());
					continue;
				}
				bool valid = true;
				for (auto field = fields.begin(); field != fields.end(); field++) {
					if (maxCounts[*field] == 0) {
						maxCounts[*field] = 1;
					}
					auto value = worker->locality.get(*field).orDefault(""_sr);
					auto currentCount = currentCounts[*field][value];
					if (currentCount >= maxCounts[*field]) {
						valid = false;
						break;
					}
				}
				if (valid) {
					for (auto field = fields.begin(); field != fields.end(); field++) {
						auto value = worker->locality.get(*field).orDefault(""_sr);
						currentCounts[*field][value] += 1;
					}
					chosen.push_back(worker->address);
					remainingWorkers.erase(worker);
					found = true;
					break;
				}
			}
			if (!found) {
				bool canIncrement = false;
				for (auto field = fields.begin(); field != fields.end(); field++) {
					if (maxCounts[*field] < hardLimits[*field]) {
						maxCounts[*field] += 1;
						canIncrement = true;
						break;
					}
				}
				if (!canIncrement) {
					break;
				}
			}
		}
	}
};
Reference<IQuorumChange> autoQuorumChange(int desired) {
	return Reference<IQuorumChange>(new AutoQuorumChange(desired));
}

															#line 7435 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via excludeServers()
															#line 1619 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
template <class ExcludeServersActor>
															#line 1619 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class ExcludeServersActorState {
															#line 7442 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
															#line 1619 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	ExcludeServersActorState(Transaction* const& tr,std::vector<AddressExclusion> const& servers,bool const& failed) 
															#line 1619 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
															#line 1619 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		 : tr(tr),
															#line 1619 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   servers(servers),
															#line 1619 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   failed(failed)
															#line 7453 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("excludeServers", reinterpret_cast<unsigned long>(this));

	}
	~ExcludeServersActorState() 
	{
		fdb_probe_actor_destroy("excludeServers", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 1620 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 1621 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr->setOption(FDBTransactionOptions::PRIORITY_SYSTEM_IMMEDIATE);
															#line 1622 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr->setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 1623 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr->setOption(FDBTransactionOptions::USE_PROVISIONAL_PROXIES);
															#line 1624 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<std::vector<AddressExclusion>> __when_expr_0 = failed ? getExcludedFailedServerList(tr) : getExcludedServerList(tr);
															#line 1624 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<ExcludeServersActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 7478 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<ExcludeServersActor*>(this)->actor_wait_state = 1;
															#line 1624 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< ExcludeServersActor, 0, std::vector<AddressExclusion> >*>(static_cast<ExcludeServersActor*>(this)));
															#line 7483 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~ExcludeServersActorState();
		static_cast<ExcludeServersActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(std::vector<AddressExclusion> const& excl,int loopDepth) 
	{
															#line 1625 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		std::set<AddressExclusion> exclusions(excl.begin(), excl.end());
															#line 1626 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		bool containNewExclusion = false;
															#line 1627 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		for( auto& s : servers ) {
															#line 1628 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (exclusions.find(s) != exclusions.end())
															#line 7512 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
				continue;
			}
															#line 1631 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			containNewExclusion = true;
															#line 1632 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (failed)
															#line 7520 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 1633 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				tr->set(encodeFailedServersKey(s), StringRef());
															#line 7524 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			}
			else
			{
															#line 1635 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				tr->set(encodeExcludedServersKey(s), StringRef());
															#line 7530 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			}
		}
															#line 1639 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (containNewExclusion)
															#line 7535 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 1640 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			std::string excludeVersionKey = deterministicRandom()->randomUniqueID().toString();
															#line 1641 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			auto serversVersionKey = failed ? failedServersVersionKey : excludedServersVersionKey;
															#line 1642 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr->addReadConflictRange(singleKeyRange(serversVersionKey));
															#line 1643 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr->set(serversVersionKey, excludeVersionKey);
															#line 7545 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		}
															#line 1645 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		TraceEvent("ExcludeServersCommit") .detail("Servers", describe(servers)) .detail("ExcludeFailed", failed) .detail("ExclusionUpdated", containNewExclusion);
															#line 1649 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<ExcludeServersActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~ExcludeServersActorState(); static_cast<ExcludeServersActor*>(this)->destroy(); return 0; }
															#line 7551 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<ExcludeServersActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~ExcludeServersActorState();
		static_cast<ExcludeServersActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1(std::vector<AddressExclusion> && excl,int loopDepth) 
	{
															#line 1625 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		std::set<AddressExclusion> exclusions(excl.begin(), excl.end());
															#line 1626 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		bool containNewExclusion = false;
															#line 1627 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		for( auto& s : servers ) {
															#line 1628 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (exclusions.find(s) != exclusions.end())
															#line 7569 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
				continue;
			}
															#line 1631 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			containNewExclusion = true;
															#line 1632 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (failed)
															#line 7577 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 1633 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				tr->set(encodeFailedServersKey(s), StringRef());
															#line 7581 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			}
			else
			{
															#line 1635 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				tr->set(encodeExcludedServersKey(s), StringRef());
															#line 7587 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			}
		}
															#line 1639 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (containNewExclusion)
															#line 7592 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 1640 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			std::string excludeVersionKey = deterministicRandom()->randomUniqueID().toString();
															#line 1641 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			auto serversVersionKey = failed ? failedServersVersionKey : excludedServersVersionKey;
															#line 1642 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr->addReadConflictRange(singleKeyRange(serversVersionKey));
															#line 1643 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr->set(serversVersionKey, excludeVersionKey);
															#line 7602 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		}
															#line 1645 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		TraceEvent("ExcludeServersCommit") .detail("Servers", describe(servers)) .detail("ExcludeFailed", failed) .detail("ExclusionUpdated", containNewExclusion);
															#line 1649 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<ExcludeServersActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~ExcludeServersActorState(); static_cast<ExcludeServersActor*>(this)->destroy(); return 0; }
															#line 7608 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<ExcludeServersActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~ExcludeServersActorState();
		static_cast<ExcludeServersActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1when1(std::vector<AddressExclusion> const& excl,int loopDepth) 
	{
		loopDepth = a_body1cont1(excl, loopDepth);

		return loopDepth;
	}
	int a_body1when1(std::vector<AddressExclusion> && excl,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(excl), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<ExcludeServersActor*>(this)->actor_wait_state > 0) static_cast<ExcludeServersActor*>(this)->actor_wait_state = 0;
		static_cast<ExcludeServersActor*>(this)->ActorCallback< ExcludeServersActor, 0, std::vector<AddressExclusion> >::remove();

	}
	void a_callback_fire(ActorCallback< ExcludeServersActor, 0, std::vector<AddressExclusion> >*,std::vector<AddressExclusion> const& value) 
	{
		fdb_probe_actor_enter("excludeServers", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("excludeServers", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< ExcludeServersActor, 0, std::vector<AddressExclusion> >*,std::vector<AddressExclusion> && value) 
	{
		fdb_probe_actor_enter("excludeServers", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("excludeServers", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< ExcludeServersActor, 0, std::vector<AddressExclusion> >*,Error err) 
	{
		fdb_probe_actor_enter("excludeServers", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("excludeServers", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 1619 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Transaction* tr;
															#line 1619 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	std::vector<AddressExclusion> servers;
															#line 1619 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	bool failed;
															#line 7685 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
};
// This generated class is to be used only via excludeServers()
															#line 1619 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class ExcludeServersActor final : public Actor<Void>, public ActorCallback< ExcludeServersActor, 0, std::vector<AddressExclusion> >, public FastAllocated<ExcludeServersActor>, public ExcludeServersActorState<ExcludeServersActor> {
															#line 7690 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
	using FastAllocated<ExcludeServersActor>::operator new;
	using FastAllocated<ExcludeServersActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< ExcludeServersActor, 0, std::vector<AddressExclusion> >;
															#line 1619 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	ExcludeServersActor(Transaction* const& tr,std::vector<AddressExclusion> const& servers,bool const& failed) 
															#line 7701 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		 : Actor<Void>(),
		   ExcludeServersActorState<ExcludeServersActor>(tr, servers, failed)
	{
		fdb_probe_actor_enter("excludeServers", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("excludeServers");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("excludeServers", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< ExcludeServersActor, 0, std::vector<AddressExclusion> >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 1619 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
[[nodiscard]] Future<Void> excludeServers( Transaction* const& tr, std::vector<AddressExclusion> const& servers, bool const& failed ) {
															#line 1619 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	return Future<Void>(new ExcludeServersActor(tr, servers, failed));
															#line 7729 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
}

#line 1651 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"

															#line 7734 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via excludeServers()
															#line 1652 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
template <class ExcludeServersActor1>
															#line 1652 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class ExcludeServersActor1State {
															#line 7741 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
															#line 1652 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	ExcludeServersActor1State(Database const& cx,std::vector<AddressExclusion> const& servers,bool const& failed) 
															#line 1652 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
															#line 1652 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		 : cx(cx),
															#line 1652 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   servers(servers),
															#line 1652 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   failed(failed)
															#line 7752 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("excludeServers", reinterpret_cast<unsigned long>(this));

	}
	~ExcludeServersActor1State() 
	{
		fdb_probe_actor_destroy("excludeServers", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 1653 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (cx->apiVersionAtLeast(700))
															#line 7767 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 1654 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				ryw = ReadYourWritesTransaction(cx);
															#line 1655 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				;
															#line 7773 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				loopDepth = a_body1loopHead1(loopDepth);
			}
			else
			{
															#line 1679 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				tr = Transaction(cx);
															#line 1680 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				;
															#line 7782 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				loopDepth = a_body1loopHead2(loopDepth);
			}
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~ExcludeServersActor1State();
		static_cast<ExcludeServersActor1*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
		try {
															#line 1657 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			ryw.setOption(FDBTransactionOptions::RAW_ACCESS);
															#line 1658 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			ryw.setOption(FDBTransactionOptions::SPECIAL_KEY_SPACE_ENABLE_WRITES);
															#line 1659 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			ryw.set( SpecialKeySpace::getManagementApiCommandOptionSpecialKey(failed ? "failed" : "excluded", "force"), ValueRef());
															#line 1662 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			for( auto& s : servers ) {
															#line 1663 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				Key addr = failed ? SpecialKeySpace::getManagementApiCommandPrefix("failed").withSuffix(s.toString()) : SpecialKeySpace::getManagementApiCommandPrefix("exclude").withSuffix(s.toString());
															#line 1666 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				ryw.set(addr, ValueRef());
															#line 7824 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			}
															#line 1668 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			TraceEvent("ExcludeServersSpecialKeySpaceCommit") .detail("Servers", describe(servers)) .detail("ExcludeFailed", failed);
															#line 1671 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Void> __when_expr_0 = ryw.commit();
															#line 1671 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<ExcludeServersActor1*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 7832 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1loopBody1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
			static_cast<ExcludeServersActor1*>(this)->actor_wait_state = 1;
															#line 1671 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< ExcludeServersActor1, 0, Void >*>(static_cast<ExcludeServersActor1*>(this)));
															#line 7837 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 1674 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			TraceEvent("ExcludeServersError").errorUnsuppressed(e);
															#line 1675 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Void> __when_expr_1 = ryw.onError(e);
															#line 1675 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<ExcludeServersActor1*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 7863 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1Catch1when1(__when_expr_1.get(), loopDepth); };
			static_cast<ExcludeServersActor1*>(this)->actor_wait_state = 2;
															#line 1675 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< ExcludeServersActor1, 1, Void >*>(static_cast<ExcludeServersActor1*>(this)));
															#line 7868 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(Void const& _,int loopDepth) 
	{
															#line 1672 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<ExcludeServersActor1*>(this)->SAV<Void>::futures) { (void)(Void()); this->~ExcludeServersActor1State(); static_cast<ExcludeServersActor1*>(this)->destroy(); return 0; }
															#line 7883 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<ExcludeServersActor1*>(this)->SAV< Void >::value()) Void(Void());
		this->~ExcludeServersActor1State();
		static_cast<ExcludeServersActor1*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2(Void && _,int loopDepth) 
	{
															#line 1672 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<ExcludeServersActor1*>(this)->SAV<Void>::futures) { (void)(Void()); this->~ExcludeServersActor1State(); static_cast<ExcludeServersActor1*>(this)->destroy(); return 0; }
															#line 7895 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<ExcludeServersActor1*>(this)->SAV< Void >::value()) Void(Void());
		this->~ExcludeServersActor1State();
		static_cast<ExcludeServersActor1*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<ExcludeServersActor1*>(this)->actor_wait_state > 0) static_cast<ExcludeServersActor1*>(this)->actor_wait_state = 0;
		static_cast<ExcludeServersActor1*>(this)->ActorCallback< ExcludeServersActor1, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< ExcludeServersActor1, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("excludeServers", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("excludeServers", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< ExcludeServersActor1, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("excludeServers", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("excludeServers", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< ExcludeServersActor1, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("excludeServers", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("excludeServers", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<ExcludeServersActor1*>(this)->actor_wait_state > 0) static_cast<ExcludeServersActor1*>(this)->actor_wait_state = 0;
		static_cast<ExcludeServersActor1*>(this)->ActorCallback< ExcludeServersActor1, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< ExcludeServersActor1, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("excludeServers", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("excludeServers", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< ExcludeServersActor1, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("excludeServers", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("excludeServers", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< ExcludeServersActor1, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("excludeServers", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("excludeServers", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1loopHead2(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody2(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody2(int loopDepth) 
	{
		try {
															#line 1682 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Void> __when_expr_2 = excludeServers(&tr, servers, failed);
															#line 1682 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<ExcludeServersActor1*>(this)->actor_wait_state < 0) return a_body1loopBody2Catch1(actor_cancelled(), loopDepth);
															#line 8055 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1loopBody2Catch1(__when_expr_2.getError(), loopDepth); else return a_body1loopBody2when1(__when_expr_2.get(), loopDepth); };
			static_cast<ExcludeServersActor1*>(this)->actor_wait_state = 3;
															#line 1682 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< ExcludeServersActor1, 2, Void >*>(static_cast<ExcludeServersActor1*>(this)));
															#line 8060 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody2Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody2Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody2cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead2(0);

		return loopDepth;
	}
	int a_body1loopBody2Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 1686 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			TraceEvent("ExcludeServersError").errorUnsuppressed(e);
															#line 1687 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Void> __when_expr_4 = tr.onError(e);
															#line 1687 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<ExcludeServersActor1*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 8086 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1Catch1(__when_expr_4.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody2Catch1when1(__when_expr_4.get(), loopDepth); };
			static_cast<ExcludeServersActor1*>(this)->actor_wait_state = 5;
															#line 1687 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< ExcludeServersActor1, 4, Void >*>(static_cast<ExcludeServersActor1*>(this)));
															#line 8091 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody2cont2(Void const& _,int loopDepth) 
	{
															#line 1683 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		StrictFuture<Void> __when_expr_3 = tr.commit();
															#line 1683 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (static_cast<ExcludeServersActor1*>(this)->actor_wait_state < 0) return a_body1loopBody2Catch1(actor_cancelled(), loopDepth);
															#line 8108 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1loopBody2Catch1(__when_expr_3.getError(), loopDepth); else return a_body1loopBody2cont2when1(__when_expr_3.get(), loopDepth); };
		static_cast<ExcludeServersActor1*>(this)->actor_wait_state = 4;
															#line 1683 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< ExcludeServersActor1, 3, Void >*>(static_cast<ExcludeServersActor1*>(this)));
															#line 8113 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody2cont2(Void && _,int loopDepth) 
	{
															#line 1683 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		StrictFuture<Void> __when_expr_3 = tr.commit();
															#line 1683 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (static_cast<ExcludeServersActor1*>(this)->actor_wait_state < 0) return a_body1loopBody2Catch1(actor_cancelled(), loopDepth);
															#line 8124 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1loopBody2Catch1(__when_expr_3.getError(), loopDepth); else return a_body1loopBody2cont2when1(__when_expr_3.get(), loopDepth); };
		static_cast<ExcludeServersActor1*>(this)->actor_wait_state = 4;
															#line 1683 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< ExcludeServersActor1, 3, Void >*>(static_cast<ExcludeServersActor1*>(this)));
															#line 8129 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody2cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody2cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<ExcludeServersActor1*>(this)->actor_wait_state > 0) static_cast<ExcludeServersActor1*>(this)->actor_wait_state = 0;
		static_cast<ExcludeServersActor1*>(this)->ActorCallback< ExcludeServersActor1, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< ExcludeServersActor1, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("excludeServers", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody2when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody2Catch1(error, 0);
		} catch (...) {
			a_body1loopBody2Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("excludeServers", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< ExcludeServersActor1, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("excludeServers", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody2Catch1(error, 0);
		} catch (...) {
			a_body1loopBody2Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("excludeServers", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< ExcludeServersActor1, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("excludeServers", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody2Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody2Catch1(error, 0);
		} catch (...) {
			a_body1loopBody2Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("excludeServers", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1loopBody2cont3(Void const& _,int loopDepth) 
	{
															#line 1684 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<ExcludeServersActor1*>(this)->SAV<Void>::futures) { (void)(Void()); this->~ExcludeServersActor1State(); static_cast<ExcludeServersActor1*>(this)->destroy(); return 0; }
															#line 8201 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<ExcludeServersActor1*>(this)->SAV< Void >::value()) Void(Void());
		this->~ExcludeServersActor1State();
		static_cast<ExcludeServersActor1*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody2cont3(Void && _,int loopDepth) 
	{
															#line 1684 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<ExcludeServersActor1*>(this)->SAV<Void>::futures) { (void)(Void()); this->~ExcludeServersActor1State(); static_cast<ExcludeServersActor1*>(this)->destroy(); return 0; }
															#line 8213 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<ExcludeServersActor1*>(this)->SAV< Void >::value()) Void(Void());
		this->~ExcludeServersActor1State();
		static_cast<ExcludeServersActor1*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody2cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody2cont3(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody2cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody2cont3(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<ExcludeServersActor1*>(this)->actor_wait_state > 0) static_cast<ExcludeServersActor1*>(this)->actor_wait_state = 0;
		static_cast<ExcludeServersActor1*>(this)->ActorCallback< ExcludeServersActor1, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< ExcludeServersActor1, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("excludeServers", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody2cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody2Catch1(error, 0);
		} catch (...) {
			a_body1loopBody2Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("excludeServers", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< ExcludeServersActor1, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("excludeServers", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody2cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody2Catch1(error, 0);
		} catch (...) {
			a_body1loopBody2Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("excludeServers", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< ExcludeServersActor1, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("excludeServers", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody2Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody2Catch1(error, 0);
		} catch (...) {
			a_body1loopBody2Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("excludeServers", reinterpret_cast<unsigned long>(this), 3);

	}
	int a_body1loopBody2Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody2cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody2Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody2cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody2Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody2Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody2Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody2Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose5() 
	{
		if (static_cast<ExcludeServersActor1*>(this)->actor_wait_state > 0) static_cast<ExcludeServersActor1*>(this)->actor_wait_state = 0;
		static_cast<ExcludeServersActor1*>(this)->ActorCallback< ExcludeServersActor1, 4, Void >::remove();

	}
	void a_callback_fire(ActorCallback< ExcludeServersActor1, 4, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("excludeServers", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1loopBody2Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("excludeServers", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_fire(ActorCallback< ExcludeServersActor1, 4, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("excludeServers", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1loopBody2Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("excludeServers", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_error(ActorCallback< ExcludeServersActor1, 4, Void >*,Error err) 
	{
		fdb_probe_actor_enter("excludeServers", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("excludeServers", reinterpret_cast<unsigned long>(this), 4);

	}
															#line 1652 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Database cx;
															#line 1652 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	std::vector<AddressExclusion> servers;
															#line 1652 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	bool failed;
															#line 1654 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	ReadYourWritesTransaction ryw;
															#line 1679 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Transaction tr;
															#line 8369 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
};
// This generated class is to be used only via excludeServers()
															#line 1652 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class ExcludeServersActor1 final : public Actor<Void>, public ActorCallback< ExcludeServersActor1, 0, Void >, public ActorCallback< ExcludeServersActor1, 1, Void >, public ActorCallback< ExcludeServersActor1, 2, Void >, public ActorCallback< ExcludeServersActor1, 3, Void >, public ActorCallback< ExcludeServersActor1, 4, Void >, public FastAllocated<ExcludeServersActor1>, public ExcludeServersActor1State<ExcludeServersActor1> {
															#line 8374 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
	using FastAllocated<ExcludeServersActor1>::operator new;
	using FastAllocated<ExcludeServersActor1>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< ExcludeServersActor1, 0, Void >;
friend struct ActorCallback< ExcludeServersActor1, 1, Void >;
friend struct ActorCallback< ExcludeServersActor1, 2, Void >;
friend struct ActorCallback< ExcludeServersActor1, 3, Void >;
friend struct ActorCallback< ExcludeServersActor1, 4, Void >;
															#line 1652 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	ExcludeServersActor1(Database const& cx,std::vector<AddressExclusion> const& servers,bool const& failed) 
															#line 8389 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		 : Actor<Void>(),
		   ExcludeServersActor1State<ExcludeServersActor1>(cx, servers, failed)
	{
		fdb_probe_actor_enter("excludeServers", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("excludeServers");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("excludeServers", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< ExcludeServersActor1, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< ExcludeServersActor1, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< ExcludeServersActor1, 2, Void >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< ExcludeServersActor1, 3, Void >*)0, actor_cancelled()); break;
		case 5: this->a_callback_error((ActorCallback< ExcludeServersActor1, 4, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 1652 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
[[nodiscard]] Future<Void> excludeServers( Database const& cx, std::vector<AddressExclusion> const& servers, bool const& failed ) {
															#line 1652 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	return Future<Void>(new ExcludeServersActor1(cx, servers, failed));
															#line 8421 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
}

#line 1692 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"

// excludes localities by setting the keys in api version below 7.0
															#line 8427 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via excludeLocalities()
															#line 1694 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
template <class ExcludeLocalitiesActor>
															#line 1694 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class ExcludeLocalitiesActorState {
															#line 8434 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
															#line 1694 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	ExcludeLocalitiesActorState(Transaction* const& tr,std::unordered_set<std::string> const& localities,bool const& failed) 
															#line 1694 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
															#line 1694 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		 : tr(tr),
															#line 1694 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   localities(localities),
															#line 1694 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   failed(failed)
															#line 8445 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("excludeLocalities", reinterpret_cast<unsigned long>(this));

	}
	~ExcludeLocalitiesActorState() 
	{
		fdb_probe_actor_destroy("excludeLocalities", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 1695 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 1696 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr->setOption(FDBTransactionOptions::PRIORITY_SYSTEM_IMMEDIATE);
															#line 1697 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr->setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 1698 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr->setOption(FDBTransactionOptions::USE_PROVISIONAL_PROXIES);
															#line 1699 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<std::vector<std::string>> __when_expr_0 = failed ? getExcludedFailedLocalityList(tr) : getExcludedLocalityList(tr);
															#line 1699 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<ExcludeLocalitiesActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 8470 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<ExcludeLocalitiesActor*>(this)->actor_wait_state = 1;
															#line 1699 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< ExcludeLocalitiesActor, 0, std::vector<std::string> >*>(static_cast<ExcludeLocalitiesActor*>(this)));
															#line 8475 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~ExcludeLocalitiesActorState();
		static_cast<ExcludeLocalitiesActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(std::vector<std::string> const& excl,int loopDepth) 
	{
															#line 1700 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		std::set<std::string> exclusion(excl.begin(), excl.end());
															#line 1701 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		bool containNewExclusion = false;
															#line 1702 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		for( const auto& l : localities ) {
															#line 1703 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (exclusion.find(l) != exclusion.end())
															#line 8504 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
				continue;
			}
															#line 1706 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			containNewExclusion = true;
															#line 1707 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (failed)
															#line 8512 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 1708 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				tr->set(encodeFailedLocalityKey(l), StringRef());
															#line 8516 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			}
			else
			{
															#line 1710 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				tr->set(encodeExcludedLocalityKey(l), StringRef());
															#line 8522 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			}
		}
															#line 1713 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (containNewExclusion)
															#line 8527 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 1714 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			std::string excludeVersionKey = deterministicRandom()->randomUniqueID().toString();
															#line 1715 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			auto localityVersionKey = failed ? failedLocalityVersionKey : excludedLocalityVersionKey;
															#line 1716 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr->addReadConflictRange(singleKeyRange(localityVersionKey));
															#line 1717 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr->set(localityVersionKey, excludeVersionKey);
															#line 8537 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		}
															#line 1719 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		TraceEvent("ExcludeLocalitiesCommit") .detail("Localities", describe(localities)) .detail("ExcludeFailed", failed) .detail("ExclusionUpdated", containNewExclusion);
															#line 1723 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<ExcludeLocalitiesActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~ExcludeLocalitiesActorState(); static_cast<ExcludeLocalitiesActor*>(this)->destroy(); return 0; }
															#line 8543 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<ExcludeLocalitiesActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~ExcludeLocalitiesActorState();
		static_cast<ExcludeLocalitiesActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1(std::vector<std::string> && excl,int loopDepth) 
	{
															#line 1700 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		std::set<std::string> exclusion(excl.begin(), excl.end());
															#line 1701 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		bool containNewExclusion = false;
															#line 1702 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		for( const auto& l : localities ) {
															#line 1703 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (exclusion.find(l) != exclusion.end())
															#line 8561 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
				continue;
			}
															#line 1706 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			containNewExclusion = true;
															#line 1707 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (failed)
															#line 8569 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 1708 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				tr->set(encodeFailedLocalityKey(l), StringRef());
															#line 8573 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			}
			else
			{
															#line 1710 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				tr->set(encodeExcludedLocalityKey(l), StringRef());
															#line 8579 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			}
		}
															#line 1713 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (containNewExclusion)
															#line 8584 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 1714 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			std::string excludeVersionKey = deterministicRandom()->randomUniqueID().toString();
															#line 1715 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			auto localityVersionKey = failed ? failedLocalityVersionKey : excludedLocalityVersionKey;
															#line 1716 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr->addReadConflictRange(singleKeyRange(localityVersionKey));
															#line 1717 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr->set(localityVersionKey, excludeVersionKey);
															#line 8594 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		}
															#line 1719 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		TraceEvent("ExcludeLocalitiesCommit") .detail("Localities", describe(localities)) .detail("ExcludeFailed", failed) .detail("ExclusionUpdated", containNewExclusion);
															#line 1723 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<ExcludeLocalitiesActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~ExcludeLocalitiesActorState(); static_cast<ExcludeLocalitiesActor*>(this)->destroy(); return 0; }
															#line 8600 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<ExcludeLocalitiesActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~ExcludeLocalitiesActorState();
		static_cast<ExcludeLocalitiesActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1when1(std::vector<std::string> const& excl,int loopDepth) 
	{
		loopDepth = a_body1cont1(excl, loopDepth);

		return loopDepth;
	}
	int a_body1when1(std::vector<std::string> && excl,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(excl), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<ExcludeLocalitiesActor*>(this)->actor_wait_state > 0) static_cast<ExcludeLocalitiesActor*>(this)->actor_wait_state = 0;
		static_cast<ExcludeLocalitiesActor*>(this)->ActorCallback< ExcludeLocalitiesActor, 0, std::vector<std::string> >::remove();

	}
	void a_callback_fire(ActorCallback< ExcludeLocalitiesActor, 0, std::vector<std::string> >*,std::vector<std::string> const& value) 
	{
		fdb_probe_actor_enter("excludeLocalities", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("excludeLocalities", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< ExcludeLocalitiesActor, 0, std::vector<std::string> >*,std::vector<std::string> && value) 
	{
		fdb_probe_actor_enter("excludeLocalities", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("excludeLocalities", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< ExcludeLocalitiesActor, 0, std::vector<std::string> >*,Error err) 
	{
		fdb_probe_actor_enter("excludeLocalities", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("excludeLocalities", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 1694 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Transaction* tr;
															#line 1694 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	std::unordered_set<std::string> localities;
															#line 1694 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	bool failed;
															#line 8677 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
};
// This generated class is to be used only via excludeLocalities()
															#line 1694 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class ExcludeLocalitiesActor final : public Actor<Void>, public ActorCallback< ExcludeLocalitiesActor, 0, std::vector<std::string> >, public FastAllocated<ExcludeLocalitiesActor>, public ExcludeLocalitiesActorState<ExcludeLocalitiesActor> {
															#line 8682 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
	using FastAllocated<ExcludeLocalitiesActor>::operator new;
	using FastAllocated<ExcludeLocalitiesActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< ExcludeLocalitiesActor, 0, std::vector<std::string> >;
															#line 1694 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	ExcludeLocalitiesActor(Transaction* const& tr,std::unordered_set<std::string> const& localities,bool const& failed) 
															#line 8693 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		 : Actor<Void>(),
		   ExcludeLocalitiesActorState<ExcludeLocalitiesActor>(tr, localities, failed)
	{
		fdb_probe_actor_enter("excludeLocalities", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("excludeLocalities");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("excludeLocalities", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< ExcludeLocalitiesActor, 0, std::vector<std::string> >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 1694 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
[[nodiscard]] Future<Void> excludeLocalities( Transaction* const& tr, std::unordered_set<std::string> const& localities, bool const& failed ) {
															#line 1694 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	return Future<Void>(new ExcludeLocalitiesActor(tr, localities, failed));
															#line 8721 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
}

#line 1725 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"

// Exclude the servers matching the given set of localities from use as state servers.
// excludes localities by setting the keys.
															#line 8728 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via excludeLocalities()
															#line 1728 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
template <class ExcludeLocalitiesActor1>
															#line 1728 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class ExcludeLocalitiesActor1State {
															#line 8735 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
															#line 1728 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	ExcludeLocalitiesActor1State(Database const& cx,std::unordered_set<std::string> const& localities,bool const& failed) 
															#line 1728 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
															#line 1728 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		 : cx(cx),
															#line 1728 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   localities(localities),
															#line 1728 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   failed(failed)
															#line 8746 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("excludeLocalities", reinterpret_cast<unsigned long>(this));

	}
	~ExcludeLocalitiesActor1State() 
	{
		fdb_probe_actor_destroy("excludeLocalities", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 1729 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (cx->apiVersionAtLeast(700))
															#line 8761 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 1730 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				ryw = ReadYourWritesTransaction(cx);
															#line 1731 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				;
															#line 8767 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				loopDepth = a_body1loopHead1(loopDepth);
			}
			else
			{
															#line 1756 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				tr = Transaction(cx);
															#line 1757 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				;
															#line 8776 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				loopDepth = a_body1loopHead2(loopDepth);
			}
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~ExcludeLocalitiesActor1State();
		static_cast<ExcludeLocalitiesActor1*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
		try {
															#line 1733 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			ryw.setOption(FDBTransactionOptions::RAW_ACCESS);
															#line 1734 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			ryw.setOption(FDBTransactionOptions::SPECIAL_KEY_SPACE_ENABLE_WRITES);
															#line 1735 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			ryw.set(SpecialKeySpace::getManagementApiCommandOptionSpecialKey( failed ? "failed_locality" : "excluded_locality", "force"), ValueRef());
															#line 1738 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			for( const auto& l : localities ) {
															#line 1739 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				Key addr = failed ? SpecialKeySpace::getManagementApiCommandPrefix("failedlocality").withSuffix(l) : SpecialKeySpace::getManagementApiCommandPrefix("excludedlocality").withSuffix(l);
															#line 1742 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				ryw.set(addr, ValueRef());
															#line 8818 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			}
															#line 1744 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			TraceEvent("ExcludeLocalitiesSpecialKeySpaceCommit") .detail("Localities", describe(localities)) .detail("ExcludeFailed", failed);
															#line 1748 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Void> __when_expr_0 = ryw.commit();
															#line 1748 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<ExcludeLocalitiesActor1*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 8826 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1loopBody1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
			static_cast<ExcludeLocalitiesActor1*>(this)->actor_wait_state = 1;
															#line 1748 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< ExcludeLocalitiesActor1, 0, Void >*>(static_cast<ExcludeLocalitiesActor1*>(this)));
															#line 8831 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 1751 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			TraceEvent("ExcludeLocalitiesError").errorUnsuppressed(e);
															#line 1752 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Void> __when_expr_1 = ryw.onError(e);
															#line 1752 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<ExcludeLocalitiesActor1*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 8857 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1Catch1when1(__when_expr_1.get(), loopDepth); };
			static_cast<ExcludeLocalitiesActor1*>(this)->actor_wait_state = 2;
															#line 1752 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< ExcludeLocalitiesActor1, 1, Void >*>(static_cast<ExcludeLocalitiesActor1*>(this)));
															#line 8862 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(Void const& _,int loopDepth) 
	{
															#line 1749 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<ExcludeLocalitiesActor1*>(this)->SAV<Void>::futures) { (void)(Void()); this->~ExcludeLocalitiesActor1State(); static_cast<ExcludeLocalitiesActor1*>(this)->destroy(); return 0; }
															#line 8877 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<ExcludeLocalitiesActor1*>(this)->SAV< Void >::value()) Void(Void());
		this->~ExcludeLocalitiesActor1State();
		static_cast<ExcludeLocalitiesActor1*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2(Void && _,int loopDepth) 
	{
															#line 1749 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<ExcludeLocalitiesActor1*>(this)->SAV<Void>::futures) { (void)(Void()); this->~ExcludeLocalitiesActor1State(); static_cast<ExcludeLocalitiesActor1*>(this)->destroy(); return 0; }
															#line 8889 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<ExcludeLocalitiesActor1*>(this)->SAV< Void >::value()) Void(Void());
		this->~ExcludeLocalitiesActor1State();
		static_cast<ExcludeLocalitiesActor1*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<ExcludeLocalitiesActor1*>(this)->actor_wait_state > 0) static_cast<ExcludeLocalitiesActor1*>(this)->actor_wait_state = 0;
		static_cast<ExcludeLocalitiesActor1*>(this)->ActorCallback< ExcludeLocalitiesActor1, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< ExcludeLocalitiesActor1, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("excludeLocalities", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("excludeLocalities", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< ExcludeLocalitiesActor1, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("excludeLocalities", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("excludeLocalities", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< ExcludeLocalitiesActor1, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("excludeLocalities", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("excludeLocalities", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<ExcludeLocalitiesActor1*>(this)->actor_wait_state > 0) static_cast<ExcludeLocalitiesActor1*>(this)->actor_wait_state = 0;
		static_cast<ExcludeLocalitiesActor1*>(this)->ActorCallback< ExcludeLocalitiesActor1, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< ExcludeLocalitiesActor1, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("excludeLocalities", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("excludeLocalities", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< ExcludeLocalitiesActor1, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("excludeLocalities", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("excludeLocalities", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< ExcludeLocalitiesActor1, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("excludeLocalities", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("excludeLocalities", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1loopHead2(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody2(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody2(int loopDepth) 
	{
		try {
															#line 1759 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Void> __when_expr_2 = excludeLocalities(&tr, localities, failed);
															#line 1759 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<ExcludeLocalitiesActor1*>(this)->actor_wait_state < 0) return a_body1loopBody2Catch1(actor_cancelled(), loopDepth);
															#line 9049 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1loopBody2Catch1(__when_expr_2.getError(), loopDepth); else return a_body1loopBody2when1(__when_expr_2.get(), loopDepth); };
			static_cast<ExcludeLocalitiesActor1*>(this)->actor_wait_state = 3;
															#line 1759 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< ExcludeLocalitiesActor1, 2, Void >*>(static_cast<ExcludeLocalitiesActor1*>(this)));
															#line 9054 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody2Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody2Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody2cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead2(0);

		return loopDepth;
	}
	int a_body1loopBody2Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 1763 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			TraceEvent("ExcludeLocalitiesError").errorUnsuppressed(e);
															#line 1764 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Void> __when_expr_4 = tr.onError(e);
															#line 1764 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<ExcludeLocalitiesActor1*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 9080 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1Catch1(__when_expr_4.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody2Catch1when1(__when_expr_4.get(), loopDepth); };
			static_cast<ExcludeLocalitiesActor1*>(this)->actor_wait_state = 5;
															#line 1764 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< ExcludeLocalitiesActor1, 4, Void >*>(static_cast<ExcludeLocalitiesActor1*>(this)));
															#line 9085 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody2cont2(Void const& _,int loopDepth) 
	{
															#line 1760 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		StrictFuture<Void> __when_expr_3 = tr.commit();
															#line 1760 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (static_cast<ExcludeLocalitiesActor1*>(this)->actor_wait_state < 0) return a_body1loopBody2Catch1(actor_cancelled(), loopDepth);
															#line 9102 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1loopBody2Catch1(__when_expr_3.getError(), loopDepth); else return a_body1loopBody2cont2when1(__when_expr_3.get(), loopDepth); };
		static_cast<ExcludeLocalitiesActor1*>(this)->actor_wait_state = 4;
															#line 1760 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< ExcludeLocalitiesActor1, 3, Void >*>(static_cast<ExcludeLocalitiesActor1*>(this)));
															#line 9107 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody2cont2(Void && _,int loopDepth) 
	{
															#line 1760 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		StrictFuture<Void> __when_expr_3 = tr.commit();
															#line 1760 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (static_cast<ExcludeLocalitiesActor1*>(this)->actor_wait_state < 0) return a_body1loopBody2Catch1(actor_cancelled(), loopDepth);
															#line 9118 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1loopBody2Catch1(__when_expr_3.getError(), loopDepth); else return a_body1loopBody2cont2when1(__when_expr_3.get(), loopDepth); };
		static_cast<ExcludeLocalitiesActor1*>(this)->actor_wait_state = 4;
															#line 1760 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< ExcludeLocalitiesActor1, 3, Void >*>(static_cast<ExcludeLocalitiesActor1*>(this)));
															#line 9123 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody2cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody2cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<ExcludeLocalitiesActor1*>(this)->actor_wait_state > 0) static_cast<ExcludeLocalitiesActor1*>(this)->actor_wait_state = 0;
		static_cast<ExcludeLocalitiesActor1*>(this)->ActorCallback< ExcludeLocalitiesActor1, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< ExcludeLocalitiesActor1, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("excludeLocalities", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody2when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody2Catch1(error, 0);
		} catch (...) {
			a_body1loopBody2Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("excludeLocalities", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< ExcludeLocalitiesActor1, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("excludeLocalities", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody2Catch1(error, 0);
		} catch (...) {
			a_body1loopBody2Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("excludeLocalities", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< ExcludeLocalitiesActor1, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("excludeLocalities", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody2Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody2Catch1(error, 0);
		} catch (...) {
			a_body1loopBody2Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("excludeLocalities", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1loopBody2cont3(Void const& _,int loopDepth) 
	{
															#line 1761 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<ExcludeLocalitiesActor1*>(this)->SAV<Void>::futures) { (void)(Void()); this->~ExcludeLocalitiesActor1State(); static_cast<ExcludeLocalitiesActor1*>(this)->destroy(); return 0; }
															#line 9195 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<ExcludeLocalitiesActor1*>(this)->SAV< Void >::value()) Void(Void());
		this->~ExcludeLocalitiesActor1State();
		static_cast<ExcludeLocalitiesActor1*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody2cont3(Void && _,int loopDepth) 
	{
															#line 1761 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<ExcludeLocalitiesActor1*>(this)->SAV<Void>::futures) { (void)(Void()); this->~ExcludeLocalitiesActor1State(); static_cast<ExcludeLocalitiesActor1*>(this)->destroy(); return 0; }
															#line 9207 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<ExcludeLocalitiesActor1*>(this)->SAV< Void >::value()) Void(Void());
		this->~ExcludeLocalitiesActor1State();
		static_cast<ExcludeLocalitiesActor1*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody2cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody2cont3(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody2cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody2cont3(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<ExcludeLocalitiesActor1*>(this)->actor_wait_state > 0) static_cast<ExcludeLocalitiesActor1*>(this)->actor_wait_state = 0;
		static_cast<ExcludeLocalitiesActor1*>(this)->ActorCallback< ExcludeLocalitiesActor1, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< ExcludeLocalitiesActor1, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("excludeLocalities", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody2cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody2Catch1(error, 0);
		} catch (...) {
			a_body1loopBody2Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("excludeLocalities", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< ExcludeLocalitiesActor1, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("excludeLocalities", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody2cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody2Catch1(error, 0);
		} catch (...) {
			a_body1loopBody2Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("excludeLocalities", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< ExcludeLocalitiesActor1, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("excludeLocalities", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody2Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody2Catch1(error, 0);
		} catch (...) {
			a_body1loopBody2Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("excludeLocalities", reinterpret_cast<unsigned long>(this), 3);

	}
	int a_body1loopBody2Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody2cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody2Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody2cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody2Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody2Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody2Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody2Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose5() 
	{
		if (static_cast<ExcludeLocalitiesActor1*>(this)->actor_wait_state > 0) static_cast<ExcludeLocalitiesActor1*>(this)->actor_wait_state = 0;
		static_cast<ExcludeLocalitiesActor1*>(this)->ActorCallback< ExcludeLocalitiesActor1, 4, Void >::remove();

	}
	void a_callback_fire(ActorCallback< ExcludeLocalitiesActor1, 4, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("excludeLocalities", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1loopBody2Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("excludeLocalities", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_fire(ActorCallback< ExcludeLocalitiesActor1, 4, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("excludeLocalities", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1loopBody2Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("excludeLocalities", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_error(ActorCallback< ExcludeLocalitiesActor1, 4, Void >*,Error err) 
	{
		fdb_probe_actor_enter("excludeLocalities", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("excludeLocalities", reinterpret_cast<unsigned long>(this), 4);

	}
															#line 1728 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Database cx;
															#line 1728 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	std::unordered_set<std::string> localities;
															#line 1728 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	bool failed;
															#line 1730 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	ReadYourWritesTransaction ryw;
															#line 1756 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Transaction tr;
															#line 9363 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
};
// This generated class is to be used only via excludeLocalities()
															#line 1728 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class ExcludeLocalitiesActor1 final : public Actor<Void>, public ActorCallback< ExcludeLocalitiesActor1, 0, Void >, public ActorCallback< ExcludeLocalitiesActor1, 1, Void >, public ActorCallback< ExcludeLocalitiesActor1, 2, Void >, public ActorCallback< ExcludeLocalitiesActor1, 3, Void >, public ActorCallback< ExcludeLocalitiesActor1, 4, Void >, public FastAllocated<ExcludeLocalitiesActor1>, public ExcludeLocalitiesActor1State<ExcludeLocalitiesActor1> {
															#line 9368 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
	using FastAllocated<ExcludeLocalitiesActor1>::operator new;
	using FastAllocated<ExcludeLocalitiesActor1>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< ExcludeLocalitiesActor1, 0, Void >;
friend struct ActorCallback< ExcludeLocalitiesActor1, 1, Void >;
friend struct ActorCallback< ExcludeLocalitiesActor1, 2, Void >;
friend struct ActorCallback< ExcludeLocalitiesActor1, 3, Void >;
friend struct ActorCallback< ExcludeLocalitiesActor1, 4, Void >;
															#line 1728 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	ExcludeLocalitiesActor1(Database const& cx,std::unordered_set<std::string> const& localities,bool const& failed) 
															#line 9383 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		 : Actor<Void>(),
		   ExcludeLocalitiesActor1State<ExcludeLocalitiesActor1>(cx, localities, failed)
	{
		fdb_probe_actor_enter("excludeLocalities", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("excludeLocalities");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("excludeLocalities", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< ExcludeLocalitiesActor1, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< ExcludeLocalitiesActor1, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< ExcludeLocalitiesActor1, 2, Void >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< ExcludeLocalitiesActor1, 3, Void >*)0, actor_cancelled()); break;
		case 5: this->a_callback_error((ActorCallback< ExcludeLocalitiesActor1, 4, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 1728 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
[[nodiscard]] Future<Void> excludeLocalities( Database const& cx, std::unordered_set<std::string> const& localities, bool const& failed ) {
															#line 1728 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	return Future<Void>(new ExcludeLocalitiesActor1(cx, localities, failed));
															#line 9415 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
}

#line 1769 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"

															#line 9420 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via includeServers()
															#line 1770 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
template <class IncludeServersActor>
															#line 1770 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class IncludeServersActorState {
															#line 9427 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
															#line 1770 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	IncludeServersActorState(Database const& cx,std::vector<AddressExclusion> const& servers,bool const& failed) 
															#line 1770 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
															#line 1770 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		 : cx(cx),
															#line 1770 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   servers(servers),
															#line 1770 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   failed(failed),
															#line 1771 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   versionKey(deterministicRandom()->randomUniqueID().toString())
															#line 9440 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("includeServers", reinterpret_cast<unsigned long>(this));

	}
	~IncludeServersActorState() 
	{
		fdb_probe_actor_destroy("includeServers", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 1772 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (cx->apiVersionAtLeast(700))
															#line 9455 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 1773 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				ryw = ReadYourWritesTransaction(cx);
															#line 1774 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				;
															#line 9461 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				loopDepth = a_body1loopHead1(loopDepth);
			}
			else
			{
															#line 1812 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				tr = Transaction(cx);
															#line 1813 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				;
															#line 9470 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				loopDepth = a_body1loopHead2(loopDepth);
			}
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~IncludeServersActorState();
		static_cast<IncludeServersActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
		try {
															#line 1776 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			ryw.setOption(FDBTransactionOptions::RAW_ACCESS);
															#line 1777 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			ryw.setOption(FDBTransactionOptions::SPECIAL_KEY_SPACE_ENABLE_WRITES);
															#line 1778 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			for( auto& s : servers ) {
															#line 1779 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				if (!s.isValid())
															#line 9508 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				{
															#line 1780 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
					if (failed)
															#line 9512 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
					{
															#line 1781 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
						ryw.clear(SpecialKeySpace::getManagementApiCommandRange("failed"));
															#line 9516 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
					}
					else
					{
															#line 1783 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
						ryw.clear(SpecialKeySpace::getManagementApiCommandRange("exclude"));
															#line 9522 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
					}
				}
				else
				{
															#line 1786 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
					Key addr = failed ? SpecialKeySpace::getManagementApiCommandPrefix("failed").withSuffix(s.toString()) : SpecialKeySpace::getManagementApiCommandPrefix("exclude").withSuffix(s.toString());
															#line 1789 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
					ryw.clear(addr);
															#line 1798 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
					if (s.isWholeMachine())
															#line 9533 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
					{
															#line 1799 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
						ryw.clear(KeyRangeRef(addr.withSuffix(":"_sr), addr.withSuffix(";"_sr)));
															#line 9537 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
					}
				}
			}
															#line 1802 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			TraceEvent("IncludeServersCommit").detail("Servers", describe(servers)).detail("Failed", failed);
															#line 1804 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Void> __when_expr_0 = ryw.commit();
															#line 1804 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<IncludeServersActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 9547 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1loopBody1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
			static_cast<IncludeServersActor*>(this)->actor_wait_state = 1;
															#line 1804 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< IncludeServersActor, 0, Void >*>(static_cast<IncludeServersActor*>(this)));
															#line 9552 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 1807 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			TraceEvent("IncludeServersError").errorUnsuppressed(e);
															#line 1808 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Void> __when_expr_1 = ryw.onError(e);
															#line 1808 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<IncludeServersActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 9578 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1Catch1when1(__when_expr_1.get(), loopDepth); };
			static_cast<IncludeServersActor*>(this)->actor_wait_state = 2;
															#line 1808 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< IncludeServersActor, 1, Void >*>(static_cast<IncludeServersActor*>(this)));
															#line 9583 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(Void const& _,int loopDepth) 
	{
															#line 1805 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<IncludeServersActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~IncludeServersActorState(); static_cast<IncludeServersActor*>(this)->destroy(); return 0; }
															#line 9598 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<IncludeServersActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~IncludeServersActorState();
		static_cast<IncludeServersActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2(Void && _,int loopDepth) 
	{
															#line 1805 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<IncludeServersActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~IncludeServersActorState(); static_cast<IncludeServersActor*>(this)->destroy(); return 0; }
															#line 9610 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<IncludeServersActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~IncludeServersActorState();
		static_cast<IncludeServersActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<IncludeServersActor*>(this)->actor_wait_state > 0) static_cast<IncludeServersActor*>(this)->actor_wait_state = 0;
		static_cast<IncludeServersActor*>(this)->ActorCallback< IncludeServersActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< IncludeServersActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("includeServers", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("includeServers", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< IncludeServersActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("includeServers", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("includeServers", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< IncludeServersActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("includeServers", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("includeServers", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<IncludeServersActor*>(this)->actor_wait_state > 0) static_cast<IncludeServersActor*>(this)->actor_wait_state = 0;
		static_cast<IncludeServersActor*>(this)->ActorCallback< IncludeServersActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< IncludeServersActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("includeServers", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("includeServers", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< IncludeServersActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("includeServers", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("includeServers", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< IncludeServersActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("includeServers", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("includeServers", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1loopHead2(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody2(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody2(int loopDepth) 
	{
		try {
															#line 1815 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr.setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 1816 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr.setOption(FDBTransactionOptions::PRIORITY_SYSTEM_IMMEDIATE);
															#line 1817 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr.setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 1818 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr.setOption(FDBTransactionOptions::USE_PROVISIONAL_PROXIES);
															#line 1822 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr.setOption(FDBTransactionOptions::CAUSAL_WRITE_RISKY);
															#line 1823 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (failed)
															#line 9778 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 1824 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				tr.addReadConflictRange(singleKeyRange(failedServersVersionKey));
															#line 1825 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				tr.set(failedServersVersionKey, versionKey);
															#line 9784 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			}
			else
			{
															#line 1827 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				tr.addReadConflictRange(singleKeyRange(excludedServersVersionKey));
															#line 1828 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				tr.set(excludedServersVersionKey, versionKey);
															#line 9792 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			}
															#line 1831 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			for( auto& s : servers ) {
															#line 1832 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				if (!s.isValid())
															#line 9798 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				{
															#line 1833 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
					if (failed)
															#line 9802 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
					{
															#line 1834 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
						tr.clear(failedServersKeys);
															#line 9806 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
					}
					else
					{
															#line 1836 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
						tr.clear(excludedServersKeys);
															#line 9812 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
					}
				}
				else
				{
															#line 1838 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
					if (s.isWholeMachine())
															#line 9819 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
					{
															#line 1847 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
						auto addr = failed ? encodeFailedServersKey(s) : encodeExcludedServersKey(s);
															#line 1848 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
						tr.clear(singleKeyRange(addr));
															#line 1849 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
						tr.clear(KeyRangeRef(addr + ':', addr + char(':' + 1)));
															#line 9827 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
					}
					else
					{
															#line 1851 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
						if (failed)
															#line 9833 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
						{
															#line 1852 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
							tr.clear(encodeFailedServersKey(s));
															#line 9837 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
						}
						else
						{
															#line 1854 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
							tr.clear(encodeExcludedServersKey(s));
															#line 9843 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
						}
					}
				}
			}
															#line 1859 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			TraceEvent("IncludeServersCommit").detail("Servers", describe(servers)).detail("Failed", failed);
															#line 1861 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Void> __when_expr_2 = tr.commit();
															#line 1861 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<IncludeServersActor*>(this)->actor_wait_state < 0) return a_body1loopBody2Catch1(actor_cancelled(), loopDepth);
															#line 9854 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1loopBody2Catch1(__when_expr_2.getError(), loopDepth); else return a_body1loopBody2when1(__when_expr_2.get(), loopDepth); };
			static_cast<IncludeServersActor*>(this)->actor_wait_state = 3;
															#line 1861 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< IncludeServersActor, 2, Void >*>(static_cast<IncludeServersActor*>(this)));
															#line 9859 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody2Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody2Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody2cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead2(0);

		return loopDepth;
	}
	int a_body1loopBody2Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 1864 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			TraceEvent("IncludeServersError").errorUnsuppressed(e);
															#line 1865 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Void> __when_expr_3 = tr.onError(e);
															#line 1865 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<IncludeServersActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 9885 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch1(__when_expr_3.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody2Catch1when1(__when_expr_3.get(), loopDepth); };
			static_cast<IncludeServersActor*>(this)->actor_wait_state = 4;
															#line 1865 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< IncludeServersActor, 3, Void >*>(static_cast<IncludeServersActor*>(this)));
															#line 9890 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody2cont2(Void const& _,int loopDepth) 
	{
															#line 1862 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<IncludeServersActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~IncludeServersActorState(); static_cast<IncludeServersActor*>(this)->destroy(); return 0; }
															#line 9905 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<IncludeServersActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~IncludeServersActorState();
		static_cast<IncludeServersActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody2cont2(Void && _,int loopDepth) 
	{
															#line 1862 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<IncludeServersActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~IncludeServersActorState(); static_cast<IncludeServersActor*>(this)->destroy(); return 0; }
															#line 9917 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<IncludeServersActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~IncludeServersActorState();
		static_cast<IncludeServersActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody2cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody2cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<IncludeServersActor*>(this)->actor_wait_state > 0) static_cast<IncludeServersActor*>(this)->actor_wait_state = 0;
		static_cast<IncludeServersActor*>(this)->ActorCallback< IncludeServersActor, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< IncludeServersActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("includeServers", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody2when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody2Catch1(error, 0);
		} catch (...) {
			a_body1loopBody2Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("includeServers", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< IncludeServersActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("includeServers", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody2Catch1(error, 0);
		} catch (...) {
			a_body1loopBody2Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("includeServers", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< IncludeServersActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("includeServers", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody2Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody2Catch1(error, 0);
		} catch (...) {
			a_body1loopBody2Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("includeServers", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1loopBody2Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody2cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody2Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody2cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody2Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody2Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody2Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody2Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<IncludeServersActor*>(this)->actor_wait_state > 0) static_cast<IncludeServersActor*>(this)->actor_wait_state = 0;
		static_cast<IncludeServersActor*>(this)->ActorCallback< IncludeServersActor, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< IncludeServersActor, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("includeServers", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody2Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("includeServers", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< IncludeServersActor, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("includeServers", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody2Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("includeServers", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< IncludeServersActor, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("includeServers", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("includeServers", reinterpret_cast<unsigned long>(this), 3);

	}
															#line 1770 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Database cx;
															#line 1770 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	std::vector<AddressExclusion> servers;
															#line 1770 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	bool failed;
															#line 1771 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	std::string versionKey;
															#line 1773 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	ReadYourWritesTransaction ryw;
															#line 1812 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Transaction tr;
															#line 10075 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
};
// This generated class is to be used only via includeServers()
															#line 1770 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class IncludeServersActor final : public Actor<Void>, public ActorCallback< IncludeServersActor, 0, Void >, public ActorCallback< IncludeServersActor, 1, Void >, public ActorCallback< IncludeServersActor, 2, Void >, public ActorCallback< IncludeServersActor, 3, Void >, public FastAllocated<IncludeServersActor>, public IncludeServersActorState<IncludeServersActor> {
															#line 10080 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
	using FastAllocated<IncludeServersActor>::operator new;
	using FastAllocated<IncludeServersActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< IncludeServersActor, 0, Void >;
friend struct ActorCallback< IncludeServersActor, 1, Void >;
friend struct ActorCallback< IncludeServersActor, 2, Void >;
friend struct ActorCallback< IncludeServersActor, 3, Void >;
															#line 1770 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	IncludeServersActor(Database const& cx,std::vector<AddressExclusion> const& servers,bool const& failed) 
															#line 10094 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		 : Actor<Void>(),
		   IncludeServersActorState<IncludeServersActor>(cx, servers, failed)
	{
		fdb_probe_actor_enter("includeServers", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("includeServers");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("includeServers", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< IncludeServersActor, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< IncludeServersActor, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< IncludeServersActor, 2, Void >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< IncludeServersActor, 3, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 1770 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
[[nodiscard]] Future<Void> includeServers( Database const& cx, std::vector<AddressExclusion> const& servers, bool const& failed ) {
															#line 1770 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	return Future<Void>(new IncludeServersActor(cx, servers, failed));
															#line 10125 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
}

#line 1870 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"

// Remove the given localities from the exclusion list.
// include localities by clearing the keys.
															#line 10132 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via includeLocalities()
															#line 1873 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
template <class IncludeLocalitiesActor>
															#line 1873 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class IncludeLocalitiesActorState {
															#line 10139 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
															#line 1873 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	IncludeLocalitiesActorState(Database const& cx,std::vector<std::string> const& localities,bool const& failed,bool const& includeAll) 
															#line 1873 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
															#line 1873 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		 : cx(cx),
															#line 1873 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   localities(localities),
															#line 1873 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   failed(failed),
															#line 1873 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   includeAll(includeAll),
															#line 1874 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   versionKey(deterministicRandom()->randomUniqueID().toString())
															#line 10154 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("includeLocalities", reinterpret_cast<unsigned long>(this));

	}
	~IncludeLocalitiesActorState() 
	{
		fdb_probe_actor_destroy("includeLocalities", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 1875 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (cx->apiVersionAtLeast(700))
															#line 10169 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 1876 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				ryw = ReadYourWritesTransaction(cx);
															#line 1877 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				;
															#line 10175 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				loopDepth = a_body1loopHead1(loopDepth);
			}
			else
			{
															#line 1908 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				tr = Transaction(cx);
															#line 1909 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				;
															#line 10184 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				loopDepth = a_body1loopHead2(loopDepth);
			}
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~IncludeLocalitiesActorState();
		static_cast<IncludeLocalitiesActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
		try {
															#line 1879 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			ryw.setOption(FDBTransactionOptions::RAW_ACCESS);
															#line 1880 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			ryw.setOption(FDBTransactionOptions::SPECIAL_KEY_SPACE_ENABLE_WRITES);
															#line 1881 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (includeAll)
															#line 10220 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 1882 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				if (failed)
															#line 10224 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				{
															#line 1883 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
					ryw.clear(SpecialKeySpace::getManagementApiCommandRange("failedlocality"));
															#line 10228 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				}
				else
				{
															#line 1885 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
					ryw.clear(SpecialKeySpace::getManagementApiCommandRange("excludedlocality"));
															#line 10234 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				}
			}
			else
			{
															#line 1888 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				for( const auto& l : localities ) {
															#line 1889 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
					Key locality = failed ? SpecialKeySpace::getManagementApiCommandPrefix("failedlocality").withSuffix(l) : SpecialKeySpace::getManagementApiCommandPrefix("excludedlocality").withSuffix(l);
															#line 1892 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
					ryw.clear(locality);
															#line 10245 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				}
			}
															#line 1895 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			TraceEvent("IncludeLocalitiesCommit") .detail("Localities", describe(localities)) .detail("Failed", failed) .detail("IncludeAll", includeAll);
															#line 1900 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Void> __when_expr_0 = ryw.commit();
															#line 1900 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<IncludeLocalitiesActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 10254 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1loopBody1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
			static_cast<IncludeLocalitiesActor*>(this)->actor_wait_state = 1;
															#line 1900 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< IncludeLocalitiesActor, 0, Void >*>(static_cast<IncludeLocalitiesActor*>(this)));
															#line 10259 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 1903 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			TraceEvent("IncludeLocalitiesError").errorUnsuppressed(e);
															#line 1904 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Void> __when_expr_1 = ryw.onError(e);
															#line 1904 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<IncludeLocalitiesActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 10285 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1Catch1when1(__when_expr_1.get(), loopDepth); };
			static_cast<IncludeLocalitiesActor*>(this)->actor_wait_state = 2;
															#line 1904 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< IncludeLocalitiesActor, 1, Void >*>(static_cast<IncludeLocalitiesActor*>(this)));
															#line 10290 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(Void const& _,int loopDepth) 
	{
															#line 1901 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<IncludeLocalitiesActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~IncludeLocalitiesActorState(); static_cast<IncludeLocalitiesActor*>(this)->destroy(); return 0; }
															#line 10305 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<IncludeLocalitiesActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~IncludeLocalitiesActorState();
		static_cast<IncludeLocalitiesActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2(Void && _,int loopDepth) 
	{
															#line 1901 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<IncludeLocalitiesActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~IncludeLocalitiesActorState(); static_cast<IncludeLocalitiesActor*>(this)->destroy(); return 0; }
															#line 10317 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<IncludeLocalitiesActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~IncludeLocalitiesActorState();
		static_cast<IncludeLocalitiesActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<IncludeLocalitiesActor*>(this)->actor_wait_state > 0) static_cast<IncludeLocalitiesActor*>(this)->actor_wait_state = 0;
		static_cast<IncludeLocalitiesActor*>(this)->ActorCallback< IncludeLocalitiesActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< IncludeLocalitiesActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("includeLocalities", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("includeLocalities", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< IncludeLocalitiesActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("includeLocalities", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("includeLocalities", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< IncludeLocalitiesActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("includeLocalities", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("includeLocalities", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<IncludeLocalitiesActor*>(this)->actor_wait_state > 0) static_cast<IncludeLocalitiesActor*>(this)->actor_wait_state = 0;
		static_cast<IncludeLocalitiesActor*>(this)->ActorCallback< IncludeLocalitiesActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< IncludeLocalitiesActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("includeLocalities", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("includeLocalities", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< IncludeLocalitiesActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("includeLocalities", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("includeLocalities", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< IncludeLocalitiesActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("includeLocalities", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("includeLocalities", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1loopHead2(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody2(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody2(int loopDepth) 
	{
		try {
															#line 1911 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr.setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 1912 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr.setOption(FDBTransactionOptions::PRIORITY_SYSTEM_IMMEDIATE);
															#line 1913 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr.setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 1914 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr.setOption(FDBTransactionOptions::USE_PROVISIONAL_PROXIES);
															#line 1918 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr.setOption(FDBTransactionOptions::CAUSAL_WRITE_RISKY);
															#line 1919 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (failed)
															#line 10485 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 1920 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				tr.addReadConflictRange(singleKeyRange(failedLocalityVersionKey));
															#line 1921 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				tr.set(failedLocalityVersionKey, versionKey);
															#line 10491 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			}
			else
			{
															#line 1923 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				tr.addReadConflictRange(singleKeyRange(excludedLocalityVersionKey));
															#line 1924 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				tr.set(excludedLocalityVersionKey, versionKey);
															#line 10499 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			}
															#line 1927 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (includeAll)
															#line 10503 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 1928 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				if (failed)
															#line 10507 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				{
															#line 1929 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
					tr.clear(failedLocalityKeys);
															#line 10511 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				}
				else
				{
															#line 1931 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
					tr.clear(excludedLocalityKeys);
															#line 10517 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				}
			}
			else
			{
															#line 1934 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				for( const auto& l : localities ) {
															#line 1935 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
					if (failed)
															#line 10526 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
					{
															#line 1936 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
						tr.clear(encodeFailedLocalityKey(l));
															#line 10530 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
					}
					else
					{
															#line 1938 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
						tr.clear(encodeExcludedLocalityKey(l));
															#line 10536 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
					}
				}
			}
															#line 1943 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			TraceEvent("IncludeLocalitiesCommit") .detail("Localities", describe(localities)) .detail("Failed", failed) .detail("IncludeAll", includeAll);
															#line 1948 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Void> __when_expr_2 = tr.commit();
															#line 1948 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<IncludeLocalitiesActor*>(this)->actor_wait_state < 0) return a_body1loopBody2Catch1(actor_cancelled(), loopDepth);
															#line 10546 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1loopBody2Catch1(__when_expr_2.getError(), loopDepth); else return a_body1loopBody2when1(__when_expr_2.get(), loopDepth); };
			static_cast<IncludeLocalitiesActor*>(this)->actor_wait_state = 3;
															#line 1948 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< IncludeLocalitiesActor, 2, Void >*>(static_cast<IncludeLocalitiesActor*>(this)));
															#line 10551 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody2Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody2Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody2cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead2(0);

		return loopDepth;
	}
	int a_body1loopBody2Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 1951 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			TraceEvent("IncludeLocalitiesError").errorUnsuppressed(e);
															#line 1952 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Void> __when_expr_3 = tr.onError(e);
															#line 1952 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<IncludeLocalitiesActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 10577 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch1(__when_expr_3.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody2Catch1when1(__when_expr_3.get(), loopDepth); };
			static_cast<IncludeLocalitiesActor*>(this)->actor_wait_state = 4;
															#line 1952 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< IncludeLocalitiesActor, 3, Void >*>(static_cast<IncludeLocalitiesActor*>(this)));
															#line 10582 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody2cont2(Void const& _,int loopDepth) 
	{
															#line 1949 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<IncludeLocalitiesActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~IncludeLocalitiesActorState(); static_cast<IncludeLocalitiesActor*>(this)->destroy(); return 0; }
															#line 10597 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<IncludeLocalitiesActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~IncludeLocalitiesActorState();
		static_cast<IncludeLocalitiesActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody2cont2(Void && _,int loopDepth) 
	{
															#line 1949 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<IncludeLocalitiesActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~IncludeLocalitiesActorState(); static_cast<IncludeLocalitiesActor*>(this)->destroy(); return 0; }
															#line 10609 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<IncludeLocalitiesActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~IncludeLocalitiesActorState();
		static_cast<IncludeLocalitiesActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody2cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody2cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<IncludeLocalitiesActor*>(this)->actor_wait_state > 0) static_cast<IncludeLocalitiesActor*>(this)->actor_wait_state = 0;
		static_cast<IncludeLocalitiesActor*>(this)->ActorCallback< IncludeLocalitiesActor, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< IncludeLocalitiesActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("includeLocalities", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody2when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody2Catch1(error, 0);
		} catch (...) {
			a_body1loopBody2Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("includeLocalities", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< IncludeLocalitiesActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("includeLocalities", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody2Catch1(error, 0);
		} catch (...) {
			a_body1loopBody2Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("includeLocalities", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< IncludeLocalitiesActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("includeLocalities", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody2Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody2Catch1(error, 0);
		} catch (...) {
			a_body1loopBody2Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("includeLocalities", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1loopBody2Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody2cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody2Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody2cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody2Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody2Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody2Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody2Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<IncludeLocalitiesActor*>(this)->actor_wait_state > 0) static_cast<IncludeLocalitiesActor*>(this)->actor_wait_state = 0;
		static_cast<IncludeLocalitiesActor*>(this)->ActorCallback< IncludeLocalitiesActor, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< IncludeLocalitiesActor, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("includeLocalities", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody2Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("includeLocalities", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< IncludeLocalitiesActor, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("includeLocalities", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody2Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("includeLocalities", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< IncludeLocalitiesActor, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("includeLocalities", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("includeLocalities", reinterpret_cast<unsigned long>(this), 3);

	}
															#line 1873 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Database cx;
															#line 1873 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	std::vector<std::string> localities;
															#line 1873 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	bool failed;
															#line 1873 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	bool includeAll;
															#line 1874 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	std::string versionKey;
															#line 1876 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	ReadYourWritesTransaction ryw;
															#line 1908 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Transaction tr;
															#line 10769 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
};
// This generated class is to be used only via includeLocalities()
															#line 1873 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class IncludeLocalitiesActor final : public Actor<Void>, public ActorCallback< IncludeLocalitiesActor, 0, Void >, public ActorCallback< IncludeLocalitiesActor, 1, Void >, public ActorCallback< IncludeLocalitiesActor, 2, Void >, public ActorCallback< IncludeLocalitiesActor, 3, Void >, public FastAllocated<IncludeLocalitiesActor>, public IncludeLocalitiesActorState<IncludeLocalitiesActor> {
															#line 10774 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
	using FastAllocated<IncludeLocalitiesActor>::operator new;
	using FastAllocated<IncludeLocalitiesActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< IncludeLocalitiesActor, 0, Void >;
friend struct ActorCallback< IncludeLocalitiesActor, 1, Void >;
friend struct ActorCallback< IncludeLocalitiesActor, 2, Void >;
friend struct ActorCallback< IncludeLocalitiesActor, 3, Void >;
															#line 1873 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	IncludeLocalitiesActor(Database const& cx,std::vector<std::string> const& localities,bool const& failed,bool const& includeAll) 
															#line 10788 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		 : Actor<Void>(),
		   IncludeLocalitiesActorState<IncludeLocalitiesActor>(cx, localities, failed, includeAll)
	{
		fdb_probe_actor_enter("includeLocalities", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("includeLocalities");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("includeLocalities", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< IncludeLocalitiesActor, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< IncludeLocalitiesActor, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< IncludeLocalitiesActor, 2, Void >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< IncludeLocalitiesActor, 3, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 1873 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
[[nodiscard]] Future<Void> includeLocalities( Database const& cx, std::vector<std::string> const& localities, bool const& failed, bool const& includeAll ) {
															#line 1873 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	return Future<Void>(new IncludeLocalitiesActor(cx, localities, failed, includeAll));
															#line 10819 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
}

#line 1957 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"

															#line 10824 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via setClass()
															#line 1958 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
template <class SetClassActor>
															#line 1958 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class SetClassActorState {
															#line 10831 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
															#line 1958 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	SetClassActorState(Database const& cx,AddressExclusion const& server,ProcessClass const& processClass) 
															#line 1958 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
															#line 1958 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		 : cx(cx),
															#line 1958 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   server(server),
															#line 1958 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   processClass(processClass),
															#line 1959 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   tr(cx)
															#line 10844 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("setClass", reinterpret_cast<unsigned long>(this));

	}
	~SetClassActorState() 
	{
		fdb_probe_actor_destroy("setClass", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 1961 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			;
															#line 10859 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~SetClassActorState();
		static_cast<SetClassActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
		try {
															#line 1963 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr.setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 1964 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr.setOption(FDBTransactionOptions::PRIORITY_SYSTEM_IMMEDIATE);
															#line 1965 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr.setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 1966 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr.setOption(FDBTransactionOptions::USE_PROVISIONAL_PROXIES);
															#line 1968 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<std::vector<ProcessData>> __when_expr_0 = getWorkers(&tr);
															#line 1968 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<SetClassActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 10900 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1loopBody1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
			static_cast<SetClassActor*>(this)->actor_wait_state = 1;
															#line 1968 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< SetClassActor, 0, std::vector<ProcessData> >*>(static_cast<SetClassActor*>(this)));
															#line 10905 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 1988 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Void> __when_expr_2 = tr.onError(e);
															#line 1988 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<SetClassActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 10929 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1Catch1when1(__when_expr_2.get(), loopDepth); };
			static_cast<SetClassActor*>(this)->actor_wait_state = 3;
															#line 1988 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< SetClassActor, 2, Void >*>(static_cast<SetClassActor*>(this)));
															#line 10934 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(std::vector<ProcessData> const& workers,int loopDepth) 
	{
															#line 1970 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		bool foundChange = false;
															#line 1971 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		for(int i = 0;i < workers.size();i++) {
															#line 1972 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (server.excludes(workers[i].address))
															#line 10953 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 1973 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				if (processClass.classType() != ProcessClass::InvalidClass)
															#line 10957 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				{
															#line 1974 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
					tr.set(processClassKeyFor(workers[i].locality.processId().get()), processClassValue(processClass));
															#line 10961 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				}
				else
				{
															#line 1977 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
					tr.clear(processClassKeyFor(workers[i].locality.processId().get()));
															#line 10967 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				}
															#line 1978 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				foundChange = true;
															#line 10971 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			}
		}
															#line 1982 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (foundChange)
															#line 10976 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 1983 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr.set(processClassChangeKey, deterministicRandom()->randomUniqueID().toString());
															#line 10980 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		}
															#line 1985 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		StrictFuture<Void> __when_expr_1 = tr.commit();
															#line 1985 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (static_cast<SetClassActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 10986 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
		static_cast<SetClassActor*>(this)->actor_wait_state = 2;
															#line 1985 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< SetClassActor, 1, Void >*>(static_cast<SetClassActor*>(this)));
															#line 10991 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2(std::vector<ProcessData> && workers,int loopDepth) 
	{
															#line 1970 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		bool foundChange = false;
															#line 1971 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		for(int i = 0;i < workers.size();i++) {
															#line 1972 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (server.excludes(workers[i].address))
															#line 11004 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 1973 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				if (processClass.classType() != ProcessClass::InvalidClass)
															#line 11008 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				{
															#line 1974 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
					tr.set(processClassKeyFor(workers[i].locality.processId().get()), processClassValue(processClass));
															#line 11012 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				}
				else
				{
															#line 1977 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
					tr.clear(processClassKeyFor(workers[i].locality.processId().get()));
															#line 11018 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				}
															#line 1978 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				foundChange = true;
															#line 11022 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			}
		}
															#line 1982 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (foundChange)
															#line 11027 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 1983 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr.set(processClassChangeKey, deterministicRandom()->randomUniqueID().toString());
															#line 11031 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		}
															#line 1985 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		StrictFuture<Void> __when_expr_1 = tr.commit();
															#line 1985 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (static_cast<SetClassActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 11037 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
		static_cast<SetClassActor*>(this)->actor_wait_state = 2;
															#line 1985 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< SetClassActor, 1, Void >*>(static_cast<SetClassActor*>(this)));
															#line 11042 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1when1(std::vector<ProcessData> const& workers,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(workers, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(std::vector<ProcessData> && workers,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(std::move(workers), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<SetClassActor*>(this)->actor_wait_state > 0) static_cast<SetClassActor*>(this)->actor_wait_state = 0;
		static_cast<SetClassActor*>(this)->ActorCallback< SetClassActor, 0, std::vector<ProcessData> >::remove();

	}
	void a_callback_fire(ActorCallback< SetClassActor, 0, std::vector<ProcessData> >*,std::vector<ProcessData> const& value) 
	{
		fdb_probe_actor_enter("setClass", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("setClass", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< SetClassActor, 0, std::vector<ProcessData> >*,std::vector<ProcessData> && value) 
	{
		fdb_probe_actor_enter("setClass", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("setClass", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< SetClassActor, 0, std::vector<ProcessData> >*,Error err) 
	{
		fdb_probe_actor_enter("setClass", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("setClass", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1cont3(Void const& _,int loopDepth) 
	{
															#line 1986 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<SetClassActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~SetClassActorState(); static_cast<SetClassActor*>(this)->destroy(); return 0; }
															#line 11114 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<SetClassActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~SetClassActorState();
		static_cast<SetClassActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1cont3(Void && _,int loopDepth) 
	{
															#line 1986 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<SetClassActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~SetClassActorState(); static_cast<SetClassActor*>(this)->destroy(); return 0; }
															#line 11126 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<SetClassActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~SetClassActorState();
		static_cast<SetClassActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<SetClassActor*>(this)->actor_wait_state > 0) static_cast<SetClassActor*>(this)->actor_wait_state = 0;
		static_cast<SetClassActor*>(this)->ActorCallback< SetClassActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< SetClassActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("setClass", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("setClass", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< SetClassActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("setClass", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("setClass", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< SetClassActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("setClass", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("setClass", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<SetClassActor*>(this)->actor_wait_state > 0) static_cast<SetClassActor*>(this)->actor_wait_state = 0;
		static_cast<SetClassActor*>(this)->ActorCallback< SetClassActor, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< SetClassActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("setClass", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("setClass", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< SetClassActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("setClass", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("setClass", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< SetClassActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("setClass", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("setClass", reinterpret_cast<unsigned long>(this), 2);

	}
															#line 1958 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Database cx;
															#line 1958 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	AddressExclusion server;
															#line 1958 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	ProcessClass processClass;
															#line 1959 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Transaction tr;
															#line 11280 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
};
// This generated class is to be used only via setClass()
															#line 1958 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class SetClassActor final : public Actor<Void>, public ActorCallback< SetClassActor, 0, std::vector<ProcessData> >, public ActorCallback< SetClassActor, 1, Void >, public ActorCallback< SetClassActor, 2, Void >, public FastAllocated<SetClassActor>, public SetClassActorState<SetClassActor> {
															#line 11285 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
	using FastAllocated<SetClassActor>::operator new;
	using FastAllocated<SetClassActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< SetClassActor, 0, std::vector<ProcessData> >;
friend struct ActorCallback< SetClassActor, 1, Void >;
friend struct ActorCallback< SetClassActor, 2, Void >;
															#line 1958 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	SetClassActor(Database const& cx,AddressExclusion const& server,ProcessClass const& processClass) 
															#line 11298 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		 : Actor<Void>(),
		   SetClassActorState<SetClassActor>(cx, server, processClass)
	{
		fdb_probe_actor_enter("setClass", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("setClass");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("setClass", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< SetClassActor, 0, std::vector<ProcessData> >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< SetClassActor, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< SetClassActor, 2, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 1958 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
[[nodiscard]] Future<Void> setClass( Database const& cx, AddressExclusion const& server, ProcessClass const& processClass ) {
															#line 1958 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	return Future<Void>(new SetClassActor(cx, server, processClass));
															#line 11328 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
}

#line 1992 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"

															#line 11333 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via getExcludedServerList()
															#line 1993 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
template <class GetExcludedServerListActor>
															#line 1993 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class GetExcludedServerListActorState {
															#line 11340 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
															#line 1993 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	GetExcludedServerListActorState(Transaction* const& tr) 
															#line 1993 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
															#line 1993 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		 : tr(tr)
															#line 11347 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("getExcludedServerList", reinterpret_cast<unsigned long>(this));

	}
	~GetExcludedServerListActorState() 
	{
		fdb_probe_actor_destroy("getExcludedServerList", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 1994 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<RangeResult> __when_expr_0 = tr->getRange(excludedServersKeys, CLIENT_KNOBS->TOO_MANY);
															#line 1994 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<GetExcludedServerListActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 11364 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<GetExcludedServerListActor*>(this)->actor_wait_state = 1;
															#line 1994 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< GetExcludedServerListActor, 0, RangeResult >*>(static_cast<GetExcludedServerListActor*>(this)));
															#line 11369 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~GetExcludedServerListActorState();
		static_cast<GetExcludedServerListActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 1995 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		ASSERT(!r.more && r.size() < CLIENT_KNOBS->TOO_MANY);
															#line 1997 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		std::vector<AddressExclusion> exclusions;
															#line 1998 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		for(auto i = r.begin();i != r.end();++i) {
															#line 1999 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			auto a = decodeExcludedServersKey(i->key);
															#line 2000 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (a.isValid())
															#line 11400 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 2001 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				exclusions.push_back(a);
															#line 11404 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			}
		}
															#line 2003 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		uniquify(exclusions);
															#line 2004 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<GetExcludedServerListActor*>(this)->SAV<std::vector<AddressExclusion>>::futures) { (void)(exclusions); this->~GetExcludedServerListActorState(); static_cast<GetExcludedServerListActor*>(this)->destroy(); return 0; }
															#line 11411 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<GetExcludedServerListActor*>(this)->SAV< std::vector<AddressExclusion> >::value()) std::vector<AddressExclusion>(exclusions);
		this->~GetExcludedServerListActorState();
		static_cast<GetExcludedServerListActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1when1(RangeResult const& __r,int loopDepth) 
	{
															#line 1994 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		r = __r;
															#line 11423 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1when1(RangeResult && __r,int loopDepth) 
	{
		r = std::move(__r);
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<GetExcludedServerListActor*>(this)->actor_wait_state > 0) static_cast<GetExcludedServerListActor*>(this)->actor_wait_state = 0;
		static_cast<GetExcludedServerListActor*>(this)->ActorCallback< GetExcludedServerListActor, 0, RangeResult >::remove();

	}
	void a_callback_fire(ActorCallback< GetExcludedServerListActor, 0, RangeResult >*,RangeResult const& value) 
	{
		fdb_probe_actor_enter("getExcludedServerList", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getExcludedServerList", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< GetExcludedServerListActor, 0, RangeResult >*,RangeResult && value) 
	{
		fdb_probe_actor_enter("getExcludedServerList", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getExcludedServerList", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< GetExcludedServerListActor, 0, RangeResult >*,Error err) 
	{
		fdb_probe_actor_enter("getExcludedServerList", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getExcludedServerList", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 1993 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Transaction* tr;
															#line 1994 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	RangeResult r;
															#line 11490 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
};
// This generated class is to be used only via getExcludedServerList()
															#line 1993 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class GetExcludedServerListActor final : public Actor<std::vector<AddressExclusion>>, public ActorCallback< GetExcludedServerListActor, 0, RangeResult >, public FastAllocated<GetExcludedServerListActor>, public GetExcludedServerListActorState<GetExcludedServerListActor> {
															#line 11495 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
	using FastAllocated<GetExcludedServerListActor>::operator new;
	using FastAllocated<GetExcludedServerListActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<std::vector<AddressExclusion>>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< GetExcludedServerListActor, 0, RangeResult >;
															#line 1993 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	GetExcludedServerListActor(Transaction* const& tr) 
															#line 11506 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		 : Actor<std::vector<AddressExclusion>>(),
		   GetExcludedServerListActorState<GetExcludedServerListActor>(tr)
	{
		fdb_probe_actor_enter("getExcludedServerList", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("getExcludedServerList");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("getExcludedServerList", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< GetExcludedServerListActor, 0, RangeResult >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 1993 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
[[nodiscard]] Future<std::vector<AddressExclusion>> getExcludedServerList( Transaction* const& tr ) {
															#line 1993 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	return Future<std::vector<AddressExclusion>>(new GetExcludedServerListActor(tr));
															#line 11534 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
}

#line 2006 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"

															#line 11539 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via getExcludedFailedServerList()
															#line 2007 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
template <class GetExcludedFailedServerListActor>
															#line 2007 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class GetExcludedFailedServerListActorState {
															#line 11546 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
															#line 2007 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	GetExcludedFailedServerListActorState(Transaction* const& tr) 
															#line 2007 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
															#line 2007 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		 : tr(tr)
															#line 11553 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("getExcludedFailedServerList", reinterpret_cast<unsigned long>(this));

	}
	~GetExcludedFailedServerListActorState() 
	{
		fdb_probe_actor_destroy("getExcludedFailedServerList", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 2008 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<RangeResult> __when_expr_0 = tr->getRange(failedServersKeys, CLIENT_KNOBS->TOO_MANY);
															#line 2008 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<GetExcludedFailedServerListActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 11570 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<GetExcludedFailedServerListActor*>(this)->actor_wait_state = 1;
															#line 2008 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< GetExcludedFailedServerListActor, 0, RangeResult >*>(static_cast<GetExcludedFailedServerListActor*>(this)));
															#line 11575 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~GetExcludedFailedServerListActorState();
		static_cast<GetExcludedFailedServerListActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 2009 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		ASSERT(!r.more && r.size() < CLIENT_KNOBS->TOO_MANY);
															#line 2011 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		std::vector<AddressExclusion> exclusions;
															#line 2012 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		for(auto i = r.begin();i != r.end();++i) {
															#line 2013 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			auto a = decodeFailedServersKey(i->key);
															#line 2014 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (a.isValid())
															#line 11606 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 2015 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				exclusions.push_back(a);
															#line 11610 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			}
		}
															#line 2017 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		uniquify(exclusions);
															#line 2018 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<GetExcludedFailedServerListActor*>(this)->SAV<std::vector<AddressExclusion>>::futures) { (void)(exclusions); this->~GetExcludedFailedServerListActorState(); static_cast<GetExcludedFailedServerListActor*>(this)->destroy(); return 0; }
															#line 11617 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<GetExcludedFailedServerListActor*>(this)->SAV< std::vector<AddressExclusion> >::value()) std::vector<AddressExclusion>(exclusions);
		this->~GetExcludedFailedServerListActorState();
		static_cast<GetExcludedFailedServerListActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1when1(RangeResult const& __r,int loopDepth) 
	{
															#line 2008 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		r = __r;
															#line 11629 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1when1(RangeResult && __r,int loopDepth) 
	{
		r = std::move(__r);
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<GetExcludedFailedServerListActor*>(this)->actor_wait_state > 0) static_cast<GetExcludedFailedServerListActor*>(this)->actor_wait_state = 0;
		static_cast<GetExcludedFailedServerListActor*>(this)->ActorCallback< GetExcludedFailedServerListActor, 0, RangeResult >::remove();

	}
	void a_callback_fire(ActorCallback< GetExcludedFailedServerListActor, 0, RangeResult >*,RangeResult const& value) 
	{
		fdb_probe_actor_enter("getExcludedFailedServerList", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getExcludedFailedServerList", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< GetExcludedFailedServerListActor, 0, RangeResult >*,RangeResult && value) 
	{
		fdb_probe_actor_enter("getExcludedFailedServerList", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getExcludedFailedServerList", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< GetExcludedFailedServerListActor, 0, RangeResult >*,Error err) 
	{
		fdb_probe_actor_enter("getExcludedFailedServerList", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getExcludedFailedServerList", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 2007 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Transaction* tr;
															#line 2008 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	RangeResult r;
															#line 11696 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
};
// This generated class is to be used only via getExcludedFailedServerList()
															#line 2007 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class GetExcludedFailedServerListActor final : public Actor<std::vector<AddressExclusion>>, public ActorCallback< GetExcludedFailedServerListActor, 0, RangeResult >, public FastAllocated<GetExcludedFailedServerListActor>, public GetExcludedFailedServerListActorState<GetExcludedFailedServerListActor> {
															#line 11701 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
	using FastAllocated<GetExcludedFailedServerListActor>::operator new;
	using FastAllocated<GetExcludedFailedServerListActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<std::vector<AddressExclusion>>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< GetExcludedFailedServerListActor, 0, RangeResult >;
															#line 2007 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	GetExcludedFailedServerListActor(Transaction* const& tr) 
															#line 11712 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		 : Actor<std::vector<AddressExclusion>>(),
		   GetExcludedFailedServerListActorState<GetExcludedFailedServerListActor>(tr)
	{
		fdb_probe_actor_enter("getExcludedFailedServerList", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("getExcludedFailedServerList");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("getExcludedFailedServerList", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< GetExcludedFailedServerListActor, 0, RangeResult >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 2007 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
[[nodiscard]] Future<std::vector<AddressExclusion>> getExcludedFailedServerList( Transaction* const& tr ) {
															#line 2007 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	return Future<std::vector<AddressExclusion>>(new GetExcludedFailedServerListActor(tr));
															#line 11740 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
}

#line 2020 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"

															#line 11745 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via getAllExcludedServers()
															#line 2021 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
template <class GetAllExcludedServersActor>
															#line 2021 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class GetAllExcludedServersActorState {
															#line 11752 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
															#line 2021 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	GetAllExcludedServersActorState(Transaction* const& tr) 
															#line 2021 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
															#line 2021 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		 : tr(tr),
															#line 2022 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   exclusions()
															#line 11761 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("getAllExcludedServers", reinterpret_cast<unsigned long>(this));

	}
	~GetAllExcludedServersActorState() 
	{
		fdb_probe_actor_destroy("getAllExcludedServers", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 2023 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<std::vector<AddressExclusion>> __when_expr_0 = getExcludedServerList(tr);
															#line 2023 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<GetAllExcludedServersActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 11778 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<GetAllExcludedServersActor*>(this)->actor_wait_state = 1;
															#line 2023 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< GetAllExcludedServersActor, 0, std::vector<AddressExclusion> >*>(static_cast<GetAllExcludedServersActor*>(this)));
															#line 11783 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~GetAllExcludedServersActorState();
		static_cast<GetAllExcludedServersActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(std::vector<AddressExclusion> const& excludedServers,int loopDepth) 
	{
															#line 2024 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		exclusions.insert(exclusions.end(), excludedServers.begin(), excludedServers.end());
															#line 2025 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		StrictFuture<std::vector<AddressExclusion>> __when_expr_1 = getExcludedFailedServerList(tr);
															#line 2025 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (static_cast<GetAllExcludedServersActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 11810 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<GetAllExcludedServersActor*>(this)->actor_wait_state = 2;
															#line 2025 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< GetAllExcludedServersActor, 1, std::vector<AddressExclusion> >*>(static_cast<GetAllExcludedServersActor*>(this)));
															#line 11815 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(std::vector<AddressExclusion> && excludedServers,int loopDepth) 
	{
															#line 2024 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		exclusions.insert(exclusions.end(), excludedServers.begin(), excludedServers.end());
															#line 2025 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		StrictFuture<std::vector<AddressExclusion>> __when_expr_1 = getExcludedFailedServerList(tr);
															#line 2025 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (static_cast<GetAllExcludedServersActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 11828 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<GetAllExcludedServersActor*>(this)->actor_wait_state = 2;
															#line 2025 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< GetAllExcludedServersActor, 1, std::vector<AddressExclusion> >*>(static_cast<GetAllExcludedServersActor*>(this)));
															#line 11833 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1when1(std::vector<AddressExclusion> const& excludedServers,int loopDepth) 
	{
		loopDepth = a_body1cont1(excludedServers, loopDepth);

		return loopDepth;
	}
	int a_body1when1(std::vector<AddressExclusion> && excludedServers,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(excludedServers), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<GetAllExcludedServersActor*>(this)->actor_wait_state > 0) static_cast<GetAllExcludedServersActor*>(this)->actor_wait_state = 0;
		static_cast<GetAllExcludedServersActor*>(this)->ActorCallback< GetAllExcludedServersActor, 0, std::vector<AddressExclusion> >::remove();

	}
	void a_callback_fire(ActorCallback< GetAllExcludedServersActor, 0, std::vector<AddressExclusion> >*,std::vector<AddressExclusion> const& value) 
	{
		fdb_probe_actor_enter("getAllExcludedServers", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getAllExcludedServers", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< GetAllExcludedServersActor, 0, std::vector<AddressExclusion> >*,std::vector<AddressExclusion> && value) 
	{
		fdb_probe_actor_enter("getAllExcludedServers", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getAllExcludedServers", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< GetAllExcludedServersActor, 0, std::vector<AddressExclusion> >*,Error err) 
	{
		fdb_probe_actor_enter("getAllExcludedServers", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getAllExcludedServers", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont2(std::vector<AddressExclusion> const& excludedFailed,int loopDepth) 
	{
															#line 2026 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		exclusions.insert(exclusions.end(), excludedFailed.begin(), excludedFailed.end());
															#line 2027 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		uniquify(exclusions);
															#line 2028 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<GetAllExcludedServersActor*>(this)->SAV<std::vector<AddressExclusion>>::futures) { (void)(exclusions); this->~GetAllExcludedServersActorState(); static_cast<GetAllExcludedServersActor*>(this)->destroy(); return 0; }
															#line 11909 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<GetAllExcludedServersActor*>(this)->SAV< std::vector<AddressExclusion> >::value()) std::vector<AddressExclusion>(std::move(exclusions)); // state_var_RVO
		this->~GetAllExcludedServersActorState();
		static_cast<GetAllExcludedServersActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont2(std::vector<AddressExclusion> && excludedFailed,int loopDepth) 
	{
															#line 2026 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		exclusions.insert(exclusions.end(), excludedFailed.begin(), excludedFailed.end());
															#line 2027 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		uniquify(exclusions);
															#line 2028 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<GetAllExcludedServersActor*>(this)->SAV<std::vector<AddressExclusion>>::futures) { (void)(exclusions); this->~GetAllExcludedServersActorState(); static_cast<GetAllExcludedServersActor*>(this)->destroy(); return 0; }
															#line 11925 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<GetAllExcludedServersActor*>(this)->SAV< std::vector<AddressExclusion> >::value()) std::vector<AddressExclusion>(std::move(exclusions)); // state_var_RVO
		this->~GetAllExcludedServersActorState();
		static_cast<GetAllExcludedServersActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1when1(std::vector<AddressExclusion> const& excludedFailed,int loopDepth) 
	{
		loopDepth = a_body1cont2(excludedFailed, loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(std::vector<AddressExclusion> && excludedFailed,int loopDepth) 
	{
		loopDepth = a_body1cont2(std::move(excludedFailed), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<GetAllExcludedServersActor*>(this)->actor_wait_state > 0) static_cast<GetAllExcludedServersActor*>(this)->actor_wait_state = 0;
		static_cast<GetAllExcludedServersActor*>(this)->ActorCallback< GetAllExcludedServersActor, 1, std::vector<AddressExclusion> >::remove();

	}
	void a_callback_fire(ActorCallback< GetAllExcludedServersActor, 1, std::vector<AddressExclusion> >*,std::vector<AddressExclusion> const& value) 
	{
		fdb_probe_actor_enter("getAllExcludedServers", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getAllExcludedServers", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< GetAllExcludedServersActor, 1, std::vector<AddressExclusion> >*,std::vector<AddressExclusion> && value) 
	{
		fdb_probe_actor_enter("getAllExcludedServers", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getAllExcludedServers", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< GetAllExcludedServersActor, 1, std::vector<AddressExclusion> >*,Error err) 
	{
		fdb_probe_actor_enter("getAllExcludedServers", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getAllExcludedServers", reinterpret_cast<unsigned long>(this), 1);

	}
															#line 2021 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Transaction* tr;
															#line 2022 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	std::vector<AddressExclusion> exclusions;
															#line 12000 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
};
// This generated class is to be used only via getAllExcludedServers()
															#line 2021 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class GetAllExcludedServersActor final : public Actor<std::vector<AddressExclusion>>, public ActorCallback< GetAllExcludedServersActor, 0, std::vector<AddressExclusion> >, public ActorCallback< GetAllExcludedServersActor, 1, std::vector<AddressExclusion> >, public FastAllocated<GetAllExcludedServersActor>, public GetAllExcludedServersActorState<GetAllExcludedServersActor> {
															#line 12005 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
	using FastAllocated<GetAllExcludedServersActor>::operator new;
	using FastAllocated<GetAllExcludedServersActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<std::vector<AddressExclusion>>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< GetAllExcludedServersActor, 0, std::vector<AddressExclusion> >;
friend struct ActorCallback< GetAllExcludedServersActor, 1, std::vector<AddressExclusion> >;
															#line 2021 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	GetAllExcludedServersActor(Transaction* const& tr) 
															#line 12017 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		 : Actor<std::vector<AddressExclusion>>(),
		   GetAllExcludedServersActorState<GetAllExcludedServersActor>(tr)
	{
		fdb_probe_actor_enter("getAllExcludedServers", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("getAllExcludedServers");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("getAllExcludedServers", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< GetAllExcludedServersActor, 0, std::vector<AddressExclusion> >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< GetAllExcludedServersActor, 1, std::vector<AddressExclusion> >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 2021 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
[[nodiscard]] Future<std::vector<AddressExclusion>> getAllExcludedServers( Transaction* const& tr ) {
															#line 2021 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	return Future<std::vector<AddressExclusion>>(new GetAllExcludedServersActor(tr));
															#line 12046 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
}

#line 2030 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"

															#line 12051 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via getAllExcludedServers()
															#line 2031 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
template <class GetAllExcludedServersActor1>
															#line 2031 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class GetAllExcludedServersActor1State {
															#line 12058 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
															#line 2031 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	GetAllExcludedServersActor1State(Database const& cx) 
															#line 2031 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
															#line 2031 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		 : cx(cx),
															#line 2032 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   tr(cx)
															#line 12067 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("getAllExcludedServers", reinterpret_cast<unsigned long>(this));

	}
	~GetAllExcludedServersActor1State() 
	{
		fdb_probe_actor_destroy("getAllExcludedServers", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 2033 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			;
															#line 12082 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~GetAllExcludedServersActor1State();
		static_cast<GetAllExcludedServersActor1*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
		try {
															#line 2035 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr.setOption(FDBTransactionOptions::READ_SYSTEM_KEYS);
															#line 2036 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr.setOption(FDBTransactionOptions::PRIORITY_SYSTEM_IMMEDIATE);
															#line 2037 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr.setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 2038 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<std::vector<AddressExclusion>> __when_expr_0 = getAllExcludedServers(&tr);
															#line 2038 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<GetAllExcludedServersActor1*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 12121 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1loopBody1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
			static_cast<GetAllExcludedServersActor1*>(this)->actor_wait_state = 1;
															#line 2038 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< GetAllExcludedServersActor1, 0, std::vector<AddressExclusion> >*>(static_cast<GetAllExcludedServersActor1*>(this)));
															#line 12126 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 2041 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Void> __when_expr_1 = tr.onError(e);
															#line 2041 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<GetAllExcludedServersActor1*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 12150 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1Catch1when1(__when_expr_1.get(), loopDepth); };
			static_cast<GetAllExcludedServersActor1*>(this)->actor_wait_state = 2;
															#line 2041 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< GetAllExcludedServersActor1, 1, Void >*>(static_cast<GetAllExcludedServersActor1*>(this)));
															#line 12155 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(std::vector<AddressExclusion> const& exclusions,int loopDepth) 
	{
															#line 2039 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<GetAllExcludedServersActor1*>(this)->SAV<std::vector<AddressExclusion>>::futures) { (void)(exclusions); this->~GetAllExcludedServersActor1State(); static_cast<GetAllExcludedServersActor1*>(this)->destroy(); return 0; }
															#line 12170 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<GetAllExcludedServersActor1*>(this)->SAV< std::vector<AddressExclusion> >::value()) std::vector<AddressExclusion>(exclusions);
		this->~GetAllExcludedServersActor1State();
		static_cast<GetAllExcludedServersActor1*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2(std::vector<AddressExclusion> && exclusions,int loopDepth) 
	{
															#line 2039 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<GetAllExcludedServersActor1*>(this)->SAV<std::vector<AddressExclusion>>::futures) { (void)(exclusions); this->~GetAllExcludedServersActor1State(); static_cast<GetAllExcludedServersActor1*>(this)->destroy(); return 0; }
															#line 12182 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<GetAllExcludedServersActor1*>(this)->SAV< std::vector<AddressExclusion> >::value()) std::vector<AddressExclusion>(exclusions);
		this->~GetAllExcludedServersActor1State();
		static_cast<GetAllExcludedServersActor1*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1when1(std::vector<AddressExclusion> const& exclusions,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(exclusions, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(std::vector<AddressExclusion> && exclusions,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(std::move(exclusions), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<GetAllExcludedServersActor1*>(this)->actor_wait_state > 0) static_cast<GetAllExcludedServersActor1*>(this)->actor_wait_state = 0;
		static_cast<GetAllExcludedServersActor1*>(this)->ActorCallback< GetAllExcludedServersActor1, 0, std::vector<AddressExclusion> >::remove();

	}
	void a_callback_fire(ActorCallback< GetAllExcludedServersActor1, 0, std::vector<AddressExclusion> >*,std::vector<AddressExclusion> const& value) 
	{
		fdb_probe_actor_enter("getAllExcludedServers", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getAllExcludedServers", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< GetAllExcludedServersActor1, 0, std::vector<AddressExclusion> >*,std::vector<AddressExclusion> && value) 
	{
		fdb_probe_actor_enter("getAllExcludedServers", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getAllExcludedServers", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< GetAllExcludedServersActor1, 0, std::vector<AddressExclusion> >*,Error err) 
	{
		fdb_probe_actor_enter("getAllExcludedServers", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getAllExcludedServers", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<GetAllExcludedServersActor1*>(this)->actor_wait_state > 0) static_cast<GetAllExcludedServersActor1*>(this)->actor_wait_state = 0;
		static_cast<GetAllExcludedServersActor1*>(this)->ActorCallback< GetAllExcludedServersActor1, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetAllExcludedServersActor1, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getAllExcludedServers", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getAllExcludedServers", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< GetAllExcludedServersActor1, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getAllExcludedServers", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getAllExcludedServers", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< GetAllExcludedServersActor1, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getAllExcludedServers", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getAllExcludedServers", reinterpret_cast<unsigned long>(this), 1);

	}
															#line 2031 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Database cx;
															#line 2032 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Transaction tr;
															#line 12332 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
};
// This generated class is to be used only via getAllExcludedServers()
															#line 2031 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class GetAllExcludedServersActor1 final : public Actor<std::vector<AddressExclusion>>, public ActorCallback< GetAllExcludedServersActor1, 0, std::vector<AddressExclusion> >, public ActorCallback< GetAllExcludedServersActor1, 1, Void >, public FastAllocated<GetAllExcludedServersActor1>, public GetAllExcludedServersActor1State<GetAllExcludedServersActor1> {
															#line 12337 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
	using FastAllocated<GetAllExcludedServersActor1>::operator new;
	using FastAllocated<GetAllExcludedServersActor1>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<std::vector<AddressExclusion>>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< GetAllExcludedServersActor1, 0, std::vector<AddressExclusion> >;
friend struct ActorCallback< GetAllExcludedServersActor1, 1, Void >;
															#line 2031 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	GetAllExcludedServersActor1(Database const& cx) 
															#line 12349 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		 : Actor<std::vector<AddressExclusion>>(),
		   GetAllExcludedServersActor1State<GetAllExcludedServersActor1>(cx)
	{
		fdb_probe_actor_enter("getAllExcludedServers", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("getAllExcludedServers");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("getAllExcludedServers", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< GetAllExcludedServersActor1, 0, std::vector<AddressExclusion> >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< GetAllExcludedServersActor1, 1, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 2031 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
[[nodiscard]] Future<std::vector<AddressExclusion>> getAllExcludedServers( Database const& cx ) {
															#line 2031 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	return Future<std::vector<AddressExclusion>>(new GetAllExcludedServersActor1(cx));
															#line 12378 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
}

#line 2045 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"

															#line 12383 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via getExcludedLocalityList()
															#line 2046 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
template <class GetExcludedLocalityListActor>
															#line 2046 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class GetExcludedLocalityListActorState {
															#line 12390 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
															#line 2046 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	GetExcludedLocalityListActorState(Transaction* const& tr) 
															#line 2046 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
															#line 2046 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		 : tr(tr)
															#line 12397 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("getExcludedLocalityList", reinterpret_cast<unsigned long>(this));

	}
	~GetExcludedLocalityListActorState() 
	{
		fdb_probe_actor_destroy("getExcludedLocalityList", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 2047 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<RangeResult> __when_expr_0 = tr->getRange(excludedLocalityKeys, CLIENT_KNOBS->TOO_MANY);
															#line 2047 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<GetExcludedLocalityListActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 12414 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<GetExcludedLocalityListActor*>(this)->actor_wait_state = 1;
															#line 2047 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< GetExcludedLocalityListActor, 0, RangeResult >*>(static_cast<GetExcludedLocalityListActor*>(this)));
															#line 12419 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~GetExcludedLocalityListActorState();
		static_cast<GetExcludedLocalityListActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 2048 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		ASSERT(!r.more && r.size() < CLIENT_KNOBS->TOO_MANY);
															#line 2050 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		std::vector<std::string> excludedLocalities;
															#line 2051 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		for( const auto& i : r ) {
															#line 2052 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			auto a = decodeExcludedLocalityKey(i.key);
															#line 2053 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			excludedLocalities.push_back(a);
															#line 12450 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		}
															#line 2055 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		uniquify(excludedLocalities);
															#line 2056 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<GetExcludedLocalityListActor*>(this)->SAV<std::vector<std::string>>::futures) { (void)(excludedLocalities); this->~GetExcludedLocalityListActorState(); static_cast<GetExcludedLocalityListActor*>(this)->destroy(); return 0; }
															#line 12456 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<GetExcludedLocalityListActor*>(this)->SAV< std::vector<std::string> >::value()) std::vector<std::string>(excludedLocalities);
		this->~GetExcludedLocalityListActorState();
		static_cast<GetExcludedLocalityListActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1when1(RangeResult const& __r,int loopDepth) 
	{
															#line 2047 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		r = __r;
															#line 12468 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1when1(RangeResult && __r,int loopDepth) 
	{
		r = std::move(__r);
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<GetExcludedLocalityListActor*>(this)->actor_wait_state > 0) static_cast<GetExcludedLocalityListActor*>(this)->actor_wait_state = 0;
		static_cast<GetExcludedLocalityListActor*>(this)->ActorCallback< GetExcludedLocalityListActor, 0, RangeResult >::remove();

	}
	void a_callback_fire(ActorCallback< GetExcludedLocalityListActor, 0, RangeResult >*,RangeResult const& value) 
	{
		fdb_probe_actor_enter("getExcludedLocalityList", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getExcludedLocalityList", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< GetExcludedLocalityListActor, 0, RangeResult >*,RangeResult && value) 
	{
		fdb_probe_actor_enter("getExcludedLocalityList", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getExcludedLocalityList", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< GetExcludedLocalityListActor, 0, RangeResult >*,Error err) 
	{
		fdb_probe_actor_enter("getExcludedLocalityList", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getExcludedLocalityList", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 2046 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Transaction* tr;
															#line 2047 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	RangeResult r;
															#line 12535 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
};
// This generated class is to be used only via getExcludedLocalityList()
															#line 2046 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class GetExcludedLocalityListActor final : public Actor<std::vector<std::string>>, public ActorCallback< GetExcludedLocalityListActor, 0, RangeResult >, public FastAllocated<GetExcludedLocalityListActor>, public GetExcludedLocalityListActorState<GetExcludedLocalityListActor> {
															#line 12540 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
	using FastAllocated<GetExcludedLocalityListActor>::operator new;
	using FastAllocated<GetExcludedLocalityListActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<std::vector<std::string>>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< GetExcludedLocalityListActor, 0, RangeResult >;
															#line 2046 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	GetExcludedLocalityListActor(Transaction* const& tr) 
															#line 12551 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		 : Actor<std::vector<std::string>>(),
		   GetExcludedLocalityListActorState<GetExcludedLocalityListActor>(tr)
	{
		fdb_probe_actor_enter("getExcludedLocalityList", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("getExcludedLocalityList");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("getExcludedLocalityList", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< GetExcludedLocalityListActor, 0, RangeResult >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 2046 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
[[nodiscard]] Future<std::vector<std::string>> getExcludedLocalityList( Transaction* const& tr ) {
															#line 2046 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	return Future<std::vector<std::string>>(new GetExcludedLocalityListActor(tr));
															#line 12579 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
}

#line 2058 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"

															#line 12584 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via getExcludedFailedLocalityList()
															#line 2059 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
template <class GetExcludedFailedLocalityListActor>
															#line 2059 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class GetExcludedFailedLocalityListActorState {
															#line 12591 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
															#line 2059 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	GetExcludedFailedLocalityListActorState(Transaction* const& tr) 
															#line 2059 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
															#line 2059 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		 : tr(tr)
															#line 12598 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("getExcludedFailedLocalityList", reinterpret_cast<unsigned long>(this));

	}
	~GetExcludedFailedLocalityListActorState() 
	{
		fdb_probe_actor_destroy("getExcludedFailedLocalityList", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 2060 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<RangeResult> __when_expr_0 = tr->getRange(failedLocalityKeys, CLIENT_KNOBS->TOO_MANY);
															#line 2060 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<GetExcludedFailedLocalityListActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 12615 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<GetExcludedFailedLocalityListActor*>(this)->actor_wait_state = 1;
															#line 2060 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< GetExcludedFailedLocalityListActor, 0, RangeResult >*>(static_cast<GetExcludedFailedLocalityListActor*>(this)));
															#line 12620 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~GetExcludedFailedLocalityListActorState();
		static_cast<GetExcludedFailedLocalityListActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 2061 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		ASSERT(!r.more && r.size() < CLIENT_KNOBS->TOO_MANY);
															#line 2063 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		std::vector<std::string> excludedLocalities;
															#line 2064 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		for( const auto& i : r ) {
															#line 2065 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			auto a = decodeFailedLocalityKey(i.key);
															#line 2066 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			excludedLocalities.push_back(a);
															#line 12651 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		}
															#line 2068 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		uniquify(excludedLocalities);
															#line 2069 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<GetExcludedFailedLocalityListActor*>(this)->SAV<std::vector<std::string>>::futures) { (void)(excludedLocalities); this->~GetExcludedFailedLocalityListActorState(); static_cast<GetExcludedFailedLocalityListActor*>(this)->destroy(); return 0; }
															#line 12657 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<GetExcludedFailedLocalityListActor*>(this)->SAV< std::vector<std::string> >::value()) std::vector<std::string>(excludedLocalities);
		this->~GetExcludedFailedLocalityListActorState();
		static_cast<GetExcludedFailedLocalityListActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1when1(RangeResult const& __r,int loopDepth) 
	{
															#line 2060 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		r = __r;
															#line 12669 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1when1(RangeResult && __r,int loopDepth) 
	{
		r = std::move(__r);
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<GetExcludedFailedLocalityListActor*>(this)->actor_wait_state > 0) static_cast<GetExcludedFailedLocalityListActor*>(this)->actor_wait_state = 0;
		static_cast<GetExcludedFailedLocalityListActor*>(this)->ActorCallback< GetExcludedFailedLocalityListActor, 0, RangeResult >::remove();

	}
	void a_callback_fire(ActorCallback< GetExcludedFailedLocalityListActor, 0, RangeResult >*,RangeResult const& value) 
	{
		fdb_probe_actor_enter("getExcludedFailedLocalityList", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getExcludedFailedLocalityList", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< GetExcludedFailedLocalityListActor, 0, RangeResult >*,RangeResult && value) 
	{
		fdb_probe_actor_enter("getExcludedFailedLocalityList", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getExcludedFailedLocalityList", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< GetExcludedFailedLocalityListActor, 0, RangeResult >*,Error err) 
	{
		fdb_probe_actor_enter("getExcludedFailedLocalityList", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getExcludedFailedLocalityList", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 2059 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Transaction* tr;
															#line 2060 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	RangeResult r;
															#line 12736 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
};
// This generated class is to be used only via getExcludedFailedLocalityList()
															#line 2059 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class GetExcludedFailedLocalityListActor final : public Actor<std::vector<std::string>>, public ActorCallback< GetExcludedFailedLocalityListActor, 0, RangeResult >, public FastAllocated<GetExcludedFailedLocalityListActor>, public GetExcludedFailedLocalityListActorState<GetExcludedFailedLocalityListActor> {
															#line 12741 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
	using FastAllocated<GetExcludedFailedLocalityListActor>::operator new;
	using FastAllocated<GetExcludedFailedLocalityListActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<std::vector<std::string>>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< GetExcludedFailedLocalityListActor, 0, RangeResult >;
															#line 2059 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	GetExcludedFailedLocalityListActor(Transaction* const& tr) 
															#line 12752 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		 : Actor<std::vector<std::string>>(),
		   GetExcludedFailedLocalityListActorState<GetExcludedFailedLocalityListActor>(tr)
	{
		fdb_probe_actor_enter("getExcludedFailedLocalityList", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("getExcludedFailedLocalityList");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("getExcludedFailedLocalityList", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< GetExcludedFailedLocalityListActor, 0, RangeResult >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 2059 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
[[nodiscard]] Future<std::vector<std::string>> getExcludedFailedLocalityList( Transaction* const& tr ) {
															#line 2059 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	return Future<std::vector<std::string>>(new GetExcludedFailedLocalityListActor(tr));
															#line 12780 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
}

#line 2071 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"

															#line 12785 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via getAllExcludedLocalities()
															#line 2072 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
template <class GetAllExcludedLocalitiesActor>
															#line 2072 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class GetAllExcludedLocalitiesActorState {
															#line 12792 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
															#line 2072 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	GetAllExcludedLocalitiesActorState(Transaction* const& tr) 
															#line 2072 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
															#line 2072 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		 : tr(tr),
															#line 2073 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   exclusions()
															#line 12801 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("getAllExcludedLocalities", reinterpret_cast<unsigned long>(this));

	}
	~GetAllExcludedLocalitiesActorState() 
	{
		fdb_probe_actor_destroy("getAllExcludedLocalities", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 2074 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<std::vector<std::string>> __when_expr_0 = getExcludedLocalityList(tr);
															#line 2074 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<GetAllExcludedLocalitiesActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 12818 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<GetAllExcludedLocalitiesActor*>(this)->actor_wait_state = 1;
															#line 2074 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< GetAllExcludedLocalitiesActor, 0, std::vector<std::string> >*>(static_cast<GetAllExcludedLocalitiesActor*>(this)));
															#line 12823 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~GetAllExcludedLocalitiesActorState();
		static_cast<GetAllExcludedLocalitiesActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(std::vector<std::string> const& excludedLocalities,int loopDepth) 
	{
															#line 2075 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		exclusions.insert(exclusions.end(), excludedLocalities.begin(), excludedLocalities.end());
															#line 2076 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		StrictFuture<std::vector<std::string>> __when_expr_1 = getExcludedFailedLocalityList(tr);
															#line 2076 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (static_cast<GetAllExcludedLocalitiesActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 12850 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<GetAllExcludedLocalitiesActor*>(this)->actor_wait_state = 2;
															#line 2076 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< GetAllExcludedLocalitiesActor, 1, std::vector<std::string> >*>(static_cast<GetAllExcludedLocalitiesActor*>(this)));
															#line 12855 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(std::vector<std::string> && excludedLocalities,int loopDepth) 
	{
															#line 2075 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		exclusions.insert(exclusions.end(), excludedLocalities.begin(), excludedLocalities.end());
															#line 2076 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		StrictFuture<std::vector<std::string>> __when_expr_1 = getExcludedFailedLocalityList(tr);
															#line 2076 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (static_cast<GetAllExcludedLocalitiesActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 12868 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<GetAllExcludedLocalitiesActor*>(this)->actor_wait_state = 2;
															#line 2076 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< GetAllExcludedLocalitiesActor, 1, std::vector<std::string> >*>(static_cast<GetAllExcludedLocalitiesActor*>(this)));
															#line 12873 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1when1(std::vector<std::string> const& excludedLocalities,int loopDepth) 
	{
		loopDepth = a_body1cont1(excludedLocalities, loopDepth);

		return loopDepth;
	}
	int a_body1when1(std::vector<std::string> && excludedLocalities,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(excludedLocalities), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<GetAllExcludedLocalitiesActor*>(this)->actor_wait_state > 0) static_cast<GetAllExcludedLocalitiesActor*>(this)->actor_wait_state = 0;
		static_cast<GetAllExcludedLocalitiesActor*>(this)->ActorCallback< GetAllExcludedLocalitiesActor, 0, std::vector<std::string> >::remove();

	}
	void a_callback_fire(ActorCallback< GetAllExcludedLocalitiesActor, 0, std::vector<std::string> >*,std::vector<std::string> const& value) 
	{
		fdb_probe_actor_enter("getAllExcludedLocalities", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getAllExcludedLocalities", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< GetAllExcludedLocalitiesActor, 0, std::vector<std::string> >*,std::vector<std::string> && value) 
	{
		fdb_probe_actor_enter("getAllExcludedLocalities", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getAllExcludedLocalities", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< GetAllExcludedLocalitiesActor, 0, std::vector<std::string> >*,Error err) 
	{
		fdb_probe_actor_enter("getAllExcludedLocalities", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getAllExcludedLocalities", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont2(std::vector<std::string> const& failedLocalities,int loopDepth) 
	{
															#line 2077 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		exclusions.insert(exclusions.end(), failedLocalities.begin(), failedLocalities.end());
															#line 2078 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		uniquify(exclusions);
															#line 2079 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<GetAllExcludedLocalitiesActor*>(this)->SAV<std::vector<std::string>>::futures) { (void)(exclusions); this->~GetAllExcludedLocalitiesActorState(); static_cast<GetAllExcludedLocalitiesActor*>(this)->destroy(); return 0; }
															#line 12949 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<GetAllExcludedLocalitiesActor*>(this)->SAV< std::vector<std::string> >::value()) std::vector<std::string>(std::move(exclusions)); // state_var_RVO
		this->~GetAllExcludedLocalitiesActorState();
		static_cast<GetAllExcludedLocalitiesActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont2(std::vector<std::string> && failedLocalities,int loopDepth) 
	{
															#line 2077 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		exclusions.insert(exclusions.end(), failedLocalities.begin(), failedLocalities.end());
															#line 2078 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		uniquify(exclusions);
															#line 2079 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<GetAllExcludedLocalitiesActor*>(this)->SAV<std::vector<std::string>>::futures) { (void)(exclusions); this->~GetAllExcludedLocalitiesActorState(); static_cast<GetAllExcludedLocalitiesActor*>(this)->destroy(); return 0; }
															#line 12965 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<GetAllExcludedLocalitiesActor*>(this)->SAV< std::vector<std::string> >::value()) std::vector<std::string>(std::move(exclusions)); // state_var_RVO
		this->~GetAllExcludedLocalitiesActorState();
		static_cast<GetAllExcludedLocalitiesActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1when1(std::vector<std::string> const& failedLocalities,int loopDepth) 
	{
		loopDepth = a_body1cont2(failedLocalities, loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(std::vector<std::string> && failedLocalities,int loopDepth) 
	{
		loopDepth = a_body1cont2(std::move(failedLocalities), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<GetAllExcludedLocalitiesActor*>(this)->actor_wait_state > 0) static_cast<GetAllExcludedLocalitiesActor*>(this)->actor_wait_state = 0;
		static_cast<GetAllExcludedLocalitiesActor*>(this)->ActorCallback< GetAllExcludedLocalitiesActor, 1, std::vector<std::string> >::remove();

	}
	void a_callback_fire(ActorCallback< GetAllExcludedLocalitiesActor, 1, std::vector<std::string> >*,std::vector<std::string> const& value) 
	{
		fdb_probe_actor_enter("getAllExcludedLocalities", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getAllExcludedLocalities", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< GetAllExcludedLocalitiesActor, 1, std::vector<std::string> >*,std::vector<std::string> && value) 
	{
		fdb_probe_actor_enter("getAllExcludedLocalities", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getAllExcludedLocalities", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< GetAllExcludedLocalitiesActor, 1, std::vector<std::string> >*,Error err) 
	{
		fdb_probe_actor_enter("getAllExcludedLocalities", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getAllExcludedLocalities", reinterpret_cast<unsigned long>(this), 1);

	}
															#line 2072 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Transaction* tr;
															#line 2073 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	std::vector<std::string> exclusions;
															#line 13040 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
};
// This generated class is to be used only via getAllExcludedLocalities()
															#line 2072 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class GetAllExcludedLocalitiesActor final : public Actor<std::vector<std::string>>, public ActorCallback< GetAllExcludedLocalitiesActor, 0, std::vector<std::string> >, public ActorCallback< GetAllExcludedLocalitiesActor, 1, std::vector<std::string> >, public FastAllocated<GetAllExcludedLocalitiesActor>, public GetAllExcludedLocalitiesActorState<GetAllExcludedLocalitiesActor> {
															#line 13045 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
	using FastAllocated<GetAllExcludedLocalitiesActor>::operator new;
	using FastAllocated<GetAllExcludedLocalitiesActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<std::vector<std::string>>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< GetAllExcludedLocalitiesActor, 0, std::vector<std::string> >;
friend struct ActorCallback< GetAllExcludedLocalitiesActor, 1, std::vector<std::string> >;
															#line 2072 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	GetAllExcludedLocalitiesActor(Transaction* const& tr) 
															#line 13057 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		 : Actor<std::vector<std::string>>(),
		   GetAllExcludedLocalitiesActorState<GetAllExcludedLocalitiesActor>(tr)
	{
		fdb_probe_actor_enter("getAllExcludedLocalities", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("getAllExcludedLocalities");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("getAllExcludedLocalities", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< GetAllExcludedLocalitiesActor, 0, std::vector<std::string> >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< GetAllExcludedLocalitiesActor, 1, std::vector<std::string> >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 2072 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
[[nodiscard]] Future<std::vector<std::string>> getAllExcludedLocalities( Transaction* const& tr ) {
															#line 2072 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	return Future<std::vector<std::string>>(new GetAllExcludedLocalitiesActor(tr));
															#line 13086 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
}

#line 2081 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"

// Get the list of excluded localities by reading the keys.
															#line 13092 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via getAllExcludedLocalities()
															#line 2083 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
template <class GetAllExcludedLocalitiesActor1>
															#line 2083 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class GetAllExcludedLocalitiesActor1State {
															#line 13099 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
															#line 2083 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	GetAllExcludedLocalitiesActor1State(Database const& cx) 
															#line 2083 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
															#line 2083 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		 : cx(cx),
															#line 2084 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   tr(cx)
															#line 13108 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("getAllExcludedLocalities", reinterpret_cast<unsigned long>(this));

	}
	~GetAllExcludedLocalitiesActor1State() 
	{
		fdb_probe_actor_destroy("getAllExcludedLocalities", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 2085 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			;
															#line 13123 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~GetAllExcludedLocalitiesActor1State();
		static_cast<GetAllExcludedLocalitiesActor1*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
		try {
															#line 2087 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr.setOption(FDBTransactionOptions::READ_SYSTEM_KEYS);
															#line 2088 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr.setOption(FDBTransactionOptions::PRIORITY_SYSTEM_IMMEDIATE);
															#line 2089 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr.setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 2090 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<std::vector<std::string>> __when_expr_0 = getAllExcludedLocalities(&tr);
															#line 2090 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<GetAllExcludedLocalitiesActor1*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 13162 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1loopBody1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
			static_cast<GetAllExcludedLocalitiesActor1*>(this)->actor_wait_state = 1;
															#line 2090 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< GetAllExcludedLocalitiesActor1, 0, std::vector<std::string> >*>(static_cast<GetAllExcludedLocalitiesActor1*>(this)));
															#line 13167 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 2093 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Void> __when_expr_1 = tr.onError(e);
															#line 2093 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<GetAllExcludedLocalitiesActor1*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 13191 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1Catch1when1(__when_expr_1.get(), loopDepth); };
			static_cast<GetAllExcludedLocalitiesActor1*>(this)->actor_wait_state = 2;
															#line 2093 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< GetAllExcludedLocalitiesActor1, 1, Void >*>(static_cast<GetAllExcludedLocalitiesActor1*>(this)));
															#line 13196 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(std::vector<std::string> const& exclusions,int loopDepth) 
	{
															#line 2091 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<GetAllExcludedLocalitiesActor1*>(this)->SAV<std::vector<std::string>>::futures) { (void)(exclusions); this->~GetAllExcludedLocalitiesActor1State(); static_cast<GetAllExcludedLocalitiesActor1*>(this)->destroy(); return 0; }
															#line 13211 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<GetAllExcludedLocalitiesActor1*>(this)->SAV< std::vector<std::string> >::value()) std::vector<std::string>(exclusions);
		this->~GetAllExcludedLocalitiesActor1State();
		static_cast<GetAllExcludedLocalitiesActor1*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2(std::vector<std::string> && exclusions,int loopDepth) 
	{
															#line 2091 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<GetAllExcludedLocalitiesActor1*>(this)->SAV<std::vector<std::string>>::futures) { (void)(exclusions); this->~GetAllExcludedLocalitiesActor1State(); static_cast<GetAllExcludedLocalitiesActor1*>(this)->destroy(); return 0; }
															#line 13223 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<GetAllExcludedLocalitiesActor1*>(this)->SAV< std::vector<std::string> >::value()) std::vector<std::string>(exclusions);
		this->~GetAllExcludedLocalitiesActor1State();
		static_cast<GetAllExcludedLocalitiesActor1*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1when1(std::vector<std::string> const& exclusions,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(exclusions, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(std::vector<std::string> && exclusions,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(std::move(exclusions), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<GetAllExcludedLocalitiesActor1*>(this)->actor_wait_state > 0) static_cast<GetAllExcludedLocalitiesActor1*>(this)->actor_wait_state = 0;
		static_cast<GetAllExcludedLocalitiesActor1*>(this)->ActorCallback< GetAllExcludedLocalitiesActor1, 0, std::vector<std::string> >::remove();

	}
	void a_callback_fire(ActorCallback< GetAllExcludedLocalitiesActor1, 0, std::vector<std::string> >*,std::vector<std::string> const& value) 
	{
		fdb_probe_actor_enter("getAllExcludedLocalities", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getAllExcludedLocalities", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< GetAllExcludedLocalitiesActor1, 0, std::vector<std::string> >*,std::vector<std::string> && value) 
	{
		fdb_probe_actor_enter("getAllExcludedLocalities", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getAllExcludedLocalities", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< GetAllExcludedLocalitiesActor1, 0, std::vector<std::string> >*,Error err) 
	{
		fdb_probe_actor_enter("getAllExcludedLocalities", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getAllExcludedLocalities", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<GetAllExcludedLocalitiesActor1*>(this)->actor_wait_state > 0) static_cast<GetAllExcludedLocalitiesActor1*>(this)->actor_wait_state = 0;
		static_cast<GetAllExcludedLocalitiesActor1*>(this)->ActorCallback< GetAllExcludedLocalitiesActor1, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetAllExcludedLocalitiesActor1, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getAllExcludedLocalities", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getAllExcludedLocalities", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< GetAllExcludedLocalitiesActor1, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getAllExcludedLocalities", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getAllExcludedLocalities", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< GetAllExcludedLocalitiesActor1, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getAllExcludedLocalities", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getAllExcludedLocalities", reinterpret_cast<unsigned long>(this), 1);

	}
															#line 2083 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Database cx;
															#line 2084 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Transaction tr;
															#line 13373 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
};
// This generated class is to be used only via getAllExcludedLocalities()
															#line 2083 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class GetAllExcludedLocalitiesActor1 final : public Actor<std::vector<std::string>>, public ActorCallback< GetAllExcludedLocalitiesActor1, 0, std::vector<std::string> >, public ActorCallback< GetAllExcludedLocalitiesActor1, 1, Void >, public FastAllocated<GetAllExcludedLocalitiesActor1>, public GetAllExcludedLocalitiesActor1State<GetAllExcludedLocalitiesActor1> {
															#line 13378 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
	using FastAllocated<GetAllExcludedLocalitiesActor1>::operator new;
	using FastAllocated<GetAllExcludedLocalitiesActor1>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<std::vector<std::string>>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< GetAllExcludedLocalitiesActor1, 0, std::vector<std::string> >;
friend struct ActorCallback< GetAllExcludedLocalitiesActor1, 1, Void >;
															#line 2083 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	GetAllExcludedLocalitiesActor1(Database const& cx) 
															#line 13390 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		 : Actor<std::vector<std::string>>(),
		   GetAllExcludedLocalitiesActor1State<GetAllExcludedLocalitiesActor1>(cx)
	{
		fdb_probe_actor_enter("getAllExcludedLocalities", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("getAllExcludedLocalities");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("getAllExcludedLocalities", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< GetAllExcludedLocalitiesActor1, 0, std::vector<std::string> >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< GetAllExcludedLocalitiesActor1, 1, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 2083 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
[[nodiscard]] Future<std::vector<std::string>> getAllExcludedLocalities( Database const& cx ) {
															#line 2083 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	return Future<std::vector<std::string>>(new GetAllExcludedLocalitiesActor1(cx));
															#line 13419 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
}

#line 2097 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"

// Decodes the locality string to a pair of locality prefix and its value.
// The prefix could be dcid, processid, machineid, processid.
std::pair<std::string, std::string> decodeLocality(const std::string& locality) {
	StringRef localityRef((const uint8_t*)(locality.c_str()), locality.size());

	std::string localityKeyValue = localityRef.removePrefix(LocalityData::ExcludeLocalityPrefix).toString();
	int split = localityKeyValue.find(':');
	if (split != std::string::npos) {
		return std::make_pair(localityKeyValue.substr(0, split), localityKeyValue.substr(split + 1));
	}

	return std::make_pair("", "");
}

// Returns the list of IPAddresses of the workers that match the given locality.
// Example: locality="dcid:primary" returns all the ip addresses of the workers in the primary dc.
std::set<AddressExclusion> getAddressesByLocality(const std::vector<ProcessData>& workers,
                                                  const std::string& locality) {
	std::pair<std::string, std::string> localityKeyValue = decodeLocality(locality);

	std::set<AddressExclusion> localityAddresses;
	for (int i = 0; i < workers.size(); i++) {
		if (workers[i].locality.isPresent(localityKeyValue.first) &&
		    workers[i].locality.get(localityKeyValue.first) == localityKeyValue.second) {
			localityAddresses.insert(AddressExclusion(workers[i].address.ip, workers[i].address.port));
		}
	}

	return localityAddresses;
}

															#line 13455 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via printHealthyZone()
															#line 2129 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
template <class PrintHealthyZoneActor>
															#line 2129 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class PrintHealthyZoneActorState {
															#line 13462 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
															#line 2129 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	PrintHealthyZoneActorState(Database const& cx) 
															#line 2129 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
															#line 2129 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		 : cx(cx),
															#line 2130 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   tr(cx)
															#line 13471 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("printHealthyZone", reinterpret_cast<unsigned long>(this));

	}
	~PrintHealthyZoneActorState() 
	{
		fdb_probe_actor_destroy("printHealthyZone", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 2131 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			;
															#line 13486 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~PrintHealthyZoneActorState();
		static_cast<PrintHealthyZoneActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
		try {
															#line 2133 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr.setOption(FDBTransactionOptions::READ_LOCK_AWARE);
															#line 2134 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr.setOption(FDBTransactionOptions::READ_SYSTEM_KEYS);
															#line 2135 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Optional<Value>> __when_expr_0 = tr.get(healthyZoneKey);
															#line 2135 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<PrintHealthyZoneActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 13523 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1loopBody1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
			static_cast<PrintHealthyZoneActor*>(this)->actor_wait_state = 1;
															#line 2135 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< PrintHealthyZoneActor, 0, Optional<Value> >*>(static_cast<PrintHealthyZoneActor*>(this)));
															#line 13528 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 2149 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Void> __when_expr_1 = tr.onError(e);
															#line 2149 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<PrintHealthyZoneActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 13552 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1Catch1when1(__when_expr_1.get(), loopDepth); };
			static_cast<PrintHealthyZoneActor*>(this)->actor_wait_state = 2;
															#line 2149 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< PrintHealthyZoneActor, 1, Void >*>(static_cast<PrintHealthyZoneActor*>(this)));
															#line 13557 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(Optional<Value> const& val,int loopDepth) 
	{
															#line 2136 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (val.present() && decodeHealthyZoneValue(val.get()).first == ignoreSSFailuresZoneString)
															#line 13572 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 2137 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			printf("Data distribution has been disabled for all storage server failures in this cluster and thus " "maintenance mode is not active.\n");
															#line 13576 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		}
		else
		{
															#line 2139 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (!val.present() || decodeHealthyZoneValue(val.get()).second <= tr.getReadVersion().get())
															#line 13582 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 2140 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				printf("No ongoing maintenance.\n");
															#line 13586 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			}
			else
			{
															#line 2142 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				auto healthyZone = decodeHealthyZoneValue(val.get());
															#line 2143 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				fmt::print("Maintenance for zone {0} will continue for {1} seconds.\n", healthyZone.first.toString(), (healthyZone.second - tr.getReadVersion().get()) / CLIENT_KNOBS->CORE_VERSIONSPERSECOND);
															#line 13594 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			}
		}
															#line 2147 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<PrintHealthyZoneActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~PrintHealthyZoneActorState(); static_cast<PrintHealthyZoneActor*>(this)->destroy(); return 0; }
															#line 13599 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<PrintHealthyZoneActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~PrintHealthyZoneActorState();
		static_cast<PrintHealthyZoneActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2(Optional<Value> && val,int loopDepth) 
	{
															#line 2136 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (val.present() && decodeHealthyZoneValue(val.get()).first == ignoreSSFailuresZoneString)
															#line 13611 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 2137 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			printf("Data distribution has been disabled for all storage server failures in this cluster and thus " "maintenance mode is not active.\n");
															#line 13615 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		}
		else
		{
															#line 2139 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (!val.present() || decodeHealthyZoneValue(val.get()).second <= tr.getReadVersion().get())
															#line 13621 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 2140 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				printf("No ongoing maintenance.\n");
															#line 13625 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			}
			else
			{
															#line 2142 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				auto healthyZone = decodeHealthyZoneValue(val.get());
															#line 2143 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				fmt::print("Maintenance for zone {0} will continue for {1} seconds.\n", healthyZone.first.toString(), (healthyZone.second - tr.getReadVersion().get()) / CLIENT_KNOBS->CORE_VERSIONSPERSECOND);
															#line 13633 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			}
		}
															#line 2147 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<PrintHealthyZoneActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~PrintHealthyZoneActorState(); static_cast<PrintHealthyZoneActor*>(this)->destroy(); return 0; }
															#line 13638 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<PrintHealthyZoneActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~PrintHealthyZoneActorState();
		static_cast<PrintHealthyZoneActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1when1(Optional<Value> const& val,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(val, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Optional<Value> && val,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(std::move(val), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<PrintHealthyZoneActor*>(this)->actor_wait_state > 0) static_cast<PrintHealthyZoneActor*>(this)->actor_wait_state = 0;
		static_cast<PrintHealthyZoneActor*>(this)->ActorCallback< PrintHealthyZoneActor, 0, Optional<Value> >::remove();

	}
	void a_callback_fire(ActorCallback< PrintHealthyZoneActor, 0, Optional<Value> >*,Optional<Value> const& value) 
	{
		fdb_probe_actor_enter("printHealthyZone", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("printHealthyZone", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< PrintHealthyZoneActor, 0, Optional<Value> >*,Optional<Value> && value) 
	{
		fdb_probe_actor_enter("printHealthyZone", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("printHealthyZone", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< PrintHealthyZoneActor, 0, Optional<Value> >*,Error err) 
	{
		fdb_probe_actor_enter("printHealthyZone", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("printHealthyZone", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<PrintHealthyZoneActor*>(this)->actor_wait_state > 0) static_cast<PrintHealthyZoneActor*>(this)->actor_wait_state = 0;
		static_cast<PrintHealthyZoneActor*>(this)->ActorCallback< PrintHealthyZoneActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< PrintHealthyZoneActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("printHealthyZone", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("printHealthyZone", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< PrintHealthyZoneActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("printHealthyZone", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("printHealthyZone", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< PrintHealthyZoneActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("printHealthyZone", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("printHealthyZone", reinterpret_cast<unsigned long>(this), 1);

	}
															#line 2129 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Database cx;
															#line 2130 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Transaction tr;
															#line 13788 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
};
// This generated class is to be used only via printHealthyZone()
															#line 2129 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class PrintHealthyZoneActor final : public Actor<Void>, public ActorCallback< PrintHealthyZoneActor, 0, Optional<Value> >, public ActorCallback< PrintHealthyZoneActor, 1, Void >, public FastAllocated<PrintHealthyZoneActor>, public PrintHealthyZoneActorState<PrintHealthyZoneActor> {
															#line 13793 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
	using FastAllocated<PrintHealthyZoneActor>::operator new;
	using FastAllocated<PrintHealthyZoneActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< PrintHealthyZoneActor, 0, Optional<Value> >;
friend struct ActorCallback< PrintHealthyZoneActor, 1, Void >;
															#line 2129 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	PrintHealthyZoneActor(Database const& cx) 
															#line 13805 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		 : Actor<Void>(),
		   PrintHealthyZoneActorState<PrintHealthyZoneActor>(cx)
	{
		fdb_probe_actor_enter("printHealthyZone", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("printHealthyZone");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("printHealthyZone", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< PrintHealthyZoneActor, 0, Optional<Value> >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< PrintHealthyZoneActor, 1, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 2129 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
[[nodiscard]] Future<Void> printHealthyZone( Database const& cx ) {
															#line 2129 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	return Future<Void>(new PrintHealthyZoneActor(cx));
															#line 13834 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
}

#line 2153 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"

															#line 13839 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via clearHealthyZone()
															#line 2154 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
template <class ClearHealthyZoneActor>
															#line 2154 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class ClearHealthyZoneActorState {
															#line 13846 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
															#line 2154 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	ClearHealthyZoneActorState(Database const& cx,bool const& printWarning,bool const& clearSSFailureZoneString) 
															#line 2154 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
															#line 2154 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		 : cx(cx),
															#line 2154 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   printWarning(printWarning),
															#line 2154 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   clearSSFailureZoneString(clearSSFailureZoneString),
															#line 2155 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   tr(cx)
															#line 13859 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("clearHealthyZone", reinterpret_cast<unsigned long>(this));

	}
	~ClearHealthyZoneActorState() 
	{
		fdb_probe_actor_destroy("clearHealthyZone", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 2156 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			TraceEvent("ClearHealthyZone").detail("ClearSSFailureZoneString", clearSSFailureZoneString);
															#line 2157 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			;
															#line 13876 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~ClearHealthyZoneActorState();
		static_cast<ClearHealthyZoneActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
		try {
															#line 2159 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr.setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 2160 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr.setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 2161 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr.setOption(FDBTransactionOptions::PRIORITY_SYSTEM_IMMEDIATE);
															#line 2162 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Optional<Value>> __when_expr_0 = tr.get(healthyZoneKey);
															#line 2162 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<ClearHealthyZoneActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 13915 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1loopBody1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
			static_cast<ClearHealthyZoneActor*>(this)->actor_wait_state = 1;
															#line 2162 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< ClearHealthyZoneActor, 0, Optional<Value> >*>(static_cast<ClearHealthyZoneActor*>(this)));
															#line 13920 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 2176 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Void> __when_expr_2 = tr.onError(e);
															#line 2176 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<ClearHealthyZoneActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 13944 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1Catch1when1(__when_expr_2.get(), loopDepth); };
			static_cast<ClearHealthyZoneActor*>(this)->actor_wait_state = 3;
															#line 2176 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< ClearHealthyZoneActor, 2, Void >*>(static_cast<ClearHealthyZoneActor*>(this)));
															#line 13949 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(Optional<Value> const& val,int loopDepth) 
	{
															#line 2163 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!clearSSFailureZoneString && val.present() && decodeHealthyZoneValue(val.get()).first == ignoreSSFailuresZoneString)
															#line 13964 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 2165 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (printWarning)
															#line 13968 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 2166 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				printf("ERROR: Maintenance mode cannot be used while data distribution is disabled for storage " "server failures. Use 'datadistribution on' to reenable data distribution.\n");
															#line 13972 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			}
															#line 2169 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (!static_cast<ClearHealthyZoneActor*>(this)->SAV<bool>::futures) { (void)(false); this->~ClearHealthyZoneActorState(); static_cast<ClearHealthyZoneActor*>(this)->destroy(); return 0; }
															#line 13976 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			new (&static_cast<ClearHealthyZoneActor*>(this)->SAV< bool >::value()) bool(false);
			this->~ClearHealthyZoneActorState();
			static_cast<ClearHealthyZoneActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 2172 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		tr.clear(healthyZoneKey);
															#line 2173 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		StrictFuture<Void> __when_expr_1 = tr.commit();
															#line 2173 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (static_cast<ClearHealthyZoneActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 13988 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
		static_cast<ClearHealthyZoneActor*>(this)->actor_wait_state = 2;
															#line 2173 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< ClearHealthyZoneActor, 1, Void >*>(static_cast<ClearHealthyZoneActor*>(this)));
															#line 13993 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2(Optional<Value> && val,int loopDepth) 
	{
															#line 2163 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!clearSSFailureZoneString && val.present() && decodeHealthyZoneValue(val.get()).first == ignoreSSFailuresZoneString)
															#line 14002 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 2165 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (printWarning)
															#line 14006 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 2166 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				printf("ERROR: Maintenance mode cannot be used while data distribution is disabled for storage " "server failures. Use 'datadistribution on' to reenable data distribution.\n");
															#line 14010 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			}
															#line 2169 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (!static_cast<ClearHealthyZoneActor*>(this)->SAV<bool>::futures) { (void)(false); this->~ClearHealthyZoneActorState(); static_cast<ClearHealthyZoneActor*>(this)->destroy(); return 0; }
															#line 14014 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			new (&static_cast<ClearHealthyZoneActor*>(this)->SAV< bool >::value()) bool(false);
			this->~ClearHealthyZoneActorState();
			static_cast<ClearHealthyZoneActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 2172 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		tr.clear(healthyZoneKey);
															#line 2173 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		StrictFuture<Void> __when_expr_1 = tr.commit();
															#line 2173 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (static_cast<ClearHealthyZoneActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 14026 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
		static_cast<ClearHealthyZoneActor*>(this)->actor_wait_state = 2;
															#line 2173 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< ClearHealthyZoneActor, 1, Void >*>(static_cast<ClearHealthyZoneActor*>(this)));
															#line 14031 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1when1(Optional<Value> const& val,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(val, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Optional<Value> && val,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(std::move(val), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<ClearHealthyZoneActor*>(this)->actor_wait_state > 0) static_cast<ClearHealthyZoneActor*>(this)->actor_wait_state = 0;
		static_cast<ClearHealthyZoneActor*>(this)->ActorCallback< ClearHealthyZoneActor, 0, Optional<Value> >::remove();

	}
	void a_callback_fire(ActorCallback< ClearHealthyZoneActor, 0, Optional<Value> >*,Optional<Value> const& value) 
	{
		fdb_probe_actor_enter("clearHealthyZone", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("clearHealthyZone", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< ClearHealthyZoneActor, 0, Optional<Value> >*,Optional<Value> && value) 
	{
		fdb_probe_actor_enter("clearHealthyZone", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("clearHealthyZone", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< ClearHealthyZoneActor, 0, Optional<Value> >*,Error err) 
	{
		fdb_probe_actor_enter("clearHealthyZone", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("clearHealthyZone", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1cont3(Void const& _,int loopDepth) 
	{
															#line 2174 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<ClearHealthyZoneActor*>(this)->SAV<bool>::futures) { (void)(true); this->~ClearHealthyZoneActorState(); static_cast<ClearHealthyZoneActor*>(this)->destroy(); return 0; }
															#line 14103 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<ClearHealthyZoneActor*>(this)->SAV< bool >::value()) bool(true);
		this->~ClearHealthyZoneActorState();
		static_cast<ClearHealthyZoneActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1cont3(Void && _,int loopDepth) 
	{
															#line 2174 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<ClearHealthyZoneActor*>(this)->SAV<bool>::futures) { (void)(true); this->~ClearHealthyZoneActorState(); static_cast<ClearHealthyZoneActor*>(this)->destroy(); return 0; }
															#line 14115 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<ClearHealthyZoneActor*>(this)->SAV< bool >::value()) bool(true);
		this->~ClearHealthyZoneActorState();
		static_cast<ClearHealthyZoneActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<ClearHealthyZoneActor*>(this)->actor_wait_state > 0) static_cast<ClearHealthyZoneActor*>(this)->actor_wait_state = 0;
		static_cast<ClearHealthyZoneActor*>(this)->ActorCallback< ClearHealthyZoneActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< ClearHealthyZoneActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("clearHealthyZone", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("clearHealthyZone", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< ClearHealthyZoneActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("clearHealthyZone", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("clearHealthyZone", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< ClearHealthyZoneActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("clearHealthyZone", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("clearHealthyZone", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<ClearHealthyZoneActor*>(this)->actor_wait_state > 0) static_cast<ClearHealthyZoneActor*>(this)->actor_wait_state = 0;
		static_cast<ClearHealthyZoneActor*>(this)->ActorCallback< ClearHealthyZoneActor, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< ClearHealthyZoneActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("clearHealthyZone", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("clearHealthyZone", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< ClearHealthyZoneActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("clearHealthyZone", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("clearHealthyZone", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< ClearHealthyZoneActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("clearHealthyZone", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("clearHealthyZone", reinterpret_cast<unsigned long>(this), 2);

	}
															#line 2154 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Database cx;
															#line 2154 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	bool printWarning;
															#line 2154 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	bool clearSSFailureZoneString;
															#line 2155 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Transaction tr;
															#line 14269 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
};
// This generated class is to be used only via clearHealthyZone()
															#line 2154 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class ClearHealthyZoneActor final : public Actor<bool>, public ActorCallback< ClearHealthyZoneActor, 0, Optional<Value> >, public ActorCallback< ClearHealthyZoneActor, 1, Void >, public ActorCallback< ClearHealthyZoneActor, 2, Void >, public FastAllocated<ClearHealthyZoneActor>, public ClearHealthyZoneActorState<ClearHealthyZoneActor> {
															#line 14274 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
	using FastAllocated<ClearHealthyZoneActor>::operator new;
	using FastAllocated<ClearHealthyZoneActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<bool>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< ClearHealthyZoneActor, 0, Optional<Value> >;
friend struct ActorCallback< ClearHealthyZoneActor, 1, Void >;
friend struct ActorCallback< ClearHealthyZoneActor, 2, Void >;
															#line 2154 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	ClearHealthyZoneActor(Database const& cx,bool const& printWarning,bool const& clearSSFailureZoneString) 
															#line 14287 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		 : Actor<bool>(),
		   ClearHealthyZoneActorState<ClearHealthyZoneActor>(cx, printWarning, clearSSFailureZoneString)
	{
		fdb_probe_actor_enter("clearHealthyZone", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("clearHealthyZone");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("clearHealthyZone", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< ClearHealthyZoneActor, 0, Optional<Value> >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< ClearHealthyZoneActor, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< ClearHealthyZoneActor, 2, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 2154 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
[[nodiscard]] Future<bool> clearHealthyZone( Database const& cx, bool const& printWarning, bool const& clearSSFailureZoneString ) {
															#line 2154 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	return Future<bool>(new ClearHealthyZoneActor(cx, printWarning, clearSSFailureZoneString));
															#line 14317 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
}

#line 2180 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"

															#line 14322 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via setHealthyZone()
															#line 2181 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
template <class SetHealthyZoneActor>
															#line 2181 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class SetHealthyZoneActorState {
															#line 14329 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
															#line 2181 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	SetHealthyZoneActorState(Database const& cx,StringRef const& zoneId,double const& seconds,bool const& printWarning) 
															#line 2181 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
															#line 2181 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		 : cx(cx),
															#line 2181 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   zoneId(zoneId),
															#line 2181 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   seconds(seconds),
															#line 2181 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   printWarning(printWarning),
															#line 2182 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   tr(cx)
															#line 14344 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("setHealthyZone", reinterpret_cast<unsigned long>(this));

	}
	~SetHealthyZoneActorState() 
	{
		fdb_probe_actor_destroy("setHealthyZone", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 2183 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			TraceEvent("SetHealthyZone").detail("Zone", zoneId).detail("DurationSeconds", seconds);
															#line 2184 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			;
															#line 14361 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~SetHealthyZoneActorState();
		static_cast<SetHealthyZoneActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
		try {
															#line 2186 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr.setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 2187 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr.setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 2188 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr.setOption(FDBTransactionOptions::PRIORITY_SYSTEM_IMMEDIATE);
															#line 2189 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Optional<Value>> __when_expr_0 = tr.get(healthyZoneKey);
															#line 2189 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<SetHealthyZoneActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 14400 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1loopBody1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
			static_cast<SetHealthyZoneActor*>(this)->actor_wait_state = 1;
															#line 2189 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< SetHealthyZoneActor, 0, Optional<Value> >*>(static_cast<SetHealthyZoneActor*>(this)));
															#line 14405 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 2203 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Void> __when_expr_3 = tr.onError(e);
															#line 2203 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<SetHealthyZoneActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 14429 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch1(__when_expr_3.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1Catch1when1(__when_expr_3.get(), loopDepth); };
			static_cast<SetHealthyZoneActor*>(this)->actor_wait_state = 4;
															#line 2203 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< SetHealthyZoneActor, 3, Void >*>(static_cast<SetHealthyZoneActor*>(this)));
															#line 14434 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(Optional<Value> const& val,int loopDepth) 
	{
															#line 2190 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (val.present() && decodeHealthyZoneValue(val.get()).first == ignoreSSFailuresZoneString)
															#line 14449 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 2191 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (printWarning)
															#line 14453 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 2192 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				printf("ERROR: Maintenance mode cannot be used while data distribution is disabled for storage " "server failures. Use 'datadistribution on' to reenable data distribution.\n");
															#line 14457 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			}
															#line 2195 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (!static_cast<SetHealthyZoneActor*>(this)->SAV<bool>::futures) { (void)(false); this->~SetHealthyZoneActorState(); static_cast<SetHealthyZoneActor*>(this)->destroy(); return 0; }
															#line 14461 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			new (&static_cast<SetHealthyZoneActor*>(this)->SAV< bool >::value()) bool(false);
			this->~SetHealthyZoneActorState();
			static_cast<SetHealthyZoneActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 2197 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		StrictFuture<Version> __when_expr_1 = tr.getReadVersion();
															#line 2197 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (static_cast<SetHealthyZoneActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 14471 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
		static_cast<SetHealthyZoneActor*>(this)->actor_wait_state = 2;
															#line 2197 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< SetHealthyZoneActor, 1, Version >*>(static_cast<SetHealthyZoneActor*>(this)));
															#line 14476 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2(Optional<Value> && val,int loopDepth) 
	{
															#line 2190 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (val.present() && decodeHealthyZoneValue(val.get()).first == ignoreSSFailuresZoneString)
															#line 14485 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 2191 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (printWarning)
															#line 14489 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 2192 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				printf("ERROR: Maintenance mode cannot be used while data distribution is disabled for storage " "server failures. Use 'datadistribution on' to reenable data distribution.\n");
															#line 14493 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			}
															#line 2195 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (!static_cast<SetHealthyZoneActor*>(this)->SAV<bool>::futures) { (void)(false); this->~SetHealthyZoneActorState(); static_cast<SetHealthyZoneActor*>(this)->destroy(); return 0; }
															#line 14497 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			new (&static_cast<SetHealthyZoneActor*>(this)->SAV< bool >::value()) bool(false);
			this->~SetHealthyZoneActorState();
			static_cast<SetHealthyZoneActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 2197 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		StrictFuture<Version> __when_expr_1 = tr.getReadVersion();
															#line 2197 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (static_cast<SetHealthyZoneActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 14507 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
		static_cast<SetHealthyZoneActor*>(this)->actor_wait_state = 2;
															#line 2197 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< SetHealthyZoneActor, 1, Version >*>(static_cast<SetHealthyZoneActor*>(this)));
															#line 14512 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1when1(Optional<Value> const& val,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(val, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Optional<Value> && val,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(std::move(val), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<SetHealthyZoneActor*>(this)->actor_wait_state > 0) static_cast<SetHealthyZoneActor*>(this)->actor_wait_state = 0;
		static_cast<SetHealthyZoneActor*>(this)->ActorCallback< SetHealthyZoneActor, 0, Optional<Value> >::remove();

	}
	void a_callback_fire(ActorCallback< SetHealthyZoneActor, 0, Optional<Value> >*,Optional<Value> const& value) 
	{
		fdb_probe_actor_enter("setHealthyZone", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("setHealthyZone", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< SetHealthyZoneActor, 0, Optional<Value> >*,Optional<Value> && value) 
	{
		fdb_probe_actor_enter("setHealthyZone", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("setHealthyZone", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< SetHealthyZoneActor, 0, Optional<Value> >*,Error err) 
	{
		fdb_probe_actor_enter("setHealthyZone", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("setHealthyZone", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1cont3(Version const& readVersion,int loopDepth) 
	{
															#line 2198 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		tr.set(healthyZoneKey, healthyZoneValue(zoneId, readVersion + (seconds * CLIENT_KNOBS->CORE_VERSIONSPERSECOND)));
															#line 2200 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		StrictFuture<Void> __when_expr_2 = tr.commit();
															#line 2200 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (static_cast<SetHealthyZoneActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 14588 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1loopBody1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1loopBody1cont3when1(__when_expr_2.get(), loopDepth); };
		static_cast<SetHealthyZoneActor*>(this)->actor_wait_state = 3;
															#line 2200 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< SetHealthyZoneActor, 2, Void >*>(static_cast<SetHealthyZoneActor*>(this)));
															#line 14593 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont3(Version && readVersion,int loopDepth) 
	{
															#line 2198 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		tr.set(healthyZoneKey, healthyZoneValue(zoneId, readVersion + (seconds * CLIENT_KNOBS->CORE_VERSIONSPERSECOND)));
															#line 2200 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		StrictFuture<Void> __when_expr_2 = tr.commit();
															#line 2200 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (static_cast<SetHealthyZoneActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 14606 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1loopBody1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1loopBody1cont3when1(__when_expr_2.get(), loopDepth); };
		static_cast<SetHealthyZoneActor*>(this)->actor_wait_state = 3;
															#line 2200 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< SetHealthyZoneActor, 2, Void >*>(static_cast<SetHealthyZoneActor*>(this)));
															#line 14611 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(Version const& readVersion,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3(readVersion, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(Version && readVersion,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3(std::move(readVersion), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<SetHealthyZoneActor*>(this)->actor_wait_state > 0) static_cast<SetHealthyZoneActor*>(this)->actor_wait_state = 0;
		static_cast<SetHealthyZoneActor*>(this)->ActorCallback< SetHealthyZoneActor, 1, Version >::remove();

	}
	void a_callback_fire(ActorCallback< SetHealthyZoneActor, 1, Version >*,Version const& value) 
	{
		fdb_probe_actor_enter("setHealthyZone", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("setHealthyZone", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< SetHealthyZoneActor, 1, Version >*,Version && value) 
	{
		fdb_probe_actor_enter("setHealthyZone", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("setHealthyZone", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< SetHealthyZoneActor, 1, Version >*,Error err) 
	{
		fdb_probe_actor_enter("setHealthyZone", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("setHealthyZone", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1loopBody1cont6(Void const& _,int loopDepth) 
	{
															#line 2201 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<SetHealthyZoneActor*>(this)->SAV<bool>::futures) { (void)(true); this->~SetHealthyZoneActorState(); static_cast<SetHealthyZoneActor*>(this)->destroy(); return 0; }
															#line 14683 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<SetHealthyZoneActor*>(this)->SAV< bool >::value()) bool(true);
		this->~SetHealthyZoneActorState();
		static_cast<SetHealthyZoneActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1cont6(Void && _,int loopDepth) 
	{
															#line 2201 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<SetHealthyZoneActor*>(this)->SAV<bool>::futures) { (void)(true); this->~SetHealthyZoneActorState(); static_cast<SetHealthyZoneActor*>(this)->destroy(); return 0; }
															#line 14695 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<SetHealthyZoneActor*>(this)->SAV< bool >::value()) bool(true);
		this->~SetHealthyZoneActorState();
		static_cast<SetHealthyZoneActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1cont3when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont6(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont3when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont6(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<SetHealthyZoneActor*>(this)->actor_wait_state > 0) static_cast<SetHealthyZoneActor*>(this)->actor_wait_state = 0;
		static_cast<SetHealthyZoneActor*>(this)->ActorCallback< SetHealthyZoneActor, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< SetHealthyZoneActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("setHealthyZone", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont3when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("setHealthyZone", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< SetHealthyZoneActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("setHealthyZone", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont3when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("setHealthyZone", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< SetHealthyZoneActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("setHealthyZone", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("setHealthyZone", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<SetHealthyZoneActor*>(this)->actor_wait_state > 0) static_cast<SetHealthyZoneActor*>(this)->actor_wait_state = 0;
		static_cast<SetHealthyZoneActor*>(this)->ActorCallback< SetHealthyZoneActor, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< SetHealthyZoneActor, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("setHealthyZone", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("setHealthyZone", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< SetHealthyZoneActor, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("setHealthyZone", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("setHealthyZone", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< SetHealthyZoneActor, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("setHealthyZone", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("setHealthyZone", reinterpret_cast<unsigned long>(this), 3);

	}
															#line 2181 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Database cx;
															#line 2181 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	StringRef zoneId;
															#line 2181 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	double seconds;
															#line 2181 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	bool printWarning;
															#line 2182 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Transaction tr;
															#line 14851 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
};
// This generated class is to be used only via setHealthyZone()
															#line 2181 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class SetHealthyZoneActor final : public Actor<bool>, public ActorCallback< SetHealthyZoneActor, 0, Optional<Value> >, public ActorCallback< SetHealthyZoneActor, 1, Version >, public ActorCallback< SetHealthyZoneActor, 2, Void >, public ActorCallback< SetHealthyZoneActor, 3, Void >, public FastAllocated<SetHealthyZoneActor>, public SetHealthyZoneActorState<SetHealthyZoneActor> {
															#line 14856 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
	using FastAllocated<SetHealthyZoneActor>::operator new;
	using FastAllocated<SetHealthyZoneActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<bool>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< SetHealthyZoneActor, 0, Optional<Value> >;
friend struct ActorCallback< SetHealthyZoneActor, 1, Version >;
friend struct ActorCallback< SetHealthyZoneActor, 2, Void >;
friend struct ActorCallback< SetHealthyZoneActor, 3, Void >;
															#line 2181 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	SetHealthyZoneActor(Database const& cx,StringRef const& zoneId,double const& seconds,bool const& printWarning) 
															#line 14870 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		 : Actor<bool>(),
		   SetHealthyZoneActorState<SetHealthyZoneActor>(cx, zoneId, seconds, printWarning)
	{
		fdb_probe_actor_enter("setHealthyZone", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("setHealthyZone");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("setHealthyZone", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< SetHealthyZoneActor, 0, Optional<Value> >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< SetHealthyZoneActor, 1, Version >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< SetHealthyZoneActor, 2, Void >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< SetHealthyZoneActor, 3, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 2181 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
[[nodiscard]] Future<bool> setHealthyZone( Database const& cx, StringRef const& zoneId, double const& seconds, bool const& printWarning ) {
															#line 2181 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	return Future<bool>(new SetHealthyZoneActor(cx, zoneId, seconds, printWarning));
															#line 14901 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
}

#line 2207 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"

															#line 14906 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via setDDMode()
															#line 2208 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
template <class SetDDModeActor>
															#line 2208 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class SetDDModeActorState {
															#line 14913 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
															#line 2208 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	SetDDModeActorState(Database const& cx,int const& mode) 
															#line 2208 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
															#line 2208 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		 : cx(cx),
															#line 2208 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   mode(mode),
															#line 2209 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   tr(cx),
															#line 2210 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   oldMode(-1),
															#line 2211 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   wr(Unversioned())
															#line 14928 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("setDDMode", reinterpret_cast<unsigned long>(this));

	}
	~SetDDModeActorState() 
	{
		fdb_probe_actor_destroy("setDDMode", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 2212 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			wr << mode;
															#line 2214 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			;
															#line 14945 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~SetDDModeActorState();
		static_cast<SetDDModeActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
		try {
															#line 2216 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr.setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 2217 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr.setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 2218 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Optional<Value>> __when_expr_0 = tr.get(dataDistributionModeKey);
															#line 2218 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<SetDDModeActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 14982 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1loopBody1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
			static_cast<SetDDModeActor*>(this)->actor_wait_state = 1;
															#line 2218 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< SetDDModeActor, 0, Optional<Value> >*>(static_cast<SetDDModeActor*>(this)));
															#line 14987 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 2249 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			TraceEvent("SetDDModeRetrying").error(e);
															#line 2250 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Void> __when_expr_3 = tr.onError(e);
															#line 2250 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<SetDDModeActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 15013 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch1(__when_expr_3.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1Catch1when1(__when_expr_3.get(), loopDepth); };
			static_cast<SetDDModeActor*>(this)->actor_wait_state = 4;
															#line 2250 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< SetDDModeActor, 3, Void >*>(static_cast<SetDDModeActor*>(this)));
															#line 15018 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(Optional<Value> const& old,int loopDepth) 
	{
															#line 2219 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (oldMode < 0)
															#line 15033 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 2220 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			oldMode = 1;
															#line 2221 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (old.present())
															#line 15039 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 2222 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				BinaryReader rd(old.get(), Unversioned());
															#line 2223 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				rd >> oldMode;
															#line 15045 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			}
		}
															#line 2226 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		BinaryWriter wrMyOwner(Unversioned());
															#line 2227 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		wrMyOwner << dataDistributionModeLock;
															#line 2228 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		tr.set(moveKeysLockOwnerKey, wrMyOwner.toValue());
															#line 2229 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		BinaryWriter wrLastWrite(Unversioned());
															#line 2230 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		wrLastWrite << deterministicRandom()->randomUniqueID();
															#line 2231 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		tr.set(moveKeysLockWriteKey, wrLastWrite.toValue());
															#line 2233 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		tr.set(dataDistributionModeKey, wr.toValue());
															#line 2234 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (mode)
															#line 15064 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 2238 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Optional<Value>> __when_expr_1 = tr.get(healthyZoneKey);
															#line 2238 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<SetDDModeActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 15070 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
			static_cast<SetDDModeActor*>(this)->actor_wait_state = 2;
															#line 2238 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< SetDDModeActor, 1, Optional<Value> >*>(static_cast<SetDDModeActor*>(this)));
															#line 15075 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1loopBody1cont3(loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(Optional<Value> && old,int loopDepth) 
	{
															#line 2219 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (oldMode < 0)
															#line 15089 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 2220 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			oldMode = 1;
															#line 2221 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (old.present())
															#line 15095 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 2222 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				BinaryReader rd(old.get(), Unversioned());
															#line 2223 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				rd >> oldMode;
															#line 15101 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			}
		}
															#line 2226 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		BinaryWriter wrMyOwner(Unversioned());
															#line 2227 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		wrMyOwner << dataDistributionModeLock;
															#line 2228 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		tr.set(moveKeysLockOwnerKey, wrMyOwner.toValue());
															#line 2229 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		BinaryWriter wrLastWrite(Unversioned());
															#line 2230 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		wrLastWrite << deterministicRandom()->randomUniqueID();
															#line 2231 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		tr.set(moveKeysLockWriteKey, wrLastWrite.toValue());
															#line 2233 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		tr.set(dataDistributionModeKey, wr.toValue());
															#line 2234 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (mode)
															#line 15120 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 2238 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Optional<Value>> __when_expr_1 = tr.get(healthyZoneKey);
															#line 2238 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<SetDDModeActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 15126 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
			static_cast<SetDDModeActor*>(this)->actor_wait_state = 2;
															#line 2238 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< SetDDModeActor, 1, Optional<Value> >*>(static_cast<SetDDModeActor*>(this)));
															#line 15131 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1loopBody1cont3(loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1when1(Optional<Value> const& old,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(old, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Optional<Value> && old,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(std::move(old), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<SetDDModeActor*>(this)->actor_wait_state > 0) static_cast<SetDDModeActor*>(this)->actor_wait_state = 0;
		static_cast<SetDDModeActor*>(this)->ActorCallback< SetDDModeActor, 0, Optional<Value> >::remove();

	}
	void a_callback_fire(ActorCallback< SetDDModeActor, 0, Optional<Value> >*,Optional<Value> const& value) 
	{
		fdb_probe_actor_enter("setDDMode", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("setDDMode", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< SetDDModeActor, 0, Optional<Value> >*,Optional<Value> && value) 
	{
		fdb_probe_actor_enter("setDDMode", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("setDDMode", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< SetDDModeActor, 0, Optional<Value> >*,Error err) 
	{
		fdb_probe_actor_enter("setDDMode", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("setDDMode", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1cont3(int loopDepth) 
	{
															#line 2246 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		StrictFuture<Void> __when_expr_2 = tr.commit();
															#line 2246 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (static_cast<SetDDModeActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 15210 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1loopBody1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1loopBody1cont3when1(__when_expr_2.get(), loopDepth); };
		static_cast<SetDDModeActor*>(this)->actor_wait_state = 3;
															#line 2246 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< SetDDModeActor, 2, Void >*>(static_cast<SetDDModeActor*>(this)));
															#line 15215 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont6(Optional<Value> const& currentHealthyZoneValue,int loopDepth) 
	{
															#line 2239 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (currentHealthyZoneValue.present() && decodeHealthyZoneValue(currentHealthyZoneValue.get()).first == ignoreSSFailuresZoneString)
															#line 15224 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 2242 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr.clear(healthyZoneKey);
															#line 15228 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		}
															#line 2244 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		tr.clear(rebalanceDDIgnoreKey);
															#line 15232 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont6(Optional<Value> && currentHealthyZoneValue,int loopDepth) 
	{
															#line 2239 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (currentHealthyZoneValue.present() && decodeHealthyZoneValue(currentHealthyZoneValue.get()).first == ignoreSSFailuresZoneString)
															#line 15241 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 2242 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr.clear(healthyZoneKey);
															#line 15245 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		}
															#line 2244 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		tr.clear(rebalanceDDIgnoreKey);
															#line 15249 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(Optional<Value> const& currentHealthyZoneValue,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont6(currentHealthyZoneValue, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(Optional<Value> && currentHealthyZoneValue,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont6(std::move(currentHealthyZoneValue), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<SetDDModeActor*>(this)->actor_wait_state > 0) static_cast<SetDDModeActor*>(this)->actor_wait_state = 0;
		static_cast<SetDDModeActor*>(this)->ActorCallback< SetDDModeActor, 1, Optional<Value> >::remove();

	}
	void a_callback_fire(ActorCallback< SetDDModeActor, 1, Optional<Value> >*,Optional<Value> const& value) 
	{
		fdb_probe_actor_enter("setDDMode", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("setDDMode", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< SetDDModeActor, 1, Optional<Value> >*,Optional<Value> && value) 
	{
		fdb_probe_actor_enter("setDDMode", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("setDDMode", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< SetDDModeActor, 1, Optional<Value> >*,Error err) 
	{
		fdb_probe_actor_enter("setDDMode", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("setDDMode", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1loopBody1cont9(Void const& _,int loopDepth) 
	{
															#line 2247 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<SetDDModeActor*>(this)->SAV<int>::futures) { (void)(oldMode); this->~SetDDModeActorState(); static_cast<SetDDModeActor*>(this)->destroy(); return 0; }
															#line 15321 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<SetDDModeActor*>(this)->SAV< int >::value()) int(std::move(oldMode)); // state_var_RVO
		this->~SetDDModeActorState();
		static_cast<SetDDModeActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1cont9(Void && _,int loopDepth) 
	{
															#line 2247 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<SetDDModeActor*>(this)->SAV<int>::futures) { (void)(oldMode); this->~SetDDModeActorState(); static_cast<SetDDModeActor*>(this)->destroy(); return 0; }
															#line 15333 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<SetDDModeActor*>(this)->SAV< int >::value()) int(std::move(oldMode)); // state_var_RVO
		this->~SetDDModeActorState();
		static_cast<SetDDModeActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1cont3when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont9(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont3when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont9(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<SetDDModeActor*>(this)->actor_wait_state > 0) static_cast<SetDDModeActor*>(this)->actor_wait_state = 0;
		static_cast<SetDDModeActor*>(this)->ActorCallback< SetDDModeActor, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< SetDDModeActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("setDDMode", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont3when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("setDDMode", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< SetDDModeActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("setDDMode", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont3when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("setDDMode", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< SetDDModeActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("setDDMode", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("setDDMode", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<SetDDModeActor*>(this)->actor_wait_state > 0) static_cast<SetDDModeActor*>(this)->actor_wait_state = 0;
		static_cast<SetDDModeActor*>(this)->ActorCallback< SetDDModeActor, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< SetDDModeActor, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("setDDMode", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("setDDMode", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< SetDDModeActor, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("setDDMode", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("setDDMode", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< SetDDModeActor, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("setDDMode", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("setDDMode", reinterpret_cast<unsigned long>(this), 3);

	}
															#line 2208 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Database cx;
															#line 2208 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	int mode;
															#line 2209 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Transaction tr;
															#line 2210 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	int oldMode;
															#line 2211 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	BinaryWriter wr;
															#line 15489 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
};
// This generated class is to be used only via setDDMode()
															#line 2208 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class SetDDModeActor final : public Actor<int>, public ActorCallback< SetDDModeActor, 0, Optional<Value> >, public ActorCallback< SetDDModeActor, 1, Optional<Value> >, public ActorCallback< SetDDModeActor, 2, Void >, public ActorCallback< SetDDModeActor, 3, Void >, public FastAllocated<SetDDModeActor>, public SetDDModeActorState<SetDDModeActor> {
															#line 15494 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
	using FastAllocated<SetDDModeActor>::operator new;
	using FastAllocated<SetDDModeActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<int>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< SetDDModeActor, 0, Optional<Value> >;
friend struct ActorCallback< SetDDModeActor, 1, Optional<Value> >;
friend struct ActorCallback< SetDDModeActor, 2, Void >;
friend struct ActorCallback< SetDDModeActor, 3, Void >;
															#line 2208 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	SetDDModeActor(Database const& cx,int const& mode) 
															#line 15508 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		 : Actor<int>(),
		   SetDDModeActorState<SetDDModeActor>(cx, mode)
	{
		fdb_probe_actor_enter("setDDMode", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("setDDMode");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("setDDMode", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< SetDDModeActor, 0, Optional<Value> >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< SetDDModeActor, 1, Optional<Value> >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< SetDDModeActor, 2, Void >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< SetDDModeActor, 3, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 2208 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
[[nodiscard]] Future<int> setDDMode( Database const& cx, int const& mode ) {
															#line 2208 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	return Future<int>(new SetDDModeActor(cx, mode));
															#line 15539 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
}

#line 2254 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"

															#line 15544 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via checkForExcludingServersTxActor()
															#line 2255 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
template <class CheckForExcludingServersTxActorActor>
															#line 2255 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class CheckForExcludingServersTxActorActorState {
															#line 15551 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
															#line 2255 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	CheckForExcludingServersTxActorActorState(ReadYourWritesTransaction* const& tr,std::set<AddressExclusion>* const& exclusions,std::set<NetworkAddress>* const& inProgressExclusion) 
															#line 2255 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
															#line 2255 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		 : tr(tr),
															#line 2255 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   exclusions(exclusions),
															#line 2255 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   inProgressExclusion(inProgressExclusion)
															#line 15562 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("checkForExcludingServersTxActor", reinterpret_cast<unsigned long>(this));

	}
	~CheckForExcludingServersTxActorActorState() 
	{
		fdb_probe_actor_destroy("checkForExcludingServersTxActor", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 2259 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			ASSERT(inProgressExclusion->size() == 0);
															#line 2260 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (!exclusions->size())
															#line 15579 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 2261 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				if (!static_cast<CheckForExcludingServersTxActorActor*>(this)->SAV<bool>::futures) { (void)(true); this->~CheckForExcludingServersTxActorActorState(); static_cast<CheckForExcludingServersTxActorActor*>(this)->destroy(); return 0; }
															#line 15583 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				new (&static_cast<CheckForExcludingServersTxActorActor*>(this)->SAV< bool >::value()) bool(true);
				this->~CheckForExcludingServersTxActorActorState();
				static_cast<CheckForExcludingServersTxActorActor*>(this)->finishSendAndDelPromiseRef();
				return 0;
			}
															#line 2263 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr->setOption(FDBTransactionOptions::READ_SYSTEM_KEYS);
															#line 2264 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr->setOption(FDBTransactionOptions::PRIORITY_SYSTEM_IMMEDIATE);
															#line 2265 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr->setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 2271 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<RangeResult> __when_expr_0 = tr->getRange(serverListKeys, CLIENT_KNOBS->TOO_MANY);
															#line 2271 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<CheckForExcludingServersTxActorActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 15599 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<CheckForExcludingServersTxActorActor*>(this)->actor_wait_state = 1;
															#line 2271 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< CheckForExcludingServersTxActorActor, 0, RangeResult >*>(static_cast<CheckForExcludingServersTxActorActor*>(this)));
															#line 15604 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~CheckForExcludingServersTxActorActorState();
		static_cast<CheckForExcludingServersTxActorActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(RangeResult const& serverList,int loopDepth) 
	{
															#line 2272 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		ASSERT(!serverList.more && serverList.size() < CLIENT_KNOBS->TOO_MANY);
															#line 2274 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		ok = true;
															#line 2275 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		for( auto& s : serverList ) {
															#line 2276 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			auto addresses = decodeServerListValue(s.value).getKeyValues.getEndpoint().addresses;
															#line 2277 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (addressExcluded(*exclusions, addresses.address))
															#line 15635 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 2278 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				ok = false;
															#line 2279 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				inProgressExclusion->insert(addresses.address);
															#line 15641 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			}
															#line 2281 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (addresses.secondaryAddress.present() && addressExcluded(*exclusions, addresses.secondaryAddress.get()))
															#line 15645 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 2282 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				ok = false;
															#line 2283 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				inProgressExclusion->insert(addresses.secondaryAddress.get());
															#line 15651 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			}
		}
															#line 2287 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (ok)
															#line 15656 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 2288 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Optional<Standalone<StringRef>>> __when_expr_1 = tr->get(logsKey);
															#line 2288 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<CheckForExcludingServersTxActorActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 15662 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
			static_cast<CheckForExcludingServersTxActorActor*>(this)->actor_wait_state = 2;
															#line 2288 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< CheckForExcludingServersTxActorActor, 1, Optional<Standalone<StringRef>> >*>(static_cast<CheckForExcludingServersTxActorActor*>(this)));
															#line 15667 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1cont3(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont1(RangeResult && serverList,int loopDepth) 
	{
															#line 2272 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		ASSERT(!serverList.more && serverList.size() < CLIENT_KNOBS->TOO_MANY);
															#line 2274 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		ok = true;
															#line 2275 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		for( auto& s : serverList ) {
															#line 2276 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			auto addresses = decodeServerListValue(s.value).getKeyValues.getEndpoint().addresses;
															#line 2277 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (addressExcluded(*exclusions, addresses.address))
															#line 15689 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 2278 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				ok = false;
															#line 2279 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				inProgressExclusion->insert(addresses.address);
															#line 15695 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			}
															#line 2281 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (addresses.secondaryAddress.present() && addressExcluded(*exclusions, addresses.secondaryAddress.get()))
															#line 15699 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 2282 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				ok = false;
															#line 2283 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				inProgressExclusion->insert(addresses.secondaryAddress.get());
															#line 15705 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			}
		}
															#line 2287 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (ok)
															#line 15710 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 2288 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Optional<Standalone<StringRef>>> __when_expr_1 = tr->get(logsKey);
															#line 2288 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<CheckForExcludingServersTxActorActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 15716 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
			static_cast<CheckForExcludingServersTxActorActor*>(this)->actor_wait_state = 2;
															#line 2288 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< CheckForExcludingServersTxActorActor, 1, Optional<Standalone<StringRef>> >*>(static_cast<CheckForExcludingServersTxActorActor*>(this)));
															#line 15721 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1cont3(loopDepth);
		}

		return loopDepth;
	}
	int a_body1when1(RangeResult const& serverList,int loopDepth) 
	{
		loopDepth = a_body1cont1(serverList, loopDepth);

		return loopDepth;
	}
	int a_body1when1(RangeResult && serverList,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(serverList), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<CheckForExcludingServersTxActorActor*>(this)->actor_wait_state > 0) static_cast<CheckForExcludingServersTxActorActor*>(this)->actor_wait_state = 0;
		static_cast<CheckForExcludingServersTxActorActor*>(this)->ActorCallback< CheckForExcludingServersTxActorActor, 0, RangeResult >::remove();

	}
	void a_callback_fire(ActorCallback< CheckForExcludingServersTxActorActor, 0, RangeResult >*,RangeResult const& value) 
	{
		fdb_probe_actor_enter("checkForExcludingServersTxActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("checkForExcludingServersTxActor", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< CheckForExcludingServersTxActorActor, 0, RangeResult >*,RangeResult && value) 
	{
		fdb_probe_actor_enter("checkForExcludingServersTxActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("checkForExcludingServersTxActor", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< CheckForExcludingServersTxActorActor, 0, RangeResult >*,Error err) 
	{
		fdb_probe_actor_enter("checkForExcludingServersTxActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("checkForExcludingServersTxActor", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont3(int loopDepth) 
	{
															#line 2305 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<CheckForExcludingServersTxActorActor*>(this)->SAV<bool>::futures) { (void)(ok); this->~CheckForExcludingServersTxActorActorState(); static_cast<CheckForExcludingServersTxActorActor*>(this)->destroy(); return 0; }
															#line 15798 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<CheckForExcludingServersTxActorActor*>(this)->SAV< bool >::value()) bool(std::move(ok)); // state_var_RVO
		this->~CheckForExcludingServersTxActorActorState();
		static_cast<CheckForExcludingServersTxActorActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont7(Optional<Standalone<StringRef>> const& value,int loopDepth) 
	{
															#line 2289 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		ASSERT(value.present());
															#line 2290 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		auto logs = decodeLogsValue(value.get());
															#line 2291 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		for( auto const& log : logs.first ) {
															#line 2292 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (log.second == NetworkAddress() || addressExcluded(*exclusions, log.second))
															#line 15816 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 2293 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				ok = false;
															#line 2294 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				inProgressExclusion->insert(log.second);
															#line 15822 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			}
		}
															#line 2297 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		for( auto const& log : logs.second ) {
															#line 2298 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (log.second == NetworkAddress() || addressExcluded(*exclusions, log.second))
															#line 15829 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 2299 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				ok = false;
															#line 2300 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				inProgressExclusion->insert(log.second);
															#line 15835 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			}
		}
		loopDepth = a_body1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1cont7(Optional<Standalone<StringRef>> && value,int loopDepth) 
	{
															#line 2289 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		ASSERT(value.present());
															#line 2290 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		auto logs = decodeLogsValue(value.get());
															#line 2291 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		for( auto const& log : logs.first ) {
															#line 2292 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (log.second == NetworkAddress() || addressExcluded(*exclusions, log.second))
															#line 15852 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 2293 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				ok = false;
															#line 2294 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				inProgressExclusion->insert(log.second);
															#line 15858 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			}
		}
															#line 2297 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		for( auto const& log : logs.second ) {
															#line 2298 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (log.second == NetworkAddress() || addressExcluded(*exclusions, log.second))
															#line 15865 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 2299 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				ok = false;
															#line 2300 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				inProgressExclusion->insert(log.second);
															#line 15871 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			}
		}
		loopDepth = a_body1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Optional<Standalone<StringRef>> const& value,int loopDepth) 
	{
		loopDepth = a_body1cont7(value, loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Optional<Standalone<StringRef>> && value,int loopDepth) 
	{
		loopDepth = a_body1cont7(std::move(value), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<CheckForExcludingServersTxActorActor*>(this)->actor_wait_state > 0) static_cast<CheckForExcludingServersTxActorActor*>(this)->actor_wait_state = 0;
		static_cast<CheckForExcludingServersTxActorActor*>(this)->ActorCallback< CheckForExcludingServersTxActorActor, 1, Optional<Standalone<StringRef>> >::remove();

	}
	void a_callback_fire(ActorCallback< CheckForExcludingServersTxActorActor, 1, Optional<Standalone<StringRef>> >*,Optional<Standalone<StringRef>> const& value) 
	{
		fdb_probe_actor_enter("checkForExcludingServersTxActor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("checkForExcludingServersTxActor", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< CheckForExcludingServersTxActorActor, 1, Optional<Standalone<StringRef>> >*,Optional<Standalone<StringRef>> && value) 
	{
		fdb_probe_actor_enter("checkForExcludingServersTxActor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("checkForExcludingServersTxActor", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< CheckForExcludingServersTxActorActor, 1, Optional<Standalone<StringRef>> >*,Error err) 
	{
		fdb_probe_actor_enter("checkForExcludingServersTxActor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("checkForExcludingServersTxActor", reinterpret_cast<unsigned long>(this), 1);

	}
															#line 2255 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	ReadYourWritesTransaction* tr;
															#line 2255 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	std::set<AddressExclusion>* exclusions;
															#line 2255 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	std::set<NetworkAddress>* inProgressExclusion;
															#line 2274 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	bool ok;
															#line 15949 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
};
// This generated class is to be used only via checkForExcludingServersTxActor()
															#line 2255 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class CheckForExcludingServersTxActorActor final : public Actor<bool>, public ActorCallback< CheckForExcludingServersTxActorActor, 0, RangeResult >, public ActorCallback< CheckForExcludingServersTxActorActor, 1, Optional<Standalone<StringRef>> >, public FastAllocated<CheckForExcludingServersTxActorActor>, public CheckForExcludingServersTxActorActorState<CheckForExcludingServersTxActorActor> {
															#line 15954 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
	using FastAllocated<CheckForExcludingServersTxActorActor>::operator new;
	using FastAllocated<CheckForExcludingServersTxActorActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<bool>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< CheckForExcludingServersTxActorActor, 0, RangeResult >;
friend struct ActorCallback< CheckForExcludingServersTxActorActor, 1, Optional<Standalone<StringRef>> >;
															#line 2255 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	CheckForExcludingServersTxActorActor(ReadYourWritesTransaction* const& tr,std::set<AddressExclusion>* const& exclusions,std::set<NetworkAddress>* const& inProgressExclusion) 
															#line 15966 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		 : Actor<bool>(),
		   CheckForExcludingServersTxActorActorState<CheckForExcludingServersTxActorActor>(tr, exclusions, inProgressExclusion)
	{
		fdb_probe_actor_enter("checkForExcludingServersTxActor", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("checkForExcludingServersTxActor");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("checkForExcludingServersTxActor", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< CheckForExcludingServersTxActorActor, 0, RangeResult >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< CheckForExcludingServersTxActorActor, 1, Optional<Standalone<StringRef>> >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 2255 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
[[nodiscard]] Future<bool> checkForExcludingServersTxActor( ReadYourWritesTransaction* const& tr, std::set<AddressExclusion>* const& exclusions, std::set<NetworkAddress>* const& inProgressExclusion ) {
															#line 2255 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	return Future<bool>(new CheckForExcludingServersTxActorActor(tr, exclusions, inProgressExclusion));
															#line 15995 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
}

#line 2307 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"

															#line 16000 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via checkForExcludingServers()
															#line 2308 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
template <class CheckForExcludingServersActor>
															#line 2308 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class CheckForExcludingServersActorState {
															#line 16007 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
															#line 2308 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	CheckForExcludingServersActorState(Database const& cx,std::vector<AddressExclusion> const& excl,bool const& waitForAllExcluded) 
															#line 2308 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
															#line 2308 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		 : cx(cx),
															#line 2308 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   excl(excl),
															#line 2308 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   waitForAllExcluded(waitForAllExcluded),
															#line 2311 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   exclusions(excl.begin(), excl.end()),
															#line 2312 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   inProgressExclusion()
															#line 16022 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("checkForExcludingServers", reinterpret_cast<unsigned long>(this));

	}
	~CheckForExcludingServersActorState() 
	{
		fdb_probe_actor_destroy("checkForExcludingServers", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 2314 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			;
															#line 16037 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~CheckForExcludingServersActorState();
		static_cast<CheckForExcludingServersActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 2330 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<CheckForExcludingServersActor*>(this)->SAV<std::set<NetworkAddress>>::futures) { (void)(inProgressExclusion); this->~CheckForExcludingServersActorState(); static_cast<CheckForExcludingServersActor*>(this)->destroy(); return 0; }
															#line 16060 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<CheckForExcludingServersActor*>(this)->SAV< std::set<NetworkAddress> >::value()) std::set<NetworkAddress>(std::move(inProgressExclusion)); // state_var_RVO
		this->~CheckForExcludingServersActorState();
		static_cast<CheckForExcludingServersActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
															#line 2315 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		tr = ReadYourWritesTransaction(cx);
															#line 2316 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		inProgressExclusion.clear();
															#line 16081 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		try {
															#line 2318 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<bool> __when_expr_0 = checkForExcludingServersTxActor(&tr, &exclusions, &inProgressExclusion);
															#line 2318 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<CheckForExcludingServersActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 16087 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1loopBody1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
			static_cast<CheckForExcludingServersActor*>(this)->actor_wait_state = 1;
															#line 2318 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< CheckForExcludingServersActor, 0, bool >*>(static_cast<CheckForExcludingServersActor*>(this)));
															#line 16092 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1break1(int loopDepth) 
	{
		try {
			return a_body1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 2326 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			TraceEvent("CheckForExcludingServersError").error(e);
															#line 2327 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Void> __when_expr_2 = tr.onError(e);
															#line 2327 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<CheckForExcludingServersActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 16131 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1Catch1when1(__when_expr_2.get(), loopDepth); };
			static_cast<CheckForExcludingServersActor*>(this)->actor_wait_state = 3;
															#line 2327 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< CheckForExcludingServersActor, 2, Void >*>(static_cast<CheckForExcludingServersActor*>(this)));
															#line 16136 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(bool const& ok,int loopDepth) 
	{
															#line 2319 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (ok)
															#line 16151 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 2320 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (!static_cast<CheckForExcludingServersActor*>(this)->SAV<std::set<NetworkAddress>>::futures) { (void)(inProgressExclusion); this->~CheckForExcludingServersActorState(); static_cast<CheckForExcludingServersActor*>(this)->destroy(); return 0; }
															#line 16155 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			new (&static_cast<CheckForExcludingServersActor*>(this)->SAV< std::set<NetworkAddress> >::value()) std::set<NetworkAddress>(std::move(inProgressExclusion)); // state_var_RVO
			this->~CheckForExcludingServersActorState();
			static_cast<CheckForExcludingServersActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 2321 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!waitForAllExcluded)
															#line 16163 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
			return a_body1break1(loopDepth==0?0:loopDepth-1); // break
		}
															#line 2324 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		StrictFuture<Void> __when_expr_1 = delayJittered(1.0);
															#line 2324 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (static_cast<CheckForExcludingServersActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 16171 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
		static_cast<CheckForExcludingServersActor*>(this)->actor_wait_state = 2;
															#line 2324 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< CheckForExcludingServersActor, 1, Void >*>(static_cast<CheckForExcludingServersActor*>(this)));
															#line 16176 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2(bool && ok,int loopDepth) 
	{
															#line 2319 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (ok)
															#line 16185 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 2320 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (!static_cast<CheckForExcludingServersActor*>(this)->SAV<std::set<NetworkAddress>>::futures) { (void)(inProgressExclusion); this->~CheckForExcludingServersActorState(); static_cast<CheckForExcludingServersActor*>(this)->destroy(); return 0; }
															#line 16189 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			new (&static_cast<CheckForExcludingServersActor*>(this)->SAV< std::set<NetworkAddress> >::value()) std::set<NetworkAddress>(std::move(inProgressExclusion)); // state_var_RVO
			this->~CheckForExcludingServersActorState();
			static_cast<CheckForExcludingServersActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 2321 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!waitForAllExcluded)
															#line 16197 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
			return a_body1break1(loopDepth==0?0:loopDepth-1); // break
		}
															#line 2324 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		StrictFuture<Void> __when_expr_1 = delayJittered(1.0);
															#line 2324 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (static_cast<CheckForExcludingServersActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 16205 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
		static_cast<CheckForExcludingServersActor*>(this)->actor_wait_state = 2;
															#line 2324 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< CheckForExcludingServersActor, 1, Void >*>(static_cast<CheckForExcludingServersActor*>(this)));
															#line 16210 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1when1(bool const& ok,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(ok, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(bool && ok,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(std::move(ok), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<CheckForExcludingServersActor*>(this)->actor_wait_state > 0) static_cast<CheckForExcludingServersActor*>(this)->actor_wait_state = 0;
		static_cast<CheckForExcludingServersActor*>(this)->ActorCallback< CheckForExcludingServersActor, 0, bool >::remove();

	}
	void a_callback_fire(ActorCallback< CheckForExcludingServersActor, 0, bool >*,bool const& value) 
	{
		fdb_probe_actor_enter("checkForExcludingServers", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("checkForExcludingServers", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< CheckForExcludingServersActor, 0, bool >*,bool && value) 
	{
		fdb_probe_actor_enter("checkForExcludingServers", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("checkForExcludingServers", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< CheckForExcludingServersActor, 0, bool >*,Error err) 
	{
		fdb_probe_actor_enter("checkForExcludingServers", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("checkForExcludingServers", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1cont3(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont6(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont3(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont6(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<CheckForExcludingServersActor*>(this)->actor_wait_state > 0) static_cast<CheckForExcludingServersActor*>(this)->actor_wait_state = 0;
		static_cast<CheckForExcludingServersActor*>(this)->ActorCallback< CheckForExcludingServersActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< CheckForExcludingServersActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("checkForExcludingServers", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("checkForExcludingServers", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< CheckForExcludingServersActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("checkForExcludingServers", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("checkForExcludingServers", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< CheckForExcludingServersActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("checkForExcludingServers", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("checkForExcludingServers", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1loopBody1cont6(int loopDepth) 
	{
		try {
			loopDepth = a_body1loopBody1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<CheckForExcludingServersActor*>(this)->actor_wait_state > 0) static_cast<CheckForExcludingServersActor*>(this)->actor_wait_state = 0;
		static_cast<CheckForExcludingServersActor*>(this)->ActorCallback< CheckForExcludingServersActor, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< CheckForExcludingServersActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("checkForExcludingServers", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("checkForExcludingServers", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< CheckForExcludingServersActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("checkForExcludingServers", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("checkForExcludingServers", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< CheckForExcludingServersActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("checkForExcludingServers", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("checkForExcludingServers", reinterpret_cast<unsigned long>(this), 2);

	}
															#line 2308 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Database cx;
															#line 2308 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	std::vector<AddressExclusion> excl;
															#line 2308 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	bool waitForAllExcluded;
															#line 2311 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	std::set<AddressExclusion> exclusions;
															#line 2312 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	std::set<NetworkAddress> inProgressExclusion;
															#line 2315 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	ReadYourWritesTransaction tr;
															#line 16453 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
};
// This generated class is to be used only via checkForExcludingServers()
															#line 2308 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class CheckForExcludingServersActor final : public Actor<std::set<NetworkAddress>>, public ActorCallback< CheckForExcludingServersActor, 0, bool >, public ActorCallback< CheckForExcludingServersActor, 1, Void >, public ActorCallback< CheckForExcludingServersActor, 2, Void >, public FastAllocated<CheckForExcludingServersActor>, public CheckForExcludingServersActorState<CheckForExcludingServersActor> {
															#line 16458 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
	using FastAllocated<CheckForExcludingServersActor>::operator new;
	using FastAllocated<CheckForExcludingServersActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<std::set<NetworkAddress>>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< CheckForExcludingServersActor, 0, bool >;
friend struct ActorCallback< CheckForExcludingServersActor, 1, Void >;
friend struct ActorCallback< CheckForExcludingServersActor, 2, Void >;
															#line 2308 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	CheckForExcludingServersActor(Database const& cx,std::vector<AddressExclusion> const& excl,bool const& waitForAllExcluded) 
															#line 16471 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		 : Actor<std::set<NetworkAddress>>(),
		   CheckForExcludingServersActorState<CheckForExcludingServersActor>(cx, excl, waitForAllExcluded)
	{
		fdb_probe_actor_enter("checkForExcludingServers", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("checkForExcludingServers");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("checkForExcludingServers", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< CheckForExcludingServersActor, 0, bool >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< CheckForExcludingServersActor, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< CheckForExcludingServersActor, 2, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 2308 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
[[nodiscard]] Future<std::set<NetworkAddress>> checkForExcludingServers( Database const& cx, std::vector<AddressExclusion> const& excl, bool const& waitForAllExcluded ) {
															#line 2308 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	return Future<std::set<NetworkAddress>>(new CheckForExcludingServersActor(cx, excl, waitForAllExcluded));
															#line 16501 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
}

#line 2332 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"

															#line 16506 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via mgmtSnapCreate()
															#line 2333 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
template <class MgmtSnapCreateActor>
															#line 2333 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class MgmtSnapCreateActorState {
															#line 16513 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
															#line 2333 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	MgmtSnapCreateActorState(Database const& cx,Standalone<StringRef> const& snapCmd,UID const& snapUID) 
															#line 2333 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
															#line 2333 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		 : cx(cx),
															#line 2333 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   snapCmd(snapCmd),
															#line 2333 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   snapUID(snapUID)
															#line 16524 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("mgmtSnapCreate", reinterpret_cast<unsigned long>(this));

	}
	~MgmtSnapCreateActorState() 
	{
		fdb_probe_actor_destroy("mgmtSnapCreate", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
			try {
															#line 2335 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				StrictFuture<Void> __when_expr_0 = snapCreate(cx, snapCmd, snapUID);
															#line 2335 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				if (static_cast<MgmtSnapCreateActor*>(this)->actor_wait_state < 0) return a_body1Catch2(actor_cancelled(), loopDepth);
															#line 16542 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch2(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
				static_cast<MgmtSnapCreateActor*>(this)->actor_wait_state = 1;
															#line 2335 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< MgmtSnapCreateActor, 0, Void >*>(static_cast<MgmtSnapCreateActor*>(this)));
															#line 16547 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				loopDepth = 0;
			}
			catch (Error& error) {
				loopDepth = a_body1Catch2(error, loopDepth);
			} catch (...) {
				loopDepth = a_body1Catch2(unknown_error(), loopDepth);
			}
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~MgmtSnapCreateActorState();
		static_cast<MgmtSnapCreateActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1Catch2(const Error& e,int loopDepth=0) 
	{
		try {
															#line 2339 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			TraceEvent(SevWarn, "SnapCreateFailed").error(e).detail("snapUID", snapUID);
															#line 2340 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			return a_body1Catch1(e, loopDepth);
															#line 16579 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont2(Void const& _,int loopDepth) 
	{
															#line 2336 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		TraceEvent("SnapCreateSucceeded").detail("snapUID", snapUID);
															#line 2337 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<MgmtSnapCreateActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~MgmtSnapCreateActorState(); static_cast<MgmtSnapCreateActor*>(this)->destroy(); return 0; }
															#line 16595 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<MgmtSnapCreateActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~MgmtSnapCreateActorState();
		static_cast<MgmtSnapCreateActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont2(Void && _,int loopDepth) 
	{
															#line 2336 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		TraceEvent("SnapCreateSucceeded").detail("snapUID", snapUID);
															#line 2337 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<MgmtSnapCreateActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~MgmtSnapCreateActorState(); static_cast<MgmtSnapCreateActor*>(this)->destroy(); return 0; }
															#line 16609 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<MgmtSnapCreateActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~MgmtSnapCreateActorState();
		static_cast<MgmtSnapCreateActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<MgmtSnapCreateActor*>(this)->actor_wait_state > 0) static_cast<MgmtSnapCreateActor*>(this)->actor_wait_state = 0;
		static_cast<MgmtSnapCreateActor*>(this)->ActorCallback< MgmtSnapCreateActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< MgmtSnapCreateActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("mgmtSnapCreate", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("mgmtSnapCreate", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< MgmtSnapCreateActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("mgmtSnapCreate", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("mgmtSnapCreate", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< MgmtSnapCreateActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("mgmtSnapCreate", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch2(err, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("mgmtSnapCreate", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 2333 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Database cx;
															#line 2333 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Standalone<StringRef> snapCmd;
															#line 2333 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	UID snapUID;
															#line 16686 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
};
// This generated class is to be used only via mgmtSnapCreate()
															#line 2333 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class MgmtSnapCreateActor final : public Actor<Void>, public ActorCallback< MgmtSnapCreateActor, 0, Void >, public FastAllocated<MgmtSnapCreateActor>, public MgmtSnapCreateActorState<MgmtSnapCreateActor> {
															#line 16691 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
	using FastAllocated<MgmtSnapCreateActor>::operator new;
	using FastAllocated<MgmtSnapCreateActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< MgmtSnapCreateActor, 0, Void >;
															#line 2333 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	MgmtSnapCreateActor(Database const& cx,Standalone<StringRef> const& snapCmd,UID const& snapUID) 
															#line 16702 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		 : Actor<Void>(),
		   MgmtSnapCreateActorState<MgmtSnapCreateActor>(cx, snapCmd, snapUID)
	{
		fdb_probe_actor_enter("mgmtSnapCreate", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("mgmtSnapCreate");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("mgmtSnapCreate", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< MgmtSnapCreateActor, 0, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 2333 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
[[nodiscard]] Future<Void> mgmtSnapCreate( Database const& cx, Standalone<StringRef> const& snapCmd, UID const& snapUID ) {
															#line 2333 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	return Future<Void>(new MgmtSnapCreateActor(cx, snapCmd, snapUID));
															#line 16730 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
}

#line 2343 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"

															#line 16735 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via waitForFullReplication()
															#line 2344 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
template <class WaitForFullReplicationActor>
															#line 2344 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class WaitForFullReplicationActorState {
															#line 16742 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
															#line 2344 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	WaitForFullReplicationActorState(Database const& cx) 
															#line 2344 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
															#line 2344 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		 : cx(cx),
															#line 2345 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   tr(cx)
															#line 16751 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("waitForFullReplication", reinterpret_cast<unsigned long>(this));

	}
	~WaitForFullReplicationActorState() 
	{
		fdb_probe_actor_destroy("waitForFullReplication", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 2346 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			;
															#line 16766 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~WaitForFullReplicationActorState();
		static_cast<WaitForFullReplicationActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
		try {
															#line 2348 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr.setOption(FDBTransactionOptions::READ_SYSTEM_KEYS);
															#line 2349 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr.setOption(FDBTransactionOptions::PRIORITY_SYSTEM_IMMEDIATE);
															#line 2350 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr.setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 2352 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<RangeResult> __when_expr_0 = tr.getRange(configKeys, CLIENT_KNOBS->TOO_MANY);
															#line 2352 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<WaitForFullReplicationActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 16805 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1loopBody1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
			static_cast<WaitForFullReplicationActor*>(this)->actor_wait_state = 1;
															#line 2352 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< WaitForFullReplicationActor, 0, RangeResult >*>(static_cast<WaitForFullReplicationActor*>(this)));
															#line 16810 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 2379 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Void> __when_expr_4 = tr.onError(e);
															#line 2379 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<WaitForFullReplicationActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 16834 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1Catch1(__when_expr_4.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1Catch1when1(__when_expr_4.get(), loopDepth); };
			static_cast<WaitForFullReplicationActor*>(this)->actor_wait_state = 5;
															#line 2379 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< WaitForFullReplicationActor, 4, Void >*>(static_cast<WaitForFullReplicationActor*>(this)));
															#line 16839 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(RangeResult const& confResults,int loopDepth) 
	{
															#line 2353 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		ASSERT(!confResults.more && confResults.size() < CLIENT_KNOBS->TOO_MANY);
															#line 2354 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		config = DatabaseConfiguration();
															#line 2355 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		config.fromKeyValues((VectorRef<KeyValueRef>)confResults);
															#line 2357 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		replicasFutures = std::vector<Future<Optional<Value>>>();
															#line 2358 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		for( auto& region : config.regions ) {
															#line 2359 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			replicasFutures.push_back(tr.get(datacenterReplicasKeyFor(region.dcId)));
															#line 16864 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		}
															#line 2361 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		StrictFuture<Void> __when_expr_1 = waitForAll(replicasFutures);
															#line 2361 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (static_cast<WaitForFullReplicationActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 16870 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
		static_cast<WaitForFullReplicationActor*>(this)->actor_wait_state = 2;
															#line 2361 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< WaitForFullReplicationActor, 1, Void >*>(static_cast<WaitForFullReplicationActor*>(this)));
															#line 16875 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2(RangeResult && confResults,int loopDepth) 
	{
															#line 2353 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		ASSERT(!confResults.more && confResults.size() < CLIENT_KNOBS->TOO_MANY);
															#line 2354 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		config = DatabaseConfiguration();
															#line 2355 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		config.fromKeyValues((VectorRef<KeyValueRef>)confResults);
															#line 2357 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		replicasFutures = std::vector<Future<Optional<Value>>>();
															#line 2358 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		for( auto& region : config.regions ) {
															#line 2359 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			replicasFutures.push_back(tr.get(datacenterReplicasKeyFor(region.dcId)));
															#line 16894 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		}
															#line 2361 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		StrictFuture<Void> __when_expr_1 = waitForAll(replicasFutures);
															#line 2361 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (static_cast<WaitForFullReplicationActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 16900 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
		static_cast<WaitForFullReplicationActor*>(this)->actor_wait_state = 2;
															#line 2361 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< WaitForFullReplicationActor, 1, Void >*>(static_cast<WaitForFullReplicationActor*>(this)));
															#line 16905 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1when1(RangeResult const& confResults,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(confResults, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(RangeResult && confResults,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(std::move(confResults), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<WaitForFullReplicationActor*>(this)->actor_wait_state > 0) static_cast<WaitForFullReplicationActor*>(this)->actor_wait_state = 0;
		static_cast<WaitForFullReplicationActor*>(this)->ActorCallback< WaitForFullReplicationActor, 0, RangeResult >::remove();

	}
	void a_callback_fire(ActorCallback< WaitForFullReplicationActor, 0, RangeResult >*,RangeResult const& value) 
	{
		fdb_probe_actor_enter("waitForFullReplication", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitForFullReplication", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< WaitForFullReplicationActor, 0, RangeResult >*,RangeResult && value) 
	{
		fdb_probe_actor_enter("waitForFullReplication", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitForFullReplication", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< WaitForFullReplicationActor, 0, RangeResult >*,Error err) 
	{
		fdb_probe_actor_enter("waitForFullReplication", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitForFullReplication", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1cont3(Void const& _,int loopDepth) 
	{
															#line 2363 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		watchFutures = std::vector<Future<Void>>();
															#line 2364 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		for(int i = 0;i < config.regions.size();i++) {
															#line 2365 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (!replicasFutures[i].get().present() || decodeDatacenterReplicasValue(replicasFutures[i].get().get()) < config.storageTeamSize)
															#line 16981 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 2367 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				watchFutures.push_back(tr.watch(datacenterReplicasKeyFor(config.regions[i].dcId)));
															#line 16985 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			}
		}
															#line 2371 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!watchFutures.size() || (config.usableRegions == 1 && watchFutures.size() < config.regions.size()))
															#line 16990 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 2372 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (!static_cast<WaitForFullReplicationActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~WaitForFullReplicationActorState(); static_cast<WaitForFullReplicationActor*>(this)->destroy(); return 0; }
															#line 16994 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			new (&static_cast<WaitForFullReplicationActor*>(this)->SAV< Void >::value()) Void(Void());
			this->~WaitForFullReplicationActorState();
			static_cast<WaitForFullReplicationActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 2375 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		StrictFuture<Void> __when_expr_2 = tr.commit();
															#line 2375 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (static_cast<WaitForFullReplicationActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 17004 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1loopBody1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1loopBody1cont3when1(__when_expr_2.get(), loopDepth); };
		static_cast<WaitForFullReplicationActor*>(this)->actor_wait_state = 3;
															#line 2375 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< WaitForFullReplicationActor, 2, Void >*>(static_cast<WaitForFullReplicationActor*>(this)));
															#line 17009 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont3(Void && _,int loopDepth) 
	{
															#line 2363 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		watchFutures = std::vector<Future<Void>>();
															#line 2364 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		for(int i = 0;i < config.regions.size();i++) {
															#line 2365 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (!replicasFutures[i].get().present() || decodeDatacenterReplicasValue(replicasFutures[i].get().get()) < config.storageTeamSize)
															#line 17022 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 2367 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				watchFutures.push_back(tr.watch(datacenterReplicasKeyFor(config.regions[i].dcId)));
															#line 17026 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			}
		}
															#line 2371 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!watchFutures.size() || (config.usableRegions == 1 && watchFutures.size() < config.regions.size()))
															#line 17031 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 2372 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (!static_cast<WaitForFullReplicationActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~WaitForFullReplicationActorState(); static_cast<WaitForFullReplicationActor*>(this)->destroy(); return 0; }
															#line 17035 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			new (&static_cast<WaitForFullReplicationActor*>(this)->SAV< Void >::value()) Void(Void());
			this->~WaitForFullReplicationActorState();
			static_cast<WaitForFullReplicationActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 2375 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		StrictFuture<Void> __when_expr_2 = tr.commit();
															#line 2375 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (static_cast<WaitForFullReplicationActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 17045 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1loopBody1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1loopBody1cont3when1(__when_expr_2.get(), loopDepth); };
		static_cast<WaitForFullReplicationActor*>(this)->actor_wait_state = 3;
															#line 2375 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< WaitForFullReplicationActor, 2, Void >*>(static_cast<WaitForFullReplicationActor*>(this)));
															#line 17050 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<WaitForFullReplicationActor*>(this)->actor_wait_state > 0) static_cast<WaitForFullReplicationActor*>(this)->actor_wait_state = 0;
		static_cast<WaitForFullReplicationActor*>(this)->ActorCallback< WaitForFullReplicationActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< WaitForFullReplicationActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("waitForFullReplication", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitForFullReplication", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< WaitForFullReplicationActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("waitForFullReplication", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitForFullReplication", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< WaitForFullReplicationActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("waitForFullReplication", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitForFullReplication", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1loopBody1cont5(Void const& _,int loopDepth) 
	{
															#line 2376 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		StrictFuture<Void> __when_expr_3 = waitForAny(watchFutures);
															#line 2376 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (static_cast<WaitForFullReplicationActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 17124 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1loopBody1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1loopBody1cont5when1(__when_expr_3.get(), loopDepth); };
		static_cast<WaitForFullReplicationActor*>(this)->actor_wait_state = 4;
															#line 2376 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< WaitForFullReplicationActor, 3, Void >*>(static_cast<WaitForFullReplicationActor*>(this)));
															#line 17129 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont5(Void && _,int loopDepth) 
	{
															#line 2376 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		StrictFuture<Void> __when_expr_3 = waitForAny(watchFutures);
															#line 2376 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (static_cast<WaitForFullReplicationActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 17140 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1loopBody1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1loopBody1cont5when1(__when_expr_3.get(), loopDepth); };
		static_cast<WaitForFullReplicationActor*>(this)->actor_wait_state = 4;
															#line 2376 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< WaitForFullReplicationActor, 3, Void >*>(static_cast<WaitForFullReplicationActor*>(this)));
															#line 17145 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont3when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont5(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont3when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont5(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<WaitForFullReplicationActor*>(this)->actor_wait_state > 0) static_cast<WaitForFullReplicationActor*>(this)->actor_wait_state = 0;
		static_cast<WaitForFullReplicationActor*>(this)->ActorCallback< WaitForFullReplicationActor, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< WaitForFullReplicationActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("waitForFullReplication", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont3when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitForFullReplication", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< WaitForFullReplicationActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("waitForFullReplication", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont3when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitForFullReplication", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< WaitForFullReplicationActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("waitForFullReplication", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitForFullReplication", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1loopBody1cont9(Void const& _,int loopDepth) 
	{
															#line 2377 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		tr.reset();
															#line 17217 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont11(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont9(Void && _,int loopDepth) 
	{
															#line 2377 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		tr.reset();
															#line 17226 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont11(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont5when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont9(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont5when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont9(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<WaitForFullReplicationActor*>(this)->actor_wait_state > 0) static_cast<WaitForFullReplicationActor*>(this)->actor_wait_state = 0;
		static_cast<WaitForFullReplicationActor*>(this)->ActorCallback< WaitForFullReplicationActor, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< WaitForFullReplicationActor, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("waitForFullReplication", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1cont5when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitForFullReplication", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< WaitForFullReplicationActor, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("waitForFullReplication", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1cont5when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitForFullReplication", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< WaitForFullReplicationActor, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("waitForFullReplication", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitForFullReplication", reinterpret_cast<unsigned long>(this), 3);

	}
	int a_body1loopBody1cont11(int loopDepth) 
	{
		try {
			loopDepth = a_body1loopBody1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose5() 
	{
		if (static_cast<WaitForFullReplicationActor*>(this)->actor_wait_state > 0) static_cast<WaitForFullReplicationActor*>(this)->actor_wait_state = 0;
		static_cast<WaitForFullReplicationActor*>(this)->ActorCallback< WaitForFullReplicationActor, 4, Void >::remove();

	}
	void a_callback_fire(ActorCallback< WaitForFullReplicationActor, 4, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("waitForFullReplication", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitForFullReplication", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_fire(ActorCallback< WaitForFullReplicationActor, 4, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("waitForFullReplication", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitForFullReplication", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_error(ActorCallback< WaitForFullReplicationActor, 4, Void >*,Error err) 
	{
		fdb_probe_actor_enter("waitForFullReplication", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitForFullReplication", reinterpret_cast<unsigned long>(this), 4);

	}
															#line 2344 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Database cx;
															#line 2345 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	ReadYourWritesTransaction tr;
															#line 2354 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	DatabaseConfiguration config;
															#line 2357 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	std::vector<Future<Optional<Value>>> replicasFutures;
															#line 2363 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	std::vector<Future<Void>> watchFutures;
															#line 17392 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
};
// This generated class is to be used only via waitForFullReplication()
															#line 2344 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class WaitForFullReplicationActor final : public Actor<Void>, public ActorCallback< WaitForFullReplicationActor, 0, RangeResult >, public ActorCallback< WaitForFullReplicationActor, 1, Void >, public ActorCallback< WaitForFullReplicationActor, 2, Void >, public ActorCallback< WaitForFullReplicationActor, 3, Void >, public ActorCallback< WaitForFullReplicationActor, 4, Void >, public FastAllocated<WaitForFullReplicationActor>, public WaitForFullReplicationActorState<WaitForFullReplicationActor> {
															#line 17397 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
	using FastAllocated<WaitForFullReplicationActor>::operator new;
	using FastAllocated<WaitForFullReplicationActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< WaitForFullReplicationActor, 0, RangeResult >;
friend struct ActorCallback< WaitForFullReplicationActor, 1, Void >;
friend struct ActorCallback< WaitForFullReplicationActor, 2, Void >;
friend struct ActorCallback< WaitForFullReplicationActor, 3, Void >;
friend struct ActorCallback< WaitForFullReplicationActor, 4, Void >;
															#line 2344 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	WaitForFullReplicationActor(Database const& cx) 
															#line 17412 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		 : Actor<Void>(),
		   WaitForFullReplicationActorState<WaitForFullReplicationActor>(cx)
	{
		fdb_probe_actor_enter("waitForFullReplication", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("waitForFullReplication");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("waitForFullReplication", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< WaitForFullReplicationActor, 0, RangeResult >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< WaitForFullReplicationActor, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< WaitForFullReplicationActor, 2, Void >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< WaitForFullReplicationActor, 3, Void >*)0, actor_cancelled()); break;
		case 5: this->a_callback_error((ActorCallback< WaitForFullReplicationActor, 4, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 2344 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
[[nodiscard]] Future<Void> waitForFullReplication( Database const& cx ) {
															#line 2344 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	return Future<Void>(new WaitForFullReplicationActor(cx));
															#line 17444 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
}

#line 2383 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"

															#line 17449 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via timeKeeperSetDisable()
															#line 2384 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
template <class TimeKeeperSetDisableActor>
															#line 2384 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class TimeKeeperSetDisableActorState {
															#line 17456 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
															#line 2384 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	TimeKeeperSetDisableActorState(Database const& cx) 
															#line 2384 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
															#line 2384 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		 : cx(cx)
															#line 17463 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("timeKeeperSetDisable", reinterpret_cast<unsigned long>(this));

	}
	~TimeKeeperSetDisableActorState() 
	{
		fdb_probe_actor_destroy("timeKeeperSetDisable", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 2385 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			;
															#line 17478 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~TimeKeeperSetDisableActorState();
		static_cast<TimeKeeperSetDisableActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
															#line 2386 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		tr = Transaction(cx);
															#line 17508 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		try {
															#line 2388 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr.setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 2389 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr.setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 2390 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr.set(timeKeeperDisableKey, StringRef());
															#line 2391 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Void> __when_expr_0 = tr.commit();
															#line 2391 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<TimeKeeperSetDisableActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 17520 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1loopBody1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
			static_cast<TimeKeeperSetDisableActor*>(this)->actor_wait_state = 1;
															#line 2391 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< TimeKeeperSetDisableActor, 0, Void >*>(static_cast<TimeKeeperSetDisableActor*>(this)));
															#line 17525 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 2394 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Void> __when_expr_1 = tr.onError(e);
															#line 2394 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<TimeKeeperSetDisableActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 17549 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1Catch1when1(__when_expr_1.get(), loopDepth); };
			static_cast<TimeKeeperSetDisableActor*>(this)->actor_wait_state = 2;
															#line 2394 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< TimeKeeperSetDisableActor, 1, Void >*>(static_cast<TimeKeeperSetDisableActor*>(this)));
															#line 17554 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(Void const& _,int loopDepth) 
	{
															#line 2392 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<TimeKeeperSetDisableActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~TimeKeeperSetDisableActorState(); static_cast<TimeKeeperSetDisableActor*>(this)->destroy(); return 0; }
															#line 17569 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<TimeKeeperSetDisableActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~TimeKeeperSetDisableActorState();
		static_cast<TimeKeeperSetDisableActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2(Void && _,int loopDepth) 
	{
															#line 2392 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<TimeKeeperSetDisableActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~TimeKeeperSetDisableActorState(); static_cast<TimeKeeperSetDisableActor*>(this)->destroy(); return 0; }
															#line 17581 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<TimeKeeperSetDisableActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~TimeKeeperSetDisableActorState();
		static_cast<TimeKeeperSetDisableActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<TimeKeeperSetDisableActor*>(this)->actor_wait_state > 0) static_cast<TimeKeeperSetDisableActor*>(this)->actor_wait_state = 0;
		static_cast<TimeKeeperSetDisableActor*>(this)->ActorCallback< TimeKeeperSetDisableActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< TimeKeeperSetDisableActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("timeKeeperSetDisable", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("timeKeeperSetDisable", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< TimeKeeperSetDisableActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("timeKeeperSetDisable", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("timeKeeperSetDisable", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< TimeKeeperSetDisableActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("timeKeeperSetDisable", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("timeKeeperSetDisable", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<TimeKeeperSetDisableActor*>(this)->actor_wait_state > 0) static_cast<TimeKeeperSetDisableActor*>(this)->actor_wait_state = 0;
		static_cast<TimeKeeperSetDisableActor*>(this)->ActorCallback< TimeKeeperSetDisableActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< TimeKeeperSetDisableActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("timeKeeperSetDisable", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("timeKeeperSetDisable", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< TimeKeeperSetDisableActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("timeKeeperSetDisable", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("timeKeeperSetDisable", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< TimeKeeperSetDisableActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("timeKeeperSetDisable", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("timeKeeperSetDisable", reinterpret_cast<unsigned long>(this), 1);

	}
															#line 2384 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Database cx;
															#line 2386 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Transaction tr;
															#line 17731 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
};
// This generated class is to be used only via timeKeeperSetDisable()
															#line 2384 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class TimeKeeperSetDisableActor final : public Actor<Void>, public ActorCallback< TimeKeeperSetDisableActor, 0, Void >, public ActorCallback< TimeKeeperSetDisableActor, 1, Void >, public FastAllocated<TimeKeeperSetDisableActor>, public TimeKeeperSetDisableActorState<TimeKeeperSetDisableActor> {
															#line 17736 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
	using FastAllocated<TimeKeeperSetDisableActor>::operator new;
	using FastAllocated<TimeKeeperSetDisableActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< TimeKeeperSetDisableActor, 0, Void >;
friend struct ActorCallback< TimeKeeperSetDisableActor, 1, Void >;
															#line 2384 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	TimeKeeperSetDisableActor(Database const& cx) 
															#line 17748 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		 : Actor<Void>(),
		   TimeKeeperSetDisableActorState<TimeKeeperSetDisableActor>(cx)
	{
		fdb_probe_actor_enter("timeKeeperSetDisable", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("timeKeeperSetDisable");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("timeKeeperSetDisable", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< TimeKeeperSetDisableActor, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< TimeKeeperSetDisableActor, 1, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 2384 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
[[nodiscard]] Future<Void> timeKeeperSetDisable( Database const& cx ) {
															#line 2384 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	return Future<Void>(new TimeKeeperSetDisableActor(cx));
															#line 17777 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
}

#line 2398 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"

															#line 17782 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via lockDatabase()
															#line 2399 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
template <class LockDatabaseActor>
															#line 2399 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class LockDatabaseActorState {
															#line 17789 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
															#line 2399 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	LockDatabaseActorState(Transaction* const& tr,UID const& id) 
															#line 2399 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
															#line 2399 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		 : tr(tr),
															#line 2399 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   id(id)
															#line 17798 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("lockDatabase", reinterpret_cast<unsigned long>(this));

	}
	~LockDatabaseActorState() 
	{
		fdb_probe_actor_destroy("lockDatabase", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 2400 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 2401 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr->setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 2402 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Optional<Value>> __when_expr_0 = tr->get(databaseLockedKey);
															#line 2402 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<LockDatabaseActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 17819 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<LockDatabaseActor*>(this)->actor_wait_state = 1;
															#line 2402 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< LockDatabaseActor, 0, Optional<Value> >*>(static_cast<LockDatabaseActor*>(this)));
															#line 17824 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~LockDatabaseActorState();
		static_cast<LockDatabaseActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Optional<Value> const& val,int loopDepth) 
	{
															#line 2404 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (val.present())
															#line 17847 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 2405 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (BinaryReader::fromStringRef<UID>(val.get().substr(10), Unversioned()) == id)
															#line 17851 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 2406 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				if (!static_cast<LockDatabaseActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~LockDatabaseActorState(); static_cast<LockDatabaseActor*>(this)->destroy(); return 0; }
															#line 17855 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				new (&static_cast<LockDatabaseActor*>(this)->SAV< Void >::value()) Void(Void());
				this->~LockDatabaseActorState();
				static_cast<LockDatabaseActor*>(this)->finishSendAndDelPromiseRef();
				return 0;
			}
			else
			{
															#line 2409 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				return a_body1Catch1(database_locked(), loopDepth);
															#line 17865 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			}
		}
															#line 2413 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		tr->atomicOp(databaseLockedKey, BinaryWriter::toValue(id, Unversioned()).withPrefix("0123456789"_sr).withSuffix("\x00\x00\x00\x00"_sr), MutationRef::SetVersionstampedValue);
															#line 2416 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		tr->addWriteConflictRange(normalKeys);
															#line 2417 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<LockDatabaseActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~LockDatabaseActorState(); static_cast<LockDatabaseActor*>(this)->destroy(); return 0; }
															#line 17874 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<LockDatabaseActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~LockDatabaseActorState();
		static_cast<LockDatabaseActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1(Optional<Value> && val,int loopDepth) 
	{
															#line 2404 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (val.present())
															#line 17886 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 2405 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (BinaryReader::fromStringRef<UID>(val.get().substr(10), Unversioned()) == id)
															#line 17890 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 2406 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				if (!static_cast<LockDatabaseActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~LockDatabaseActorState(); static_cast<LockDatabaseActor*>(this)->destroy(); return 0; }
															#line 17894 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				new (&static_cast<LockDatabaseActor*>(this)->SAV< Void >::value()) Void(Void());
				this->~LockDatabaseActorState();
				static_cast<LockDatabaseActor*>(this)->finishSendAndDelPromiseRef();
				return 0;
			}
			else
			{
															#line 2409 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				return a_body1Catch1(database_locked(), loopDepth);
															#line 17904 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			}
		}
															#line 2413 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		tr->atomicOp(databaseLockedKey, BinaryWriter::toValue(id, Unversioned()).withPrefix("0123456789"_sr).withSuffix("\x00\x00\x00\x00"_sr), MutationRef::SetVersionstampedValue);
															#line 2416 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		tr->addWriteConflictRange(normalKeys);
															#line 2417 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<LockDatabaseActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~LockDatabaseActorState(); static_cast<LockDatabaseActor*>(this)->destroy(); return 0; }
															#line 17913 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<LockDatabaseActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~LockDatabaseActorState();
		static_cast<LockDatabaseActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1when1(Optional<Value> const& val,int loopDepth) 
	{
		loopDepth = a_body1cont1(val, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Optional<Value> && val,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(val), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<LockDatabaseActor*>(this)->actor_wait_state > 0) static_cast<LockDatabaseActor*>(this)->actor_wait_state = 0;
		static_cast<LockDatabaseActor*>(this)->ActorCallback< LockDatabaseActor, 0, Optional<Value> >::remove();

	}
	void a_callback_fire(ActorCallback< LockDatabaseActor, 0, Optional<Value> >*,Optional<Value> const& value) 
	{
		fdb_probe_actor_enter("lockDatabase", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("lockDatabase", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< LockDatabaseActor, 0, Optional<Value> >*,Optional<Value> && value) 
	{
		fdb_probe_actor_enter("lockDatabase", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("lockDatabase", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< LockDatabaseActor, 0, Optional<Value> >*,Error err) 
	{
		fdb_probe_actor_enter("lockDatabase", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("lockDatabase", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 2399 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Transaction* tr;
															#line 2399 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	UID id;
															#line 17988 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
};
// This generated class is to be used only via lockDatabase()
															#line 2399 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class LockDatabaseActor final : public Actor<Void>, public ActorCallback< LockDatabaseActor, 0, Optional<Value> >, public FastAllocated<LockDatabaseActor>, public LockDatabaseActorState<LockDatabaseActor> {
															#line 17993 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
	using FastAllocated<LockDatabaseActor>::operator new;
	using FastAllocated<LockDatabaseActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< LockDatabaseActor, 0, Optional<Value> >;
															#line 2399 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	LockDatabaseActor(Transaction* const& tr,UID const& id) 
															#line 18004 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		 : Actor<Void>(),
		   LockDatabaseActorState<LockDatabaseActor>(tr, id)
	{
		fdb_probe_actor_enter("lockDatabase", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("lockDatabase");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("lockDatabase", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< LockDatabaseActor, 0, Optional<Value> >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 2399 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
[[nodiscard]] Future<Void> lockDatabase( Transaction* const& tr, UID const& id ) {
															#line 2399 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	return Future<Void>(new LockDatabaseActor(tr, id));
															#line 18032 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
}

#line 2419 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"

															#line 18037 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via lockDatabase()
															#line 2420 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
template <class LockDatabaseActor1>
															#line 2420 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class LockDatabaseActor1State {
															#line 18044 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
															#line 2420 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	LockDatabaseActor1State(Reference<ReadYourWritesTransaction> const& tr,UID const& id) 
															#line 2420 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
															#line 2420 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		 : tr(tr),
															#line 2420 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   id(id)
															#line 18053 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("lockDatabase", reinterpret_cast<unsigned long>(this));

	}
	~LockDatabaseActor1State() 
	{
		fdb_probe_actor_destroy("lockDatabase", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 2421 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 2422 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr->setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 2423 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Optional<Value>> __when_expr_0 = tr->get(databaseLockedKey);
															#line 2423 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<LockDatabaseActor1*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 18074 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<LockDatabaseActor1*>(this)->actor_wait_state = 1;
															#line 2423 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< LockDatabaseActor1, 0, Optional<Value> >*>(static_cast<LockDatabaseActor1*>(this)));
															#line 18079 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~LockDatabaseActor1State();
		static_cast<LockDatabaseActor1*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Optional<Value> const& val,int loopDepth) 
	{
															#line 2425 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (val.present())
															#line 18102 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 2426 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (BinaryReader::fromStringRef<UID>(val.get().substr(10), Unversioned()) == id)
															#line 18106 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 2427 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				if (!static_cast<LockDatabaseActor1*>(this)->SAV<Void>::futures) { (void)(Void()); this->~LockDatabaseActor1State(); static_cast<LockDatabaseActor1*>(this)->destroy(); return 0; }
															#line 18110 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				new (&static_cast<LockDatabaseActor1*>(this)->SAV< Void >::value()) Void(Void());
				this->~LockDatabaseActor1State();
				static_cast<LockDatabaseActor1*>(this)->finishSendAndDelPromiseRef();
				return 0;
			}
			else
			{
															#line 2430 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				return a_body1Catch1(database_locked(), loopDepth);
															#line 18120 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			}
		}
															#line 2434 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		tr->atomicOp(databaseLockedKey, BinaryWriter::toValue(id, Unversioned()).withPrefix("0123456789"_sr).withSuffix("\x00\x00\x00\x00"_sr), MutationRef::SetVersionstampedValue);
															#line 2437 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		tr->addWriteConflictRange(normalKeys);
															#line 2438 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<LockDatabaseActor1*>(this)->SAV<Void>::futures) { (void)(Void()); this->~LockDatabaseActor1State(); static_cast<LockDatabaseActor1*>(this)->destroy(); return 0; }
															#line 18129 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<LockDatabaseActor1*>(this)->SAV< Void >::value()) Void(Void());
		this->~LockDatabaseActor1State();
		static_cast<LockDatabaseActor1*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1(Optional<Value> && val,int loopDepth) 
	{
															#line 2425 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (val.present())
															#line 18141 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 2426 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (BinaryReader::fromStringRef<UID>(val.get().substr(10), Unversioned()) == id)
															#line 18145 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 2427 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				if (!static_cast<LockDatabaseActor1*>(this)->SAV<Void>::futures) { (void)(Void()); this->~LockDatabaseActor1State(); static_cast<LockDatabaseActor1*>(this)->destroy(); return 0; }
															#line 18149 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				new (&static_cast<LockDatabaseActor1*>(this)->SAV< Void >::value()) Void(Void());
				this->~LockDatabaseActor1State();
				static_cast<LockDatabaseActor1*>(this)->finishSendAndDelPromiseRef();
				return 0;
			}
			else
			{
															#line 2430 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				return a_body1Catch1(database_locked(), loopDepth);
															#line 18159 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			}
		}
															#line 2434 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		tr->atomicOp(databaseLockedKey, BinaryWriter::toValue(id, Unversioned()).withPrefix("0123456789"_sr).withSuffix("\x00\x00\x00\x00"_sr), MutationRef::SetVersionstampedValue);
															#line 2437 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		tr->addWriteConflictRange(normalKeys);
															#line 2438 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<LockDatabaseActor1*>(this)->SAV<Void>::futures) { (void)(Void()); this->~LockDatabaseActor1State(); static_cast<LockDatabaseActor1*>(this)->destroy(); return 0; }
															#line 18168 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<LockDatabaseActor1*>(this)->SAV< Void >::value()) Void(Void());
		this->~LockDatabaseActor1State();
		static_cast<LockDatabaseActor1*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1when1(Optional<Value> const& val,int loopDepth) 
	{
		loopDepth = a_body1cont1(val, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Optional<Value> && val,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(val), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<LockDatabaseActor1*>(this)->actor_wait_state > 0) static_cast<LockDatabaseActor1*>(this)->actor_wait_state = 0;
		static_cast<LockDatabaseActor1*>(this)->ActorCallback< LockDatabaseActor1, 0, Optional<Value> >::remove();

	}
	void a_callback_fire(ActorCallback< LockDatabaseActor1, 0, Optional<Value> >*,Optional<Value> const& value) 
	{
		fdb_probe_actor_enter("lockDatabase", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("lockDatabase", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< LockDatabaseActor1, 0, Optional<Value> >*,Optional<Value> && value) 
	{
		fdb_probe_actor_enter("lockDatabase", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("lockDatabase", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< LockDatabaseActor1, 0, Optional<Value> >*,Error err) 
	{
		fdb_probe_actor_enter("lockDatabase", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("lockDatabase", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 2420 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 2420 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	UID id;
															#line 18243 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
};
// This generated class is to be used only via lockDatabase()
															#line 2420 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class LockDatabaseActor1 final : public Actor<Void>, public ActorCallback< LockDatabaseActor1, 0, Optional<Value> >, public FastAllocated<LockDatabaseActor1>, public LockDatabaseActor1State<LockDatabaseActor1> {
															#line 18248 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
	using FastAllocated<LockDatabaseActor1>::operator new;
	using FastAllocated<LockDatabaseActor1>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< LockDatabaseActor1, 0, Optional<Value> >;
															#line 2420 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	LockDatabaseActor1(Reference<ReadYourWritesTransaction> const& tr,UID const& id) 
															#line 18259 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		 : Actor<Void>(),
		   LockDatabaseActor1State<LockDatabaseActor1>(tr, id)
	{
		fdb_probe_actor_enter("lockDatabase", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("lockDatabase");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("lockDatabase", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< LockDatabaseActor1, 0, Optional<Value> >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 2420 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
[[nodiscard]] Future<Void> lockDatabase( Reference<ReadYourWritesTransaction> const& tr, UID const& id ) {
															#line 2420 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	return Future<Void>(new LockDatabaseActor1(tr, id));
															#line 18287 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
}

#line 2440 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"

															#line 18292 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via lockDatabase()
															#line 2441 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
template <class LockDatabaseActor2>
															#line 2441 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class LockDatabaseActor2State {
															#line 18299 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
															#line 2441 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	LockDatabaseActor2State(Database const& cx,UID const& id) 
															#line 2441 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
															#line 2441 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		 : cx(cx),
															#line 2441 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   id(id),
															#line 2442 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   tr(cx)
															#line 18310 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("lockDatabase", reinterpret_cast<unsigned long>(this));

	}
	~LockDatabaseActor2State() 
	{
		fdb_probe_actor_destroy("lockDatabase", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 2443 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			UID debugID = deterministicRandom()->randomUniqueID();
															#line 2444 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			TraceEvent("LockDatabaseTransaction", debugID).log();
															#line 2445 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr.debugTransaction(debugID);
															#line 2446 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			;
															#line 18331 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~LockDatabaseActor2State();
		static_cast<LockDatabaseActor2*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
		try {
															#line 2448 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Void> __when_expr_0 = lockDatabase(&tr, id);
															#line 2448 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<LockDatabaseActor2*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 18364 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1loopBody1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
			static_cast<LockDatabaseActor2*>(this)->actor_wait_state = 1;
															#line 2448 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< LockDatabaseActor2, 0, Void >*>(static_cast<LockDatabaseActor2*>(this)));
															#line 18369 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 2452 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (e.code() == error_code_database_locked)
															#line 18391 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 2453 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				return a_body1Catch1(e, std::max(0, loopDepth - 1));
															#line 18395 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			}
															#line 2454 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Void> __when_expr_2 = tr.onError(e);
															#line 2454 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<LockDatabaseActor2*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 18401 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1Catch1when1(__when_expr_2.get(), loopDepth); };
			static_cast<LockDatabaseActor2*>(this)->actor_wait_state = 3;
															#line 2454 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< LockDatabaseActor2, 2, Void >*>(static_cast<LockDatabaseActor2*>(this)));
															#line 18406 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(Void const& _,int loopDepth) 
	{
															#line 2449 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		StrictFuture<Void> __when_expr_1 = tr.commit();
															#line 2449 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (static_cast<LockDatabaseActor2*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 18423 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
		static_cast<LockDatabaseActor2*>(this)->actor_wait_state = 2;
															#line 2449 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< LockDatabaseActor2, 1, Void >*>(static_cast<LockDatabaseActor2*>(this)));
															#line 18428 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2(Void && _,int loopDepth) 
	{
															#line 2449 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		StrictFuture<Void> __when_expr_1 = tr.commit();
															#line 2449 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (static_cast<LockDatabaseActor2*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 18439 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
		static_cast<LockDatabaseActor2*>(this)->actor_wait_state = 2;
															#line 2449 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< LockDatabaseActor2, 1, Void >*>(static_cast<LockDatabaseActor2*>(this)));
															#line 18444 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<LockDatabaseActor2*>(this)->actor_wait_state > 0) static_cast<LockDatabaseActor2*>(this)->actor_wait_state = 0;
		static_cast<LockDatabaseActor2*>(this)->ActorCallback< LockDatabaseActor2, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< LockDatabaseActor2, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("lockDatabase", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("lockDatabase", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< LockDatabaseActor2, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("lockDatabase", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("lockDatabase", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< LockDatabaseActor2, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("lockDatabase", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("lockDatabase", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1cont3(Void const& _,int loopDepth) 
	{
															#line 2450 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<LockDatabaseActor2*>(this)->SAV<Void>::futures) { (void)(Void()); this->~LockDatabaseActor2State(); static_cast<LockDatabaseActor2*>(this)->destroy(); return 0; }
															#line 18516 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<LockDatabaseActor2*>(this)->SAV< Void >::value()) Void(Void());
		this->~LockDatabaseActor2State();
		static_cast<LockDatabaseActor2*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1cont3(Void && _,int loopDepth) 
	{
															#line 2450 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<LockDatabaseActor2*>(this)->SAV<Void>::futures) { (void)(Void()); this->~LockDatabaseActor2State(); static_cast<LockDatabaseActor2*>(this)->destroy(); return 0; }
															#line 18528 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<LockDatabaseActor2*>(this)->SAV< Void >::value()) Void(Void());
		this->~LockDatabaseActor2State();
		static_cast<LockDatabaseActor2*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<LockDatabaseActor2*>(this)->actor_wait_state > 0) static_cast<LockDatabaseActor2*>(this)->actor_wait_state = 0;
		static_cast<LockDatabaseActor2*>(this)->ActorCallback< LockDatabaseActor2, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< LockDatabaseActor2, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("lockDatabase", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("lockDatabase", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< LockDatabaseActor2, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("lockDatabase", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("lockDatabase", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< LockDatabaseActor2, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("lockDatabase", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("lockDatabase", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<LockDatabaseActor2*>(this)->actor_wait_state > 0) static_cast<LockDatabaseActor2*>(this)->actor_wait_state = 0;
		static_cast<LockDatabaseActor2*>(this)->ActorCallback< LockDatabaseActor2, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< LockDatabaseActor2, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("lockDatabase", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("lockDatabase", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< LockDatabaseActor2, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("lockDatabase", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("lockDatabase", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< LockDatabaseActor2, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("lockDatabase", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("lockDatabase", reinterpret_cast<unsigned long>(this), 2);

	}
															#line 2441 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Database cx;
															#line 2441 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	UID id;
															#line 2442 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Transaction tr;
															#line 18680 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
};
// This generated class is to be used only via lockDatabase()
															#line 2441 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class LockDatabaseActor2 final : public Actor<Void>, public ActorCallback< LockDatabaseActor2, 0, Void >, public ActorCallback< LockDatabaseActor2, 1, Void >, public ActorCallback< LockDatabaseActor2, 2, Void >, public FastAllocated<LockDatabaseActor2>, public LockDatabaseActor2State<LockDatabaseActor2> {
															#line 18685 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
	using FastAllocated<LockDatabaseActor2>::operator new;
	using FastAllocated<LockDatabaseActor2>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< LockDatabaseActor2, 0, Void >;
friend struct ActorCallback< LockDatabaseActor2, 1, Void >;
friend struct ActorCallback< LockDatabaseActor2, 2, Void >;
															#line 2441 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	LockDatabaseActor2(Database const& cx,UID const& id) 
															#line 18698 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		 : Actor<Void>(),
		   LockDatabaseActor2State<LockDatabaseActor2>(cx, id)
	{
		fdb_probe_actor_enter("lockDatabase", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("lockDatabase");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("lockDatabase", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< LockDatabaseActor2, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< LockDatabaseActor2, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< LockDatabaseActor2, 2, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 2441 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
[[nodiscard]] Future<Void> lockDatabase( Database const& cx, UID const& id ) {
															#line 2441 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	return Future<Void>(new LockDatabaseActor2(cx, id));
															#line 18728 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
}

#line 2458 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"

															#line 18733 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via unlockDatabase()
															#line 2459 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
template <class UnlockDatabaseActor>
															#line 2459 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class UnlockDatabaseActorState {
															#line 18740 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
															#line 2459 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	UnlockDatabaseActorState(Transaction* const& tr,UID const& id) 
															#line 2459 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
															#line 2459 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		 : tr(tr),
															#line 2459 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   id(id)
															#line 18749 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("unlockDatabase", reinterpret_cast<unsigned long>(this));

	}
	~UnlockDatabaseActorState() 
	{
		fdb_probe_actor_destroy("unlockDatabase", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 2460 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 2461 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr->setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 2462 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Optional<Value>> __when_expr_0 = tr->get(databaseLockedKey);
															#line 2462 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<UnlockDatabaseActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 18770 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<UnlockDatabaseActor*>(this)->actor_wait_state = 1;
															#line 2462 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< UnlockDatabaseActor, 0, Optional<Value> >*>(static_cast<UnlockDatabaseActor*>(this)));
															#line 18775 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~UnlockDatabaseActorState();
		static_cast<UnlockDatabaseActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Optional<Value> const& val,int loopDepth) 
	{
															#line 2464 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!val.present())
															#line 18798 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 2465 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (!static_cast<UnlockDatabaseActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~UnlockDatabaseActorState(); static_cast<UnlockDatabaseActor*>(this)->destroy(); return 0; }
															#line 18802 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			new (&static_cast<UnlockDatabaseActor*>(this)->SAV< Void >::value()) Void(Void());
			this->~UnlockDatabaseActorState();
			static_cast<UnlockDatabaseActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 2467 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (val.present() && BinaryReader::fromStringRef<UID>(val.get().substr(10), Unversioned()) != id)
															#line 18810 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 2469 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			return a_body1Catch1(database_locked(), loopDepth);
															#line 18814 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		}
															#line 2472 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		tr->clear(singleKeyRange(databaseLockedKey));
															#line 2473 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<UnlockDatabaseActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~UnlockDatabaseActorState(); static_cast<UnlockDatabaseActor*>(this)->destroy(); return 0; }
															#line 18820 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<UnlockDatabaseActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~UnlockDatabaseActorState();
		static_cast<UnlockDatabaseActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1(Optional<Value> && val,int loopDepth) 
	{
															#line 2464 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!val.present())
															#line 18832 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 2465 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (!static_cast<UnlockDatabaseActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~UnlockDatabaseActorState(); static_cast<UnlockDatabaseActor*>(this)->destroy(); return 0; }
															#line 18836 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			new (&static_cast<UnlockDatabaseActor*>(this)->SAV< Void >::value()) Void(Void());
			this->~UnlockDatabaseActorState();
			static_cast<UnlockDatabaseActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 2467 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (val.present() && BinaryReader::fromStringRef<UID>(val.get().substr(10), Unversioned()) != id)
															#line 18844 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 2469 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			return a_body1Catch1(database_locked(), loopDepth);
															#line 18848 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		}
															#line 2472 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		tr->clear(singleKeyRange(databaseLockedKey));
															#line 2473 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<UnlockDatabaseActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~UnlockDatabaseActorState(); static_cast<UnlockDatabaseActor*>(this)->destroy(); return 0; }
															#line 18854 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<UnlockDatabaseActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~UnlockDatabaseActorState();
		static_cast<UnlockDatabaseActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1when1(Optional<Value> const& val,int loopDepth) 
	{
		loopDepth = a_body1cont1(val, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Optional<Value> && val,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(val), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<UnlockDatabaseActor*>(this)->actor_wait_state > 0) static_cast<UnlockDatabaseActor*>(this)->actor_wait_state = 0;
		static_cast<UnlockDatabaseActor*>(this)->ActorCallback< UnlockDatabaseActor, 0, Optional<Value> >::remove();

	}
	void a_callback_fire(ActorCallback< UnlockDatabaseActor, 0, Optional<Value> >*,Optional<Value> const& value) 
	{
		fdb_probe_actor_enter("unlockDatabase", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("unlockDatabase", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< UnlockDatabaseActor, 0, Optional<Value> >*,Optional<Value> && value) 
	{
		fdb_probe_actor_enter("unlockDatabase", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("unlockDatabase", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< UnlockDatabaseActor, 0, Optional<Value> >*,Error err) 
	{
		fdb_probe_actor_enter("unlockDatabase", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("unlockDatabase", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 2459 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Transaction* tr;
															#line 2459 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	UID id;
															#line 18929 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
};
// This generated class is to be used only via unlockDatabase()
															#line 2459 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class UnlockDatabaseActor final : public Actor<Void>, public ActorCallback< UnlockDatabaseActor, 0, Optional<Value> >, public FastAllocated<UnlockDatabaseActor>, public UnlockDatabaseActorState<UnlockDatabaseActor> {
															#line 18934 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
	using FastAllocated<UnlockDatabaseActor>::operator new;
	using FastAllocated<UnlockDatabaseActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< UnlockDatabaseActor, 0, Optional<Value> >;
															#line 2459 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	UnlockDatabaseActor(Transaction* const& tr,UID const& id) 
															#line 18945 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		 : Actor<Void>(),
		   UnlockDatabaseActorState<UnlockDatabaseActor>(tr, id)
	{
		fdb_probe_actor_enter("unlockDatabase", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("unlockDatabase");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("unlockDatabase", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< UnlockDatabaseActor, 0, Optional<Value> >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 2459 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
[[nodiscard]] Future<Void> unlockDatabase( Transaction* const& tr, UID const& id ) {
															#line 2459 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	return Future<Void>(new UnlockDatabaseActor(tr, id));
															#line 18973 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
}

#line 2475 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"

															#line 18978 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via unlockDatabase()
															#line 2476 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
template <class UnlockDatabaseActor1>
															#line 2476 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class UnlockDatabaseActor1State {
															#line 18985 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
															#line 2476 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	UnlockDatabaseActor1State(Reference<ReadYourWritesTransaction> const& tr,UID const& id) 
															#line 2476 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
															#line 2476 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		 : tr(tr),
															#line 2476 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   id(id)
															#line 18994 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("unlockDatabase", reinterpret_cast<unsigned long>(this));

	}
	~UnlockDatabaseActor1State() 
	{
		fdb_probe_actor_destroy("unlockDatabase", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 2477 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 2478 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr->setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 2479 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Optional<Value>> __when_expr_0 = tr->get(databaseLockedKey);
															#line 2479 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<UnlockDatabaseActor1*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 19015 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<UnlockDatabaseActor1*>(this)->actor_wait_state = 1;
															#line 2479 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< UnlockDatabaseActor1, 0, Optional<Value> >*>(static_cast<UnlockDatabaseActor1*>(this)));
															#line 19020 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~UnlockDatabaseActor1State();
		static_cast<UnlockDatabaseActor1*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Optional<Value> const& val,int loopDepth) 
	{
															#line 2481 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!val.present())
															#line 19043 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 2482 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (!static_cast<UnlockDatabaseActor1*>(this)->SAV<Void>::futures) { (void)(Void()); this->~UnlockDatabaseActor1State(); static_cast<UnlockDatabaseActor1*>(this)->destroy(); return 0; }
															#line 19047 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			new (&static_cast<UnlockDatabaseActor1*>(this)->SAV< Void >::value()) Void(Void());
			this->~UnlockDatabaseActor1State();
			static_cast<UnlockDatabaseActor1*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 2484 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (val.present() && BinaryReader::fromStringRef<UID>(val.get().substr(10), Unversioned()) != id)
															#line 19055 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 2486 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			return a_body1Catch1(database_locked(), loopDepth);
															#line 19059 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		}
															#line 2489 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		tr->clear(singleKeyRange(databaseLockedKey));
															#line 2490 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<UnlockDatabaseActor1*>(this)->SAV<Void>::futures) { (void)(Void()); this->~UnlockDatabaseActor1State(); static_cast<UnlockDatabaseActor1*>(this)->destroy(); return 0; }
															#line 19065 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<UnlockDatabaseActor1*>(this)->SAV< Void >::value()) Void(Void());
		this->~UnlockDatabaseActor1State();
		static_cast<UnlockDatabaseActor1*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1(Optional<Value> && val,int loopDepth) 
	{
															#line 2481 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!val.present())
															#line 19077 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 2482 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (!static_cast<UnlockDatabaseActor1*>(this)->SAV<Void>::futures) { (void)(Void()); this->~UnlockDatabaseActor1State(); static_cast<UnlockDatabaseActor1*>(this)->destroy(); return 0; }
															#line 19081 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			new (&static_cast<UnlockDatabaseActor1*>(this)->SAV< Void >::value()) Void(Void());
			this->~UnlockDatabaseActor1State();
			static_cast<UnlockDatabaseActor1*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 2484 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (val.present() && BinaryReader::fromStringRef<UID>(val.get().substr(10), Unversioned()) != id)
															#line 19089 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 2486 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			return a_body1Catch1(database_locked(), loopDepth);
															#line 19093 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		}
															#line 2489 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		tr->clear(singleKeyRange(databaseLockedKey));
															#line 2490 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<UnlockDatabaseActor1*>(this)->SAV<Void>::futures) { (void)(Void()); this->~UnlockDatabaseActor1State(); static_cast<UnlockDatabaseActor1*>(this)->destroy(); return 0; }
															#line 19099 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<UnlockDatabaseActor1*>(this)->SAV< Void >::value()) Void(Void());
		this->~UnlockDatabaseActor1State();
		static_cast<UnlockDatabaseActor1*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1when1(Optional<Value> const& val,int loopDepth) 
	{
		loopDepth = a_body1cont1(val, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Optional<Value> && val,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(val), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<UnlockDatabaseActor1*>(this)->actor_wait_state > 0) static_cast<UnlockDatabaseActor1*>(this)->actor_wait_state = 0;
		static_cast<UnlockDatabaseActor1*>(this)->ActorCallback< UnlockDatabaseActor1, 0, Optional<Value> >::remove();

	}
	void a_callback_fire(ActorCallback< UnlockDatabaseActor1, 0, Optional<Value> >*,Optional<Value> const& value) 
	{
		fdb_probe_actor_enter("unlockDatabase", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("unlockDatabase", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< UnlockDatabaseActor1, 0, Optional<Value> >*,Optional<Value> && value) 
	{
		fdb_probe_actor_enter("unlockDatabase", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("unlockDatabase", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< UnlockDatabaseActor1, 0, Optional<Value> >*,Error err) 
	{
		fdb_probe_actor_enter("unlockDatabase", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("unlockDatabase", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 2476 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 2476 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	UID id;
															#line 19174 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
};
// This generated class is to be used only via unlockDatabase()
															#line 2476 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class UnlockDatabaseActor1 final : public Actor<Void>, public ActorCallback< UnlockDatabaseActor1, 0, Optional<Value> >, public FastAllocated<UnlockDatabaseActor1>, public UnlockDatabaseActor1State<UnlockDatabaseActor1> {
															#line 19179 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
	using FastAllocated<UnlockDatabaseActor1>::operator new;
	using FastAllocated<UnlockDatabaseActor1>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< UnlockDatabaseActor1, 0, Optional<Value> >;
															#line 2476 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	UnlockDatabaseActor1(Reference<ReadYourWritesTransaction> const& tr,UID const& id) 
															#line 19190 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		 : Actor<Void>(),
		   UnlockDatabaseActor1State<UnlockDatabaseActor1>(tr, id)
	{
		fdb_probe_actor_enter("unlockDatabase", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("unlockDatabase");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("unlockDatabase", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< UnlockDatabaseActor1, 0, Optional<Value> >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 2476 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
[[nodiscard]] Future<Void> unlockDatabase( Reference<ReadYourWritesTransaction> const& tr, UID const& id ) {
															#line 2476 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	return Future<Void>(new UnlockDatabaseActor1(tr, id));
															#line 19218 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
}

#line 2492 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"

															#line 19223 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via unlockDatabase()
															#line 2493 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
template <class UnlockDatabaseActor2>
															#line 2493 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class UnlockDatabaseActor2State {
															#line 19230 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
															#line 2493 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	UnlockDatabaseActor2State(Database const& cx,UID const& id) 
															#line 2493 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
															#line 2493 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		 : cx(cx),
															#line 2493 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   id(id),
															#line 2494 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   tr(cx)
															#line 19241 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("unlockDatabase", reinterpret_cast<unsigned long>(this));

	}
	~UnlockDatabaseActor2State() 
	{
		fdb_probe_actor_destroy("unlockDatabase", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 2495 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			;
															#line 19256 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~UnlockDatabaseActor2State();
		static_cast<UnlockDatabaseActor2*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
		try {
															#line 2497 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Void> __when_expr_0 = unlockDatabase(&tr, id);
															#line 2497 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<UnlockDatabaseActor2*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 19289 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1loopBody1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
			static_cast<UnlockDatabaseActor2*>(this)->actor_wait_state = 1;
															#line 2497 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< UnlockDatabaseActor2, 0, Void >*>(static_cast<UnlockDatabaseActor2*>(this)));
															#line 19294 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 2501 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (e.code() == error_code_database_locked)
															#line 19316 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 2502 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				return a_body1Catch1(e, std::max(0, loopDepth - 1));
															#line 19320 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			}
															#line 2503 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Void> __when_expr_2 = tr.onError(e);
															#line 2503 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<UnlockDatabaseActor2*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 19326 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1Catch1when1(__when_expr_2.get(), loopDepth); };
			static_cast<UnlockDatabaseActor2*>(this)->actor_wait_state = 3;
															#line 2503 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< UnlockDatabaseActor2, 2, Void >*>(static_cast<UnlockDatabaseActor2*>(this)));
															#line 19331 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(Void const& _,int loopDepth) 
	{
															#line 2498 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		StrictFuture<Void> __when_expr_1 = tr.commit();
															#line 2498 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (static_cast<UnlockDatabaseActor2*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 19348 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
		static_cast<UnlockDatabaseActor2*>(this)->actor_wait_state = 2;
															#line 2498 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< UnlockDatabaseActor2, 1, Void >*>(static_cast<UnlockDatabaseActor2*>(this)));
															#line 19353 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2(Void && _,int loopDepth) 
	{
															#line 2498 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		StrictFuture<Void> __when_expr_1 = tr.commit();
															#line 2498 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (static_cast<UnlockDatabaseActor2*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 19364 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
		static_cast<UnlockDatabaseActor2*>(this)->actor_wait_state = 2;
															#line 2498 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< UnlockDatabaseActor2, 1, Void >*>(static_cast<UnlockDatabaseActor2*>(this)));
															#line 19369 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<UnlockDatabaseActor2*>(this)->actor_wait_state > 0) static_cast<UnlockDatabaseActor2*>(this)->actor_wait_state = 0;
		static_cast<UnlockDatabaseActor2*>(this)->ActorCallback< UnlockDatabaseActor2, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< UnlockDatabaseActor2, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("unlockDatabase", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("unlockDatabase", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< UnlockDatabaseActor2, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("unlockDatabase", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("unlockDatabase", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< UnlockDatabaseActor2, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("unlockDatabase", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("unlockDatabase", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1cont3(Void const& _,int loopDepth) 
	{
															#line 2499 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<UnlockDatabaseActor2*>(this)->SAV<Void>::futures) { (void)(Void()); this->~UnlockDatabaseActor2State(); static_cast<UnlockDatabaseActor2*>(this)->destroy(); return 0; }
															#line 19441 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<UnlockDatabaseActor2*>(this)->SAV< Void >::value()) Void(Void());
		this->~UnlockDatabaseActor2State();
		static_cast<UnlockDatabaseActor2*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1cont3(Void && _,int loopDepth) 
	{
															#line 2499 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<UnlockDatabaseActor2*>(this)->SAV<Void>::futures) { (void)(Void()); this->~UnlockDatabaseActor2State(); static_cast<UnlockDatabaseActor2*>(this)->destroy(); return 0; }
															#line 19453 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<UnlockDatabaseActor2*>(this)->SAV< Void >::value()) Void(Void());
		this->~UnlockDatabaseActor2State();
		static_cast<UnlockDatabaseActor2*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<UnlockDatabaseActor2*>(this)->actor_wait_state > 0) static_cast<UnlockDatabaseActor2*>(this)->actor_wait_state = 0;
		static_cast<UnlockDatabaseActor2*>(this)->ActorCallback< UnlockDatabaseActor2, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< UnlockDatabaseActor2, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("unlockDatabase", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("unlockDatabase", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< UnlockDatabaseActor2, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("unlockDatabase", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("unlockDatabase", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< UnlockDatabaseActor2, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("unlockDatabase", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("unlockDatabase", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<UnlockDatabaseActor2*>(this)->actor_wait_state > 0) static_cast<UnlockDatabaseActor2*>(this)->actor_wait_state = 0;
		static_cast<UnlockDatabaseActor2*>(this)->ActorCallback< UnlockDatabaseActor2, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< UnlockDatabaseActor2, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("unlockDatabase", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("unlockDatabase", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< UnlockDatabaseActor2, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("unlockDatabase", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("unlockDatabase", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< UnlockDatabaseActor2, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("unlockDatabase", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("unlockDatabase", reinterpret_cast<unsigned long>(this), 2);

	}
															#line 2493 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Database cx;
															#line 2493 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	UID id;
															#line 2494 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Transaction tr;
															#line 19605 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
};
// This generated class is to be used only via unlockDatabase()
															#line 2493 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class UnlockDatabaseActor2 final : public Actor<Void>, public ActorCallback< UnlockDatabaseActor2, 0, Void >, public ActorCallback< UnlockDatabaseActor2, 1, Void >, public ActorCallback< UnlockDatabaseActor2, 2, Void >, public FastAllocated<UnlockDatabaseActor2>, public UnlockDatabaseActor2State<UnlockDatabaseActor2> {
															#line 19610 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
	using FastAllocated<UnlockDatabaseActor2>::operator new;
	using FastAllocated<UnlockDatabaseActor2>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< UnlockDatabaseActor2, 0, Void >;
friend struct ActorCallback< UnlockDatabaseActor2, 1, Void >;
friend struct ActorCallback< UnlockDatabaseActor2, 2, Void >;
															#line 2493 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	UnlockDatabaseActor2(Database const& cx,UID const& id) 
															#line 19623 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		 : Actor<Void>(),
		   UnlockDatabaseActor2State<UnlockDatabaseActor2>(cx, id)
	{
		fdb_probe_actor_enter("unlockDatabase", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("unlockDatabase");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("unlockDatabase", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< UnlockDatabaseActor2, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< UnlockDatabaseActor2, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< UnlockDatabaseActor2, 2, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 2493 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
[[nodiscard]] Future<Void> unlockDatabase( Database const& cx, UID const& id ) {
															#line 2493 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	return Future<Void>(new UnlockDatabaseActor2(cx, id));
															#line 19653 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
}

#line 2507 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"

															#line 19658 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via checkDatabaseLock()
															#line 2508 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
template <class CheckDatabaseLockActor>
															#line 2508 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class CheckDatabaseLockActorState {
															#line 19665 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
															#line 2508 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	CheckDatabaseLockActorState(Transaction* const& tr,UID const& id) 
															#line 2508 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
															#line 2508 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		 : tr(tr),
															#line 2508 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   id(id)
															#line 19674 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("checkDatabaseLock", reinterpret_cast<unsigned long>(this));

	}
	~CheckDatabaseLockActorState() 
	{
		fdb_probe_actor_destroy("checkDatabaseLock", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 2509 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 2510 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr->setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 2511 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Optional<Value>> __when_expr_0 = tr->get(databaseLockedKey);
															#line 2511 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<CheckDatabaseLockActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 19695 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<CheckDatabaseLockActor*>(this)->actor_wait_state = 1;
															#line 2511 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< CheckDatabaseLockActor, 0, Optional<Value> >*>(static_cast<CheckDatabaseLockActor*>(this)));
															#line 19700 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~CheckDatabaseLockActorState();
		static_cast<CheckDatabaseLockActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Optional<Value> const& val,int loopDepth) 
	{
															#line 2513 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (val.present() && BinaryReader::fromStringRef<UID>(val.get().substr(10), Unversioned()) != id)
															#line 19723 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 2515 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			return a_body1Catch1(database_locked(), loopDepth);
															#line 19727 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		}
															#line 2518 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<CheckDatabaseLockActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~CheckDatabaseLockActorState(); static_cast<CheckDatabaseLockActor*>(this)->destroy(); return 0; }
															#line 19731 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<CheckDatabaseLockActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~CheckDatabaseLockActorState();
		static_cast<CheckDatabaseLockActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1(Optional<Value> && val,int loopDepth) 
	{
															#line 2513 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (val.present() && BinaryReader::fromStringRef<UID>(val.get().substr(10), Unversioned()) != id)
															#line 19743 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 2515 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			return a_body1Catch1(database_locked(), loopDepth);
															#line 19747 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		}
															#line 2518 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<CheckDatabaseLockActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~CheckDatabaseLockActorState(); static_cast<CheckDatabaseLockActor*>(this)->destroy(); return 0; }
															#line 19751 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<CheckDatabaseLockActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~CheckDatabaseLockActorState();
		static_cast<CheckDatabaseLockActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1when1(Optional<Value> const& val,int loopDepth) 
	{
		loopDepth = a_body1cont1(val, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Optional<Value> && val,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(val), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<CheckDatabaseLockActor*>(this)->actor_wait_state > 0) static_cast<CheckDatabaseLockActor*>(this)->actor_wait_state = 0;
		static_cast<CheckDatabaseLockActor*>(this)->ActorCallback< CheckDatabaseLockActor, 0, Optional<Value> >::remove();

	}
	void a_callback_fire(ActorCallback< CheckDatabaseLockActor, 0, Optional<Value> >*,Optional<Value> const& value) 
	{
		fdb_probe_actor_enter("checkDatabaseLock", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("checkDatabaseLock", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< CheckDatabaseLockActor, 0, Optional<Value> >*,Optional<Value> && value) 
	{
		fdb_probe_actor_enter("checkDatabaseLock", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("checkDatabaseLock", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< CheckDatabaseLockActor, 0, Optional<Value> >*,Error err) 
	{
		fdb_probe_actor_enter("checkDatabaseLock", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("checkDatabaseLock", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 2508 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Transaction* tr;
															#line 2508 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	UID id;
															#line 19826 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
};
// This generated class is to be used only via checkDatabaseLock()
															#line 2508 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class CheckDatabaseLockActor final : public Actor<Void>, public ActorCallback< CheckDatabaseLockActor, 0, Optional<Value> >, public FastAllocated<CheckDatabaseLockActor>, public CheckDatabaseLockActorState<CheckDatabaseLockActor> {
															#line 19831 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
	using FastAllocated<CheckDatabaseLockActor>::operator new;
	using FastAllocated<CheckDatabaseLockActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< CheckDatabaseLockActor, 0, Optional<Value> >;
															#line 2508 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	CheckDatabaseLockActor(Transaction* const& tr,UID const& id) 
															#line 19842 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		 : Actor<Void>(),
		   CheckDatabaseLockActorState<CheckDatabaseLockActor>(tr, id)
	{
		fdb_probe_actor_enter("checkDatabaseLock", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("checkDatabaseLock");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("checkDatabaseLock", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< CheckDatabaseLockActor, 0, Optional<Value> >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 2508 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
[[nodiscard]] Future<Void> checkDatabaseLock( Transaction* const& tr, UID const& id ) {
															#line 2508 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	return Future<Void>(new CheckDatabaseLockActor(tr, id));
															#line 19870 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
}

#line 2520 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"

															#line 19875 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via checkDatabaseLock()
															#line 2521 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
template <class CheckDatabaseLockActor1>
															#line 2521 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class CheckDatabaseLockActor1State {
															#line 19882 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
															#line 2521 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	CheckDatabaseLockActor1State(Reference<ReadYourWritesTransaction> const& tr,UID const& id) 
															#line 2521 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
															#line 2521 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		 : tr(tr),
															#line 2521 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   id(id)
															#line 19891 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("checkDatabaseLock", reinterpret_cast<unsigned long>(this));

	}
	~CheckDatabaseLockActor1State() 
	{
		fdb_probe_actor_destroy("checkDatabaseLock", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 2522 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 2523 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr->setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 2524 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Optional<Value>> __when_expr_0 = tr->get(databaseLockedKey);
															#line 2524 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<CheckDatabaseLockActor1*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 19912 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<CheckDatabaseLockActor1*>(this)->actor_wait_state = 1;
															#line 2524 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< CheckDatabaseLockActor1, 0, Optional<Value> >*>(static_cast<CheckDatabaseLockActor1*>(this)));
															#line 19917 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~CheckDatabaseLockActor1State();
		static_cast<CheckDatabaseLockActor1*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Optional<Value> const& val,int loopDepth) 
	{
															#line 2526 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (val.present() && BinaryReader::fromStringRef<UID>(val.get().substr(10), Unversioned()) != id)
															#line 19940 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 2528 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			return a_body1Catch1(database_locked(), loopDepth);
															#line 19944 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		}
															#line 2531 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<CheckDatabaseLockActor1*>(this)->SAV<Void>::futures) { (void)(Void()); this->~CheckDatabaseLockActor1State(); static_cast<CheckDatabaseLockActor1*>(this)->destroy(); return 0; }
															#line 19948 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<CheckDatabaseLockActor1*>(this)->SAV< Void >::value()) Void(Void());
		this->~CheckDatabaseLockActor1State();
		static_cast<CheckDatabaseLockActor1*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1(Optional<Value> && val,int loopDepth) 
	{
															#line 2526 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (val.present() && BinaryReader::fromStringRef<UID>(val.get().substr(10), Unversioned()) != id)
															#line 19960 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 2528 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			return a_body1Catch1(database_locked(), loopDepth);
															#line 19964 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		}
															#line 2531 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<CheckDatabaseLockActor1*>(this)->SAV<Void>::futures) { (void)(Void()); this->~CheckDatabaseLockActor1State(); static_cast<CheckDatabaseLockActor1*>(this)->destroy(); return 0; }
															#line 19968 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<CheckDatabaseLockActor1*>(this)->SAV< Void >::value()) Void(Void());
		this->~CheckDatabaseLockActor1State();
		static_cast<CheckDatabaseLockActor1*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1when1(Optional<Value> const& val,int loopDepth) 
	{
		loopDepth = a_body1cont1(val, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Optional<Value> && val,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(val), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<CheckDatabaseLockActor1*>(this)->actor_wait_state > 0) static_cast<CheckDatabaseLockActor1*>(this)->actor_wait_state = 0;
		static_cast<CheckDatabaseLockActor1*>(this)->ActorCallback< CheckDatabaseLockActor1, 0, Optional<Value> >::remove();

	}
	void a_callback_fire(ActorCallback< CheckDatabaseLockActor1, 0, Optional<Value> >*,Optional<Value> const& value) 
	{
		fdb_probe_actor_enter("checkDatabaseLock", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("checkDatabaseLock", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< CheckDatabaseLockActor1, 0, Optional<Value> >*,Optional<Value> && value) 
	{
		fdb_probe_actor_enter("checkDatabaseLock", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("checkDatabaseLock", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< CheckDatabaseLockActor1, 0, Optional<Value> >*,Error err) 
	{
		fdb_probe_actor_enter("checkDatabaseLock", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("checkDatabaseLock", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 2521 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 2521 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	UID id;
															#line 20043 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
};
// This generated class is to be used only via checkDatabaseLock()
															#line 2521 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class CheckDatabaseLockActor1 final : public Actor<Void>, public ActorCallback< CheckDatabaseLockActor1, 0, Optional<Value> >, public FastAllocated<CheckDatabaseLockActor1>, public CheckDatabaseLockActor1State<CheckDatabaseLockActor1> {
															#line 20048 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
	using FastAllocated<CheckDatabaseLockActor1>::operator new;
	using FastAllocated<CheckDatabaseLockActor1>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< CheckDatabaseLockActor1, 0, Optional<Value> >;
															#line 2521 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	CheckDatabaseLockActor1(Reference<ReadYourWritesTransaction> const& tr,UID const& id) 
															#line 20059 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		 : Actor<Void>(),
		   CheckDatabaseLockActor1State<CheckDatabaseLockActor1>(tr, id)
	{
		fdb_probe_actor_enter("checkDatabaseLock", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("checkDatabaseLock");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("checkDatabaseLock", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< CheckDatabaseLockActor1, 0, Optional<Value> >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 2521 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
[[nodiscard]] Future<Void> checkDatabaseLock( Reference<ReadYourWritesTransaction> const& tr, UID const& id ) {
															#line 2521 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	return Future<Void>(new CheckDatabaseLockActor1(tr, id));
															#line 20087 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
}

#line 2533 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"

															#line 20092 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via updateChangeFeed()
															#line 2534 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
template <class UpdateChangeFeedActor>
															#line 2534 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class UpdateChangeFeedActorState {
															#line 20099 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
															#line 2534 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	UpdateChangeFeedActorState(Transaction* const& tr,Key const& rangeID,ChangeFeedStatus const& status,KeyRange const& range) 
															#line 2534 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
															#line 2534 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		 : tr(tr),
															#line 2534 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   rangeID(rangeID),
															#line 2534 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   status(status),
															#line 2534 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   range(range),
															#line 2535 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   rangeIDKey(rangeID.withPrefix(changeFeedPrefix))
															#line 20114 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("updateChangeFeed", reinterpret_cast<unsigned long>(this));

	}
	~UpdateChangeFeedActorState() 
	{
		fdb_probe_actor_destroy("updateChangeFeed", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 2536 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 2538 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Optional<Value>> __when_expr_0 = tr->get(rangeIDKey);
															#line 2538 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<UpdateChangeFeedActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 20133 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<UpdateChangeFeedActor*>(this)->actor_wait_state = 1;
															#line 2538 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< UpdateChangeFeedActor, 0, Optional<Value> >*>(static_cast<UpdateChangeFeedActor*>(this)));
															#line 20138 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~UpdateChangeFeedActorState();
		static_cast<UpdateChangeFeedActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Optional<Value> const& val,int loopDepth) 
	{
															#line 2539 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (status == ChangeFeedStatus::CHANGE_FEED_CREATE)
															#line 20161 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 2540 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (!val.present())
															#line 20165 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 2541 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				tr->set(rangeIDKey, changeFeedValue(range, invalidVersion, status));
															#line 20169 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			}
			else
			{
															#line 2542 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				if (std::get<0>(decodeChangeFeedValue(val.get())) != range)
															#line 20175 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				{
															#line 2543 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
					return a_body1Catch1(unsupported_operation(), loopDepth);
															#line 20179 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				}
			}
		}
		else
		{
															#line 2545 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (status == ChangeFeedStatus::CHANGE_FEED_STOP)
															#line 20187 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 2546 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				if (val.present())
															#line 20191 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				{
															#line 2547 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
					tr->set(rangeIDKey, changeFeedValue(std::get<0>(decodeChangeFeedValue(val.get())), std::get<1>(decodeChangeFeedValue(val.get())), status));
															#line 20195 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				}
				else
				{
															#line 2552 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
					return a_body1Catch1(unsupported_operation(), loopDepth);
															#line 20201 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				}
			}
			else
			{
															#line 2554 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				if (status == ChangeFeedStatus::CHANGE_FEED_DESTROY)
															#line 20208 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				{
															#line 2555 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
					if (val.present())
															#line 20212 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
					{
															#line 2556 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
						if (g_network->isSimulated())
															#line 20216 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
						{
															#line 2557 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
							g_simulator->validationData.allDestroyedChangeFeedIDs.insert(rangeID.toString());
															#line 20220 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
						}
															#line 2559 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
						tr->set(rangeIDKey, changeFeedValue(std::get<0>(decodeChangeFeedValue(val.get())), std::get<1>(decodeChangeFeedValue(val.get())), status));
															#line 2563 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
						tr->clear(rangeIDKey);
															#line 20226 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
					}
				}
			}
		}
															#line 2566 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<UpdateChangeFeedActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~UpdateChangeFeedActorState(); static_cast<UpdateChangeFeedActor*>(this)->destroy(); return 0; }
															#line 20233 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<UpdateChangeFeedActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~UpdateChangeFeedActorState();
		static_cast<UpdateChangeFeedActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1(Optional<Value> && val,int loopDepth) 
	{
															#line 2539 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (status == ChangeFeedStatus::CHANGE_FEED_CREATE)
															#line 20245 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 2540 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (!val.present())
															#line 20249 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 2541 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				tr->set(rangeIDKey, changeFeedValue(range, invalidVersion, status));
															#line 20253 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			}
			else
			{
															#line 2542 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				if (std::get<0>(decodeChangeFeedValue(val.get())) != range)
															#line 20259 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				{
															#line 2543 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
					return a_body1Catch1(unsupported_operation(), loopDepth);
															#line 20263 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				}
			}
		}
		else
		{
															#line 2545 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (status == ChangeFeedStatus::CHANGE_FEED_STOP)
															#line 20271 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 2546 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				if (val.present())
															#line 20275 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				{
															#line 2547 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
					tr->set(rangeIDKey, changeFeedValue(std::get<0>(decodeChangeFeedValue(val.get())), std::get<1>(decodeChangeFeedValue(val.get())), status));
															#line 20279 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				}
				else
				{
															#line 2552 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
					return a_body1Catch1(unsupported_operation(), loopDepth);
															#line 20285 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				}
			}
			else
			{
															#line 2554 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				if (status == ChangeFeedStatus::CHANGE_FEED_DESTROY)
															#line 20292 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				{
															#line 2555 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
					if (val.present())
															#line 20296 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
					{
															#line 2556 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
						if (g_network->isSimulated())
															#line 20300 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
						{
															#line 2557 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
							g_simulator->validationData.allDestroyedChangeFeedIDs.insert(rangeID.toString());
															#line 20304 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
						}
															#line 2559 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
						tr->set(rangeIDKey, changeFeedValue(std::get<0>(decodeChangeFeedValue(val.get())), std::get<1>(decodeChangeFeedValue(val.get())), status));
															#line 2563 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
						tr->clear(rangeIDKey);
															#line 20310 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
					}
				}
			}
		}
															#line 2566 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<UpdateChangeFeedActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~UpdateChangeFeedActorState(); static_cast<UpdateChangeFeedActor*>(this)->destroy(); return 0; }
															#line 20317 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<UpdateChangeFeedActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~UpdateChangeFeedActorState();
		static_cast<UpdateChangeFeedActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1when1(Optional<Value> const& val,int loopDepth) 
	{
		loopDepth = a_body1cont1(val, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Optional<Value> && val,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(val), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<UpdateChangeFeedActor*>(this)->actor_wait_state > 0) static_cast<UpdateChangeFeedActor*>(this)->actor_wait_state = 0;
		static_cast<UpdateChangeFeedActor*>(this)->ActorCallback< UpdateChangeFeedActor, 0, Optional<Value> >::remove();

	}
	void a_callback_fire(ActorCallback< UpdateChangeFeedActor, 0, Optional<Value> >*,Optional<Value> const& value) 
	{
		fdb_probe_actor_enter("updateChangeFeed", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("updateChangeFeed", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< UpdateChangeFeedActor, 0, Optional<Value> >*,Optional<Value> && value) 
	{
		fdb_probe_actor_enter("updateChangeFeed", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("updateChangeFeed", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< UpdateChangeFeedActor, 0, Optional<Value> >*,Error err) 
	{
		fdb_probe_actor_enter("updateChangeFeed", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("updateChangeFeed", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 2534 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Transaction* tr;
															#line 2534 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Key rangeID;
															#line 2534 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	ChangeFeedStatus status;
															#line 2534 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	KeyRange range;
															#line 2535 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Key rangeIDKey;
															#line 20398 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
};
// This generated class is to be used only via updateChangeFeed()
															#line 2534 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class UpdateChangeFeedActor final : public Actor<Void>, public ActorCallback< UpdateChangeFeedActor, 0, Optional<Value> >, public FastAllocated<UpdateChangeFeedActor>, public UpdateChangeFeedActorState<UpdateChangeFeedActor> {
															#line 20403 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
	using FastAllocated<UpdateChangeFeedActor>::operator new;
	using FastAllocated<UpdateChangeFeedActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< UpdateChangeFeedActor, 0, Optional<Value> >;
															#line 2534 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	UpdateChangeFeedActor(Transaction* const& tr,Key const& rangeID,ChangeFeedStatus const& status,KeyRange const& range) 
															#line 20414 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		 : Actor<Void>(),
		   UpdateChangeFeedActorState<UpdateChangeFeedActor>(tr, rangeID, status, range)
	{
		fdb_probe_actor_enter("updateChangeFeed", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("updateChangeFeed");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("updateChangeFeed", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< UpdateChangeFeedActor, 0, Optional<Value> >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 2534 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
[[nodiscard]] Future<Void> updateChangeFeed( Transaction* const& tr, Key const& rangeID, ChangeFeedStatus const& status, KeyRange const& range ) {
															#line 2534 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	return Future<Void>(new UpdateChangeFeedActor(tr, rangeID, status, range));
															#line 20442 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
}

#line 2568 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"

															#line 20447 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via updateChangeFeed()
															#line 2569 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
template <class UpdateChangeFeedActor1>
															#line 2569 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class UpdateChangeFeedActor1State {
															#line 20454 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
															#line 2569 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	UpdateChangeFeedActor1State(Reference<ReadYourWritesTransaction> const& tr,Key const& rangeID,ChangeFeedStatus const& status,KeyRange const& range) 
															#line 2569 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
															#line 2569 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		 : tr(tr),
															#line 2569 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   rangeID(rangeID),
															#line 2569 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   status(status),
															#line 2569 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   range(range),
															#line 2573 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   rangeIDKey(rangeID.withPrefix(changeFeedPrefix))
															#line 20469 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("updateChangeFeed", reinterpret_cast<unsigned long>(this));

	}
	~UpdateChangeFeedActor1State() 
	{
		fdb_probe_actor_destroy("updateChangeFeed", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 2574 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 2576 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Optional<Value>> __when_expr_0 = tr->get(rangeIDKey);
															#line 2576 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<UpdateChangeFeedActor1*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 20488 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<UpdateChangeFeedActor1*>(this)->actor_wait_state = 1;
															#line 2576 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< UpdateChangeFeedActor1, 0, Optional<Value> >*>(static_cast<UpdateChangeFeedActor1*>(this)));
															#line 20493 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~UpdateChangeFeedActor1State();
		static_cast<UpdateChangeFeedActor1*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Optional<Value> const& val,int loopDepth) 
	{
															#line 2577 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (status == ChangeFeedStatus::CHANGE_FEED_CREATE)
															#line 20516 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 2578 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (!val.present())
															#line 20520 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 2579 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				tr->set(rangeIDKey, changeFeedValue(range, invalidVersion, status));
															#line 20524 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			}
			else
			{
															#line 2580 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				if (std::get<0>(decodeChangeFeedValue(val.get())) != range)
															#line 20530 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				{
															#line 2581 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
					return a_body1Catch1(unsupported_operation(), loopDepth);
															#line 20534 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				}
			}
		}
		else
		{
															#line 2583 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (status == ChangeFeedStatus::CHANGE_FEED_STOP)
															#line 20542 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 2584 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				if (val.present())
															#line 20546 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				{
															#line 2585 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
					tr->set(rangeIDKey, changeFeedValue(std::get<0>(decodeChangeFeedValue(val.get())), std::get<1>(decodeChangeFeedValue(val.get())), status));
															#line 20550 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				}
				else
				{
															#line 2590 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
					return a_body1Catch1(unsupported_operation(), loopDepth);
															#line 20556 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				}
			}
			else
			{
															#line 2592 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				if (status == ChangeFeedStatus::CHANGE_FEED_DESTROY)
															#line 20563 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				{
															#line 2593 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
					if (val.present())
															#line 20567 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
					{
															#line 2594 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
						if (g_network->isSimulated())
															#line 20571 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
						{
															#line 2595 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
							g_simulator->validationData.allDestroyedChangeFeedIDs.insert(rangeID.toString());
															#line 20575 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
						}
															#line 2597 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
						tr->set(rangeIDKey, changeFeedValue(std::get<0>(decodeChangeFeedValue(val.get())), std::get<1>(decodeChangeFeedValue(val.get())), status));
															#line 2601 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
						tr->clear(rangeIDKey);
															#line 20581 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
					}
				}
			}
		}
															#line 2604 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<UpdateChangeFeedActor1*>(this)->SAV<Void>::futures) { (void)(Void()); this->~UpdateChangeFeedActor1State(); static_cast<UpdateChangeFeedActor1*>(this)->destroy(); return 0; }
															#line 20588 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<UpdateChangeFeedActor1*>(this)->SAV< Void >::value()) Void(Void());
		this->~UpdateChangeFeedActor1State();
		static_cast<UpdateChangeFeedActor1*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1(Optional<Value> && val,int loopDepth) 
	{
															#line 2577 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (status == ChangeFeedStatus::CHANGE_FEED_CREATE)
															#line 20600 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 2578 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (!val.present())
															#line 20604 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 2579 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				tr->set(rangeIDKey, changeFeedValue(range, invalidVersion, status));
															#line 20608 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			}
			else
			{
															#line 2580 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				if (std::get<0>(decodeChangeFeedValue(val.get())) != range)
															#line 20614 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				{
															#line 2581 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
					return a_body1Catch1(unsupported_operation(), loopDepth);
															#line 20618 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				}
			}
		}
		else
		{
															#line 2583 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (status == ChangeFeedStatus::CHANGE_FEED_STOP)
															#line 20626 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 2584 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				if (val.present())
															#line 20630 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				{
															#line 2585 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
					tr->set(rangeIDKey, changeFeedValue(std::get<0>(decodeChangeFeedValue(val.get())), std::get<1>(decodeChangeFeedValue(val.get())), status));
															#line 20634 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				}
				else
				{
															#line 2590 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
					return a_body1Catch1(unsupported_operation(), loopDepth);
															#line 20640 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				}
			}
			else
			{
															#line 2592 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				if (status == ChangeFeedStatus::CHANGE_FEED_DESTROY)
															#line 20647 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				{
															#line 2593 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
					if (val.present())
															#line 20651 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
					{
															#line 2594 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
						if (g_network->isSimulated())
															#line 20655 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
						{
															#line 2595 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
							g_simulator->validationData.allDestroyedChangeFeedIDs.insert(rangeID.toString());
															#line 20659 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
						}
															#line 2597 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
						tr->set(rangeIDKey, changeFeedValue(std::get<0>(decodeChangeFeedValue(val.get())), std::get<1>(decodeChangeFeedValue(val.get())), status));
															#line 2601 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
						tr->clear(rangeIDKey);
															#line 20665 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
					}
				}
			}
		}
															#line 2604 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<UpdateChangeFeedActor1*>(this)->SAV<Void>::futures) { (void)(Void()); this->~UpdateChangeFeedActor1State(); static_cast<UpdateChangeFeedActor1*>(this)->destroy(); return 0; }
															#line 20672 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<UpdateChangeFeedActor1*>(this)->SAV< Void >::value()) Void(Void());
		this->~UpdateChangeFeedActor1State();
		static_cast<UpdateChangeFeedActor1*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1when1(Optional<Value> const& val,int loopDepth) 
	{
		loopDepth = a_body1cont1(val, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Optional<Value> && val,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(val), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<UpdateChangeFeedActor1*>(this)->actor_wait_state > 0) static_cast<UpdateChangeFeedActor1*>(this)->actor_wait_state = 0;
		static_cast<UpdateChangeFeedActor1*>(this)->ActorCallback< UpdateChangeFeedActor1, 0, Optional<Value> >::remove();

	}
	void a_callback_fire(ActorCallback< UpdateChangeFeedActor1, 0, Optional<Value> >*,Optional<Value> const& value) 
	{
		fdb_probe_actor_enter("updateChangeFeed", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("updateChangeFeed", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< UpdateChangeFeedActor1, 0, Optional<Value> >*,Optional<Value> && value) 
	{
		fdb_probe_actor_enter("updateChangeFeed", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("updateChangeFeed", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< UpdateChangeFeedActor1, 0, Optional<Value> >*,Error err) 
	{
		fdb_probe_actor_enter("updateChangeFeed", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("updateChangeFeed", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 2569 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 2569 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Key rangeID;
															#line 2569 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	ChangeFeedStatus status;
															#line 2569 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	KeyRange range;
															#line 2573 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Key rangeIDKey;
															#line 20753 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
};
// This generated class is to be used only via updateChangeFeed()
															#line 2569 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class UpdateChangeFeedActor1 final : public Actor<Void>, public ActorCallback< UpdateChangeFeedActor1, 0, Optional<Value> >, public FastAllocated<UpdateChangeFeedActor1>, public UpdateChangeFeedActor1State<UpdateChangeFeedActor1> {
															#line 20758 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
	using FastAllocated<UpdateChangeFeedActor1>::operator new;
	using FastAllocated<UpdateChangeFeedActor1>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< UpdateChangeFeedActor1, 0, Optional<Value> >;
															#line 2569 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	UpdateChangeFeedActor1(Reference<ReadYourWritesTransaction> const& tr,Key const& rangeID,ChangeFeedStatus const& status,KeyRange const& range) 
															#line 20769 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		 : Actor<Void>(),
		   UpdateChangeFeedActor1State<UpdateChangeFeedActor1>(tr, rangeID, status, range)
	{
		fdb_probe_actor_enter("updateChangeFeed", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("updateChangeFeed");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("updateChangeFeed", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< UpdateChangeFeedActor1, 0, Optional<Value> >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 2569 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
[[nodiscard]] Future<Void> updateChangeFeed( Reference<ReadYourWritesTransaction> const& tr, Key const& rangeID, ChangeFeedStatus const& status, KeyRange const& range ) {
															#line 2569 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	return Future<Void>(new UpdateChangeFeedActor1(tr, rangeID, status, range));
															#line 20797 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
}

#line 2606 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"

															#line 20802 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via updateChangeFeed()
															#line 2607 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
template <class UpdateChangeFeedActor2>
															#line 2607 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class UpdateChangeFeedActor2State {
															#line 20809 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
															#line 2607 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	UpdateChangeFeedActor2State(Database const& cx,Key const& rangeID,ChangeFeedStatus const& status,KeyRange const& range) 
															#line 2607 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
															#line 2607 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		 : cx(cx),
															#line 2607 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   rangeID(rangeID),
															#line 2607 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   status(status),
															#line 2607 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   range(range),
															#line 2608 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   tr(cx)
															#line 20824 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("updateChangeFeed", reinterpret_cast<unsigned long>(this));

	}
	~UpdateChangeFeedActor2State() 
	{
		fdb_probe_actor_destroy("updateChangeFeed", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 2609 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			;
															#line 20839 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~UpdateChangeFeedActor2State();
		static_cast<UpdateChangeFeedActor2*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
		try {
															#line 2611 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Void> __when_expr_0 = updateChangeFeed(&tr, rangeID, status, range);
															#line 2611 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<UpdateChangeFeedActor2*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 20872 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1loopBody1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
			static_cast<UpdateChangeFeedActor2*>(this)->actor_wait_state = 1;
															#line 2611 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< UpdateChangeFeedActor2, 0, Void >*>(static_cast<UpdateChangeFeedActor2*>(this)));
															#line 20877 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 2615 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Void> __when_expr_2 = tr.onError(e);
															#line 2615 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<UpdateChangeFeedActor2*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 20901 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1Catch1when1(__when_expr_2.get(), loopDepth); };
			static_cast<UpdateChangeFeedActor2*>(this)->actor_wait_state = 3;
															#line 2615 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< UpdateChangeFeedActor2, 2, Void >*>(static_cast<UpdateChangeFeedActor2*>(this)));
															#line 20906 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(Void const& _,int loopDepth) 
	{
															#line 2612 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		StrictFuture<Void> __when_expr_1 = tr.commit();
															#line 2612 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (static_cast<UpdateChangeFeedActor2*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 20923 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
		static_cast<UpdateChangeFeedActor2*>(this)->actor_wait_state = 2;
															#line 2612 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< UpdateChangeFeedActor2, 1, Void >*>(static_cast<UpdateChangeFeedActor2*>(this)));
															#line 20928 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2(Void && _,int loopDepth) 
	{
															#line 2612 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		StrictFuture<Void> __when_expr_1 = tr.commit();
															#line 2612 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (static_cast<UpdateChangeFeedActor2*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 20939 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
		static_cast<UpdateChangeFeedActor2*>(this)->actor_wait_state = 2;
															#line 2612 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< UpdateChangeFeedActor2, 1, Void >*>(static_cast<UpdateChangeFeedActor2*>(this)));
															#line 20944 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<UpdateChangeFeedActor2*>(this)->actor_wait_state > 0) static_cast<UpdateChangeFeedActor2*>(this)->actor_wait_state = 0;
		static_cast<UpdateChangeFeedActor2*>(this)->ActorCallback< UpdateChangeFeedActor2, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< UpdateChangeFeedActor2, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("updateChangeFeed", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("updateChangeFeed", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< UpdateChangeFeedActor2, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("updateChangeFeed", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("updateChangeFeed", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< UpdateChangeFeedActor2, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("updateChangeFeed", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("updateChangeFeed", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1cont3(Void const& _,int loopDepth) 
	{
															#line 2613 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<UpdateChangeFeedActor2*>(this)->SAV<Void>::futures) { (void)(Void()); this->~UpdateChangeFeedActor2State(); static_cast<UpdateChangeFeedActor2*>(this)->destroy(); return 0; }
															#line 21016 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<UpdateChangeFeedActor2*>(this)->SAV< Void >::value()) Void(Void());
		this->~UpdateChangeFeedActor2State();
		static_cast<UpdateChangeFeedActor2*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1cont3(Void && _,int loopDepth) 
	{
															#line 2613 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<UpdateChangeFeedActor2*>(this)->SAV<Void>::futures) { (void)(Void()); this->~UpdateChangeFeedActor2State(); static_cast<UpdateChangeFeedActor2*>(this)->destroy(); return 0; }
															#line 21028 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<UpdateChangeFeedActor2*>(this)->SAV< Void >::value()) Void(Void());
		this->~UpdateChangeFeedActor2State();
		static_cast<UpdateChangeFeedActor2*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<UpdateChangeFeedActor2*>(this)->actor_wait_state > 0) static_cast<UpdateChangeFeedActor2*>(this)->actor_wait_state = 0;
		static_cast<UpdateChangeFeedActor2*>(this)->ActorCallback< UpdateChangeFeedActor2, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< UpdateChangeFeedActor2, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("updateChangeFeed", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("updateChangeFeed", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< UpdateChangeFeedActor2, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("updateChangeFeed", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("updateChangeFeed", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< UpdateChangeFeedActor2, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("updateChangeFeed", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("updateChangeFeed", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<UpdateChangeFeedActor2*>(this)->actor_wait_state > 0) static_cast<UpdateChangeFeedActor2*>(this)->actor_wait_state = 0;
		static_cast<UpdateChangeFeedActor2*>(this)->ActorCallback< UpdateChangeFeedActor2, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< UpdateChangeFeedActor2, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("updateChangeFeed", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("updateChangeFeed", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< UpdateChangeFeedActor2, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("updateChangeFeed", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("updateChangeFeed", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< UpdateChangeFeedActor2, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("updateChangeFeed", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("updateChangeFeed", reinterpret_cast<unsigned long>(this), 2);

	}
															#line 2607 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Database cx;
															#line 2607 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Key rangeID;
															#line 2607 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	ChangeFeedStatus status;
															#line 2607 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	KeyRange range;
															#line 2608 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Transaction tr;
															#line 21184 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
};
// This generated class is to be used only via updateChangeFeed()
															#line 2607 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class UpdateChangeFeedActor2 final : public Actor<Void>, public ActorCallback< UpdateChangeFeedActor2, 0, Void >, public ActorCallback< UpdateChangeFeedActor2, 1, Void >, public ActorCallback< UpdateChangeFeedActor2, 2, Void >, public FastAllocated<UpdateChangeFeedActor2>, public UpdateChangeFeedActor2State<UpdateChangeFeedActor2> {
															#line 21189 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
	using FastAllocated<UpdateChangeFeedActor2>::operator new;
	using FastAllocated<UpdateChangeFeedActor2>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< UpdateChangeFeedActor2, 0, Void >;
friend struct ActorCallback< UpdateChangeFeedActor2, 1, Void >;
friend struct ActorCallback< UpdateChangeFeedActor2, 2, Void >;
															#line 2607 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	UpdateChangeFeedActor2(Database const& cx,Key const& rangeID,ChangeFeedStatus const& status,KeyRange const& range) 
															#line 21202 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		 : Actor<Void>(),
		   UpdateChangeFeedActor2State<UpdateChangeFeedActor2>(cx, rangeID, status, range)
	{
		fdb_probe_actor_enter("updateChangeFeed", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("updateChangeFeed");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("updateChangeFeed", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< UpdateChangeFeedActor2, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< UpdateChangeFeedActor2, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< UpdateChangeFeedActor2, 2, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 2607 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
[[nodiscard]] Future<Void> updateChangeFeed( Database const& cx, Key const& rangeID, ChangeFeedStatus const& status, KeyRange const& range ) {
															#line 2607 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	return Future<Void>(new UpdateChangeFeedActor2(cx, rangeID, status, range));
															#line 21232 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
}

#line 2619 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"

															#line 21237 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via advanceVersion()
															#line 2620 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
template <class AdvanceVersionActor>
															#line 2620 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class AdvanceVersionActorState {
															#line 21244 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
															#line 2620 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	AdvanceVersionActorState(Database const& cx,Version const& v) 
															#line 2620 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
															#line 2620 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		 : cx(cx),
															#line 2620 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   v(v),
															#line 2621 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   tr(cx)
															#line 21255 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("advanceVersion", reinterpret_cast<unsigned long>(this));

	}
	~AdvanceVersionActorState() 
	{
		fdb_probe_actor_destroy("advanceVersion", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 2622 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			;
															#line 21270 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~AdvanceVersionActorState();
		static_cast<AdvanceVersionActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
															#line 2623 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		tr.setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 2624 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		tr.setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 21302 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		try {
															#line 2626 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Version> __when_expr_0 = tr.getReadVersion();
															#line 2626 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<AdvanceVersionActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 21308 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1loopBody1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
			static_cast<AdvanceVersionActor*>(this)->actor_wait_state = 1;
															#line 2626 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< AdvanceVersionActor, 0, Version >*>(static_cast<AdvanceVersionActor*>(this)));
															#line 21313 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 2635 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Void> __when_expr_2 = tr.onError(e);
															#line 2635 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<AdvanceVersionActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 21337 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1Catch1when1(__when_expr_2.get(), loopDepth); };
			static_cast<AdvanceVersionActor*>(this)->actor_wait_state = 3;
															#line 2635 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< AdvanceVersionActor, 2, Void >*>(static_cast<AdvanceVersionActor*>(this)));
															#line 21342 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(Version const& rv,int loopDepth) 
	{
															#line 2627 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (rv <= v)
															#line 21357 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 2628 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr.set(minRequiredCommitVersionKey, BinaryWriter::toValue(v + 1, Unversioned()));
															#line 2629 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Void> __when_expr_1 = tr.commit();
															#line 2629 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<AdvanceVersionActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 21365 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
			static_cast<AdvanceVersionActor*>(this)->actor_wait_state = 2;
															#line 2629 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< AdvanceVersionActor, 1, Void >*>(static_cast<AdvanceVersionActor*>(this)));
															#line 21370 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
															#line 2631 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			fmt::print("Current read version is {}\n", rv);
															#line 2632 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (!static_cast<AdvanceVersionActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~AdvanceVersionActorState(); static_cast<AdvanceVersionActor*>(this)->destroy(); return 0; }
															#line 21379 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			new (&static_cast<AdvanceVersionActor*>(this)->SAV< Void >::value()) Void(Void());
			this->~AdvanceVersionActorState();
			static_cast<AdvanceVersionActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(Version && rv,int loopDepth) 
	{
															#line 2627 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (rv <= v)
															#line 21392 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 2628 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr.set(minRequiredCommitVersionKey, BinaryWriter::toValue(v + 1, Unversioned()));
															#line 2629 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Void> __when_expr_1 = tr.commit();
															#line 2629 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<AdvanceVersionActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 21400 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
			static_cast<AdvanceVersionActor*>(this)->actor_wait_state = 2;
															#line 2629 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< AdvanceVersionActor, 1, Void >*>(static_cast<AdvanceVersionActor*>(this)));
															#line 21405 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
															#line 2631 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			fmt::print("Current read version is {}\n", rv);
															#line 2632 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (!static_cast<AdvanceVersionActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~AdvanceVersionActorState(); static_cast<AdvanceVersionActor*>(this)->destroy(); return 0; }
															#line 21414 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			new (&static_cast<AdvanceVersionActor*>(this)->SAV< Void >::value()) Void(Void());
			this->~AdvanceVersionActorState();
			static_cast<AdvanceVersionActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}

		return loopDepth;
	}
	int a_body1loopBody1when1(Version const& rv,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(rv, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Version && rv,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(std::move(rv), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<AdvanceVersionActor*>(this)->actor_wait_state > 0) static_cast<AdvanceVersionActor*>(this)->actor_wait_state = 0;
		static_cast<AdvanceVersionActor*>(this)->ActorCallback< AdvanceVersionActor, 0, Version >::remove();

	}
	void a_callback_fire(ActorCallback< AdvanceVersionActor, 0, Version >*,Version const& value) 
	{
		fdb_probe_actor_enter("advanceVersion", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("advanceVersion", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< AdvanceVersionActor, 0, Version >*,Version && value) 
	{
		fdb_probe_actor_enter("advanceVersion", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("advanceVersion", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< AdvanceVersionActor, 0, Version >*,Error err) 
	{
		fdb_probe_actor_enter("advanceVersion", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("advanceVersion", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1cont3(int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont6(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont4(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont4(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont4(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont4(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<AdvanceVersionActor*>(this)->actor_wait_state > 0) static_cast<AdvanceVersionActor*>(this)->actor_wait_state = 0;
		static_cast<AdvanceVersionActor*>(this)->ActorCallback< AdvanceVersionActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< AdvanceVersionActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("advanceVersion", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("advanceVersion", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< AdvanceVersionActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("advanceVersion", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("advanceVersion", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< AdvanceVersionActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("advanceVersion", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("advanceVersion", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1loopBody1cont6(int loopDepth) 
	{
		try {
			loopDepth = a_body1loopBody1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<AdvanceVersionActor*>(this)->actor_wait_state > 0) static_cast<AdvanceVersionActor*>(this)->actor_wait_state = 0;
		static_cast<AdvanceVersionActor*>(this)->ActorCallback< AdvanceVersionActor, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< AdvanceVersionActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("advanceVersion", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("advanceVersion", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< AdvanceVersionActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("advanceVersion", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("advanceVersion", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< AdvanceVersionActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("advanceVersion", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("advanceVersion", reinterpret_cast<unsigned long>(this), 2);

	}
															#line 2620 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Database cx;
															#line 2620 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Version v;
															#line 2621 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Transaction tr;
															#line 21661 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
};
// This generated class is to be used only via advanceVersion()
															#line 2620 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class AdvanceVersionActor final : public Actor<Void>, public ActorCallback< AdvanceVersionActor, 0, Version >, public ActorCallback< AdvanceVersionActor, 1, Void >, public ActorCallback< AdvanceVersionActor, 2, Void >, public FastAllocated<AdvanceVersionActor>, public AdvanceVersionActorState<AdvanceVersionActor> {
															#line 21666 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
	using FastAllocated<AdvanceVersionActor>::operator new;
	using FastAllocated<AdvanceVersionActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< AdvanceVersionActor, 0, Version >;
friend struct ActorCallback< AdvanceVersionActor, 1, Void >;
friend struct ActorCallback< AdvanceVersionActor, 2, Void >;
															#line 2620 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	AdvanceVersionActor(Database const& cx,Version const& v) 
															#line 21679 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		 : Actor<Void>(),
		   AdvanceVersionActorState<AdvanceVersionActor>(cx, v)
	{
		fdb_probe_actor_enter("advanceVersion", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("advanceVersion");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("advanceVersion", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< AdvanceVersionActor, 0, Version >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< AdvanceVersionActor, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< AdvanceVersionActor, 2, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 2620 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
[[nodiscard]] Future<Void> advanceVersion( Database const& cx, Version const& v ) {
															#line 2620 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	return Future<Void>(new AdvanceVersionActor(cx, v));
															#line 21709 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
}

#line 2639 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"

															#line 21714 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via forceRecovery()
															#line 2640 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
template <class ForceRecoveryActor>
															#line 2640 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class ForceRecoveryActorState {
															#line 21721 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
															#line 2640 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	ForceRecoveryActorState(Reference<IClusterConnectionRecord> const& clusterFile,Key const& dcId) 
															#line 2640 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
															#line 2640 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		 : clusterFile(clusterFile),
															#line 2640 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   dcId(dcId),
															#line 2641 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   clusterInterface(new AsyncVar<Optional<ClusterInterface>>),
															#line 2642 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   leaderMon(monitorLeader<ClusterInterface>(clusterFile, clusterInterface))
															#line 21734 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("forceRecovery", reinterpret_cast<unsigned long>(this));

	}
	~ForceRecoveryActorState() 
	{
		fdb_probe_actor_destroy("forceRecovery", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 2644 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			;
															#line 21749 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~ForceRecoveryActorState();
		static_cast<ForceRecoveryActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
															#line 2646 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		StrictFuture<Void> __when_expr_0 = clusterInterface->get().present() ? brokenPromiseToNever( clusterInterface->get().get().forceRecovery.getReply(ForceRecoveryRequest(dcId))) : Never();
															#line 2645 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (static_cast<ForceRecoveryActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 21781 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
															#line 2652 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		StrictFuture<Void> __when_expr_1 = clusterInterface->onChange();
															#line 21785 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1when2(__when_expr_1.get(), loopDepth); };
		static_cast<ForceRecoveryActor*>(this)->actor_wait_state = 1;
															#line 2646 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< ForceRecoveryActor, 0, Void >*>(static_cast<ForceRecoveryActor*>(this)));
															#line 2652 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< ForceRecoveryActor, 1, Void >*>(static_cast<ForceRecoveryActor*>(this)));
															#line 21792 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1when1(Void const& _,int loopDepth) 
	{
															#line 2650 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<ForceRecoveryActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~ForceRecoveryActorState(); static_cast<ForceRecoveryActor*>(this)->destroy(); return 0; }
															#line 21807 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<ForceRecoveryActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~ForceRecoveryActorState();
		static_cast<ForceRecoveryActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1when1(Void && _,int loopDepth) 
	{
															#line 2650 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<ForceRecoveryActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~ForceRecoveryActorState(); static_cast<ForceRecoveryActor*>(this)->destroy(); return 0; }
															#line 21819 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<ForceRecoveryActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~ForceRecoveryActorState();
		static_cast<ForceRecoveryActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1when2(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when2(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<ForceRecoveryActor*>(this)->actor_wait_state > 0) static_cast<ForceRecoveryActor*>(this)->actor_wait_state = 0;
		static_cast<ForceRecoveryActor*>(this)->ActorCallback< ForceRecoveryActor, 0, Void >::remove();
		static_cast<ForceRecoveryActor*>(this)->ActorCallback< ForceRecoveryActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< ForceRecoveryActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("forceRecovery", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("forceRecovery", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< ForceRecoveryActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("forceRecovery", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("forceRecovery", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< ForceRecoveryActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("forceRecovery", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("forceRecovery", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< ForceRecoveryActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("forceRecovery", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose1();
		try {
			a_body1loopBody1when2(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("forceRecovery", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< ForceRecoveryActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("forceRecovery", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose1();
		try {
			a_body1loopBody1when2(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("forceRecovery", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< ForceRecoveryActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("forceRecovery", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("forceRecovery", reinterpret_cast<unsigned long>(this), 1);

	}
															#line 2640 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Reference<IClusterConnectionRecord> clusterFile;
															#line 2640 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Key dcId;
															#line 2641 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Reference<AsyncVar<Optional<ClusterInterface>>> clusterInterface;
															#line 2642 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Future<Void> leaderMon;
															#line 21944 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
};
// This generated class is to be used only via forceRecovery()
															#line 2640 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class ForceRecoveryActor final : public Actor<Void>, public ActorCallback< ForceRecoveryActor, 0, Void >, public ActorCallback< ForceRecoveryActor, 1, Void >, public FastAllocated<ForceRecoveryActor>, public ForceRecoveryActorState<ForceRecoveryActor> {
															#line 21949 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
	using FastAllocated<ForceRecoveryActor>::operator new;
	using FastAllocated<ForceRecoveryActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< ForceRecoveryActor, 0, Void >;
friend struct ActorCallback< ForceRecoveryActor, 1, Void >;
															#line 2640 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	ForceRecoveryActor(Reference<IClusterConnectionRecord> const& clusterFile,Key const& dcId) 
															#line 21961 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		 : Actor<Void>(),
		   ForceRecoveryActorState<ForceRecoveryActor>(clusterFile, dcId)
	{
		fdb_probe_actor_enter("forceRecovery", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("forceRecovery");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("forceRecovery", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< ForceRecoveryActor, 0, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 2640 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
[[nodiscard]] Future<Void> forceRecovery( Reference<IClusterConnectionRecord> const& clusterFile, Key const& dcId ) {
															#line 2640 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	return Future<Void>(new ForceRecoveryActor(clusterFile, dcId));
															#line 21989 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
}

#line 2656 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"

															#line 21994 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via auditStorage()
															#line 2657 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
template <class AuditStorageActor>
															#line 2657 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class AuditStorageActorState {
															#line 22001 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
															#line 2657 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	AuditStorageActorState(Reference<IClusterConnectionRecord> const& clusterFile,KeyRange const& range,AuditType const& type,KeyValueStoreType const& engineType,double const& timeoutSeconds) 
															#line 2657 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
															#line 2657 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		 : clusterFile(clusterFile),
															#line 2657 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   range(range),
															#line 2657 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   type(type),
															#line 2657 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   engineType(engineType),
															#line 2657 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   timeoutSeconds(timeoutSeconds),
															#line 2662 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   clusterInterface(new AsyncVar<Optional<ClusterInterface>>),
															#line 2663 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   leaderMon(monitorLeader<ClusterInterface>(clusterFile, clusterInterface))
															#line 22020 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("auditStorage", reinterpret_cast<unsigned long>(this));

	}
	~AuditStorageActorState() 
	{
		fdb_probe_actor_destroy("auditStorage", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 2664 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			TraceEvent(SevVerbose, "ManagementAPIAuditStorageTrigger").detail("AuditType", type).detail("Range", range);
															#line 2665 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			auditId = UID();
															#line 22037 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			try {
															#line 2667 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				;
															#line 22041 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				loopDepth = a_body1loopHead1(loopDepth);
			}
			catch (Error& error) {
				loopDepth = a_body1Catch2(error, loopDepth);
			} catch (...) {
				loopDepth = a_body1Catch2(unknown_error(), loopDepth);
			}
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~AuditStorageActorState();
		static_cast<AuditStorageActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 2687 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<AuditStorageActor*>(this)->SAV<UID>::futures) { (void)(auditId); this->~AuditStorageActorState(); static_cast<AuditStorageActor*>(this)->destroy(); return 0; }
															#line 22070 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<AuditStorageActor*>(this)->SAV< UID >::value()) UID(std::move(auditId)); // state_var_RVO
		this->~AuditStorageActorState();
		static_cast<AuditStorageActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1Catch2(const Error& e,int loopDepth=0) 
	{
		try {
															#line 2679 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			TraceEvent(SevInfo, "ManagementAPIAuditStorageError") .errorUnsuppressed(e) .detail("AuditType", type) .detail("Range", range) .detail("AuditID", auditId);
															#line 2684 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			return a_body1Catch1(e, loopDepth);
															#line 22085 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont2(int loopDepth) 
	{
															#line 2670 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		TraceEvent(SevVerbose, "ManagementAPIAuditStorageBegin").detail("AuditType", type).detail("Range", range);
															#line 2671 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		TriggerAuditRequest req(type, range, engineType);
															#line 2672 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		StrictFuture<UID> __when_expr_1 = timeoutError(clusterInterface->get().get().triggerAudit.getReply(req), timeoutSeconds);
															#line 2672 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (static_cast<AuditStorageActor*>(this)->actor_wait_state < 0) return a_body1Catch2(actor_cancelled(), loopDepth);
															#line 22105 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch2(__when_expr_1.getError(), loopDepth); else return a_body1cont2when1(__when_expr_1.get(), loopDepth); };
		static_cast<AuditStorageActor*>(this)->actor_wait_state = 2;
															#line 2672 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< AuditStorageActor, 1, UID >*>(static_cast<AuditStorageActor*>(this)));
															#line 22110 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
															#line 2667 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!(!clusterInterface->get().present()))
															#line 22126 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
			return a_body1break1(loopDepth==0?0:loopDepth-1); // break
		}
															#line 2668 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		StrictFuture<Void> __when_expr_0 = clusterInterface->onChange();
															#line 2668 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (static_cast<AuditStorageActor*>(this)->actor_wait_state < 0) return a_body1Catch2(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 22134 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch2(__when_expr_0.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
		static_cast<AuditStorageActor*>(this)->actor_wait_state = 1;
															#line 2668 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< AuditStorageActor, 0, Void >*>(static_cast<AuditStorageActor*>(this)));
															#line 22139 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1break1(int loopDepth) 
	{
		try {
			return a_body1cont2(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch2(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch2(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(Void const& _,int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1cont1(Void && _,int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<AuditStorageActor*>(this)->actor_wait_state > 0) static_cast<AuditStorageActor*>(this)->actor_wait_state = 0;
		static_cast<AuditStorageActor*>(this)->ActorCallback< AuditStorageActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< AuditStorageActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("auditStorage", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("auditStorage", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< AuditStorageActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("auditStorage", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("auditStorage", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< AuditStorageActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("auditStorage", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch2(err, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("auditStorage", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont3(UID const& auditId_,int loopDepth) 
	{
															#line 2673 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		auditId = auditId_;
															#line 2674 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		TraceEvent(SevVerbose, "ManagementAPIAuditStorageEnd") .detail("AuditType", type) .detail("Range", range) .detail("AuditID", auditId);
															#line 22238 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = a_body1cont5(loopDepth);

		return loopDepth;
	}
	int a_body1cont3(UID && auditId_,int loopDepth) 
	{
															#line 2673 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		auditId = auditId_;
															#line 2674 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		TraceEvent(SevVerbose, "ManagementAPIAuditStorageEnd") .detail("AuditType", type) .detail("Range", range) .detail("AuditID", auditId);
															#line 22249 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = a_body1cont5(loopDepth);

		return loopDepth;
	}
	int a_body1cont2when1(UID const& auditId_,int loopDepth) 
	{
		loopDepth = a_body1cont3(auditId_, loopDepth);

		return loopDepth;
	}
	int a_body1cont2when1(UID && auditId_,int loopDepth) 
	{
		loopDepth = a_body1cont3(std::move(auditId_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<AuditStorageActor*>(this)->actor_wait_state > 0) static_cast<AuditStorageActor*>(this)->actor_wait_state = 0;
		static_cast<AuditStorageActor*>(this)->ActorCallback< AuditStorageActor, 1, UID >::remove();

	}
	void a_callback_fire(ActorCallback< AuditStorageActor, 1, UID >*,UID const& value) 
	{
		fdb_probe_actor_enter("auditStorage", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("auditStorage", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< AuditStorageActor, 1, UID >*,UID && value) 
	{
		fdb_probe_actor_enter("auditStorage", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("auditStorage", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< AuditStorageActor, 1, UID >*,Error err) 
	{
		fdb_probe_actor_enter("auditStorage", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch2(err, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("auditStorage", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont5(int loopDepth) 
	{
		try {
			loopDepth = a_body1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
															#line 2657 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Reference<IClusterConnectionRecord> clusterFile;
															#line 2657 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	KeyRange range;
															#line 2657 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	AuditType type;
															#line 2657 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	KeyValueStoreType engineType;
															#line 2657 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	double timeoutSeconds;
															#line 2662 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Reference<AsyncVar<Optional<ClusterInterface>>> clusterInterface;
															#line 2663 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Future<Void> leaderMon;
															#line 2665 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	UID auditId;
															#line 22346 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
};
// This generated class is to be used only via auditStorage()
															#line 2657 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class AuditStorageActor final : public Actor<UID>, public ActorCallback< AuditStorageActor, 0, Void >, public ActorCallback< AuditStorageActor, 1, UID >, public FastAllocated<AuditStorageActor>, public AuditStorageActorState<AuditStorageActor> {
															#line 22351 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
	using FastAllocated<AuditStorageActor>::operator new;
	using FastAllocated<AuditStorageActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<UID>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< AuditStorageActor, 0, Void >;
friend struct ActorCallback< AuditStorageActor, 1, UID >;
															#line 2657 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	AuditStorageActor(Reference<IClusterConnectionRecord> const& clusterFile,KeyRange const& range,AuditType const& type,KeyValueStoreType const& engineType,double const& timeoutSeconds) 
															#line 22363 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		 : Actor<UID>(),
		   AuditStorageActorState<AuditStorageActor>(clusterFile, range, type, engineType, timeoutSeconds)
	{
		fdb_probe_actor_enter("auditStorage", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("auditStorage");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("auditStorage", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< AuditStorageActor, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< AuditStorageActor, 1, UID >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 2657 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
[[nodiscard]] Future<UID> auditStorage( Reference<IClusterConnectionRecord> const& clusterFile, KeyRange const& range, AuditType const& type, KeyValueStoreType const& engineType, double const& timeoutSeconds ) {
															#line 2657 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	return Future<UID>(new AuditStorageActor(clusterFile, range, type, engineType, timeoutSeconds));
															#line 22392 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
}

#line 2689 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"

															#line 22397 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via cancelAuditStorage()
															#line 2690 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
template <class CancelAuditStorageActor>
															#line 2690 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class CancelAuditStorageActorState {
															#line 22404 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
															#line 2690 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	CancelAuditStorageActorState(Reference<IClusterConnectionRecord> const& clusterFile,AuditType const& type,UID const& auditId,double const& timeoutSeconds) 
															#line 2690 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
															#line 2690 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		 : clusterFile(clusterFile),
															#line 2690 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   type(type),
															#line 2690 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   auditId(auditId),
															#line 2690 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   timeoutSeconds(timeoutSeconds),
															#line 2694 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   clusterInterface(new AsyncVar<Optional<ClusterInterface>>),
															#line 2695 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   leaderMon(monitorLeader<ClusterInterface>(clusterFile, clusterInterface))
															#line 22421 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("cancelAuditStorage", reinterpret_cast<unsigned long>(this));

	}
	~CancelAuditStorageActorState() 
	{
		fdb_probe_actor_destroy("cancelAuditStorage", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 2696 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			TraceEvent(SevVerbose, "ManagementAPICancelAuditStorageTrigger") .detail("AuditType", type) .detail("AuditId", auditId);
															#line 22436 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			try {
															#line 2700 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				;
															#line 22440 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
				loopDepth = a_body1loopHead1(loopDepth);
			}
			catch (Error& error) {
				loopDepth = a_body1Catch2(error, loopDepth);
			} catch (...) {
				loopDepth = a_body1Catch2(unknown_error(), loopDepth);
			}
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~CancelAuditStorageActorState();
		static_cast<CancelAuditStorageActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 2720 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<CancelAuditStorageActor*>(this)->SAV<UID>::futures) { (void)(auditId); this->~CancelAuditStorageActorState(); static_cast<CancelAuditStorageActor*>(this)->destroy(); return 0; }
															#line 22469 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<CancelAuditStorageActor*>(this)->SAV< UID >::value()) UID(std::move(auditId)); // state_var_RVO
		this->~CancelAuditStorageActorState();
		static_cast<CancelAuditStorageActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1Catch2(const Error& e,int loopDepth=0) 
	{
		try {
															#line 2713 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			TraceEvent(SevInfo, "ManagementAPICancelAuditStorageError") .errorUnsuppressed(e) .detail("AuditType", type) .detail("AuditID", auditId);
															#line 2717 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			return a_body1Catch1(e, loopDepth);
															#line 22484 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont2(int loopDepth) 
	{
															#line 2703 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		TraceEvent(SevVerbose, "ManagementAPICancelAuditStorageBegin") .detail("AuditType", type) .detail("AuditId", auditId);
															#line 2706 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		TriggerAuditRequest req(type, auditId);
															#line 2707 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		StrictFuture<UID> __when_expr_1 = timeoutError(clusterInterface->get().get().triggerAudit.getReply(req), timeoutSeconds);
															#line 2707 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (static_cast<CancelAuditStorageActor*>(this)->actor_wait_state < 0) return a_body1Catch2(actor_cancelled(), loopDepth);
															#line 22504 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch2(__when_expr_1.getError(), loopDepth); else return a_body1cont2when1(__when_expr_1.get(), loopDepth); };
		static_cast<CancelAuditStorageActor*>(this)->actor_wait_state = 2;
															#line 2707 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< CancelAuditStorageActor, 1, UID >*>(static_cast<CancelAuditStorageActor*>(this)));
															#line 22509 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
															#line 2700 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!(!clusterInterface->get().present()))
															#line 22525 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
			return a_body1break1(loopDepth==0?0:loopDepth-1); // break
		}
															#line 2701 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		StrictFuture<Void> __when_expr_0 = clusterInterface->onChange();
															#line 2701 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (static_cast<CancelAuditStorageActor*>(this)->actor_wait_state < 0) return a_body1Catch2(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 22533 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch2(__when_expr_0.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
		static_cast<CancelAuditStorageActor*>(this)->actor_wait_state = 1;
															#line 2701 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< CancelAuditStorageActor, 0, Void >*>(static_cast<CancelAuditStorageActor*>(this)));
															#line 22538 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1break1(int loopDepth) 
	{
		try {
			return a_body1cont2(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch2(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch2(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(Void const& _,int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1cont1(Void && _,int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<CancelAuditStorageActor*>(this)->actor_wait_state > 0) static_cast<CancelAuditStorageActor*>(this)->actor_wait_state = 0;
		static_cast<CancelAuditStorageActor*>(this)->ActorCallback< CancelAuditStorageActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< CancelAuditStorageActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("cancelAuditStorage", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("cancelAuditStorage", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< CancelAuditStorageActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("cancelAuditStorage", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("cancelAuditStorage", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< CancelAuditStorageActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("cancelAuditStorage", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch2(err, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("cancelAuditStorage", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont3(UID const& auditId_,int loopDepth) 
	{
															#line 2708 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		ASSERT(auditId_ == auditId);
															#line 2709 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		TraceEvent(SevVerbose, "ManagementAPICancelAuditStorageEnd") .detail("AuditType", type) .detail("AuditID", auditId);
															#line 22637 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = a_body1cont5(loopDepth);

		return loopDepth;
	}
	int a_body1cont3(UID && auditId_,int loopDepth) 
	{
															#line 2708 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		ASSERT(auditId_ == auditId);
															#line 2709 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		TraceEvent(SevVerbose, "ManagementAPICancelAuditStorageEnd") .detail("AuditType", type) .detail("AuditID", auditId);
															#line 22648 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = a_body1cont5(loopDepth);

		return loopDepth;
	}
	int a_body1cont2when1(UID const& auditId_,int loopDepth) 
	{
		loopDepth = a_body1cont3(auditId_, loopDepth);

		return loopDepth;
	}
	int a_body1cont2when1(UID && auditId_,int loopDepth) 
	{
		loopDepth = a_body1cont3(std::move(auditId_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<CancelAuditStorageActor*>(this)->actor_wait_state > 0) static_cast<CancelAuditStorageActor*>(this)->actor_wait_state = 0;
		static_cast<CancelAuditStorageActor*>(this)->ActorCallback< CancelAuditStorageActor, 1, UID >::remove();

	}
	void a_callback_fire(ActorCallback< CancelAuditStorageActor, 1, UID >*,UID const& value) 
	{
		fdb_probe_actor_enter("cancelAuditStorage", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("cancelAuditStorage", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< CancelAuditStorageActor, 1, UID >*,UID && value) 
	{
		fdb_probe_actor_enter("cancelAuditStorage", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("cancelAuditStorage", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< CancelAuditStorageActor, 1, UID >*,Error err) 
	{
		fdb_probe_actor_enter("cancelAuditStorage", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch2(err, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("cancelAuditStorage", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont5(int loopDepth) 
	{
		try {
			loopDepth = a_body1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
															#line 2690 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Reference<IClusterConnectionRecord> clusterFile;
															#line 2690 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	AuditType type;
															#line 2690 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	UID auditId;
															#line 2690 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	double timeoutSeconds;
															#line 2694 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Reference<AsyncVar<Optional<ClusterInterface>>> clusterInterface;
															#line 2695 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Future<Void> leaderMon;
															#line 22741 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
};
// This generated class is to be used only via cancelAuditStorage()
															#line 2690 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class CancelAuditStorageActor final : public Actor<UID>, public ActorCallback< CancelAuditStorageActor, 0, Void >, public ActorCallback< CancelAuditStorageActor, 1, UID >, public FastAllocated<CancelAuditStorageActor>, public CancelAuditStorageActorState<CancelAuditStorageActor> {
															#line 22746 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
	using FastAllocated<CancelAuditStorageActor>::operator new;
	using FastAllocated<CancelAuditStorageActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<UID>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< CancelAuditStorageActor, 0, Void >;
friend struct ActorCallback< CancelAuditStorageActor, 1, UID >;
															#line 2690 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	CancelAuditStorageActor(Reference<IClusterConnectionRecord> const& clusterFile,AuditType const& type,UID const& auditId,double const& timeoutSeconds) 
															#line 22758 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		 : Actor<UID>(),
		   CancelAuditStorageActorState<CancelAuditStorageActor>(clusterFile, type, auditId, timeoutSeconds)
	{
		fdb_probe_actor_enter("cancelAuditStorage", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("cancelAuditStorage");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("cancelAuditStorage", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< CancelAuditStorageActor, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< CancelAuditStorageActor, 1, UID >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 2690 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
[[nodiscard]] Future<UID> cancelAuditStorage( Reference<IClusterConnectionRecord> const& clusterFile, AuditType const& type, UID const& auditId, double const& timeoutSeconds ) {
															#line 2690 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	return Future<UID>(new CancelAuditStorageActor(clusterFile, type, auditId, timeoutSeconds));
															#line 22787 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
}

#line 2722 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"

															#line 22792 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via waitForPrimaryDC()
															#line 2723 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
template <class WaitForPrimaryDCActor>
															#line 2723 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class WaitForPrimaryDCActorState {
															#line 22799 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
															#line 2723 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	WaitForPrimaryDCActorState(Database const& cx,StringRef const& dcId) 
															#line 2723 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
															#line 2723 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		 : cx(cx),
															#line 2723 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   dcId(dcId),
															#line 2724 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		   tr(cx)
															#line 22810 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("waitForPrimaryDC", reinterpret_cast<unsigned long>(this));

	}
	~WaitForPrimaryDCActorState() 
	{
		fdb_probe_actor_destroy("waitForPrimaryDC", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 2726 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			;
															#line 22825 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~WaitForPrimaryDCActorState();
		static_cast<WaitForPrimaryDCActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
		try {
															#line 2728 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			tr.setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 2729 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Optional<Value>> __when_expr_0 = tr.get(primaryDatacenterKey);
															#line 2729 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<WaitForPrimaryDCActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 22860 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1loopBody1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
			static_cast<WaitForPrimaryDCActor*>(this)->actor_wait_state = 1;
															#line 2729 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< WaitForPrimaryDCActor, 0, Optional<Value> >*>(static_cast<WaitForPrimaryDCActor*>(this)));
															#line 22865 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 2739 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Void> __when_expr_3 = tr.onError(e);
															#line 2739 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<WaitForPrimaryDCActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 22889 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch1(__when_expr_3.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1Catch1when1(__when_expr_3.get(), loopDepth); };
			static_cast<WaitForPrimaryDCActor*>(this)->actor_wait_state = 4;
															#line 2739 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< WaitForPrimaryDCActor, 3, Void >*>(static_cast<WaitForPrimaryDCActor*>(this)));
															#line 22894 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(Optional<Value> const& res,int loopDepth) 
	{
															#line 2730 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (res.present() && res.get() == dcId)
															#line 22909 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 2731 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (!static_cast<WaitForPrimaryDCActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~WaitForPrimaryDCActorState(); static_cast<WaitForPrimaryDCActor*>(this)->destroy(); return 0; }
															#line 22913 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			new (&static_cast<WaitForPrimaryDCActor*>(this)->SAV< Void >::value()) Void(Void());
			this->~WaitForPrimaryDCActorState();
			static_cast<WaitForPrimaryDCActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 2734 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		watchFuture = tr.watch(primaryDatacenterKey);
															#line 2735 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		StrictFuture<Void> __when_expr_1 = tr.commit();
															#line 2735 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (static_cast<WaitForPrimaryDCActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 22925 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
		static_cast<WaitForPrimaryDCActor*>(this)->actor_wait_state = 2;
															#line 2735 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< WaitForPrimaryDCActor, 1, Void >*>(static_cast<WaitForPrimaryDCActor*>(this)));
															#line 22930 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2(Optional<Value> && res,int loopDepth) 
	{
															#line 2730 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (res.present() && res.get() == dcId)
															#line 22939 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		{
															#line 2731 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (!static_cast<WaitForPrimaryDCActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~WaitForPrimaryDCActorState(); static_cast<WaitForPrimaryDCActor*>(this)->destroy(); return 0; }
															#line 22943 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			new (&static_cast<WaitForPrimaryDCActor*>(this)->SAV< Void >::value()) Void(Void());
			this->~WaitForPrimaryDCActorState();
			static_cast<WaitForPrimaryDCActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 2734 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		watchFuture = tr.watch(primaryDatacenterKey);
															#line 2735 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		StrictFuture<Void> __when_expr_1 = tr.commit();
															#line 2735 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (static_cast<WaitForPrimaryDCActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 22955 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
		static_cast<WaitForPrimaryDCActor*>(this)->actor_wait_state = 2;
															#line 2735 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< WaitForPrimaryDCActor, 1, Void >*>(static_cast<WaitForPrimaryDCActor*>(this)));
															#line 22960 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1when1(Optional<Value> const& res,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(res, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Optional<Value> && res,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(std::move(res), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<WaitForPrimaryDCActor*>(this)->actor_wait_state > 0) static_cast<WaitForPrimaryDCActor*>(this)->actor_wait_state = 0;
		static_cast<WaitForPrimaryDCActor*>(this)->ActorCallback< WaitForPrimaryDCActor, 0, Optional<Value> >::remove();

	}
	void a_callback_fire(ActorCallback< WaitForPrimaryDCActor, 0, Optional<Value> >*,Optional<Value> const& value) 
	{
		fdb_probe_actor_enter("waitForPrimaryDC", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitForPrimaryDC", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< WaitForPrimaryDCActor, 0, Optional<Value> >*,Optional<Value> && value) 
	{
		fdb_probe_actor_enter("waitForPrimaryDC", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitForPrimaryDC", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< WaitForPrimaryDCActor, 0, Optional<Value> >*,Error err) 
	{
		fdb_probe_actor_enter("waitForPrimaryDC", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitForPrimaryDC", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1cont3(Void const& _,int loopDepth) 
	{
															#line 2736 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		StrictFuture<Void> __when_expr_2 = watchFuture;
															#line 2736 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (static_cast<WaitForPrimaryDCActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 23034 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1loopBody1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1loopBody1cont3when1(__when_expr_2.get(), loopDepth); };
		static_cast<WaitForPrimaryDCActor*>(this)->actor_wait_state = 3;
															#line 2736 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< WaitForPrimaryDCActor, 2, Void >*>(static_cast<WaitForPrimaryDCActor*>(this)));
															#line 23039 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont3(Void && _,int loopDepth) 
	{
															#line 2736 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		StrictFuture<Void> __when_expr_2 = watchFuture;
															#line 2736 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (static_cast<WaitForPrimaryDCActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 23050 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1loopBody1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1loopBody1cont3when1(__when_expr_2.get(), loopDepth); };
		static_cast<WaitForPrimaryDCActor*>(this)->actor_wait_state = 3;
															#line 2736 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< WaitForPrimaryDCActor, 2, Void >*>(static_cast<WaitForPrimaryDCActor*>(this)));
															#line 23055 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<WaitForPrimaryDCActor*>(this)->actor_wait_state > 0) static_cast<WaitForPrimaryDCActor*>(this)->actor_wait_state = 0;
		static_cast<WaitForPrimaryDCActor*>(this)->ActorCallback< WaitForPrimaryDCActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< WaitForPrimaryDCActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("waitForPrimaryDC", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitForPrimaryDC", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< WaitForPrimaryDCActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("waitForPrimaryDC", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitForPrimaryDC", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< WaitForPrimaryDCActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("waitForPrimaryDC", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitForPrimaryDC", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1loopBody1cont5(Void const& _,int loopDepth) 
	{
															#line 2737 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		tr.reset();
															#line 23127 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont7(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont5(Void && _,int loopDepth) 
	{
															#line 2737 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		tr.reset();
															#line 23136 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont7(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont3when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont5(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont3when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont5(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<WaitForPrimaryDCActor*>(this)->actor_wait_state > 0) static_cast<WaitForPrimaryDCActor*>(this)->actor_wait_state = 0;
		static_cast<WaitForPrimaryDCActor*>(this)->ActorCallback< WaitForPrimaryDCActor, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< WaitForPrimaryDCActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("waitForPrimaryDC", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont3when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitForPrimaryDC", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< WaitForPrimaryDCActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("waitForPrimaryDC", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont3when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitForPrimaryDC", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< WaitForPrimaryDCActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("waitForPrimaryDC", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitForPrimaryDC", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1loopBody1cont7(int loopDepth) 
	{
		try {
			loopDepth = a_body1loopBody1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<WaitForPrimaryDCActor*>(this)->actor_wait_state > 0) static_cast<WaitForPrimaryDCActor*>(this)->actor_wait_state = 0;
		static_cast<WaitForPrimaryDCActor*>(this)->ActorCallback< WaitForPrimaryDCActor, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< WaitForPrimaryDCActor, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("waitForPrimaryDC", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitForPrimaryDC", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< WaitForPrimaryDCActor, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("waitForPrimaryDC", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitForPrimaryDC", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< WaitForPrimaryDCActor, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("waitForPrimaryDC", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitForPrimaryDC", reinterpret_cast<unsigned long>(this), 3);

	}
															#line 2723 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Database cx;
															#line 2723 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	StringRef dcId;
															#line 2724 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	ReadYourWritesTransaction tr;
															#line 2734 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	Future<Void> watchFuture;
															#line 23300 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
};
// This generated class is to be used only via waitForPrimaryDC()
															#line 2723 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class WaitForPrimaryDCActor final : public Actor<Void>, public ActorCallback< WaitForPrimaryDCActor, 0, Optional<Value> >, public ActorCallback< WaitForPrimaryDCActor, 1, Void >, public ActorCallback< WaitForPrimaryDCActor, 2, Void >, public ActorCallback< WaitForPrimaryDCActor, 3, Void >, public FastAllocated<WaitForPrimaryDCActor>, public WaitForPrimaryDCActorState<WaitForPrimaryDCActor> {
															#line 23305 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
	using FastAllocated<WaitForPrimaryDCActor>::operator new;
	using FastAllocated<WaitForPrimaryDCActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< WaitForPrimaryDCActor, 0, Optional<Value> >;
friend struct ActorCallback< WaitForPrimaryDCActor, 1, Void >;
friend struct ActorCallback< WaitForPrimaryDCActor, 2, Void >;
friend struct ActorCallback< WaitForPrimaryDCActor, 3, Void >;
															#line 2723 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	WaitForPrimaryDCActor(Database const& cx,StringRef const& dcId) 
															#line 23319 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		 : Actor<Void>(),
		   WaitForPrimaryDCActorState<WaitForPrimaryDCActor>(cx, dcId)
	{
		fdb_probe_actor_enter("waitForPrimaryDC", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("waitForPrimaryDC");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("waitForPrimaryDC", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< WaitForPrimaryDCActor, 0, Optional<Value> >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< WaitForPrimaryDCActor, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< WaitForPrimaryDCActor, 2, Void >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< WaitForPrimaryDCActor, 3, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 2723 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
[[nodiscard]] Future<Void> waitForPrimaryDC( Database const& cx, StringRef const& dcId ) {
															#line 2723 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	return Future<Void>(new WaitForPrimaryDCActor(cx, dcId));
															#line 23350 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
}

#line 2743 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"

json_spirit::Value_type normJSONType(json_spirit::Value_type type) {
	if (type == json_spirit::int_type)
		return json_spirit::real_type;
	return type;
}

void schemaCoverage(std::string const& spath, bool covered) {
	static std::map<bool, std::set<std::string>> coveredSchemaPaths;

	if (coveredSchemaPaths[covered].insert(spath).second) {
		TraceEvent ev(SevInfo, "CodeCoverage");
		ev.detail("File", "documentation/StatusSchema.json/" + spath).detail("Line", 0);
		if (!covered)
			ev.detail("Covered", 0);
	}
}

bool schemaMatch(json_spirit::mValue const& schemaValue,
                 json_spirit::mValue const& resultValue,
                 std::string& errorStr,
                 Severity sev,
                 bool checkCoverage,
                 std::string path,
                 std::string schemaPath) {
	// Returns true if everything in `result` is permitted by `schema`
	bool ok = true;

	try {
		if (normJSONType(schemaValue.type()) != normJSONType(resultValue.type())) {
			errorStr += format("ERROR: Incorrect value type for key `%s'\n", path.c_str());
			TraceEvent(sev, "SchemaMismatch")
			    .detail("Path", path)
			    .detail("SchemaType", schemaValue.type())
			    .detail("ValueType", resultValue.type());
			return false;
		}

		if (resultValue.type() == json_spirit::obj_type) {
			auto& result = resultValue.get_obj();
			auto& schema = schemaValue.get_obj();

			for (auto& rkv : result) {
				auto& key = rkv.first;
				auto& rv = rkv.second;
				std::string kpath = path + "." + key;
				std::string spath = schemaPath + "." + key;

				if (checkCoverage) {
					schemaCoverage(spath);
				}

				if (!schema.count(key)) {
					errorStr += format("ERROR: Unknown key `%s'\n", kpath.c_str());
					TraceEvent(sev, "SchemaMismatch").detail("Path", kpath).detail("SchemaPath", spath);
					ok = false;
					continue;
				}
				auto& sv = schema.at(key);

				if (sv.type() == json_spirit::obj_type && sv.get_obj().count("$enum")) {
					auto& enum_values = sv.get_obj().at("$enum").get_array();

					bool any_match = false;
					for (auto& enum_item : enum_values)
						if (enum_item == rv) {
							any_match = true;
							if (checkCoverage) {
								schemaCoverage(spath + ".$enum." + enum_item.get_str());
							}
							break;
						}
					if (!any_match) {
						errorStr += format("ERROR: Unknown value `%s' for key `%s'\n",
						                   json_spirit::write_string(rv).c_str(),
						                   kpath.c_str());
						TraceEvent(sev, "SchemaMismatch")
						    .detail("Path", kpath)
						    .detail("SchemaEnumItems", enum_values.size())
						    .detail("Value", json_spirit::write_string(rv));
						if (checkCoverage) {
							schemaCoverage(spath + ".$enum." + json_spirit::write_string(rv));
						}
						ok = false;
					}
				} else if (sv.type() == json_spirit::obj_type && sv.get_obj().count("$map")) {
					if (rv.type() != json_spirit::obj_type) {
						errorStr += format("ERROR: Expected an object as the value for key `%s'\n", kpath.c_str());
						TraceEvent(sev, "SchemaMismatch")
						    .detail("Path", kpath)
						    .detail("SchemaType", sv.type())
						    .detail("ValueType", rv.type());
						ok = false;
						continue;
					}
					if (sv.get_obj().at("$map").type() != json_spirit::obj_type) {
						continue;
					}
					auto& schemaVal = sv.get_obj().at("$map");
					auto& valueObj = rv.get_obj();

					if (checkCoverage) {
						schemaCoverage(spath + ".$map");
					}

					for (auto& valuePair : valueObj) {
						auto vpath = kpath + "[" + valuePair.first + "]";
						auto upath = spath + ".$map";
						if (valuePair.second.type() != json_spirit::obj_type) {
							errorStr += format("ERROR: Expected an object for `%s'\n", vpath.c_str());
							TraceEvent(sev, "SchemaMismatch")
							    .detail("Path", vpath)
							    .detail("ValueType", valuePair.second.type());
							ok = false;
							continue;
						}
						if (!schemaMatch(schemaVal, valuePair.second, errorStr, sev, checkCoverage, vpath, upath)) {
							ok = false;
						}
					}
				} else {
					if (!schemaMatch(sv, rv, errorStr, sev, checkCoverage, kpath, spath)) {
						ok = false;
					}
				}
			}
		} else if (resultValue.type() == json_spirit::array_type) {
			auto& valueArray = resultValue.get_array();
			auto& schemaArray = schemaValue.get_array();
			if (!schemaArray.size()) {
				// An empty schema array means that the value array is required to be empty
				if (valueArray.size()) {
					errorStr += format("ERROR: Expected an empty array for key `%s'\n", path.c_str());
					TraceEvent(sev, "SchemaMismatch")
					    .detail("Path", path)
					    .detail("SchemaSize", schemaArray.size())
					    .detail("ValueSize", valueArray.size());
					return false;
				}
			} else if (schemaArray.size() == 1) {
				// A one item schema array means that all items in the value must match the first item in the schema
				int index = 0;
				for (auto& valueItem : valueArray) {
					if (!schemaMatch(schemaArray[0],
					                 valueItem,
					                 errorStr,
					                 sev,
					                 checkCoverage,
					                 path + format("[%d]", index),
					                 schemaPath + "[0]")) {
						ok = false;
					}
					index++;
				}
			} else {
				ASSERT(false); // Schema doesn't make sense
			}
		}
		return ok;
	} catch (std::exception& e) {
		TraceEvent(SevError, "SchemaMatchException")
		    .detail("What", e.what())
		    .detail("Path", path)
		    .detail("SchemaPath", schemaPath);
		throw unknown_error();
	}
}

std::string ManagementAPI::generateErrorMessage(const CoordinatorsResult& res) {
	// Note: the error message here should not be changed if possible
	// If you do change the message here,
	// please update the corresponding fdbcli code to support both the old and the new message

	std::string msg;
	switch (res) {
	case CoordinatorsResult::INVALID_NETWORK_ADDRESSES:
		msg = "The specified network addresses are invalid";
		break;
	case CoordinatorsResult::SAME_NETWORK_ADDRESSES:
		msg = "No change (existing configuration satisfies request)";
		break;
	case CoordinatorsResult::NOT_COORDINATORS:
		msg = "Coordination servers are not running on the specified network addresses";
		break;
	case CoordinatorsResult::DATABASE_UNREACHABLE:
		msg = "Database unreachable";
		break;
	case CoordinatorsResult::BAD_DATABASE_STATE:
		msg = "The database is in an unexpected state from which changing coordinators might be unsafe";
		break;
	case CoordinatorsResult::COORDINATOR_UNREACHABLE:
		msg = "One of the specified coordinators is unreachable";
		break;
	case CoordinatorsResult::NOT_ENOUGH_MACHINES:
		msg = "Too few fdbserver machines to provide coordination at the current redundancy level";
		break;
	default:
		break;
	}
	return msg;
}

															#line 23556 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via flowTestCase2945()
															#line 2945 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
template <class FlowTestCase2945Actor>
															#line 2945 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class FlowTestCase2945ActorState {
															#line 23563 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
															#line 2945 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	FlowTestCase2945ActorState(UnitTestParameters const& params) 
															#line 2945 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
															#line 2945 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		 : params(params)
															#line 23570 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("flowTestCase2945", reinterpret_cast<unsigned long>(this));

	}
	~FlowTestCase2945ActorState() 
	{
		fdb_probe_actor_destroy("flowTestCase2945", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 2946 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			StrictFuture<Void> __when_expr_0 = Future<Void>(Void());
															#line 2946 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (static_cast<FlowTestCase2945Actor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 23587 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<FlowTestCase2945Actor*>(this)->actor_wait_state = 1;
															#line 2946 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< FlowTestCase2945Actor, 0, Void >*>(static_cast<FlowTestCase2945Actor*>(this)));
															#line 23592 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~FlowTestCase2945ActorState();
		static_cast<FlowTestCase2945Actor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void const& _,int loopDepth) 
	{
															#line 2948 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		std::vector<ProcessData> workers;
															#line 2949 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		std::vector<NetworkAddress> chosen;
															#line 2950 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		std::set<AddressExclusion> excluded;
															#line 2951 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		AutoQuorumChange change(5);
															#line 2953 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		for(int i = 0;i < 10;i++) {
															#line 2954 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			ProcessData data;
															#line 2955 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			auto dataCenter = std::to_string(i / 4 % 2);
															#line 2956 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			auto dataHall = dataCenter + std::to_string(i / 2 % 2);
															#line 2957 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			auto rack = dataHall + std::to_string(i % 2);
															#line 2958 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			auto machineId = rack + std::to_string(i);
															#line 2959 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			data.locality.set("dcid"_sr, StringRef(dataCenter));
															#line 2960 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			data.locality.set("data_hall"_sr, StringRef(dataHall));
															#line 2961 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			data.locality.set("rack"_sr, StringRef(rack));
															#line 2962 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			data.locality.set("zoneid"_sr, StringRef(rack));
															#line 2963 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			data.locality.set("machineid"_sr, StringRef(machineId));
															#line 2964 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			data.address.ip = IPAddress(i);
															#line 2966 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (g_network->isSimulated())
															#line 23647 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 2967 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				g_simulator->newProcess("TestCoordinator", data.address.ip, data.address.port, false, 1, data.locality, ProcessClass(ProcessClass::CoordinatorClass, ProcessClass::CommandLineSource), "", "", currentProtocolVersion(), false);
															#line 23651 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			}
															#line 2980 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			workers.push_back(data);
															#line 23655 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		}
															#line 2983 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		auto noAssignIndex = deterministicRandom()->randomInt(0, workers.size());
															#line 2984 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		workers[noAssignIndex].processClass._class = ProcessClass::CoordinatorClass;
															#line 2986 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		change.addDesiredWorkers(chosen, workers, 5, excluded);
															#line 2987 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		std::map<StringRef, std::set<StringRef>> chosenValues;
															#line 2989 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		ASSERT(chosen.size() == 5);
															#line 2990 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		std::vector<StringRef> fields({ "dcid"_sr, "data_hall"_sr, "zoneid"_sr, "machineid"_sr });
															#line 2991 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		for(auto worker = chosen.begin();worker != chosen.end();worker++) {
															#line 2992 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			ASSERT(worker->ip.toV4() < workers.size());
															#line 2993 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			LocalityData data = workers[worker->ip.toV4()].locality;
															#line 2994 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			for(auto field = fields.begin();field != fields.end();field++) {
															#line 2995 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				chosenValues[*field].insert(data.get(*field).get());
															#line 23679 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			}
		}
															#line 2999 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		ASSERT(chosenValues["dcid"_sr].size() == 2);
															#line 3000 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		ASSERT(chosenValues["data_hall"_sr].size() == 4);
															#line 3001 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		ASSERT(chosenValues["zoneid"_sr].size() == 5);
															#line 3002 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		ASSERT(chosenValues["machineid"_sr].size() == 5);
															#line 3003 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		ASSERT(std::find(chosen.begin(), chosen.end(), workers[noAssignIndex].address) != chosen.end());
															#line 3005 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<FlowTestCase2945Actor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~FlowTestCase2945ActorState(); static_cast<FlowTestCase2945Actor*>(this)->destroy(); return 0; }
															#line 23694 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<FlowTestCase2945Actor*>(this)->SAV< Void >::value()) Void(Void());
		this->~FlowTestCase2945ActorState();
		static_cast<FlowTestCase2945Actor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1(Void && _,int loopDepth) 
	{
															#line 2948 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		std::vector<ProcessData> workers;
															#line 2949 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		std::vector<NetworkAddress> chosen;
															#line 2950 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		std::set<AddressExclusion> excluded;
															#line 2951 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		AutoQuorumChange change(5);
															#line 2953 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		for(int i = 0;i < 10;i++) {
															#line 2954 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			ProcessData data;
															#line 2955 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			auto dataCenter = std::to_string(i / 4 % 2);
															#line 2956 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			auto dataHall = dataCenter + std::to_string(i / 2 % 2);
															#line 2957 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			auto rack = dataHall + std::to_string(i % 2);
															#line 2958 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			auto machineId = rack + std::to_string(i);
															#line 2959 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			data.locality.set("dcid"_sr, StringRef(dataCenter));
															#line 2960 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			data.locality.set("data_hall"_sr, StringRef(dataHall));
															#line 2961 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			data.locality.set("rack"_sr, StringRef(rack));
															#line 2962 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			data.locality.set("zoneid"_sr, StringRef(rack));
															#line 2963 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			data.locality.set("machineid"_sr, StringRef(machineId));
															#line 2964 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			data.address.ip = IPAddress(i);
															#line 2966 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			if (g_network->isSimulated())
															#line 23738 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			{
															#line 2967 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				g_simulator->newProcess("TestCoordinator", data.address.ip, data.address.port, false, 1, data.locality, ProcessClass(ProcessClass::CoordinatorClass, ProcessClass::CommandLineSource), "", "", currentProtocolVersion(), false);
															#line 23742 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			}
															#line 2980 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			workers.push_back(data);
															#line 23746 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		}
															#line 2983 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		auto noAssignIndex = deterministicRandom()->randomInt(0, workers.size());
															#line 2984 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		workers[noAssignIndex].processClass._class = ProcessClass::CoordinatorClass;
															#line 2986 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		change.addDesiredWorkers(chosen, workers, 5, excluded);
															#line 2987 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		std::map<StringRef, std::set<StringRef>> chosenValues;
															#line 2989 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		ASSERT(chosen.size() == 5);
															#line 2990 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		std::vector<StringRef> fields({ "dcid"_sr, "data_hall"_sr, "zoneid"_sr, "machineid"_sr });
															#line 2991 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		for(auto worker = chosen.begin();worker != chosen.end();worker++) {
															#line 2992 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			ASSERT(worker->ip.toV4() < workers.size());
															#line 2993 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			LocalityData data = workers[worker->ip.toV4()].locality;
															#line 2994 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
			for(auto field = fields.begin();field != fields.end();field++) {
															#line 2995 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
				chosenValues[*field].insert(data.get(*field).get());
															#line 23770 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
			}
		}
															#line 2999 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		ASSERT(chosenValues["dcid"_sr].size() == 2);
															#line 3000 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		ASSERT(chosenValues["data_hall"_sr].size() == 4);
															#line 3001 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		ASSERT(chosenValues["zoneid"_sr].size() == 5);
															#line 3002 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		ASSERT(chosenValues["machineid"_sr].size() == 5);
															#line 3003 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		ASSERT(std::find(chosen.begin(), chosen.end(), workers[noAssignIndex].address) != chosen.end());
															#line 3005 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
		if (!static_cast<FlowTestCase2945Actor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~FlowTestCase2945ActorState(); static_cast<FlowTestCase2945Actor*>(this)->destroy(); return 0; }
															#line 23785 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		new (&static_cast<FlowTestCase2945Actor*>(this)->SAV< Void >::value()) Void(Void());
		this->~FlowTestCase2945ActorState();
		static_cast<FlowTestCase2945Actor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<FlowTestCase2945Actor*>(this)->actor_wait_state > 0) static_cast<FlowTestCase2945Actor*>(this)->actor_wait_state = 0;
		static_cast<FlowTestCase2945Actor*>(this)->ActorCallback< FlowTestCase2945Actor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< FlowTestCase2945Actor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("flowTestCase2945", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("flowTestCase2945", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< FlowTestCase2945Actor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("flowTestCase2945", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("flowTestCase2945", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< FlowTestCase2945Actor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("flowTestCase2945", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("flowTestCase2945", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 2945 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	UnitTestParameters params;
															#line 23858 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
};
// This generated class is to be used only via flowTestCase2945()
															#line 2945 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
class FlowTestCase2945Actor final : public Actor<Void>, public ActorCallback< FlowTestCase2945Actor, 0, Void >, public FastAllocated<FlowTestCase2945Actor>, public FlowTestCase2945ActorState<FlowTestCase2945Actor> {
															#line 23863 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
public:
	using FastAllocated<FlowTestCase2945Actor>::operator new;
	using FastAllocated<FlowTestCase2945Actor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< FlowTestCase2945Actor, 0, Void >;
															#line 2945 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	FlowTestCase2945Actor(UnitTestParameters const& params) 
															#line 23874 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
		 : Actor<Void>(),
		   FlowTestCase2945ActorState<FlowTestCase2945Actor>(params)
	{
		fdb_probe_actor_enter("flowTestCase2945", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("flowTestCase2945");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("flowTestCase2945", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< FlowTestCase2945Actor, 0, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 2945 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
static Future<Void> flowTestCase2945( UnitTestParameters const& params ) {
															#line 2945 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
	return Future<Void>(new FlowTestCase2945Actor(params));
															#line 23902 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.g.cpp"
}
ACTOR_TEST_CASE(flowTestCase2945, "/ManagementAPI/AutoQuorumChange/checkLocality")

#line 3007 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/ManagementAPI.actor.cpp"
