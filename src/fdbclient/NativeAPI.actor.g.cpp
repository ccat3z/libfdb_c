#define POST_ACTOR_COMPILER 1
#line 1 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
/*
 * NativeAPI.actor.cpp
 *
 * This source file is part of the FoundationDB open source project
 *
 * Copyright 2013-2022 Apple Inc. and the FoundationDB project authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "fdbclient/NativeAPI.actor.h"

#include <algorithm>
#include <cstdio>
#include <iterator>
#include <limits>
#include <memory>
#include <regex>
#include <string>
#include <unordered_set>
#include <tuple>
#include <utility>
#include <vector>

#include "boost/algorithm/string.hpp"

#include "fdbclient/Knobs.h"
#include "flow/CodeProbe.h"
#include "fmt/format.h"

#include "fdbclient/FDBOptions.g.h"
#include "fdbclient/FDBTypes.h"
#include "fdbrpc/FailureMonitor.h"
#include "fdbrpc/MultiInterface.h"
#include "fdbrpc/TenantInfo.h"

#include "fdbclient/ActorLineageProfiler.h"
#include "fdbclient/AnnotateActor.h"
#include "fdbclient/Atomic.h"
#include "fdbclient/BlobGranuleCommon.h"
#include "fdbclient/BlobGranuleRequest.actor.h"
#include "fdbclient/ClusterInterface.h"
#include "fdbclient/ClusterConnectionFile.h"
#include "fdbclient/ClusterConnectionMemoryRecord.h"
#include "fdbclient/CoordinationInterface.h"
#include "fdbclient/CommitTransaction.h"
#include "fdbclient/DatabaseContext.h"
#include "fdbclient/GlobalConfig.actor.h"
#include "fdbclient/IKnobCollection.h"
#include "fdbclient/JsonBuilder.h"
#include "fdbclient/KeyBackedTypes.actor.h"
#include "fdbclient/KeyRangeMap.h"
#include "fdbclient/ManagementAPI.actor.h"
#include "fdbclient/NameLineage.h"
#include "fdbclient/CommitProxyInterface.h"
#include "fdbclient/MonitorLeader.h"
#include "fdbclient/MutationList.h"
#include "fdbclient/ReadYourWrites.h"
#include "fdbclient/ParallelStream.actor.h"
#include "fdbclient/SpecialKeySpace.actor.h"
#include "fdbclient/StorageServerInterface.h"
#include "fdbclient/SystemData.h"
#include "fdbclient/Tenant.h"
#include "fdbclient/TenantSpecialKeys.actor.h"
#include "fdbclient/TransactionLineage.h"
#include "fdbclient/versions.h"
#include "fdbrpc/WellKnownEndpoints.h"
#include "fdbrpc/LoadBalance.h"
#include "fdbrpc/Net2FileSystem.h"
#include "fdbrpc/simulator.h"
#include "fdbrpc/sim_validation.h"
#include "flow/Arena.h"
#include "flow/ActorCollection.h"
#include "flow/DeterministicRandom.h"
#include "flow/Error.h"
#include "flow/FastRef.h"
#include "flow/IRandom.h"
#include "flow/Trace.h"
#include "flow/ProtocolVersion.h"
#include "flow/flow.h"
#include "flow/genericactors.actor.h"
#include "flow/Knobs.h"
#include "flow/Platform.h"
#include "flow/SystemMonitor.h"
#include "flow/TLSConfig.actor.h"
#include "fdbclient/Tracing.h"
#include "flow/UnitTest.h"
#include "flow/network.h"
#include "flow/serialize.h"

#ifdef ADDRESS_SANITIZER
#include <sanitizer/lsan_interface.h>
#endif

#ifdef WIN32
#define WIN32_LEAN_AND_MEAN
#include <Windows.h>
#undef min
#undef max
#else
#include <time.h>
#endif
#include "flow/actorcompiler.h" // This must be the last #include.

template class RequestStream<OpenDatabaseRequest, false>;
template struct NetNotifiedQueue<OpenDatabaseRequest, false>;

extern const char* getSourceVersion();

namespace {

TransactionLineageCollector transactionLineageCollector;
NameLineageCollector nameLineageCollector;

template <class Interface, class Request, bool P>
Future<REPLY_TYPE(Request)> loadBalance(
    DatabaseContext* ctx,
    const Reference<LocationInfo> alternatives,
    RequestStream<Request, P> Interface::*channel,
    const Request& request = Request(),
    TaskPriority taskID = TaskPriority::DefaultPromiseEndpoint,
    AtMostOnce atMostOnce =
        AtMostOnce::False, // if true, throws request_maybe_delivered() instead of retrying automatically
    QueueModel* model = nullptr) {
	if (alternatives->hasCaches) {
		return loadBalance(alternatives->locations(), channel, request, taskID, atMostOnce, model);
	}
	return fmap(
	    [ctx](auto const& res) {
		    if (res.cached) {
			    ctx->updateCache.trigger();
		    }
		    return res;
	    },
	    loadBalance(alternatives->locations(), channel, request, taskID, atMostOnce, model));
}
} // namespace

FDB_BOOLEAN_PARAM(TransactionRecordLogInfo);

// Whether or not a request should include the tenant name
FDB_BOOLEAN_PARAM(UseTenant);

// Whether a blob granule request is a request for the mapping to read, or a request to get granule boundaries
FDB_BOOLEAN_PARAM(JustGranules);

NetworkOptions networkOptions;
TLSConfig tlsConfig(TLSEndpointType::CLIENT);

// The default values, TRACE_DEFAULT_ROLL_SIZE and TRACE_DEFAULT_MAX_LOGS_SIZE are located in Trace.h.
NetworkOptions::NetworkOptions()
  : traceRollSize(TRACE_DEFAULT_ROLL_SIZE), traceMaxLogsSize(TRACE_DEFAULT_MAX_LOGS_SIZE), traceLogGroup("default"),
    traceFormat("xml"), traceClockSource("now"), traceInitializeOnSetup(false),
    supportedVersions(new ReferencedObject<Standalone<VectorRef<ClientVersionRef>>>()), runLoopProfilingEnabled(false),
    primaryClient(true) {}

static const Key CLIENT_LATENCY_INFO_PREFIX = "client_latency/"_sr;
static const Key CLIENT_LATENCY_INFO_CTR_PREFIX = "client_latency_counter/"_sr;

void DatabaseContext::addTssMapping(StorageServerInterface const& ssi, StorageServerInterface const& tssi) {
	auto result = tssMapping.find(ssi.id());
	// Update tss endpoint mapping if ss isn't in mapping, or the interface it mapped to changed
	if (result == tssMapping.end() ||
	    result->second.getValue.getEndpoint().token.first() != tssi.getValue.getEndpoint().token.first()) {
		Reference<TSSMetrics> metrics;
		if (result == tssMapping.end()) {
			// new TSS pairing
			metrics = makeReference<TSSMetrics>();
			tssMetrics[tssi.id()] = metrics;
			tssMapping[ssi.id()] = tssi;
		} else {
			ASSERT(result->second.id() == tssi.id());
			metrics = tssMetrics[tssi.id()];
			result->second = tssi;
		}

		// data requests duplicated for load and data comparison
		queueModel.updateTssEndpoint(ssi.getValue.getEndpoint().token.first(),
		                             TSSEndpointData(tssi.id(), tssi.getValue.getEndpoint(), metrics));
		queueModel.updateTssEndpoint(ssi.getKey.getEndpoint().token.first(),
		                             TSSEndpointData(tssi.id(), tssi.getKey.getEndpoint(), metrics));
		queueModel.updateTssEndpoint(ssi.getKeyValues.getEndpoint().token.first(),
		                             TSSEndpointData(tssi.id(), tssi.getKeyValues.getEndpoint(), metrics));
		queueModel.updateTssEndpoint(ssi.getMappedKeyValues.getEndpoint().token.first(),
		                             TSSEndpointData(tssi.id(), tssi.getMappedKeyValues.getEndpoint(), metrics));
		queueModel.updateTssEndpoint(ssi.getKeyValuesStream.getEndpoint().token.first(),
		                             TSSEndpointData(tssi.id(), tssi.getKeyValuesStream.getEndpoint(), metrics));
		queueModel.updateTssEndpoint(ssi.changeFeedStream.getEndpoint().token.first(),
		                             TSSEndpointData(tssi.id(), tssi.changeFeedStream.getEndpoint(), metrics));

		// non-data requests duplicated for load
		queueModel.updateTssEndpoint(ssi.watchValue.getEndpoint().token.first(),
		                             TSSEndpointData(tssi.id(), tssi.watchValue.getEndpoint(), metrics));
		queueModel.updateTssEndpoint(ssi.splitMetrics.getEndpoint().token.first(),
		                             TSSEndpointData(tssi.id(), tssi.splitMetrics.getEndpoint(), metrics));
		queueModel.updateTssEndpoint(ssi.getReadHotRanges.getEndpoint().token.first(),
		                             TSSEndpointData(tssi.id(), tssi.getReadHotRanges.getEndpoint(), metrics));
		queueModel.updateTssEndpoint(ssi.getRangeSplitPoints.getEndpoint().token.first(),
		                             TSSEndpointData(tssi.id(), tssi.getRangeSplitPoints.getEndpoint(), metrics));
		queueModel.updateTssEndpoint(ssi.overlappingChangeFeeds.getEndpoint().token.first(),
		                             TSSEndpointData(tssi.id(), tssi.overlappingChangeFeeds.getEndpoint(), metrics));

		// duplicated to ensure feed data cleanup
		queueModel.updateTssEndpoint(ssi.changeFeedPop.getEndpoint().token.first(),
		                             TSSEndpointData(tssi.id(), tssi.changeFeedPop.getEndpoint(), metrics));
	}
}

void DatabaseContext::removeTssMapping(StorageServerInterface const& ssi) {
	auto result = tssMapping.find(ssi.id());
	if (result != tssMapping.end()) {
		tssMetrics.erase(ssi.id());
		tssMapping.erase(result);
		queueModel.removeTssEndpoint(ssi.getValue.getEndpoint().token.first());
		queueModel.removeTssEndpoint(ssi.getKey.getEndpoint().token.first());
		queueModel.removeTssEndpoint(ssi.getKeyValues.getEndpoint().token.first());
		queueModel.removeTssEndpoint(ssi.getMappedKeyValues.getEndpoint().token.first());
		queueModel.removeTssEndpoint(ssi.getKeyValuesStream.getEndpoint().token.first());

		queueModel.removeTssEndpoint(ssi.watchValue.getEndpoint().token.first());
		queueModel.removeTssEndpoint(ssi.splitMetrics.getEndpoint().token.first());
		queueModel.removeTssEndpoint(ssi.getReadHotRanges.getEndpoint().token.first());
		queueModel.removeTssEndpoint(ssi.getRangeSplitPoints.getEndpoint().token.first());
	}
}

void DatabaseContext::addSSIdTagMapping(const UID& uid, const Tag& tag) {
	ssidTagMapping[uid] = tag;
}

void DatabaseContext::getLatestCommitVersionForSSID(const UID& ssid, Tag& tag, Version& commitVersion) {
	// initialization
	tag = invalidTag;
	commitVersion = invalidVersion;

	auto iter = ssidTagMapping.find(ssid);
	if (iter != ssidTagMapping.end()) {
		tag = iter->second;

		if (ssVersionVectorCache.hasVersion(tag)) {
			commitVersion = ssVersionVectorCache.getVersion(tag);
		}
	}
}

void DatabaseContext::getLatestCommitVersion(const StorageServerInterface& ssi,
                                             Version readVersion,
                                             VersionVector& latestCommitVersion) {
	latestCommitVersion.clear();

	if (ssVersionVectorCache.getMaxVersion() == invalidVersion) {
		return;
	}

	// Error checking (based on the assumption that the read version was not obtained
	// from the client's grv cache).
	if (readVersion > ssVersionVectorCache.getMaxVersion()) {
		TraceEvent(SevError, "ReadVersionExceedsVersionVectorMax")
		    .detail("ReadVersion", readVersion)
		    .detail("VersionVector", ssVersionVectorCache.toString());
		if (g_network->isSimulated()) {
			ASSERT(false);
		} else {
			return; // Do not return a stale commit version in production.
		}
	}

	Tag tag = invalidTag;
	Version commitVersion = invalidVersion;
	getLatestCommitVersionForSSID(ssi.id(), tag, commitVersion);

	if (tag != invalidTag && commitVersion != invalidVersion && commitVersion < readVersion) {
		latestCommitVersion.setVersion(tag, commitVersion);
	}
}

void DatabaseContext::getLatestCommitVersions(const Reference<LocationInfo>& locationInfo,
                                              Reference<TransactionState> info,
                                              VersionVector& latestCommitVersions) {
	latestCommitVersions.clear();

	if (info->readOptions.present() && info->readOptions.get().debugID.present()) {
		g_traceBatch.addEvent(
		    "TransactionDebug", info->readOptions.get().debugID.get().first(), "NativeAPI.getLatestCommitVersions");
	}

	if (!info->readVersionObtainedFromGrvProxy) {
		return;
	}

	if (ssVersionVectorCache.getMaxVersion() == invalidVersion) {
		return;
	}

	if (info->readVersion() > ssVersionVectorCache.getMaxVersion()) {
		if (!CLIENT_KNOBS->FORCE_GRV_CACHE_OFF && !info->options.skipGrvCache && info->options.useGrvCache) {
			return;
		} else {
			TraceEvent(SevError, "GetLatestCommitVersions")
			    .detail("ReadVersion", info->readVersion())
			    .detail("VersionVector", ssVersionVectorCache.toString());
			ASSERT(false);
		}
	}

	std::map<Version, std::set<Tag>> versionMap; // order the versions to be returned
	for (int i = 0; i < locationInfo->locations()->size(); i++) {
		Tag tag = invalidTag;
		Version commitVersion = invalidVersion; // latest commit version
		getLatestCommitVersionForSSID(locationInfo->locations()->getId(i), tag, commitVersion);

		bool updatedVersionMap = false;
		if (tag != invalidTag && commitVersion != invalidVersion && commitVersion < info->readVersion()) {
			updatedVersionMap = true;
			versionMap[commitVersion].insert(tag);
		}

		// Do not log if commitVersion >= readVersion.
		if (!updatedVersionMap && commitVersion == invalidVersion) {
			TraceEvent(SevDebug, "CommitVersionNotFoundForSS")
			    .detail("InSSIDMap", tag != invalidTag ? 1 : 0)
			    .detail("Tag", tag)
			    .detail("CommitVersion", commitVersion)
			    .detail("ReadVersion", info->readVersion())
			    .detail("VersionVector", ssVersionVectorCache.toString())
			    .setMaxEventLength(11000)
			    .setMaxFieldLength(10000);
			++transactionCommitVersionNotFoundForSS;
		}
	}

	// insert the commit versions in the version vector.
	for (auto& iter : versionMap) {
		latestCommitVersions.setVersion(iter.second, iter.first);
	}
}

void updateCachedReadVersionShared(double t, Version v, DatabaseSharedState* p) {
	MutexHolder mutex(p->mutexLock);
	if (v >= p->grvCacheSpace.cachedReadVersion) {
		//TraceEvent(SevDebug, "CacheReadVersionUpdate")
		//    .detail("Version", v)
		//    .detail("CurTime", t)
		//    .detail("LastVersion", p->grvCacheSpace.cachedReadVersion)
		//    .detail("LastTime", p->grvCacheSpace.lastGrvTime);
		p->grvCacheSpace.cachedReadVersion = v;
		if (t > p->grvCacheSpace.lastGrvTime) {
			p->grvCacheSpace.lastGrvTime = t;
		}
	}
}

void DatabaseContext::updateCachedReadVersion(double t, Version v) {
	if (sharedStatePtr) {
		return updateCachedReadVersionShared(t, v, sharedStatePtr);
	}
	if (v >= cachedReadVersion) {
		//TraceEvent(SevDebug, "CachedReadVersionUpdate")
		//    .detail("Version", v)
		//    .detail("GrvStartTime", t)
		//    .detail("LastVersion", cachedReadVersion)
		//    .detail("LastTime", lastGrvTime);
		cachedReadVersion = v;
		// Since the time is based on the start of the request, it's possible that we
		// get a newer version with an older time.
		// (Request started earlier, but was latest to reach the proxy)
		// Only update time when strictly increasing (?)
		if (t > lastGrvTime) {
			lastGrvTime = t;
		}
	}
}

Version DatabaseContext::getCachedReadVersion() {
	if (sharedStatePtr) {
		MutexHolder mutex(sharedStatePtr->mutexLock);
		return sharedStatePtr->grvCacheSpace.cachedReadVersion;
	}
	return cachedReadVersion;
}

double DatabaseContext::getLastGrvTime() {
	if (sharedStatePtr) {
		MutexHolder mutex(sharedStatePtr->mutexLock);
		return sharedStatePtr->grvCacheSpace.lastGrvTime;
	}
	return lastGrvTime;
}

Reference<StorageServerInfo> StorageServerInfo::getInterface(DatabaseContext* cx,
                                                             StorageServerInterface const& ssi,
                                                             LocalityData const& locality) {
	auto it = cx->server_interf.find(ssi.id());
	if (it != cx->server_interf.end()) {
		if (it->second->interf.getValue.getEndpoint().token != ssi.getValue.getEndpoint().token) {
			if (it->second->interf.locality == ssi.locality) {
				// FIXME: load balance holds pointers to individual members of the interface, and this assignment will
				// swap out the object they are
				//       pointing to. This is technically correct, but is very unnatural. We may want to refactor load
				//       balance to take an AsyncVar<Reference<Interface>> so that it is notified when the interface
				//       changes.

				it->second->interf = ssi;
			} else {
				it->second->notifyContextDestroyed();
				Reference<StorageServerInfo> loc(new StorageServerInfo(cx, ssi, locality));
				cx->server_interf[ssi.id()] = loc.getPtr();
				return loc;
			}
		}

		return Reference<StorageServerInfo>::addRef(it->second);
	}

	Reference<StorageServerInfo> loc(new StorageServerInfo(cx, ssi, locality));
	cx->server_interf[ssi.id()] = loc.getPtr();
	return loc;
}

void StorageServerInfo::notifyContextDestroyed() {
	cx = nullptr;
}

StorageServerInfo::~StorageServerInfo() {
	if (cx) {
		auto it = cx->server_interf.find(interf.id());
		if (it != cx->server_interf.end())
			cx->server_interf.erase(it);
		cx = nullptr;
	}
}

std::string printable(const VectorRef<KeyValueRef>& val) {
	std::string s;
	for (int i = 0; i < val.size(); i++)
		s = s + printable(val[i].key) + format(":%d ", val[i].value.size());
	return s;
}

std::string printable(const KeyValueRef& val) {
	return printable(val.key) + format(":%d ", val.value.size());
}

std::string printable(const VectorRef<StringRef>& val) {
	std::string s;
	for (int i = 0; i < val.size(); i++)
		s = s + printable(val[i]) + " ";
	return s;
}

std::string printable(const StringRef& val) {
	return val.printable();
}
std::string printable(const std::string& str) {
	return StringRef(str).printable();
}

std::string printable(const KeyRangeRef& range) {
	return printable(range.begin) + " - " + printable(range.end);
}

std::string printable(const VectorRef<KeyRangeRef>& val) {
	std::string s;
	for (int i = 0; i < val.size(); i++)
		s = s + printable(val[i]) + " ";
	return s;
}

int unhex(char c) {
	if (c >= '0' && c <= '9')
		return c - '0';
	if (c >= 'a' && c <= 'f')
		return c - 'a' + 10;
	if (c >= 'A' && c <= 'F')
		return c - 'A' + 10;
	UNREACHABLE();
}

std::string unprintable(std::string const& val) {
	std::string s;
	for (int i = 0; i < val.size(); i++) {
		char c = val[i];
		if (c == '\\') {
			if (++i == val.size())
				ASSERT(false);
			if (val[i] == '\\') {
				s += '\\';
			} else if (val[i] == 'x') {
				if (i + 2 >= val.size())
					ASSERT(false);
				s += char((unhex(val[i + 1]) << 4) + unhex(val[i + 2]));
				i += 2;
			} else
				ASSERT(false);
		} else
			s += c;
	}
	return s;
}

void DatabaseContext::validateVersion(Version version) const {
	// Version could be 0 if the INITIALIZE_NEW_DATABASE option is set. In that case, it is illegal to perform any
	// reads. We throw client_invalid_operation because the caller didn't directly set the version, so the
	// version_invalid error might be confusing.
	if (version == 0) {
		throw client_invalid_operation();
	}
	if (switchable && version < minAcceptableReadVersion) {
		CODE_PROBE(true, "Attempted to read a version lower than any this client has seen from the current cluster");
		throw transaction_too_old();
	}

	ASSERT(version > 0 || version == latestVersion);
}

void validateOptionValuePresent(Optional<StringRef> value) {
	if (!value.present()) {
		throw invalid_option_value();
	}
}

void validateOptionValueNotPresent(Optional<StringRef> value) {
	if (value.present() && value.get().size() > 0) {
		throw invalid_option_value();
	}
}

void dumpMutations(const MutationListRef& mutations) {
	for (auto m = mutations.begin(); m; ++m) {
		switch (m->type) {
		case MutationRef::SetValue:
			printf("  '%s' := '%s'\n", printable(m->param1).c_str(), printable(m->param2).c_str());
			break;
		case MutationRef::AddValue:
			printf("  '%s' += '%s'", printable(m->param1).c_str(), printable(m->param2).c_str());
			break;
		case MutationRef::ClearRange:
			printf("  Clear ['%s','%s')\n", printable(m->param1).c_str(), printable(m->param2).c_str());
			break;
		default:
			printf("  Unknown mutation %d('%s','%s')\n",
			       m->type,
			       printable(m->param1).c_str(),
			       printable(m->param2).c_str());
			break;
		}
	}
}

template <>
void addref(DatabaseContext* ptr) {
	ptr->addref();
}
template <>
void delref(DatabaseContext* ptr) {
	ptr->delref();
}

void traceTSSErrors(const char* name, UID tssId, const std::unordered_map<int, uint64_t>& errorsByCode) {
	TraceEvent ev(name, tssId);
	for (auto& it : errorsByCode) {
		ev.detail("E" + std::to_string(it.first), it.second);
	}
}

/*
    For each request type, this will produce
    <Type>Count
    <Type>{SS,TSS}{Mean,P50,P90,P99}
    Example:
    GetValueLatencySSMean
*/
void traceSSOrTSSPercentiles(TraceEvent& ev, const std::string name, DDSketch<double>& sample) {
	ev.detail(name + "Mean", sample.mean());
	// don't log the larger percentiles unless we actually have enough samples to log the accurate percentile instead of
	// the largest sample in this window
	if (sample.getPopulationSize() >= 3) {
		ev.detail(name + "P50", sample.median());
	}
	if (sample.getPopulationSize() >= 10) {
		ev.detail(name + "P90", sample.percentile(0.90));
	}
	if (sample.getPopulationSize() >= 100) {
		ev.detail(name + "P99", sample.percentile(0.99));
	}
}

void traceTSSPercentiles(TraceEvent& ev,
                         const std::string name,
                         DDSketch<double>& ssSample,
                         DDSketch<double>& tssSample) {
	ASSERT(ssSample.getPopulationSize() == tssSample.getPopulationSize());
	ev.detail(name + "Count", ssSample.getPopulationSize());
	if (ssSample.getPopulationSize() > 0) {
		traceSSOrTSSPercentiles(ev, name + "SS", ssSample);
		traceSSOrTSSPercentiles(ev, name + "TSS", tssSample);
	}
}

															#line 612 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via tssLogger()
															#line 610 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class TssLoggerActor>
															#line 610 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class TssLoggerActorState {
															#line 619 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 610 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	TssLoggerActorState(DatabaseContext* const& cx) 
															#line 610 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 610 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : cx(cx),
															#line 611 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   lastLogged(0)
															#line 628 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("tssLogger", reinterpret_cast<unsigned long>(this));

	}
	~TssLoggerActorState() 
	{
		fdb_probe_actor_destroy("tssLogger", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 612 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			;
															#line 643 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~TssLoggerActorState();
		static_cast<TssLoggerActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
															#line 613 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_0 = delay(CLIENT_KNOBS->TSS_METRICS_LOGGING_INTERVAL, TaskPriority::FlushTrace);
															#line 613 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<TssLoggerActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 675 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
		static_cast<TssLoggerActor*>(this)->actor_wait_state = 1;
															#line 613 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< TssLoggerActor, 0, Void >*>(static_cast<TssLoggerActor*>(this)));
															#line 680 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont1(Void const& _,int loopDepth) 
	{
															#line 616 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for( const auto& it : cx->tssMetrics ) {
															#line 617 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (it.second->detailedMismatches.size())
															#line 691 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 618 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				cx->tssMismatchStream.send( std::pair<UID, std::vector<DetailedTSSMismatch>>(it.first, it.second->detailedMismatches));
															#line 695 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 623 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (it.second->ssErrorsByCode.size())
															#line 699 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 624 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				traceTSSErrors("TSS_SSErrors", it.first, it.second->ssErrorsByCode);
															#line 703 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 627 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (it.second->tssErrorsByCode.size())
															#line 707 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 628 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				traceTSSErrors("TSS_TSSErrors", it.first, it.second->tssErrorsByCode);
															#line 711 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 631 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent tssEv("TSSClientMetrics", cx->dbId);
															#line 632 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tssEv.detail("TSSID", it.first) .detail("Elapsed", (lastLogged == 0) ? 0 : now() - lastLogged) .detail("Internal", cx->internal);
															#line 636 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			it.second->cc.logToTraceEvent(tssEv);
															#line 638 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			traceTSSPercentiles(tssEv, "GetValueLatency", it.second->SSgetValueLatency, it.second->TSSgetValueLatency);
															#line 639 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			traceTSSPercentiles( tssEv, "GetKeyValuesLatency", it.second->SSgetKeyValuesLatency, it.second->TSSgetKeyValuesLatency);
															#line 641 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			traceTSSPercentiles(tssEv, "GetKeyLatency", it.second->SSgetKeyLatency, it.second->TSSgetKeyLatency);
															#line 642 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			traceTSSPercentiles(tssEv, "GetMappedKeyValuesLatency", it.second->SSgetMappedKeyValuesLatency, it.second->TSSgetMappedKeyValuesLatency);
															#line 647 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			it.second->clear();
															#line 729 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 650 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		lastLogged = now();
															#line 733 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1cont1(Void && _,int loopDepth) 
	{
															#line 616 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for( const auto& it : cx->tssMetrics ) {
															#line 617 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (it.second->detailedMismatches.size())
															#line 744 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 618 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				cx->tssMismatchStream.send( std::pair<UID, std::vector<DetailedTSSMismatch>>(it.first, it.second->detailedMismatches));
															#line 748 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 623 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (it.second->ssErrorsByCode.size())
															#line 752 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 624 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				traceTSSErrors("TSS_SSErrors", it.first, it.second->ssErrorsByCode);
															#line 756 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 627 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (it.second->tssErrorsByCode.size())
															#line 760 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 628 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				traceTSSErrors("TSS_TSSErrors", it.first, it.second->tssErrorsByCode);
															#line 764 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 631 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent tssEv("TSSClientMetrics", cx->dbId);
															#line 632 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tssEv.detail("TSSID", it.first) .detail("Elapsed", (lastLogged == 0) ? 0 : now() - lastLogged) .detail("Internal", cx->internal);
															#line 636 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			it.second->cc.logToTraceEvent(tssEv);
															#line 638 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			traceTSSPercentiles(tssEv, "GetValueLatency", it.second->SSgetValueLatency, it.second->TSSgetValueLatency);
															#line 639 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			traceTSSPercentiles( tssEv, "GetKeyValuesLatency", it.second->SSgetKeyValuesLatency, it.second->TSSgetKeyValuesLatency);
															#line 641 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			traceTSSPercentiles(tssEv, "GetKeyLatency", it.second->SSgetKeyLatency, it.second->TSSgetKeyLatency);
															#line 642 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			traceTSSPercentiles(tssEv, "GetMappedKeyValuesLatency", it.second->SSgetMappedKeyValuesLatency, it.second->TSSgetMappedKeyValuesLatency);
															#line 647 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			it.second->clear();
															#line 782 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 650 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		lastLogged = now();
															#line 786 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<TssLoggerActor*>(this)->actor_wait_state > 0) static_cast<TssLoggerActor*>(this)->actor_wait_state = 0;
		static_cast<TssLoggerActor*>(this)->ActorCallback< TssLoggerActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< TssLoggerActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("tssLogger", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("tssLogger", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< TssLoggerActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("tssLogger", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("tssLogger", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< TssLoggerActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("tssLogger", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("tssLogger", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 610 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	DatabaseContext* cx;
															#line 611 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	double lastLogged;
															#line 858 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via tssLogger()
															#line 610 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class TssLoggerActor final : public Actor<Void>, public ActorCallback< TssLoggerActor, 0, Void >, public FastAllocated<TssLoggerActor>, public TssLoggerActorState<TssLoggerActor> {
															#line 863 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<TssLoggerActor>::operator new;
	using FastAllocated<TssLoggerActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< TssLoggerActor, 0, Void >;
															#line 610 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	TssLoggerActor(DatabaseContext* const& cx) 
															#line 874 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Void>(),
		   TssLoggerActorState<TssLoggerActor>(cx)
	{
		fdb_probe_actor_enter("tssLogger", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("tssLogger");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("tssLogger", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< TssLoggerActor, 0, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 610 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<Void> tssLogger( DatabaseContext* const& cx ) {
															#line 610 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Void>(new TssLoggerActor(cx));
															#line 902 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 653 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

															#line 907 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via databaseLogger()
															#line 654 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class DatabaseLoggerActor>
															#line 654 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class DatabaseLoggerActorState {
															#line 914 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 654 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	DatabaseLoggerActorState(DatabaseContext* const& cx) 
															#line 654 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 654 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : cx(cx),
															#line 655 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   lastLogged(0)
															#line 923 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("databaseLogger", reinterpret_cast<unsigned long>(this));

	}
	~DatabaseLoggerActorState() 
	{
		fdb_probe_actor_destroy("databaseLogger", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 656 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			;
															#line 938 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~DatabaseLoggerActorState();
		static_cast<DatabaseLoggerActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
															#line 657 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_0 = delay(CLIENT_KNOBS->SYSTEM_MONITOR_INTERVAL, TaskPriority::FlushTrace);
															#line 657 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<DatabaseLoggerActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 970 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
		static_cast<DatabaseLoggerActor*>(this)->actor_wait_state = 1;
															#line 657 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< DatabaseLoggerActor, 0, Void >*>(static_cast<DatabaseLoggerActor*>(this)));
															#line 975 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont1(Void const& _,int loopDepth) 
	{
															#line 659 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		bool logTraces = !g_network->isSimulated() || BUGGIFY_WITH_PROB(0.01);
															#line 660 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (logTraces)
															#line 986 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 661 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent ev("TransactionMetrics", cx->dbId);
															#line 663 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ev.detail("Elapsed", (lastLogged == 0) ? 0 : now() - lastLogged) .detail("Cluster", cx->getConnectionRecord() ? cx->getConnectionRecord()->getConnectionString().clusterKeyName().toString() : "") .detail("Internal", cx->internal);
															#line 670 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			cx->cc.logToTraceEvent(ev);
															#line 672 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ev.detail("LocationCacheEntryCount", cx->locationCache.size());
															#line 673 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ev.detail("MeanLatency", cx->latencies.mean()) .detail("MedianLatency", cx->latencies.median()) .detail("Latency90", cx->latencies.percentile(0.90)) .detail("Latency98", cx->latencies.percentile(0.98)) .detail("MaxLatency", cx->latencies.max()) .detail("MeanRowReadLatency", cx->readLatencies.mean()) .detail("MedianRowReadLatency", cx->readLatencies.median()) .detail("MaxRowReadLatency", cx->readLatencies.max()) .detail("MeanGRVLatency", cx->GRVLatencies.mean()) .detail("MedianGRVLatency", cx->GRVLatencies.median()) .detail("MaxGRVLatency", cx->GRVLatencies.max()) .detail("MeanCommitLatency", cx->commitLatencies.mean()) .detail("MedianCommitLatency", cx->commitLatencies.median()) .detail("MaxCommitLatency", cx->commitLatencies.max()) .detail("MeanMutationsPerCommit", cx->mutationsPerCommit.mean()) .detail("MedianMutationsPerCommit", cx->mutationsPerCommit.median()) .detail("MaxMutationsPerCommit", cx->mutationsPerCommit.max()) .detail("MeanBytesPerCommit", cx->bytesPerCommit.mean()) .detail("MedianBytesPerCommit", cx->bytesPerCommit.median()) .detail("MaxBytesPerCommit", cx->bytesPerCommit.max()) .detail("NumLocalityCacheEntries", cx->locationCache.size());
															#line 998 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 696 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (cx->usedAnyChangeFeeds && logTraces)
															#line 1002 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 697 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent feedEv("ChangeFeedClientMetrics", cx->dbId);
															#line 699 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			feedEv.detail("Elapsed", (lastLogged == 0) ? 0 : now() - lastLogged) .detail("Cluster", cx->getConnectionRecord() ? cx->getConnectionRecord()->getConnectionString().clusterKeyName().toString() : "") .detail("Internal", cx->internal);
															#line 706 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			cx->ccFeed.logToTraceEvent(feedEv);
															#line 1010 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 709 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (cx->anyBGReads && logTraces)
															#line 1014 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 710 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent bgReadEv("BlobGranuleReadMetrics", cx->dbId);
															#line 712 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			bgReadEv.detail("Elapsed", (lastLogged == 0) ? 0 : now() - lastLogged) .detail("Cluster", cx->getConnectionRecord() ? cx->getConnectionRecord()->getConnectionString().clusterKeyName().toString() : "") .detail("Internal", cx->internal);
															#line 720 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			cx->ccBG.logToTraceEvent(bgReadEv);
															#line 723 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			bgReadEv.detail("MeanBGLatency", cx->bgLatencies.mean()) .detail("MedianBGLatency", cx->bgLatencies.median()) .detail("MaxBGLatency", cx->bgLatencies.max()) .detail("MeanBGGranulesPerRequest", cx->bgGranulesPerRequest.mean()) .detail("MedianBGGranulesPerRequest", cx->bgGranulesPerRequest.median()) .detail("MaxBGGranulesPerRequest", cx->bgGranulesPerRequest.max());
															#line 1024 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 731 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		cx->latencies.clear();
															#line 732 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		cx->readLatencies.clear();
															#line 733 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		cx->GRVLatencies.clear();
															#line 734 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		cx->commitLatencies.clear();
															#line 735 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		cx->mutationsPerCommit.clear();
															#line 736 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		cx->bytesPerCommit.clear();
															#line 737 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		cx->bgLatencies.clear();
															#line 738 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		cx->bgGranulesPerRequest.clear();
															#line 740 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		lastLogged = now();
															#line 1044 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1cont1(Void && _,int loopDepth) 
	{
															#line 659 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		bool logTraces = !g_network->isSimulated() || BUGGIFY_WITH_PROB(0.01);
															#line 660 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (logTraces)
															#line 1055 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 661 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent ev("TransactionMetrics", cx->dbId);
															#line 663 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ev.detail("Elapsed", (lastLogged == 0) ? 0 : now() - lastLogged) .detail("Cluster", cx->getConnectionRecord() ? cx->getConnectionRecord()->getConnectionString().clusterKeyName().toString() : "") .detail("Internal", cx->internal);
															#line 670 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			cx->cc.logToTraceEvent(ev);
															#line 672 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ev.detail("LocationCacheEntryCount", cx->locationCache.size());
															#line 673 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ev.detail("MeanLatency", cx->latencies.mean()) .detail("MedianLatency", cx->latencies.median()) .detail("Latency90", cx->latencies.percentile(0.90)) .detail("Latency98", cx->latencies.percentile(0.98)) .detail("MaxLatency", cx->latencies.max()) .detail("MeanRowReadLatency", cx->readLatencies.mean()) .detail("MedianRowReadLatency", cx->readLatencies.median()) .detail("MaxRowReadLatency", cx->readLatencies.max()) .detail("MeanGRVLatency", cx->GRVLatencies.mean()) .detail("MedianGRVLatency", cx->GRVLatencies.median()) .detail("MaxGRVLatency", cx->GRVLatencies.max()) .detail("MeanCommitLatency", cx->commitLatencies.mean()) .detail("MedianCommitLatency", cx->commitLatencies.median()) .detail("MaxCommitLatency", cx->commitLatencies.max()) .detail("MeanMutationsPerCommit", cx->mutationsPerCommit.mean()) .detail("MedianMutationsPerCommit", cx->mutationsPerCommit.median()) .detail("MaxMutationsPerCommit", cx->mutationsPerCommit.max()) .detail("MeanBytesPerCommit", cx->bytesPerCommit.mean()) .detail("MedianBytesPerCommit", cx->bytesPerCommit.median()) .detail("MaxBytesPerCommit", cx->bytesPerCommit.max()) .detail("NumLocalityCacheEntries", cx->locationCache.size());
															#line 1067 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 696 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (cx->usedAnyChangeFeeds && logTraces)
															#line 1071 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 697 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent feedEv("ChangeFeedClientMetrics", cx->dbId);
															#line 699 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			feedEv.detail("Elapsed", (lastLogged == 0) ? 0 : now() - lastLogged) .detail("Cluster", cx->getConnectionRecord() ? cx->getConnectionRecord()->getConnectionString().clusterKeyName().toString() : "") .detail("Internal", cx->internal);
															#line 706 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			cx->ccFeed.logToTraceEvent(feedEv);
															#line 1079 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 709 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (cx->anyBGReads && logTraces)
															#line 1083 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 710 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent bgReadEv("BlobGranuleReadMetrics", cx->dbId);
															#line 712 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			bgReadEv.detail("Elapsed", (lastLogged == 0) ? 0 : now() - lastLogged) .detail("Cluster", cx->getConnectionRecord() ? cx->getConnectionRecord()->getConnectionString().clusterKeyName().toString() : "") .detail("Internal", cx->internal);
															#line 720 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			cx->ccBG.logToTraceEvent(bgReadEv);
															#line 723 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			bgReadEv.detail("MeanBGLatency", cx->bgLatencies.mean()) .detail("MedianBGLatency", cx->bgLatencies.median()) .detail("MaxBGLatency", cx->bgLatencies.max()) .detail("MeanBGGranulesPerRequest", cx->bgGranulesPerRequest.mean()) .detail("MedianBGGranulesPerRequest", cx->bgGranulesPerRequest.median()) .detail("MaxBGGranulesPerRequest", cx->bgGranulesPerRequest.max());
															#line 1093 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 731 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		cx->latencies.clear();
															#line 732 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		cx->readLatencies.clear();
															#line 733 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		cx->GRVLatencies.clear();
															#line 734 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		cx->commitLatencies.clear();
															#line 735 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		cx->mutationsPerCommit.clear();
															#line 736 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		cx->bytesPerCommit.clear();
															#line 737 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		cx->bgLatencies.clear();
															#line 738 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		cx->bgGranulesPerRequest.clear();
															#line 740 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		lastLogged = now();
															#line 1113 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<DatabaseLoggerActor*>(this)->actor_wait_state > 0) static_cast<DatabaseLoggerActor*>(this)->actor_wait_state = 0;
		static_cast<DatabaseLoggerActor*>(this)->ActorCallback< DatabaseLoggerActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< DatabaseLoggerActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("databaseLogger", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("databaseLogger", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< DatabaseLoggerActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("databaseLogger", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("databaseLogger", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< DatabaseLoggerActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("databaseLogger", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("databaseLogger", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 654 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	DatabaseContext* cx;
															#line 655 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	double lastLogged;
															#line 1185 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via databaseLogger()
															#line 654 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class DatabaseLoggerActor final : public Actor<Void>, public ActorCallback< DatabaseLoggerActor, 0, Void >, public FastAllocated<DatabaseLoggerActor>, public DatabaseLoggerActorState<DatabaseLoggerActor> {
															#line 1190 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<DatabaseLoggerActor>::operator new;
	using FastAllocated<DatabaseLoggerActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< DatabaseLoggerActor, 0, Void >;
															#line 654 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	DatabaseLoggerActor(DatabaseContext* const& cx) 
															#line 1201 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Void>(),
		   DatabaseLoggerActorState<DatabaseLoggerActor>(cx)
	{
		fdb_probe_actor_enter("databaseLogger", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("databaseLogger");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("databaseLogger", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< DatabaseLoggerActor, 0, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 654 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<Void> databaseLogger( DatabaseContext* const& cx ) {
															#line 654 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Void>(new DatabaseLoggerActor(cx));
															#line 1229 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 743 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

struct TrInfoChunk {
	ValueRef value;
	Key key;
};

															#line 1239 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via transactionInfoCommitActor()
															#line 749 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class TransactionInfoCommitActorActor>
															#line 749 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class TransactionInfoCommitActorActorState {
															#line 1246 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 749 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	TransactionInfoCommitActorActorState(Transaction* const& tr,std::vector<TrInfoChunk>* const& chunks) 
															#line 749 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 749 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : tr(tr),
															#line 749 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   chunks(chunks),
															#line 750 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   clientLatencyAtomicCtr(CLIENT_LATENCY_INFO_CTR_PREFIX.withPrefix(fdbClientInfoPrefixRange.begin)),
															#line 751 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   retryCount(0)
															#line 1259 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("transactionInfoCommitActor", reinterpret_cast<unsigned long>(this));

	}
	~TransactionInfoCommitActorActorState() 
	{
		fdb_probe_actor_destroy("transactionInfoCommitActor", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 752 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			;
															#line 1274 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~TransactionInfoCommitActorActorState();
		static_cast<TransactionInfoCommitActorActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
		try {
															#line 754 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tr->reset();
															#line 755 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 756 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tr->setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 757 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			vstamp = tr->getVersionstamp();
															#line 758 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			int64_t numCommitBytes = 0;
															#line 759 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			for( auto& chunk : *chunks ) {
															#line 760 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				tr->atomicOp(chunk.key, chunk.value, MutationRef::SetVersionstampedKey);
															#line 761 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				numCommitBytes += chunk.key.size() + chunk.value.size() - 4;
															#line 1319 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 764 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tr->atomicOp(clientLatencyAtomicCtr, StringRef((uint8_t*)&numCommitBytes, 8), MutationRef::AddValue);
															#line 765 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_0 = tr->commit();
															#line 765 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<TransactionInfoCommitActorActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 1327 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1loopBody1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
			static_cast<TransactionInfoCommitActorActor*>(this)->actor_wait_state = 1;
															#line 765 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< TransactionInfoCommitActorActor, 0, Void >*>(static_cast<TransactionInfoCommitActorActor*>(this)));
															#line 1332 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 768 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			retryCount++;
															#line 769 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (retryCount == 10)
															#line 1356 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 770 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				return a_body1Catch1(e, std::max(0, loopDepth - 1));
															#line 1360 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 771 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_1 = tr->onError(e);
															#line 771 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<TransactionInfoCommitActorActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 1366 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1Catch1when1(__when_expr_1.get(), loopDepth); };
			static_cast<TransactionInfoCommitActorActor*>(this)->actor_wait_state = 2;
															#line 771 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< TransactionInfoCommitActorActor, 1, Void >*>(static_cast<TransactionInfoCommitActorActor*>(this)));
															#line 1371 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(Void const& _,int loopDepth) 
	{
															#line 766 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<TransactionInfoCommitActorActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~TransactionInfoCommitActorActorState(); static_cast<TransactionInfoCommitActorActor*>(this)->destroy(); return 0; }
															#line 1386 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<TransactionInfoCommitActorActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~TransactionInfoCommitActorActorState();
		static_cast<TransactionInfoCommitActorActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2(Void && _,int loopDepth) 
	{
															#line 766 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<TransactionInfoCommitActorActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~TransactionInfoCommitActorActorState(); static_cast<TransactionInfoCommitActorActor*>(this)->destroy(); return 0; }
															#line 1398 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<TransactionInfoCommitActorActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~TransactionInfoCommitActorActorState();
		static_cast<TransactionInfoCommitActorActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<TransactionInfoCommitActorActor*>(this)->actor_wait_state > 0) static_cast<TransactionInfoCommitActorActor*>(this)->actor_wait_state = 0;
		static_cast<TransactionInfoCommitActorActor*>(this)->ActorCallback< TransactionInfoCommitActorActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< TransactionInfoCommitActorActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("transactionInfoCommitActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("transactionInfoCommitActor", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< TransactionInfoCommitActorActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("transactionInfoCommitActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("transactionInfoCommitActor", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< TransactionInfoCommitActorActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("transactionInfoCommitActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("transactionInfoCommitActor", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<TransactionInfoCommitActorActor*>(this)->actor_wait_state > 0) static_cast<TransactionInfoCommitActorActor*>(this)->actor_wait_state = 0;
		static_cast<TransactionInfoCommitActorActor*>(this)->ActorCallback< TransactionInfoCommitActorActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< TransactionInfoCommitActorActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("transactionInfoCommitActor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("transactionInfoCommitActor", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< TransactionInfoCommitActorActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("transactionInfoCommitActor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("transactionInfoCommitActor", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< TransactionInfoCommitActorActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("transactionInfoCommitActor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("transactionInfoCommitActor", reinterpret_cast<unsigned long>(this), 1);

	}
															#line 749 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Transaction* tr;
															#line 749 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	std::vector<TrInfoChunk>* chunks;
															#line 750 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	const Key clientLatencyAtomicCtr;
															#line 751 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	int retryCount;
															#line 757 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Future<Standalone<StringRef>> vstamp;
															#line 1554 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via transactionInfoCommitActor()
															#line 749 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class TransactionInfoCommitActorActor final : public Actor<Void>, public ActorCallback< TransactionInfoCommitActorActor, 0, Void >, public ActorCallback< TransactionInfoCommitActorActor, 1, Void >, public FastAllocated<TransactionInfoCommitActorActor>, public TransactionInfoCommitActorActorState<TransactionInfoCommitActorActor> {
															#line 1559 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<TransactionInfoCommitActorActor>::operator new;
	using FastAllocated<TransactionInfoCommitActorActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< TransactionInfoCommitActorActor, 0, Void >;
friend struct ActorCallback< TransactionInfoCommitActorActor, 1, Void >;
															#line 749 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	TransactionInfoCommitActorActor(Transaction* const& tr,std::vector<TrInfoChunk>* const& chunks) 
															#line 1571 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Void>(),
		   TransactionInfoCommitActorActorState<TransactionInfoCommitActorActor>(tr, chunks)
	{
		fdb_probe_actor_enter("transactionInfoCommitActor", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("transactionInfoCommitActor");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("transactionInfoCommitActor", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< TransactionInfoCommitActorActor, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< TransactionInfoCommitActorActor, 1, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 749 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] static Future<Void> transactionInfoCommitActor( Transaction* const& tr, std::vector<TrInfoChunk>* const& chunks ) {
															#line 749 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Void>(new TransactionInfoCommitActorActor(tr, chunks));
															#line 1600 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 775 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

															#line 1605 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via delExcessClntTxnEntriesActor()
															#line 776 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class DelExcessClntTxnEntriesActorActor>
															#line 776 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class DelExcessClntTxnEntriesActorActorState {
															#line 1612 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 776 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	DelExcessClntTxnEntriesActorActorState(Transaction* const& tr,int64_t const& clientTxInfoSizeLimit) 
															#line 776 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 776 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : tr(tr),
															#line 776 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   clientTxInfoSizeLimit(clientTxInfoSizeLimit),
															#line 777 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   clientLatencyName(CLIENT_LATENCY_INFO_PREFIX.withPrefix(fdbClientInfoPrefixRange.begin)),
															#line 778 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   clientLatencyAtomicCtr(CLIENT_LATENCY_INFO_CTR_PREFIX.withPrefix(fdbClientInfoPrefixRange.begin))
															#line 1625 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("delExcessClntTxnEntriesActor", reinterpret_cast<unsigned long>(this));

	}
	~DelExcessClntTxnEntriesActorActorState() 
	{
		fdb_probe_actor_destroy("delExcessClntTxnEntriesActor", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 779 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent(SevInfo, "DelExcessClntTxnEntriesCalled").log();
															#line 780 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			;
															#line 1642 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~DelExcessClntTxnEntriesActorActorState();
		static_cast<DelExcessClntTxnEntriesActorActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
		try {
															#line 782 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tr->reset();
															#line 783 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 784 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tr->setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 785 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Optional<Value>> __when_expr_0 = tr->get(KeyRef(clientLatencyAtomicCtr), Snapshot::True);
															#line 785 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<DelExcessClntTxnEntriesActorActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 1681 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1loopBody1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
			static_cast<DelExcessClntTxnEntriesActorActor*>(this)->actor_wait_state = 1;
															#line 785 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< DelExcessClntTxnEntriesActorActor, 0, Optional<Value> >*>(static_cast<DelExcessClntTxnEntriesActorActor*>(this)));
															#line 1686 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 820 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_3 = tr->onError(e);
															#line 820 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<DelExcessClntTxnEntriesActorActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 1710 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch1(__when_expr_3.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1Catch1when1(__when_expr_3.get(), loopDepth); };
			static_cast<DelExcessClntTxnEntriesActorActor*>(this)->actor_wait_state = 4;
															#line 820 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< DelExcessClntTxnEntriesActorActor, 3, Void >*>(static_cast<DelExcessClntTxnEntriesActorActor*>(this)));
															#line 1715 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(Optional<Value> const& ctrValue,int loopDepth) 
	{
															#line 786 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!ctrValue.present())
															#line 1730 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 787 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent(SevInfo, "NumClntTxnEntriesNotFound").log();
															#line 788 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<DelExcessClntTxnEntriesActorActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~DelExcessClntTxnEntriesActorActorState(); static_cast<DelExcessClntTxnEntriesActorActor*>(this)->destroy(); return 0; }
															#line 1736 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<DelExcessClntTxnEntriesActorActor*>(this)->SAV< Void >::value()) Void(Void());
			this->~DelExcessClntTxnEntriesActorActorState();
			static_cast<DelExcessClntTxnEntriesActorActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 790 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		txInfoSize = 0;
															#line 791 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(ctrValue.get().size() == sizeof(int64_t));
															#line 792 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		memcpy(&txInfoSize, ctrValue.get().begin(), ctrValue.get().size());
															#line 793 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (txInfoSize < clientTxInfoSizeLimit)
															#line 1750 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 794 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<DelExcessClntTxnEntriesActorActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~DelExcessClntTxnEntriesActorActorState(); static_cast<DelExcessClntTxnEntriesActorActor*>(this)->destroy(); return 0; }
															#line 1754 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<DelExcessClntTxnEntriesActorActor*>(this)->SAV< Void >::value()) Void(Void());
			this->~DelExcessClntTxnEntriesActorActorState();
			static_cast<DelExcessClntTxnEntriesActorActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 795 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		int getRangeByteLimit = (txInfoSize - clientTxInfoSizeLimit) < CLIENT_KNOBS->TRANSACTION_SIZE_LIMIT ? (txInfoSize - clientTxInfoSizeLimit) : CLIENT_KNOBS->TRANSACTION_SIZE_LIMIT;
															#line 798 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		GetRangeLimits limit(GetRangeLimits::ROW_LIMIT_UNLIMITED, getRangeByteLimit);
															#line 799 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<RangeResult> __when_expr_1 = tr->getRange(KeyRangeRef(clientLatencyName, strinc(clientLatencyName)), limit);
															#line 799 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<DelExcessClntTxnEntriesActorActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 1768 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
		static_cast<DelExcessClntTxnEntriesActorActor*>(this)->actor_wait_state = 2;
															#line 799 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< DelExcessClntTxnEntriesActorActor, 1, RangeResult >*>(static_cast<DelExcessClntTxnEntriesActorActor*>(this)));
															#line 1773 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2(Optional<Value> && ctrValue,int loopDepth) 
	{
															#line 786 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!ctrValue.present())
															#line 1782 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 787 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent(SevInfo, "NumClntTxnEntriesNotFound").log();
															#line 788 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<DelExcessClntTxnEntriesActorActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~DelExcessClntTxnEntriesActorActorState(); static_cast<DelExcessClntTxnEntriesActorActor*>(this)->destroy(); return 0; }
															#line 1788 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<DelExcessClntTxnEntriesActorActor*>(this)->SAV< Void >::value()) Void(Void());
			this->~DelExcessClntTxnEntriesActorActorState();
			static_cast<DelExcessClntTxnEntriesActorActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 790 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		txInfoSize = 0;
															#line 791 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(ctrValue.get().size() == sizeof(int64_t));
															#line 792 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		memcpy(&txInfoSize, ctrValue.get().begin(), ctrValue.get().size());
															#line 793 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (txInfoSize < clientTxInfoSizeLimit)
															#line 1802 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 794 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<DelExcessClntTxnEntriesActorActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~DelExcessClntTxnEntriesActorActorState(); static_cast<DelExcessClntTxnEntriesActorActor*>(this)->destroy(); return 0; }
															#line 1806 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<DelExcessClntTxnEntriesActorActor*>(this)->SAV< Void >::value()) Void(Void());
			this->~DelExcessClntTxnEntriesActorActorState();
			static_cast<DelExcessClntTxnEntriesActorActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 795 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		int getRangeByteLimit = (txInfoSize - clientTxInfoSizeLimit) < CLIENT_KNOBS->TRANSACTION_SIZE_LIMIT ? (txInfoSize - clientTxInfoSizeLimit) : CLIENT_KNOBS->TRANSACTION_SIZE_LIMIT;
															#line 798 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		GetRangeLimits limit(GetRangeLimits::ROW_LIMIT_UNLIMITED, getRangeByteLimit);
															#line 799 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<RangeResult> __when_expr_1 = tr->getRange(KeyRangeRef(clientLatencyName, strinc(clientLatencyName)), limit);
															#line 799 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<DelExcessClntTxnEntriesActorActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 1820 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
		static_cast<DelExcessClntTxnEntriesActorActor*>(this)->actor_wait_state = 2;
															#line 799 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< DelExcessClntTxnEntriesActorActor, 1, RangeResult >*>(static_cast<DelExcessClntTxnEntriesActorActor*>(this)));
															#line 1825 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1when1(Optional<Value> const& ctrValue,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(ctrValue, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Optional<Value> && ctrValue,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(std::move(ctrValue), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<DelExcessClntTxnEntriesActorActor*>(this)->actor_wait_state > 0) static_cast<DelExcessClntTxnEntriesActorActor*>(this)->actor_wait_state = 0;
		static_cast<DelExcessClntTxnEntriesActorActor*>(this)->ActorCallback< DelExcessClntTxnEntriesActorActor, 0, Optional<Value> >::remove();

	}
	void a_callback_fire(ActorCallback< DelExcessClntTxnEntriesActorActor, 0, Optional<Value> >*,Optional<Value> const& value) 
	{
		fdb_probe_actor_enter("delExcessClntTxnEntriesActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("delExcessClntTxnEntriesActor", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< DelExcessClntTxnEntriesActorActor, 0, Optional<Value> >*,Optional<Value> && value) 
	{
		fdb_probe_actor_enter("delExcessClntTxnEntriesActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("delExcessClntTxnEntriesActor", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< DelExcessClntTxnEntriesActorActor, 0, Optional<Value> >*,Error err) 
	{
		fdb_probe_actor_enter("delExcessClntTxnEntriesActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("delExcessClntTxnEntriesActor", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1cont3(RangeResult const& txEntries,int loopDepth) 
	{
															#line 801 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		numBytesToDel = 0;
															#line 802 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		KeyRef endKey;
															#line 803 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for( auto& kv : txEntries ) {
															#line 804 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			endKey = kv.key;
															#line 805 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			numBytesToDel += kv.key.size() + kv.value.size();
															#line 806 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (txInfoSize - numBytesToDel <= clientTxInfoSizeLimit)
															#line 1907 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
				break;
			}
		}
															#line 809 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (numBytesToDel)
															#line 1914 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 810 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tr->clear(KeyRangeRef(txEntries[0].key, strinc(endKey)));
															#line 811 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent(SevInfo, "DeletingExcessCntTxnEntries").detail("BytesToBeDeleted", numBytesToDel);
															#line 812 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			int64_t bytesDel = -numBytesToDel;
															#line 814 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tr->atomicOp(clientLatencyAtomicCtr, StringRef((uint8_t*)&bytesDel, 8), MutationRef::AddValue);
															#line 815 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_2 = tr->commit();
															#line 815 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<DelExcessClntTxnEntriesActorActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 1928 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1loopBody1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1loopBody1cont3when1(__when_expr_2.get(), loopDepth); };
			static_cast<DelExcessClntTxnEntriesActorActor*>(this)->actor_wait_state = 3;
															#line 815 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< DelExcessClntTxnEntriesActorActor, 2, Void >*>(static_cast<DelExcessClntTxnEntriesActorActor*>(this)));
															#line 1933 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1loopBody1cont6(loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont3(RangeResult && txEntries,int loopDepth) 
	{
															#line 801 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		numBytesToDel = 0;
															#line 802 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		KeyRef endKey;
															#line 803 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for( auto& kv : txEntries ) {
															#line 804 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			endKey = kv.key;
															#line 805 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			numBytesToDel += kv.key.size() + kv.value.size();
															#line 806 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (txInfoSize - numBytesToDel <= clientTxInfoSizeLimit)
															#line 1957 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
				break;
			}
		}
															#line 809 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (numBytesToDel)
															#line 1964 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 810 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tr->clear(KeyRangeRef(txEntries[0].key, strinc(endKey)));
															#line 811 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent(SevInfo, "DeletingExcessCntTxnEntries").detail("BytesToBeDeleted", numBytesToDel);
															#line 812 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			int64_t bytesDel = -numBytesToDel;
															#line 814 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tr->atomicOp(clientLatencyAtomicCtr, StringRef((uint8_t*)&bytesDel, 8), MutationRef::AddValue);
															#line 815 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_2 = tr->commit();
															#line 815 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<DelExcessClntTxnEntriesActorActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 1978 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1loopBody1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1loopBody1cont3when1(__when_expr_2.get(), loopDepth); };
			static_cast<DelExcessClntTxnEntriesActorActor*>(this)->actor_wait_state = 3;
															#line 815 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< DelExcessClntTxnEntriesActorActor, 2, Void >*>(static_cast<DelExcessClntTxnEntriesActorActor*>(this)));
															#line 1983 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1loopBody1cont6(loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(RangeResult const& txEntries,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3(txEntries, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(RangeResult && txEntries,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3(std::move(txEntries), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<DelExcessClntTxnEntriesActorActor*>(this)->actor_wait_state > 0) static_cast<DelExcessClntTxnEntriesActorActor*>(this)->actor_wait_state = 0;
		static_cast<DelExcessClntTxnEntriesActorActor*>(this)->ActorCallback< DelExcessClntTxnEntriesActorActor, 1, RangeResult >::remove();

	}
	void a_callback_fire(ActorCallback< DelExcessClntTxnEntriesActorActor, 1, RangeResult >*,RangeResult const& value) 
	{
		fdb_probe_actor_enter("delExcessClntTxnEntriesActor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("delExcessClntTxnEntriesActor", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< DelExcessClntTxnEntriesActorActor, 1, RangeResult >*,RangeResult && value) 
	{
		fdb_probe_actor_enter("delExcessClntTxnEntriesActor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("delExcessClntTxnEntriesActor", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< DelExcessClntTxnEntriesActorActor, 1, RangeResult >*,Error err) 
	{
		fdb_probe_actor_enter("delExcessClntTxnEntriesActor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("delExcessClntTxnEntriesActor", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1loopBody1cont6(int loopDepth) 
	{
															#line 817 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (txInfoSize - numBytesToDel <= clientTxInfoSizeLimit)
															#line 2060 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 818 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<DelExcessClntTxnEntriesActorActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~DelExcessClntTxnEntriesActorActorState(); static_cast<DelExcessClntTxnEntriesActorActor*>(this)->destroy(); return 0; }
															#line 2064 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<DelExcessClntTxnEntriesActorActor*>(this)->SAV< Void >::value()) Void(Void());
			this->~DelExcessClntTxnEntriesActorActorState();
			static_cast<DelExcessClntTxnEntriesActorActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
		loopDepth = a_body1loopBody1cont12(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont9(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont6(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont9(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont6(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont3when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont9(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont3when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont9(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<DelExcessClntTxnEntriesActorActor*>(this)->actor_wait_state > 0) static_cast<DelExcessClntTxnEntriesActorActor*>(this)->actor_wait_state = 0;
		static_cast<DelExcessClntTxnEntriesActorActor*>(this)->ActorCallback< DelExcessClntTxnEntriesActorActor, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< DelExcessClntTxnEntriesActorActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("delExcessClntTxnEntriesActor", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont3when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("delExcessClntTxnEntriesActor", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< DelExcessClntTxnEntriesActorActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("delExcessClntTxnEntriesActor", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont3when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("delExcessClntTxnEntriesActor", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< DelExcessClntTxnEntriesActorActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("delExcessClntTxnEntriesActor", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("delExcessClntTxnEntriesActor", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1loopBody1cont12(int loopDepth) 
	{
		try {
			loopDepth = a_body1loopBody1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<DelExcessClntTxnEntriesActorActor*>(this)->actor_wait_state > 0) static_cast<DelExcessClntTxnEntriesActorActor*>(this)->actor_wait_state = 0;
		static_cast<DelExcessClntTxnEntriesActorActor*>(this)->ActorCallback< DelExcessClntTxnEntriesActorActor, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< DelExcessClntTxnEntriesActorActor, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("delExcessClntTxnEntriesActor", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("delExcessClntTxnEntriesActor", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< DelExcessClntTxnEntriesActorActor, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("delExcessClntTxnEntriesActor", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("delExcessClntTxnEntriesActor", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< DelExcessClntTxnEntriesActorActor, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("delExcessClntTxnEntriesActor", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("delExcessClntTxnEntriesActor", reinterpret_cast<unsigned long>(this), 3);

	}
															#line 776 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Transaction* tr;
															#line 776 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	int64_t clientTxInfoSizeLimit;
															#line 777 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	const Key clientLatencyName;
															#line 778 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	const Key clientLatencyAtomicCtr;
															#line 790 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	int64_t txInfoSize;
															#line 801 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	int64_t numBytesToDel;
															#line 2249 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via delExcessClntTxnEntriesActor()
															#line 776 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class DelExcessClntTxnEntriesActorActor final : public Actor<Void>, public ActorCallback< DelExcessClntTxnEntriesActorActor, 0, Optional<Value> >, public ActorCallback< DelExcessClntTxnEntriesActorActor, 1, RangeResult >, public ActorCallback< DelExcessClntTxnEntriesActorActor, 2, Void >, public ActorCallback< DelExcessClntTxnEntriesActorActor, 3, Void >, public FastAllocated<DelExcessClntTxnEntriesActorActor>, public DelExcessClntTxnEntriesActorActorState<DelExcessClntTxnEntriesActorActor> {
															#line 2254 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<DelExcessClntTxnEntriesActorActor>::operator new;
	using FastAllocated<DelExcessClntTxnEntriesActorActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< DelExcessClntTxnEntriesActorActor, 0, Optional<Value> >;
friend struct ActorCallback< DelExcessClntTxnEntriesActorActor, 1, RangeResult >;
friend struct ActorCallback< DelExcessClntTxnEntriesActorActor, 2, Void >;
friend struct ActorCallback< DelExcessClntTxnEntriesActorActor, 3, Void >;
															#line 776 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	DelExcessClntTxnEntriesActorActor(Transaction* const& tr,int64_t const& clientTxInfoSizeLimit) 
															#line 2268 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Void>(),
		   DelExcessClntTxnEntriesActorActorState<DelExcessClntTxnEntriesActorActor>(tr, clientTxInfoSizeLimit)
	{
		fdb_probe_actor_enter("delExcessClntTxnEntriesActor", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("delExcessClntTxnEntriesActor");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("delExcessClntTxnEntriesActor", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< DelExcessClntTxnEntriesActorActor, 0, Optional<Value> >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< DelExcessClntTxnEntriesActorActor, 1, RangeResult >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< DelExcessClntTxnEntriesActorActor, 2, Void >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< DelExcessClntTxnEntriesActorActor, 3, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 776 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] static Future<Void> delExcessClntTxnEntriesActor( Transaction* const& tr, int64_t const& clientTxInfoSizeLimit ) {
															#line 776 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Void>(new DelExcessClntTxnEntriesActorActor(tr, clientTxInfoSizeLimit));
															#line 2299 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 824 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

// Delref and addref self to give self a chance to get destroyed.
															#line 2305 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via refreshTransaction()
															#line 826 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class RefreshTransactionActor>
															#line 826 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class RefreshTransactionActorState {
															#line 2312 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 826 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	RefreshTransactionActorState(DatabaseContext* const& self,Transaction* const& tr) 
															#line 826 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 826 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : self(self),
															#line 826 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   tr(tr)
															#line 2321 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("refreshTransaction", reinterpret_cast<unsigned long>(this));

	}
	~RefreshTransactionActorState() 
	{
		fdb_probe_actor_destroy("refreshTransaction", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 827 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			*tr = Transaction();
															#line 828 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_0 = delay(0);
															#line 828 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<RefreshTransactionActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 2340 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<RefreshTransactionActor*>(this)->actor_wait_state = 1;
															#line 828 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< RefreshTransactionActor, 0, Void >*>(static_cast<RefreshTransactionActor*>(this)));
															#line 2345 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~RefreshTransactionActorState();
		static_cast<RefreshTransactionActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void const& _,int loopDepth) 
	{
															#line 829 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		*tr = Transaction(Database(Reference<DatabaseContext>::addRef(self)));
															#line 830 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<RefreshTransactionActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~RefreshTransactionActorState(); static_cast<RefreshTransactionActor*>(this)->destroy(); return 0; }
															#line 2370 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<RefreshTransactionActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~RefreshTransactionActorState();
		static_cast<RefreshTransactionActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1(Void && _,int loopDepth) 
	{
															#line 829 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		*tr = Transaction(Database(Reference<DatabaseContext>::addRef(self)));
															#line 830 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<RefreshTransactionActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~RefreshTransactionActorState(); static_cast<RefreshTransactionActor*>(this)->destroy(); return 0; }
															#line 2384 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<RefreshTransactionActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~RefreshTransactionActorState();
		static_cast<RefreshTransactionActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<RefreshTransactionActor*>(this)->actor_wait_state > 0) static_cast<RefreshTransactionActor*>(this)->actor_wait_state = 0;
		static_cast<RefreshTransactionActor*>(this)->ActorCallback< RefreshTransactionActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< RefreshTransactionActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("refreshTransaction", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("refreshTransaction", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< RefreshTransactionActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("refreshTransaction", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("refreshTransaction", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< RefreshTransactionActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("refreshTransaction", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("refreshTransaction", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 826 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	DatabaseContext* self;
															#line 826 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Transaction* tr;
															#line 2459 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via refreshTransaction()
															#line 826 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class RefreshTransactionActor final : public Actor<Void>, public ActorCallback< RefreshTransactionActor, 0, Void >, public FastAllocated<RefreshTransactionActor>, public RefreshTransactionActorState<RefreshTransactionActor> {
															#line 2464 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<RefreshTransactionActor>::operator new;
	using FastAllocated<RefreshTransactionActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< RefreshTransactionActor, 0, Void >;
															#line 826 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	RefreshTransactionActor(DatabaseContext* const& self,Transaction* const& tr) 
															#line 2475 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Void>(),
		   RefreshTransactionActorState<RefreshTransactionActor>(self, tr)
	{
		fdb_probe_actor_enter("refreshTransaction", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("refreshTransaction");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("refreshTransaction", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< RefreshTransactionActor, 0, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 826 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] static Future<Void> refreshTransaction( DatabaseContext* const& self, Transaction* const& tr ) {
															#line 826 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Void>(new RefreshTransactionActor(self, tr));
															#line 2503 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 832 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

// The reason for getting a pointer to DatabaseContext instead of a reference counted object is because reference
// counting will increment reference count for DatabaseContext which holds the future of this actor. This creates a
// cyclic reference and hence this actor and Database object will not be destroyed at all.
															#line 2511 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via clientStatusUpdateActor()
															#line 836 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class ClientStatusUpdateActorActor>
															#line 836 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class ClientStatusUpdateActorActorState {
															#line 2518 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 836 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	ClientStatusUpdateActorActorState(DatabaseContext* const& cx) 
															#line 836 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 836 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : cx(cx),
															#line 837 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   clientLatencyName(CLIENT_LATENCY_INFO_PREFIX.withPrefix(fdbClientInfoPrefixRange.begin).toString()),
															#line 839 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   tr(),
															#line 840 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   commitQ(),
															#line 841 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   txBytes(0)
															#line 2533 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("clientStatusUpdateActor", reinterpret_cast<unsigned long>(this));

	}
	~ClientStatusUpdateActorActorState() 
	{
		fdb_probe_actor_destroy("clientStatusUpdateActor", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 843 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			;
															#line 2548 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~ClientStatusUpdateActorActorState();
		static_cast<ClientStatusUpdateActorActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
															#line 846 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_0 = refreshTransaction(cx, &tr);
															#line 846 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<ClientStatusUpdateActorActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 2580 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
		static_cast<ClientStatusUpdateActorActor*>(this)->actor_wait_state = 1;
															#line 846 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< ClientStatusUpdateActorActor, 0, Void >*>(static_cast<ClientStatusUpdateActorActor*>(this)));
															#line 2585 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont1(Void const& _,int loopDepth) 
	{
		try {
															#line 848 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ASSERT(cx->clientStatusUpdater.outStatusQ.empty());
															#line 849 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			cx->clientStatusUpdater.inStatusQ.swap(cx->clientStatusUpdater.outStatusQ);
															#line 851 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			trChunksQ = std::vector<TrInfoChunk>();
															#line 852 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			for( auto& entry : cx->clientStatusUpdater.outStatusQ ) {
															#line 853 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				auto& bw = entry.second;
															#line 854 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				int64_t value_size_limit = BUGGIFY ? deterministicRandom()->randomInt(1e3, CLIENT_KNOBS->VALUE_SIZE_LIMIT) : CLIENT_KNOBS->VALUE_SIZE_LIMIT;
															#line 857 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				int num_chunks = (bw.getLength() + value_size_limit - 1) / value_size_limit;
															#line 858 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				std::string random_id = deterministicRandom()->randomAlphaNumeric(16);
															#line 859 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				std::string user_provided_id = entry.first.size() ? entry.first + "/" : "";
															#line 860 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				for(int i = 0;i < num_chunks;i++) {
															#line 861 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					TrInfoChunk chunk;
															#line 862 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					BinaryWriter chunkBW(Unversioned());
															#line 863 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					chunkBW << bigEndian32(i + 1) << bigEndian32(num_chunks);
															#line 864 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					chunk.key = KeyRef(clientLatencyName + std::string(10, '\x00') + "/" + random_id + "/" + chunkBW.toValue().toString() + "/" + user_provided_id + std::string(4, '\x00'));
															#line 866 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					int32_t pos = littleEndian32(clientLatencyName.size());
															#line 867 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					memcpy(mutateString(chunk.key) + chunk.key.size() - sizeof(int32_t), &pos, sizeof(int32_t));
															#line 868 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					if (i == num_chunks - 1)
															#line 2627 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					{
															#line 869 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
						chunk.value = ValueRef(static_cast<uint8_t*>(bw.getData()) + (i * value_size_limit), bw.getLength() - (i * value_size_limit));
															#line 2631 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					}
					else
					{
															#line 872 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
						chunk.value = ValueRef(static_cast<uint8_t*>(bw.getData()) + (i * value_size_limit), value_size_limit);
															#line 2637 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					}
															#line 875 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					trChunksQ.push_back(std::move(chunk));
															#line 2641 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
			}
															#line 880 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			dataSizeLimit = BUGGIFY ? deterministicRandom()->randomInt(200e3, 1.5 * CLIENT_KNOBS->TRANSACTION_SIZE_LIMIT) : 0.8 * CLIENT_KNOBS->TRANSACTION_SIZE_LIMIT;
															#line 883 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tracking_iter = trChunksQ.begin();
															#line 884 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ASSERT(commitQ.empty() && (txBytes == 0));
															#line 885 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			;
															#line 2652 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1loopBody1cont1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1cont1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1cont1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(Void && _,int loopDepth) 
	{
		try {
															#line 848 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ASSERT(cx->clientStatusUpdater.outStatusQ.empty());
															#line 849 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			cx->clientStatusUpdater.inStatusQ.swap(cx->clientStatusUpdater.outStatusQ);
															#line 851 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			trChunksQ = std::vector<TrInfoChunk>();
															#line 852 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			for( auto& entry : cx->clientStatusUpdater.outStatusQ ) {
															#line 853 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				auto& bw = entry.second;
															#line 854 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				int64_t value_size_limit = BUGGIFY ? deterministicRandom()->randomInt(1e3, CLIENT_KNOBS->VALUE_SIZE_LIMIT) : CLIENT_KNOBS->VALUE_SIZE_LIMIT;
															#line 857 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				int num_chunks = (bw.getLength() + value_size_limit - 1) / value_size_limit;
															#line 858 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				std::string random_id = deterministicRandom()->randomAlphaNumeric(16);
															#line 859 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				std::string user_provided_id = entry.first.size() ? entry.first + "/" : "";
															#line 860 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				for(int i = 0;i < num_chunks;i++) {
															#line 861 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					TrInfoChunk chunk;
															#line 862 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					BinaryWriter chunkBW(Unversioned());
															#line 863 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					chunkBW << bigEndian32(i + 1) << bigEndian32(num_chunks);
															#line 864 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					chunk.key = KeyRef(clientLatencyName + std::string(10, '\x00') + "/" + random_id + "/" + chunkBW.toValue().toString() + "/" + user_provided_id + std::string(4, '\x00'));
															#line 866 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					int32_t pos = littleEndian32(clientLatencyName.size());
															#line 867 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					memcpy(mutateString(chunk.key) + chunk.key.size() - sizeof(int32_t), &pos, sizeof(int32_t));
															#line 868 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					if (i == num_chunks - 1)
															#line 2700 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					{
															#line 869 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
						chunk.value = ValueRef(static_cast<uint8_t*>(bw.getData()) + (i * value_size_limit), bw.getLength() - (i * value_size_limit));
															#line 2704 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					}
					else
					{
															#line 872 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
						chunk.value = ValueRef(static_cast<uint8_t*>(bw.getData()) + (i * value_size_limit), value_size_limit);
															#line 2710 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					}
															#line 875 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					trChunksQ.push_back(std::move(chunk));
															#line 2714 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
			}
															#line 880 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			dataSizeLimit = BUGGIFY ? deterministicRandom()->randomInt(200e3, 1.5 * CLIENT_KNOBS->TRANSACTION_SIZE_LIMIT) : 0.8 * CLIENT_KNOBS->TRANSACTION_SIZE_LIMIT;
															#line 883 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tracking_iter = trChunksQ.begin();
															#line 884 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ASSERT(commitQ.empty() && (txBytes == 0));
															#line 885 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			;
															#line 2725 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1loopBody1cont1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1cont1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1cont1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<ClientStatusUpdateActorActor*>(this)->actor_wait_state > 0) static_cast<ClientStatusUpdateActorActor*>(this)->actor_wait_state = 0;
		static_cast<ClientStatusUpdateActorActor*>(this)->ActorCallback< ClientStatusUpdateActorActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< ClientStatusUpdateActorActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("clientStatusUpdateActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("clientStatusUpdateActor", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< ClientStatusUpdateActorActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("clientStatusUpdateActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("clientStatusUpdateActor", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< ClientStatusUpdateActorActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("clientStatusUpdateActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("clientStatusUpdateActor", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1cont2(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1cont1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 932 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (e.code() == error_code_actor_cancelled)
															#line 2810 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 933 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				return a_body1Catch1(e, std::max(0, loopDepth - 1));
															#line 2814 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 935 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			cx->clientStatusUpdater.outStatusQ.clear();
															#line 936 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent(SevWarnAlways, "UnableToWriteClientStatus").error(e);
															#line 937 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_6 = delay(10.0);
															#line 937 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<ClientStatusUpdateActorActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 2824 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_6.isReady()) { if (__when_expr_6.isError()) return a_body1Catch1(__when_expr_6.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1cont1Catch1when1(__when_expr_6.get(), loopDepth); };
			static_cast<ClientStatusUpdateActorActor*>(this)->actor_wait_state = 7;
															#line 937 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_6.addCallbackAndClear(static_cast<ActorCallback< ClientStatusUpdateActorActor, 6, Void >*>(static_cast<ClientStatusUpdateActorActor*>(this)));
															#line 2829 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont3(int loopDepth) 
	{
															#line 919 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		cx->clientStatusUpdater.outStatusQ.clear();
															#line 920 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_3 = cx->globalConfig->onInitialized();
															#line 920 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<ClientStatusUpdateActorActor*>(this)->actor_wait_state < 0) return a_body1loopBody1cont1Catch1(actor_cancelled(), loopDepth);
															#line 2848 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1loopBody1cont1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1loopBody1cont3when1(__when_expr_3.get(), loopDepth); };
		static_cast<ClientStatusUpdateActorActor*>(this)->actor_wait_state = 4;
															#line 920 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< ClientStatusUpdateActorActor, 3, Void >*>(static_cast<ClientStatusUpdateActorActor*>(this)));
															#line 2853 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1cont1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1(int loopDepth) 
	{
															#line 886 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		iter = tracking_iter;
															#line 887 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		txBytes = 0;
															#line 888 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		commitQ.clear();
															#line 2873 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		try {
															#line 890 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			;
															#line 2877 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1loopBody1cont1loopBody1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1cont1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1cont1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1break1(int loopDepth) 
	{
		try {
			return a_body1loopBody1cont3(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1cont1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1cont1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopBody1cont1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 908 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (e.code() == error_code_transaction_too_large)
															#line 2912 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 909 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				dataSizeLimit /= 2;
															#line 910 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				ASSERT(dataSizeLimit >= CLIENT_KNOBS->VALUE_SIZE_LIMIT + CLIENT_KNOBS->KEY_SIZE_LIMIT);
															#line 2918 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
			else
			{
															#line 912 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				TraceEvent(SevWarnAlways, "ClientTrInfoErrorCommit").error(e).detail("TxBytes", txBytes);
															#line 913 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				commitQ.clear();
															#line 914 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				txBytes = 0;
															#line 915 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				return a_body1loopBody1cont1Catch1(e, std::max(0, loopDepth - 1));
															#line 2930 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
			loopDepth = a_body1loopBody1cont1loopBody1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1cont1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1loopBody1cont1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1cont2(int loopDepth) 
	{
															#line 901 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!commitQ.empty())
															#line 2946 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 902 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_2 = transactionInfoCommitActor(&tr, &commitQ);
															#line 902 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<ClientStatusUpdateActorActor*>(this)->actor_wait_state < 0) return a_body1loopBody1cont1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 2952 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1loopBody1cont1loopBody1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1loopBody1cont1loopBody1cont2when1(__when_expr_2.get(), loopDepth); };
			static_cast<ClientStatusUpdateActorActor*>(this)->actor_wait_state = 3;
															#line 902 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< ClientStatusUpdateActorActor, 2, Void >*>(static_cast<ClientStatusUpdateActorActor*>(this)));
															#line 2957 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1loopBody1cont1loopBody1cont3(loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1cont1loopBody1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1loopBody1(int loopDepth) 
	{
															#line 890 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!(iter != trChunksQ.end()))
															#line 2978 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
			return a_body1loopBody1cont1loopBody1break1(loopDepth==0?0:loopDepth-1); // break
		}
															#line 891 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (iter->value.size() + iter->key.size() + txBytes > dataSizeLimit)
															#line 2984 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 892 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_1 = transactionInfoCommitActor(&tr, &commitQ);
															#line 892 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<ClientStatusUpdateActorActor*>(this)->actor_wait_state < 0) return a_body1loopBody1cont1loopBody1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 2990 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1cont1loopBody1Catch1(__when_expr_1.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1cont1loopBody1loopBody1when1(__when_expr_1.get(), loopDepth); };
			static_cast<ClientStatusUpdateActorActor*>(this)->actor_wait_state = 2;
															#line 892 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< ClientStatusUpdateActorActor, 1, Void >*>(static_cast<ClientStatusUpdateActorActor*>(this)));
															#line 2995 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1loopBody1cont1loopBody1loopBody1cont1(loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1break1(int loopDepth) 
	{
		try {
			return a_body1loopBody1cont1loopBody1cont2(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1cont1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1cont1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1loopBody1cont1(int loopDepth) 
	{
															#line 897 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		commitQ.push_back(*iter);
															#line 898 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		txBytes += iter->value.size() + iter->key.size();
															#line 899 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		++iter;
															#line 3026 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (loopDepth == 0) return a_body1loopBody1cont1loopBody1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1loopBody1cont3(Void const& _,int loopDepth) 
	{
															#line 893 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		tracking_iter = iter;
															#line 894 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		commitQ.clear();
															#line 895 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		txBytes = 0;
															#line 3039 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont1loopBody1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1loopBody1cont3(Void && _,int loopDepth) 
	{
															#line 893 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		tracking_iter = iter;
															#line 894 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		commitQ.clear();
															#line 895 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		txBytes = 0;
															#line 3052 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont1loopBody1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1loopBody1loopBody1cont3(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1loopBody1loopBody1cont3(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<ClientStatusUpdateActorActor*>(this)->actor_wait_state > 0) static_cast<ClientStatusUpdateActorActor*>(this)->actor_wait_state = 0;
		static_cast<ClientStatusUpdateActorActor*>(this)->ActorCallback< ClientStatusUpdateActorActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< ClientStatusUpdateActorActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("clientStatusUpdateActor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont1loopBody1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("clientStatusUpdateActor", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< ClientStatusUpdateActorActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("clientStatusUpdateActor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont1loopBody1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("clientStatusUpdateActor", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< ClientStatusUpdateActorActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("clientStatusUpdateActor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("clientStatusUpdateActor", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1loopBody1cont1loopBody1cont3(int loopDepth) 
	{
		return a_body1loopBody1cont1break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1cont4(Void const& _,int loopDepth) 
	{
															#line 903 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		commitQ.clear();
															#line 904 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		txBytes = 0;
															#line 3132 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont1loopBody1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1cont4(Void && _,int loopDepth) 
	{
															#line 903 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		commitQ.clear();
															#line 904 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		txBytes = 0;
															#line 3143 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont1loopBody1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1loopBody1cont4(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1loopBody1cont4(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<ClientStatusUpdateActorActor*>(this)->actor_wait_state > 0) static_cast<ClientStatusUpdateActorActor*>(this)->actor_wait_state = 0;
		static_cast<ClientStatusUpdateActorActor*>(this)->ActorCallback< ClientStatusUpdateActorActor, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< ClientStatusUpdateActorActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("clientStatusUpdateActor", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont1loopBody1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("clientStatusUpdateActor", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< ClientStatusUpdateActorActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("clientStatusUpdateActor", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont1loopBody1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("clientStatusUpdateActor", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< ClientStatusUpdateActorActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("clientStatusUpdateActor", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("clientStatusUpdateActor", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1loopBody1cont8(Void const& _,int loopDepth) 
	{
															#line 921 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		double sampleRate = cx->globalConfig->get<double>(fdbClientInfoTxnSampleRate, std::numeric_limits<double>::infinity());
															#line 923 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		double clientSamplingProbability = std::isinf(sampleRate) ? CLIENT_KNOBS->CSI_SAMPLING_PROBABILITY : sampleRate;
															#line 925 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		int64_t sizeLimit = cx->globalConfig->get<int64_t>(fdbClientInfoTxnSizeLimit, -1);
															#line 926 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		int64_t clientTxnInfoSizeLimit = sizeLimit == -1 ? CLIENT_KNOBS->CSI_SIZE_LIMIT : sizeLimit;
															#line 927 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!trChunksQ.empty() && deterministicRandom()->random01() < clientSamplingProbability)
															#line 3223 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 928 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_4 = delExcessClntTxnEntriesActor(&tr, clientTxnInfoSizeLimit);
															#line 928 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<ClientStatusUpdateActorActor*>(this)->actor_wait_state < 0) return a_body1loopBody1cont1Catch1(actor_cancelled(), loopDepth);
															#line 3229 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1loopBody1cont1Catch1(__when_expr_4.getError(), loopDepth); else return a_body1loopBody1cont8when1(__when_expr_4.get(), loopDepth); };
			static_cast<ClientStatusUpdateActorActor*>(this)->actor_wait_state = 5;
															#line 928 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< ClientStatusUpdateActorActor, 4, Void >*>(static_cast<ClientStatusUpdateActorActor*>(this)));
															#line 3234 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1loopBody1cont9(loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont8(Void && _,int loopDepth) 
	{
															#line 921 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		double sampleRate = cx->globalConfig->get<double>(fdbClientInfoTxnSampleRate, std::numeric_limits<double>::infinity());
															#line 923 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		double clientSamplingProbability = std::isinf(sampleRate) ? CLIENT_KNOBS->CSI_SAMPLING_PROBABILITY : sampleRate;
															#line 925 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		int64_t sizeLimit = cx->globalConfig->get<int64_t>(fdbClientInfoTxnSizeLimit, -1);
															#line 926 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		int64_t clientTxnInfoSizeLimit = sizeLimit == -1 ? CLIENT_KNOBS->CSI_SIZE_LIMIT : sizeLimit;
															#line 927 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!trChunksQ.empty() && deterministicRandom()->random01() < clientSamplingProbability)
															#line 3256 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 928 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_4 = delExcessClntTxnEntriesActor(&tr, clientTxnInfoSizeLimit);
															#line 928 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<ClientStatusUpdateActorActor*>(this)->actor_wait_state < 0) return a_body1loopBody1cont1Catch1(actor_cancelled(), loopDepth);
															#line 3262 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1loopBody1cont1Catch1(__when_expr_4.getError(), loopDepth); else return a_body1loopBody1cont8when1(__when_expr_4.get(), loopDepth); };
			static_cast<ClientStatusUpdateActorActor*>(this)->actor_wait_state = 5;
															#line 928 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< ClientStatusUpdateActorActor, 4, Void >*>(static_cast<ClientStatusUpdateActorActor*>(this)));
															#line 3267 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1loopBody1cont9(loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont3when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont8(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont3when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont8(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<ClientStatusUpdateActorActor*>(this)->actor_wait_state > 0) static_cast<ClientStatusUpdateActorActor*>(this)->actor_wait_state = 0;
		static_cast<ClientStatusUpdateActorActor*>(this)->ActorCallback< ClientStatusUpdateActorActor, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< ClientStatusUpdateActorActor, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("clientStatusUpdateActor", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1cont3when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("clientStatusUpdateActor", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< ClientStatusUpdateActorActor, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("clientStatusUpdateActor", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1cont3when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("clientStatusUpdateActor", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< ClientStatusUpdateActorActor, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("clientStatusUpdateActor", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1cont1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("clientStatusUpdateActor", reinterpret_cast<unsigned long>(this), 3);

	}
	int a_body1loopBody1cont9(int loopDepth) 
	{
															#line 930 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_5 = delay(CLIENT_KNOBS->CSI_STATUS_DELAY);
															#line 930 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<ClientStatusUpdateActorActor*>(this)->actor_wait_state < 0) return a_body1loopBody1cont1Catch1(actor_cancelled(), loopDepth);
															#line 3346 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_5.isReady()) { if (__when_expr_5.isError()) return a_body1loopBody1cont1Catch1(__when_expr_5.getError(), loopDepth); else return a_body1loopBody1cont9when1(__when_expr_5.get(), loopDepth); };
		static_cast<ClientStatusUpdateActorActor*>(this)->actor_wait_state = 6;
															#line 930 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_5.addCallbackAndClear(static_cast<ActorCallback< ClientStatusUpdateActorActor, 5, Void >*>(static_cast<ClientStatusUpdateActorActor*>(this)));
															#line 3351 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont10(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont9(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont10(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont9(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont8when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont10(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont8when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont10(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose5() 
	{
		if (static_cast<ClientStatusUpdateActorActor*>(this)->actor_wait_state > 0) static_cast<ClientStatusUpdateActorActor*>(this)->actor_wait_state = 0;
		static_cast<ClientStatusUpdateActorActor*>(this)->ActorCallback< ClientStatusUpdateActorActor, 4, Void >::remove();

	}
	void a_callback_fire(ActorCallback< ClientStatusUpdateActorActor, 4, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("clientStatusUpdateActor", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1loopBody1cont8when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("clientStatusUpdateActor", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_fire(ActorCallback< ClientStatusUpdateActorActor, 4, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("clientStatusUpdateActor", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1loopBody1cont8when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("clientStatusUpdateActor", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_error(ActorCallback< ClientStatusUpdateActorActor, 4, Void >*,Error err) 
	{
		fdb_probe_actor_enter("clientStatusUpdateActor", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1loopBody1cont1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("clientStatusUpdateActor", reinterpret_cast<unsigned long>(this), 4);

	}
	int a_body1loopBody1cont11(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont11cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont11(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont11cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont9when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont11(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont9when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont11(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose6() 
	{
		if (static_cast<ClientStatusUpdateActorActor*>(this)->actor_wait_state > 0) static_cast<ClientStatusUpdateActorActor*>(this)->actor_wait_state = 0;
		static_cast<ClientStatusUpdateActorActor*>(this)->ActorCallback< ClientStatusUpdateActorActor, 5, Void >::remove();

	}
	void a_callback_fire(ActorCallback< ClientStatusUpdateActorActor, 5, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("clientStatusUpdateActor", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1loopBody1cont9when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("clientStatusUpdateActor", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_fire(ActorCallback< ClientStatusUpdateActorActor, 5, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("clientStatusUpdateActor", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1loopBody1cont9when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("clientStatusUpdateActor", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_error(ActorCallback< ClientStatusUpdateActorActor, 5, Void >*,Error err) 
	{
		fdb_probe_actor_enter("clientStatusUpdateActor", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1loopBody1cont1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("clientStatusUpdateActor", reinterpret_cast<unsigned long>(this), 5);

	}
	int a_body1loopBody1cont11cont1(int loopDepth) 
	{
		try {
			loopDepth = a_body1loopBody1cont2(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose7() 
	{
		if (static_cast<ClientStatusUpdateActorActor*>(this)->actor_wait_state > 0) static_cast<ClientStatusUpdateActorActor*>(this)->actor_wait_state = 0;
		static_cast<ClientStatusUpdateActorActor*>(this)->ActorCallback< ClientStatusUpdateActorActor, 6, Void >::remove();

	}
	void a_callback_fire(ActorCallback< ClientStatusUpdateActorActor, 6, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("clientStatusUpdateActor", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1loopBody1cont1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("clientStatusUpdateActor", reinterpret_cast<unsigned long>(this), 6);

	}
	void a_callback_fire(ActorCallback< ClientStatusUpdateActorActor, 6, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("clientStatusUpdateActor", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1loopBody1cont1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("clientStatusUpdateActor", reinterpret_cast<unsigned long>(this), 6);

	}
	void a_callback_error(ActorCallback< ClientStatusUpdateActorActor, 6, Void >*,Error err) 
	{
		fdb_probe_actor_enter("clientStatusUpdateActor", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("clientStatusUpdateActor", reinterpret_cast<unsigned long>(this), 6);

	}
															#line 836 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	DatabaseContext* cx;
															#line 837 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	const std::string clientLatencyName;
															#line 839 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Transaction tr;
															#line 840 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	std::vector<TrInfoChunk> commitQ;
															#line 841 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	int txBytes;
															#line 851 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	std::vector<TrInfoChunk> trChunksQ;
															#line 880 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	int64_t dataSizeLimit;
															#line 883 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	std::vector<TrInfoChunk>::iterator tracking_iter;
															#line 886 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	std::vector<TrInfoChunk>::iterator iter;
															#line 3612 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via clientStatusUpdateActor()
															#line 836 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class ClientStatusUpdateActorActor final : public Actor<Void>, public ActorCallback< ClientStatusUpdateActorActor, 0, Void >, public ActorCallback< ClientStatusUpdateActorActor, 1, Void >, public ActorCallback< ClientStatusUpdateActorActor, 2, Void >, public ActorCallback< ClientStatusUpdateActorActor, 3, Void >, public ActorCallback< ClientStatusUpdateActorActor, 4, Void >, public ActorCallback< ClientStatusUpdateActorActor, 5, Void >, public ActorCallback< ClientStatusUpdateActorActor, 6, Void >, public FastAllocated<ClientStatusUpdateActorActor>, public ClientStatusUpdateActorActorState<ClientStatusUpdateActorActor> {
															#line 3617 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<ClientStatusUpdateActorActor>::operator new;
	using FastAllocated<ClientStatusUpdateActorActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< ClientStatusUpdateActorActor, 0, Void >;
friend struct ActorCallback< ClientStatusUpdateActorActor, 1, Void >;
friend struct ActorCallback< ClientStatusUpdateActorActor, 2, Void >;
friend struct ActorCallback< ClientStatusUpdateActorActor, 3, Void >;
friend struct ActorCallback< ClientStatusUpdateActorActor, 4, Void >;
friend struct ActorCallback< ClientStatusUpdateActorActor, 5, Void >;
friend struct ActorCallback< ClientStatusUpdateActorActor, 6, Void >;
															#line 836 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	ClientStatusUpdateActorActor(DatabaseContext* const& cx) 
															#line 3634 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Void>(),
		   ClientStatusUpdateActorActorState<ClientStatusUpdateActorActor>(cx)
	{
		fdb_probe_actor_enter("clientStatusUpdateActor", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("clientStatusUpdateActor");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("clientStatusUpdateActor", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< ClientStatusUpdateActorActor, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< ClientStatusUpdateActorActor, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< ClientStatusUpdateActorActor, 2, Void >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< ClientStatusUpdateActorActor, 3, Void >*)0, actor_cancelled()); break;
		case 5: this->a_callback_error((ActorCallback< ClientStatusUpdateActorActor, 4, Void >*)0, actor_cancelled()); break;
		case 6: this->a_callback_error((ActorCallback< ClientStatusUpdateActorActor, 5, Void >*)0, actor_cancelled()); break;
		case 7: this->a_callback_error((ActorCallback< ClientStatusUpdateActorActor, 6, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 836 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] static Future<Void> clientStatusUpdateActor( DatabaseContext* const& cx ) {
															#line 836 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Void>(new ClientStatusUpdateActorActor(cx));
															#line 3668 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 941 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

															#line 3673 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via assertFailure()
															#line 942 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class AssertFailureActor>
															#line 942 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class AssertFailureActorState {
															#line 3680 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 942 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	AssertFailureActorState(GrvProxyInterface const& remote,Future<ErrorOr<GetReadVersionReply>> const& reply) 
															#line 942 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 942 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : remote(remote),
															#line 942 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   reply(reply)
															#line 3689 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("assertFailure", reinterpret_cast<unsigned long>(this));

	}
	~AssertFailureActorState() 
	{
		fdb_probe_actor_destroy("assertFailure", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
			try {
															#line 944 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				StrictFuture<ErrorOr<GetReadVersionReply>> __when_expr_0 = reply;
															#line 944 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (static_cast<AssertFailureActor*>(this)->actor_wait_state < 0) return a_body1Catch2(actor_cancelled(), loopDepth);
															#line 3707 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch2(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
				static_cast<AssertFailureActor*>(this)->actor_wait_state = 1;
															#line 944 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< AssertFailureActor, 0, ErrorOr<GetReadVersionReply> >*>(static_cast<AssertFailureActor*>(this)));
															#line 3712 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				loopDepth = 0;
			}
			catch (Error& error) {
				loopDepth = a_body1Catch2(error, loopDepth);
			} catch (...) {
				loopDepth = a_body1Catch2(unknown_error(), loopDepth);
			}
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~AssertFailureActorState();
		static_cast<AssertFailureActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 958 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<AssertFailureActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~AssertFailureActorState(); static_cast<AssertFailureActor*>(this)->destroy(); return 0; }
															#line 3741 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<AssertFailureActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~AssertFailureActorState();
		static_cast<AssertFailureActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1Catch2(const Error& e,int loopDepth=0) 
	{
		try {
															#line 953 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (e.code() == error_code_actor_cancelled)
															#line 3754 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 954 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				return a_body1Catch1(e, loopDepth);
															#line 3758 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
			loopDepth = a_body1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont2(ErrorOr<GetReadVersionReply> const& res,int loopDepth) 
	{
															#line 945 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!res.isError())
															#line 3774 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 946 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent(SevError, "GotStaleReadVersion") .detail("Remote", remote.getConsistentReadVersion.getEndpoint().addresses.address.toString()) .detail("Provisional", remote.provisional) .detail("ReadVersion", res.get().version);
															#line 950 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ASSERT_WE_THINK(false);
															#line 3780 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
		loopDepth = a_body1cont5(loopDepth);

		return loopDepth;
	}
	int a_body1cont2(ErrorOr<GetReadVersionReply> && res,int loopDepth) 
	{
															#line 945 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!res.isError())
															#line 3790 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 946 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent(SevError, "GotStaleReadVersion") .detail("Remote", remote.getConsistentReadVersion.getEndpoint().addresses.address.toString()) .detail("Provisional", remote.provisional) .detail("ReadVersion", res.get().version);
															#line 950 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ASSERT_WE_THINK(false);
															#line 3796 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
		loopDepth = a_body1cont5(loopDepth);

		return loopDepth;
	}
	int a_body1when1(ErrorOr<GetReadVersionReply> const& res,int loopDepth) 
	{
		loopDepth = a_body1cont2(res, loopDepth);

		return loopDepth;
	}
	int a_body1when1(ErrorOr<GetReadVersionReply> && res,int loopDepth) 
	{
		loopDepth = a_body1cont2(std::move(res), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<AssertFailureActor*>(this)->actor_wait_state > 0) static_cast<AssertFailureActor*>(this)->actor_wait_state = 0;
		static_cast<AssertFailureActor*>(this)->ActorCallback< AssertFailureActor, 0, ErrorOr<GetReadVersionReply> >::remove();

	}
	void a_callback_fire(ActorCallback< AssertFailureActor, 0, ErrorOr<GetReadVersionReply> >*,ErrorOr<GetReadVersionReply> const& value) 
	{
		fdb_probe_actor_enter("assertFailure", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("assertFailure", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< AssertFailureActor, 0, ErrorOr<GetReadVersionReply> >*,ErrorOr<GetReadVersionReply> && value) 
	{
		fdb_probe_actor_enter("assertFailure", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("assertFailure", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< AssertFailureActor, 0, ErrorOr<GetReadVersionReply> >*,Error err) 
	{
		fdb_probe_actor_enter("assertFailure", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch2(err, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("assertFailure", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont5(int loopDepth) 
	{
		try {
			loopDepth = a_body1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
															#line 942 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GrvProxyInterface remote;
															#line 942 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Future<ErrorOr<GetReadVersionReply>> reply;
															#line 3882 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via assertFailure()
															#line 942 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class AssertFailureActor final : public Actor<Void>, public ActorCallback< AssertFailureActor, 0, ErrorOr<GetReadVersionReply> >, public FastAllocated<AssertFailureActor>, public AssertFailureActorState<AssertFailureActor> {
															#line 3887 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<AssertFailureActor>::operator new;
	using FastAllocated<AssertFailureActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< AssertFailureActor, 0, ErrorOr<GetReadVersionReply> >;
															#line 942 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	AssertFailureActor(GrvProxyInterface const& remote,Future<ErrorOr<GetReadVersionReply>> const& reply) 
															#line 3898 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Void>(),
		   AssertFailureActorState<AssertFailureActor>(remote, reply)
	{
		fdb_probe_actor_enter("assertFailure", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("assertFailure");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("assertFailure", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< AssertFailureActor, 0, ErrorOr<GetReadVersionReply> >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 942 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<Void> assertFailure( GrvProxyInterface const& remote, Future<ErrorOr<GetReadVersionReply>> const& reply ) {
															#line 942 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Void>(new AssertFailureActor(remote, reply));
															#line 3926 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 960 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

Future<Void> attemptGRVFromOldProxies(std::vector<GrvProxyInterface> oldProxies,
                                      std::vector<GrvProxyInterface> newProxies) {
	auto debugID = nondeterministicRandom()->randomUniqueID();
	g_traceBatch.addEvent("AttemptGRVFromOldProxyDebug", debugID.first(), "NativeAPI.attemptGRVFromOldProxies.Start");
	Span span("NAPI:VerifyCausalReadRisky"_loc);
	std::vector<Future<Void>> replies;
	replies.reserve(oldProxies.size());
	GetReadVersionRequest req(
	    span.context, 1, TransactionPriority::IMMEDIATE, GetReadVersionRequest::FLAG_CAUSAL_READ_RISKY);
	TraceEvent evt("AttemptGRVFromOldProxies");
	evt.detail("NumOldProxies", oldProxies.size()).detail("NumNewProxies", newProxies.size());
	auto traceProxies = [&](std::vector<GrvProxyInterface>& proxies, std::string const& key) {
		for (int i = 0; i < proxies.size(); ++i) {
			auto k = key + std::to_string(i);
			evt.detail(k.c_str(), proxies[i].id());
		}
	};
	traceProxies(oldProxies, "OldProxy"s);
	traceProxies(newProxies, "NewProxy"s);
	evt.log();
	for (auto& i : oldProxies) {
		req.reply = ReplyPromise<GetReadVersionReply>();
		replies.push_back(assertFailure(i, i.getConsistentReadVersion.tryGetReply(req)));
	}
	return waitForAll(replies);
}

															#line 3958 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via monitorClientDBInfoChange()
															#line 988 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class MonitorClientDBInfoChangeActor>
															#line 988 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class MonitorClientDBInfoChangeActorState {
															#line 3965 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 988 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	MonitorClientDBInfoChangeActorState(DatabaseContext* const& cx,Reference<AsyncVar<ClientDBInfo> const> const& clientDBInfo,AsyncTrigger* const& proxiesChangeTrigger) 
															#line 988 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 988 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : cx(cx),
															#line 988 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   clientDBInfo(clientDBInfo),
															#line 988 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   proxiesChangeTrigger(proxiesChangeTrigger),
															#line 991 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   curCommitProxies(),
															#line 992 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   curGrvProxies(),
															#line 993 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   actors(false),
															#line 994 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   clientDBInfoOnChange(clientDBInfo->onChange())
															#line 3984 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("monitorClientDBInfoChange", reinterpret_cast<unsigned long>(this));

	}
	~MonitorClientDBInfoChangeActorState() 
	{
		fdb_probe_actor_destroy("monitorClientDBInfoChange", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 995 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			curCommitProxies = clientDBInfo->get().commitProxies;
															#line 996 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			curGrvProxies = clientDBInfo->get().grvProxies;
															#line 998 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			;
															#line 4003 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~MonitorClientDBInfoChangeActorState();
		static_cast<MonitorClientDBInfoChangeActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
															#line 1000 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_0 = clientDBInfoOnChange;
															#line 999 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<MonitorClientDBInfoChangeActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 4035 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
															#line 1021 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_1 = actors.getResult();
															#line 4039 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1when2(__when_expr_1.get(), loopDepth); };
		static_cast<MonitorClientDBInfoChangeActor*>(this)->actor_wait_state = 1;
															#line 1000 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< MonitorClientDBInfoChangeActor, 0, Void >*>(static_cast<MonitorClientDBInfoChangeActor*>(this)));
															#line 1021 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< MonitorClientDBInfoChangeActor, 1, Void >*>(static_cast<MonitorClientDBInfoChangeActor*>(this)));
															#line 4046 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1when1(Void const& _,int loopDepth) 
	{
															#line 1001 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		clientDBInfoOnChange = clientDBInfo->onChange();
															#line 1002 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (clientDBInfo->get().commitProxies != curCommitProxies || clientDBInfo->get().grvProxies != curGrvProxies)
															#line 4063 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 1012 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (deterministicRandom()->random01() < cx->verifyCausalReadsProp && !curGrvProxies.empty() && !clientDBInfo->get().grvProxies.empty() && !clientDBInfo->get().grvProxies[0].provisional)
															#line 4067 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 1014 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				actors.add(attemptGRVFromOldProxies(curGrvProxies, clientDBInfo->get().grvProxies));
															#line 4071 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 1016 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			curCommitProxies = clientDBInfo->get().commitProxies;
															#line 1017 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			curGrvProxies = clientDBInfo->get().grvProxies;
															#line 1018 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			proxiesChangeTrigger->trigger();
															#line 4079 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Void && _,int loopDepth) 
	{
															#line 1001 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		clientDBInfoOnChange = clientDBInfo->onChange();
															#line 1002 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (clientDBInfo->get().commitProxies != curCommitProxies || clientDBInfo->get().grvProxies != curGrvProxies)
															#line 4091 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 1012 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (deterministicRandom()->random01() < cx->verifyCausalReadsProp && !curGrvProxies.empty() && !clientDBInfo->get().grvProxies.empty() && !clientDBInfo->get().grvProxies[0].provisional)
															#line 4095 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 1014 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				actors.add(attemptGRVFromOldProxies(curGrvProxies, clientDBInfo->get().grvProxies));
															#line 4099 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 1016 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			curCommitProxies = clientDBInfo->get().commitProxies;
															#line 1017 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			curGrvProxies = clientDBInfo->get().grvProxies;
															#line 1018 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			proxiesChangeTrigger->trigger();
															#line 4107 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when2(Void const& _,int loopDepth) 
	{
															#line 1022 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		UNSTOPPABLE_ASSERT(false);
															#line 4117 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when2(Void && _,int loopDepth) 
	{
															#line 1022 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		UNSTOPPABLE_ASSERT(false);
															#line 4126 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<MonitorClientDBInfoChangeActor*>(this)->actor_wait_state > 0) static_cast<MonitorClientDBInfoChangeActor*>(this)->actor_wait_state = 0;
		static_cast<MonitorClientDBInfoChangeActor*>(this)->ActorCallback< MonitorClientDBInfoChangeActor, 0, Void >::remove();
		static_cast<MonitorClientDBInfoChangeActor*>(this)->ActorCallback< MonitorClientDBInfoChangeActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< MonitorClientDBInfoChangeActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("monitorClientDBInfoChange", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("monitorClientDBInfoChange", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< MonitorClientDBInfoChangeActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("monitorClientDBInfoChange", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("monitorClientDBInfoChange", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< MonitorClientDBInfoChangeActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("monitorClientDBInfoChange", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("monitorClientDBInfoChange", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< MonitorClientDBInfoChangeActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("monitorClientDBInfoChange", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose1();
		try {
			a_body1loopBody1when2(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("monitorClientDBInfoChange", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< MonitorClientDBInfoChangeActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("monitorClientDBInfoChange", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose1();
		try {
			a_body1loopBody1when2(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("monitorClientDBInfoChange", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< MonitorClientDBInfoChangeActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("monitorClientDBInfoChange", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("monitorClientDBInfoChange", reinterpret_cast<unsigned long>(this), 1);

	}
															#line 988 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	DatabaseContext* cx;
															#line 988 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<AsyncVar<ClientDBInfo> const> clientDBInfo;
															#line 988 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	AsyncTrigger* proxiesChangeTrigger;
															#line 991 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	std::vector<CommitProxyInterface> curCommitProxies;
															#line 992 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	std::vector<GrvProxyInterface> curGrvProxies;
															#line 993 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	ActorCollection actors;
															#line 994 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Future<Void> clientDBInfoOnChange;
															#line 4242 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via monitorClientDBInfoChange()
															#line 988 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class MonitorClientDBInfoChangeActor final : public Actor<Void>, public ActorCallback< MonitorClientDBInfoChangeActor, 0, Void >, public ActorCallback< MonitorClientDBInfoChangeActor, 1, Void >, public FastAllocated<MonitorClientDBInfoChangeActor>, public MonitorClientDBInfoChangeActorState<MonitorClientDBInfoChangeActor> {
															#line 4247 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<MonitorClientDBInfoChangeActor>::operator new;
	using FastAllocated<MonitorClientDBInfoChangeActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< MonitorClientDBInfoChangeActor, 0, Void >;
friend struct ActorCallback< MonitorClientDBInfoChangeActor, 1, Void >;
															#line 988 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	MonitorClientDBInfoChangeActor(DatabaseContext* const& cx,Reference<AsyncVar<ClientDBInfo> const> const& clientDBInfo,AsyncTrigger* const& proxiesChangeTrigger) 
															#line 4259 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Void>(),
		   MonitorClientDBInfoChangeActorState<MonitorClientDBInfoChangeActor>(cx, clientDBInfo, proxiesChangeTrigger)
	{
		fdb_probe_actor_enter("monitorClientDBInfoChange", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("monitorClientDBInfoChange");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("monitorClientDBInfoChange", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< MonitorClientDBInfoChangeActor, 0, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 988 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] static Future<Void> monitorClientDBInfoChange( DatabaseContext* const& cx, Reference<AsyncVar<ClientDBInfo> const> const& clientDBInfo, AsyncTrigger* const& proxiesChangeTrigger ) {
															#line 988 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Void>(new MonitorClientDBInfoChangeActor(cx, clientDBInfo, proxiesChangeTrigger));
															#line 4287 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 1027 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

void updateLocationCacheWithCaches(DatabaseContext* self,
                                   const std::map<UID, StorageServerInterface>& removed,
                                   const std::map<UID, StorageServerInterface>& added) {
	// TODO: this needs to be more clever in the future
	auto ranges = self->locationCache.ranges();
	for (auto iter = ranges.begin(); iter != ranges.end(); ++iter) {
		if (iter->value() && iter->value()->hasCaches) {
			auto& val = iter->value();
			std::vector<Reference<ReferencedInterface<StorageServerInterface>>> interfaces;
			interfaces.reserve(val->size() - removed.size() + added.size());
			for (int i = 0; i < val->size(); ++i) {
				const auto& interf = (*val)[i];
				if (removed.count(interf->interf.id()) == 0) {
					interfaces.emplace_back(interf);
				}
			}
			for (const auto& p : added) {
				interfaces.push_back(makeReference<ReferencedInterface<StorageServerInterface>>(p.second));
			}
			iter->value() = makeReference<LocationInfo>(interfaces, true);
		}
	}
}

Reference<LocationInfo> addCaches(const Reference<LocationInfo>& loc,
                                  const std::vector<Reference<ReferencedInterface<StorageServerInterface>>>& other) {
	std::vector<Reference<ReferencedInterface<StorageServerInterface>>> interfaces;
	interfaces.reserve(loc->size() + other.size());
	for (int i = 0; i < loc->size(); ++i) {
		interfaces.emplace_back((*loc)[i]);
	}
	interfaces.insert(interfaces.end(), other.begin(), other.end());
	return makeReference<LocationInfo>(interfaces, true);
}

															#line 4327 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via updateCachedRanges()
															#line 1063 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class UpdateCachedRangesActor>
															#line 1063 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class UpdateCachedRangesActorState {
															#line 4334 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 1063 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	UpdateCachedRangesActorState(DatabaseContext* const& self,std::map<UID, StorageServerInterface>* const& cacheServers) 
															#line 1063 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 1063 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : self(self),
															#line 1063 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   cacheServers(cacheServers),
															#line 1064 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   tr(),
															#line 1065 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   trueValue(storageCacheValue(std::vector<uint16_t>{ 0 })),
															#line 1066 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   falseValue(storageCacheValue(std::vector<uint16_t>{}))
															#line 4349 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("updateCachedRanges", reinterpret_cast<unsigned long>(this));

	}
	~UpdateCachedRangesActorState() 
	{
		fdb_probe_actor_destroy("updateCachedRanges", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
			try {
															#line 1068 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				;
															#line 4365 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				loopDepth = a_body1loopHead1(loopDepth);
			}
			catch (Error& error) {
				loopDepth = a_body1Catch2(error, loopDepth);
			} catch (...) {
				loopDepth = a_body1Catch2(unknown_error(), loopDepth);
			}
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~UpdateCachedRangesActorState();
		static_cast<UpdateCachedRangesActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1Catch2(const Error& e,int loopDepth=0) 
	{
		try {
															#line 1135 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent(SevError, "UpdateCachedRangesFailed").error(e);
															#line 1136 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			return a_body1Catch1(e, loopDepth);
															#line 4397 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
															#line 1071 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		tr = Transaction();
															#line 1072 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_0 = delay(0);
															#line 1072 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<UpdateCachedRangesActor*>(this)->actor_wait_state < 0) return a_body1Catch2(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 4422 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch2(__when_expr_0.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
		static_cast<UpdateCachedRangesActor*>(this)->actor_wait_state = 1;
															#line 1072 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< UpdateCachedRangesActor, 0, Void >*>(static_cast<UpdateCachedRangesActor*>(this)));
															#line 4427 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont1(Void const& _,int loopDepth) 
	{
															#line 1073 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_1 = brokenPromiseToNever(self->updateCache.onTrigger());
															#line 1073 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<UpdateCachedRangesActor*>(this)->actor_wait_state < 0) return a_body1Catch2(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 4438 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch2(__when_expr_1.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<UpdateCachedRangesActor*>(this)->actor_wait_state = 2;
															#line 1073 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< UpdateCachedRangesActor, 1, Void >*>(static_cast<UpdateCachedRangesActor*>(this)));
															#line 4443 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont1(Void && _,int loopDepth) 
	{
															#line 1073 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_1 = brokenPromiseToNever(self->updateCache.onTrigger());
															#line 1073 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<UpdateCachedRangesActor*>(this)->actor_wait_state < 0) return a_body1Catch2(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 4454 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch2(__when_expr_1.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<UpdateCachedRangesActor*>(this)->actor_wait_state = 2;
															#line 1073 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< UpdateCachedRangesActor, 1, Void >*>(static_cast<UpdateCachedRangesActor*>(this)));
															#line 4459 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<UpdateCachedRangesActor*>(this)->actor_wait_state > 0) static_cast<UpdateCachedRangesActor*>(this)->actor_wait_state = 0;
		static_cast<UpdateCachedRangesActor*>(this)->ActorCallback< UpdateCachedRangesActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< UpdateCachedRangesActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("updateCachedRanges", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("updateCachedRanges", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< UpdateCachedRangesActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("updateCachedRanges", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("updateCachedRanges", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< UpdateCachedRangesActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("updateCachedRanges", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch2(err, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("updateCachedRanges", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1cont2(Void const& _,int loopDepth) 
	{
															#line 1075 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		tr = Transaction(Database(Reference<DatabaseContext>::addRef(self)));
															#line 1076 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		tr.setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 1077 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		tr.setOption(FDBTransactionOptions::READ_LOCK_AWARE);
															#line 4535 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		try {
															#line 1079 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<RangeResult> __when_expr_2 = tr.getRange(storageCacheKeys, CLIENT_KNOBS->TOO_MANY);
															#line 1079 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<UpdateCachedRangesActor*>(this)->actor_wait_state < 0) return a_body1loopBody1cont2Catch1(actor_cancelled(), loopDepth);
															#line 4541 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1loopBody1cont2Catch1(__when_expr_2.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_2.get(), loopDepth); };
			static_cast<UpdateCachedRangesActor*>(this)->actor_wait_state = 3;
															#line 1079 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< UpdateCachedRangesActor, 2, RangeResult >*>(static_cast<UpdateCachedRangesActor*>(this)));
															#line 4546 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1cont2Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1cont2Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(Void && _,int loopDepth) 
	{
															#line 1075 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		tr = Transaction(Database(Reference<DatabaseContext>::addRef(self)));
															#line 1076 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		tr.setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 1077 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		tr.setOption(FDBTransactionOptions::READ_LOCK_AWARE);
															#line 4565 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		try {
															#line 1079 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<RangeResult> __when_expr_2 = tr.getRange(storageCacheKeys, CLIENT_KNOBS->TOO_MANY);
															#line 1079 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<UpdateCachedRangesActor*>(this)->actor_wait_state < 0) return a_body1loopBody1cont2Catch1(actor_cancelled(), loopDepth);
															#line 4571 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1loopBody1cont2Catch1(__when_expr_2.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_2.get(), loopDepth); };
			static_cast<UpdateCachedRangesActor*>(this)->actor_wait_state = 3;
															#line 1079 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< UpdateCachedRangesActor, 2, RangeResult >*>(static_cast<UpdateCachedRangesActor*>(this)));
															#line 4576 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1cont2Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1cont2Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<UpdateCachedRangesActor*>(this)->actor_wait_state > 0) static_cast<UpdateCachedRangesActor*>(this)->actor_wait_state = 0;
		static_cast<UpdateCachedRangesActor*>(this)->ActorCallback< UpdateCachedRangesActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< UpdateCachedRangesActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("updateCachedRanges", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("updateCachedRanges", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< UpdateCachedRangesActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("updateCachedRanges", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("updateCachedRanges", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< UpdateCachedRangesActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("updateCachedRanges", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch2(err, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("updateCachedRanges", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1loopBody1cont3(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1cont2Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 1131 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_4 = tr.onError(e);
															#line 1131 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<UpdateCachedRangesActor*>(this)->actor_wait_state < 0) return a_body1Catch2(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 4663 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1Catch2(__when_expr_4.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1cont2Catch1when1(__when_expr_4.get(), loopDepth); };
			static_cast<UpdateCachedRangesActor*>(this)->actor_wait_state = 5;
															#line 1131 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< UpdateCachedRangesActor, 4, Void >*>(static_cast<UpdateCachedRangesActor*>(this)));
															#line 4668 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch2(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch2(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont4(RangeResult const& range,int loopDepth) 
	{
															#line 1080 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(!range.more);
															#line 1081 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		std::vector<Reference<ReferencedInterface<StorageServerInterface>>> cacheInterfaces;
															#line 1082 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		cacheInterfaces.reserve(cacheServers->size());
															#line 1083 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for( const auto& p : *cacheServers ) {
															#line 1084 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			cacheInterfaces.push_back(makeReference<ReferencedInterface<StorageServerInterface>>(p.second));
															#line 4691 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 1086 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		bool currCached = false;
															#line 1087 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		KeyRef begin, end;
															#line 1088 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for( const auto& kv : range ) {
															#line 1090 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ASSERT(currCached == (kv.value == falseValue));
															#line 1091 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (kv.value == trueValue)
															#line 4703 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 1092 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				begin = kv.key.substr(storageCacheKeys.begin.size());
															#line 1093 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				currCached = true;
															#line 4709 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
			else
			{
															#line 1095 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				currCached = false;
															#line 1096 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				end = kv.key.substr(storageCacheKeys.begin.size());
															#line 1097 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				KeyRangeRef cachedRange{ begin, end };
															#line 1098 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				auto ranges = self->locationCache.containedRanges(cachedRange);
															#line 1099 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				KeyRef containedRangesBegin, containedRangesEnd, prevKey;
															#line 1100 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (!ranges.empty())
															#line 4725 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 1101 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					containedRangesBegin = ranges.begin().range().begin;
															#line 4729 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
															#line 1103 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				for(auto iter = ranges.begin();iter != ranges.end();++iter) {
															#line 1104 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					containedRangesEnd = iter->range().end;
															#line 1105 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					if (iter->value() && !iter->value()->hasCaches)
															#line 4737 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					{
															#line 1106 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
						iter->value() = addCaches(iter->value(), cacheInterfaces);
															#line 4741 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					}
				}
															#line 1109 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				auto iter = self->locationCache.rangeContaining(begin);
															#line 1110 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (iter->value() && !iter->value()->hasCaches)
															#line 4748 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 1111 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					if (end >= iter->range().end)
															#line 4752 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					{
															#line 1112 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
						Key endCopy = iter->range().end;
															#line 1113 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
						self->locationCache.insert(KeyRangeRef{ begin, endCopy }, addCaches(iter->value(), cacheInterfaces));
															#line 4758 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					}
					else
					{
															#line 1116 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
						self->locationCache.insert(KeyRangeRef{ begin, end }, addCaches(iter->value(), cacheInterfaces));
															#line 4764 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					}
				}
															#line 1120 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				iter = self->locationCache.rangeContainingKeyBefore(end);
															#line 1121 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (iter->value() && !iter->value()->hasCaches)
															#line 4771 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 1122 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					Key beginCopy = iter->range().begin;
															#line 1123 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					self->locationCache.insert(KeyRangeRef{ beginCopy, end }, addCaches(iter->value(), cacheInterfaces));
															#line 4777 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
			}
		}
															#line 1128 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_3 = delay(2.0);
															#line 1128 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<UpdateCachedRangesActor*>(this)->actor_wait_state < 0) return a_body1loopBody1cont2Catch1(actor_cancelled(), loopDepth);
															#line 4785 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1loopBody1cont2Catch1(__when_expr_3.getError(), loopDepth); else return a_body1loopBody1cont4when1(__when_expr_3.get(), loopDepth); };
		static_cast<UpdateCachedRangesActor*>(this)->actor_wait_state = 4;
															#line 1128 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< UpdateCachedRangesActor, 3, Void >*>(static_cast<UpdateCachedRangesActor*>(this)));
															#line 4790 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont4(RangeResult && range,int loopDepth) 
	{
															#line 1080 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(!range.more);
															#line 1081 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		std::vector<Reference<ReferencedInterface<StorageServerInterface>>> cacheInterfaces;
															#line 1082 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		cacheInterfaces.reserve(cacheServers->size());
															#line 1083 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for( const auto& p : *cacheServers ) {
															#line 1084 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			cacheInterfaces.push_back(makeReference<ReferencedInterface<StorageServerInterface>>(p.second));
															#line 4807 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 1086 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		bool currCached = false;
															#line 1087 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		KeyRef begin, end;
															#line 1088 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for( const auto& kv : range ) {
															#line 1090 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ASSERT(currCached == (kv.value == falseValue));
															#line 1091 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (kv.value == trueValue)
															#line 4819 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 1092 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				begin = kv.key.substr(storageCacheKeys.begin.size());
															#line 1093 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				currCached = true;
															#line 4825 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
			else
			{
															#line 1095 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				currCached = false;
															#line 1096 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				end = kv.key.substr(storageCacheKeys.begin.size());
															#line 1097 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				KeyRangeRef cachedRange{ begin, end };
															#line 1098 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				auto ranges = self->locationCache.containedRanges(cachedRange);
															#line 1099 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				KeyRef containedRangesBegin, containedRangesEnd, prevKey;
															#line 1100 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (!ranges.empty())
															#line 4841 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 1101 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					containedRangesBegin = ranges.begin().range().begin;
															#line 4845 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
															#line 1103 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				for(auto iter = ranges.begin();iter != ranges.end();++iter) {
															#line 1104 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					containedRangesEnd = iter->range().end;
															#line 1105 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					if (iter->value() && !iter->value()->hasCaches)
															#line 4853 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					{
															#line 1106 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
						iter->value() = addCaches(iter->value(), cacheInterfaces);
															#line 4857 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					}
				}
															#line 1109 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				auto iter = self->locationCache.rangeContaining(begin);
															#line 1110 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (iter->value() && !iter->value()->hasCaches)
															#line 4864 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 1111 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					if (end >= iter->range().end)
															#line 4868 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					{
															#line 1112 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
						Key endCopy = iter->range().end;
															#line 1113 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
						self->locationCache.insert(KeyRangeRef{ begin, endCopy }, addCaches(iter->value(), cacheInterfaces));
															#line 4874 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					}
					else
					{
															#line 1116 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
						self->locationCache.insert(KeyRangeRef{ begin, end }, addCaches(iter->value(), cacheInterfaces));
															#line 4880 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					}
				}
															#line 1120 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				iter = self->locationCache.rangeContainingKeyBefore(end);
															#line 1121 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (iter->value() && !iter->value()->hasCaches)
															#line 4887 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 1122 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					Key beginCopy = iter->range().begin;
															#line 1123 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					self->locationCache.insert(KeyRangeRef{ beginCopy, end }, addCaches(iter->value(), cacheInterfaces));
															#line 4893 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
			}
		}
															#line 1128 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_3 = delay(2.0);
															#line 1128 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<UpdateCachedRangesActor*>(this)->actor_wait_state < 0) return a_body1loopBody1cont2Catch1(actor_cancelled(), loopDepth);
															#line 4901 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1loopBody1cont2Catch1(__when_expr_3.getError(), loopDepth); else return a_body1loopBody1cont4when1(__when_expr_3.get(), loopDepth); };
		static_cast<UpdateCachedRangesActor*>(this)->actor_wait_state = 4;
															#line 1128 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< UpdateCachedRangesActor, 3, Void >*>(static_cast<UpdateCachedRangesActor*>(this)));
															#line 4906 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(RangeResult const& range,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont4(range, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(RangeResult && range,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont4(std::move(range), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<UpdateCachedRangesActor*>(this)->actor_wait_state > 0) static_cast<UpdateCachedRangesActor*>(this)->actor_wait_state = 0;
		static_cast<UpdateCachedRangesActor*>(this)->ActorCallback< UpdateCachedRangesActor, 2, RangeResult >::remove();

	}
	void a_callback_fire(ActorCallback< UpdateCachedRangesActor, 2, RangeResult >*,RangeResult const& value) 
	{
		fdb_probe_actor_enter("updateCachedRanges", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont2Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont2Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("updateCachedRanges", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< UpdateCachedRangesActor, 2, RangeResult >*,RangeResult && value) 
	{
		fdb_probe_actor_enter("updateCachedRanges", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont2Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont2Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("updateCachedRanges", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< UpdateCachedRangesActor, 2, RangeResult >*,Error err) 
	{
		fdb_probe_actor_enter("updateCachedRanges", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont2Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont2Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont2Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("updateCachedRanges", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1loopBody1cont5(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont17(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont5(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont17(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont4when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont5(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont4when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont5(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<UpdateCachedRangesActor*>(this)->actor_wait_state > 0) static_cast<UpdateCachedRangesActor*>(this)->actor_wait_state = 0;
		static_cast<UpdateCachedRangesActor*>(this)->ActorCallback< UpdateCachedRangesActor, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< UpdateCachedRangesActor, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("updateCachedRanges", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1cont4when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont2Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont2Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("updateCachedRanges", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< UpdateCachedRangesActor, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("updateCachedRanges", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1cont4when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont2Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont2Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("updateCachedRanges", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< UpdateCachedRangesActor, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("updateCachedRanges", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1cont2Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont2Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont2Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("updateCachedRanges", reinterpret_cast<unsigned long>(this), 3);

	}
	int a_body1loopBody1cont17(int loopDepth) 
	{
		try {
			loopDepth = a_body1loopBody1cont3(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch2(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch2(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose5() 
	{
		if (static_cast<UpdateCachedRangesActor*>(this)->actor_wait_state > 0) static_cast<UpdateCachedRangesActor*>(this)->actor_wait_state = 0;
		static_cast<UpdateCachedRangesActor*>(this)->ActorCallback< UpdateCachedRangesActor, 4, Void >::remove();

	}
	void a_callback_fire(ActorCallback< UpdateCachedRangesActor, 4, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("updateCachedRanges", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1loopBody1cont2Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("updateCachedRanges", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_fire(ActorCallback< UpdateCachedRangesActor, 4, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("updateCachedRanges", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1loopBody1cont2Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("updateCachedRanges", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_error(ActorCallback< UpdateCachedRangesActor, 4, Void >*,Error err) 
	{
		fdb_probe_actor_enter("updateCachedRanges", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1Catch2(err, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("updateCachedRanges", reinterpret_cast<unsigned long>(this), 4);

	}
															#line 1063 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	DatabaseContext* self;
															#line 1063 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	std::map<UID, StorageServerInterface>* cacheServers;
															#line 1064 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Transaction tr;
															#line 1065 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Value trueValue;
															#line 1066 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Value falseValue;
															#line 5147 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via updateCachedRanges()
															#line 1063 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class UpdateCachedRangesActor final : public Actor<Void>, public ActorCallback< UpdateCachedRangesActor, 0, Void >, public ActorCallback< UpdateCachedRangesActor, 1, Void >, public ActorCallback< UpdateCachedRangesActor, 2, RangeResult >, public ActorCallback< UpdateCachedRangesActor, 3, Void >, public ActorCallback< UpdateCachedRangesActor, 4, Void >, public FastAllocated<UpdateCachedRangesActor>, public UpdateCachedRangesActorState<UpdateCachedRangesActor> {
															#line 5152 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<UpdateCachedRangesActor>::operator new;
	using FastAllocated<UpdateCachedRangesActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< UpdateCachedRangesActor, 0, Void >;
friend struct ActorCallback< UpdateCachedRangesActor, 1, Void >;
friend struct ActorCallback< UpdateCachedRangesActor, 2, RangeResult >;
friend struct ActorCallback< UpdateCachedRangesActor, 3, Void >;
friend struct ActorCallback< UpdateCachedRangesActor, 4, Void >;
															#line 1063 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	UpdateCachedRangesActor(DatabaseContext* const& self,std::map<UID, StorageServerInterface>* const& cacheServers) 
															#line 5167 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Void>(),
		   UpdateCachedRangesActorState<UpdateCachedRangesActor>(self, cacheServers)
	{
		fdb_probe_actor_enter("updateCachedRanges", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("updateCachedRanges");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("updateCachedRanges", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< UpdateCachedRangesActor, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< UpdateCachedRangesActor, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< UpdateCachedRangesActor, 2, RangeResult >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< UpdateCachedRangesActor, 3, Void >*)0, actor_cancelled()); break;
		case 5: this->a_callback_error((ActorCallback< UpdateCachedRangesActor, 4, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 1063 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<Void> updateCachedRanges( DatabaseContext* const& self, std::map<UID, StorageServerInterface>* const& cacheServers ) {
															#line 1063 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Void>(new UpdateCachedRangesActor(self, cacheServers));
															#line 5199 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 1139 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

// The reason for getting a pointer to DatabaseContext instead of a reference counted object is because reference
// counting will increment reference count for DatabaseContext which holds the future of this actor. This creates a
// cyclic reference and hence this actor and Database object will not be destroyed at all.
															#line 5207 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via monitorCacheList()
															#line 1143 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class MonitorCacheListActor>
															#line 1143 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class MonitorCacheListActorState {
															#line 5214 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 1143 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	MonitorCacheListActorState(DatabaseContext* const& self) 
															#line 1143 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 1143 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : self(self),
															#line 1144 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   tr(),
															#line 1145 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   cacheServerMap(),
															#line 1146 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   updateRanges(updateCachedRanges(self, &cacheServerMap)),
															#line 1147 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   backoff()
															#line 5229 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("monitorCacheList", reinterpret_cast<unsigned long>(this));

	}
	~MonitorCacheListActorState() 
	{
		fdb_probe_actor_destroy("monitorCacheList", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 1150 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_0 = self->updateCache.onTrigger();
															#line 1150 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<MonitorCacheListActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 5246 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<MonitorCacheListActor*>(this)->actor_wait_state = 1;
															#line 1150 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< MonitorCacheListActor, 0, Void >*>(static_cast<MonitorCacheListActor*>(this)));
															#line 5251 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~MonitorCacheListActorState();
		static_cast<MonitorCacheListActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void const& _,int loopDepth) 
	{
		try {
															#line 1152 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			;
															#line 5275 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1cont1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1cont1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1cont1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont1(Void && _,int loopDepth) 
	{
		try {
															#line 1152 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			;
															#line 5291 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1cont1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1cont1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1cont1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<MonitorCacheListActor*>(this)->actor_wait_state > 0) static_cast<MonitorCacheListActor*>(this)->actor_wait_state = 0;
		static_cast<MonitorCacheListActor*>(this)->ActorCallback< MonitorCacheListActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< MonitorCacheListActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("monitorCacheList", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("monitorCacheList", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< MonitorCacheListActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("monitorCacheList", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("monitorCacheList", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< MonitorCacheListActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("monitorCacheList", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("monitorCacheList", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 1192 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent(SevError, "MonitorCacheListFailed").error(e);
															#line 1193 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			return a_body1Catch1(e, loopDepth);
															#line 5372 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1cont1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1(int loopDepth) 
	{
															#line 1155 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_1 = refreshTransaction(self, &tr);
															#line 1155 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<MonitorCacheListActor*>(this)->actor_wait_state < 0) return a_body1cont1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 5395 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1cont1Catch1(__when_expr_1.getError(), std::max(0, loopDepth - 1)); else return a_body1cont1loopBody1when1(__when_expr_1.get(), loopDepth); };
		static_cast<MonitorCacheListActor*>(this)->actor_wait_state = 2;
															#line 1155 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< MonitorCacheListActor, 1, Void >*>(static_cast<MonitorCacheListActor*>(this)));
															#line 5400 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1(Void const& _,int loopDepth) 
	{
		try {
															#line 1157 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<RangeResult> __when_expr_2 = tr.getRange(storageCacheServerKeys, CLIENT_KNOBS->TOO_MANY);
															#line 1157 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<MonitorCacheListActor*>(this)->actor_wait_state < 0) return a_body1cont1loopBody1cont1Catch1(actor_cancelled(), loopDepth);
															#line 5412 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1cont1loopBody1cont1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont1loopBody1cont1when1(__when_expr_2.get(), loopDepth); };
			static_cast<MonitorCacheListActor*>(this)->actor_wait_state = 3;
															#line 1157 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< MonitorCacheListActor, 2, RangeResult >*>(static_cast<MonitorCacheListActor*>(this)));
															#line 5417 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1cont1loopBody1cont1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1cont1loopBody1cont1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1(Void && _,int loopDepth) 
	{
		try {
															#line 1157 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<RangeResult> __when_expr_2 = tr.getRange(storageCacheServerKeys, CLIENT_KNOBS->TOO_MANY);
															#line 1157 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<MonitorCacheListActor*>(this)->actor_wait_state < 0) return a_body1cont1loopBody1cont1Catch1(actor_cancelled(), loopDepth);
															#line 5435 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1cont1loopBody1cont1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont1loopBody1cont1when1(__when_expr_2.get(), loopDepth); };
			static_cast<MonitorCacheListActor*>(this)->actor_wait_state = 3;
															#line 1157 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< MonitorCacheListActor, 2, RangeResult >*>(static_cast<MonitorCacheListActor*>(this)));
															#line 5440 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1cont1loopBody1cont1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1cont1loopBody1cont1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont1loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<MonitorCacheListActor*>(this)->actor_wait_state > 0) static_cast<MonitorCacheListActor*>(this)->actor_wait_state = 0;
		static_cast<MonitorCacheListActor*>(this)->ActorCallback< MonitorCacheListActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< MonitorCacheListActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("monitorCacheList", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont1Catch1(error, 0);
		} catch (...) {
			a_body1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("monitorCacheList", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< MonitorCacheListActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("monitorCacheList", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont1Catch1(error, 0);
		} catch (...) {
			a_body1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("monitorCacheList", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< MonitorCacheListActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("monitorCacheList", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont1Catch1(error, 0);
		} catch (...) {
			a_body1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("monitorCacheList", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont1loopBody1cont2(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1cont1loopHead1(0);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 1187 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_4 = tr.onError(e);
															#line 1187 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<MonitorCacheListActor*>(this)->actor_wait_state < 0) return a_body1cont1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 5527 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1cont1Catch1(__when_expr_4.getError(), std::max(0, loopDepth - 1)); else return a_body1cont1loopBody1cont1Catch1when1(__when_expr_4.get(), loopDepth); };
			static_cast<MonitorCacheListActor*>(this)->actor_wait_state = 5;
															#line 1187 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< MonitorCacheListActor, 4, Void >*>(static_cast<MonitorCacheListActor*>(this)));
															#line 5532 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1cont1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1cont1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1cont1loopBody1cont3(RangeResult const& cacheList,int loopDepth) 
	{
															#line 1158 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(!cacheList.more);
															#line 1159 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		bool hasChanges = false;
															#line 1160 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		std::map<UID, StorageServerInterface> allCacheServers;
															#line 1161 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for( auto kv : cacheList ) {
															#line 1162 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			auto ssi = BinaryReader::fromStringRef<StorageServerInterface>(kv.value, IncludeVersion());
															#line 1163 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			allCacheServers.emplace(ssi.id(), ssi);
															#line 5557 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 1165 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		std::map<UID, StorageServerInterface> newCacheServers;
															#line 1166 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		std::map<UID, StorageServerInterface> deletedCacheServers;
															#line 1167 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		std::set_difference(allCacheServers.begin(), allCacheServers.end(), cacheServerMap.begin(), cacheServerMap.end(), std::insert_iterator<std::map<UID, StorageServerInterface>>( newCacheServers, newCacheServers.begin()));
															#line 1173 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		std::set_difference(cacheServerMap.begin(), cacheServerMap.end(), allCacheServers.begin(), allCacheServers.end(), std::insert_iterator<std::map<UID, StorageServerInterface>>( deletedCacheServers, deletedCacheServers.begin()));
															#line 1179 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		hasChanges = !(newCacheServers.empty() && deletedCacheServers.empty());
															#line 1180 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (hasChanges)
															#line 5571 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 1181 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			updateLocationCacheWithCaches(self, deletedCacheServers, newCacheServers);
															#line 5575 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 1183 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		cacheServerMap = std::move(allCacheServers);
															#line 1184 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_3 = delay(5.0);
															#line 1184 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<MonitorCacheListActor*>(this)->actor_wait_state < 0) return a_body1cont1loopBody1cont1Catch1(actor_cancelled(), loopDepth);
															#line 5583 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1cont1loopBody1cont1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1cont1loopBody1cont3when1(__when_expr_3.get(), loopDepth); };
		static_cast<MonitorCacheListActor*>(this)->actor_wait_state = 4;
															#line 1184 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< MonitorCacheListActor, 3, Void >*>(static_cast<MonitorCacheListActor*>(this)));
															#line 5588 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1loopBody1cont3(RangeResult && cacheList,int loopDepth) 
	{
															#line 1158 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(!cacheList.more);
															#line 1159 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		bool hasChanges = false;
															#line 1160 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		std::map<UID, StorageServerInterface> allCacheServers;
															#line 1161 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for( auto kv : cacheList ) {
															#line 1162 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			auto ssi = BinaryReader::fromStringRef<StorageServerInterface>(kv.value, IncludeVersion());
															#line 1163 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			allCacheServers.emplace(ssi.id(), ssi);
															#line 5607 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 1165 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		std::map<UID, StorageServerInterface> newCacheServers;
															#line 1166 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		std::map<UID, StorageServerInterface> deletedCacheServers;
															#line 1167 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		std::set_difference(allCacheServers.begin(), allCacheServers.end(), cacheServerMap.begin(), cacheServerMap.end(), std::insert_iterator<std::map<UID, StorageServerInterface>>( newCacheServers, newCacheServers.begin()));
															#line 1173 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		std::set_difference(cacheServerMap.begin(), cacheServerMap.end(), allCacheServers.begin(), allCacheServers.end(), std::insert_iterator<std::map<UID, StorageServerInterface>>( deletedCacheServers, deletedCacheServers.begin()));
															#line 1179 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		hasChanges = !(newCacheServers.empty() && deletedCacheServers.empty());
															#line 1180 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (hasChanges)
															#line 5621 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 1181 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			updateLocationCacheWithCaches(self, deletedCacheServers, newCacheServers);
															#line 5625 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 1183 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		cacheServerMap = std::move(allCacheServers);
															#line 1184 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_3 = delay(5.0);
															#line 1184 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<MonitorCacheListActor*>(this)->actor_wait_state < 0) return a_body1cont1loopBody1cont1Catch1(actor_cancelled(), loopDepth);
															#line 5633 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1cont1loopBody1cont1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1cont1loopBody1cont3when1(__when_expr_3.get(), loopDepth); };
		static_cast<MonitorCacheListActor*>(this)->actor_wait_state = 4;
															#line 1184 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< MonitorCacheListActor, 3, Void >*>(static_cast<MonitorCacheListActor*>(this)));
															#line 5638 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1when1(RangeResult const& cacheList,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont3(cacheList, loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1when1(RangeResult && cacheList,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont3(std::move(cacheList), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<MonitorCacheListActor*>(this)->actor_wait_state > 0) static_cast<MonitorCacheListActor*>(this)->actor_wait_state = 0;
		static_cast<MonitorCacheListActor*>(this)->ActorCallback< MonitorCacheListActor, 2, RangeResult >::remove();

	}
	void a_callback_fire(ActorCallback< MonitorCacheListActor, 2, RangeResult >*,RangeResult const& value) 
	{
		fdb_probe_actor_enter("monitorCacheList", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont1loopBody1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1cont1Catch1(error, 0);
		} catch (...) {
			a_body1cont1loopBody1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("monitorCacheList", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< MonitorCacheListActor, 2, RangeResult >*,RangeResult && value) 
	{
		fdb_probe_actor_enter("monitorCacheList", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont1loopBody1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1cont1Catch1(error, 0);
		} catch (...) {
			a_body1cont1loopBody1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("monitorCacheList", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< MonitorCacheListActor, 2, RangeResult >*,Error err) 
	{
		fdb_probe_actor_enter("monitorCacheList", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont1loopBody1cont1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1cont1Catch1(error, 0);
		} catch (...) {
			a_body1cont1loopBody1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("monitorCacheList", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1cont1loopBody1cont4(Void const& _,int loopDepth) 
	{
															#line 1185 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		backoff = Backoff();
															#line 5710 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont1loopBody1cont8(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont4(Void && _,int loopDepth) 
	{
															#line 1185 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		backoff = Backoff();
															#line 5719 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont1loopBody1cont8(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont3when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont4(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont3when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont4(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<MonitorCacheListActor*>(this)->actor_wait_state > 0) static_cast<MonitorCacheListActor*>(this)->actor_wait_state = 0;
		static_cast<MonitorCacheListActor*>(this)->ActorCallback< MonitorCacheListActor, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< MonitorCacheListActor, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("monitorCacheList", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont1loopBody1cont3when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1cont1Catch1(error, 0);
		} catch (...) {
			a_body1cont1loopBody1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("monitorCacheList", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< MonitorCacheListActor, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("monitorCacheList", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont1loopBody1cont3when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1cont1Catch1(error, 0);
		} catch (...) {
			a_body1cont1loopBody1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("monitorCacheList", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< MonitorCacheListActor, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("monitorCacheList", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont1loopBody1cont1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1cont1Catch1(error, 0);
		} catch (...) {
			a_body1cont1loopBody1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("monitorCacheList", reinterpret_cast<unsigned long>(this), 3);

	}
	int a_body1cont1loopBody1cont8(int loopDepth) 
	{
		try {
			loopDepth = a_body1cont1loopBody1cont2(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1cont1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1cont1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1Catch1cont1(Void const& _,int loopDepth) 
	{
															#line 1188 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_5 = backoff.onError();
															#line 1188 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<MonitorCacheListActor*>(this)->actor_wait_state < 0) return a_body1cont1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 5806 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_5.isReady()) { if (__when_expr_5.isError()) return a_body1cont1Catch1(__when_expr_5.getError(), std::max(0, loopDepth - 1)); else return a_body1cont1loopBody1cont1Catch1cont1when1(__when_expr_5.get(), loopDepth); };
		static_cast<MonitorCacheListActor*>(this)->actor_wait_state = 6;
															#line 1188 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_5.addCallbackAndClear(static_cast<ActorCallback< MonitorCacheListActor, 5, Void >*>(static_cast<MonitorCacheListActor*>(this)));
															#line 5811 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1Catch1cont1(Void && _,int loopDepth) 
	{
															#line 1188 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_5 = backoff.onError();
															#line 1188 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<MonitorCacheListActor*>(this)->actor_wait_state < 0) return a_body1cont1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 5822 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_5.isReady()) { if (__when_expr_5.isError()) return a_body1cont1Catch1(__when_expr_5.getError(), std::max(0, loopDepth - 1)); else return a_body1cont1loopBody1cont1Catch1cont1when1(__when_expr_5.get(), loopDepth); };
		static_cast<MonitorCacheListActor*>(this)->actor_wait_state = 6;
															#line 1188 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_5.addCallbackAndClear(static_cast<ActorCallback< MonitorCacheListActor, 5, Void >*>(static_cast<MonitorCacheListActor*>(this)));
															#line 5827 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose5() 
	{
		if (static_cast<MonitorCacheListActor*>(this)->actor_wait_state > 0) static_cast<MonitorCacheListActor*>(this)->actor_wait_state = 0;
		static_cast<MonitorCacheListActor*>(this)->ActorCallback< MonitorCacheListActor, 4, Void >::remove();

	}
	void a_callback_fire(ActorCallback< MonitorCacheListActor, 4, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("monitorCacheList", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont1loopBody1cont1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont1Catch1(error, 0);
		} catch (...) {
			a_body1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("monitorCacheList", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_fire(ActorCallback< MonitorCacheListActor, 4, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("monitorCacheList", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont1loopBody1cont1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont1Catch1(error, 0);
		} catch (...) {
			a_body1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("monitorCacheList", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_error(ActorCallback< MonitorCacheListActor, 4, Void >*,Error err) 
	{
		fdb_probe_actor_enter("monitorCacheList", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont1Catch1(error, 0);
		} catch (...) {
			a_body1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("monitorCacheList", reinterpret_cast<unsigned long>(this), 4);

	}
	int a_body1cont1loopBody1cont1Catch1cont2(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont2(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1Catch1cont2(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont2(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1Catch1cont1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont1Catch1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1Catch1cont1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont1Catch1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose6() 
	{
		if (static_cast<MonitorCacheListActor*>(this)->actor_wait_state > 0) static_cast<MonitorCacheListActor*>(this)->actor_wait_state = 0;
		static_cast<MonitorCacheListActor*>(this)->ActorCallback< MonitorCacheListActor, 5, Void >::remove();

	}
	void a_callback_fire(ActorCallback< MonitorCacheListActor, 5, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("monitorCacheList", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1cont1loopBody1cont1Catch1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont1Catch1(error, 0);
		} catch (...) {
			a_body1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("monitorCacheList", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_fire(ActorCallback< MonitorCacheListActor, 5, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("monitorCacheList", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1cont1loopBody1cont1Catch1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont1Catch1(error, 0);
		} catch (...) {
			a_body1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("monitorCacheList", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_error(ActorCallback< MonitorCacheListActor, 5, Void >*,Error err) 
	{
		fdb_probe_actor_enter("monitorCacheList", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1cont1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont1Catch1(error, 0);
		} catch (...) {
			a_body1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("monitorCacheList", reinterpret_cast<unsigned long>(this), 5);

	}
															#line 1143 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	DatabaseContext* self;
															#line 1144 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Transaction tr;
															#line 1145 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	std::map<UID, StorageServerInterface> cacheServerMap;
															#line 1146 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Future<Void> updateRanges;
															#line 1147 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Backoff backoff;
															#line 5980 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via monitorCacheList()
															#line 1143 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class MonitorCacheListActor final : public Actor<Void>, public ActorCallback< MonitorCacheListActor, 0, Void >, public ActorCallback< MonitorCacheListActor, 1, Void >, public ActorCallback< MonitorCacheListActor, 2, RangeResult >, public ActorCallback< MonitorCacheListActor, 3, Void >, public ActorCallback< MonitorCacheListActor, 4, Void >, public ActorCallback< MonitorCacheListActor, 5, Void >, public FastAllocated<MonitorCacheListActor>, public MonitorCacheListActorState<MonitorCacheListActor> {
															#line 5985 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<MonitorCacheListActor>::operator new;
	using FastAllocated<MonitorCacheListActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< MonitorCacheListActor, 0, Void >;
friend struct ActorCallback< MonitorCacheListActor, 1, Void >;
friend struct ActorCallback< MonitorCacheListActor, 2, RangeResult >;
friend struct ActorCallback< MonitorCacheListActor, 3, Void >;
friend struct ActorCallback< MonitorCacheListActor, 4, Void >;
friend struct ActorCallback< MonitorCacheListActor, 5, Void >;
															#line 1143 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	MonitorCacheListActor(DatabaseContext* const& self) 
															#line 6001 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Void>(),
		   MonitorCacheListActorState<MonitorCacheListActor>(self)
	{
		fdb_probe_actor_enter("monitorCacheList", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("monitorCacheList");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("monitorCacheList", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< MonitorCacheListActor, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< MonitorCacheListActor, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< MonitorCacheListActor, 2, RangeResult >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< MonitorCacheListActor, 3, Void >*)0, actor_cancelled()); break;
		case 5: this->a_callback_error((ActorCallback< MonitorCacheListActor, 4, Void >*)0, actor_cancelled()); break;
		case 6: this->a_callback_error((ActorCallback< MonitorCacheListActor, 5, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 1143 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<Void> monitorCacheList( DatabaseContext* const& self ) {
															#line 1143 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Void>(new MonitorCacheListActor(self));
															#line 6034 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 1196 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

															#line 6039 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via handleTssMismatches()
															#line 1197 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class HandleTssMismatchesActor>
															#line 1197 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class HandleTssMismatchesActorState {
															#line 6046 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 1197 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	HandleTssMismatchesActorState(DatabaseContext* const& cx) 
															#line 1197 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 1197 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : cx(cx),
															#line 1198 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   tr(),
															#line 1199 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   tssMapDB(KeyBackedMap<UID, UID>(tssMappingKeys.begin)),
															#line 1200 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   tssMismatchDB(KeyBackedMap<Tuple, std::string>(tssMismatchKeys.begin))
															#line 6059 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("handleTssMismatches", reinterpret_cast<unsigned long>(this));

	}
	~HandleTssMismatchesActorState() 
	{
		fdb_probe_actor_destroy("handleTssMismatches", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 1201 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			;
															#line 6074 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~HandleTssMismatchesActorState();
		static_cast<HandleTssMismatchesActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
															#line 1203 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		FutureStream<std::pair<UID, std::vector<DetailedTSSMismatch>>> __when_expr_0 = cx->tssMismatchStream.getFuture();
															#line 1203 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<HandleTssMismatchesActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 6106 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1when1(__when_expr_0.pop(), loopDepth); };
		static_cast<HandleTssMismatchesActor*>(this)->actor_wait_state = 1;
															#line 1203 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_0.addCallbackAndClear(static_cast<ActorSingleCallback< HandleTssMismatchesActor, 0, std::pair<UID, std::vector<DetailedTSSMismatch>> >*>(static_cast<HandleTssMismatchesActor*>(this)));
															#line 6111 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
															#line 1205 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_1 = delay(0);
															#line 1205 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<HandleTssMismatchesActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 6122 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<HandleTssMismatchesActor*>(this)->actor_wait_state = 2;
															#line 1205 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< HandleTssMismatchesActor, 1, Void >*>(static_cast<HandleTssMismatchesActor*>(this)));
															#line 6127 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1when1(std::pair<UID, std::vector<DetailedTSSMismatch>> const& __data,int loopDepth) 
	{
															#line 1203 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		data = __data;
															#line 6136 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(std::pair<UID, std::vector<DetailedTSSMismatch>> && __data,int loopDepth) 
	{
		data = std::move(__data);
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<HandleTssMismatchesActor*>(this)->actor_wait_state > 0) static_cast<HandleTssMismatchesActor*>(this)->actor_wait_state = 0;
		static_cast<HandleTssMismatchesActor*>(this)->ActorSingleCallback< HandleTssMismatchesActor, 0, std::pair<UID, std::vector<DetailedTSSMismatch>> >::remove();

	}
	void a_callback_fire(ActorSingleCallback< HandleTssMismatchesActor, 0, std::pair<UID, std::vector<DetailedTSSMismatch>> >*,std::pair<UID, std::vector<DetailedTSSMismatch>> const& value) 
	{
		fdb_probe_actor_enter("handleTssMismatches", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("handleTssMismatches", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorSingleCallback< HandleTssMismatchesActor, 0, std::pair<UID, std::vector<DetailedTSSMismatch>> >*,std::pair<UID, std::vector<DetailedTSSMismatch>> && value) 
	{
		fdb_probe_actor_enter("handleTssMismatches", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("handleTssMismatches", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorSingleCallback< HandleTssMismatchesActor, 0, std::pair<UID, std::vector<DetailedTSSMismatch>> >*,Error err) 
	{
		fdb_probe_actor_enter("handleTssMismatches", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("handleTssMismatches", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1cont2(Void const& _,int loopDepth) 
	{
															#line 1207 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		tssPairID = UID();
															#line 1208 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		bool found = false;
															#line 1209 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for( const auto& it : cx->tssMapping ) {
															#line 1210 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (it.second.id() == data.first)
															#line 6209 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 1211 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				tssPairID = it.first;
															#line 1212 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				found = true;
															#line 6215 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				break;
			}
		}
															#line 1216 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (found)
															#line 6221 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 1217 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			quarantine = CLIENT_KNOBS->QUARANTINE_TSS_ON_MISMATCH;
															#line 1218 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent(SevWarnAlways, quarantine ? "TSS_QuarantineMismatch" : "TSS_KillMismatch") .detail("TSSID", data.first.toString());
															#line 1220 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			CODE_PROBE(quarantine, "Quarantining TSS because it got mismatch");
															#line 1221 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			CODE_PROBE(!quarantine, "Killing TSS because it got mismatch");
															#line 1223 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tr = makeReference<ReadYourWritesTransaction>(Database(Reference<DatabaseContext>::addRef(cx)));
															#line 1224 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tries = 0;
															#line 1225 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			;
															#line 6237 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1loopBody1cont2loopHead1(loopDepth);
		}
		else
		{
															#line 1259 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			CODE_PROBE(true, "Not handling TSS with mismatch because it's already gone");
															#line 6244 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1loopBody1cont3(loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(Void && _,int loopDepth) 
	{
															#line 1207 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		tssPairID = UID();
															#line 1208 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		bool found = false;
															#line 1209 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for( const auto& it : cx->tssMapping ) {
															#line 1210 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (it.second.id() == data.first)
															#line 6260 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 1211 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				tssPairID = it.first;
															#line 1212 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				found = true;
															#line 6266 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				break;
			}
		}
															#line 1216 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (found)
															#line 6272 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 1217 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			quarantine = CLIENT_KNOBS->QUARANTINE_TSS_ON_MISMATCH;
															#line 1218 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent(SevWarnAlways, quarantine ? "TSS_QuarantineMismatch" : "TSS_KillMismatch") .detail("TSSID", data.first.toString());
															#line 1220 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			CODE_PROBE(quarantine, "Quarantining TSS because it got mismatch");
															#line 1221 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			CODE_PROBE(!quarantine, "Killing TSS because it got mismatch");
															#line 1223 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tr = makeReference<ReadYourWritesTransaction>(Database(Reference<DatabaseContext>::addRef(cx)));
															#line 1224 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tries = 0;
															#line 1225 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			;
															#line 6288 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1loopBody1cont2loopHead1(loopDepth);
		}
		else
		{
															#line 1259 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			CODE_PROBE(true, "Not handling TSS with mismatch because it's already gone");
															#line 6295 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1loopBody1cont3(loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<HandleTssMismatchesActor*>(this)->actor_wait_state > 0) static_cast<HandleTssMismatchesActor*>(this)->actor_wait_state = 0;
		static_cast<HandleTssMismatchesActor*>(this)->ActorCallback< HandleTssMismatchesActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< HandleTssMismatchesActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("handleTssMismatches", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("handleTssMismatches", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< HandleTssMismatchesActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("handleTssMismatches", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("handleTssMismatches", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< HandleTssMismatchesActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("handleTssMismatches", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("handleTssMismatches", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1loopBody1cont3(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1cont6(int loopDepth) 
	{
															#line 1257 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		tr = makeReference<ReadYourWritesTransaction>();
															#line 6374 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1cont2loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2loopBody1(int loopDepth) 
	{
		try {
															#line 1227 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tr->setOption(FDBTransactionOptions::PRIORITY_SYSTEM_IMMEDIATE);
															#line 1228 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 1229 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (quarantine)
															#line 6395 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 1230 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				tr->set(tssQuarantineKeyFor(data.first), ""_sr);
															#line 6399 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
			else
			{
															#line 1232 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				tr->clear(serverTagKeyFor(data.first));
															#line 6405 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 1234 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tssMapDB.erase(tr, tssPairID);
															#line 1236 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			for( const DetailedTSSMismatch& d : data.second ) {
															#line 1238 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				tssMismatchDB.set(tr, Tuple::makeTuple(data.first.toString(), d.timestamp, d.mismatchId.toString()), d.traceString);
															#line 6413 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 1243 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_2 = tr->commit();
															#line 1243 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<HandleTssMismatchesActor*>(this)->actor_wait_state < 0) return a_body1loopBody1cont2loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 6419 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1loopBody1cont2loopBody1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1loopBody1cont2loopBody1when1(__when_expr_2.get(), loopDepth); };
			static_cast<HandleTssMismatchesActor*>(this)->actor_wait_state = 3;
															#line 1243 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< HandleTssMismatchesActor, 2, Void >*>(static_cast<HandleTssMismatchesActor*>(this)));
															#line 6424 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1cont2loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1cont2loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2break1(int loopDepth) 
	{
		try {
			return a_body1loopBody1cont6(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2loopBody1cont1(int loopDepth) 
	{
															#line 1249 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		tries++;
															#line 1250 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (tries > 10)
															#line 6454 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 1252 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent("TSS_MismatchGaveUp").detail("TSSID", data.first.toString());
															#line 6458 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			return a_body1loopBody1cont2break1(loopDepth==0?0:loopDepth-1); // break
		}
		if (loopDepth == 0) return a_body1loopBody1cont2loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1cont2loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 1247 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_3 = tr->onError(e);
															#line 1247 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<HandleTssMismatchesActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 2));
															#line 6472 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch1(__when_expr_3.getError(), std::max(0, loopDepth - 2)); else return a_body1loopBody1cont2loopBody1Catch1when1(__when_expr_3.get(), loopDepth); };
			static_cast<HandleTssMismatchesActor*>(this)->actor_wait_state = 4;
															#line 1247 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< HandleTssMismatchesActor, 3, Void >*>(static_cast<HandleTssMismatchesActor*>(this)));
															#line 6477 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 2));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 2));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2loopBody1cont2(Void const& _,int loopDepth) 
	{
		return a_body1loopBody1cont2break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1loopBody1cont2loopBody1cont2(Void && _,int loopDepth) 
	{
		return a_body1loopBody1cont2break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1loopBody1cont2loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2loopBody1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2loopBody1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<HandleTssMismatchesActor*>(this)->actor_wait_state > 0) static_cast<HandleTssMismatchesActor*>(this)->actor_wait_state = 0;
		static_cast<HandleTssMismatchesActor*>(this)->ActorCallback< HandleTssMismatchesActor, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< HandleTssMismatchesActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("handleTssMismatches", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont2loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont2loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont2loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("handleTssMismatches", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< HandleTssMismatchesActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("handleTssMismatches", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont2loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont2loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont2loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("handleTssMismatches", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< HandleTssMismatchesActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("handleTssMismatches", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont2loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont2loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont2loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("handleTssMismatches", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1loopBody1cont2loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<HandleTssMismatchesActor*>(this)->actor_wait_state > 0) static_cast<HandleTssMismatchesActor*>(this)->actor_wait_state = 0;
		static_cast<HandleTssMismatchesActor*>(this)->ActorCallback< HandleTssMismatchesActor, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< HandleTssMismatchesActor, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("handleTssMismatches", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1cont2loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("handleTssMismatches", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< HandleTssMismatchesActor, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("handleTssMismatches", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1cont2loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("handleTssMismatches", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< HandleTssMismatchesActor, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("handleTssMismatches", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("handleTssMismatches", reinterpret_cast<unsigned long>(this), 3);

	}
															#line 1197 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	DatabaseContext* cx;
															#line 1198 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 1199 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeyBackedMap<UID, UID> tssMapDB;
															#line 1200 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeyBackedMap<Tuple, std::string> tssMismatchDB;
															#line 1203 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	std::pair<UID, std::vector<DetailedTSSMismatch>> data;
															#line 1207 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	UID tssPairID;
															#line 1217 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	bool quarantine;
															#line 1224 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	int tries;
															#line 6654 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via handleTssMismatches()
															#line 1197 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class HandleTssMismatchesActor final : public Actor<Void>, public ActorSingleCallback< HandleTssMismatchesActor, 0, std::pair<UID, std::vector<DetailedTSSMismatch>> >, public ActorCallback< HandleTssMismatchesActor, 1, Void >, public ActorCallback< HandleTssMismatchesActor, 2, Void >, public ActorCallback< HandleTssMismatchesActor, 3, Void >, public FastAllocated<HandleTssMismatchesActor>, public HandleTssMismatchesActorState<HandleTssMismatchesActor> {
															#line 6659 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<HandleTssMismatchesActor>::operator new;
	using FastAllocated<HandleTssMismatchesActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorSingleCallback< HandleTssMismatchesActor, 0, std::pair<UID, std::vector<DetailedTSSMismatch>> >;
friend struct ActorCallback< HandleTssMismatchesActor, 1, Void >;
friend struct ActorCallback< HandleTssMismatchesActor, 2, Void >;
friend struct ActorCallback< HandleTssMismatchesActor, 3, Void >;
															#line 1197 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	HandleTssMismatchesActor(DatabaseContext* const& cx) 
															#line 6673 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Void>(),
		   HandleTssMismatchesActorState<HandleTssMismatchesActor>(cx)
	{
		fdb_probe_actor_enter("handleTssMismatches", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("handleTssMismatches");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("handleTssMismatches", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorSingleCallback< HandleTssMismatchesActor, 0, std::pair<UID, std::vector<DetailedTSSMismatch>> >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< HandleTssMismatchesActor, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< HandleTssMismatchesActor, 2, Void >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< HandleTssMismatchesActor, 3, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 1197 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] static Future<Void> handleTssMismatches( DatabaseContext* const& cx ) {
															#line 1197 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Void>(new HandleTssMismatchesActor(cx));
															#line 6704 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 1263 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

															#line 6709 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via backgroundGrvUpdater()
															#line 1264 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class BackgroundGrvUpdaterActor>
															#line 1264 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class BackgroundGrvUpdaterActorState {
															#line 6716 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 1264 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	BackgroundGrvUpdaterActorState(DatabaseContext* const& cx) 
															#line 1264 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 1264 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : cx(cx),
															#line 1265 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   tr(),
															#line 1266 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   grvDelay(0.001),
															#line 1267 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   backoff()
															#line 6729 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("backgroundGrvUpdater", reinterpret_cast<unsigned long>(this));

	}
	~BackgroundGrvUpdaterActorState() 
	{
		fdb_probe_actor_destroy("backgroundGrvUpdater", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
			try {
															#line 1269 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				;
															#line 6745 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				loopDepth = a_body1loopHead1(loopDepth);
			}
			catch (Error& error) {
				loopDepth = a_body1Catch2(error, loopDepth);
			} catch (...) {
				loopDepth = a_body1Catch2(unknown_error(), loopDepth);
			}
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~BackgroundGrvUpdaterActorState();
		static_cast<BackgroundGrvUpdaterActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1Catch2(const Error& e,int loopDepth=0) 
	{
		try {
															#line 1309 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent(SevInfo, "BackgroundGrvUpdaterFailed").errorUnsuppressed(e);
															#line 1310 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			return a_body1Catch1(e, loopDepth);
															#line 6777 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
															#line 1270 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (CLIENT_KNOBS->FORCE_GRV_CACHE_OFF)
															#line 6798 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 1271 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<BackgroundGrvUpdaterActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~BackgroundGrvUpdaterActorState(); static_cast<BackgroundGrvUpdaterActor*>(this)->destroy(); return 0; }
															#line 6802 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<BackgroundGrvUpdaterActor*>(this)->SAV< Void >::value()) Void(Void());
			this->~BackgroundGrvUpdaterActorState();
			static_cast<BackgroundGrvUpdaterActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 1272 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_0 = refreshTransaction(cx, &tr);
															#line 1272 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<BackgroundGrvUpdaterActor*>(this)->actor_wait_state < 0) return a_body1Catch2(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 6812 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch2(__when_expr_0.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
		static_cast<BackgroundGrvUpdaterActor*>(this)->actor_wait_state = 1;
															#line 1272 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< BackgroundGrvUpdaterActor, 0, Void >*>(static_cast<BackgroundGrvUpdaterActor*>(this)));
															#line 6817 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont1(Void const& _,int loopDepth) 
	{
															#line 1273 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		curTime = now();
															#line 1274 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		lastTime = cx->getLastGrvTime();
															#line 1275 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		lastProxyTime = cx->lastProxyRequestTime;
															#line 1276 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		TraceEvent(SevDebug, "BackgroundGrvUpdaterBefore") .detail("CurTime", curTime) .detail("LastTime", lastTime) .detail("GrvDelay", grvDelay) .detail("CachedReadVersion", cx->getCachedReadVersion()) .detail("CachedTime", cx->getLastGrvTime()) .detail("Gap", curTime - lastTime) .detail("Bound", CLIENT_KNOBS->MAX_VERSION_CACHE_LAG - grvDelay);
															#line 1284 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (curTime - lastTime >= (CLIENT_KNOBS->MAX_VERSION_CACHE_LAG - grvDelay) || curTime - lastProxyTime > CLIENT_KNOBS->MAX_PROXY_CONTACT_LAG)
															#line 6834 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
			try {
															#line 1287 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				tr.setOption(FDBTransactionOptions::SKIP_GRV_CACHE);
															#line 1288 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				StrictFuture<Void> __when_expr_1 = success(tr.getReadVersion());
															#line 1288 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (static_cast<BackgroundGrvUpdaterActor*>(this)->actor_wait_state < 0) return a_body1loopBody1cont1Catch1(actor_cancelled(), loopDepth);
															#line 6843 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1cont1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont1when1(__when_expr_1.get(), loopDepth); };
				static_cast<BackgroundGrvUpdaterActor*>(this)->actor_wait_state = 2;
															#line 1288 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< BackgroundGrvUpdaterActor, 1, Void >*>(static_cast<BackgroundGrvUpdaterActor*>(this)));
															#line 6848 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				loopDepth = 0;
			}
			catch (Error& error) {
				loopDepth = a_body1loopBody1cont1Catch1(error, loopDepth);
			} catch (...) {
				loopDepth = a_body1loopBody1cont1Catch1(unknown_error(), loopDepth);
			}
		}
		else
		{
															#line 1302 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_4 = delay(std::max(0.001, std::min(CLIENT_KNOBS->MAX_PROXY_CONTACT_LAG - (curTime - lastProxyTime), (CLIENT_KNOBS->MAX_VERSION_CACHE_LAG - grvDelay) - (curTime - lastTime))));
															#line 1302 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<BackgroundGrvUpdaterActor*>(this)->actor_wait_state < 0) return a_body1Catch2(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 6863 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1Catch2(__when_expr_4.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1cont1when2(__when_expr_4.get(), loopDepth); };
			static_cast<BackgroundGrvUpdaterActor*>(this)->actor_wait_state = 5;
															#line 1302 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< BackgroundGrvUpdaterActor, 4, Void >*>(static_cast<BackgroundGrvUpdaterActor*>(this)));
															#line 6868 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(Void && _,int loopDepth) 
	{
															#line 1273 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		curTime = now();
															#line 1274 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		lastTime = cx->getLastGrvTime();
															#line 1275 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		lastProxyTime = cx->lastProxyRequestTime;
															#line 1276 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		TraceEvent(SevDebug, "BackgroundGrvUpdaterBefore") .detail("CurTime", curTime) .detail("LastTime", lastTime) .detail("GrvDelay", grvDelay) .detail("CachedReadVersion", cx->getCachedReadVersion()) .detail("CachedTime", cx->getLastGrvTime()) .detail("Gap", curTime - lastTime) .detail("Bound", CLIENT_KNOBS->MAX_VERSION_CACHE_LAG - grvDelay);
															#line 1284 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (curTime - lastTime >= (CLIENT_KNOBS->MAX_VERSION_CACHE_LAG - grvDelay) || curTime - lastProxyTime > CLIENT_KNOBS->MAX_PROXY_CONTACT_LAG)
															#line 6886 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
			try {
															#line 1287 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				tr.setOption(FDBTransactionOptions::SKIP_GRV_CACHE);
															#line 1288 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				StrictFuture<Void> __when_expr_1 = success(tr.getReadVersion());
															#line 1288 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (static_cast<BackgroundGrvUpdaterActor*>(this)->actor_wait_state < 0) return a_body1loopBody1cont1Catch1(actor_cancelled(), loopDepth);
															#line 6895 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1cont1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont1when1(__when_expr_1.get(), loopDepth); };
				static_cast<BackgroundGrvUpdaterActor*>(this)->actor_wait_state = 2;
															#line 1288 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< BackgroundGrvUpdaterActor, 1, Void >*>(static_cast<BackgroundGrvUpdaterActor*>(this)));
															#line 6900 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				loopDepth = 0;
			}
			catch (Error& error) {
				loopDepth = a_body1loopBody1cont1Catch1(error, loopDepth);
			} catch (...) {
				loopDepth = a_body1loopBody1cont1Catch1(unknown_error(), loopDepth);
			}
		}
		else
		{
															#line 1302 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_4 = delay(std::max(0.001, std::min(CLIENT_KNOBS->MAX_PROXY_CONTACT_LAG - (curTime - lastProxyTime), (CLIENT_KNOBS->MAX_VERSION_CACHE_LAG - grvDelay) - (curTime - lastTime))));
															#line 1302 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<BackgroundGrvUpdaterActor*>(this)->actor_wait_state < 0) return a_body1Catch2(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 6915 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1Catch2(__when_expr_4.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1cont1when2(__when_expr_4.get(), loopDepth); };
			static_cast<BackgroundGrvUpdaterActor*>(this)->actor_wait_state = 5;
															#line 1302 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< BackgroundGrvUpdaterActor, 4, Void >*>(static_cast<BackgroundGrvUpdaterActor*>(this)));
															#line 6920 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}

		return loopDepth;
	}
	int a_body1loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<BackgroundGrvUpdaterActor*>(this)->actor_wait_state > 0) static_cast<BackgroundGrvUpdaterActor*>(this)->actor_wait_state = 0;
		static_cast<BackgroundGrvUpdaterActor*>(this)->ActorCallback< BackgroundGrvUpdaterActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< BackgroundGrvUpdaterActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("backgroundGrvUpdater", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("backgroundGrvUpdater", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< BackgroundGrvUpdaterActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("backgroundGrvUpdater", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("backgroundGrvUpdater", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< BackgroundGrvUpdaterActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("backgroundGrvUpdater", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch2(err, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("backgroundGrvUpdater", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1cont3(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1cont4(int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 1297 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent(SevInfo, "BackgroundGrvUpdaterTxnError").errorUnsuppressed(e);
															#line 1298 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_2 = tr.onError(e);
															#line 1298 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<BackgroundGrvUpdaterActor*>(this)->actor_wait_state < 0) return a_body1Catch2(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 7010 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch2(__when_expr_2.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1cont1Catch1when1(__when_expr_2.get(), loopDepth); };
			static_cast<BackgroundGrvUpdaterActor*>(this)->actor_wait_state = 3;
															#line 1298 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< BackgroundGrvUpdaterActor, 2, Void >*>(static_cast<BackgroundGrvUpdaterActor*>(this)));
															#line 7015 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch2(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch2(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont5(Void const& _,int loopDepth) 
	{
															#line 1289 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		cx->lastProxyRequestTime = curTime;
															#line 1290 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		grvDelay = (grvDelay + (now() - curTime)) / 2.0;
															#line 1291 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		TraceEvent(SevDebug, "BackgroundGrvUpdaterSuccess") .detail("GrvDelay", grvDelay) .detail("CachedReadVersion", cx->getCachedReadVersion()) .detail("CachedTime", cx->getLastGrvTime());
															#line 1295 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		backoff = Backoff();
															#line 7036 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont7(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont5(Void && _,int loopDepth) 
	{
															#line 1289 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		cx->lastProxyRequestTime = curTime;
															#line 1290 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		grvDelay = (grvDelay + (now() - curTime)) / 2.0;
															#line 1291 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		TraceEvent(SevDebug, "BackgroundGrvUpdaterSuccess") .detail("GrvDelay", grvDelay) .detail("CachedReadVersion", cx->getCachedReadVersion()) .detail("CachedTime", cx->getLastGrvTime());
															#line 1295 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		backoff = Backoff();
															#line 7051 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont7(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont5(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont5(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<BackgroundGrvUpdaterActor*>(this)->actor_wait_state > 0) static_cast<BackgroundGrvUpdaterActor*>(this)->actor_wait_state = 0;
		static_cast<BackgroundGrvUpdaterActor*>(this)->ActorCallback< BackgroundGrvUpdaterActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< BackgroundGrvUpdaterActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("backgroundGrvUpdater", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("backgroundGrvUpdater", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< BackgroundGrvUpdaterActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("backgroundGrvUpdater", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("backgroundGrvUpdater", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< BackgroundGrvUpdaterActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("backgroundGrvUpdater", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("backgroundGrvUpdater", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1loopBody1cont7(int loopDepth) 
	{
		try {
			loopDepth = a_body1loopBody1cont4(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch2(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch2(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1Catch1cont1(Void const& _,int loopDepth) 
	{
															#line 1299 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_3 = backoff.onError();
															#line 1299 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<BackgroundGrvUpdaterActor*>(this)->actor_wait_state < 0) return a_body1Catch2(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 7138 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch2(__when_expr_3.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1cont1Catch1cont1when1(__when_expr_3.get(), loopDepth); };
		static_cast<BackgroundGrvUpdaterActor*>(this)->actor_wait_state = 4;
															#line 1299 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< BackgroundGrvUpdaterActor, 3, Void >*>(static_cast<BackgroundGrvUpdaterActor*>(this)));
															#line 7143 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont1Catch1cont1(Void && _,int loopDepth) 
	{
															#line 1299 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_3 = backoff.onError();
															#line 1299 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<BackgroundGrvUpdaterActor*>(this)->actor_wait_state < 0) return a_body1Catch2(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 7154 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch2(__when_expr_3.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1cont1Catch1cont1when1(__when_expr_3.get(), loopDepth); };
		static_cast<BackgroundGrvUpdaterActor*>(this)->actor_wait_state = 4;
															#line 1299 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< BackgroundGrvUpdaterActor, 3, Void >*>(static_cast<BackgroundGrvUpdaterActor*>(this)));
															#line 7159 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<BackgroundGrvUpdaterActor*>(this)->actor_wait_state > 0) static_cast<BackgroundGrvUpdaterActor*>(this)->actor_wait_state = 0;
		static_cast<BackgroundGrvUpdaterActor*>(this)->ActorCallback< BackgroundGrvUpdaterActor, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< BackgroundGrvUpdaterActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("backgroundGrvUpdater", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("backgroundGrvUpdater", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< BackgroundGrvUpdaterActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("backgroundGrvUpdater", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("backgroundGrvUpdater", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< BackgroundGrvUpdaterActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("backgroundGrvUpdater", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch2(err, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("backgroundGrvUpdater", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1loopBody1cont1Catch1cont2(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont4(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1Catch1cont2(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont4(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1Catch1cont1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1Catch1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1Catch1cont1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1Catch1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<BackgroundGrvUpdaterActor*>(this)->actor_wait_state > 0) static_cast<BackgroundGrvUpdaterActor*>(this)->actor_wait_state = 0;
		static_cast<BackgroundGrvUpdaterActor*>(this)->ActorCallback< BackgroundGrvUpdaterActor, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< BackgroundGrvUpdaterActor, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("backgroundGrvUpdater", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1cont1Catch1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("backgroundGrvUpdater", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< BackgroundGrvUpdaterActor, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("backgroundGrvUpdater", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1cont1Catch1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("backgroundGrvUpdater", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< BackgroundGrvUpdaterActor, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("backgroundGrvUpdater", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1Catch2(err, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("backgroundGrvUpdater", reinterpret_cast<unsigned long>(this), 3);

	}
	int a_body1loopBody1cont8(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont8(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1when2(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont8(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1when2(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont8(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose5() 
	{
		if (static_cast<BackgroundGrvUpdaterActor*>(this)->actor_wait_state > 0) static_cast<BackgroundGrvUpdaterActor*>(this)->actor_wait_state = 0;
		static_cast<BackgroundGrvUpdaterActor*>(this)->ActorCallback< BackgroundGrvUpdaterActor, 4, Void >::remove();

	}
	void a_callback_fire(ActorCallback< BackgroundGrvUpdaterActor, 4, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("backgroundGrvUpdater", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1loopBody1cont1when2(value, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("backgroundGrvUpdater", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_fire(ActorCallback< BackgroundGrvUpdaterActor, 4, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("backgroundGrvUpdater", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1loopBody1cont1when2(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("backgroundGrvUpdater", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_error(ActorCallback< BackgroundGrvUpdaterActor, 4, Void >*,Error err) 
	{
		fdb_probe_actor_enter("backgroundGrvUpdater", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1Catch2(err, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("backgroundGrvUpdater", reinterpret_cast<unsigned long>(this), 4);

	}
															#line 1264 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	DatabaseContext* cx;
															#line 1265 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Transaction tr;
															#line 1266 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	double grvDelay;
															#line 1267 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Backoff backoff;
															#line 1273 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	double curTime;
															#line 1274 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	double lastTime;
															#line 1275 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	double lastProxyTime;
															#line 7391 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via backgroundGrvUpdater()
															#line 1264 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class BackgroundGrvUpdaterActor final : public Actor<Void>, public ActorCallback< BackgroundGrvUpdaterActor, 0, Void >, public ActorCallback< BackgroundGrvUpdaterActor, 1, Void >, public ActorCallback< BackgroundGrvUpdaterActor, 2, Void >, public ActorCallback< BackgroundGrvUpdaterActor, 3, Void >, public ActorCallback< BackgroundGrvUpdaterActor, 4, Void >, public FastAllocated<BackgroundGrvUpdaterActor>, public BackgroundGrvUpdaterActorState<BackgroundGrvUpdaterActor> {
															#line 7396 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<BackgroundGrvUpdaterActor>::operator new;
	using FastAllocated<BackgroundGrvUpdaterActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< BackgroundGrvUpdaterActor, 0, Void >;
friend struct ActorCallback< BackgroundGrvUpdaterActor, 1, Void >;
friend struct ActorCallback< BackgroundGrvUpdaterActor, 2, Void >;
friend struct ActorCallback< BackgroundGrvUpdaterActor, 3, Void >;
friend struct ActorCallback< BackgroundGrvUpdaterActor, 4, Void >;
															#line 1264 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	BackgroundGrvUpdaterActor(DatabaseContext* const& cx) 
															#line 7411 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Void>(),
		   BackgroundGrvUpdaterActorState<BackgroundGrvUpdaterActor>(cx)
	{
		fdb_probe_actor_enter("backgroundGrvUpdater", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("backgroundGrvUpdater");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("backgroundGrvUpdater", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< BackgroundGrvUpdaterActor, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< BackgroundGrvUpdaterActor, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< BackgroundGrvUpdaterActor, 2, Void >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< BackgroundGrvUpdaterActor, 3, Void >*)0, actor_cancelled()); break;
		case 5: this->a_callback_error((ActorCallback< BackgroundGrvUpdaterActor, 4, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 1264 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] static Future<Void> backgroundGrvUpdater( DatabaseContext* const& cx ) {
															#line 1264 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Void>(new BackgroundGrvUpdaterActor(cx));
															#line 7443 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 1313 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

															#line 7448 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via getHealthMetricsActor()
															#line 1314 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class GetHealthMetricsActorActor>
															#line 1314 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetHealthMetricsActorActorState {
															#line 7455 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 1314 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetHealthMetricsActorActorState(DatabaseContext* const& cx,bool const& detailed,bool const& sendDetailedRequest) 
															#line 1314 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 1314 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : cx(cx),
															#line 1314 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   detailed(detailed),
															#line 1314 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   sendDetailedRequest(sendDetailedRequest)
															#line 7466 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("getHealthMetricsActor", reinterpret_cast<unsigned long>(this));

	}
	~GetHealthMetricsActorActorState() 
	{
		fdb_probe_actor_destroy("getHealthMetricsActor", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 1315 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			;
															#line 7481 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~GetHealthMetricsActorActorState();
		static_cast<GetHealthMetricsActorActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
															#line 1317 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_0 = cx->onProxiesChanged();
															#line 1316 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<GetHealthMetricsActorActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 7513 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
															#line 1318 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<GetHealthMetricsReply> __when_expr_1 = basicLoadBalance(cx->getGrvProxies(UseProvisionalProxies::False), &GrvProxyInterface::getHealthMetrics, GetHealthMetricsRequest(sendDetailedRequest));
															#line 7517 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1when2(__when_expr_1.get(), loopDepth); };
		static_cast<GetHealthMetricsActorActor*>(this)->actor_wait_state = 1;
															#line 1317 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< GetHealthMetricsActorActor, 0, Void >*>(static_cast<GetHealthMetricsActorActor*>(this)));
															#line 1318 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< GetHealthMetricsActorActor, 1, GetHealthMetricsReply >*>(static_cast<GetHealthMetricsActorActor*>(this)));
															#line 7524 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when2(GetHealthMetricsReply const& rep,int loopDepth) 
	{
															#line 1321 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		cx->healthMetrics.update(rep.healthMetrics, detailed, true);
															#line 1322 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (detailed)
															#line 7553 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 1323 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			cx->healthMetricsLastUpdated = now();
															#line 1324 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			cx->detailedHealthMetricsLastUpdated = now();
															#line 1325 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<GetHealthMetricsActorActor*>(this)->SAV<HealthMetrics>::futures) { (void)(cx->healthMetrics); this->~GetHealthMetricsActorActorState(); static_cast<GetHealthMetricsActorActor*>(this)->destroy(); return 0; }
															#line 7561 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<GetHealthMetricsActorActor*>(this)->SAV< HealthMetrics >::value()) HealthMetrics(cx->healthMetrics);
			this->~GetHealthMetricsActorActorState();
			static_cast<GetHealthMetricsActorActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
		else
		{
															#line 1327 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			cx->healthMetricsLastUpdated = now();
															#line 1328 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			HealthMetrics result;
															#line 1329 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			result.update(cx->healthMetrics, false, false);
															#line 1330 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<GetHealthMetricsActorActor*>(this)->SAV<HealthMetrics>::futures) { (void)(result); this->~GetHealthMetricsActorActorState(); static_cast<GetHealthMetricsActorActor*>(this)->destroy(); return 0; }
															#line 7577 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<GetHealthMetricsActorActor*>(this)->SAV< HealthMetrics >::value()) HealthMetrics(result);
			this->~GetHealthMetricsActorActorState();
			static_cast<GetHealthMetricsActorActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}

		return loopDepth;
	}
	int a_body1loopBody1when2(GetHealthMetricsReply && rep,int loopDepth) 
	{
															#line 1321 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		cx->healthMetrics.update(rep.healthMetrics, detailed, true);
															#line 1322 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (detailed)
															#line 7592 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 1323 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			cx->healthMetricsLastUpdated = now();
															#line 1324 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			cx->detailedHealthMetricsLastUpdated = now();
															#line 1325 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<GetHealthMetricsActorActor*>(this)->SAV<HealthMetrics>::futures) { (void)(cx->healthMetrics); this->~GetHealthMetricsActorActorState(); static_cast<GetHealthMetricsActorActor*>(this)->destroy(); return 0; }
															#line 7600 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<GetHealthMetricsActorActor*>(this)->SAV< HealthMetrics >::value()) HealthMetrics(cx->healthMetrics);
			this->~GetHealthMetricsActorActorState();
			static_cast<GetHealthMetricsActorActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
		else
		{
															#line 1327 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			cx->healthMetricsLastUpdated = now();
															#line 1328 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			HealthMetrics result;
															#line 1329 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			result.update(cx->healthMetrics, false, false);
															#line 1330 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<GetHealthMetricsActorActor*>(this)->SAV<HealthMetrics>::futures) { (void)(result); this->~GetHealthMetricsActorActorState(); static_cast<GetHealthMetricsActorActor*>(this)->destroy(); return 0; }
															#line 7616 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<GetHealthMetricsActorActor*>(this)->SAV< HealthMetrics >::value()) HealthMetrics(result);
			this->~GetHealthMetricsActorActorState();
			static_cast<GetHealthMetricsActorActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<GetHealthMetricsActorActor*>(this)->actor_wait_state > 0) static_cast<GetHealthMetricsActorActor*>(this)->actor_wait_state = 0;
		static_cast<GetHealthMetricsActorActor*>(this)->ActorCallback< GetHealthMetricsActorActor, 0, Void >::remove();
		static_cast<GetHealthMetricsActorActor*>(this)->ActorCallback< GetHealthMetricsActorActor, 1, GetHealthMetricsReply >::remove();

	}
	void a_callback_fire(ActorCallback< GetHealthMetricsActorActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getHealthMetricsActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getHealthMetricsActor", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< GetHealthMetricsActorActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getHealthMetricsActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getHealthMetricsActor", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< GetHealthMetricsActorActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getHealthMetricsActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getHealthMetricsActor", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< GetHealthMetricsActorActor, 1, GetHealthMetricsReply >*,GetHealthMetricsReply const& value) 
	{
		fdb_probe_actor_enter("getHealthMetricsActor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose1();
		try {
			a_body1loopBody1when2(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getHealthMetricsActor", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< GetHealthMetricsActorActor, 1, GetHealthMetricsReply >*,GetHealthMetricsReply && value) 
	{
		fdb_probe_actor_enter("getHealthMetricsActor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose1();
		try {
			a_body1loopBody1when2(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getHealthMetricsActor", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< GetHealthMetricsActorActor, 1, GetHealthMetricsReply >*,Error err) 
	{
		fdb_probe_actor_enter("getHealthMetricsActor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getHealthMetricsActor", reinterpret_cast<unsigned long>(this), 1);

	}
															#line 1314 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	DatabaseContext* cx;
															#line 1314 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	bool detailed;
															#line 1314 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	bool sendDetailedRequest;
															#line 7728 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via getHealthMetricsActor()
															#line 1314 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetHealthMetricsActorActor final : public Actor<HealthMetrics>, public ActorCallback< GetHealthMetricsActorActor, 0, Void >, public ActorCallback< GetHealthMetricsActorActor, 1, GetHealthMetricsReply >, public FastAllocated<GetHealthMetricsActorActor>, public GetHealthMetricsActorActorState<GetHealthMetricsActorActor> {
															#line 7733 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<GetHealthMetricsActorActor>::operator new;
	using FastAllocated<GetHealthMetricsActorActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<HealthMetrics>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< GetHealthMetricsActorActor, 0, Void >;
friend struct ActorCallback< GetHealthMetricsActorActor, 1, GetHealthMetricsReply >;
															#line 1314 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetHealthMetricsActorActor(DatabaseContext* const& cx,bool const& detailed,bool const& sendDetailedRequest) 
															#line 7745 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<HealthMetrics>(),
		   GetHealthMetricsActorActorState<GetHealthMetricsActorActor>(cx, detailed, sendDetailedRequest)
	{
		fdb_probe_actor_enter("getHealthMetricsActor", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("getHealthMetricsActor");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("getHealthMetricsActor", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< GetHealthMetricsActorActor, 0, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 1314 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] static Future<HealthMetrics> getHealthMetricsActor( DatabaseContext* const& cx, bool const& detailed, bool const& sendDetailedRequest ) {
															#line 1314 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<HealthMetrics>(new GetHealthMetricsActorActor(cx, detailed, sendDetailedRequest));
															#line 7773 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 1336 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

Future<HealthMetrics> DatabaseContext::getHealthMetrics(bool detailed = false) {
	if (now() - healthMetricsLastUpdated < CLIENT_KNOBS->AGGREGATE_HEALTH_METRICS_MAX_STALENESS) {
		if (detailed) {
			return healthMetrics;
		} else {
			HealthMetrics result;
			result.update(healthMetrics, false, false);
			return result;
		}
	}
	bool sendDetailedRequest =
	    detailed && now() - detailedHealthMetricsLastUpdated > CLIENT_KNOBS->DETAILED_HEALTH_METRICS_MAX_STALENESS;
	return getHealthMetricsActor(this, detailed, sendDetailedRequest);
}

Future<Optional<HealthMetrics::StorageStats>> DatabaseContext::getStorageStats(const UID& id, double maxStaleness) {
	if (now() - detailedHealthMetricsLastUpdated < maxStaleness) {
		auto it = healthMetrics.storageStats.find(id);
		return it == healthMetrics.storageStats.end() ? Optional<HealthMetrics::StorageStats>() : it->second;
	}

	return map(getHealthMetricsActor(this, true, true), [&id](auto metrics) -> Optional<HealthMetrics::StorageStats> {
		auto it = metrics.storageStats.find(id);
		return it == metrics.storageStats.end() ? Optional<HealthMetrics::StorageStats>() : it->second;
	});
}

// register a special key(s) implementation under the specified module
void DatabaseContext::registerSpecialKeysImpl(SpecialKeySpace::MODULE module,
                                              SpecialKeySpace::IMPLTYPE type,
                                              std::unique_ptr<SpecialKeyRangeReadImpl>&& impl,
                                              int deprecatedVersion) {
	// if deprecated, add the implementation when the api version is less than the deprecated version
	if (deprecatedVersion == -1 || apiVersion.version() < deprecatedVersion) {
		specialKeySpace->registerKeyRange(module, type, impl->getKeyRange(), impl.get());
		specialKeySpaceModules.push_back(std::move(impl));
	}
}

															#line 7817 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
[[nodiscard]] Future<RangeResult> getWorkerInterfaces( Reference<IClusterConnectionRecord> const& clusterRecord );

#line 1377 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 7821 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
[[nodiscard]] Future<Optional<Value>> getJSON( Database const& db );

#line 1378 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

struct SingleSpecialKeyImpl : SpecialKeyRangeReadImpl {
	Future<RangeResult> getRange(ReadYourWritesTransaction* ryw,
	                             KeyRangeRef kr,
	                             GetRangeLimits limitsHint) const override {
		ASSERT(kr.contains(k));
		return map(f(ryw), [k = k](Optional<Value> v) {
			RangeResult result;
			if (v.present()) {
				result.push_back_deep(result.arena(), KeyValueRef(k, v.get()));
			}
			return result;
		});
	}

	SingleSpecialKeyImpl(KeyRef k,
	                     const std::function<Future<Optional<Value>>(ReadYourWritesTransaction*)>& f,
	                     bool supportsTenants = false)
	  : SpecialKeyRangeReadImpl(singleKeyRange(k)), k(k), f(f), tenantSupport(supportsTenants) {}

	bool supportsTenants() const override { return tenantSupport; };

private:
	Key k;
	std::function<Future<Optional<Value>>(ReadYourWritesTransaction*)> f;
	bool tenantSupport;
};

class HealthMetricsRangeImpl : public SpecialKeyRangeAsyncImpl {
public:
	explicit HealthMetricsRangeImpl(KeyRangeRef kr);
	Future<RangeResult> getRange(ReadYourWritesTransaction* ryw,
	                             KeyRangeRef kr,
	                             GetRangeLimits limitsHint) const override;
};

static RangeResult healthMetricsToKVPairs(const HealthMetrics& metrics, KeyRangeRef kr) {
	RangeResult result;
	if (CLIENT_BUGGIFY)
		return result;
	if (kr.contains("\xff\xff/metrics/health/aggregate"_sr) && metrics.worstStorageDurabilityLag != 0) {
		json_spirit::mObject statsObj;
		statsObj["batch_limited"] = metrics.batchLimited;
		statsObj["tps_limit"] = metrics.tpsLimit;
		statsObj["worst_storage_durability_lag"] = metrics.worstStorageDurabilityLag;
		statsObj["limiting_storage_durability_lag"] = metrics.limitingStorageDurabilityLag;
		statsObj["worst_storage_queue"] = metrics.worstStorageQueue;
		statsObj["limiting_storage_queue"] = metrics.limitingStorageQueue;
		statsObj["worst_log_queue"] = metrics.worstTLogQueue;
		std::string statsString =
		    json_spirit::write_string(json_spirit::mValue(statsObj), json_spirit::Output_options::raw_utf8);
		ValueRef bytes(result.arena(), statsString);
		result.push_back(result.arena(), KeyValueRef("\xff\xff/metrics/health/aggregate"_sr, bytes));
	}
	// tlog stats
	{
		int phase = 0; // Avoid comparing twice per loop iteration
		for (const auto& [uid, logStats] : metrics.tLogQueue) {
			StringRef k{ StringRef(uid.toString()).withPrefix("\xff\xff/metrics/health/log/"_sr, result.arena()) };
			if (phase == 0 && k >= kr.begin) {
				phase = 1;
			}
			if (phase == 1) {
				if (k < kr.end) {
					json_spirit::mObject statsObj;
					statsObj["log_queue"] = logStats;
					std::string statsString =
					    json_spirit::write_string(json_spirit::mValue(statsObj), json_spirit::Output_options::raw_utf8);
					ValueRef bytes(result.arena(), statsString);
					result.push_back(result.arena(), KeyValueRef(k, bytes));
				} else {
					break;
				}
			}
		}
	}
	// Storage stats
	{
		int phase = 0; // Avoid comparing twice per loop iteration
		for (const auto& [uid, storageStats] : metrics.storageStats) {
			StringRef k{ StringRef(uid.toString()).withPrefix("\xff\xff/metrics/health/storage/"_sr, result.arena()) };
			if (phase == 0 && k >= kr.begin) {
				phase = 1;
			}
			if (phase == 1) {
				if (k < kr.end) {
					json_spirit::mObject statsObj;
					statsObj["storage_durability_lag"] = storageStats.storageDurabilityLag;
					statsObj["storage_queue"] = storageStats.storageQueue;
					statsObj["cpu_usage"] = storageStats.cpuUsage;
					statsObj["disk_usage"] = storageStats.diskUsage;
					std::string statsString =
					    json_spirit::write_string(json_spirit::mValue(statsObj), json_spirit::Output_options::raw_utf8);
					ValueRef bytes(result.arena(), statsString);
					result.push_back(result.arena(), KeyValueRef(k, bytes));
				} else {
					break;
				}
			}
		}
	}
	return result;
}

															#line 7929 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via healthMetricsGetRangeActor()
															#line 1482 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class HealthMetricsGetRangeActorActor>
															#line 1482 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class HealthMetricsGetRangeActorActorState {
															#line 7936 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 1482 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	HealthMetricsGetRangeActorActorState(ReadYourWritesTransaction* const& ryw,KeyRangeRef const& kr) 
															#line 1482 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 1482 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : ryw(ryw),
															#line 1482 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   kr(kr)
															#line 7945 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("healthMetricsGetRangeActor", reinterpret_cast<unsigned long>(this));

	}
	~HealthMetricsGetRangeActorActorState() 
	{
		fdb_probe_actor_destroy("healthMetricsGetRangeActor", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 1483 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<HealthMetrics> __when_expr_0 = ryw->getDatabase()->getHealthMetrics( kr.intersects( KeyRangeRef("\xff\xff/metrics/health/storage/"_sr, "\xff\xff/metrics/health/storage0"_sr)) || kr.intersects(KeyRangeRef("\xff\xff/metrics/health/log/"_sr, "\xff\xff/metrics/health/log0"_sr)));
															#line 1483 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<HealthMetricsGetRangeActorActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 7962 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<HealthMetricsGetRangeActorActor*>(this)->actor_wait_state = 1;
															#line 1483 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< HealthMetricsGetRangeActorActor, 0, HealthMetrics >*>(static_cast<HealthMetricsGetRangeActorActor*>(this)));
															#line 7967 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~HealthMetricsGetRangeActorActorState();
		static_cast<HealthMetricsGetRangeActorActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(HealthMetrics const& metrics,int loopDepth) 
	{
															#line 1487 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<HealthMetricsGetRangeActorActor*>(this)->SAV<RangeResult>::futures) { (void)(healthMetricsToKVPairs(metrics, kr)); this->~HealthMetricsGetRangeActorActorState(); static_cast<HealthMetricsGetRangeActorActor*>(this)->destroy(); return 0; }
															#line 7990 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<HealthMetricsGetRangeActorActor*>(this)->SAV< RangeResult >::value()) RangeResult(healthMetricsToKVPairs(metrics, kr));
		this->~HealthMetricsGetRangeActorActorState();
		static_cast<HealthMetricsGetRangeActorActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1(HealthMetrics && metrics,int loopDepth) 
	{
															#line 1487 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<HealthMetricsGetRangeActorActor*>(this)->SAV<RangeResult>::futures) { (void)(healthMetricsToKVPairs(metrics, kr)); this->~HealthMetricsGetRangeActorActorState(); static_cast<HealthMetricsGetRangeActorActor*>(this)->destroy(); return 0; }
															#line 8002 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<HealthMetricsGetRangeActorActor*>(this)->SAV< RangeResult >::value()) RangeResult(healthMetricsToKVPairs(metrics, kr));
		this->~HealthMetricsGetRangeActorActorState();
		static_cast<HealthMetricsGetRangeActorActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1when1(HealthMetrics const& metrics,int loopDepth) 
	{
		loopDepth = a_body1cont1(metrics, loopDepth);

		return loopDepth;
	}
	int a_body1when1(HealthMetrics && metrics,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(metrics), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<HealthMetricsGetRangeActorActor*>(this)->actor_wait_state > 0) static_cast<HealthMetricsGetRangeActorActor*>(this)->actor_wait_state = 0;
		static_cast<HealthMetricsGetRangeActorActor*>(this)->ActorCallback< HealthMetricsGetRangeActorActor, 0, HealthMetrics >::remove();

	}
	void a_callback_fire(ActorCallback< HealthMetricsGetRangeActorActor, 0, HealthMetrics >*,HealthMetrics const& value) 
	{
		fdb_probe_actor_enter("healthMetricsGetRangeActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("healthMetricsGetRangeActor", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< HealthMetricsGetRangeActorActor, 0, HealthMetrics >*,HealthMetrics && value) 
	{
		fdb_probe_actor_enter("healthMetricsGetRangeActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("healthMetricsGetRangeActor", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< HealthMetricsGetRangeActorActor, 0, HealthMetrics >*,Error err) 
	{
		fdb_probe_actor_enter("healthMetricsGetRangeActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("healthMetricsGetRangeActor", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 1482 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	ReadYourWritesTransaction* ryw;
															#line 1482 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeyRangeRef kr;
															#line 8077 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via healthMetricsGetRangeActor()
															#line 1482 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class HealthMetricsGetRangeActorActor final : public Actor<RangeResult>, public ActorCallback< HealthMetricsGetRangeActorActor, 0, HealthMetrics >, public FastAllocated<HealthMetricsGetRangeActorActor>, public HealthMetricsGetRangeActorActorState<HealthMetricsGetRangeActorActor> {
															#line 8082 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<HealthMetricsGetRangeActorActor>::operator new;
	using FastAllocated<HealthMetricsGetRangeActorActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<RangeResult>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< HealthMetricsGetRangeActorActor, 0, HealthMetrics >;
															#line 1482 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	HealthMetricsGetRangeActorActor(ReadYourWritesTransaction* const& ryw,KeyRangeRef const& kr) 
															#line 8093 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<RangeResult>(),
		   HealthMetricsGetRangeActorActorState<HealthMetricsGetRangeActorActor>(ryw, kr)
	{
		fdb_probe_actor_enter("healthMetricsGetRangeActor", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("healthMetricsGetRangeActor");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("healthMetricsGetRangeActor", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< HealthMetricsGetRangeActorActor, 0, HealthMetrics >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 1482 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] static Future<RangeResult> healthMetricsGetRangeActor( ReadYourWritesTransaction* const& ryw, KeyRangeRef const& kr ) {
															#line 1482 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<RangeResult>(new HealthMetricsGetRangeActorActor(ryw, kr));
															#line 8121 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 1489 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

HealthMetricsRangeImpl::HealthMetricsRangeImpl(KeyRangeRef kr) : SpecialKeyRangeAsyncImpl(kr) {}

Future<RangeResult> HealthMetricsRangeImpl::getRange(ReadYourWritesTransaction* ryw,
                                                     KeyRangeRef kr,
                                                     GetRangeLimits limitsHint) const {
	return healthMetricsGetRangeActor(ryw, kr);
}

															#line 8134 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via getClusterId()
															#line 1498 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class GetClusterIdActor>
															#line 1498 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetClusterIdActorState {
															#line 8141 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 1498 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetClusterIdActorState(Database const& db) 
															#line 1498 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 1498 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : db(db)
															#line 8148 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("getClusterId", reinterpret_cast<unsigned long>(this));

	}
	~GetClusterIdActorState() 
	{
		fdb_probe_actor_destroy("getClusterId", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 1499 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			;
															#line 8163 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~GetClusterIdActorState();
		static_cast<GetClusterIdActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 1502 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<GetClusterIdActor*>(this)->SAV<UID>::futures) { (void)(db->clientInfo->get().clusterId); this->~GetClusterIdActorState(); static_cast<GetClusterIdActor*>(this)->destroy(); return 0; }
															#line 8186 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<GetClusterIdActor*>(this)->SAV< UID >::value()) UID(db->clientInfo->get().clusterId);
		this->~GetClusterIdActorState();
		static_cast<GetClusterIdActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
															#line 1499 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!(!db->clientInfo->get().clusterId.isValid()))
															#line 8205 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
			return a_body1break1(loopDepth==0?0:loopDepth-1); // break
		}
															#line 1500 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_0 = db->clientInfo->onChange();
															#line 1500 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<GetClusterIdActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 8213 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
		static_cast<GetClusterIdActor*>(this)->actor_wait_state = 1;
															#line 1500 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< GetClusterIdActor, 0, Void >*>(static_cast<GetClusterIdActor*>(this)));
															#line 8218 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1break1(int loopDepth) 
	{
		try {
			return a_body1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(Void const& _,int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1cont1(Void && _,int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<GetClusterIdActor*>(this)->actor_wait_state > 0) static_cast<GetClusterIdActor*>(this)->actor_wait_state = 0;
		static_cast<GetClusterIdActor*>(this)->ActorCallback< GetClusterIdActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetClusterIdActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getClusterId", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getClusterId", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< GetClusterIdActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getClusterId", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getClusterId", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< GetClusterIdActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getClusterId", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getClusterId", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 1498 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Database db;
															#line 8313 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via getClusterId()
															#line 1498 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetClusterIdActor final : public Actor<UID>, public ActorCallback< GetClusterIdActor, 0, Void >, public FastAllocated<GetClusterIdActor>, public GetClusterIdActorState<GetClusterIdActor> {
															#line 8318 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<GetClusterIdActor>::operator new;
	using FastAllocated<GetClusterIdActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<UID>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< GetClusterIdActor, 0, Void >;
															#line 1498 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetClusterIdActor(Database const& db) 
															#line 8329 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<UID>(),
		   GetClusterIdActorState<GetClusterIdActor>(db)
	{
		fdb_probe_actor_enter("getClusterId", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("getClusterId");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("getClusterId", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< GetClusterIdActor, 0, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 1498 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<UID> getClusterId( Database const& db ) {
															#line 1498 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<UID>(new GetClusterIdActor(db));
															#line 8357 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 1504 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

void DatabaseContext::initializeSpecialCounters() {
	specialCounter(cc, "OutstandingWatches", [this] { return outstandingWatches; });
	specialCounter(cc, "WatchMapSize", [this] { return watchMap.size(); });
}

DatabaseContext::DatabaseContext(Reference<AsyncVar<Reference<IClusterConnectionRecord>>> connectionRecord,
                                 Reference<AsyncVar<ClientDBInfo>> clientInfo,
                                 Reference<AsyncVar<Optional<ClientLeaderRegInterface>> const> coordinator,
                                 Future<Void> clientInfoMonitor,
                                 TaskPriority taskID,
                                 LocalityData const& clientLocality,
                                 EnableLocalityLoadBalance enableLocalityLoadBalance,
                                 LockAware lockAware,
                                 IsInternal internal,
                                 int _apiVersion,
                                 IsSwitchable switchable,
                                 Optional<TenantName> defaultTenant)
  : dbId(deterministicRandom()->randomUniqueID()), lockAware(lockAware), switchable(switchable),
    connectionRecord(connectionRecord), proxyProvisional(false), clientLocality(clientLocality),
    enableLocalityLoadBalance(enableLocalityLoadBalance), defaultTenant(defaultTenant), internal(internal),
    cc("TransactionMetrics", dbId.toString()), transactionReadVersions("ReadVersions", cc),
    transactionReadVersionsThrottled("ReadVersionsThrottled", cc),
    transactionReadVersionsCompleted("ReadVersionsCompleted", cc),
    transactionReadVersionBatches("ReadVersionBatches", cc),
    transactionBatchReadVersions("BatchPriorityReadVersions", cc),
    transactionDefaultReadVersions("DefaultPriorityReadVersions", cc),
    transactionImmediateReadVersions("ImmediatePriorityReadVersions", cc),
    transactionBatchReadVersionsCompleted("BatchPriorityReadVersionsCompleted", cc),
    transactionDefaultReadVersionsCompleted("DefaultPriorityReadVersionsCompleted", cc),
    transactionImmediateReadVersionsCompleted("ImmediatePriorityReadVersionsCompleted", cc),
    transactionLogicalReads("LogicalUncachedReads", cc), transactionPhysicalReads("PhysicalReadRequests", cc),
    transactionPhysicalReadsCompleted("PhysicalReadRequestsCompleted", cc),
    transactionGetKeyRequests("GetKeyRequests", cc), transactionGetValueRequests("GetValueRequests", cc),
    transactionGetRangeRequests("GetRangeRequests", cc),
    transactionGetMappedRangeRequests("GetMappedRangeRequests", cc),
    transactionGetRangeStreamRequests("GetRangeStreamRequests", cc), transactionWatchRequests("WatchRequests", cc),
    transactionGetAddressesForKeyRequests("GetAddressesForKeyRequests", cc), transactionBytesRead("BytesRead", cc),
    transactionKeysRead("KeysRead", cc), transactionMetadataVersionReads("MetadataVersionReads", cc),
    transactionCommittedMutations("CommittedMutations", cc),
    transactionCommittedMutationBytes("CommittedMutationBytes", cc), transactionSetMutations("SetMutations", cc),
    transactionClearMutations("ClearMutations", cc), transactionAtomicMutations("AtomicMutations", cc),
    transactionsCommitStarted("CommitStarted", cc), transactionsCommitCompleted("CommitCompleted", cc),
    transactionKeyServerLocationRequests("KeyServerLocationRequests", cc),
    transactionKeyServerLocationRequestsCompleted("KeyServerLocationRequestsCompleted", cc),
    transactionBlobGranuleLocationRequests("BlobGranuleLocationRequests", cc),
    transactionBlobGranuleLocationRequestsCompleted("BlobGranuleLocationRequestsCompleted", cc),
    transactionStatusRequests("StatusRequests", cc), transactionTenantLookupRequests("TenantLookupRequests", cc),
    transactionTenantLookupRequestsCompleted("TenantLookupRequestsCompleted", cc), transactionsTooOld("TooOld", cc),
    transactionsFutureVersions("FutureVersions", cc), transactionsNotCommitted("NotCommitted", cc),
    transactionsMaybeCommitted("MaybeCommitted", cc), transactionsResourceConstrained("ResourceConstrained", cc),
    transactionsProcessBehind("ProcessBehind", cc), transactionsThrottled("Throttled", cc),
    transactionsExpensiveClearCostEstCount("ExpensiveClearCostEstCount", cc),
    transactionGrvFullBatches("NumGrvFullBatches", cc), transactionGrvTimedOutBatches("NumGrvTimedOutBatches", cc),
    transactionCommitVersionNotFoundForSS("CommitVersionNotFoundForSS", cc), anyBGReads(false),
    ccBG("BlobGranuleReadMetrics", dbId.toString()), bgReadInputBytes("BGReadInputBytes", ccBG),
    bgReadOutputBytes("BGReadOutputBytes", ccBG), bgReadSnapshotRows("BGReadSnapshotRows", ccBG),
    bgReadRowsCleared("BGReadRowsCleared", ccBG), bgReadRowsInserted("BGReadRowsInserted", ccBG),
    bgReadRowsUpdated("BGReadRowsUpdated", ccBG), bgLatencies(), bgGranulesPerRequest(), usedAnyChangeFeeds(false),
    ccFeed("ChangeFeedClientMetrics", dbId.toString()), feedStreamStarts("FeedStreamStarts", ccFeed),
    feedMergeStreamStarts("FeedMergeStreamStarts", ccFeed), feedErrors("FeedErrors", ccFeed),
    feedNonRetriableErrors("FeedNonRetriableErrors", ccFeed), feedPops("FeedPops", ccFeed),
    feedPopsFallback("FeedPopsFallback", ccFeed), latencies(), readLatencies(), commitLatencies(), GRVLatencies(),
    mutationsPerCommit(), bytesPerCommit(), outstandingWatches(0), sharedStatePtr(nullptr), lastGrvTime(0.0),
    cachedReadVersion(0), lastRkBatchThrottleTime(0.0), lastRkDefaultThrottleTime(0.0), lastProxyRequestTime(0.0),
    transactionTracingSample(false), taskID(taskID), clientInfo(clientInfo), clientInfoMonitor(clientInfoMonitor),
    coordinator(coordinator), apiVersion(_apiVersion), mvCacheInsertLocation(0), healthMetricsLastUpdated(0),
    detailedHealthMetricsLastUpdated(0), smoothMidShardSize(CLIENT_KNOBS->SHARD_STAT_SMOOTH_AMOUNT),
    specialKeySpace(std::make_unique<SpecialKeySpace>(specialKeys.begin, specialKeys.end, /* test */ false)),
    connectToDatabaseEventCacheHolder(format("ConnectToDatabase/%s", dbId.toString().c_str())) {

	TraceEvent("DatabaseContextCreated", dbId).backtrace();

	connected = (clientInfo->get().commitProxies.size() && clientInfo->get().grvProxies.size())
	                ? Void()
	                : clientInfo->onChange();

	metadataVersionCache.resize(CLIENT_KNOBS->METADATA_VERSION_CACHE_SIZE);
	maxOutstandingWatches = CLIENT_KNOBS->DEFAULT_MAX_OUTSTANDING_WATCHES;

	snapshotRywEnabled = apiVersion.hasSnapshotRYW() ? 1 : 0;

	logger = databaseLogger(this) && tssLogger(this);
	locationCacheSize = g_network->isSimulated() ? CLIENT_KNOBS->LOCATION_CACHE_EVICTION_SIZE_SIM
	                                             : CLIENT_KNOBS->LOCATION_CACHE_EVICTION_SIZE;

	getValueSubmitted.init("NativeAPI.GetValueSubmitted"_sr);
	getValueCompleted.init("NativeAPI.GetValueCompleted"_sr);

	clientDBInfoMonitor = monitorClientDBInfoChange(this, clientInfo, &proxiesChangeTrigger);
	tssMismatchHandler = handleTssMismatches(this);
	clientStatusUpdater.actor = clientStatusUpdateActor(this);
	cacheListMonitor = monitorCacheList(this);

	smoothMidShardSize.reset(CLIENT_KNOBS->INIT_MID_SHARD_BYTES);
	globalConfig = std::make_unique<GlobalConfig>(this);

	if (apiVersion.version() >= 700) {
		registerSpecialKeysImpl(SpecialKeySpace::MODULE::ERRORMSG,
		                        SpecialKeySpace::IMPLTYPE::READONLY,
		                        std::make_unique<SingleSpecialKeyImpl>(
		                            SpecialKeySpace::getModuleRange(SpecialKeySpace::MODULE::ERRORMSG).begin,
		                            [](ReadYourWritesTransaction* ryw) -> Future<Optional<Value>> {
			                            if (ryw->getSpecialKeySpaceErrorMsg().present())
				                            return Optional<Value>(ryw->getSpecialKeySpaceErrorMsg().get());
			                            else
				                            return Optional<Value>();
		                            },
		                            true));
		registerSpecialKeysImpl(
		    SpecialKeySpace::MODULE::MANAGEMENT,
		    SpecialKeySpace::IMPLTYPE::READWRITE,
		    std::make_unique<ManagementCommandsOptionsImpl>(
		        KeyRangeRef("options/"_sr, "options0"_sr)
		            .withPrefix(SpecialKeySpace::getModuleRange(SpecialKeySpace::MODULE::MANAGEMENT).begin)));
		registerSpecialKeysImpl(
		    SpecialKeySpace::MODULE::MANAGEMENT,
		    SpecialKeySpace::IMPLTYPE::READWRITE,
		    std::make_unique<ExcludeServersRangeImpl>(SpecialKeySpace::getManagementApiCommandRange("exclude")));
		registerSpecialKeysImpl(
		    SpecialKeySpace::MODULE::MANAGEMENT,
		    SpecialKeySpace::IMPLTYPE::READWRITE,
		    std::make_unique<FailedServersRangeImpl>(SpecialKeySpace::getManagementApiCommandRange("failed")));
		registerSpecialKeysImpl(SpecialKeySpace::MODULE::MANAGEMENT,
		                        SpecialKeySpace::IMPLTYPE::READWRITE,
		                        std::make_unique<ExcludedLocalitiesRangeImpl>(
		                            SpecialKeySpace::getManagementApiCommandRange("excludedlocality")));
		registerSpecialKeysImpl(SpecialKeySpace::MODULE::MANAGEMENT,
		                        SpecialKeySpace::IMPLTYPE::READWRITE,
		                        std::make_unique<FailedLocalitiesRangeImpl>(
		                            SpecialKeySpace::getManagementApiCommandRange("failedlocality")));
		registerSpecialKeysImpl(
		    SpecialKeySpace::MODULE::MANAGEMENT,
		    SpecialKeySpace::IMPLTYPE::READONLY,
		    std::make_unique<ExclusionInProgressRangeImpl>(
		        KeyRangeRef("in_progress_exclusion/"_sr, "in_progress_exclusion0"_sr)
		            .withPrefix(SpecialKeySpace::getModuleRange(SpecialKeySpace::MODULE::MANAGEMENT).begin)));
		registerSpecialKeysImpl(
		    SpecialKeySpace::MODULE::CONFIGURATION,
		    SpecialKeySpace::IMPLTYPE::READWRITE,
		    std::make_unique<ProcessClassRangeImpl>(
		        KeyRangeRef("process/class_type/"_sr, "process/class_type0"_sr)
		            .withPrefix(SpecialKeySpace::getModuleRange(SpecialKeySpace::MODULE::CONFIGURATION).begin)));
		registerSpecialKeysImpl(
		    SpecialKeySpace::MODULE::CONFIGURATION,
		    SpecialKeySpace::IMPLTYPE::READONLY,
		    std::make_unique<ProcessClassSourceRangeImpl>(
		        KeyRangeRef("process/class_source/"_sr, "process/class_source0"_sr)
		            .withPrefix(SpecialKeySpace::getModuleRange(SpecialKeySpace::MODULE::CONFIGURATION).begin)));
		registerSpecialKeysImpl(
		    SpecialKeySpace::MODULE::MANAGEMENT,
		    SpecialKeySpace::IMPLTYPE::READWRITE,
		    std::make_unique<LockDatabaseImpl>(
		        singleKeyRange("db_locked"_sr)
		            .withPrefix(SpecialKeySpace::getModuleRange(SpecialKeySpace::MODULE::MANAGEMENT).begin)));
		registerSpecialKeysImpl(
		    SpecialKeySpace::MODULE::MANAGEMENT,
		    SpecialKeySpace::IMPLTYPE::READWRITE,
		    std::make_unique<ConsistencyCheckImpl>(
		        singleKeyRange("consistency_check_suspended"_sr)
		            .withPrefix(SpecialKeySpace::getModuleRange(SpecialKeySpace::MODULE::MANAGEMENT).begin)));
		registerSpecialKeysImpl(
		    SpecialKeySpace::MODULE::GLOBALCONFIG,
		    SpecialKeySpace::IMPLTYPE::READWRITE,
		    std::make_unique<GlobalConfigImpl>(SpecialKeySpace::getModuleRange(SpecialKeySpace::MODULE::GLOBALCONFIG)));
		registerSpecialKeysImpl(
		    SpecialKeySpace::MODULE::TRACING,
		    SpecialKeySpace::IMPLTYPE::READWRITE,
		    std::make_unique<TracingOptionsImpl>(SpecialKeySpace::getModuleRange(SpecialKeySpace::MODULE::TRACING)));
		registerSpecialKeysImpl(
		    SpecialKeySpace::MODULE::CONFIGURATION,
		    SpecialKeySpace::IMPLTYPE::READWRITE,
		    std::make_unique<CoordinatorsImpl>(
		        KeyRangeRef("coordinators/"_sr, "coordinators0"_sr)
		            .withPrefix(SpecialKeySpace::getModuleRange(SpecialKeySpace::MODULE::CONFIGURATION).begin)));
		registerSpecialKeysImpl(
		    SpecialKeySpace::MODULE::MANAGEMENT,
		    SpecialKeySpace::IMPLTYPE::READONLY,
		    std::make_unique<CoordinatorsAutoImpl>(
		        singleKeyRange("auto_coordinators"_sr)
		            .withPrefix(SpecialKeySpace::getModuleRange(SpecialKeySpace::MODULE::MANAGEMENT).begin)));
		registerSpecialKeysImpl(
		    SpecialKeySpace::MODULE::MANAGEMENT,
		    SpecialKeySpace::IMPLTYPE::READWRITE,
		    std::make_unique<AdvanceVersionImpl>(
		        singleKeyRange("min_required_commit_version"_sr)
		            .withPrefix(SpecialKeySpace::getModuleRange(SpecialKeySpace::MODULE::MANAGEMENT).begin)));
		registerSpecialKeysImpl(
		    SpecialKeySpace::MODULE::MANAGEMENT,
		    SpecialKeySpace::IMPLTYPE::READWRITE,
		    std::make_unique<VersionEpochImpl>(
		        singleKeyRange("version_epoch"_sr)
		            .withPrefix(SpecialKeySpace::getModuleRange(SpecialKeySpace::MODULE::MANAGEMENT).begin)));
		registerSpecialKeysImpl(
		    SpecialKeySpace::MODULE::MANAGEMENT,
		    SpecialKeySpace::IMPLTYPE::READWRITE,
		    std::make_unique<ClientProfilingImpl>(
		        KeyRangeRef("profiling/"_sr, "profiling0"_sr)
		            .withPrefix(SpecialKeySpace::getModuleRange(SpecialKeySpace::MODULE::MANAGEMENT).begin)),
		    /* deprecated */ ApiVersion::withClientProfilingDeprecated().version());
		registerSpecialKeysImpl(
		    SpecialKeySpace::MODULE::MANAGEMENT,
		    SpecialKeySpace::IMPLTYPE::READWRITE,
		    std::make_unique<MaintenanceImpl>(
		        KeyRangeRef("maintenance/"_sr, "maintenance0"_sr)
		            .withPrefix(SpecialKeySpace::getModuleRange(SpecialKeySpace::MODULE::MANAGEMENT).begin)));
		registerSpecialKeysImpl(
		    SpecialKeySpace::MODULE::MANAGEMENT,
		    SpecialKeySpace::IMPLTYPE::READWRITE,
		    std::make_unique<DataDistributionImpl>(
		        KeyRangeRef("data_distribution/"_sr, "data_distribution0"_sr)
		            .withPrefix(SpecialKeySpace::getModuleRange(SpecialKeySpace::MODULE::MANAGEMENT).begin)));
		registerSpecialKeysImpl(
		    SpecialKeySpace::MODULE::ACTORLINEAGE,
		    SpecialKeySpace::IMPLTYPE::READONLY,
		    std::make_unique<ActorLineageImpl>(SpecialKeySpace::getModuleRange(SpecialKeySpace::MODULE::ACTORLINEAGE)));
		registerSpecialKeysImpl(SpecialKeySpace::MODULE::ACTOR_PROFILER_CONF,
		                        SpecialKeySpace::IMPLTYPE::READWRITE,
		                        std::make_unique<ActorProfilerConf>(
		                            SpecialKeySpace::getModuleRange(SpecialKeySpace::MODULE::ACTOR_PROFILER_CONF)));
	}
	if (apiVersion.version() >= 630) {
		registerSpecialKeysImpl(SpecialKeySpace::MODULE::TRANSACTION,
		                        SpecialKeySpace::IMPLTYPE::READONLY,
		                        std::make_unique<ConflictingKeysImpl>(conflictingKeysRange));
		registerSpecialKeysImpl(SpecialKeySpace::MODULE::TRANSACTION,
		                        SpecialKeySpace::IMPLTYPE::READONLY,
		                        std::make_unique<ReadConflictRangeImpl>(readConflictRangeKeysRange));
		registerSpecialKeysImpl(SpecialKeySpace::MODULE::TRANSACTION,
		                        SpecialKeySpace::IMPLTYPE::READONLY,
		                        std::make_unique<WriteConflictRangeImpl>(writeConflictRangeKeysRange));
		registerSpecialKeysImpl(SpecialKeySpace::MODULE::METRICS,
		                        SpecialKeySpace::IMPLTYPE::READONLY,
		                        std::make_unique<DDStatsRangeImpl>(ddStatsRange));
		registerSpecialKeysImpl(SpecialKeySpace::MODULE::METRICS,
		                        SpecialKeySpace::IMPLTYPE::READONLY,
		                        std::make_unique<HealthMetricsRangeImpl>(
		                            KeyRangeRef("\xff\xff/metrics/health/"_sr, "\xff\xff/metrics/health0"_sr)));
		registerSpecialKeysImpl(SpecialKeySpace::MODULE::WORKERINTERFACE,
		                        SpecialKeySpace::IMPLTYPE::READONLY,
		                        std::make_unique<WorkerInterfacesSpecialKeyImpl>(
		                            KeyRangeRef("\xff\xff/worker_interfaces/"_sr, "\xff\xff/worker_interfaces0"_sr)));
		registerSpecialKeysImpl(SpecialKeySpace::MODULE::STATUSJSON,
		                        SpecialKeySpace::IMPLTYPE::READONLY,
		                        std::make_unique<SingleSpecialKeyImpl>(
		                            "\xff\xff/status/json"_sr,
		                            [](ReadYourWritesTransaction* ryw) -> Future<Optional<Value>> {
			                            if (ryw->getDatabase().getPtr() && ryw->getDatabase()->getConnectionRecord()) {
				                            ++ryw->getDatabase()->transactionStatusRequests;
				                            return getJSON(ryw->getDatabase());
			                            } else {
				                            return Optional<Value>();
			                            }
		                            },
		                            true));
		registerSpecialKeysImpl(SpecialKeySpace::MODULE::CLUSTERFILEPATH,
		                        SpecialKeySpace::IMPLTYPE::READONLY,
		                        std::make_unique<SingleSpecialKeyImpl>(
		                            "\xff\xff/cluster_file_path"_sr,
		                            [](ReadYourWritesTransaction* ryw) -> Future<Optional<Value>> {
			                            try {
				                            if (ryw->getDatabase().getPtr() &&
				                                ryw->getDatabase()->getConnectionRecord()) {
					                            Optional<Value> output =
					                                StringRef(ryw->getDatabase()->getConnectionRecord()->getLocation());
					                            return output;
				                            }
			                            } catch (Error& e) {
				                            return e;
			                            }
			                            return Optional<Value>();
		                            },
		                            true));

		registerSpecialKeysImpl(
		    SpecialKeySpace::MODULE::CONNECTIONSTRING,
		    SpecialKeySpace::IMPLTYPE::READONLY,
		    std::make_unique<SingleSpecialKeyImpl>(
		        "\xff\xff/connection_string"_sr,
		        [](ReadYourWritesTransaction* ryw) -> Future<Optional<Value>> {
			        try {
				        if (ryw->getDatabase().getPtr() && ryw->getDatabase()->getConnectionRecord()) {
					        Reference<IClusterConnectionRecord> f = ryw->getDatabase()->getConnectionRecord();
					        Optional<Value> output = StringRef(f->getConnectionString().toString());
					        return output;
				        }
			        } catch (Error& e) {
				        return e;
			        }
			        return Optional<Value>();
		        },
		        true));
		registerSpecialKeysImpl(SpecialKeySpace::MODULE::CLUSTERID,
		                        SpecialKeySpace::IMPLTYPE::READONLY,
		                        std::make_unique<SingleSpecialKeyImpl>(
		                            "\xff\xff/cluster_id"_sr,
		                            [](ReadYourWritesTransaction* ryw) -> Future<Optional<Value>> {
			                            try {
				                            if (ryw->getDatabase().getPtr()) {
					                            return map(getClusterId(ryw->getDatabase()), [](UID id) {
						                            return Optional<Value>(StringRef(id.toString()));
					                            });
				                            }
			                            } catch (Error& e) {
				                            return e;
			                            }
			                            return Optional<Value>();
		                            },
		                            true));

		registerSpecialKeysImpl(
		    SpecialKeySpace::MODULE::MANAGEMENT,
		    SpecialKeySpace::IMPLTYPE::READWRITE,
		    std::make_unique<TenantRangeImpl>(SpecialKeySpace::getManagementApiCommandRange("tenant")));
	}
	throttleExpirer = recurring([this]() { expireThrottles(); }, CLIENT_KNOBS->TAG_THROTTLE_EXPIRATION_INTERVAL);

	if (BUGGIFY) {
		DatabaseContext::debugUseTags = true;
	}

	initializeSpecialCounters();
}

DatabaseContext::DatabaseContext(const Error& err)
  : deferredError(err), internal(IsInternal::False), cc("TransactionMetrics"),
    transactionReadVersions("ReadVersions", cc), transactionReadVersionsThrottled("ReadVersionsThrottled", cc),
    transactionReadVersionsCompleted("ReadVersionsCompleted", cc),
    transactionReadVersionBatches("ReadVersionBatches", cc),
    transactionBatchReadVersions("BatchPriorityReadVersions", cc),
    transactionDefaultReadVersions("DefaultPriorityReadVersions", cc),
    transactionImmediateReadVersions("ImmediatePriorityReadVersions", cc),
    transactionBatchReadVersionsCompleted("BatchPriorityReadVersionsCompleted", cc),
    transactionDefaultReadVersionsCompleted("DefaultPriorityReadVersionsCompleted", cc),
    transactionImmediateReadVersionsCompleted("ImmediatePriorityReadVersionsCompleted", cc),
    transactionLogicalReads("LogicalUncachedReads", cc), transactionPhysicalReads("PhysicalReadRequests", cc),
    transactionPhysicalReadsCompleted("PhysicalReadRequestsCompleted", cc),
    transactionGetKeyRequests("GetKeyRequests", cc), transactionGetValueRequests("GetValueRequests", cc),
    transactionGetRangeRequests("GetRangeRequests", cc),
    transactionGetMappedRangeRequests("GetMappedRangeRequests", cc),
    transactionGetRangeStreamRequests("GetRangeStreamRequests", cc), transactionWatchRequests("WatchRequests", cc),
    transactionGetAddressesForKeyRequests("GetAddressesForKeyRequests", cc), transactionBytesRead("BytesRead", cc),
    transactionKeysRead("KeysRead", cc), transactionMetadataVersionReads("MetadataVersionReads", cc),
    transactionCommittedMutations("CommittedMutations", cc),
    transactionCommittedMutationBytes("CommittedMutationBytes", cc), transactionSetMutations("SetMutations", cc),
    transactionClearMutations("ClearMutations", cc), transactionAtomicMutations("AtomicMutations", cc),
    transactionsCommitStarted("CommitStarted", cc), transactionsCommitCompleted("CommitCompleted", cc),
    transactionKeyServerLocationRequests("KeyServerLocationRequests", cc),
    transactionKeyServerLocationRequestsCompleted("KeyServerLocationRequestsCompleted", cc),
    transactionBlobGranuleLocationRequests("BlobGranuleLocationRequests", cc),
    transactionBlobGranuleLocationRequestsCompleted("BlobGranuleLocationRequestsCompleted", cc),
    transactionStatusRequests("StatusRequests", cc), transactionTenantLookupRequests("TenantLookupRequests", cc),
    transactionTenantLookupRequestsCompleted("TenantLookupRequestsCompleted", cc), transactionsTooOld("TooOld", cc),
    transactionsFutureVersions("FutureVersions", cc), transactionsNotCommitted("NotCommitted", cc),
    transactionsMaybeCommitted("MaybeCommitted", cc), transactionsResourceConstrained("ResourceConstrained", cc),
    transactionsProcessBehind("ProcessBehind", cc), transactionsThrottled("Throttled", cc),
    transactionsExpensiveClearCostEstCount("ExpensiveClearCostEstCount", cc),
    transactionGrvFullBatches("NumGrvFullBatches", cc), transactionGrvTimedOutBatches("NumGrvTimedOutBatches", cc),
    transactionCommitVersionNotFoundForSS("CommitVersionNotFoundForSS", cc), anyBGReads(false),
    ccBG("BlobGranuleReadMetrics"), bgReadInputBytes("BGReadInputBytes", ccBG),
    bgReadOutputBytes("BGReadOutputBytes", ccBG), bgReadSnapshotRows("BGReadSnapshotRows", ccBG),
    bgReadRowsCleared("BGReadRowsCleared", ccBG), bgReadRowsInserted("BGReadRowsInserted", ccBG),
    bgReadRowsUpdated("BGReadRowsUpdated", ccBG), bgLatencies(), bgGranulesPerRequest(), usedAnyChangeFeeds(false),
    ccFeed("ChangeFeedClientMetrics"), feedStreamStarts("FeedStreamStarts", ccFeed),
    feedMergeStreamStarts("FeedMergeStreamStarts", ccFeed), feedErrors("FeedErrors", ccFeed),
    feedNonRetriableErrors("FeedNonRetriableErrors", ccFeed), feedPops("FeedPops", ccFeed),
    feedPopsFallback("FeedPopsFallback", ccFeed), latencies(), readLatencies(), commitLatencies(), GRVLatencies(),
    mutationsPerCommit(), bytesPerCommit(), sharedStatePtr(nullptr), transactionTracingSample(false),
    smoothMidShardSize(CLIENT_KNOBS->SHARD_STAT_SMOOTH_AMOUNT),
    connectToDatabaseEventCacheHolder(format("ConnectToDatabase/%s", dbId.toString().c_str())), outstandingWatches(0) {
	initializeSpecialCounters();
}

// Static constructor used by server processes to create a DatabaseContext
// For internal (fdbserver) use only
Database DatabaseContext::create(Reference<AsyncVar<ClientDBInfo>> clientInfo,
                                 Future<Void> clientInfoMonitor,
                                 LocalityData clientLocality,
                                 EnableLocalityLoadBalance enableLocalityLoadBalance,
                                 TaskPriority taskID,
                                 LockAware lockAware,
                                 int apiVersion,
                                 IsSwitchable switchable) {
	return Database(new DatabaseContext(Reference<AsyncVar<Reference<IClusterConnectionRecord>>>(),
	                                    clientInfo,
	                                    makeReference<AsyncVar<Optional<ClientLeaderRegInterface>>>(),
	                                    clientInfoMonitor,
	                                    taskID,
	                                    clientLocality,
	                                    enableLocalityLoadBalance,
	                                    lockAware,
	                                    IsInternal::True,
	                                    apiVersion,
	                                    switchable));
}

DatabaseContext::~DatabaseContext() {
	cacheListMonitor.cancel();
	clientDBInfoMonitor.cancel();
	monitorTssInfoChange.cancel();
	tssMismatchHandler.cancel();
	if (grvUpdateHandler.isValid()) {
		grvUpdateHandler.cancel();
	}
	if (sharedStatePtr) {
		sharedStatePtr->delRef(sharedStatePtr);
	}
	for (auto it = server_interf.begin(); it != server_interf.end(); it = server_interf.erase(it))
		it->second->notifyContextDestroyed();
	ASSERT_ABORT(server_interf.empty());
	locationCache.insert(allKeys, Reference<LocationInfo>());
	for (auto& it : notAtLatestChangeFeeds) {
		it.second->context = nullptr;
	}
	for (auto& it : changeFeedUpdaters) {
		it.second->context = nullptr;
	}

	TraceEvent("DatabaseContextDestructed", dbId).backtrace();
}

Optional<KeyRangeLocationInfo> DatabaseContext::getCachedLocation(const TenantInfo& tenant,
                                                                  const KeyRef& key,
                                                                  Reverse isBackward) {
	Arena arena;
	KeyRef resolvedKey = key;

	if (tenant.hasTenant()) {
		resolvedKey = resolvedKey.withPrefix(tenant.prefix.get(), arena);
	}

	auto range =
	    isBackward ? locationCache.rangeContainingKeyBefore(resolvedKey) : locationCache.rangeContaining(resolvedKey);
	if (range->value()) {
		return KeyRangeLocationInfo(toPrefixRelativeRange(range->range(), tenant.prefix), range->value());
	}

	return Optional<KeyRangeLocationInfo>();
}

bool DatabaseContext::getCachedLocations(const TenantInfo& tenant,
                                         const KeyRangeRef& range,
                                         std::vector<KeyRangeLocationInfo>& result,
                                         int limit,
                                         Reverse reverse) {
	result.clear();

	Arena arena;
	KeyRangeRef resolvedRange = range;

	if (tenant.hasTenant()) {
		resolvedRange = resolvedRange.withPrefix(tenant.prefix.get(), arena);
	}

	auto begin = locationCache.rangeContaining(resolvedRange.begin);
	auto end = locationCache.rangeContainingKeyBefore(resolvedRange.end);

	loop {
		auto r = reverse ? end : begin;
		if (!r->value()) {
			CODE_PROBE(result.size(), "had some but not all cached locations");
			result.clear();
			return false;
		}
		result.emplace_back(toPrefixRelativeRange(r->range() & resolvedRange, tenant.prefix), r->value());
		if (result.size() == limit || begin == end) {
			break;
		}

		if (reverse)
			--end;
		else
			++begin;
	}

	return true;
}

Reference<LocationInfo> DatabaseContext::setCachedLocation(const KeyRangeRef& absoluteKeys,
                                                           const std::vector<StorageServerInterface>& servers) {
	std::vector<Reference<ReferencedInterface<StorageServerInterface>>> serverRefs;
	serverRefs.reserve(servers.size());
	for (const auto& interf : servers) {
		serverRefs.push_back(StorageServerInfo::getInterface(this, interf, clientLocality));
	}

	int maxEvictionAttempts = 100, attempts = 0;
	auto loc = makeReference<LocationInfo>(serverRefs);
	while (locationCache.size() > locationCacheSize && attempts < maxEvictionAttempts) {
		CODE_PROBE(true, "NativeAPI storage server locationCache entry evicted");
		attempts++;
		auto r = locationCache.randomRange();
		Key begin = r.begin(), end = r.end(); // insert invalidates r, so can't be passed a mere reference into it
		locationCache.insert(KeyRangeRef(begin, end), Reference<LocationInfo>());
	}
	locationCache.insert(absoluteKeys, loc);
	return loc;
}

void DatabaseContext::invalidateCache(const Optional<KeyRef>& tenantPrefix, const KeyRef& key, Reverse isBackward) {
	Arena arena;
	KeyRef resolvedKey = key;
	if (tenantPrefix.present() && !tenantPrefix.get().empty()) {
		resolvedKey = resolvedKey.withPrefix(tenantPrefix.get(), arena);
	}

	if (isBackward) {
		locationCache.rangeContainingKeyBefore(resolvedKey)->value() = Reference<LocationInfo>();
	} else {
		locationCache.rangeContaining(resolvedKey)->value() = Reference<LocationInfo>();
	}
}

void DatabaseContext::invalidateCache(const Optional<KeyRef>& tenantPrefix, const KeyRangeRef& keys) {
	Arena arena;
	KeyRangeRef resolvedKeys = keys;
	if (tenantPrefix.present() && !tenantPrefix.get().empty()) {
		resolvedKeys = resolvedKeys.withPrefix(tenantPrefix.get(), arena);
	}

	auto rs = locationCache.intersectingRanges(resolvedKeys);
	Key begin = rs.begin().begin(),
	    end = rs.end().begin(); // insert invalidates rs, so can't be passed a mere reference into it
	locationCache.insert(KeyRangeRef(begin, end), Reference<LocationInfo>());
}

void DatabaseContext::setFailedEndpointOnHealthyServer(const Endpoint& endpoint) {
	if (failedEndpointsOnHealthyServersInfo.find(endpoint) == failedEndpointsOnHealthyServersInfo.end()) {
		failedEndpointsOnHealthyServersInfo[endpoint] =
		    EndpointFailureInfo{ .startTime = now(), .lastRefreshTime = now() };
	}
}

void DatabaseContext::updateFailedEndpointRefreshTime(const Endpoint& endpoint) {
	if (failedEndpointsOnHealthyServersInfo.find(endpoint) == failedEndpointsOnHealthyServersInfo.end()) {
		// The endpoint is not failed. Nothing to update.
		return;
	}
	failedEndpointsOnHealthyServersInfo[endpoint].lastRefreshTime = now();
}

Optional<EndpointFailureInfo> DatabaseContext::getEndpointFailureInfo(const Endpoint& endpoint) {
	if (failedEndpointsOnHealthyServersInfo.find(endpoint) == failedEndpointsOnHealthyServersInfo.end()) {
		return Optional<EndpointFailureInfo>();
	}
	return failedEndpointsOnHealthyServersInfo[endpoint];
}

void DatabaseContext::clearFailedEndpointOnHealthyServer(const Endpoint& endpoint) {
	failedEndpointsOnHealthyServersInfo.erase(endpoint);
}

Future<Void> DatabaseContext::onProxiesChanged() {
	backoffDelay = 0.0;
	return this->proxiesChangeTrigger.onTrigger();
}

bool DatabaseContext::sampleReadTags() const {
	double sampleRate = globalConfig->get(transactionTagSampleRate, CLIENT_KNOBS->READ_TAG_SAMPLE_RATE);
	return sampleRate > 0 && deterministicRandom()->random01() <= sampleRate;
}

bool DatabaseContext::sampleOnCost(uint64_t cost) const {
	double sampleCost = globalConfig->get<double>(transactionTagSampleCost, CLIENT_KNOBS->COMMIT_SAMPLE_COST);
	if (sampleCost <= 0)
		return false;
	return deterministicRandom()->random01() <= (double)cost / sampleCost;
}

int64_t extractIntOption(Optional<StringRef> value, int64_t minValue, int64_t maxValue) {
	validateOptionValuePresent(value);
	if (value.get().size() != 8) {
		throw invalid_option_value();
	}

	int64_t passed = *((int64_t*)(value.get().begin()));
	if (passed > maxValue || passed < minValue) {
		throw invalid_option_value();
	}

	return passed;
}

uint64_t extractHexOption(StringRef value) {
	char* end;
	uint64_t id = strtoull(value.toString().c_str(), &end, 16);
	if (*end)
		throw invalid_option_value();
	return id;
}

void DatabaseContext::setOption(FDBDatabaseOptions::Option option, Optional<StringRef> value) {
	int defaultFor = FDBDatabaseOptions::optionInfo.getMustExist(option).defaultFor;
	if (defaultFor >= 0) {
		ASSERT(FDBTransactionOptions::optionInfo.find((FDBTransactionOptions::Option)defaultFor) !=
		       FDBTransactionOptions::optionInfo.end());
		transactionDefaults.addOption((FDBTransactionOptions::Option)defaultFor, value.castTo<Standalone<StringRef>>());
	} else {
		switch (option) {
		case FDBDatabaseOptions::LOCATION_CACHE_SIZE:
			locationCacheSize = (int)extractIntOption(value, 0, std::numeric_limits<int>::max());
			break;
		case FDBDatabaseOptions::MACHINE_ID:
			clientLocality =
			    LocalityData(clientLocality.processId(),
			                 value.present() ? Standalone<StringRef>(value.get()) : Optional<Standalone<StringRef>>(),
			                 clientLocality.machineId(),
			                 clientLocality.dcId());
			if (clientInfo->get().commitProxies.size())
				commitProxies = makeReference<CommitProxyInfo>(clientInfo->get().commitProxies);
			if (clientInfo->get().grvProxies.size())
				grvProxies = makeReference<GrvProxyInfo>(clientInfo->get().grvProxies, BalanceOnRequests::True);
			server_interf.clear();
			locationCache.insert(allKeys, Reference<LocationInfo>());
			break;
		case FDBDatabaseOptions::MAX_WATCHES:
			maxOutstandingWatches = (int)extractIntOption(value, 0, CLIENT_KNOBS->ABSOLUTE_MAX_WATCHES);
			break;
		case FDBDatabaseOptions::DATACENTER_ID:
			clientLocality =
			    LocalityData(clientLocality.processId(),
			                 clientLocality.zoneId(),
			                 clientLocality.machineId(),
			                 value.present() ? Standalone<StringRef>(value.get()) : Optional<Standalone<StringRef>>());
			if (clientInfo->get().commitProxies.size())
				commitProxies = makeReference<CommitProxyInfo>(clientInfo->get().commitProxies);
			if (clientInfo->get().grvProxies.size())
				grvProxies = makeReference<GrvProxyInfo>(clientInfo->get().grvProxies, BalanceOnRequests::True);
			server_interf.clear();
			locationCache.insert(allKeys, Reference<LocationInfo>());
			break;
		case FDBDatabaseOptions::SNAPSHOT_RYW_ENABLE:
			validateOptionValueNotPresent(value);
			snapshotRywEnabled++;
			break;
		case FDBDatabaseOptions::SNAPSHOT_RYW_DISABLE:
			validateOptionValueNotPresent(value);
			snapshotRywEnabled--;
			break;
		case FDBDatabaseOptions::USE_CONFIG_DATABASE:
			validateOptionValueNotPresent(value);
			useConfigDatabase = true;
			break;
		case FDBDatabaseOptions::TEST_CAUSAL_READ_RISKY:
			verifyCausalReadsProp = double(extractIntOption(value, 0, 100)) / 100.0;
			break;
		default:
			break;
		}
	}
}

void DatabaseContext::increaseWatchCounter() {
	if (outstandingWatches >= maxOutstandingWatches)
		throw too_many_watches();

	++outstandingWatches;
}

void DatabaseContext::decreaseWatchCounter() {
	--outstandingWatches;
	ASSERT(outstandingWatches >= 0);
}

Future<Void> DatabaseContext::onConnected() const {
	return connected;
}

															#line 9029 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via switchConnectionRecordImpl()
															#line 2172 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class SwitchConnectionRecordImplActor>
															#line 2172 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class SwitchConnectionRecordImplActorState {
															#line 9036 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 2172 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	SwitchConnectionRecordImplActorState(Reference<IClusterConnectionRecord> const& connRecord,DatabaseContext* const& self) 
															#line 2172 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 2172 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : connRecord(connRecord),
															#line 2172 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   self(self)
															#line 9045 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("switchConnectionRecordImpl", reinterpret_cast<unsigned long>(this));

	}
	~SwitchConnectionRecordImplActorState() 
	{
		fdb_probe_actor_destroy("switchConnectionRecordImpl", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 2174 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			CODE_PROBE(true, "Switch connection file");
															#line 2175 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent("SwitchConnectionRecord") .detail("ClusterFile", connRecord->toString()) .detail("ConnectionString", connRecord->getConnectionString().toString());
															#line 2180 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			self->commitProxies.clear();
															#line 2181 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			self->grvProxies.clear();
															#line 2182 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			self->minAcceptableReadVersion = std::numeric_limits<Version>::max();
															#line 2183 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			self->invalidateCache({}, allKeys);
															#line 2185 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			self->ssVersionVectorCache.clear();
															#line 2187 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			auto clearedClientInfo = self->clientInfo->get();
															#line 2188 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			clearedClientInfo.commitProxies.clear();
															#line 2189 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			clearedClientInfo.grvProxies.clear();
															#line 2190 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			clearedClientInfo.id = deterministicRandom()->randomUniqueID();
															#line 2191 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			self->clientInfo->set(clearedClientInfo);
															#line 2192 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			self->connectionRecord->set(connRecord);
															#line 2194 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			db = Database(Reference<DatabaseContext>::addRef(self));
															#line 2195 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tr = Transaction(db);
															#line 2196 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			;
															#line 9090 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~SwitchConnectionRecordImplActorState();
		static_cast<SwitchConnectionRecordImplActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
															#line 2197 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		tr.setOption(FDBTransactionOptions::READ_LOCK_AWARE);
															#line 9120 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		try {
															#line 2199 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent("SwitchConnectionRecordAttemptingGRV").log();
															#line 2200 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Version> __when_expr_0 = tr.getReadVersion();
															#line 2200 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<SwitchConnectionRecordImplActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 9128 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1loopBody1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
			static_cast<SwitchConnectionRecordImplActor*>(this)->actor_wait_state = 1;
															#line 2200 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< SwitchConnectionRecordImplActor, 0, Version >*>(static_cast<SwitchConnectionRecordImplActor*>(this)));
															#line 9133 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 2208 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent("SwitchConnectionRecordError").detail("Error", e.what());
															#line 2209 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_1 = tr.onError(e);
															#line 2209 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<SwitchConnectionRecordImplActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 9159 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1Catch1when1(__when_expr_1.get(), loopDepth); };
			static_cast<SwitchConnectionRecordImplActor*>(this)->actor_wait_state = 2;
															#line 2209 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< SwitchConnectionRecordImplActor, 1, Void >*>(static_cast<SwitchConnectionRecordImplActor*>(this)));
															#line 9164 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(Version const& v,int loopDepth) 
	{
															#line 2201 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		TraceEvent("SwitchConnectionRecordGotRV") .detail("ReadVersion", v) .detail("MinAcceptableReadVersion", self->minAcceptableReadVersion);
															#line 2204 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(self->minAcceptableReadVersion != std::numeric_limits<Version>::max());
															#line 2205 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		self->connectionFileChangedTrigger.trigger();
															#line 2206 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<SwitchConnectionRecordImplActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~SwitchConnectionRecordImplActorState(); static_cast<SwitchConnectionRecordImplActor*>(this)->destroy(); return 0; }
															#line 9185 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<SwitchConnectionRecordImplActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~SwitchConnectionRecordImplActorState();
		static_cast<SwitchConnectionRecordImplActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2(Version && v,int loopDepth) 
	{
															#line 2201 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		TraceEvent("SwitchConnectionRecordGotRV") .detail("ReadVersion", v) .detail("MinAcceptableReadVersion", self->minAcceptableReadVersion);
															#line 2204 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(self->minAcceptableReadVersion != std::numeric_limits<Version>::max());
															#line 2205 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		self->connectionFileChangedTrigger.trigger();
															#line 2206 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<SwitchConnectionRecordImplActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~SwitchConnectionRecordImplActorState(); static_cast<SwitchConnectionRecordImplActor*>(this)->destroy(); return 0; }
															#line 9203 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<SwitchConnectionRecordImplActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~SwitchConnectionRecordImplActorState();
		static_cast<SwitchConnectionRecordImplActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1when1(Version const& v,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(v, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Version && v,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(std::move(v), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<SwitchConnectionRecordImplActor*>(this)->actor_wait_state > 0) static_cast<SwitchConnectionRecordImplActor*>(this)->actor_wait_state = 0;
		static_cast<SwitchConnectionRecordImplActor*>(this)->ActorCallback< SwitchConnectionRecordImplActor, 0, Version >::remove();

	}
	void a_callback_fire(ActorCallback< SwitchConnectionRecordImplActor, 0, Version >*,Version const& value) 
	{
		fdb_probe_actor_enter("switchConnectionRecordImpl", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("switchConnectionRecordImpl", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< SwitchConnectionRecordImplActor, 0, Version >*,Version && value) 
	{
		fdb_probe_actor_enter("switchConnectionRecordImpl", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("switchConnectionRecordImpl", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< SwitchConnectionRecordImplActor, 0, Version >*,Error err) 
	{
		fdb_probe_actor_enter("switchConnectionRecordImpl", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("switchConnectionRecordImpl", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<SwitchConnectionRecordImplActor*>(this)->actor_wait_state > 0) static_cast<SwitchConnectionRecordImplActor*>(this)->actor_wait_state = 0;
		static_cast<SwitchConnectionRecordImplActor*>(this)->ActorCallback< SwitchConnectionRecordImplActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< SwitchConnectionRecordImplActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("switchConnectionRecordImpl", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("switchConnectionRecordImpl", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< SwitchConnectionRecordImplActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("switchConnectionRecordImpl", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("switchConnectionRecordImpl", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< SwitchConnectionRecordImplActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("switchConnectionRecordImpl", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("switchConnectionRecordImpl", reinterpret_cast<unsigned long>(this), 1);

	}
															#line 2172 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<IClusterConnectionRecord> connRecord;
															#line 2172 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	DatabaseContext* self;
															#line 2194 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Database db;
															#line 2195 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Transaction tr;
															#line 9357 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via switchConnectionRecordImpl()
															#line 2172 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class SwitchConnectionRecordImplActor final : public Actor<Void>, public ActorCallback< SwitchConnectionRecordImplActor, 0, Version >, public ActorCallback< SwitchConnectionRecordImplActor, 1, Void >, public FastAllocated<SwitchConnectionRecordImplActor>, public SwitchConnectionRecordImplActorState<SwitchConnectionRecordImplActor> {
															#line 9362 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<SwitchConnectionRecordImplActor>::operator new;
	using FastAllocated<SwitchConnectionRecordImplActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< SwitchConnectionRecordImplActor, 0, Version >;
friend struct ActorCallback< SwitchConnectionRecordImplActor, 1, Void >;
															#line 2172 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	SwitchConnectionRecordImplActor(Reference<IClusterConnectionRecord> const& connRecord,DatabaseContext* const& self) 
															#line 9374 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Void>(),
		   SwitchConnectionRecordImplActorState<SwitchConnectionRecordImplActor>(connRecord, self)
	{
		fdb_probe_actor_enter("switchConnectionRecordImpl", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("switchConnectionRecordImpl");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("switchConnectionRecordImpl", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< SwitchConnectionRecordImplActor, 0, Version >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< SwitchConnectionRecordImplActor, 1, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 2172 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] static Future<Void> switchConnectionRecordImpl( Reference<IClusterConnectionRecord> const& connRecord, DatabaseContext* const& self ) {
															#line 2172 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Void>(new SwitchConnectionRecordImplActor(connRecord, self));
															#line 9403 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 2213 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

Reference<IClusterConnectionRecord> DatabaseContext::getConnectionRecord() {
	if (connectionRecord) {
		return connectionRecord->get();
	}
	return Reference<IClusterConnectionRecord>();
}

Future<Void> DatabaseContext::switchConnectionRecord(Reference<IClusterConnectionRecord> standby) {
	ASSERT(switchable);
	return switchConnectionRecordImpl(standby, this);
}

Future<Void> DatabaseContext::connectionFileChanged() {
	return connectionFileChangedTrigger.onTrigger();
}

void DatabaseContext::expireThrottles() {
	for (auto& priorityItr : throttledTags) {
		for (auto tagItr = priorityItr.second.begin(); tagItr != priorityItr.second.end();) {
			if (tagItr->second.expired()) {
				CODE_PROBE(true, "Expiring client throttle");
				tagItr = priorityItr.second.erase(tagItr);
			} else {
				++tagItr;
			}
		}
	}
}

// Initialize tracing for FDB client
//
// connRecord is necessary for determining the local IP, which is then included in the trace
// file name, and also used to annotate all trace events.
//
// If trace_initialize_on_setup is not set, tracing is initialized when opening a database.
// In that case we can immediatelly determine the IP. Thus, we can use the IP in the
// trace file name and annotate all events with it.
//
// If trace_initialize_on_setup network option is set, tracing is at first initialized without
// connRecord and thus without the local IP. In that case we cannot use the local IP in the
// trace file names. The IP is then provided by a repeated call to initializeClientTracing
// when opening a database. All tracing events from this point are annotated with the local IP
//
// If tracing initialization is completed, further calls to initializeClientTracing are ignored
void initializeClientTracing(Reference<IClusterConnectionRecord> connRecord, Optional<int> apiVersion) {
	if (!networkOptions.traceDirectory.present()) {
		return;
	}

	bool initialized = traceFileIsOpen();
	if (initialized && (isTraceLocalAddressSet() || !connRecord)) {
		// Tracing initialization is completed
		return;
	}

	// Network must be created before initializing tracing
	ASSERT(g_network);

	Optional<NetworkAddress> localAddress;
	if (connRecord) {
		auto publicIP = connRecord->getConnectionString().determineLocalSourceIP();
		localAddress = NetworkAddress(publicIP, ::getpid());
	}
	platform::ImageInfo imageInfo = platform::getImageInfo();

	if (initialized) {
		// Tracing already initialized, just need to update the IP address
		setTraceLocalAddress(localAddress.get());
		TraceEvent("ClientStart")
		    .detail("SourceVersion", getSourceVersion())
		    .detail("Version", FDB_VT_VERSION)
		    .detail("PackageName", FDB_VT_PACKAGE_NAME)
		    .detailf("ActualTime", "%lld", DEBUG_DETERMINISM ? 0 : time(nullptr))
		    .detail("ApiVersion", apiVersion)
		    .detail("ClientLibrary", imageInfo.fileName)
		    .detailf("ImageOffset", "%p", imageInfo.offset)
		    .detail("Primary", networkOptions.primaryClient)
		    .trackLatest("ClientStart");
	} else {
		// Initialize tracing
		selectTraceFormatter(networkOptions.traceFormat);
		selectTraceClockSource(networkOptions.traceClockSource);
		addUniversalTraceField("ClientDescription",
		                       format("%s-%s-%" PRIu64,
		                              networkOptions.primaryClient ? "primary" : "external",
		                              FDB_VT_VERSION,
		                              deterministicRandom()->randomUInt64()));

		std::string identifier = networkOptions.traceFileIdentifier;
		openTraceFile(localAddress,
		              networkOptions.traceRollSize,
		              networkOptions.traceMaxLogsSize,
		              networkOptions.traceDirectory.get(),
		              "trace",
		              networkOptions.traceLogGroup,
		              identifier,
		              networkOptions.tracePartialFileSuffix,
		              InitializeTraceMetrics::True);

		TraceEvent("ClientStart")
		    .detail("SourceVersion", getSourceVersion())
		    .detail("Version", FDB_VT_VERSION)
		    .detail("PackageName", FDB_VT_PACKAGE_NAME)
		    .detailf("ActualTime", "%lld", DEBUG_DETERMINISM ? 0 : time(nullptr))
		    .detail("ApiVersion", apiVersion)
		    .detail("ClientLibrary", imageInfo.fileName)
		    .detailf("ImageOffset", "%p", imageInfo.offset)
		    .detail("Primary", networkOptions.primaryClient)
		    .trackLatest("ClientStart");

		g_network->initMetrics();
		FlowTransport::transport().initMetrics();
	}

	// Initialize system monitoring once the local IP is available
	if (localAddress.present()) {
		initializeSystemMonitorMachineState(SystemMonitorMachineState(IPAddress(localAddress.get().ip)));
		systemMonitor();
		uncancellable(recurring(&systemMonitor, CLIENT_KNOBS->SYSTEM_MONITOR_INTERVAL, TaskPriority::FlushTrace));
	}
}

// Creates a database object that represents a connection to a cluster
// This constructor uses a preallocated DatabaseContext that may have been created
// on another thread
Database Database::createDatabase(Reference<IClusterConnectionRecord> connRecord,
                                  int apiVersion,
                                  IsInternal internal,
                                  LocalityData const& clientLocality,
                                  DatabaseContext* preallocatedDb) {
	if (!g_network)
		throw network_not_setup();

	ASSERT(TraceEvent::isNetworkThread());

	initializeClientTracing(connRecord, apiVersion);

	g_network->initTLS();

	auto clientInfo = makeReference<AsyncVar<ClientDBInfo>>();
	auto coordinator = makeReference<AsyncVar<Optional<ClientLeaderRegInterface>>>();
	auto connectionRecord = makeReference<AsyncVar<Reference<IClusterConnectionRecord>>>();
	connectionRecord->set(connRecord);
	Future<Void> clientInfoMonitor = monitorProxies(connectionRecord,
	                                                clientInfo,
	                                                coordinator,
	                                                networkOptions.supportedVersions,
	                                                StringRef(networkOptions.traceLogGroup),
	                                                internal);

	DatabaseContext* db;
	if (preallocatedDb) {
		db = new (preallocatedDb) DatabaseContext(connectionRecord,
		                                          clientInfo,
		                                          coordinator,
		                                          clientInfoMonitor,
		                                          TaskPriority::DefaultEndpoint,
		                                          clientLocality,
		                                          EnableLocalityLoadBalance::True,
		                                          LockAware::False,
		                                          internal,
		                                          apiVersion,
		                                          IsSwitchable::True);
	} else {
		db = new DatabaseContext(connectionRecord,
		                         clientInfo,
		                         coordinator,
		                         clientInfoMonitor,
		                         TaskPriority::DefaultEndpoint,
		                         clientLocality,
		                         EnableLocalityLoadBalance::True,
		                         LockAware::False,
		                         internal,
		                         apiVersion,
		                         IsSwitchable::True);
	}

	auto database = Database(db);
	database->globalConfig->init(Reference<AsyncVar<ClientDBInfo> const>(clientInfo),
	                             std::addressof(clientInfo->get()));
	database->globalConfig->trigger(samplingFrequency, samplingProfilerUpdateFrequency);
	database->globalConfig->trigger(samplingWindow, samplingProfilerUpdateWindow);

	TraceEvent("ConnectToDatabase", database->dbId)
	    .detail("Version", FDB_VT_VERSION)
	    .detail("ClusterFile", connRecord ? connRecord->toString() : "None")
	    .detail("ConnectionString", connRecord ? connRecord->getConnectionString().toString() : "None")
	    .detail("ClientLibrary", platform::getImageInfo().fileName)
	    .detail("Primary", networkOptions.primaryClient)
	    .detail("Internal", internal)
	    .trackLatest(database->connectToDatabaseEventCacheHolder.trackingKey);

	return database;
}

Database Database::createDatabase(std::string connFileName,
                                  int apiVersion,
                                  IsInternal internal,
                                  LocalityData const& clientLocality) {
	Reference<IClusterConnectionRecord> rccr = ClusterConnectionFile::openOrDefault(connFileName);
	return Database::createDatabase(rccr, apiVersion, internal, clientLocality);
}

Database Database::createSimulatedExtraDatabase(std::string connectionString, Optional<TenantName> defaultTenant) {
	auto extraFile = makeReference<ClusterConnectionMemoryRecord>(ClusterConnectionString(connectionString));
	Database db = Database::createDatabase(extraFile, ApiVersion::LATEST_VERSION);
	db->defaultTenant = defaultTenant;
	return db;
}

const UniqueOrderedOptionList<FDBTransactionOptions>& Database::getTransactionDefaults() const {
	ASSERT(db);
	return db->transactionDefaults;
}

void setNetworkOption(FDBNetworkOptions::Option option, Optional<StringRef> value) {
	std::regex identifierRegex("^[a-zA-Z0-9_]*$");
	switch (option) {
	// SOMEDAY: If the network is already started, should these five throw an error?
	case FDBNetworkOptions::TRACE_ENABLE:
		networkOptions.traceDirectory = value.present() ? value.get().toString() : "";
		break;
	case FDBNetworkOptions::TRACE_ROLL_SIZE:
		validateOptionValuePresent(value);
		networkOptions.traceRollSize = extractIntOption(value, 0, std::numeric_limits<int64_t>::max());
		break;
	case FDBNetworkOptions::TRACE_MAX_LOGS_SIZE:
		validateOptionValuePresent(value);
		networkOptions.traceMaxLogsSize = extractIntOption(value, 0, std::numeric_limits<int64_t>::max());
		break;
	case FDBNetworkOptions::TRACE_FORMAT:
		validateOptionValuePresent(value);
		networkOptions.traceFormat = value.get().toString();
		if (!validateTraceFormat(networkOptions.traceFormat)) {
			fprintf(stderr, "Unrecognized trace format: `%s'\n", networkOptions.traceFormat.c_str());
			throw invalid_option_value();
		}
		break;
	case FDBNetworkOptions::TRACE_FILE_IDENTIFIER:
		validateOptionValuePresent(value);
		networkOptions.traceFileIdentifier = value.get().toString();
		if (networkOptions.traceFileIdentifier.length() > CLIENT_KNOBS->TRACE_LOG_FILE_IDENTIFIER_MAX_LENGTH) {
			fprintf(stderr, "Trace file identifier provided is too long.\n");
			throw invalid_option_value();
		} else if (!std::regex_match(networkOptions.traceFileIdentifier, identifierRegex)) {
			fprintf(stderr, "Trace file identifier should only contain alphanumerics and underscores.\n");
			throw invalid_option_value();
		}
		break;

	case FDBNetworkOptions::TRACE_LOG_GROUP:
		if (value.present()) {
			if (traceFileIsOpen()) {
				setTraceLogGroup(value.get().toString());
			} else {
				networkOptions.traceLogGroup = value.get().toString();
			}
		}
		break;
	case FDBNetworkOptions::TRACE_CLOCK_SOURCE:
		validateOptionValuePresent(value);
		networkOptions.traceClockSource = value.get().toString();
		if (!validateTraceClockSource(networkOptions.traceClockSource)) {
			fprintf(stderr, "Unrecognized trace clock source: `%s'\n", networkOptions.traceClockSource.c_str());
			throw invalid_option_value();
		}
		break;
	case FDBNetworkOptions::TRACE_PARTIAL_FILE_SUFFIX:
		validateOptionValuePresent(value);
		networkOptions.tracePartialFileSuffix = value.get().toString();
		break;
	case FDBNetworkOptions::TRACE_INITIALIZE_ON_SETUP:
		networkOptions.traceInitializeOnSetup = true;
		break;
	case FDBNetworkOptions::KNOB: {
		validateOptionValuePresent(value);

		std::string optionValue = value.get().toString();
		TraceEvent("SetKnob").detail("KnobString", optionValue);

		size_t eq = optionValue.find_first_of('=');
		if (eq == optionValue.npos) {
			TraceEvent(SevWarnAlways, "InvalidKnobString").detail("KnobString", optionValue);
			throw invalid_option_value();
		}

		std::string knobName = optionValue.substr(0, eq);
		std::string knobValueString = optionValue.substr(eq + 1);

		try {
			auto knobValue = IKnobCollection::parseKnobValue(knobName, knobValueString, IKnobCollection::Type::CLIENT);
			if (g_network) {
				IKnobCollection::getMutableGlobalKnobCollection().setKnob(knobName, knobValue);
			} else {
				networkOptions.knobs[knobName] = knobValue;
			}
		} catch (Error& e) {
			TraceEvent(SevWarnAlways, "UnrecognizedKnob").detail("Knob", knobName.c_str());
			fprintf(stderr, "FoundationDB client ignoring unrecognized knob option '%s'\n", knobName.c_str());
		}
		break;
	}
	case FDBNetworkOptions::TLS_PLUGIN:
		validateOptionValuePresent(value);
		break;
	case FDBNetworkOptions::TLS_CERT_PATH:
		validateOptionValuePresent(value);
		tlsConfig.setCertificatePath(value.get().toString());
		break;
	case FDBNetworkOptions::TLS_CERT_BYTES: {
		validateOptionValuePresent(value);
		tlsConfig.setCertificateBytes(value.get().toString());
		break;
	}
	case FDBNetworkOptions::TLS_CA_PATH: {
		validateOptionValuePresent(value);
		tlsConfig.setCAPath(value.get().toString());
		break;
	}
	case FDBNetworkOptions::TLS_CA_BYTES: {
		validateOptionValuePresent(value);
		tlsConfig.setCABytes(value.get().toString());
		break;
	}
	case FDBNetworkOptions::TLS_PASSWORD:
		validateOptionValuePresent(value);
		tlsConfig.setPassword(value.get().toString());
		break;
	case FDBNetworkOptions::TLS_KEY_PATH:
		validateOptionValuePresent(value);
		tlsConfig.setKeyPath(value.get().toString());
		break;
	case FDBNetworkOptions::TLS_KEY_BYTES: {
		validateOptionValuePresent(value);
		tlsConfig.setKeyBytes(value.get().toString());
		break;
	}
	case FDBNetworkOptions::TLS_VERIFY_PEERS:
		validateOptionValuePresent(value);
		tlsConfig.clearVerifyPeers();
		tlsConfig.addVerifyPeers(value.get().toString());
		break;
	case FDBNetworkOptions::CLIENT_BUGGIFY_ENABLE:
		enableBuggify(true, BuggifyType::Client);
		break;
	case FDBNetworkOptions::CLIENT_BUGGIFY_DISABLE:
		enableBuggify(false, BuggifyType::Client);
		break;
	case FDBNetworkOptions::CLIENT_BUGGIFY_SECTION_ACTIVATED_PROBABILITY:
		validateOptionValuePresent(value);
		clearBuggifySections(BuggifyType::Client);
		P_BUGGIFIED_SECTION_ACTIVATED[int(BuggifyType::Client)] = double(extractIntOption(value, 0, 100)) / 100.0;
		break;
	case FDBNetworkOptions::CLIENT_BUGGIFY_SECTION_FIRED_PROBABILITY:
		validateOptionValuePresent(value);
		P_BUGGIFIED_SECTION_FIRES[int(BuggifyType::Client)] = double(extractIntOption(value, 0, 100)) / 100.0;
		break;
	case FDBNetworkOptions::DISABLE_CLIENT_STATISTICS_LOGGING:
		validateOptionValueNotPresent(value);
		networkOptions.logClientInfo = false;
		break;
	case FDBNetworkOptions::SUPPORTED_CLIENT_VERSIONS: {
		// The multi-version API should be providing us these guarantees
		ASSERT(g_network);
		ASSERT(value.present());

		Standalone<VectorRef<ClientVersionRef>> supportedVersions;
		std::vector<StringRef> supportedVersionsStrings = value.get().splitAny(";"_sr);
		for (StringRef versionString : supportedVersionsStrings) {
#ifdef ADDRESS_SANITIZER
			__lsan_disable();
#endif
			// LSAN reports that we leak this allocation in client
			// tests, but I cannot seem to figure out why. AFAICT
			// it's not actually leaking. If it is a leak, it's only a few bytes.
			supportedVersions.push_back_deep(supportedVersions.arena(), ClientVersionRef(versionString));
#ifdef ADDRESS_SANITIZER
			__lsan_enable();
#endif
		}

		ASSERT(supportedVersions.size() > 0);
		networkOptions.supportedVersions->set(supportedVersions);

		break;
	}
	case FDBNetworkOptions::ENABLE_RUN_LOOP_PROFILING: // Same as ENABLE_SLOW_TASK_PROFILING
		validateOptionValueNotPresent(value);
		networkOptions.runLoopProfilingEnabled = true;
		break;
	case FDBNetworkOptions::DISTRIBUTED_CLIENT_TRACER: {
		validateOptionValuePresent(value);
		std::string tracer = value.get().toString();
		if (tracer == "none" || tracer == "disabled") {
			openTracer(TracerType::DISABLED);
		} else if (tracer == "logfile" || tracer == "file" || tracer == "log_file") {
			openTracer(TracerType::LOG_FILE);
		} else if (tracer == "network_lossy") {
			openTracer(TracerType::NETWORK_LOSSY);
		} else {
			fprintf(stderr, "ERROR: Unknown or unsupported tracer: `%s'", tracer.c_str());
			throw invalid_option_value();
		}
		break;
	}
	case FDBNetworkOptions::EXTERNAL_CLIENT:
		networkOptions.primaryClient = false;
		break;
	default:
		break;
	}
}

// update the network busyness on a 1s cadence
															#line 9822 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via monitorNetworkBusyness()
															#line 2628 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class MonitorNetworkBusynessActor>
															#line 2628 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class MonitorNetworkBusynessActorState {
															#line 9829 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 2628 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	MonitorNetworkBusynessActorState() 
															#line 2628 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 2629 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : prevTime(now())
															#line 9836 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("monitorNetworkBusyness", reinterpret_cast<unsigned long>(this));

	}
	~MonitorNetworkBusynessActorState() 
	{
		fdb_probe_actor_destroy("monitorNetworkBusyness", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 2630 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			;
															#line 9851 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~MonitorNetworkBusynessActorState();
		static_cast<MonitorNetworkBusynessActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
															#line 2631 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_0 = delay(CLIENT_KNOBS->NETWORK_BUSYNESS_MONITOR_INTERVAL, TaskPriority::FlushTrace);
															#line 2631 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<MonitorNetworkBusynessActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 9883 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
		static_cast<MonitorNetworkBusynessActor*>(this)->actor_wait_state = 1;
															#line 2631 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< MonitorNetworkBusynessActor, 0, Void >*>(static_cast<MonitorNetworkBusynessActor*>(this)));
															#line 9888 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont1(Void const& _,int loopDepth) 
	{
															#line 2632 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		double elapsed = now() - prevTime;
															#line 2633 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		prevTime = now();
															#line 2634 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		struct NetworkMetrics::PriorityStats& tracker = g_network->networkInfo.metrics.starvationTrackerNetworkBusyness;
															#line 2636 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (tracker.active)
															#line 9903 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 2637 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tracker.duration += now() - tracker.windowedTimer;
															#line 2638 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tracker.maxDuration = std::max(tracker.maxDuration, now() - tracker.timer);
															#line 2639 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tracker.windowedTimer = now();
															#line 9911 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 2642 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		double busyFraction = std::min(elapsed, tracker.duration) / elapsed;
															#line 2650 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		double burstiness = 0;
															#line 2651 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (CLIENT_KNOBS->BUSYNESS_SPIKE_START_THRESHOLD >= 0 && CLIENT_KNOBS->BUSYNESS_SPIKE_SATURATED_THRESHOLD >= CLIENT_KNOBS->BUSYNESS_SPIKE_START_THRESHOLD)
															#line 9919 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 2653 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			burstiness = std::min(1.0, std::max(0.0, tracker.maxDuration - CLIENT_KNOBS->BUSYNESS_SPIKE_START_THRESHOLD) / std::max(1e-6, CLIENT_KNOBS->BUSYNESS_SPIKE_SATURATED_THRESHOLD - CLIENT_KNOBS->BUSYNESS_SPIKE_START_THRESHOLD));
															#line 9923 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 2660 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		g_network->networkInfo.metrics.networkBusyness = std::max(busyFraction, burstiness);
															#line 2662 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		tracker.duration = 0;
															#line 2663 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		tracker.maxDuration = 0;
															#line 9931 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1cont1(Void && _,int loopDepth) 
	{
															#line 2632 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		double elapsed = now() - prevTime;
															#line 2633 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		prevTime = now();
															#line 2634 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		struct NetworkMetrics::PriorityStats& tracker = g_network->networkInfo.metrics.starvationTrackerNetworkBusyness;
															#line 2636 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (tracker.active)
															#line 9946 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 2637 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tracker.duration += now() - tracker.windowedTimer;
															#line 2638 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tracker.maxDuration = std::max(tracker.maxDuration, now() - tracker.timer);
															#line 2639 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tracker.windowedTimer = now();
															#line 9954 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 2642 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		double busyFraction = std::min(elapsed, tracker.duration) / elapsed;
															#line 2650 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		double burstiness = 0;
															#line 2651 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (CLIENT_KNOBS->BUSYNESS_SPIKE_START_THRESHOLD >= 0 && CLIENT_KNOBS->BUSYNESS_SPIKE_SATURATED_THRESHOLD >= CLIENT_KNOBS->BUSYNESS_SPIKE_START_THRESHOLD)
															#line 9962 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 2653 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			burstiness = std::min(1.0, std::max(0.0, tracker.maxDuration - CLIENT_KNOBS->BUSYNESS_SPIKE_START_THRESHOLD) / std::max(1e-6, CLIENT_KNOBS->BUSYNESS_SPIKE_SATURATED_THRESHOLD - CLIENT_KNOBS->BUSYNESS_SPIKE_START_THRESHOLD));
															#line 9966 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 2660 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		g_network->networkInfo.metrics.networkBusyness = std::max(busyFraction, burstiness);
															#line 2662 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		tracker.duration = 0;
															#line 2663 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		tracker.maxDuration = 0;
															#line 9974 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<MonitorNetworkBusynessActor*>(this)->actor_wait_state > 0) static_cast<MonitorNetworkBusynessActor*>(this)->actor_wait_state = 0;
		static_cast<MonitorNetworkBusynessActor*>(this)->ActorCallback< MonitorNetworkBusynessActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< MonitorNetworkBusynessActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("monitorNetworkBusyness", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("monitorNetworkBusyness", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< MonitorNetworkBusynessActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("monitorNetworkBusyness", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("monitorNetworkBusyness", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< MonitorNetworkBusynessActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("monitorNetworkBusyness", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("monitorNetworkBusyness", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 2629 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	double prevTime;
															#line 10044 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via monitorNetworkBusyness()
															#line 2628 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class MonitorNetworkBusynessActor final : public Actor<Void>, public ActorCallback< MonitorNetworkBusynessActor, 0, Void >, public FastAllocated<MonitorNetworkBusynessActor>, public MonitorNetworkBusynessActorState<MonitorNetworkBusynessActor> {
															#line 10049 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<MonitorNetworkBusynessActor>::operator new;
	using FastAllocated<MonitorNetworkBusynessActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< MonitorNetworkBusynessActor, 0, Void >;
															#line 2628 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	MonitorNetworkBusynessActor() 
															#line 10060 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Void>(),
		   MonitorNetworkBusynessActorState<MonitorNetworkBusynessActor>()
	{
		fdb_probe_actor_enter("monitorNetworkBusyness", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("monitorNetworkBusyness");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("monitorNetworkBusyness", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< MonitorNetworkBusynessActor, 0, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 2628 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<Void> monitorNetworkBusyness(  ) {
															#line 2628 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Void>(new MonitorNetworkBusynessActor());
															#line 10088 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 2666 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

static void setupGlobalKnobs() {
	IKnobCollection::setGlobalKnobCollection(IKnobCollection::Type::CLIENT, Randomize::False, IsSimulated::False);
	for (const auto& [knobName, knobValue] : networkOptions.knobs) {
		IKnobCollection::getMutableGlobalKnobCollection().setKnob(knobName, knobValue);
	}
}

// Setup g_network and start monitoring for network busyness
void setupNetwork(uint64_t transportId, UseMetrics useMetrics) {
	if (g_network)
		throw network_already_setup();

	if (!networkOptions.logClientInfo.present())
		networkOptions.logClientInfo = true;

	setupGlobalKnobs();
	g_network = newNet2(tlsConfig, false, useMetrics || networkOptions.traceDirectory.present());
	g_network->addStopCallback(Net2FileSystem::stop);
	FlowTransport::createInstance(true, transportId, WLTOKEN_RESERVED_COUNT);
	Net2FileSystem::newFileSystem();

	if (networkOptions.traceInitializeOnSetup) {
		::initializeClientTracing({}, {});
	}

	uncancellable(monitorNetworkBusyness());
}

void runNetwork() {
	if (!g_network) {
		throw network_not_setup();
	}

	if (!g_network->checkRunnable()) {
		throw network_cannot_be_restarted();
	}

	if (networkOptions.traceDirectory.present() && networkOptions.runLoopProfilingEnabled) {
		setupRunLoopProfiler();
	}

	g_network->run();

	if (networkOptions.traceDirectory.present())
		systemMonitor();
}

void stopNetwork() {
	if (!g_network)
		throw network_not_setup();

	TraceEvent("ClientStopNetwork").log();

	if (networkOptions.traceDirectory.present() && networkOptions.runLoopProfilingEnabled) {
		stopRunLoopProfiler();
	}

	g_network->stop();
}

void DatabaseContext::updateProxies() {
	if (proxiesLastChange == clientInfo->get().id)
		return;
	proxiesLastChange = clientInfo->get().id;
	commitProxies.clear();
	grvProxies.clear();
	ssVersionVectorCache.clear();
	bool commitProxyProvisional = false, grvProxyProvisional = false;
	if (clientInfo->get().commitProxies.size()) {
		commitProxies = makeReference<CommitProxyInfo>(clientInfo->get().commitProxies);
		commitProxyProvisional = clientInfo->get().commitProxies[0].provisional;
	}
	if (clientInfo->get().grvProxies.size()) {
		grvProxies = makeReference<GrvProxyInfo>(clientInfo->get().grvProxies, BalanceOnRequests::True);
		grvProxyProvisional = clientInfo->get().grvProxies[0].provisional;
	}
	if (clientInfo->get().commitProxies.size() && clientInfo->get().grvProxies.size()) {
		ASSERT(commitProxyProvisional == grvProxyProvisional);
		proxyProvisional = commitProxyProvisional;
	}
}

Reference<CommitProxyInfo> DatabaseContext::getCommitProxies(UseProvisionalProxies useProvisionalProxies) {
	updateProxies();
	if (proxyProvisional && !useProvisionalProxies) {
		return Reference<CommitProxyInfo>();
	}
	return commitProxies;
}

Reference<GrvProxyInfo> DatabaseContext::getGrvProxies(UseProvisionalProxies useProvisionalProxies) {
	updateProxies();
	if (proxyProvisional && !useProvisionalProxies) {
		return Reference<GrvProxyInfo>();
	}
	return grvProxies;
}

bool DatabaseContext::isCurrentGrvProxy(UID proxyId) const {
	for (const auto& proxy : clientInfo->get().grvProxies) {
		if (proxy.id() == proxyId)
			return true;
	}
	CODE_PROBE(true, "stale GRV proxy detected", probe::decoration::rare);
	return false;
}

// Actor which will wait until the MultiInterface<CommitProxyInterface> returned by the DatabaseContext cx is not
// nullptr
															#line 10202 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via getCommitProxiesFuture()
															#line 2776 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class GetCommitProxiesFutureActor>
															#line 2776 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetCommitProxiesFutureActorState {
															#line 10209 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 2776 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetCommitProxiesFutureActorState(DatabaseContext* const& cx,UseProvisionalProxies const& useProvisionalProxies) 
															#line 2776 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 2776 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : cx(cx),
															#line 2776 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   useProvisionalProxies(useProvisionalProxies)
															#line 10218 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("getCommitProxiesFuture", reinterpret_cast<unsigned long>(this));

	}
	~GetCommitProxiesFutureActorState() 
	{
		fdb_probe_actor_destroy("getCommitProxiesFuture", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 2778 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			;
															#line 10233 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~GetCommitProxiesFutureActorState();
		static_cast<GetCommitProxiesFutureActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
															#line 2779 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		Reference<CommitProxyInfo> commitProxies = cx->getCommitProxies(useProvisionalProxies);
															#line 2780 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (commitProxies)
															#line 10265 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 2781 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<GetCommitProxiesFutureActor*>(this)->SAV<Reference<CommitProxyInfo>>::futures) { (void)(commitProxies); this->~GetCommitProxiesFutureActorState(); static_cast<GetCommitProxiesFutureActor*>(this)->destroy(); return 0; }
															#line 10269 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<GetCommitProxiesFutureActor*>(this)->SAV< Reference<CommitProxyInfo> >::value()) Reference<CommitProxyInfo>(commitProxies);
			this->~GetCommitProxiesFutureActorState();
			static_cast<GetCommitProxiesFutureActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 2782 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_0 = cx->onProxiesChanged();
															#line 2782 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<GetCommitProxiesFutureActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 10279 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
		static_cast<GetCommitProxiesFutureActor*>(this)->actor_wait_state = 1;
															#line 2782 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< GetCommitProxiesFutureActor, 0, Void >*>(static_cast<GetCommitProxiesFutureActor*>(this)));
															#line 10284 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont1(Void const& _,int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1cont1(Void && _,int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<GetCommitProxiesFutureActor*>(this)->actor_wait_state > 0) static_cast<GetCommitProxiesFutureActor*>(this)->actor_wait_state = 0;
		static_cast<GetCommitProxiesFutureActor*>(this)->ActorCallback< GetCommitProxiesFutureActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetCommitProxiesFutureActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getCommitProxiesFuture", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getCommitProxiesFuture", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< GetCommitProxiesFutureActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getCommitProxiesFuture", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getCommitProxiesFuture", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< GetCommitProxiesFutureActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getCommitProxiesFuture", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getCommitProxiesFuture", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 2776 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	DatabaseContext* cx;
															#line 2776 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	UseProvisionalProxies useProvisionalProxies;
															#line 10368 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via getCommitProxiesFuture()
															#line 2776 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetCommitProxiesFutureActor final : public Actor<Reference<CommitProxyInfo>>, public ActorCallback< GetCommitProxiesFutureActor, 0, Void >, public FastAllocated<GetCommitProxiesFutureActor>, public GetCommitProxiesFutureActorState<GetCommitProxiesFutureActor> {
															#line 10373 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<GetCommitProxiesFutureActor>::operator new;
	using FastAllocated<GetCommitProxiesFutureActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Reference<CommitProxyInfo>>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< GetCommitProxiesFutureActor, 0, Void >;
															#line 2776 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetCommitProxiesFutureActor(DatabaseContext* const& cx,UseProvisionalProxies const& useProvisionalProxies) 
															#line 10384 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Reference<CommitProxyInfo>>(),
		   GetCommitProxiesFutureActorState<GetCommitProxiesFutureActor>(cx, useProvisionalProxies)
	{
		fdb_probe_actor_enter("getCommitProxiesFuture", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("getCommitProxiesFuture");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("getCommitProxiesFuture", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< GetCommitProxiesFutureActor, 0, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 2776 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<Reference<CommitProxyInfo>> getCommitProxiesFuture( DatabaseContext* const& cx, UseProvisionalProxies const& useProvisionalProxies ) {
															#line 2776 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Reference<CommitProxyInfo>>(new GetCommitProxiesFutureActor(cx, useProvisionalProxies));
															#line 10412 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 2785 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

// Returns a future which will not be set until the CommitProxyInfo of this DatabaseContext is not nullptr
Future<Reference<CommitProxyInfo>> DatabaseContext::getCommitProxiesFuture(
    UseProvisionalProxies useProvisionalProxies) {
	return ::getCommitProxiesFuture(this, useProvisionalProxies);
}

void GetRangeLimits::decrement(VectorRef<KeyValueRef> const& data) {
	if (rows != GetRangeLimits::ROW_LIMIT_UNLIMITED) {
		ASSERT(data.size() <= rows);
		rows -= data.size();
	}

	minRows = std::max(0, minRows - data.size());

	if (bytes != GetRangeLimits::BYTE_LIMIT_UNLIMITED)
		bytes = std::max(0, bytes - (int)data.expectedSize() - (8 - (int)sizeof(KeyValueRef)) * data.size());
}

void GetRangeLimits::decrement(KeyValueRef const& data) {
	minRows = std::max(0, minRows - 1);
	if (rows != GetRangeLimits::ROW_LIMIT_UNLIMITED)
		rows--;
	if (bytes != GetRangeLimits::BYTE_LIMIT_UNLIMITED)
		bytes = std::max(0, bytes - (int)8 - (int)data.expectedSize());
}

void GetRangeLimits::decrement(VectorRef<MappedKeyValueRef> const& data) {
	if (rows != GetRangeLimits::ROW_LIMIT_UNLIMITED) {
		ASSERT(data.size() <= rows);
		rows -= data.size();
	}

	minRows = std::max(0, minRows - data.size());

	// TODO: For now, expectedSize only considers the size of the original key values, but not the underlying queries or
	// results. Also, double check it is correct when dealing with sizeof(MappedKeyValueRef).
	if (bytes != GetRangeLimits::BYTE_LIMIT_UNLIMITED)
		bytes = std::max(0, bytes - (int)data.expectedSize() - (8 - (int)sizeof(MappedKeyValueRef)) * data.size());
}

void GetRangeLimits::decrement(MappedKeyValueRef const& data) {
	minRows = std::max(0, minRows - 1);
	if (rows != GetRangeLimits::ROW_LIMIT_UNLIMITED)
		rows--;
	// TODO: For now, expectedSize only considers the size of the original key values, but not the underlying queries or
	// results. Also, double check it is correct when dealing with sizeof(MappedKeyValueRef).
	if (bytes != GetRangeLimits::BYTE_LIMIT_UNLIMITED)
		bytes = std::max(0, bytes - (int)8 - (int)data.expectedSize());
}

// True if either the row or byte limit has been reached
bool GetRangeLimits::isReached() const {
	return rows == 0 || (bytes == 0 && minRows == 0);
}

// True if data would cause the row or byte limit to be reached
bool GetRangeLimits::reachedBy(VectorRef<KeyValueRef> const& data) const {
	return (rows != GetRangeLimits::ROW_LIMIT_UNLIMITED && data.size() >= rows) ||
	       (bytes != GetRangeLimits::BYTE_LIMIT_UNLIMITED &&
	        (int)data.expectedSize() + (8 - (int)sizeof(KeyValueRef)) * data.size() >= bytes && data.size() >= minRows);
}

bool GetRangeLimits::hasByteLimit() const {
	return bytes != GetRangeLimits::BYTE_LIMIT_UNLIMITED;
}

bool GetRangeLimits::hasRowLimit() const {
	return rows != GetRangeLimits::ROW_LIMIT_UNLIMITED;
}

bool GetRangeLimits::hasSatisfiedMinRows() const {
	return hasByteLimit() && minRows == 0;
}

AddressExclusion AddressExclusion::parse(StringRef const& key) {
	// Must not change: serialized to the database!
	auto parsedIp = IPAddress::parse(key.toString());
	if (parsedIp.present()) {
		return AddressExclusion(parsedIp.get());
	}

	// Not a whole machine, includes `port'.
	try {
		auto addr = NetworkAddress::parse(key.toString());
		if (addr.isTLS()) {
			TraceEvent(SevWarnAlways, "AddressExclusionParseError")
			    .detail("String", key)
			    .detail("Description", "Address inclusion string should not include `:tls' suffix.");
			return AddressExclusion();
		}
		return AddressExclusion(addr.ip, addr.port);
	} catch (Error&) {
		TraceEvent(SevWarnAlways, "AddressExclusionParseError").detail("String", key);
		return AddressExclusion();
	}
}

Tenant::Tenant(Database cx, TenantName name) : idFuture(cx->lookupTenant(name)), name(name) {}
Tenant::Tenant(int64_t id) : idFuture(id) {}
Tenant::Tenant(Future<int64_t> id, Optional<TenantName> name) : idFuture(id), name(name) {}

int64_t Tenant::id() const {
	ASSERT(idFuture.isReady());
	return idFuture.get();
}

Future<int64_t> Tenant::getIdFuture() const {
	return idFuture;
}

KeyRef Tenant::prefix() const {
	ASSERT(idFuture.isReady());
	if (bigEndianId == -1) {
		bigEndianId = bigEndian64(idFuture.get());
	}
	return StringRef(reinterpret_cast<const uint8_t*>(&bigEndianId), TenantAPI::PREFIX_SIZE);
}

std::string Tenant::description() const {
	StringRef nameStr = name.castTo<TenantNameRef>().orDefault("<unspecified>"_sr);
	if (idFuture.canGet()) {
		return format("%.*s (%lld)", nameStr.size(), nameStr.begin(), idFuture.get());
	} else {
		return format("%.*s", nameStr.size(), nameStr.begin());
	}
}

Future<Optional<Value>> getValue(Reference<TransactionState> const& trState,
                                 Key const& key,
                                 UseTenant const& useTenant = UseTenant::True,
                                 TransactionRecordLogInfo const& recordLogInfo = TransactionRecordLogInfo::True);

Future<RangeResult> getRange(Reference<TransactionState> const& trState,
                             KeySelector const& begin,
                             KeySelector const& end,
                             GetRangeLimits const& limits,
                             Reverse const& reverse,
                             UseTenant const& useTenant);

															#line 10556 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via fetchServerInterface()
															#line 2925 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class FetchServerInterfaceActor>
															#line 2925 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class FetchServerInterfaceActorState {
															#line 10563 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 2925 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	FetchServerInterfaceActorState(Reference<TransactionState> const& trState,UID const& id) 
															#line 2925 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 2925 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : trState(trState),
															#line 2925 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   id(id)
															#line 10572 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("fetchServerInterface", reinterpret_cast<unsigned long>(this));

	}
	~FetchServerInterfaceActorState() 
	{
		fdb_probe_actor_destroy("fetchServerInterface", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 2926 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Optional<Value>> __when_expr_0 = getValue(trState, serverListKeyFor(id), UseTenant::False, TransactionRecordLogInfo::False);
															#line 2926 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<FetchServerInterfaceActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 10589 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<FetchServerInterfaceActor*>(this)->actor_wait_state = 1;
															#line 2926 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< FetchServerInterfaceActor, 0, Optional<Value> >*>(static_cast<FetchServerInterfaceActor*>(this)));
															#line 10594 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~FetchServerInterfaceActorState();
		static_cast<FetchServerInterfaceActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Optional<Value> const& val,int loopDepth) 
	{
															#line 2929 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!val.present())
															#line 10617 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 2931 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<FetchServerInterfaceActor*>(this)->SAV<Optional<StorageServerInterface>>::futures) { (void)(Optional<StorageServerInterface>()); this->~FetchServerInterfaceActorState(); static_cast<FetchServerInterfaceActor*>(this)->destroy(); return 0; }
															#line 10621 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<FetchServerInterfaceActor*>(this)->SAV< Optional<StorageServerInterface> >::value()) Optional<StorageServerInterface>(Optional<StorageServerInterface>());
			this->~FetchServerInterfaceActorState();
			static_cast<FetchServerInterfaceActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 2934 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<FetchServerInterfaceActor*>(this)->SAV<Optional<StorageServerInterface>>::futures) { (void)(decodeServerListValue(val.get())); this->~FetchServerInterfaceActorState(); static_cast<FetchServerInterfaceActor*>(this)->destroy(); return 0; }
															#line 10629 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<FetchServerInterfaceActor*>(this)->SAV< Optional<StorageServerInterface> >::value()) Optional<StorageServerInterface>(decodeServerListValue(val.get()));
		this->~FetchServerInterfaceActorState();
		static_cast<FetchServerInterfaceActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1(Optional<Value> && val,int loopDepth) 
	{
															#line 2929 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!val.present())
															#line 10641 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 2931 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<FetchServerInterfaceActor*>(this)->SAV<Optional<StorageServerInterface>>::futures) { (void)(Optional<StorageServerInterface>()); this->~FetchServerInterfaceActorState(); static_cast<FetchServerInterfaceActor*>(this)->destroy(); return 0; }
															#line 10645 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<FetchServerInterfaceActor*>(this)->SAV< Optional<StorageServerInterface> >::value()) Optional<StorageServerInterface>(Optional<StorageServerInterface>());
			this->~FetchServerInterfaceActorState();
			static_cast<FetchServerInterfaceActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 2934 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<FetchServerInterfaceActor*>(this)->SAV<Optional<StorageServerInterface>>::futures) { (void)(decodeServerListValue(val.get())); this->~FetchServerInterfaceActorState(); static_cast<FetchServerInterfaceActor*>(this)->destroy(); return 0; }
															#line 10653 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<FetchServerInterfaceActor*>(this)->SAV< Optional<StorageServerInterface> >::value()) Optional<StorageServerInterface>(decodeServerListValue(val.get()));
		this->~FetchServerInterfaceActorState();
		static_cast<FetchServerInterfaceActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1when1(Optional<Value> const& val,int loopDepth) 
	{
		loopDepth = a_body1cont1(val, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Optional<Value> && val,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(val), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<FetchServerInterfaceActor*>(this)->actor_wait_state > 0) static_cast<FetchServerInterfaceActor*>(this)->actor_wait_state = 0;
		static_cast<FetchServerInterfaceActor*>(this)->ActorCallback< FetchServerInterfaceActor, 0, Optional<Value> >::remove();

	}
	void a_callback_fire(ActorCallback< FetchServerInterfaceActor, 0, Optional<Value> >*,Optional<Value> const& value) 
	{
		fdb_probe_actor_enter("fetchServerInterface", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("fetchServerInterface", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< FetchServerInterfaceActor, 0, Optional<Value> >*,Optional<Value> && value) 
	{
		fdb_probe_actor_enter("fetchServerInterface", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("fetchServerInterface", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< FetchServerInterfaceActor, 0, Optional<Value> >*,Error err) 
	{
		fdb_probe_actor_enter("fetchServerInterface", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("fetchServerInterface", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 2925 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<TransactionState> trState;
															#line 2925 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	UID id;
															#line 10728 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via fetchServerInterface()
															#line 2925 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class FetchServerInterfaceActor final : public Actor<Optional<StorageServerInterface>>, public ActorCallback< FetchServerInterfaceActor, 0, Optional<Value> >, public FastAllocated<FetchServerInterfaceActor>, public FetchServerInterfaceActorState<FetchServerInterfaceActor> {
															#line 10733 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<FetchServerInterfaceActor>::operator new;
	using FastAllocated<FetchServerInterfaceActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Optional<StorageServerInterface>>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< FetchServerInterfaceActor, 0, Optional<Value> >;
															#line 2925 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	FetchServerInterfaceActor(Reference<TransactionState> const& trState,UID const& id) 
															#line 10744 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Optional<StorageServerInterface>>(),
		   FetchServerInterfaceActorState<FetchServerInterfaceActor>(trState, id)
	{
		fdb_probe_actor_enter("fetchServerInterface", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("fetchServerInterface");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("fetchServerInterface", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< FetchServerInterfaceActor, 0, Optional<Value> >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 2925 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<Optional<StorageServerInterface>> fetchServerInterface( Reference<TransactionState> const& trState, UID const& id ) {
															#line 2925 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Optional<StorageServerInterface>>(new FetchServerInterfaceActor(trState, id));
															#line 10772 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 2936 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

															#line 10777 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via transactionalGetServerInterfaces()
															#line 2937 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class TransactionalGetServerInterfacesActor>
															#line 2937 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class TransactionalGetServerInterfacesActorState {
															#line 10784 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 2937 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	TransactionalGetServerInterfacesActorState(Reference<TransactionState> const& trState,std::vector<UID> const& ids) 
															#line 2937 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 2937 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : trState(trState),
															#line 2937 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   ids(ids),
															#line 2940 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   serverListEntries()
															#line 10795 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("transactionalGetServerInterfaces", reinterpret_cast<unsigned long>(this));

	}
	~TransactionalGetServerInterfacesActorState() 
	{
		fdb_probe_actor_destroy("transactionalGetServerInterfaces", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 2941 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			serverListEntries.reserve(ids.size());
															#line 2942 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			for(int s = 0;s < ids.size();s++) {
															#line 2943 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				serverListEntries.push_back(fetchServerInterface(trState, ids[s]));
															#line 10814 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 2946 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<std::vector<Optional<StorageServerInterface>>> __when_expr_0 = getAll(serverListEntries);
															#line 2946 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<TransactionalGetServerInterfacesActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 10820 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<TransactionalGetServerInterfacesActor*>(this)->actor_wait_state = 1;
															#line 2946 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< TransactionalGetServerInterfacesActor, 0, std::vector<Optional<StorageServerInterface>> >*>(static_cast<TransactionalGetServerInterfacesActor*>(this)));
															#line 10825 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~TransactionalGetServerInterfacesActorState();
		static_cast<TransactionalGetServerInterfacesActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(std::vector<Optional<StorageServerInterface>> const& serverListValues,int loopDepth) 
	{
															#line 2947 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		std::vector<StorageServerInterface> serverInterfaces;
															#line 2948 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for(int s = 0;s < serverListValues.size();s++) {
															#line 2949 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!serverListValues[s].present())
															#line 10852 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 2951 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (!static_cast<TransactionalGetServerInterfacesActor*>(this)->SAV<Optional<std::vector<StorageServerInterface>>>::futures) { (void)(Optional<std::vector<StorageServerInterface>>()); this->~TransactionalGetServerInterfacesActorState(); static_cast<TransactionalGetServerInterfacesActor*>(this)->destroy(); return 0; }
															#line 10856 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				new (&static_cast<TransactionalGetServerInterfacesActor*>(this)->SAV< Optional<std::vector<StorageServerInterface>> >::value()) Optional<std::vector<StorageServerInterface>>(Optional<std::vector<StorageServerInterface>>());
				this->~TransactionalGetServerInterfacesActorState();
				static_cast<TransactionalGetServerInterfacesActor*>(this)->finishSendAndDelPromiseRef();
				return 0;
			}
															#line 2953 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			serverInterfaces.push_back(serverListValues[s].get());
															#line 10864 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 2955 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<TransactionalGetServerInterfacesActor*>(this)->SAV<Optional<std::vector<StorageServerInterface>>>::futures) { (void)(serverInterfaces); this->~TransactionalGetServerInterfacesActorState(); static_cast<TransactionalGetServerInterfacesActor*>(this)->destroy(); return 0; }
															#line 10868 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<TransactionalGetServerInterfacesActor*>(this)->SAV< Optional<std::vector<StorageServerInterface>> >::value()) Optional<std::vector<StorageServerInterface>>(serverInterfaces);
		this->~TransactionalGetServerInterfacesActorState();
		static_cast<TransactionalGetServerInterfacesActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1(std::vector<Optional<StorageServerInterface>> && serverListValues,int loopDepth) 
	{
															#line 2947 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		std::vector<StorageServerInterface> serverInterfaces;
															#line 2948 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for(int s = 0;s < serverListValues.size();s++) {
															#line 2949 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!serverListValues[s].present())
															#line 10884 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 2951 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (!static_cast<TransactionalGetServerInterfacesActor*>(this)->SAV<Optional<std::vector<StorageServerInterface>>>::futures) { (void)(Optional<std::vector<StorageServerInterface>>()); this->~TransactionalGetServerInterfacesActorState(); static_cast<TransactionalGetServerInterfacesActor*>(this)->destroy(); return 0; }
															#line 10888 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				new (&static_cast<TransactionalGetServerInterfacesActor*>(this)->SAV< Optional<std::vector<StorageServerInterface>> >::value()) Optional<std::vector<StorageServerInterface>>(Optional<std::vector<StorageServerInterface>>());
				this->~TransactionalGetServerInterfacesActorState();
				static_cast<TransactionalGetServerInterfacesActor*>(this)->finishSendAndDelPromiseRef();
				return 0;
			}
															#line 2953 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			serverInterfaces.push_back(serverListValues[s].get());
															#line 10896 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 2955 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<TransactionalGetServerInterfacesActor*>(this)->SAV<Optional<std::vector<StorageServerInterface>>>::futures) { (void)(serverInterfaces); this->~TransactionalGetServerInterfacesActorState(); static_cast<TransactionalGetServerInterfacesActor*>(this)->destroy(); return 0; }
															#line 10900 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<TransactionalGetServerInterfacesActor*>(this)->SAV< Optional<std::vector<StorageServerInterface>> >::value()) Optional<std::vector<StorageServerInterface>>(serverInterfaces);
		this->~TransactionalGetServerInterfacesActorState();
		static_cast<TransactionalGetServerInterfacesActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1when1(std::vector<Optional<StorageServerInterface>> const& serverListValues,int loopDepth) 
	{
		loopDepth = a_body1cont1(serverListValues, loopDepth);

		return loopDepth;
	}
	int a_body1when1(std::vector<Optional<StorageServerInterface>> && serverListValues,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(serverListValues), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<TransactionalGetServerInterfacesActor*>(this)->actor_wait_state > 0) static_cast<TransactionalGetServerInterfacesActor*>(this)->actor_wait_state = 0;
		static_cast<TransactionalGetServerInterfacesActor*>(this)->ActorCallback< TransactionalGetServerInterfacesActor, 0, std::vector<Optional<StorageServerInterface>> >::remove();

	}
	void a_callback_fire(ActorCallback< TransactionalGetServerInterfacesActor, 0, std::vector<Optional<StorageServerInterface>> >*,std::vector<Optional<StorageServerInterface>> const& value) 
	{
		fdb_probe_actor_enter("transactionalGetServerInterfaces", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("transactionalGetServerInterfaces", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< TransactionalGetServerInterfacesActor, 0, std::vector<Optional<StorageServerInterface>> >*,std::vector<Optional<StorageServerInterface>> && value) 
	{
		fdb_probe_actor_enter("transactionalGetServerInterfaces", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("transactionalGetServerInterfaces", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< TransactionalGetServerInterfacesActor, 0, std::vector<Optional<StorageServerInterface>> >*,Error err) 
	{
		fdb_probe_actor_enter("transactionalGetServerInterfaces", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("transactionalGetServerInterfaces", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 2937 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<TransactionState> trState;
															#line 2937 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	std::vector<UID> ids;
															#line 2940 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	std::vector<Future<Optional<StorageServerInterface>>> serverListEntries;
															#line 10977 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via transactionalGetServerInterfaces()
															#line 2937 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class TransactionalGetServerInterfacesActor final : public Actor<Optional<std::vector<StorageServerInterface>>>, public ActorCallback< TransactionalGetServerInterfacesActor, 0, std::vector<Optional<StorageServerInterface>> >, public FastAllocated<TransactionalGetServerInterfacesActor>, public TransactionalGetServerInterfacesActorState<TransactionalGetServerInterfacesActor> {
															#line 10982 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<TransactionalGetServerInterfacesActor>::operator new;
	using FastAllocated<TransactionalGetServerInterfacesActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Optional<std::vector<StorageServerInterface>>>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< TransactionalGetServerInterfacesActor, 0, std::vector<Optional<StorageServerInterface>> >;
															#line 2937 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	TransactionalGetServerInterfacesActor(Reference<TransactionState> const& trState,std::vector<UID> const& ids) 
															#line 10993 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Optional<std::vector<StorageServerInterface>>>(),
		   TransactionalGetServerInterfacesActorState<TransactionalGetServerInterfacesActor>(trState, ids)
	{
		fdb_probe_actor_enter("transactionalGetServerInterfaces", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("transactionalGetServerInterfaces");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("transactionalGetServerInterfaces", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< TransactionalGetServerInterfacesActor, 0, std::vector<Optional<StorageServerInterface>> >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 2937 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<Optional<std::vector<StorageServerInterface>>> transactionalGetServerInterfaces( Reference<TransactionState> const& trState, std::vector<UID> const& ids ) {
															#line 2937 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Optional<std::vector<StorageServerInterface>>>(new TransactionalGetServerInterfacesActor(trState, ids));
															#line 11021 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 2957 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

void updateTssMappings(Database cx, const GetKeyServerLocationsReply& reply) {
	// Since a ss -> tss mapping is included in resultsTssMapping iff that SS is in results and has a tss pair,
	// all SS in results that do not have a mapping present must not have a tss pair.
	std::unordered_map<UID, const StorageServerInterface*> ssiById;
	for (const auto& [_, shard] : reply.results) {
		for (auto& ssi : shard) {
			ssiById[ssi.id()] = &ssi;
		}
	}

	for (const auto& mapping : reply.resultsTssMapping) {
		auto ssi = ssiById.find(mapping.first);
		ASSERT(ssi != ssiById.end());
		cx->addTssMapping(*ssi->second, mapping.second);
		ssiById.erase(mapping.first);
	}

	// if SS didn't have a mapping above, it's still in the ssiById map, so remove its tss mapping
	for (const auto& it : ssiById) {
		cx->removeTssMapping(*it.second);
	}
}

void updateTagMappings(Database cx, const GetKeyServerLocationsReply& reply) {
	for (const auto& mapping : reply.resultsTagMapping) {
		cx->addSSIdTagMapping(mapping.first, mapping.second);
	}
}

// If isBackward == true, returns the shard containing the key before 'key' (an infinitely long, inexpressible key).
// Otherwise returns the shard containing key
															#line 11057 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via getKeyLocation_internal()
															#line 2989 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class GetKeyLocation_internalActor>
															#line 2989 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetKeyLocation_internalActorState {
															#line 11064 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 2989 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetKeyLocation_internalActorState(Database const& cx,TenantInfo const& tenant,Key const& key,SpanContext const& spanContext,Optional<UID> const& debugID,UseProvisionalProxies const& useProvisionalProxies,Reverse const& isBackward,Version const& version) 
															#line 2989 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 2989 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : cx(cx),
															#line 2989 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   tenant(tenant),
															#line 2989 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   key(key),
															#line 2989 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   spanContext(spanContext),
															#line 2989 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   debugID(debugID),
															#line 2989 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   useProvisionalProxies(useProvisionalProxies),
															#line 2989 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   isBackward(isBackward),
															#line 2989 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   version(version),
															#line 2998 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   span("NAPI:getKeyLocation"_loc, spanContext)
															#line 11087 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("getKeyLocation_internal", reinterpret_cast<unsigned long>(this));

	}
	~GetKeyLocation_internalActorState() 
	{
		fdb_probe_actor_destroy("getKeyLocation_internal", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 2999 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (isBackward)
															#line 11102 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 3000 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				ASSERT(key != allKeys.begin && key <= allKeys.end);
															#line 11106 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
			else
			{
															#line 3002 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				ASSERT(key < allKeys.end);
															#line 11112 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 3005 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (debugID.present())
															#line 11116 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 3006 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				g_traceBatch.addEvent("TransactionDebug", debugID.get().first(), "NativeAPI.getKeyLocation.Before");
															#line 11120 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 3008 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			;
															#line 11124 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~GetKeyLocation_internalActorState();
		static_cast<GetKeyLocation_internalActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
		try {
															#line 3010 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_0 = cx->getBackoff();
															#line 3010 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<GetKeyLocation_internalActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 11157 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1loopBody1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
			static_cast<GetKeyLocation_internalActor*>(this)->actor_wait_state = 1;
															#line 3010 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< GetKeyLocation_internalActor, 0, Void >*>(static_cast<GetKeyLocation_internalActor*>(this)));
															#line 11162 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 3036 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (e.code() == error_code_commit_proxy_memory_limit_exceeded)
															#line 11184 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 3038 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				TraceEvent(SevWarnAlways, "CommitProxyOverloadedForKeyLocation").suppressFor(5);
															#line 3039 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				cx->updateBackoff(e);
															#line 11190 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				return a_body1loopHead1(loopDepth); // continue
			}
															#line 3043 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			return a_body1Catch1(e, std::max(0, loopDepth - 1));
															#line 11195 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(Void const& _,int loopDepth) 
	{
															#line 3011 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		++cx->transactionKeyServerLocationRequests;
															#line 3013 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_1 = cx->onProxiesChanged();
															#line 3012 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<GetKeyLocation_internalActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 11213 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
															#line 3014 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<GetKeyServerLocationsReply> __when_expr_2 = basicLoadBalance( cx->getCommitProxies(useProvisionalProxies), &CommitProxyInterface::getKeyServersLocations, GetKeyServerLocationsRequest( span.context, tenant, key, Optional<KeyRef>(), 100, isBackward, version, key.arena()), TaskPriority::DefaultPromiseEndpoint);
															#line 11217 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1loopBody1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1loopBody1cont2when2(__when_expr_2.get(), loopDepth); };
		static_cast<GetKeyLocation_internalActor*>(this)->actor_wait_state = 2;
															#line 3013 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< GetKeyLocation_internalActor, 1, Void >*>(static_cast<GetKeyLocation_internalActor*>(this)));
															#line 3014 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< GetKeyLocation_internalActor, 2, GetKeyServerLocationsReply >*>(static_cast<GetKeyLocation_internalActor*>(this)));
															#line 11224 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2(Void && _,int loopDepth) 
	{
															#line 3011 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		++cx->transactionKeyServerLocationRequests;
															#line 3013 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_1 = cx->onProxiesChanged();
															#line 3012 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<GetKeyLocation_internalActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 11237 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
															#line 3014 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<GetKeyServerLocationsReply> __when_expr_2 = basicLoadBalance( cx->getCommitProxies(useProvisionalProxies), &CommitProxyInterface::getKeyServersLocations, GetKeyServerLocationsRequest( span.context, tenant, key, Optional<KeyRef>(), 100, isBackward, version, key.arena()), TaskPriority::DefaultPromiseEndpoint);
															#line 11241 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1loopBody1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1loopBody1cont2when2(__when_expr_2.get(), loopDepth); };
		static_cast<GetKeyLocation_internalActor*>(this)->actor_wait_state = 2;
															#line 3013 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< GetKeyLocation_internalActor, 1, Void >*>(static_cast<GetKeyLocation_internalActor*>(this)));
															#line 3014 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< GetKeyLocation_internalActor, 2, GetKeyServerLocationsReply >*>(static_cast<GetKeyLocation_internalActor*>(this)));
															#line 11248 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<GetKeyLocation_internalActor*>(this)->actor_wait_state > 0) static_cast<GetKeyLocation_internalActor*>(this)->actor_wait_state = 0;
		static_cast<GetKeyLocation_internalActor*>(this)->ActorCallback< GetKeyLocation_internalActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetKeyLocation_internalActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getKeyLocation_internal", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getKeyLocation_internal", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< GetKeyLocation_internalActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getKeyLocation_internal", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getKeyLocation_internal", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< GetKeyLocation_internalActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getKeyLocation_internal", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getKeyLocation_internal", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1cont3(int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont4(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2when2(GetKeyServerLocationsReply const& rep,int loopDepth) 
	{
															#line 3020 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		++cx->transactionKeyServerLocationRequestsCompleted;
															#line 3021 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (debugID.present())
															#line 11340 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 3022 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			g_traceBatch.addEvent( "TransactionDebug", debugID.get().first(), "NativeAPI.getKeyLocation.After");
															#line 11344 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 3024 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(rep.results.size() == 1);
															#line 3026 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		auto locationInfo = cx->setCachedLocation(rep.results[0].first, rep.results[0].second);
															#line 3027 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		updateTssMappings(cx, rep);
															#line 3028 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		updateTagMappings(cx, rep);
															#line 3030 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		cx->updateBackoff(success());
															#line 3031 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<GetKeyLocation_internalActor*>(this)->SAV<KeyRangeLocationInfo>::futures) { (void)(KeyRangeLocationInfo( KeyRange(toPrefixRelativeRange(rep.results[0].first, tenant.prefix), rep.arena), locationInfo)); this->~GetKeyLocation_internalActorState(); static_cast<GetKeyLocation_internalActor*>(this)->destroy(); return 0; }
															#line 11358 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<GetKeyLocation_internalActor*>(this)->SAV< KeyRangeLocationInfo >::value()) KeyRangeLocationInfo(KeyRangeLocationInfo( KeyRange(toPrefixRelativeRange(rep.results[0].first, tenant.prefix), rep.arena), locationInfo));
		this->~GetKeyLocation_internalActorState();
		static_cast<GetKeyLocation_internalActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2when2(GetKeyServerLocationsReply && rep,int loopDepth) 
	{
															#line 3020 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		++cx->transactionKeyServerLocationRequestsCompleted;
															#line 3021 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (debugID.present())
															#line 11372 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 3022 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			g_traceBatch.addEvent( "TransactionDebug", debugID.get().first(), "NativeAPI.getKeyLocation.After");
															#line 11376 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 3024 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(rep.results.size() == 1);
															#line 3026 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		auto locationInfo = cx->setCachedLocation(rep.results[0].first, rep.results[0].second);
															#line 3027 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		updateTssMappings(cx, rep);
															#line 3028 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		updateTagMappings(cx, rep);
															#line 3030 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		cx->updateBackoff(success());
															#line 3031 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<GetKeyLocation_internalActor*>(this)->SAV<KeyRangeLocationInfo>::futures) { (void)(KeyRangeLocationInfo( KeyRange(toPrefixRelativeRange(rep.results[0].first, tenant.prefix), rep.arena), locationInfo)); this->~GetKeyLocation_internalActorState(); static_cast<GetKeyLocation_internalActor*>(this)->destroy(); return 0; }
															#line 11390 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<GetKeyLocation_internalActor*>(this)->SAV< KeyRangeLocationInfo >::value()) KeyRangeLocationInfo(KeyRangeLocationInfo( KeyRange(toPrefixRelativeRange(rep.results[0].first, tenant.prefix), rep.arena), locationInfo));
		this->~GetKeyLocation_internalActorState();
		static_cast<GetKeyLocation_internalActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<GetKeyLocation_internalActor*>(this)->actor_wait_state > 0) static_cast<GetKeyLocation_internalActor*>(this)->actor_wait_state = 0;
		static_cast<GetKeyLocation_internalActor*>(this)->ActorCallback< GetKeyLocation_internalActor, 1, Void >::remove();
		static_cast<GetKeyLocation_internalActor*>(this)->ActorCallback< GetKeyLocation_internalActor, 2, GetKeyServerLocationsReply >::remove();

	}
	void a_callback_fire(ActorCallback< GetKeyLocation_internalActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getKeyLocation_internal", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getKeyLocation_internal", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< GetKeyLocation_internalActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getKeyLocation_internal", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getKeyLocation_internal", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< GetKeyLocation_internalActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getKeyLocation_internal", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getKeyLocation_internal", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< GetKeyLocation_internalActor, 2, GetKeyServerLocationsReply >*,GetKeyServerLocationsReply const& value) 
	{
		fdb_probe_actor_enter("getKeyLocation_internal", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when2(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getKeyLocation_internal", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< GetKeyLocation_internalActor, 2, GetKeyServerLocationsReply >*,GetKeyServerLocationsReply && value) 
	{
		fdb_probe_actor_enter("getKeyLocation_internal", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when2(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getKeyLocation_internal", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< GetKeyLocation_internalActor, 2, GetKeyServerLocationsReply >*,Error err) 
	{
		fdb_probe_actor_enter("getKeyLocation_internal", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getKeyLocation_internal", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1loopBody1cont4(int loopDepth) 
	{
		try {
			loopDepth = a_body1loopBody1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
															#line 2989 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Database cx;
															#line 2989 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	TenantInfo tenant;
															#line 2989 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Key key;
															#line 2989 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	SpanContext spanContext;
															#line 2989 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Optional<UID> debugID;
															#line 2989 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	UseProvisionalProxies useProvisionalProxies;
															#line 2989 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reverse isBackward;
															#line 2989 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Version version;
															#line 2998 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Span span;
															#line 11526 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via getKeyLocation_internal()
															#line 2989 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetKeyLocation_internalActor final : public Actor<KeyRangeLocationInfo>, public ActorCallback< GetKeyLocation_internalActor, 0, Void >, public ActorCallback< GetKeyLocation_internalActor, 1, Void >, public ActorCallback< GetKeyLocation_internalActor, 2, GetKeyServerLocationsReply >, public FastAllocated<GetKeyLocation_internalActor>, public GetKeyLocation_internalActorState<GetKeyLocation_internalActor> {
															#line 11531 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<GetKeyLocation_internalActor>::operator new;
	using FastAllocated<GetKeyLocation_internalActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<KeyRangeLocationInfo>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< GetKeyLocation_internalActor, 0, Void >;
friend struct ActorCallback< GetKeyLocation_internalActor, 1, Void >;
friend struct ActorCallback< GetKeyLocation_internalActor, 2, GetKeyServerLocationsReply >;
															#line 2989 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetKeyLocation_internalActor(Database const& cx,TenantInfo const& tenant,Key const& key,SpanContext const& spanContext,Optional<UID> const& debugID,UseProvisionalProxies const& useProvisionalProxies,Reverse const& isBackward,Version const& version) 
															#line 11544 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<KeyRangeLocationInfo>(),
		   GetKeyLocation_internalActorState<GetKeyLocation_internalActor>(cx, tenant, key, spanContext, debugID, useProvisionalProxies, isBackward, version)
	{
		fdb_probe_actor_enter("getKeyLocation_internal", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("getKeyLocation_internal");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("getKeyLocation_internal", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< GetKeyLocation_internalActor, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< GetKeyLocation_internalActor, 1, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 2989 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<KeyRangeLocationInfo> getKeyLocation_internal( Database const& cx, TenantInfo const& tenant, Key const& key, SpanContext const& spanContext, Optional<UID> const& debugID, UseProvisionalProxies const& useProvisionalProxies, Reverse const& isBackward, Version const& version ) {
															#line 2989 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<KeyRangeLocationInfo>(new GetKeyLocation_internalActor(cx, tenant, key, spanContext, debugID, useProvisionalProxies, isBackward, version));
															#line 11573 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 3047 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

// Checks if `endpoint` is failed on a healthy server or not. Returns true if we need to refresh the location cache for
// the endpoint.
bool checkOnlyEndpointFailed(const Database& cx, const Endpoint& endpoint) {
	if (IFailureMonitor::failureMonitor().onlyEndpointFailed(endpoint)) {
		// This endpoint is failed, but the server is still healthy. There are two cases this can happen:
		//    - There is a recent bounce in the cluster where the endpoints in SSes get updated.
		//    - The SS is failed and terminated on a server, but the server is kept running.
		// To account for the first case, we invalidate the cache and issue GetKeyLocation requests to the proxy to
		// update the cache with the new SS points. However, if the failure is caused by the second case, the
		// requested key location will continue to be the failed endpoint until the data movement is finished. But
		// every read will generate a GetKeyLocation request to the proxies (and still getting the failed endpoint
		// back), which may overload the proxy and affect data movement speed. Therefore, we only refresh the
		// location cache for short period of time, and after the initial grace period that we keep retrying
		// resolving key location, we will slow it down to resolve it only once every
		// `LOCATION_CACHE_FAILED_ENDPOINT_RETRY_INTERVAL`.
		cx->setFailedEndpointOnHealthyServer(endpoint);
		const auto& failureInfo = cx->getEndpointFailureInfo(endpoint);
		ASSERT(failureInfo.present());
		if (now() - failureInfo.get().startTime < CLIENT_KNOBS->LOCATION_CACHE_ENDPOINT_FAILURE_GRACE_PERIOD ||
		    now() - failureInfo.get().lastRefreshTime > CLIENT_KNOBS->LOCATION_CACHE_FAILED_ENDPOINT_RETRY_INTERVAL) {
			cx->updateFailedEndpointRefreshTime(endpoint);
			return true;
		}
	} else {
		cx->clearFailedEndpointOnHealthyServer(endpoint);
	}
	return false;
}

template <class F>
Future<KeyRangeLocationInfo> getKeyLocation(Database const& cx,
                                            TenantInfo const& tenant,
                                            Key const& key,
                                            F StorageServerInterface::*member,
                                            SpanContext spanContext,
                                            Optional<UID> debugID,
                                            UseProvisionalProxies useProvisionalProxies,
                                            Reverse isBackward,
                                            Version version) {
	// we first check whether this range is cached
	Optional<KeyRangeLocationInfo> locationInfo = cx->getCachedLocation(tenant, key, isBackward);
	if (!locationInfo.present()) {
		return getKeyLocation_internal(
		    cx, tenant, key, spanContext, debugID, useProvisionalProxies, isBackward, version);
	}

	bool onlyEndpointFailedAndNeedRefresh = false;
	for (int i = 0; i < locationInfo.get().locations->size(); i++) {
		if (checkOnlyEndpointFailed(cx, locationInfo.get().locations->get(i, member).getEndpoint())) {
			onlyEndpointFailedAndNeedRefresh = true;
		}
	}

	if (onlyEndpointFailedAndNeedRefresh) {
		cx->invalidateCache(tenant.prefix, key);

		// Refresh the cache with a new getKeyLocations made to proxies.
		return getKeyLocation_internal(
		    cx, tenant, key, spanContext, debugID, useProvisionalProxies, isBackward, version);
	}

	return locationInfo.get();
}

template <class F>
Future<KeyRangeLocationInfo> getKeyLocation(Reference<TransactionState> trState,
                                            Key const& key,
                                            F StorageServerInterface::*member,
                                            Reverse isBackward,
                                            UseTenant useTenant) {
	return getKeyLocation(trState->cx,
	                      useTenant ? trState->getTenantInfo() : TenantInfo(),
	                      key,
	                      member,
	                      trState->spanContext,
	                      trState->readOptions.present() ? trState->readOptions.get().debugID : Optional<UID>(),
	                      trState->useProvisionalProxies,
	                      isBackward,
	                      trState->readVersionFuture.isValid() && trState->readVersionFuture.isReady()
	                          ? trState->readVersion()
	                          : latestVersion);
}

void DatabaseContext::updateBackoff(const Error& err) {
	switch (err.code()) {
	case error_code_success:
		backoffDelay = backoffDelay / CLIENT_KNOBS->BACKOFF_GROWTH_RATE;
		if (backoffDelay < CLIENT_KNOBS->DEFAULT_BACKOFF) {
			backoffDelay = 0.0;
		}
		break;

	case error_code_commit_proxy_memory_limit_exceeded:
		++transactionsResourceConstrained;
		if (backoffDelay == 0.0) {
			backoffDelay = CLIENT_KNOBS->DEFAULT_BACKOFF;
		} else {
			backoffDelay = std::min(backoffDelay * CLIENT_KNOBS->BACKOFF_GROWTH_RATE,
			                        CLIENT_KNOBS->RESOURCE_CONSTRAINED_MAX_BACKOFF);
		}
		break;

	default:
		ASSERT_WE_THINK(false);
	}
}

															#line 11685 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via getKeyRangeLocations_internal()
															#line 3155 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class GetKeyRangeLocations_internalActor>
															#line 3155 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetKeyRangeLocations_internalActorState {
															#line 11692 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 3155 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetKeyRangeLocations_internalActorState(Database const& cx,TenantInfo const& tenant,KeyRange const& keys,int const& limit,Reverse const& reverse,SpanContext const& spanContext,Optional<UID> const& debugID,UseProvisionalProxies const& useProvisionalProxies,Version const& version) 
															#line 3155 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 3155 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : cx(cx),
															#line 3155 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   tenant(tenant),
															#line 3155 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   keys(keys),
															#line 3155 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   limit(limit),
															#line 3155 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   reverse(reverse),
															#line 3155 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   spanContext(spanContext),
															#line 3155 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   debugID(debugID),
															#line 3155 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   useProvisionalProxies(useProvisionalProxies),
															#line 3155 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   version(version),
															#line 3165 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   span("NAPI:getKeyRangeLocations"_loc, spanContext)
															#line 11717 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("getKeyRangeLocations_internal", reinterpret_cast<unsigned long>(this));

	}
	~GetKeyRangeLocations_internalActorState() 
	{
		fdb_probe_actor_destroy("getKeyRangeLocations_internal", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 3166 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (debugID.present())
															#line 11732 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 3167 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				g_traceBatch.addEvent("TransactionDebug", debugID.get().first(), "NativeAPI.getKeyLocations.Before");
															#line 11736 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 3169 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			;
															#line 11740 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~GetKeyRangeLocations_internalActorState();
		static_cast<GetKeyRangeLocations_internalActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
		try {
															#line 3171 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_0 = cx->getBackoff();
															#line 3171 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<GetKeyRangeLocations_internalActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 11773 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1loopBody1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
			static_cast<GetKeyRangeLocations_internalActor*>(this)->actor_wait_state = 1;
															#line 3171 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< GetKeyRangeLocations_internalActor, 0, Void >*>(static_cast<GetKeyRangeLocations_internalActor*>(this)));
															#line 11778 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 3206 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (e.code() == error_code_commit_proxy_memory_limit_exceeded)
															#line 11800 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 3208 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				TraceEvent(SevWarnAlways, "CommitProxyOverloadedForRangeLocation").suppressFor(5);
															#line 3209 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				cx->updateBackoff(e);
															#line 11806 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				return a_body1loopHead1(loopDepth); // continue
			}
															#line 3213 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			return a_body1Catch1(e, std::max(0, loopDepth - 1));
															#line 11811 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(Void const& _,int loopDepth) 
	{
															#line 3172 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		++cx->transactionKeyServerLocationRequests;
															#line 3174 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_1 = cx->onProxiesChanged();
															#line 3173 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<GetKeyRangeLocations_internalActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 11829 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
															#line 3175 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<GetKeyServerLocationsReply> __when_expr_2 = basicLoadBalance( cx->getCommitProxies(useProvisionalProxies), &CommitProxyInterface::getKeyServersLocations, GetKeyServerLocationsRequest( span.context, tenant, keys.begin, keys.end, limit, reverse, version, keys.arena()), TaskPriority::DefaultPromiseEndpoint);
															#line 11833 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1loopBody1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1loopBody1cont2when2(__when_expr_2.get(), loopDepth); };
		static_cast<GetKeyRangeLocations_internalActor*>(this)->actor_wait_state = 2;
															#line 3174 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< GetKeyRangeLocations_internalActor, 1, Void >*>(static_cast<GetKeyRangeLocations_internalActor*>(this)));
															#line 3175 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< GetKeyRangeLocations_internalActor, 2, GetKeyServerLocationsReply >*>(static_cast<GetKeyRangeLocations_internalActor*>(this)));
															#line 11840 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2(Void && _,int loopDepth) 
	{
															#line 3172 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		++cx->transactionKeyServerLocationRequests;
															#line 3174 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_1 = cx->onProxiesChanged();
															#line 3173 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<GetKeyRangeLocations_internalActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 11853 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
															#line 3175 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<GetKeyServerLocationsReply> __when_expr_2 = basicLoadBalance( cx->getCommitProxies(useProvisionalProxies), &CommitProxyInterface::getKeyServersLocations, GetKeyServerLocationsRequest( span.context, tenant, keys.begin, keys.end, limit, reverse, version, keys.arena()), TaskPriority::DefaultPromiseEndpoint);
															#line 11857 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1loopBody1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1loopBody1cont2when2(__when_expr_2.get(), loopDepth); };
		static_cast<GetKeyRangeLocations_internalActor*>(this)->actor_wait_state = 2;
															#line 3174 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< GetKeyRangeLocations_internalActor, 1, Void >*>(static_cast<GetKeyRangeLocations_internalActor*>(this)));
															#line 3175 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< GetKeyRangeLocations_internalActor, 2, GetKeyServerLocationsReply >*>(static_cast<GetKeyRangeLocations_internalActor*>(this)));
															#line 11864 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<GetKeyRangeLocations_internalActor*>(this)->actor_wait_state > 0) static_cast<GetKeyRangeLocations_internalActor*>(this)->actor_wait_state = 0;
		static_cast<GetKeyRangeLocations_internalActor*>(this)->ActorCallback< GetKeyRangeLocations_internalActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetKeyRangeLocations_internalActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getKeyRangeLocations_internal", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getKeyRangeLocations_internal", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< GetKeyRangeLocations_internalActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getKeyRangeLocations_internal", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getKeyRangeLocations_internal", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< GetKeyRangeLocations_internalActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getKeyRangeLocations_internal", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getKeyRangeLocations_internal", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1cont3(int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont4(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2when2(GetKeyServerLocationsReply const& _rep,int loopDepth) 
	{
															#line 3181 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		++cx->transactionKeyServerLocationRequestsCompleted;
															#line 3182 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		rep = _rep;
															#line 3183 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (debugID.present())
															#line 11958 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 3184 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			g_traceBatch.addEvent( "TransactionDebug", debugID.get().first(), "NativeAPI.getKeyLocations.After");
															#line 11962 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 3186 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(rep.results.size());
															#line 3188 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		results = std::vector<KeyRangeLocationInfo>();
															#line 3189 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		shard = 0;
															#line 3190 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		;
															#line 11972 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont2when2loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2when2(GetKeyServerLocationsReply && _rep,int loopDepth) 
	{
															#line 3181 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		++cx->transactionKeyServerLocationRequestsCompleted;
															#line 3182 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		rep = _rep;
															#line 3183 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (debugID.present())
															#line 11985 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 3184 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			g_traceBatch.addEvent( "TransactionDebug", debugID.get().first(), "NativeAPI.getKeyLocations.After");
															#line 11989 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 3186 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(rep.results.size());
															#line 3188 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		results = std::vector<KeyRangeLocationInfo>();
															#line 3189 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		shard = 0;
															#line 3190 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		;
															#line 11999 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont2when2loopHead1(loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<GetKeyRangeLocations_internalActor*>(this)->actor_wait_state > 0) static_cast<GetKeyRangeLocations_internalActor*>(this)->actor_wait_state = 0;
		static_cast<GetKeyRangeLocations_internalActor*>(this)->ActorCallback< GetKeyRangeLocations_internalActor, 1, Void >::remove();
		static_cast<GetKeyRangeLocations_internalActor*>(this)->ActorCallback< GetKeyRangeLocations_internalActor, 2, GetKeyServerLocationsReply >::remove();

	}
	void a_callback_fire(ActorCallback< GetKeyRangeLocations_internalActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getKeyRangeLocations_internal", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getKeyRangeLocations_internal", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< GetKeyRangeLocations_internalActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getKeyRangeLocations_internal", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getKeyRangeLocations_internal", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< GetKeyRangeLocations_internalActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getKeyRangeLocations_internal", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getKeyRangeLocations_internal", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1loopBody1cont2when2cont1(int loopDepth) 
	{
															#line 3198 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		updateTssMappings(cx, rep);
															#line 3199 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		updateTagMappings(cx, rep);
															#line 3201 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		cx->updateBackoff(success());
															#line 3202 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<GetKeyRangeLocations_internalActor*>(this)->SAV<std::vector<KeyRangeLocationInfo>>::futures) { (void)(results); this->~GetKeyRangeLocations_internalActorState(); static_cast<GetKeyRangeLocations_internalActor*>(this)->destroy(); return 0; }
															#line 12066 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<GetKeyRangeLocations_internalActor*>(this)->SAV< std::vector<KeyRangeLocationInfo> >::value()) std::vector<KeyRangeLocationInfo>(std::move(results)); // state_var_RVO
		this->~GetKeyRangeLocations_internalActorState();
		static_cast<GetKeyRangeLocations_internalActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2when2loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1cont2when2loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2when2loopBody1(int loopDepth) 
	{
															#line 3190 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!(shard < rep.results.size()))
															#line 12085 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
			return a_body1loopBody1cont2when2break1(loopDepth==0?0:loopDepth-1); // break
		}
															#line 3193 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		results.emplace_back( (toPrefixRelativeRange(rep.results[shard].first, tenant.prefix) & keys), cx->setCachedLocation(rep.results[shard].first, rep.results[shard].second));
															#line 3196 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_3 = yield();
															#line 3196 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<GetKeyRangeLocations_internalActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 12095 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1loopBody1Catch1(__when_expr_3.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1cont2when2loopBody1when1(__when_expr_3.get(), loopDepth); };
		static_cast<GetKeyRangeLocations_internalActor*>(this)->actor_wait_state = 3;
															#line 3196 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< GetKeyRangeLocations_internalActor, 3, Void >*>(static_cast<GetKeyRangeLocations_internalActor*>(this)));
															#line 12100 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2when2break1(int loopDepth) 
	{
		try {
			return a_body1loopBody1cont2when2cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2when2loopBody1cont1(Void const& _,int loopDepth) 
	{
															#line 3190 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		shard++;
															#line 12122 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (loopDepth == 0) return a_body1loopBody1cont2when2loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1cont2when2loopBody1cont1(Void && _,int loopDepth) 
	{
															#line 3190 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		shard++;
															#line 12131 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (loopDepth == 0) return a_body1loopBody1cont2when2loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1cont2when2loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2when2loopBody1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2when2loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2when2loopBody1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<GetKeyRangeLocations_internalActor*>(this)->actor_wait_state > 0) static_cast<GetKeyRangeLocations_internalActor*>(this)->actor_wait_state = 0;
		static_cast<GetKeyRangeLocations_internalActor*>(this)->ActorCallback< GetKeyRangeLocations_internalActor, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetKeyRangeLocations_internalActor, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getKeyRangeLocations_internal", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose3();
		try {
			a_body1loopBody1cont2when2loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getKeyRangeLocations_internal", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< GetKeyRangeLocations_internalActor, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getKeyRangeLocations_internal", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose3();
		try {
			a_body1loopBody1cont2when2loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getKeyRangeLocations_internal", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< GetKeyRangeLocations_internalActor, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getKeyRangeLocations_internal", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose3();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getKeyRangeLocations_internal", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< GetKeyRangeLocations_internalActor, 2, GetKeyServerLocationsReply >*,GetKeyServerLocationsReply const& value) 
	{
		fdb_probe_actor_enter("getKeyRangeLocations_internal", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when2(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getKeyRangeLocations_internal", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< GetKeyRangeLocations_internalActor, 2, GetKeyServerLocationsReply >*,GetKeyServerLocationsReply && value) 
	{
		fdb_probe_actor_enter("getKeyRangeLocations_internal", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when2(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getKeyRangeLocations_internal", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< GetKeyRangeLocations_internalActor, 2, GetKeyServerLocationsReply >*,Error err) 
	{
		fdb_probe_actor_enter("getKeyRangeLocations_internal", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getKeyRangeLocations_internal", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1loopBody1cont4(int loopDepth) 
	{
		try {
			loopDepth = a_body1loopBody1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
															#line 3155 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Database cx;
															#line 3155 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	TenantInfo tenant;
															#line 3155 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeyRange keys;
															#line 3155 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	int limit;
															#line 3155 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reverse reverse;
															#line 3155 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	SpanContext spanContext;
															#line 3155 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Optional<UID> debugID;
															#line 3155 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	UseProvisionalProxies useProvisionalProxies;
															#line 3155 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Version version;
															#line 3165 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Span span;
															#line 3182 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetKeyServerLocationsReply rep;
															#line 3188 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	std::vector<KeyRangeLocationInfo> results;
															#line 3189 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	int shard;
															#line 12283 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via getKeyRangeLocations_internal()
															#line 3155 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetKeyRangeLocations_internalActor final : public Actor<std::vector<KeyRangeLocationInfo>>, public ActorCallback< GetKeyRangeLocations_internalActor, 0, Void >, public ActorCallback< GetKeyRangeLocations_internalActor, 1, Void >, public ActorCallback< GetKeyRangeLocations_internalActor, 2, GetKeyServerLocationsReply >, public ActorCallback< GetKeyRangeLocations_internalActor, 3, Void >, public FastAllocated<GetKeyRangeLocations_internalActor>, public GetKeyRangeLocations_internalActorState<GetKeyRangeLocations_internalActor> {
															#line 12288 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<GetKeyRangeLocations_internalActor>::operator new;
	using FastAllocated<GetKeyRangeLocations_internalActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<std::vector<KeyRangeLocationInfo>>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< GetKeyRangeLocations_internalActor, 0, Void >;
friend struct ActorCallback< GetKeyRangeLocations_internalActor, 1, Void >;
friend struct ActorCallback< GetKeyRangeLocations_internalActor, 2, GetKeyServerLocationsReply >;
friend struct ActorCallback< GetKeyRangeLocations_internalActor, 3, Void >;
															#line 3155 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetKeyRangeLocations_internalActor(Database const& cx,TenantInfo const& tenant,KeyRange const& keys,int const& limit,Reverse const& reverse,SpanContext const& spanContext,Optional<UID> const& debugID,UseProvisionalProxies const& useProvisionalProxies,Version const& version) 
															#line 12302 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<std::vector<KeyRangeLocationInfo>>(),
		   GetKeyRangeLocations_internalActorState<GetKeyRangeLocations_internalActor>(cx, tenant, keys, limit, reverse, spanContext, debugID, useProvisionalProxies, version)
	{
		fdb_probe_actor_enter("getKeyRangeLocations_internal", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("getKeyRangeLocations_internal");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("getKeyRangeLocations_internal", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< GetKeyRangeLocations_internalActor, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< GetKeyRangeLocations_internalActor, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< GetKeyRangeLocations_internalActor, 3, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 3155 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<std::vector<KeyRangeLocationInfo>> getKeyRangeLocations_internal( Database const& cx, TenantInfo const& tenant, KeyRange const& keys, int const& limit, Reverse const& reverse, SpanContext const& spanContext, Optional<UID> const& debugID, UseProvisionalProxies const& useProvisionalProxies, Version const& version ) {
															#line 3155 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<std::vector<KeyRangeLocationInfo>>(new GetKeyRangeLocations_internalActor(cx, tenant, keys, limit, reverse, spanContext, debugID, useProvisionalProxies, version));
															#line 12332 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 3217 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

// Get the SS locations for each shard in the 'keys' key-range;
// Returned vector size is the number of shards in the input keys key-range.
// Returned vector element is <ShardRange, storage server location info> pairs, where
// ShardRange is the whole shard key-range, not a part of the given key range.
// Example: If query the function with  key range (b, d), the returned list of pairs could be something like:
// [([a, b1), locationInfo), ([b1, c), locationInfo), ([c, d1), locationInfo)].
template <class F>
Future<std::vector<KeyRangeLocationInfo>> getKeyRangeLocations(Database const& cx,
                                                               TenantInfo const& tenant,
                                                               KeyRange const& keys,
                                                               int limit,
                                                               Reverse reverse,
                                                               F StorageServerInterface::*member,
                                                               SpanContext const& spanContext,
                                                               Optional<UID> const& debugID,
                                                               UseProvisionalProxies useProvisionalProxies,
                                                               Version version) {

	ASSERT(!keys.empty());

	std::vector<KeyRangeLocationInfo> locations;
	if (!cx->getCachedLocations(tenant, keys, locations, limit, reverse)) {
		return getKeyRangeLocations_internal(
		    cx, tenant, keys, limit, reverse, spanContext, debugID, useProvisionalProxies, version);
	}

	bool foundFailed = false;
	for (const auto& locationInfo : locations) {
		bool onlyEndpointFailedAndNeedRefresh = false;
		for (int i = 0; i < locationInfo.locations->size(); i++) {
			if (checkOnlyEndpointFailed(cx, locationInfo.locations->get(i, member).getEndpoint())) {
				onlyEndpointFailedAndNeedRefresh = true;
			}
		}

		if (onlyEndpointFailedAndNeedRefresh) {
			cx->invalidateCache(tenant.prefix, locationInfo.range.begin);
			foundFailed = true;
		}
	}

	if (foundFailed) {
		// Refresh the cache with a new getKeyRangeLocations made to proxies.
		return getKeyRangeLocations_internal(
		    cx, tenant, keys, limit, reverse, spanContext, debugID, useProvisionalProxies, version);
	}

	return locations;
}

template <class F>
Future<std::vector<KeyRangeLocationInfo>> getKeyRangeLocations(Reference<TransactionState> trState,
                                                               KeyRange const& keys,
                                                               int limit,
                                                               Reverse reverse,
                                                               F StorageServerInterface::*member,
                                                               UseTenant useTenant) {
	return getKeyRangeLocations(trState->cx,
	                            useTenant ? trState->getTenantInfo(AllowInvalidTenantID::True) : TenantInfo(),
	                            keys,
	                            limit,
	                            reverse,
	                            member,
	                            trState->spanContext,
	                            trState->readOptions.present() ? trState->readOptions.get().debugID : Optional<UID>(),
	                            trState->useProvisionalProxies,
	                            trState->readVersionFuture.isValid() && trState->readVersionFuture.isReady()
	                                ? trState->readVersion()
	                                : latestVersion);
}

															#line 12408 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via getBlobGranuleLocations_internal()
															#line 3289 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class GetBlobGranuleLocations_internalActor>
															#line 3289 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetBlobGranuleLocations_internalActorState {
															#line 12415 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 3289 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetBlobGranuleLocations_internalActorState(Database const& cx,TenantInfo const& tenant,KeyRange const& keys,int const& limit,Reverse const& reverse,JustGranules const& justGranules,SpanContext const& spanContext,Optional<UID> const& debugID,UseProvisionalProxies const& useProvisionalProxies,Version const& version,bool* const& more) 
															#line 3289 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 3289 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : cx(cx),
															#line 3289 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   tenant(tenant),
															#line 3289 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   keys(keys),
															#line 3289 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   limit(limit),
															#line 3289 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   reverse(reverse),
															#line 3289 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   justGranules(justGranules),
															#line 3289 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   spanContext(spanContext),
															#line 3289 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   debugID(debugID),
															#line 3289 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   useProvisionalProxies(useProvisionalProxies),
															#line 3289 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   version(version),
															#line 3289 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   more(more),
															#line 3301 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   span("NAPI:getBlobGranuleLocations"_loc, spanContext)
															#line 12444 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("getBlobGranuleLocations_internal", reinterpret_cast<unsigned long>(this));

	}
	~GetBlobGranuleLocations_internalActorState() 
	{
		fdb_probe_actor_destroy("getBlobGranuleLocations_internal", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 3302 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (debugID.present())
															#line 12459 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 3303 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				g_traceBatch.addEvent("TransactionDebug", debugID.get().first(), "NativeAPI.getBlobGranuleLocations.Before");
															#line 12463 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 3305 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			;
															#line 12467 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~GetBlobGranuleLocations_internalActorState();
		static_cast<GetBlobGranuleLocations_internalActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
															#line 3306 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		++cx->transactionBlobGranuleLocationRequests;
															#line 3308 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_0 = cx->onProxiesChanged();
															#line 3307 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<GetBlobGranuleLocations_internalActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 12501 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
															#line 3309 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<GetBlobGranuleLocationsReply> __when_expr_1 = basicLoadBalance(cx->getCommitProxies(useProvisionalProxies), &CommitProxyInterface::getBlobGranuleLocations, GetBlobGranuleLocationsRequest(span.context, tenant, keys.begin, keys.end, limit, reverse, justGranules, version, keys.arena()), TaskPriority::DefaultPromiseEndpoint);
															#line 12505 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1when2(__when_expr_1.get(), loopDepth); };
		static_cast<GetBlobGranuleLocations_internalActor*>(this)->actor_wait_state = 1;
															#line 3308 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< GetBlobGranuleLocations_internalActor, 0, Void >*>(static_cast<GetBlobGranuleLocations_internalActor*>(this)));
															#line 3309 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< GetBlobGranuleLocations_internalActor, 1, GetBlobGranuleLocationsReply >*>(static_cast<GetBlobGranuleLocations_internalActor*>(this)));
															#line 12512 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when2(GetBlobGranuleLocationsReply const& _rep,int loopDepth) 
	{
															#line 3322 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		++cx->transactionBlobGranuleLocationRequestsCompleted;
															#line 3323 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		rep = _rep;
															#line 3324 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (debugID.present())
															#line 12543 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 3325 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			g_traceBatch.addEvent( "TransactionDebug", debugID.get().first(), "NativeAPI.getBlobGranuleLocations.After");
															#line 12547 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 3328 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(justGranules || rep.results.size());
															#line 3329 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(!rep.more || !rep.results.empty());
															#line 3330 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		*more = rep.more;
															#line 3332 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		results = std::vector<std::pair<KeyRange, UID>>();
															#line 3333 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		granule = 0;
															#line 3334 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for( auto& bwInterf : rep.bwInterfs ) {
															#line 3335 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			cx->blobWorker_interf.insert({ bwInterf.id(), bwInterf });
															#line 12563 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 3337 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		;
															#line 12567 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1when2loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when2(GetBlobGranuleLocationsReply && _rep,int loopDepth) 
	{
															#line 3322 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		++cx->transactionBlobGranuleLocationRequestsCompleted;
															#line 3323 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		rep = _rep;
															#line 3324 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (debugID.present())
															#line 12580 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 3325 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			g_traceBatch.addEvent( "TransactionDebug", debugID.get().first(), "NativeAPI.getBlobGranuleLocations.After");
															#line 12584 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 3328 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(justGranules || rep.results.size());
															#line 3329 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(!rep.more || !rep.results.empty());
															#line 3330 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		*more = rep.more;
															#line 3332 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		results = std::vector<std::pair<KeyRange, UID>>();
															#line 3333 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		granule = 0;
															#line 3334 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for( auto& bwInterf : rep.bwInterfs ) {
															#line 3335 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			cx->blobWorker_interf.insert({ bwInterf.id(), bwInterf });
															#line 12600 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 3337 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		;
															#line 12604 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1when2loopHead1(loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<GetBlobGranuleLocations_internalActor*>(this)->actor_wait_state > 0) static_cast<GetBlobGranuleLocations_internalActor*>(this)->actor_wait_state = 0;
		static_cast<GetBlobGranuleLocations_internalActor*>(this)->ActorCallback< GetBlobGranuleLocations_internalActor, 0, Void >::remove();
		static_cast<GetBlobGranuleLocations_internalActor*>(this)->ActorCallback< GetBlobGranuleLocations_internalActor, 1, GetBlobGranuleLocationsReply >::remove();

	}
	void a_callback_fire(ActorCallback< GetBlobGranuleLocations_internalActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getBlobGranuleLocations_internal", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getBlobGranuleLocations_internal", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< GetBlobGranuleLocations_internalActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getBlobGranuleLocations_internal", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getBlobGranuleLocations_internal", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< GetBlobGranuleLocations_internalActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getBlobGranuleLocations_internal", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getBlobGranuleLocations_internal", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1when2cont1(int loopDepth) 
	{
															#line 3347 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<GetBlobGranuleLocations_internalActor*>(this)->SAV<std::vector<std::pair<KeyRange, UID>>>::futures) { (void)(results); this->~GetBlobGranuleLocations_internalActorState(); static_cast<GetBlobGranuleLocations_internalActor*>(this)->destroy(); return 0; }
															#line 12665 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<GetBlobGranuleLocations_internalActor*>(this)->SAV< std::vector<std::pair<KeyRange, UID>> >::value()) std::vector<std::pair<KeyRange, UID>>(std::move(results)); // state_var_RVO
		this->~GetBlobGranuleLocations_internalActorState();
		static_cast<GetBlobGranuleLocations_internalActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1when2loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1when2loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when2loopBody1(int loopDepth) 
	{
															#line 3337 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!(granule < rep.results.size()))
															#line 12684 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
			return a_body1loopBody1when2break1(loopDepth==0?0:loopDepth-1); // break
		}
															#line 3339 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		KeyRange range(toPrefixRelativeRange(rep.results[granule].first, tenant.prefix));
															#line 3340 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!justGranules)
															#line 12692 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 3341 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			range = range & keys;
															#line 12696 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 3343 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		results.emplace_back(range, rep.results[granule].second);
															#line 3344 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_2 = yield();
															#line 3344 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<GetBlobGranuleLocations_internalActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 2));
															#line 12704 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), std::max(0, loopDepth - 2)); else return a_body1loopBody1when2loopBody1when1(__when_expr_2.get(), loopDepth); };
		static_cast<GetBlobGranuleLocations_internalActor*>(this)->actor_wait_state = 2;
															#line 3344 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< GetBlobGranuleLocations_internalActor, 2, Void >*>(static_cast<GetBlobGranuleLocations_internalActor*>(this)));
															#line 12709 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1when2break1(int loopDepth) 
	{
		try {
			return a_body1loopBody1when2cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1when2loopBody1cont1(Void const& _,int loopDepth) 
	{
															#line 3337 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		granule++;
															#line 12731 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (loopDepth == 0) return a_body1loopBody1when2loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1when2loopBody1cont1(Void && _,int loopDepth) 
	{
															#line 3337 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		granule++;
															#line 12740 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (loopDepth == 0) return a_body1loopBody1when2loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1when2loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1when2loopBody1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when2loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1when2loopBody1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<GetBlobGranuleLocations_internalActor*>(this)->actor_wait_state > 0) static_cast<GetBlobGranuleLocations_internalActor*>(this)->actor_wait_state = 0;
		static_cast<GetBlobGranuleLocations_internalActor*>(this)->ActorCallback< GetBlobGranuleLocations_internalActor, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetBlobGranuleLocations_internalActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getBlobGranuleLocations_internal", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose2();
		try {
			a_body1loopBody1when2loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getBlobGranuleLocations_internal", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< GetBlobGranuleLocations_internalActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getBlobGranuleLocations_internal", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose2();
		try {
			a_body1loopBody1when2loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getBlobGranuleLocations_internal", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< GetBlobGranuleLocations_internalActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getBlobGranuleLocations_internal", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getBlobGranuleLocations_internal", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< GetBlobGranuleLocations_internalActor, 1, GetBlobGranuleLocationsReply >*,GetBlobGranuleLocationsReply const& value) 
	{
		fdb_probe_actor_enter("getBlobGranuleLocations_internal", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose1();
		try {
			a_body1loopBody1when2(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getBlobGranuleLocations_internal", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< GetBlobGranuleLocations_internalActor, 1, GetBlobGranuleLocationsReply >*,GetBlobGranuleLocationsReply && value) 
	{
		fdb_probe_actor_enter("getBlobGranuleLocations_internal", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose1();
		try {
			a_body1loopBody1when2(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getBlobGranuleLocations_internal", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< GetBlobGranuleLocations_internalActor, 1, GetBlobGranuleLocationsReply >*,Error err) 
	{
		fdb_probe_actor_enter("getBlobGranuleLocations_internal", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getBlobGranuleLocations_internal", reinterpret_cast<unsigned long>(this), 1);

	}
															#line 3289 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Database cx;
															#line 3289 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	TenantInfo tenant;
															#line 3289 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeyRange keys;
															#line 3289 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	int limit;
															#line 3289 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reverse reverse;
															#line 3289 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	JustGranules justGranules;
															#line 3289 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	SpanContext spanContext;
															#line 3289 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Optional<UID> debugID;
															#line 3289 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	UseProvisionalProxies useProvisionalProxies;
															#line 3289 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Version version;
															#line 3289 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	bool* more;
															#line 3301 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Span span;
															#line 3323 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetBlobGranuleLocationsReply rep;
															#line 3332 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	std::vector<std::pair<KeyRange, UID>> results;
															#line 3333 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	int granule;
															#line 12883 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via getBlobGranuleLocations_internal()
															#line 3289 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetBlobGranuleLocations_internalActor final : public Actor<std::vector<std::pair<KeyRange, UID>>>, public ActorCallback< GetBlobGranuleLocations_internalActor, 0, Void >, public ActorCallback< GetBlobGranuleLocations_internalActor, 1, GetBlobGranuleLocationsReply >, public ActorCallback< GetBlobGranuleLocations_internalActor, 2, Void >, public FastAllocated<GetBlobGranuleLocations_internalActor>, public GetBlobGranuleLocations_internalActorState<GetBlobGranuleLocations_internalActor> {
															#line 12888 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<GetBlobGranuleLocations_internalActor>::operator new;
	using FastAllocated<GetBlobGranuleLocations_internalActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<std::vector<std::pair<KeyRange, UID>>>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< GetBlobGranuleLocations_internalActor, 0, Void >;
friend struct ActorCallback< GetBlobGranuleLocations_internalActor, 1, GetBlobGranuleLocationsReply >;
friend struct ActorCallback< GetBlobGranuleLocations_internalActor, 2, Void >;
															#line 3289 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetBlobGranuleLocations_internalActor(Database const& cx,TenantInfo const& tenant,KeyRange const& keys,int const& limit,Reverse const& reverse,JustGranules const& justGranules,SpanContext const& spanContext,Optional<UID> const& debugID,UseProvisionalProxies const& useProvisionalProxies,Version const& version,bool* const& more) 
															#line 12901 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<std::vector<std::pair<KeyRange, UID>>>(),
		   GetBlobGranuleLocations_internalActorState<GetBlobGranuleLocations_internalActor>(cx, tenant, keys, limit, reverse, justGranules, spanContext, debugID, useProvisionalProxies, version, more)
	{
		fdb_probe_actor_enter("getBlobGranuleLocations_internal", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("getBlobGranuleLocations_internal");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("getBlobGranuleLocations_internal", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< GetBlobGranuleLocations_internalActor, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< GetBlobGranuleLocations_internalActor, 2, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 3289 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<std::vector<std::pair<KeyRange, UID>>> getBlobGranuleLocations_internal( Database const& cx, TenantInfo const& tenant, KeyRange const& keys, int const& limit, Reverse const& reverse, JustGranules const& justGranules, SpanContext const& spanContext, Optional<UID> const& debugID, UseProvisionalProxies const& useProvisionalProxies, Version const& version, bool* const& more ) {
															#line 3289 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<std::vector<std::pair<KeyRange, UID>>>(new GetBlobGranuleLocations_internalActor(cx, tenant, keys, limit, reverse, justGranules, spanContext, debugID, useProvisionalProxies, version, more));
															#line 12930 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 3352 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

// Get the Blob Worker locations for each granule in the 'keys' key-range, similar to getKeyRangeLocations
Future<std::vector<std::pair<KeyRange, UID>>> getBlobGranuleLocations(Database const& cx,
                                                                      TenantInfo const& tenant,
                                                                      KeyRange const& keys,
                                                                      int limit,
                                                                      Reverse reverse,
                                                                      JustGranules justGranules,
                                                                      SpanContext const& spanContext,
                                                                      Optional<UID> const& debugID,
                                                                      UseProvisionalProxies useProvisionalProxies,
                                                                      Version version,
                                                                      bool* more) {

	ASSERT(!keys.empty());

	// FIXME: wrap this with location caching for blob workers like getKeyRangeLocations has
	return getBlobGranuleLocations_internal(
	    cx, tenant, keys, limit, reverse, justGranules, spanContext, debugID, useProvisionalProxies, version, more);
}

Future<std::vector<std::pair<KeyRange, UID>>> getBlobGranuleLocations(Reference<TransactionState> trState,
                                                                      KeyRange const& keys,
                                                                      int limit,
                                                                      Reverse reverse,
                                                                      UseTenant useTenant,
                                                                      JustGranules justGranules,
                                                                      bool* more) {
	return getBlobGranuleLocations(
	    trState->cx,
	    useTenant ? trState->getTenantInfo(AllowInvalidTenantID::True) : TenantInfo(),
	    keys,
	    limit,
	    reverse,
	    justGranules,
	    trState->spanContext,
	    trState->readOptions.present() ? trState->readOptions.get().debugID : Optional<UID>(),
	    trState->useProvisionalProxies,
	    trState->readVersionFuture.isValid() && trState->readVersionFuture.isReady() ? trState->readVersion()
	                                                                                 : latestVersion,
	    more);
}

															#line 12977 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via warmRange_impl()
															#line 3395 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class WarmRange_implActor>
															#line 3395 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class WarmRange_implActorState {
															#line 12984 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 3395 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	WarmRange_implActorState(Reference<TransactionState> const& trState,KeyRange const& keys) 
															#line 3395 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 3395 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : trState(trState),
															#line 3395 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   keys(keys),
															#line 3396 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   totalRanges(0),
															#line 3397 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   totalRequests(0)
															#line 12997 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("warmRange_impl", reinterpret_cast<unsigned long>(this));

	}
	~WarmRange_implActorState() 
	{
		fdb_probe_actor_destroy("warmRange_impl", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 3399 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_0 = trState->startTransaction();
															#line 3399 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<WarmRange_implActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 13014 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<WarmRange_implActor*>(this)->actor_wait_state = 1;
															#line 3399 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< WarmRange_implActor, 0, Void >*>(static_cast<WarmRange_implActor*>(this)));
															#line 13019 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~WarmRange_implActorState();
		static_cast<WarmRange_implActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void const& _,int loopDepth) 
	{
															#line 3401 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		;
															#line 13042 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont1loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1(Void && _,int loopDepth) 
	{
															#line 3401 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		;
															#line 13051 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont1loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<WarmRange_implActor*>(this)->actor_wait_state > 0) static_cast<WarmRange_implActor*>(this)->actor_wait_state = 0;
		static_cast<WarmRange_implActor*>(this)->ActorCallback< WarmRange_implActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< WarmRange_implActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("warmRange_impl", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("warmRange_impl", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< WarmRange_implActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("warmRange_impl", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("warmRange_impl", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< WarmRange_implActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("warmRange_impl", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("warmRange_impl", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont2(int loopDepth) 
	{
															#line 3436 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<WarmRange_implActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~WarmRange_implActorState(); static_cast<WarmRange_implActor*>(this)->destroy(); return 0; }
															#line 13123 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<WarmRange_implActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~WarmRange_implActorState();
		static_cast<WarmRange_implActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1cont1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1(int loopDepth) 
	{
															#line 3402 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<std::vector<KeyRangeLocationInfo>> __when_expr_1 = getKeyRangeLocations_internal( trState->cx, trState->getTenantInfo(), keys, CLIENT_KNOBS->WARM_RANGE_SHARD_LIMIT, Reverse::False, trState->spanContext, trState->readOptions.present() ? trState->readOptions.get().debugID : Optional<UID>(), trState->useProvisionalProxies, trState->readVersion());
															#line 3402 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<WarmRange_implActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 13144 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), std::max(0, loopDepth - 1)); else return a_body1cont1loopBody1when1(__when_expr_1.get(), loopDepth); };
		static_cast<WarmRange_implActor*>(this)->actor_wait_state = 2;
															#line 3402 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< WarmRange_implActor, 1, std::vector<KeyRangeLocationInfo> >*>(static_cast<WarmRange_implActor*>(this)));
															#line 13149 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1break1(int loopDepth) 
	{
		try {
			return a_body1cont2(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1(std::vector<KeyRangeLocationInfo> const& locations,int loopDepth) 
	{
															#line 3412 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		totalRanges += CLIENT_KNOBS->WARM_RANGE_SHARD_LIMIT;
															#line 3413 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		totalRequests++;
															#line 3414 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (locations.size() == 0 || totalRanges >= trState->cx->locationCacheSize || locations[locations.size() - 1].range.end >= keys.end)
															#line 13175 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
			return a_body1cont1break1(loopDepth==0?0:loopDepth-1); // break
		}
															#line 3418 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		keys = KeyRangeRef(locations[locations.size() - 1].range.end, keys.end);
															#line 3420 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (totalRequests % 20 == 0)
															#line 13183 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 3422 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tr = Transaction(trState->cx, trState->tenant());
															#line 3423 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			;
															#line 13189 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1cont1loopBody1cont1loopHead1(loopDepth);
		}
		else
		{
			loopDepth = a_body1cont1loopBody1cont2(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1(std::vector<KeyRangeLocationInfo> && locations,int loopDepth) 
	{
															#line 3412 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		totalRanges += CLIENT_KNOBS->WARM_RANGE_SHARD_LIMIT;
															#line 3413 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		totalRequests++;
															#line 3414 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (locations.size() == 0 || totalRanges >= trState->cx->locationCacheSize || locations[locations.size() - 1].range.end >= keys.end)
															#line 13207 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
			return a_body1cont1break1(loopDepth==0?0:loopDepth-1); // break
		}
															#line 3418 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		keys = KeyRangeRef(locations[locations.size() - 1].range.end, keys.end);
															#line 3420 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (totalRequests % 20 == 0)
															#line 13215 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 3422 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tr = Transaction(trState->cx, trState->tenant());
															#line 3423 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			;
															#line 13221 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1cont1loopBody1cont1loopHead1(loopDepth);
		}
		else
		{
			loopDepth = a_body1cont1loopBody1cont2(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont1loopBody1when1(std::vector<KeyRangeLocationInfo> const& locations,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont1(locations, loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1when1(std::vector<KeyRangeLocationInfo> && locations,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont1(std::move(locations), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<WarmRange_implActor*>(this)->actor_wait_state > 0) static_cast<WarmRange_implActor*>(this)->actor_wait_state = 0;
		static_cast<WarmRange_implActor*>(this)->ActorCallback< WarmRange_implActor, 1, std::vector<KeyRangeLocationInfo> >::remove();

	}
	void a_callback_fire(ActorCallback< WarmRange_implActor, 1, std::vector<KeyRangeLocationInfo> >*,std::vector<KeyRangeLocationInfo> const& value) 
	{
		fdb_probe_actor_enter("warmRange_impl", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("warmRange_impl", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< WarmRange_implActor, 1, std::vector<KeyRangeLocationInfo> >*,std::vector<KeyRangeLocationInfo> && value) 
	{
		fdb_probe_actor_enter("warmRange_impl", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("warmRange_impl", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< WarmRange_implActor, 1, std::vector<KeyRangeLocationInfo> >*,Error err) 
	{
		fdb_probe_actor_enter("warmRange_impl", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("warmRange_impl", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont1loopBody1cont2(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1cont1loopHead1(0);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont4(int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont2(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1cont1loopBody1cont1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1loopBody1(int loopDepth) 
	{
		try {
															#line 3425 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tr.setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 3426 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tr.setOption(FDBTransactionOptions::CAUSAL_READ_RISKY);
															#line 3427 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_2 = success(tr.getReadVersion());
															#line 3427 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<WarmRange_implActor*>(this)->actor_wait_state < 0) return a_body1cont1loopBody1cont1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 13324 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1cont1loopBody1cont1loopBody1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont1loopBody1cont1loopBody1when1(__when_expr_2.get(), loopDepth); };
			static_cast<WarmRange_implActor*>(this)->actor_wait_state = 3;
															#line 3427 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< WarmRange_implActor, 2, Void >*>(static_cast<WarmRange_implActor*>(this)));
															#line 13329 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1cont1loopBody1cont1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1cont1loopBody1cont1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1break1(int loopDepth) 
	{
		try {
			return a_body1cont1loopBody1cont4(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1cont1loopBody1cont1loopHead1(0);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 3430 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_3 = tr.onError(e);
															#line 3430 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<WarmRange_implActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 2));
															#line 13366 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch1(__when_expr_3.getError(), std::max(0, loopDepth - 2)); else return a_body1cont1loopBody1cont1loopBody1Catch1when1(__when_expr_3.get(), loopDepth); };
			static_cast<WarmRange_implActor*>(this)->actor_wait_state = 4;
															#line 3430 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< WarmRange_implActor, 3, Void >*>(static_cast<WarmRange_implActor*>(this)));
															#line 13371 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 2));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 2));
		}

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1loopBody1cont2(Void const& _,int loopDepth) 
	{
		return a_body1cont1loopBody1cont1break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1loopBody1cont2(Void && _,int loopDepth) 
	{
		return a_body1cont1loopBody1cont1break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont1loopBody1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont1loopBody1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<WarmRange_implActor*>(this)->actor_wait_state > 0) static_cast<WarmRange_implActor*>(this)->actor_wait_state = 0;
		static_cast<WarmRange_implActor*>(this)->ActorCallback< WarmRange_implActor, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< WarmRange_implActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("warmRange_impl", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont1loopBody1cont1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont1loopBody1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("warmRange_impl", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< WarmRange_implActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("warmRange_impl", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont1loopBody1cont1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont1loopBody1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("warmRange_impl", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< WarmRange_implActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("warmRange_impl", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont1loopBody1cont1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont1loopBody1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("warmRange_impl", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1cont1loopBody1cont1loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont1loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont1loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<WarmRange_implActor*>(this)->actor_wait_state > 0) static_cast<WarmRange_implActor*>(this)->actor_wait_state = 0;
		static_cast<WarmRange_implActor*>(this)->ActorCallback< WarmRange_implActor, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< WarmRange_implActor, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("warmRange_impl", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont1loopBody1cont1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("warmRange_impl", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< WarmRange_implActor, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("warmRange_impl", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont1loopBody1cont1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("warmRange_impl", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< WarmRange_implActor, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("warmRange_impl", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("warmRange_impl", reinterpret_cast<unsigned long>(this), 3);

	}
															#line 3395 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<TransactionState> trState;
															#line 3395 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeyRange keys;
															#line 3396 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	int totalRanges;
															#line 3397 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	int totalRequests;
															#line 3422 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Transaction tr;
															#line 13542 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via warmRange_impl()
															#line 3395 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class WarmRange_implActor final : public Actor<Void>, public ActorCallback< WarmRange_implActor, 0, Void >, public ActorCallback< WarmRange_implActor, 1, std::vector<KeyRangeLocationInfo> >, public ActorCallback< WarmRange_implActor, 2, Void >, public ActorCallback< WarmRange_implActor, 3, Void >, public FastAllocated<WarmRange_implActor>, public WarmRange_implActorState<WarmRange_implActor> {
															#line 13547 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<WarmRange_implActor>::operator new;
	using FastAllocated<WarmRange_implActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< WarmRange_implActor, 0, Void >;
friend struct ActorCallback< WarmRange_implActor, 1, std::vector<KeyRangeLocationInfo> >;
friend struct ActorCallback< WarmRange_implActor, 2, Void >;
friend struct ActorCallback< WarmRange_implActor, 3, Void >;
															#line 3395 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	WarmRange_implActor(Reference<TransactionState> const& trState,KeyRange const& keys) 
															#line 13561 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Void>(),
		   WarmRange_implActorState<WarmRange_implActor>(trState, keys)
	{
		fdb_probe_actor_enter("warmRange_impl", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("warmRange_impl");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("warmRange_impl", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< WarmRange_implActor, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< WarmRange_implActor, 1, std::vector<KeyRangeLocationInfo> >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< WarmRange_implActor, 2, Void >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< WarmRange_implActor, 3, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 3395 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<Void> warmRange_impl( Reference<TransactionState> const& trState, KeyRange const& keys ) {
															#line 3395 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Void>(new WarmRange_implActor(trState, keys));
															#line 13592 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 3438 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

SpanContext generateSpanID(bool transactionTracingSample, SpanContext parentContext = SpanContext()) {
	if (parentContext.isValid()) {
		return SpanContext(parentContext.traceID, deterministicRandom()->randomUInt64(), parentContext.m_Flags);
	}
	if (transactionTracingSample) {
		return SpanContext(deterministicRandom()->randomUniqueID(),
		                   deterministicRandom()->randomUInt64(),
		                   deterministicRandom()->random01() <= FLOW_KNOBS->TRACING_SAMPLE_RATE
		                       ? TraceFlags::sampled
		                       : TraceFlags::unsampled);
	}
	return SpanContext(
	    deterministicRandom()->randomUniqueID(), deterministicRandom()->randomUInt64(), TraceFlags::unsampled);
}

															#line 13612 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via lookupTenantImpl()
															#line 3454 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class LookupTenantImplActor>
															#line 3454 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class LookupTenantImplActorState {
															#line 13619 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 3454 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	LookupTenantImplActorState(DatabaseContext* const& cx,TenantName const& tenant) 
															#line 3454 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 3454 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : cx(cx),
															#line 3454 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   tenant(tenant)
															#line 13628 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("lookupTenantImpl", reinterpret_cast<unsigned long>(this));

	}
	~LookupTenantImplActorState() 
	{
		fdb_probe_actor_destroy("lookupTenantImpl", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 3455 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			;
															#line 13643 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~LookupTenantImplActorState();
		static_cast<LookupTenantImplActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
		try {
															#line 3457 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_0 = cx->getBackoff();
															#line 3457 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<LookupTenantImplActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 13676 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1loopBody1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
			static_cast<LookupTenantImplActor*>(this)->actor_wait_state = 1;
															#line 3457 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< LookupTenantImplActor, 0, Void >*>(static_cast<LookupTenantImplActor*>(this)));
															#line 13681 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 3472 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (e.code() == error_code_commit_proxy_memory_limit_exceeded)
															#line 13703 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 3473 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				TraceEvent(SevWarnAlways, "CommitProxyOverloadedForTenant").suppressFor(5);
															#line 3475 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				cx->updateBackoff(e);
															#line 13709 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				return a_body1loopHead1(loopDepth); // continue
			}
															#line 3479 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			return a_body1Catch1(e, std::max(0, loopDepth - 1));
															#line 13714 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(Void const& _,int loopDepth) 
	{
															#line 3459 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		++cx->transactionTenantLookupRequests;
															#line 3461 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_1 = cx->onProxiesChanged();
															#line 3460 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<LookupTenantImplActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 13732 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
															#line 3462 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<GetTenantIdReply> __when_expr_2 = basicLoadBalance(cx->getCommitProxies(UseProvisionalProxies::False), &CommitProxyInterface::getTenantId, GetTenantIdRequest(tenant, latestVersion), TaskPriority::DefaultPromiseEndpoint);
															#line 13736 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1loopBody1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1loopBody1cont2when2(__when_expr_2.get(), loopDepth); };
		static_cast<LookupTenantImplActor*>(this)->actor_wait_state = 2;
															#line 3461 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< LookupTenantImplActor, 1, Void >*>(static_cast<LookupTenantImplActor*>(this)));
															#line 3462 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< LookupTenantImplActor, 2, GetTenantIdReply >*>(static_cast<LookupTenantImplActor*>(this)));
															#line 13743 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2(Void && _,int loopDepth) 
	{
															#line 3459 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		++cx->transactionTenantLookupRequests;
															#line 3461 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_1 = cx->onProxiesChanged();
															#line 3460 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<LookupTenantImplActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 13756 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
															#line 3462 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<GetTenantIdReply> __when_expr_2 = basicLoadBalance(cx->getCommitProxies(UseProvisionalProxies::False), &CommitProxyInterface::getTenantId, GetTenantIdRequest(tenant, latestVersion), TaskPriority::DefaultPromiseEndpoint);
															#line 13760 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1loopBody1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1loopBody1cont2when2(__when_expr_2.get(), loopDepth); };
		static_cast<LookupTenantImplActor*>(this)->actor_wait_state = 2;
															#line 3461 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< LookupTenantImplActor, 1, Void >*>(static_cast<LookupTenantImplActor*>(this)));
															#line 3462 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< LookupTenantImplActor, 2, GetTenantIdReply >*>(static_cast<LookupTenantImplActor*>(this)));
															#line 13767 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<LookupTenantImplActor*>(this)->actor_wait_state > 0) static_cast<LookupTenantImplActor*>(this)->actor_wait_state = 0;
		static_cast<LookupTenantImplActor*>(this)->ActorCallback< LookupTenantImplActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< LookupTenantImplActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("lookupTenantImpl", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("lookupTenantImpl", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< LookupTenantImplActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("lookupTenantImpl", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("lookupTenantImpl", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< LookupTenantImplActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("lookupTenantImpl", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("lookupTenantImpl", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1cont3(int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont4(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2when2(GetTenantIdReply const& rep,int loopDepth) 
	{
															#line 3466 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		++cx->transactionTenantLookupRequestsCompleted;
															#line 3467 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		cx->updateBackoff(success());
															#line 3468 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<LookupTenantImplActor*>(this)->SAV<int64_t>::futures) { (void)(rep.tenantId); this->~LookupTenantImplActorState(); static_cast<LookupTenantImplActor*>(this)->destroy(); return 0; }
															#line 13861 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<LookupTenantImplActor*>(this)->SAV< int64_t >::value()) int64_t(rep.tenantId);
		this->~LookupTenantImplActorState();
		static_cast<LookupTenantImplActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2when2(GetTenantIdReply && rep,int loopDepth) 
	{
															#line 3466 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		++cx->transactionTenantLookupRequestsCompleted;
															#line 3467 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		cx->updateBackoff(success());
															#line 3468 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<LookupTenantImplActor*>(this)->SAV<int64_t>::futures) { (void)(rep.tenantId); this->~LookupTenantImplActorState(); static_cast<LookupTenantImplActor*>(this)->destroy(); return 0; }
															#line 13877 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<LookupTenantImplActor*>(this)->SAV< int64_t >::value()) int64_t(rep.tenantId);
		this->~LookupTenantImplActorState();
		static_cast<LookupTenantImplActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<LookupTenantImplActor*>(this)->actor_wait_state > 0) static_cast<LookupTenantImplActor*>(this)->actor_wait_state = 0;
		static_cast<LookupTenantImplActor*>(this)->ActorCallback< LookupTenantImplActor, 1, Void >::remove();
		static_cast<LookupTenantImplActor*>(this)->ActorCallback< LookupTenantImplActor, 2, GetTenantIdReply >::remove();

	}
	void a_callback_fire(ActorCallback< LookupTenantImplActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("lookupTenantImpl", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("lookupTenantImpl", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< LookupTenantImplActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("lookupTenantImpl", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("lookupTenantImpl", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< LookupTenantImplActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("lookupTenantImpl", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("lookupTenantImpl", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< LookupTenantImplActor, 2, GetTenantIdReply >*,GetTenantIdReply const& value) 
	{
		fdb_probe_actor_enter("lookupTenantImpl", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when2(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("lookupTenantImpl", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< LookupTenantImplActor, 2, GetTenantIdReply >*,GetTenantIdReply && value) 
	{
		fdb_probe_actor_enter("lookupTenantImpl", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when2(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("lookupTenantImpl", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< LookupTenantImplActor, 2, GetTenantIdReply >*,Error err) 
	{
		fdb_probe_actor_enter("lookupTenantImpl", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("lookupTenantImpl", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1loopBody1cont4(int loopDepth) 
	{
		try {
			loopDepth = a_body1loopBody1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
															#line 3454 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	DatabaseContext* cx;
															#line 3454 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	TenantName tenant;
															#line 13999 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via lookupTenantImpl()
															#line 3454 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class LookupTenantImplActor final : public Actor<int64_t>, public ActorCallback< LookupTenantImplActor, 0, Void >, public ActorCallback< LookupTenantImplActor, 1, Void >, public ActorCallback< LookupTenantImplActor, 2, GetTenantIdReply >, public FastAllocated<LookupTenantImplActor>, public LookupTenantImplActorState<LookupTenantImplActor> {
															#line 14004 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<LookupTenantImplActor>::operator new;
	using FastAllocated<LookupTenantImplActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<int64_t>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< LookupTenantImplActor, 0, Void >;
friend struct ActorCallback< LookupTenantImplActor, 1, Void >;
friend struct ActorCallback< LookupTenantImplActor, 2, GetTenantIdReply >;
															#line 3454 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	LookupTenantImplActor(DatabaseContext* const& cx,TenantName const& tenant) 
															#line 14017 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<int64_t>(),
		   LookupTenantImplActorState<LookupTenantImplActor>(cx, tenant)
	{
		fdb_probe_actor_enter("lookupTenantImpl", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("lookupTenantImpl");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("lookupTenantImpl", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< LookupTenantImplActor, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< LookupTenantImplActor, 1, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 3454 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<int64_t> lookupTenantImpl( DatabaseContext* const& cx, TenantName const& tenant ) {
															#line 3454 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<int64_t>(new LookupTenantImplActor(cx, tenant));
															#line 14046 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 3483 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

Future<int64_t> DatabaseContext::lookupTenant(TenantName tenant) {
	return lookupTenantImpl(this, tenant);
}

TransactionState::TransactionState(Database cx,
                                   Optional<Reference<Tenant>> tenant,
                                   TaskPriority taskID,
                                   SpanContext spanContext,
                                   Reference<TransactionLogInfo> trLogInfo)
  : cx(cx), trLogInfo(trLogInfo), options(cx), taskID(taskID), spanContext(spanContext),
    readVersionObtainedFromGrvProxy(true), tenant_(tenant), tenantSet(tenant.present()) {}

Reference<TransactionState> TransactionState::cloneAndReset(Reference<TransactionLogInfo> newTrLogInfo,
                                                            bool generateNewSpan) const {

	SpanContext newSpanContext = generateNewSpan ? generateSpanID(cx->transactionTracingSample) : spanContext;
	Reference<TransactionState> newState =
	    makeReference<TransactionState>(cx, tenant_, cx->taskID, newSpanContext, newTrLogInfo);

	if (!cx->apiVersionAtLeast(16)) {
		newState->options = options;
	}

	newState->readVersionFuture = Future<Version>();
	newState->metadataVersion = Promise<Optional<Key>>();
	newState->numErrors = numErrors;
	newState->startTime = startTime;
	newState->committedVersion = committedVersion;
	newState->conflictingKeys = conflictingKeys;
	newState->tenantSet = tenantSet;

	return newState;
}

TenantInfo TransactionState::getTenantInfo(AllowInvalidTenantID allowInvalidTenantId /* = false */) {
	Optional<Reference<Tenant>> const& t = tenant();

	if (options.rawAccess) {
		return TenantInfo();
	} else if (!cx->internal && cx->clientInfo->get().clusterType == ClusterType::METACLUSTER_MANAGEMENT) {
		throw management_cluster_invalid_access();
	} else if (!cx->internal && cx->clientInfo->get().tenantMode == TenantMode::REQUIRED && !t.present()) {
		throw tenant_name_required();
	} else if (!t.present()) {
		return TenantInfo();
	} else if (cx->clientInfo->get().tenantMode == TenantMode::DISABLED && t.present()) {
		// If we are running provisional proxies, we allow a tenant request to go through since we don't know the tenant
		// mode. Such a transaction would not be allowed to commit without enabling provisional commits because either
		// the commit proxies will be provisional or the read version will be too old.
		if (!cx->clientInfo->get().grvProxies.empty() && !cx->clientInfo->get().grvProxies[0].provisional) {
			throw tenants_disabled();
		} else {
			ASSERT(!useProvisionalProxies);
		}
	}

	ASSERT(t.present() && (allowInvalidTenantId || t.get()->id() != TenantInfo::INVALID_TENANT));
	return TenantInfo(
	    (allowInvalidTenantId && !t.get()->ready().isReady()) ? TenantInfo::INVALID_TENANT : t.get()->id(), authToken);
}

// Returns the tenant used in this transaction. If the tenant is unset and raw access isn't specified, then the default
// tenant from DatabaseContext is applied to this transaction (note: the default tenant is typically unset, but in
// simulation could be something different).
//
// This function should not be called in the transaction constructor or in the setOption function to allow a user the
// opportunity to set raw access.
Optional<Reference<Tenant>> const& TransactionState::tenant() {
	hasTenant(ResolveDefaultTenant::True);
	return tenant_;
}

// Returns true if the tenant has been set, but does not cause default tenant resolution. This is useful in setOption
// (where we do not want to call tenant()) if we want to enforce that an option not be set on a Tenant transaction (e.g.
// for raw access).
bool TransactionState::hasTenant(ResolveDefaultTenant resolveDefaultTenant) {
	if (!tenantSet && resolveDefaultTenant) {
		if (!options.rawAccess && cx->defaultTenant.present()) {
			tenant_ = makeReference<Tenant>(cx->lookupTenant(cx->defaultTenant.get()), cx->defaultTenant);
		}
		tenantSet = true;
	}

	return tenant_.present();
}

															#line 14137 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via startTransaction()
															#line 3570 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class StartTransactionActor>
															#line 3570 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class StartTransactionActorState {
															#line 14144 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 3570 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	StartTransactionActorState(Reference<TransactionState> const& trState) 
															#line 3570 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 3570 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : trState(trState)
															#line 14151 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("startTransaction", reinterpret_cast<unsigned long>(this));

	}
	~StartTransactionActorState() 
	{
		fdb_probe_actor_destroy("startTransaction", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 3571 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_0 = success(trState->readVersionFuture);
															#line 3571 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<StartTransactionActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 14168 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<StartTransactionActor*>(this)->actor_wait_state = 1;
															#line 3571 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< StartTransactionActor, 0, Void >*>(static_cast<StartTransactionActor*>(this)));
															#line 14173 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~StartTransactionActorState();
		static_cast<StartTransactionActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void const& _,int loopDepth) 
	{
															#line 3572 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (trState->tenant().present())
															#line 14196 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 3573 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_1 = trState->tenant().get()->ready();
															#line 3573 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<StartTransactionActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 14202 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
			static_cast<StartTransactionActor*>(this)->actor_wait_state = 2;
															#line 3573 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< StartTransactionActor, 1, Void >*>(static_cast<StartTransactionActor*>(this)));
															#line 14207 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1cont2(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont1(Void && _,int loopDepth) 
	{
															#line 3572 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (trState->tenant().present())
															#line 14221 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 3573 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_1 = trState->tenant().get()->ready();
															#line 3573 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<StartTransactionActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 14227 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
			static_cast<StartTransactionActor*>(this)->actor_wait_state = 2;
															#line 3573 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< StartTransactionActor, 1, Void >*>(static_cast<StartTransactionActor*>(this)));
															#line 14232 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1cont2(loopDepth);
		}

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<StartTransactionActor*>(this)->actor_wait_state > 0) static_cast<StartTransactionActor*>(this)->actor_wait_state = 0;
		static_cast<StartTransactionActor*>(this)->ActorCallback< StartTransactionActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< StartTransactionActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("startTransaction", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("startTransaction", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< StartTransactionActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("startTransaction", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("startTransaction", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< StartTransactionActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("startTransaction", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("startTransaction", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont2(int loopDepth) 
	{
															#line 3576 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<StartTransactionActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~StartTransactionActorState(); static_cast<StartTransactionActor*>(this)->destroy(); return 0; }
															#line 14309 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<StartTransactionActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~StartTransactionActorState();
		static_cast<StartTransactionActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont3(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont2(loopDepth);

		return loopDepth;
	}
	int a_body1cont3(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont2(loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont3(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont3(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<StartTransactionActor*>(this)->actor_wait_state > 0) static_cast<StartTransactionActor*>(this)->actor_wait_state = 0;
		static_cast<StartTransactionActor*>(this)->ActorCallback< StartTransactionActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< StartTransactionActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("startTransaction", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("startTransaction", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< StartTransactionActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("startTransaction", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("startTransaction", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< StartTransactionActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("startTransaction", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("startTransaction", reinterpret_cast<unsigned long>(this), 1);

	}
															#line 3570 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<TransactionState> trState;
															#line 14394 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via startTransaction()
															#line 3570 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class StartTransactionActor final : public Actor<Void>, public ActorCallback< StartTransactionActor, 0, Void >, public ActorCallback< StartTransactionActor, 1, Void >, public FastAllocated<StartTransactionActor>, public StartTransactionActorState<StartTransactionActor> {
															#line 14399 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<StartTransactionActor>::operator new;
	using FastAllocated<StartTransactionActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< StartTransactionActor, 0, Void >;
friend struct ActorCallback< StartTransactionActor, 1, Void >;
															#line 3570 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	StartTransactionActor(Reference<TransactionState> const& trState) 
															#line 14411 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Void>(),
		   StartTransactionActorState<StartTransactionActor>(trState)
	{
		fdb_probe_actor_enter("startTransaction", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("startTransaction");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("startTransaction", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< StartTransactionActor, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< StartTransactionActor, 1, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 3570 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<Void> startTransaction( Reference<TransactionState> const& trState ) {
															#line 3570 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Void>(new StartTransactionActor(trState));
															#line 14440 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 3578 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

Future<Void> TransactionState::startTransaction(uint32_t readVersionFlags) {
	if (!startFuture.isValid()) {
		if (!readVersionFuture.isValid()) {
			readVersionFuture = getReadVersion(readVersionFlags);
		}
		if (readVersionFuture.isReady() && (!tenant().present() || tenant().get()->ready().isReady())) {
			startFuture = Void();
		} else {
			startFuture = ::startTransaction(Reference<TransactionState>::addRef(this));
		}
	}

	return startFuture;
}

Future<Void> Transaction::warmRange(KeyRange keys) {
	return warmRange_impl(trState, keys);
}

															#line 14464 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via getValue()
															#line 3598 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class GetValueActor>
															#line 3598 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetValueActorState {
															#line 14471 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 3598 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetValueActorState(Reference<TransactionState> const& trState,Key const& key,UseTenant const& useTenant,TransactionRecordLogInfo const& recordLogInfo) 
															#line 3598 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 3598 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : trState(trState),
															#line 3598 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   key(key),
															#line 3598 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   useTenant(useTenant),
															#line 3598 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   recordLogInfo(recordLogInfo)
															#line 14484 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("getValue", reinterpret_cast<unsigned long>(this));

	}
	~GetValueActorState() 
	{
		fdb_probe_actor_destroy("getValue", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 3602 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_0 = trState->startTransaction();
															#line 3602 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<GetValueActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 14501 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<GetValueActor*>(this)->actor_wait_state = 1;
															#line 3602 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< GetValueActor, 0, Void >*>(static_cast<GetValueActor*>(this)));
															#line 14506 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~GetValueActorState();
		static_cast<GetValueActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void const& _,int loopDepth) 
	{
															#line 3604 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		span = Span("NAPI:getValue"_loc, trState->spanContext);
															#line 3605 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (useTenant && trState->tenant().present())
															#line 14531 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 3606 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			span.addAttribute("tenant"_sr, trState->tenant().get()->name.castTo<TenantNameRef>().orDefault("<unspecified>"_sr));
															#line 14535 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 3610 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		trState->cx->validateVersion(trState->readVersion());
															#line 3612 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		;
															#line 14541 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont1loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1(Void && _,int loopDepth) 
	{
															#line 3604 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		span = Span("NAPI:getValue"_loc, trState->spanContext);
															#line 3605 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (useTenant && trState->tenant().present())
															#line 14552 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 3606 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			span.addAttribute("tenant"_sr, trState->tenant().get()->name.castTo<TenantNameRef>().orDefault("<unspecified>"_sr));
															#line 14556 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 3610 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		trState->cx->validateVersion(trState->readVersion());
															#line 3612 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		;
															#line 14562 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont1loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<GetValueActor*>(this)->actor_wait_state > 0) static_cast<GetValueActor*>(this)->actor_wait_state = 0;
		static_cast<GetValueActor*>(this)->ActorCallback< GetValueActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetValueActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getValue", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getValue", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< GetValueActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getValue", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getValue", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< GetValueActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getValue", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getValue", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1cont1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1(int loopDepth) 
	{
															#line 3613 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<KeyRangeLocationInfo> __when_expr_1 = getKeyLocation(trState, key, &StorageServerInterface::getValue, Reverse::False, useTenant);
															#line 3613 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<GetValueActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 14643 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), std::max(0, loopDepth - 1)); else return a_body1cont1loopBody1when1(__when_expr_1.get(), loopDepth); };
		static_cast<GetValueActor*>(this)->actor_wait_state = 2;
															#line 3613 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< GetValueActor, 1, KeyRangeLocationInfo >*>(static_cast<GetValueActor*>(this)));
															#line 14648 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1(int loopDepth) 
	{
															#line 3616 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		getValueID = Optional<UID>();
															#line 3617 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		startTime = uint64_t();
															#line 3618 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		startTimeD = double();
															#line 3619 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ssLatestCommitVersions = VersionVector();
															#line 3620 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		readOptions = trState->readOptions;
															#line 3622 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		trState->cx->getLatestCommitVersions(locationInfo.locations, trState, ssLatestCommitVersions);
															#line 14667 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		try {
															#line 3624 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (trState->readOptions.present() && trState->readOptions.get().debugID.present())
															#line 14671 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 3625 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				getValueID = nondeterministicRandom()->randomUniqueID();
															#line 3626 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				readOptions.get().debugID = getValueID;
															#line 3628 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				g_traceBatch.addAttach( "GetValueAttachID", trState->readOptions.get().debugID.get().first(), getValueID.get().first());
															#line 3630 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				g_traceBatch.addEvent("GetValueDebug", getValueID.get().first(), "NativeAPI.getValue.Before");
															#line 14681 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 3639 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			++trState->cx->getValueSubmitted;
															#line 3640 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			startTime = timer_int();
															#line 3641 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			startTimeD = now();
															#line 3642 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			++trState->cx->transactionPhysicalReads;
															#line 3644 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			reply = GetValueReply();
															#line 14693 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			try {
															#line 3646 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (CLIENT_BUGGIFY_WITH_PROB(.01))
															#line 14697 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 3647 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					return a_body1cont1loopBody1cont1Catch2(deterministicRandom()->randomChoice( std::vector<Error>{ transaction_too_old(), future_version() }), loopDepth);
															#line 14701 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
															#line 3651 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				StrictFuture<Void> __when_expr_2 = trState->cx->connectionFileChanged();
															#line 3650 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (static_cast<GetValueActor*>(this)->actor_wait_state < 0) return a_body1cont1loopBody1cont1Catch2(actor_cancelled(), loopDepth);
															#line 14707 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1cont1loopBody1cont1Catch2(__when_expr_2.getError(), loopDepth); else return a_body1cont1loopBody1cont1when1(__when_expr_2.get(), loopDepth); };
															#line 3654 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				StrictFuture<GetValueReply> __when_expr_3 = loadBalance( trState->cx.getPtr(), locationInfo.locations, &StorageServerInterface::getValue, GetValueRequest(span.context, useTenant ? trState->getTenantInfo() : TenantInfo(), key, trState->readVersion(), trState->cx->sampleReadTags() ? trState->options.readTags : Optional<TagSet>(), readOptions, ssLatestCommitVersions), TaskPriority::DefaultPromiseEndpoint, AtMostOnce::False, trState->cx->enableLocalityLoadBalance ? &trState->cx->queueModel : nullptr);
															#line 14711 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1cont1loopBody1cont1Catch2(__when_expr_3.getError(), loopDepth); else return a_body1cont1loopBody1cont1when2(__when_expr_3.get(), loopDepth); };
				static_cast<GetValueActor*>(this)->actor_wait_state = 3;
															#line 3651 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< GetValueActor, 2, Void >*>(static_cast<GetValueActor*>(this)));
															#line 3654 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< GetValueActor, 3, GetValueReply >*>(static_cast<GetValueActor*>(this)));
															#line 14718 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				loopDepth = 0;
			}
			catch (Error& error) {
				loopDepth = a_body1cont1loopBody1cont1Catch2(error, loopDepth);
			} catch (...) {
				loopDepth = a_body1cont1loopBody1cont1Catch2(unknown_error(), loopDepth);
			}
		}
		catch (Error& error) {
			loopDepth = a_body1cont1loopBody1cont1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1cont1loopBody1cont1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont1loopBody1when1(KeyRangeLocationInfo const& __locationInfo,int loopDepth) 
	{
															#line 3613 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		locationInfo = __locationInfo;
															#line 14739 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1when1(KeyRangeLocationInfo && __locationInfo,int loopDepth) 
	{
		locationInfo = std::move(__locationInfo);
		loopDepth = a_body1cont1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<GetValueActor*>(this)->actor_wait_state > 0) static_cast<GetValueActor*>(this)->actor_wait_state = 0;
		static_cast<GetValueActor*>(this)->ActorCallback< GetValueActor, 1, KeyRangeLocationInfo >::remove();

	}
	void a_callback_fire(ActorCallback< GetValueActor, 1, KeyRangeLocationInfo >*,KeyRangeLocationInfo const& value) 
	{
		fdb_probe_actor_enter("getValue", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getValue", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< GetValueActor, 1, KeyRangeLocationInfo >*,KeyRangeLocationInfo && value) 
	{
		fdb_probe_actor_enter("getValue", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getValue", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< GetValueActor, 1, KeyRangeLocationInfo >*,Error err) 
	{
		fdb_probe_actor_enter("getValue", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getValue", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont1loopBody1cont2(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1cont1loopHead1(0);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 3708 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			trState->cx->getValueCompleted->latency = timer_int() - startTime;
															#line 3709 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			trState->cx->getValueCompleted->log();
															#line 3710 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (getValueID.present())
															#line 14817 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 3711 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				g_traceBatch.addEvent("GetValueDebug", getValueID.get().first(), "NativeAPI.getValue.Error");
															#line 14821 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 3719 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (e.code() == error_code_wrong_shard_server || e.code() == error_code_all_alternatives_failed)
															#line 14825 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 3720 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				trState->cx->invalidateCache(useTenant ? trState->tenant().mapRef(&Tenant::prefix) : Optional<KeyRef>(), key);
															#line 3722 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				StrictFuture<Void> __when_expr_4 = delay(CLIENT_KNOBS->WRONG_SHARD_SERVER_DELAY, trState->taskID);
															#line 3722 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (static_cast<GetValueActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 14833 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1Catch1(__when_expr_4.getError(), std::max(0, loopDepth - 1)); else return a_body1cont1loopBody1cont1Catch1when1(__when_expr_4.get(), loopDepth); };
				static_cast<GetValueActor*>(this)->actor_wait_state = 4;
															#line 3722 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< GetValueActor, 4, Void >*>(static_cast<GetValueActor*>(this)));
															#line 14838 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				loopDepth = 0;
			}
			else
			{
															#line 3724 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (trState->trLogInfo && recordLogInfo)
															#line 14845 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 3725 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					trState->trLogInfo->addLog( FdbClientLogEvents::EventGetError(startTimeD, trState->cx->clientLocality.dcId(), static_cast<int>(e.code()), key, trState->tenant().flatMapRef(&Tenant::name)));
															#line 14849 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
															#line 3731 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				return a_body1Catch1(e, std::max(0, loopDepth - 1));
															#line 14853 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1cont1loopBody1cont3(int loopDepth) 
	{
															#line 3678 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		double latency = now() - startTimeD;
															#line 3679 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		trState->cx->readLatencies.addSample(latency);
															#line 3680 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (trState->trLogInfo && recordLogInfo)
															#line 14872 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 3681 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			int valueSize = reply.value.present() ? reply.value.get().size() : 0;
															#line 3682 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			trState->trLogInfo->addLog(FdbClientLogEvents::EventGet(startTimeD, trState->cx->clientLocality.dcId(), latency, valueSize, key, trState->tenant().flatMapRef(&Tenant::name)));
															#line 14878 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 3689 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		trState->cx->getValueCompleted->latency = timer_int() - startTime;
															#line 3690 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		trState->cx->getValueCompleted->log();
															#line 3691 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		trState->totalCost += getReadOperationCost(key.size() + (reply.value.present() ? reply.value.get().size() : 0));
															#line 3694 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (getValueID.present())
															#line 14888 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 3695 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			g_traceBatch.addEvent("GetValueDebug", getValueID.get().first(), "NativeAPI.getValue.After");
															#line 14892 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 3704 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		trState->cx->transactionBytesRead += reply.value.present() ? reply.value.get().size() : 0;
															#line 3705 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		++trState->cx->transactionKeysRead;
															#line 3706 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<GetValueActor*>(this)->SAV<Optional<Value>>::futures) { (void)(reply.value); this->~GetValueActorState(); static_cast<GetValueActor*>(this)->destroy(); return 0; }
															#line 14900 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<GetValueActor*>(this)->SAV< Optional<Value> >::value()) Optional<Value>(reply.value);
		this->~GetValueActorState();
		static_cast<GetValueActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1Catch2(const Error& __current_error,int loopDepth=0) 
	{
		try {
															#line 3674 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			++trState->cx->transactionPhysicalReadsCompleted;
															#line 3675 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			return a_body1cont1loopBody1cont1Catch1(__current_error, loopDepth);
															#line 14915 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
		catch (Error& error) {
			loopDepth = a_body1cont1loopBody1cont1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1cont1loopBody1cont1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont1loopBody1cont5(int loopDepth) 
	{
															#line 3672 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		++trState->cx->transactionPhysicalReadsCompleted;
															#line 14929 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont1loopBody1cont8(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1when1(Void const& _,int loopDepth) 
	{
															#line 3652 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		return a_body1cont1loopBody1cont1Catch2(transaction_too_old(), loopDepth);
															#line 14938 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1when1(Void && _,int loopDepth) 
	{
															#line 3652 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		return a_body1cont1loopBody1cont1Catch2(transaction_too_old(), loopDepth);
															#line 14946 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1when2(GetValueReply const& _reply,int loopDepth) 
	{
															#line 3669 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		reply = _reply;
															#line 14954 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont1loopBody1cont5(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1when2(GetValueReply && _reply,int loopDepth) 
	{
															#line 3669 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		reply = _reply;
															#line 14963 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont1loopBody1cont5(loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<GetValueActor*>(this)->actor_wait_state > 0) static_cast<GetValueActor*>(this)->actor_wait_state = 0;
		static_cast<GetValueActor*>(this)->ActorCallback< GetValueActor, 2, Void >::remove();
		static_cast<GetValueActor*>(this)->ActorCallback< GetValueActor, 3, GetValueReply >::remove();

	}
	void a_callback_fire(ActorCallback< GetValueActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getValue", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont1loopBody1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1cont1Catch2(error, 0);
		} catch (...) {
			a_body1cont1loopBody1cont1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getValue", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< GetValueActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getValue", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont1loopBody1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1cont1Catch2(error, 0);
		} catch (...) {
			a_body1cont1loopBody1cont1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getValue", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< GetValueActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getValue", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont1loopBody1cont1Catch2(err, 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1cont1Catch2(error, 0);
		} catch (...) {
			a_body1cont1loopBody1cont1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getValue", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< GetValueActor, 3, GetValueReply >*,GetValueReply const& value) 
	{
		fdb_probe_actor_enter("getValue", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose3();
		try {
			a_body1cont1loopBody1cont1when2(value, 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1cont1Catch2(error, 0);
		} catch (...) {
			a_body1cont1loopBody1cont1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getValue", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< GetValueActor, 3, GetValueReply >*,GetValueReply && value) 
	{
		fdb_probe_actor_enter("getValue", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose3();
		try {
			a_body1cont1loopBody1cont1when2(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1cont1Catch2(error, 0);
		} catch (...) {
			a_body1cont1loopBody1cont1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getValue", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< GetValueActor, 3, GetValueReply >*,Error err) 
	{
		fdb_probe_actor_enter("getValue", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose3();
		try {
			a_body1cont1loopBody1cont1Catch2(err, 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1cont1Catch2(error, 0);
		} catch (...) {
			a_body1cont1loopBody1cont1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getValue", reinterpret_cast<unsigned long>(this), 3);

	}
	int a_body1cont1loopBody1cont8(int loopDepth) 
	{
		try {
			loopDepth = a_body1cont1loopBody1cont3(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1cont1loopBody1cont1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1cont1loopBody1cont1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1Catch1cont1(int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont2(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1Catch1cont3(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont1Catch1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1Catch1cont3(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont1Catch1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont1Catch1cont3(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont1Catch1cont3(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<GetValueActor*>(this)->actor_wait_state > 0) static_cast<GetValueActor*>(this)->actor_wait_state = 0;
		static_cast<GetValueActor*>(this)->ActorCallback< GetValueActor, 4, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetValueActor, 4, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getValue", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose4();
		try {
			a_body1cont1loopBody1cont1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getValue", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_fire(ActorCallback< GetValueActor, 4, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getValue", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose4();
		try {
			a_body1cont1loopBody1cont1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getValue", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_error(ActorCallback< GetValueActor, 4, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getValue", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose4();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getValue", reinterpret_cast<unsigned long>(this), 4);

	}
															#line 3598 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<TransactionState> trState;
															#line 3598 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Key key;
															#line 3598 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	UseTenant useTenant;
															#line 3598 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	TransactionRecordLogInfo recordLogInfo;
															#line 3604 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Span span;
															#line 3613 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeyRangeLocationInfo locationInfo;
															#line 3616 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Optional<UID> getValueID;
															#line 3617 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	uint64_t startTime;
															#line 3618 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	double startTimeD;
															#line 3619 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	VersionVector ssLatestCommitVersions;
															#line 3620 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Optional<ReadOptions> readOptions;
															#line 3644 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetValueReply reply;
															#line 15183 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via getValue()
															#line 3598 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetValueActor final : public Actor<Optional<Value>>, public ActorCallback< GetValueActor, 0, Void >, public ActorCallback< GetValueActor, 1, KeyRangeLocationInfo >, public ActorCallback< GetValueActor, 2, Void >, public ActorCallback< GetValueActor, 3, GetValueReply >, public ActorCallback< GetValueActor, 4, Void >, public FastAllocated<GetValueActor>, public GetValueActorState<GetValueActor> {
															#line 15188 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<GetValueActor>::operator new;
	using FastAllocated<GetValueActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Optional<Value>>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< GetValueActor, 0, Void >;
friend struct ActorCallback< GetValueActor, 1, KeyRangeLocationInfo >;
friend struct ActorCallback< GetValueActor, 2, Void >;
friend struct ActorCallback< GetValueActor, 3, GetValueReply >;
friend struct ActorCallback< GetValueActor, 4, Void >;
															#line 3598 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetValueActor(Reference<TransactionState> const& trState,Key const& key,UseTenant const& useTenant,TransactionRecordLogInfo const& recordLogInfo) 
															#line 15203 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Optional<Value>>(),
		   GetValueActorState<GetValueActor>(trState, key, useTenant, recordLogInfo)
	{
		fdb_probe_actor_enter("getValue", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("getValue");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("getValue", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< GetValueActor, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< GetValueActor, 1, KeyRangeLocationInfo >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< GetValueActor, 2, Void >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< GetValueActor, 4, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 3598 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<Optional<Value>> getValue( Reference<TransactionState> const& trState, Key const& key, UseTenant const& useTenant, TransactionRecordLogInfo const& recordLogInfo ) {
															#line 3598 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Optional<Value>>(new GetValueActor(trState, key, useTenant, recordLogInfo));
															#line 15234 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 3736 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

															#line 15239 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via getKey()
															#line 3737 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class GetKeyActor>
															#line 3737 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetKeyActorState {
															#line 15246 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 3737 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetKeyActorState(Reference<TransactionState> const& trState,KeySelector const& k,UseTenant const& useTenant = UseTenant::True) 
															#line 3737 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 3737 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : trState(trState),
															#line 3737 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   k(k),
															#line 3737 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   useTenant(useTenant)
															#line 15257 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("getKey", reinterpret_cast<unsigned long>(this));

	}
	~GetKeyActorState() 
	{
		fdb_probe_actor_destroy("getKey", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 3738 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_0 = trState->startTransaction();
															#line 3738 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<GetKeyActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 15274 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<GetKeyActor*>(this)->actor_wait_state = 1;
															#line 3738 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< GetKeyActor, 0, Void >*>(static_cast<GetKeyActor*>(this)));
															#line 15279 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~GetKeyActorState();
		static_cast<GetKeyActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void const& _,int loopDepth) 
	{
															#line 3740 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		getKeyID = Optional<UID>();
															#line 3741 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		readOptions = trState->readOptions;
															#line 3743 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		span = Span("NAPI:getKey"_loc, trState->spanContext);
															#line 3744 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (trState->readOptions.present() && trState->readOptions.get().debugID.present())
															#line 15308 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 3745 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			getKeyID = nondeterministicRandom()->randomUniqueID();
															#line 3746 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			readOptions.get().debugID = getKeyID;
															#line 3748 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			g_traceBatch.addAttach( "GetKeyAttachID", trState->readOptions.get().debugID.get().first(), getKeyID.get().first());
															#line 3750 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			g_traceBatch.addEvent( "GetKeyDebug", getKeyID.get().first(), "NativeAPI.getKey.AfterVersion");
															#line 15318 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 3757 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		;
															#line 15322 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont1loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1(Void && _,int loopDepth) 
	{
															#line 3740 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		getKeyID = Optional<UID>();
															#line 3741 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		readOptions = trState->readOptions;
															#line 3743 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		span = Span("NAPI:getKey"_loc, trState->spanContext);
															#line 3744 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (trState->readOptions.present() && trState->readOptions.get().debugID.present())
															#line 15337 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 3745 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			getKeyID = nondeterministicRandom()->randomUniqueID();
															#line 3746 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			readOptions.get().debugID = getKeyID;
															#line 3748 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			g_traceBatch.addAttach( "GetKeyAttachID", trState->readOptions.get().debugID.get().first(), getKeyID.get().first());
															#line 3750 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			g_traceBatch.addEvent( "GetKeyDebug", getKeyID.get().first(), "NativeAPI.getKey.AfterVersion");
															#line 15347 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 3757 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		;
															#line 15351 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont1loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<GetKeyActor*>(this)->actor_wait_state > 0) static_cast<GetKeyActor*>(this)->actor_wait_state = 0;
		static_cast<GetKeyActor*>(this)->ActorCallback< GetKeyActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetKeyActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getKey", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getKey", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< GetKeyActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getKey", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getKey", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< GetKeyActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getKey", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getKey", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1cont1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1(int loopDepth) 
	{
															#line 3758 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (k.getKey() == allKeys.end)
															#line 15430 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 3759 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (k.offset > 0)
															#line 15434 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 3760 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (!static_cast<GetKeyActor*>(this)->SAV<Key>::futures) { (void)(allKeys.end); this->~GetKeyActorState(); static_cast<GetKeyActor*>(this)->destroy(); return 0; }
															#line 15438 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				new (&static_cast<GetKeyActor*>(this)->SAV< Key >::value()) Key(allKeys.end);
				this->~GetKeyActorState();
				static_cast<GetKeyActor*>(this)->finishSendAndDelPromiseRef();
				return 0;
			}
															#line 3762 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			k.orEqual = false;
															#line 15446 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
		else
		{
															#line 3763 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (k.getKey() == allKeys.begin && k.offset <= 0)
															#line 15452 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 3764 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (!static_cast<GetKeyActor*>(this)->SAV<Key>::futures) { (void)(Key()); this->~GetKeyActorState(); static_cast<GetKeyActor*>(this)->destroy(); return 0; }
															#line 15456 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				new (&static_cast<GetKeyActor*>(this)->SAV< Key >::value()) Key(Key());
				this->~GetKeyActorState();
				static_cast<GetKeyActor*>(this)->finishSendAndDelPromiseRef();
				return 0;
			}
		}
															#line 3767 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		Key locationKey(k.getKey(), k.arena());
															#line 3768 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<KeyRangeLocationInfo> __when_expr_1 = getKeyLocation( trState, locationKey, &StorageServerInterface::getKey, Reverse{ k.isBackward() }, useTenant);
															#line 3768 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<GetKeyActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 15469 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), std::max(0, loopDepth - 1)); else return a_body1cont1loopBody1when1(__when_expr_1.get(), loopDepth); };
		static_cast<GetKeyActor*>(this)->actor_wait_state = 2;
															#line 3768 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< GetKeyActor, 1, KeyRangeLocationInfo >*>(static_cast<GetKeyActor*>(this)));
															#line 15474 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1(int loopDepth) 
	{
															#line 3771 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ssLatestCommitVersions = VersionVector();
															#line 3772 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		trState->cx->getLatestCommitVersions(locationInfo.locations, trState, ssLatestCommitVersions);
															#line 15485 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		try {
															#line 3775 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (getKeyID.present())
															#line 15489 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 3776 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				g_traceBatch.addEvent( "GetKeyDebug", getKeyID.get().first(), "NativeAPI.getKey.Before");
															#line 15493 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 3781 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			++trState->cx->transactionPhysicalReads;
															#line 3783 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			GetKeyRequest req(span.context, useTenant ? trState->getTenantInfo() : TenantInfo(), k, trState->readVersion(), trState->cx->sampleReadTags() ? trState->options.readTags : Optional<TagSet>(), readOptions, ssLatestCommitVersions);
															#line 3790 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			req.arena.dependsOn(k.arena());
															#line 3792 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			reply = GetKeyReply();
															#line 15503 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			try {
															#line 3795 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				StrictFuture<Void> __when_expr_2 = trState->cx->connectionFileChanged();
															#line 3794 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (static_cast<GetKeyActor*>(this)->actor_wait_state < 0) return a_body1cont1loopBody1cont1Catch2(actor_cancelled(), loopDepth);
															#line 15509 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1cont1loopBody1cont1Catch2(__when_expr_2.getError(), loopDepth); else return a_body1cont1loopBody1cont1when1(__when_expr_2.get(), loopDepth); };
															#line 3798 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				StrictFuture<GetKeyReply> __when_expr_3 = loadBalance( trState->cx.getPtr(), locationInfo.locations, &StorageServerInterface::getKey, req, TaskPriority::DefaultPromiseEndpoint, AtMostOnce::False, trState->cx->enableLocalityLoadBalance ? &trState->cx->queueModel : nullptr);
															#line 15513 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1cont1loopBody1cont1Catch2(__when_expr_3.getError(), loopDepth); else return a_body1cont1loopBody1cont1when2(__when_expr_3.get(), loopDepth); };
				static_cast<GetKeyActor*>(this)->actor_wait_state = 3;
															#line 3795 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< GetKeyActor, 2, Void >*>(static_cast<GetKeyActor*>(this)));
															#line 3798 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< GetKeyActor, 3, GetKeyReply >*>(static_cast<GetKeyActor*>(this)));
															#line 15520 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				loopDepth = 0;
			}
			catch (Error& error) {
				loopDepth = a_body1cont1loopBody1cont1Catch2(error, loopDepth);
			} catch (...) {
				loopDepth = a_body1cont1loopBody1cont1Catch2(unknown_error(), loopDepth);
			}
		}
		catch (Error& error) {
			loopDepth = a_body1cont1loopBody1cont1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1cont1loopBody1cont1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont1loopBody1when1(KeyRangeLocationInfo const& __locationInfo,int loopDepth) 
	{
															#line 3768 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		locationInfo = __locationInfo;
															#line 15541 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1when1(KeyRangeLocationInfo && __locationInfo,int loopDepth) 
	{
		locationInfo = std::move(__locationInfo);
		loopDepth = a_body1cont1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<GetKeyActor*>(this)->actor_wait_state > 0) static_cast<GetKeyActor*>(this)->actor_wait_state = 0;
		static_cast<GetKeyActor*>(this)->ActorCallback< GetKeyActor, 1, KeyRangeLocationInfo >::remove();

	}
	void a_callback_fire(ActorCallback< GetKeyActor, 1, KeyRangeLocationInfo >*,KeyRangeLocationInfo const& value) 
	{
		fdb_probe_actor_enter("getKey", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getKey", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< GetKeyActor, 1, KeyRangeLocationInfo >*,KeyRangeLocationInfo && value) 
	{
		fdb_probe_actor_enter("getKey", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getKey", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< GetKeyActor, 1, KeyRangeLocationInfo >*,Error err) 
	{
		fdb_probe_actor_enter("getKey", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getKey", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont1loopBody1cont6(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1cont1loopHead1(0);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 3824 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (getKeyID.present())
															#line 15615 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 3825 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				g_traceBatch.addEvent("GetKeyDebug", getKeyID.get().first(), "NativeAPI.getKey.Error");
															#line 15619 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 3826 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (e.code() == error_code_wrong_shard_server || e.code() == error_code_all_alternatives_failed)
															#line 15623 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 3827 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				trState->cx->invalidateCache(useTenant ? trState->tenant().mapRef(&Tenant::prefix) : Optional<KeyRef>(), k.getKey(), Reverse{ k.isBackward() });
															#line 3831 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				StrictFuture<Void> __when_expr_4 = delay(CLIENT_KNOBS->WRONG_SHARD_SERVER_DELAY, trState->taskID);
															#line 3831 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (static_cast<GetKeyActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 15631 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1Catch1(__when_expr_4.getError(), std::max(0, loopDepth - 1)); else return a_body1cont1loopBody1cont1Catch1when1(__when_expr_4.get(), loopDepth); };
				static_cast<GetKeyActor*>(this)->actor_wait_state = 4;
															#line 3831 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< GetKeyActor, 4, Void >*>(static_cast<GetKeyActor*>(this)));
															#line 15636 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				loopDepth = 0;
			}
			else
			{
															#line 3833 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				TraceEvent(SevInfo, "GetKeyError").error(e).detail("AtKey", k.getKey()).detail("Offset", k.offset);
															#line 3834 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				return a_body1Catch1(e, std::max(0, loopDepth - 1));
															#line 15645 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1cont1loopBody1cont7(int loopDepth) 
	{
															#line 3814 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (getKeyID.present())
															#line 15660 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 3815 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			g_traceBatch.addEvent("GetKeyDebug", getKeyID.get().first(), "NativeAPI.getKey.After");
															#line 15664 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 3819 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		k = reply.sel;
															#line 3820 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!k.offset && k.orEqual)
															#line 15670 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 3821 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<GetKeyActor*>(this)->SAV<Key>::futures) { (void)(k.getKey()); this->~GetKeyActorState(); static_cast<GetKeyActor*>(this)->destroy(); return 0; }
															#line 15674 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<GetKeyActor*>(this)->SAV< Key >::value()) Key(k.getKey());
			this->~GetKeyActorState();
			static_cast<GetKeyActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
		loopDepth = a_body1cont1loopBody1cont15(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1Catch2(const Error& __current_error,int loopDepth=0) 
	{
		try {
															#line 3811 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			++trState->cx->transactionPhysicalReadsCompleted;
															#line 3812 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			return a_body1cont1loopBody1cont1Catch1(__current_error, loopDepth);
															#line 15691 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
		catch (Error& error) {
			loopDepth = a_body1cont1loopBody1cont1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1cont1loopBody1cont1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont1loopBody1cont9(int loopDepth) 
	{
															#line 3809 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		++trState->cx->transactionPhysicalReadsCompleted;
															#line 15705 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont1loopBody1cont11(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1when1(Void const& _,int loopDepth) 
	{
															#line 3796 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		return a_body1cont1loopBody1cont1Catch2(transaction_too_old(), loopDepth);
															#line 15714 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1when1(Void && _,int loopDepth) 
	{
															#line 3796 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		return a_body1cont1loopBody1cont1Catch2(transaction_too_old(), loopDepth);
															#line 15722 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1when2(GetKeyReply const& _reply,int loopDepth) 
	{
															#line 3806 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		reply = _reply;
															#line 15730 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont1loopBody1cont9(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1when2(GetKeyReply && _reply,int loopDepth) 
	{
															#line 3806 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		reply = _reply;
															#line 15739 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont1loopBody1cont9(loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<GetKeyActor*>(this)->actor_wait_state > 0) static_cast<GetKeyActor*>(this)->actor_wait_state = 0;
		static_cast<GetKeyActor*>(this)->ActorCallback< GetKeyActor, 2, Void >::remove();
		static_cast<GetKeyActor*>(this)->ActorCallback< GetKeyActor, 3, GetKeyReply >::remove();

	}
	void a_callback_fire(ActorCallback< GetKeyActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getKey", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont1loopBody1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1cont1Catch2(error, 0);
		} catch (...) {
			a_body1cont1loopBody1cont1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getKey", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< GetKeyActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getKey", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont1loopBody1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1cont1Catch2(error, 0);
		} catch (...) {
			a_body1cont1loopBody1cont1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getKey", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< GetKeyActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getKey", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont1loopBody1cont1Catch2(err, 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1cont1Catch2(error, 0);
		} catch (...) {
			a_body1cont1loopBody1cont1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getKey", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< GetKeyActor, 3, GetKeyReply >*,GetKeyReply const& value) 
	{
		fdb_probe_actor_enter("getKey", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose3();
		try {
			a_body1cont1loopBody1cont1when2(value, 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1cont1Catch2(error, 0);
		} catch (...) {
			a_body1cont1loopBody1cont1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getKey", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< GetKeyActor, 3, GetKeyReply >*,GetKeyReply && value) 
	{
		fdb_probe_actor_enter("getKey", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose3();
		try {
			a_body1cont1loopBody1cont1when2(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1cont1Catch2(error, 0);
		} catch (...) {
			a_body1cont1loopBody1cont1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getKey", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< GetKeyActor, 3, GetKeyReply >*,Error err) 
	{
		fdb_probe_actor_enter("getKey", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose3();
		try {
			a_body1cont1loopBody1cont1Catch2(err, 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1cont1Catch2(error, 0);
		} catch (...) {
			a_body1cont1loopBody1cont1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getKey", reinterpret_cast<unsigned long>(this), 3);

	}
	int a_body1cont1loopBody1cont11(int loopDepth) 
	{
		try {
			loopDepth = a_body1cont1loopBody1cont7(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1cont1loopBody1cont1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1cont1loopBody1cont1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont1loopBody1cont15(int loopDepth) 
	{
		try {
			loopDepth = a_body1cont1loopBody1cont6(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1Catch1cont1(int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont6(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1Catch1cont3(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont1Catch1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1Catch1cont3(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont1Catch1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont1Catch1cont3(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont1Catch1cont3(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<GetKeyActor*>(this)->actor_wait_state > 0) static_cast<GetKeyActor*>(this)->actor_wait_state = 0;
		static_cast<GetKeyActor*>(this)->ActorCallback< GetKeyActor, 4, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetKeyActor, 4, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getKey", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose4();
		try {
			a_body1cont1loopBody1cont1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getKey", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_fire(ActorCallback< GetKeyActor, 4, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getKey", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose4();
		try {
			a_body1cont1loopBody1cont1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getKey", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_error(ActorCallback< GetKeyActor, 4, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getKey", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose4();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getKey", reinterpret_cast<unsigned long>(this), 4);

	}
															#line 3737 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<TransactionState> trState;
															#line 3737 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeySelector k;
															#line 3737 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	UseTenant useTenant;
															#line 3740 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Optional<UID> getKeyID;
															#line 3741 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Optional<ReadOptions> readOptions;
															#line 3743 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Span span;
															#line 3768 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeyRangeLocationInfo locationInfo;
															#line 3771 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	VersionVector ssLatestCommitVersions;
															#line 3792 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetKeyReply reply;
															#line 15966 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via getKey()
															#line 3737 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetKeyActor final : public Actor<Key>, public ActorCallback< GetKeyActor, 0, Void >, public ActorCallback< GetKeyActor, 1, KeyRangeLocationInfo >, public ActorCallback< GetKeyActor, 2, Void >, public ActorCallback< GetKeyActor, 3, GetKeyReply >, public ActorCallback< GetKeyActor, 4, Void >, public FastAllocated<GetKeyActor>, public GetKeyActorState<GetKeyActor> {
															#line 15971 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<GetKeyActor>::operator new;
	using FastAllocated<GetKeyActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Key>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< GetKeyActor, 0, Void >;
friend struct ActorCallback< GetKeyActor, 1, KeyRangeLocationInfo >;
friend struct ActorCallback< GetKeyActor, 2, Void >;
friend struct ActorCallback< GetKeyActor, 3, GetKeyReply >;
friend struct ActorCallback< GetKeyActor, 4, Void >;
															#line 3737 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetKeyActor(Reference<TransactionState> const& trState,KeySelector const& k,UseTenant const& useTenant = UseTenant::True) 
															#line 15986 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Key>(),
		   GetKeyActorState<GetKeyActor>(trState, k, useTenant)
	{
		fdb_probe_actor_enter("getKey", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("getKey");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("getKey", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< GetKeyActor, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< GetKeyActor, 1, KeyRangeLocationInfo >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< GetKeyActor, 2, Void >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< GetKeyActor, 4, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 3737 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<Key> getKey( Reference<TransactionState> const& trState, KeySelector const& k, UseTenant const& useTenant = UseTenant::True ) {
															#line 3737 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Key>(new GetKeyActor(trState, k, useTenant));
															#line 16017 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 3839 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

															#line 16022 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via waitForCommittedVersion()
															#line 3840 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class WaitForCommittedVersionActor>
															#line 3840 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class WaitForCommittedVersionActorState {
															#line 16029 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 3840 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	WaitForCommittedVersionActorState(Database const& cx,Version const& version,SpanContext const& spanContext) 
															#line 3840 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 3840 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : cx(cx),
															#line 3840 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   version(version),
															#line 3840 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   spanContext(spanContext),
															#line 3841 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   span("NAPI:waitForCommittedVersion"_loc, spanContext)
															#line 16042 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("waitForCommittedVersion", reinterpret_cast<unsigned long>(this));

	}
	~WaitForCommittedVersionActorState() 
	{
		fdb_probe_actor_destroy("waitForCommittedVersion", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 3842 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			;
															#line 16057 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~WaitForCommittedVersionActorState();
		static_cast<WaitForCommittedVersionActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
		try {
															#line 3845 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_0 = cx->onProxiesChanged();
															#line 3844 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<WaitForCommittedVersionActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 16090 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1loopBody1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
															#line 3846 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<GetReadVersionReply> __when_expr_1 = basicLoadBalance( cx->getGrvProxies(UseProvisionalProxies::False), &GrvProxyInterface::getConsistentReadVersion, GetReadVersionRequest( span.context, 0, TransactionPriority::IMMEDIATE, cx->ssVersionVectorCache.getMaxVersion()), cx->taskID);
															#line 16094 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1when2(__when_expr_1.get(), loopDepth); };
			static_cast<WaitForCommittedVersionActor*>(this)->actor_wait_state = 1;
															#line 3845 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< WaitForCommittedVersionActor, 0, Void >*>(static_cast<WaitForCommittedVersionActor*>(this)));
															#line 3846 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< WaitForCommittedVersionActor, 1, GetReadVersionReply >*>(static_cast<WaitForCommittedVersionActor*>(this)));
															#line 16101 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 3870 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (e.code() == error_code_batch_transaction_throttled || e.code() == error_code_grv_proxy_memory_limit_exceeded)
															#line 16123 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 3873 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				StrictFuture<Void> __when_expr_3 = delayJittered(CLIENT_KNOBS->GRV_ERROR_RETRY_DELAY);
															#line 3873 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (static_cast<WaitForCommittedVersionActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 16129 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch1(__when_expr_3.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1Catch1when1(__when_expr_3.get(), loopDepth); };
				static_cast<WaitForCommittedVersionActor*>(this)->actor_wait_state = 3;
															#line 3873 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< WaitForCommittedVersionActor, 3, Void >*>(static_cast<WaitForCommittedVersionActor*>(this)));
															#line 16134 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				loopDepth = 0;
			}
			else
			{
															#line 3875 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				TraceEvent(SevError, "WaitForCommittedVersionError").error(e);
															#line 3876 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				return a_body1Catch1(e, std::max(0, loopDepth - 1));
															#line 16143 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when2(GetReadVersionReply const& v,int loopDepth) 
	{
															#line 3852 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		cx->minAcceptableReadVersion = std::min(cx->minAcceptableReadVersion, v.version);
															#line 3853 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (v.midShardSize > 0)
															#line 16178 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 3854 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			cx->smoothMidShardSize.setTotal(v.midShardSize);
															#line 16182 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 3855 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (cx->versionVectorCacheActive(v.ssVersionVectorDelta))
															#line 16186 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 3856 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (cx->isCurrentGrvProxy(v.proxyId))
															#line 16190 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 3857 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				cx->ssVersionVectorCache.applyDelta(v.ssVersionVectorDelta);
															#line 16194 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
			else
			{
															#line 3859 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				cx->ssVersionVectorCache.clear();
															#line 16200 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
		}
															#line 3862 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (v.version >= version)
															#line 16205 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 3863 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<WaitForCommittedVersionActor*>(this)->SAV<Version>::futures) { (void)(v.version); this->~WaitForCommittedVersionActorState(); static_cast<WaitForCommittedVersionActor*>(this)->destroy(); return 0; }
															#line 16209 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<WaitForCommittedVersionActor*>(this)->SAV< Version >::value()) Version(v.version);
			this->~WaitForCommittedVersionActorState();
			static_cast<WaitForCommittedVersionActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 3866 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_2 = delay(CLIENT_KNOBS->FUTURE_VERSION_RETRY_DELAY, cx->taskID);
															#line 3866 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<WaitForCommittedVersionActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 16219 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1loopBody1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1loopBody1when2when1(__when_expr_2.get(), loopDepth); };
		static_cast<WaitForCommittedVersionActor*>(this)->actor_wait_state = 2;
															#line 3866 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< WaitForCommittedVersionActor, 2, Void >*>(static_cast<WaitForCommittedVersionActor*>(this)));
															#line 16224 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1when2(GetReadVersionReply && v,int loopDepth) 
	{
															#line 3852 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		cx->minAcceptableReadVersion = std::min(cx->minAcceptableReadVersion, v.version);
															#line 3853 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (v.midShardSize > 0)
															#line 16235 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 3854 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			cx->smoothMidShardSize.setTotal(v.midShardSize);
															#line 16239 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 3855 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (cx->versionVectorCacheActive(v.ssVersionVectorDelta))
															#line 16243 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 3856 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (cx->isCurrentGrvProxy(v.proxyId))
															#line 16247 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 3857 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				cx->ssVersionVectorCache.applyDelta(v.ssVersionVectorDelta);
															#line 16251 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
			else
			{
															#line 3859 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				cx->ssVersionVectorCache.clear();
															#line 16257 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
		}
															#line 3862 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (v.version >= version)
															#line 16262 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 3863 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<WaitForCommittedVersionActor*>(this)->SAV<Version>::futures) { (void)(v.version); this->~WaitForCommittedVersionActorState(); static_cast<WaitForCommittedVersionActor*>(this)->destroy(); return 0; }
															#line 16266 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<WaitForCommittedVersionActor*>(this)->SAV< Version >::value()) Version(v.version);
			this->~WaitForCommittedVersionActorState();
			static_cast<WaitForCommittedVersionActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 3866 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_2 = delay(CLIENT_KNOBS->FUTURE_VERSION_RETRY_DELAY, cx->taskID);
															#line 3866 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<WaitForCommittedVersionActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 16276 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1loopBody1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1loopBody1when2when1(__when_expr_2.get(), loopDepth); };
		static_cast<WaitForCommittedVersionActor*>(this)->actor_wait_state = 2;
															#line 3866 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< WaitForCommittedVersionActor, 2, Void >*>(static_cast<WaitForCommittedVersionActor*>(this)));
															#line 16281 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<WaitForCommittedVersionActor*>(this)->actor_wait_state > 0) static_cast<WaitForCommittedVersionActor*>(this)->actor_wait_state = 0;
		static_cast<WaitForCommittedVersionActor*>(this)->ActorCallback< WaitForCommittedVersionActor, 0, Void >::remove();
		static_cast<WaitForCommittedVersionActor*>(this)->ActorCallback< WaitForCommittedVersionActor, 1, GetReadVersionReply >::remove();

	}
	void a_callback_fire(ActorCallback< WaitForCommittedVersionActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("waitForCommittedVersion", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitForCommittedVersion", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< WaitForCommittedVersionActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("waitForCommittedVersion", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitForCommittedVersion", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< WaitForCommittedVersionActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("waitForCommittedVersion", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitForCommittedVersion", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1when2cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when2cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1when2cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1when2cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<WaitForCommittedVersionActor*>(this)->actor_wait_state > 0) static_cast<WaitForCommittedVersionActor*>(this)->actor_wait_state = 0;
		static_cast<WaitForCommittedVersionActor*>(this)->ActorCallback< WaitForCommittedVersionActor, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< WaitForCommittedVersionActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("waitForCommittedVersion", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose2();
		try {
			a_body1loopBody1when2when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitForCommittedVersion", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< WaitForCommittedVersionActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("waitForCommittedVersion", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose2();
		try {
			a_body1loopBody1when2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitForCommittedVersion", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< WaitForCommittedVersionActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("waitForCommittedVersion", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitForCommittedVersion", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< WaitForCommittedVersionActor, 1, GetReadVersionReply >*,GetReadVersionReply const& value) 
	{
		fdb_probe_actor_enter("waitForCommittedVersion", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose1();
		try {
			a_body1loopBody1when2(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitForCommittedVersion", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< WaitForCommittedVersionActor, 1, GetReadVersionReply >*,GetReadVersionReply && value) 
	{
		fdb_probe_actor_enter("waitForCommittedVersion", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose1();
		try {
			a_body1loopBody1when2(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitForCommittedVersion", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< WaitForCommittedVersionActor, 1, GetReadVersionReply >*,Error err) 
	{
		fdb_probe_actor_enter("waitForCommittedVersion", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitForCommittedVersion", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1loopBody1cont3(int loopDepth) 
	{
		try {
			loopDepth = a_body1loopBody1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont2(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont2(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<WaitForCommittedVersionActor*>(this)->actor_wait_state > 0) static_cast<WaitForCommittedVersionActor*>(this)->actor_wait_state = 0;
		static_cast<WaitForCommittedVersionActor*>(this)->ActorCallback< WaitForCommittedVersionActor, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< WaitForCommittedVersionActor, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("waitForCommittedVersion", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose3();
		try {
			a_body1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitForCommittedVersion", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< WaitForCommittedVersionActor, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("waitForCommittedVersion", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose3();
		try {
			a_body1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitForCommittedVersion", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< WaitForCommittedVersionActor, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("waitForCommittedVersion", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitForCommittedVersion", reinterpret_cast<unsigned long>(this), 3);

	}
															#line 3840 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Database cx;
															#line 3840 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Version version;
															#line 3840 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	SpanContext spanContext;
															#line 3841 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Span span;
															#line 16560 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via waitForCommittedVersion()
															#line 3840 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class WaitForCommittedVersionActor final : public Actor<Version>, public ActorCallback< WaitForCommittedVersionActor, 0, Void >, public ActorCallback< WaitForCommittedVersionActor, 1, GetReadVersionReply >, public ActorCallback< WaitForCommittedVersionActor, 2, Void >, public ActorCallback< WaitForCommittedVersionActor, 3, Void >, public FastAllocated<WaitForCommittedVersionActor>, public WaitForCommittedVersionActorState<WaitForCommittedVersionActor> {
															#line 16565 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<WaitForCommittedVersionActor>::operator new;
	using FastAllocated<WaitForCommittedVersionActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Version>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< WaitForCommittedVersionActor, 0, Void >;
friend struct ActorCallback< WaitForCommittedVersionActor, 1, GetReadVersionReply >;
friend struct ActorCallback< WaitForCommittedVersionActor, 2, Void >;
friend struct ActorCallback< WaitForCommittedVersionActor, 3, Void >;
															#line 3840 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	WaitForCommittedVersionActor(Database const& cx,Version const& version,SpanContext const& spanContext) 
															#line 16579 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Version>(),
		   WaitForCommittedVersionActorState<WaitForCommittedVersionActor>(cx, version, spanContext)
	{
		fdb_probe_actor_enter("waitForCommittedVersion", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("waitForCommittedVersion");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("waitForCommittedVersion", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< WaitForCommittedVersionActor, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< WaitForCommittedVersionActor, 2, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< WaitForCommittedVersionActor, 3, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 3840 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<Version> waitForCommittedVersion( Database const& cx, Version const& version, SpanContext const& spanContext ) {
															#line 3840 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Version>(new WaitForCommittedVersionActor(cx, version, spanContext));
															#line 16609 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 3881 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

															#line 16614 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via getRawVersion()
															#line 3882 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class GetRawVersionActor>
															#line 3882 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetRawVersionActorState {
															#line 16621 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 3882 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetRawVersionActorState(Reference<TransactionState> const& trState) 
															#line 3882 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 3882 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : trState(trState),
															#line 3883 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   span("NAPI:getRawVersion"_loc, trState->spanContext)
															#line 16630 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("getRawVersion", reinterpret_cast<unsigned long>(this));

	}
	~GetRawVersionActorState() 
	{
		fdb_probe_actor_destroy("getRawVersion", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 3884 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			;
															#line 16645 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~GetRawVersionActorState();
		static_cast<GetRawVersionActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
															#line 3886 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_0 = trState->cx->onProxiesChanged();
															#line 3885 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<GetRawVersionActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 16677 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
															#line 3887 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<GetReadVersionReply> __when_expr_1 = basicLoadBalance(trState->cx->getGrvProxies(UseProvisionalProxies::False), &GrvProxyInterface::getConsistentReadVersion, GetReadVersionRequest(trState->spanContext, 0, TransactionPriority::IMMEDIATE, trState->cx->ssVersionVectorCache.getMaxVersion()), trState->cx->taskID);
															#line 16681 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1when2(__when_expr_1.get(), loopDepth); };
		static_cast<GetRawVersionActor*>(this)->actor_wait_state = 1;
															#line 3886 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< GetRawVersionActor, 0, Void >*>(static_cast<GetRawVersionActor*>(this)));
															#line 3887 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< GetRawVersionActor, 1, GetReadVersionReply >*>(static_cast<GetRawVersionActor*>(this)));
															#line 16688 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when2(GetReadVersionReply const& v,int loopDepth) 
	{
															#line 3895 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (trState->cx->versionVectorCacheActive(v.ssVersionVectorDelta))
															#line 16715 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 3896 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (trState->cx->isCurrentGrvProxy(v.proxyId))
															#line 16719 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 3897 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				trState->cx->ssVersionVectorCache.applyDelta(v.ssVersionVectorDelta);
															#line 16723 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
			else
			{
															#line 3899 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				trState->cx->ssVersionVectorCache.clear();
															#line 16729 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
		}
															#line 3902 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<GetRawVersionActor*>(this)->SAV<Version>::futures) { (void)(v.version); this->~GetRawVersionActorState(); static_cast<GetRawVersionActor*>(this)->destroy(); return 0; }
															#line 16734 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<GetRawVersionActor*>(this)->SAV< Version >::value()) Version(v.version);
		this->~GetRawVersionActorState();
		static_cast<GetRawVersionActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1when2(GetReadVersionReply && v,int loopDepth) 
	{
															#line 3895 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (trState->cx->versionVectorCacheActive(v.ssVersionVectorDelta))
															#line 16746 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 3896 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (trState->cx->isCurrentGrvProxy(v.proxyId))
															#line 16750 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 3897 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				trState->cx->ssVersionVectorCache.applyDelta(v.ssVersionVectorDelta);
															#line 16754 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
			else
			{
															#line 3899 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				trState->cx->ssVersionVectorCache.clear();
															#line 16760 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
		}
															#line 3902 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<GetRawVersionActor*>(this)->SAV<Version>::futures) { (void)(v.version); this->~GetRawVersionActorState(); static_cast<GetRawVersionActor*>(this)->destroy(); return 0; }
															#line 16765 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<GetRawVersionActor*>(this)->SAV< Version >::value()) Version(v.version);
		this->~GetRawVersionActorState();
		static_cast<GetRawVersionActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<GetRawVersionActor*>(this)->actor_wait_state > 0) static_cast<GetRawVersionActor*>(this)->actor_wait_state = 0;
		static_cast<GetRawVersionActor*>(this)->ActorCallback< GetRawVersionActor, 0, Void >::remove();
		static_cast<GetRawVersionActor*>(this)->ActorCallback< GetRawVersionActor, 1, GetReadVersionReply >::remove();

	}
	void a_callback_fire(ActorCallback< GetRawVersionActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getRawVersion", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRawVersion", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< GetRawVersionActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getRawVersion", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRawVersion", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< GetRawVersionActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getRawVersion", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRawVersion", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< GetRawVersionActor, 1, GetReadVersionReply >*,GetReadVersionReply const& value) 
	{
		fdb_probe_actor_enter("getRawVersion", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose1();
		try {
			a_body1loopBody1when2(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRawVersion", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< GetRawVersionActor, 1, GetReadVersionReply >*,GetReadVersionReply && value) 
	{
		fdb_probe_actor_enter("getRawVersion", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose1();
		try {
			a_body1loopBody1when2(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRawVersion", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< GetRawVersionActor, 1, GetReadVersionReply >*,Error err) 
	{
		fdb_probe_actor_enter("getRawVersion", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRawVersion", reinterpret_cast<unsigned long>(this), 1);

	}
															#line 3882 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<TransactionState> trState;
															#line 3883 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Span span;
															#line 16874 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via getRawVersion()
															#line 3882 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetRawVersionActor final : public Actor<Version>, public ActorCallback< GetRawVersionActor, 0, Void >, public ActorCallback< GetRawVersionActor, 1, GetReadVersionReply >, public FastAllocated<GetRawVersionActor>, public GetRawVersionActorState<GetRawVersionActor> {
															#line 16879 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<GetRawVersionActor>::operator new;
	using FastAllocated<GetRawVersionActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Version>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< GetRawVersionActor, 0, Void >;
friend struct ActorCallback< GetRawVersionActor, 1, GetReadVersionReply >;
															#line 3882 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetRawVersionActor(Reference<TransactionState> const& trState) 
															#line 16891 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Version>(),
		   GetRawVersionActorState<GetRawVersionActor>(trState)
	{
		fdb_probe_actor_enter("getRawVersion", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("getRawVersion");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("getRawVersion", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< GetRawVersionActor, 0, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 3882 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<Version> getRawVersion( Reference<TransactionState> const& trState ) {
															#line 3882 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Version>(new GetRawVersionActor(trState));
															#line 16919 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 3907 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

															#line 16924 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
[[nodiscard]] Future<Void> readVersionBatcher( DatabaseContext* const& cx, FutureStream<std::pair<Promise<GetReadVersionReply>, Optional<UID>>> const& versionStream, uint32_t const& flags );

#line 3912 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

															#line 16929 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via watchValue()
															#line 3913 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class WatchValueActor>
															#line 3913 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class WatchValueActorState {
															#line 16936 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 3913 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	WatchValueActorState(Database const& cx,Reference<const WatchParameters> const& parameters) 
															#line 3913 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 3913 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : cx(cx),
															#line 3913 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   parameters(parameters),
															#line 3914 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   span("NAPI:watchValue"_loc, parameters->spanContext),
															#line 3915 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   ver(parameters->version)
															#line 16949 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("watchValue", reinterpret_cast<unsigned long>(this));

	}
	~WatchValueActorState() 
	{
		fdb_probe_actor_destroy("watchValue", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 3916 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			cx->validateVersion(parameters->version);
															#line 3917 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ASSERT(parameters->version != latestVersion);
															#line 3919 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			;
															#line 16968 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~WatchValueActorState();
		static_cast<WatchValueActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
															#line 3920 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<KeyRangeLocationInfo> __when_expr_0 = getKeyLocation(cx, parameters->tenant, parameters->key, &StorageServerInterface::watchValue, parameters->spanContext, parameters->debugID, parameters->useProvisionalProxies, Reverse::False, parameters->version);
															#line 3920 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<WatchValueActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 17000 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
		static_cast<WatchValueActor*>(this)->actor_wait_state = 1;
															#line 3920 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< WatchValueActor, 0, KeyRangeLocationInfo >*>(static_cast<WatchValueActor*>(this)));
															#line 17005 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		try {
															#line 3930 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			watchValueID = Optional<UID>();
															#line 3931 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (parameters->debugID.present())
															#line 17017 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 3932 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				watchValueID = nondeterministicRandom()->randomUniqueID();
															#line 3934 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				g_traceBatch.addAttach( "WatchValueAttachID", parameters->debugID.get().first(), watchValueID.get().first());
															#line 3936 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				g_traceBatch.addEvent("WatchValueDebug", watchValueID.get().first(), "NativeAPI.watchValue.Before");
															#line 17025 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 3940 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			resp = WatchValueReply();
															#line 3942 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<WatchValueReply> __when_expr_1 = loadBalance(cx.getPtr(), locationInfo.locations, &StorageServerInterface::watchValue, WatchValueRequest(span.context, parameters->tenant, parameters->key, parameters->value, ver, cx->sampleReadTags() ? parameters->tags : Optional<TagSet>(), watchValueID), TaskPriority::DefaultPromiseEndpoint);
															#line 3941 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<WatchValueActor*>(this)->actor_wait_state < 0) return a_body1loopBody1cont1Catch1(actor_cancelled(), loopDepth);
															#line 17033 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1cont1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont1when1(__when_expr_1.get(), loopDepth); };
															#line 3956 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_2 = cx->connectionRecord ? cx->connectionRecord->onChange() : Never();
															#line 17037 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1loopBody1cont1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1loopBody1cont1when2(__when_expr_2.get(), loopDepth); };
			static_cast<WatchValueActor*>(this)->actor_wait_state = 2;
															#line 3942 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< WatchValueActor, 1, WatchValueReply >*>(static_cast<WatchValueActor*>(this)));
															#line 3956 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< WatchValueActor, 2, Void >*>(static_cast<WatchValueActor*>(this)));
															#line 17044 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1cont1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1cont1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1when1(KeyRangeLocationInfo const& __locationInfo,int loopDepth) 
	{
															#line 3920 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		locationInfo = __locationInfo;
															#line 17059 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(KeyRangeLocationInfo && __locationInfo,int loopDepth) 
	{
		locationInfo = std::move(__locationInfo);
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<WatchValueActor*>(this)->actor_wait_state > 0) static_cast<WatchValueActor*>(this)->actor_wait_state = 0;
		static_cast<WatchValueActor*>(this)->ActorCallback< WatchValueActor, 0, KeyRangeLocationInfo >::remove();

	}
	void a_callback_fire(ActorCallback< WatchValueActor, 0, KeyRangeLocationInfo >*,KeyRangeLocationInfo const& value) 
	{
		fdb_probe_actor_enter("watchValue", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("watchValue", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< WatchValueActor, 0, KeyRangeLocationInfo >*,KeyRangeLocationInfo && value) 
	{
		fdb_probe_actor_enter("watchValue", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("watchValue", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< WatchValueActor, 0, KeyRangeLocationInfo >*,Error err) 
	{
		fdb_probe_actor_enter("watchValue", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("watchValue", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1cont2(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1cont1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 3976 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (e.code() == error_code_wrong_shard_server || e.code() == error_code_all_alternatives_failed)
															#line 17133 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 3977 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				cx->invalidateCache(parameters->tenant.prefix, parameters->key);
															#line 3978 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				StrictFuture<Void> __when_expr_5 = delay(CLIENT_KNOBS->WRONG_SHARD_SERVER_DELAY, parameters->taskID);
															#line 3978 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (static_cast<WatchValueActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 17141 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				if (__when_expr_5.isReady()) { if (__when_expr_5.isError()) return a_body1Catch1(__when_expr_5.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1cont1Catch1when1(__when_expr_5.get(), loopDepth); };
				static_cast<WatchValueActor*>(this)->actor_wait_state = 5;
															#line 3978 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				__when_expr_5.addCallbackAndClear(static_cast<ActorCallback< WatchValueActor, 5, Void >*>(static_cast<WatchValueActor*>(this)));
															#line 17146 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				loopDepth = 0;
			}
			else
			{
															#line 3979 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (e.code() == error_code_watch_cancelled || e.code() == error_code_process_behind)
															#line 17153 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 3981 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					CODE_PROBE(e.code() == error_code_watch_cancelled, "Too many watches on the storage server, poll for changes instead");
															#line 3982 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					CODE_PROBE(e.code() == error_code_process_behind, "The storage servers are all behind", probe::decoration::rare);
															#line 3984 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					StrictFuture<Void> __when_expr_6 = delay(CLIENT_KNOBS->WATCH_POLLING_TIME, parameters->taskID);
															#line 3984 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					if (static_cast<WatchValueActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 17163 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					if (__when_expr_6.isReady()) { if (__when_expr_6.isError()) return a_body1Catch1(__when_expr_6.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1cont1Catch1when2(__when_expr_6.get(), loopDepth); };
					static_cast<WatchValueActor*>(this)->actor_wait_state = 6;
															#line 3984 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					__when_expr_6.addCallbackAndClear(static_cast<ActorCallback< WatchValueActor, 6, Void >*>(static_cast<WatchValueActor*>(this)));
															#line 17168 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					loopDepth = 0;
				}
				else
				{
															#line 3985 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					if (e.code() == error_code_timed_out)
															#line 17175 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					{
															#line 3987 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
						CODE_PROBE(true, "A watch timed out");
															#line 3988 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
						StrictFuture<Void> __when_expr_7 = delay(CLIENT_KNOBS->FUTURE_VERSION_RETRY_DELAY, parameters->taskID);
															#line 3988 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
						if (static_cast<WatchValueActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 17183 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
						if (__when_expr_7.isReady()) { if (__when_expr_7.isError()) return a_body1Catch1(__when_expr_7.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1cont1Catch1when3(__when_expr_7.get(), loopDepth); };
						static_cast<WatchValueActor*>(this)->actor_wait_state = 7;
															#line 3988 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
						__when_expr_7.addCallbackAndClear(static_cast<ActorCallback< WatchValueActor, 7, Void >*>(static_cast<WatchValueActor*>(this)));
															#line 17188 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
						loopDepth = 0;
					}
					else
					{
															#line 3990 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
						err = e;
															#line 3991 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
						StrictFuture<Void> __when_expr_8 = delay(CLIENT_KNOBS->FUTURE_VERSION_RETRY_DELAY, parameters->taskID);
															#line 3991 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
						if (static_cast<WatchValueActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 17199 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
						if (__when_expr_8.isReady()) { if (__when_expr_8.isError()) return a_body1Catch1(__when_expr_8.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1cont1Catch1when4(__when_expr_8.get(), loopDepth); };
						static_cast<WatchValueActor*>(this)->actor_wait_state = 8;
															#line 3991 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
						__when_expr_8.addCallbackAndClear(static_cast<ActorCallback< WatchValueActor, 8, Void >*>(static_cast<WatchValueActor*>(this)));
															#line 17204 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
						loopDepth = 0;
					}
				}
			}
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont3(int loopDepth) 
	{
															#line 3960 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (watchValueID.present())
															#line 17222 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 3961 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			g_traceBatch.addEvent("WatchValueDebug", watchValueID.get().first(), "NativeAPI.watchValue.After");
															#line 17226 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 3967 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Version> __when_expr_4 = waitForCommittedVersion(cx, resp.version, span.context);
															#line 3967 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<WatchValueActor*>(this)->actor_wait_state < 0) return a_body1loopBody1cont1Catch1(actor_cancelled(), loopDepth);
															#line 17232 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1loopBody1cont1Catch1(__when_expr_4.getError(), loopDepth); else return a_body1loopBody1cont3when1(__when_expr_4.get(), loopDepth); };
		static_cast<WatchValueActor*>(this)->actor_wait_state = 4;
															#line 3967 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< WatchValueActor, 4, Version >*>(static_cast<WatchValueActor*>(this)));
															#line 17237 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont1when1(WatchValueReply const& r,int loopDepth) 
	{
															#line 3954 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		resp = r;
															#line 17246 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1when1(WatchValueReply && r,int loopDepth) 
	{
															#line 3954 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		resp = r;
															#line 17255 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1when2(Void const& _,int loopDepth) 
	{
															#line 3957 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_3 = Never();
															#line 3957 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<WatchValueActor*>(this)->actor_wait_state < 0) return a_body1loopBody1cont1Catch1(actor_cancelled(), loopDepth);
															#line 17266 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1loopBody1cont1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1loopBody1cont1when2when1(__when_expr_3.get(), loopDepth); };
		static_cast<WatchValueActor*>(this)->actor_wait_state = 3;
															#line 3957 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< WatchValueActor, 3, Void >*>(static_cast<WatchValueActor*>(this)));
															#line 17271 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont1when2(Void && _,int loopDepth) 
	{
															#line 3957 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_3 = Never();
															#line 3957 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<WatchValueActor*>(this)->actor_wait_state < 0) return a_body1loopBody1cont1Catch1(actor_cancelled(), loopDepth);
															#line 17282 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1loopBody1cont1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1loopBody1cont1when2when1(__when_expr_3.get(), loopDepth); };
		static_cast<WatchValueActor*>(this)->actor_wait_state = 3;
															#line 3957 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< WatchValueActor, 3, Void >*>(static_cast<WatchValueActor*>(this)));
															#line 17287 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<WatchValueActor*>(this)->actor_wait_state > 0) static_cast<WatchValueActor*>(this)->actor_wait_state = 0;
		static_cast<WatchValueActor*>(this)->ActorCallback< WatchValueActor, 1, WatchValueReply >::remove();
		static_cast<WatchValueActor*>(this)->ActorCallback< WatchValueActor, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< WatchValueActor, 1, WatchValueReply >*,WatchValueReply const& value) 
	{
		fdb_probe_actor_enter("watchValue", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("watchValue", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< WatchValueActor, 1, WatchValueReply >*,WatchValueReply && value) 
	{
		fdb_probe_actor_enter("watchValue", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("watchValue", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< WatchValueActor, 1, WatchValueReply >*,Error err) 
	{
		fdb_probe_actor_enter("watchValue", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("watchValue", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1loopBody1cont1when2cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1when2cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1when2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1when2cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1when2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1when2cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<WatchValueActor*>(this)->actor_wait_state > 0) static_cast<WatchValueActor*>(this)->actor_wait_state = 0;
		static_cast<WatchValueActor*>(this)->ActorCallback< WatchValueActor, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< WatchValueActor, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("watchValue", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose3();
		try {
			a_body1loopBody1cont1when2when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("watchValue", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< WatchValueActor, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("watchValue", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose3();
		try {
			a_body1loopBody1cont1when2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("watchValue", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< WatchValueActor, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("watchValue", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose3();
		try {
			a_body1loopBody1cont1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("watchValue", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< WatchValueActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("watchValue", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose2();
		try {
			a_body1loopBody1cont1when2(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("watchValue", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< WatchValueActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("watchValue", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose2();
		try {
			a_body1loopBody1cont1when2(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("watchValue", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< WatchValueActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("watchValue", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose2();
		try {
			a_body1loopBody1cont1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("watchValue", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1loopBody1cont5(Version const& v,int loopDepth) 
	{
															#line 3971 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (v - resp.version < 50000000)
															#line 17468 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 3972 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<WatchValueActor*>(this)->SAV<Version>::futures) { (void)(resp.version); this->~WatchValueActorState(); static_cast<WatchValueActor*>(this)->destroy(); return 0; }
															#line 17472 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<WatchValueActor*>(this)->SAV< Version >::value()) Version(resp.version);
			this->~WatchValueActorState();
			static_cast<WatchValueActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 3974 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ver = v;
															#line 17480 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont9(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont5(Version && v,int loopDepth) 
	{
															#line 3971 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (v - resp.version < 50000000)
															#line 17489 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 3972 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<WatchValueActor*>(this)->SAV<Version>::futures) { (void)(resp.version); this->~WatchValueActorState(); static_cast<WatchValueActor*>(this)->destroy(); return 0; }
															#line 17493 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<WatchValueActor*>(this)->SAV< Version >::value()) Version(resp.version);
			this->~WatchValueActorState();
			static_cast<WatchValueActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 3974 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ver = v;
															#line 17501 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont9(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont3when1(Version const& v,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont5(v, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont3when1(Version && v,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont5(std::move(v), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<WatchValueActor*>(this)->actor_wait_state > 0) static_cast<WatchValueActor*>(this)->actor_wait_state = 0;
		static_cast<WatchValueActor*>(this)->ActorCallback< WatchValueActor, 4, Version >::remove();

	}
	void a_callback_fire(ActorCallback< WatchValueActor, 4, Version >*,Version const& value) 
	{
		fdb_probe_actor_enter("watchValue", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose4();
		try {
			a_body1loopBody1cont3when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("watchValue", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_fire(ActorCallback< WatchValueActor, 4, Version >*,Version && value) 
	{
		fdb_probe_actor_enter("watchValue", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose4();
		try {
			a_body1loopBody1cont3when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("watchValue", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_error(ActorCallback< WatchValueActor, 4, Version >*,Error err) 
	{
		fdb_probe_actor_enter("watchValue", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose4();
		try {
			a_body1loopBody1cont1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("watchValue", reinterpret_cast<unsigned long>(this), 4);

	}
	int a_body1loopBody1cont9(int loopDepth) 
	{
		try {
			loopDepth = a_body1loopBody1cont2(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1Catch1cont1(int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1Catch1cont2(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1Catch1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1Catch1cont2(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1Catch1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1Catch1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1Catch1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose5() 
	{
		if (static_cast<WatchValueActor*>(this)->actor_wait_state > 0) static_cast<WatchValueActor*>(this)->actor_wait_state = 0;
		static_cast<WatchValueActor*>(this)->ActorCallback< WatchValueActor, 5, Void >::remove();

	}
	void a_callback_fire(ActorCallback< WatchValueActor, 5, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("watchValue", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose5();
		try {
			a_body1loopBody1cont1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("watchValue", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_fire(ActorCallback< WatchValueActor, 5, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("watchValue", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose5();
		try {
			a_body1loopBody1cont1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("watchValue", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_error(ActorCallback< WatchValueActor, 5, Void >*,Error err) 
	{
		fdb_probe_actor_enter("watchValue", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose5();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("watchValue", reinterpret_cast<unsigned long>(this), 5);

	}
	int a_body1loopBody1cont1Catch1cont3(int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1Catch1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1Catch1cont4(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1Catch1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1Catch1cont4(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1Catch1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1Catch1when2(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1Catch1cont4(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1Catch1when2(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1Catch1cont4(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose6() 
	{
		if (static_cast<WatchValueActor*>(this)->actor_wait_state > 0) static_cast<WatchValueActor*>(this)->actor_wait_state = 0;
		static_cast<WatchValueActor*>(this)->ActorCallback< WatchValueActor, 6, Void >::remove();

	}
	void a_callback_fire(ActorCallback< WatchValueActor, 6, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("watchValue", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose6();
		try {
			a_body1loopBody1cont1Catch1when2(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("watchValue", reinterpret_cast<unsigned long>(this), 6);

	}
	void a_callback_fire(ActorCallback< WatchValueActor, 6, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("watchValue", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose6();
		try {
			a_body1loopBody1cont1Catch1when2(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("watchValue", reinterpret_cast<unsigned long>(this), 6);

	}
	void a_callback_error(ActorCallback< WatchValueActor, 6, Void >*,Error err) 
	{
		fdb_probe_actor_enter("watchValue", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose6();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("watchValue", reinterpret_cast<unsigned long>(this), 6);

	}
	int a_body1loopBody1cont1Catch1cont5(int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1Catch1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1Catch1cont6(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1Catch1cont5(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1Catch1cont6(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1Catch1cont5(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1Catch1when3(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1Catch1cont6(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1Catch1when3(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1Catch1cont6(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose7() 
	{
		if (static_cast<WatchValueActor*>(this)->actor_wait_state > 0) static_cast<WatchValueActor*>(this)->actor_wait_state = 0;
		static_cast<WatchValueActor*>(this)->ActorCallback< WatchValueActor, 7, Void >::remove();

	}
	void a_callback_fire(ActorCallback< WatchValueActor, 7, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("watchValue", reinterpret_cast<unsigned long>(this), 7);
		a_exitChoose7();
		try {
			a_body1loopBody1cont1Catch1when3(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("watchValue", reinterpret_cast<unsigned long>(this), 7);

	}
	void a_callback_fire(ActorCallback< WatchValueActor, 7, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("watchValue", reinterpret_cast<unsigned long>(this), 7);
		a_exitChoose7();
		try {
			a_body1loopBody1cont1Catch1when3(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("watchValue", reinterpret_cast<unsigned long>(this), 7);

	}
	void a_callback_error(ActorCallback< WatchValueActor, 7, Void >*,Error err) 
	{
		fdb_probe_actor_enter("watchValue", reinterpret_cast<unsigned long>(this), 7);
		a_exitChoose7();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("watchValue", reinterpret_cast<unsigned long>(this), 7);

	}
	int a_body1loopBody1cont1Catch1cont7(Void const& _,int loopDepth) 
	{
															#line 3992 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		return a_body1Catch1(err, std::max(0, loopDepth - 1));
															#line 17829 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"

		return loopDepth;
	}
	int a_body1loopBody1cont1Catch1cont7(Void && _,int loopDepth) 
	{
															#line 3992 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		return a_body1Catch1(err, std::max(0, loopDepth - 1));
															#line 17837 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"

		return loopDepth;
	}
	int a_body1loopBody1cont1Catch1when4(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1Catch1cont7(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1Catch1when4(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1Catch1cont7(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose8() 
	{
		if (static_cast<WatchValueActor*>(this)->actor_wait_state > 0) static_cast<WatchValueActor*>(this)->actor_wait_state = 0;
		static_cast<WatchValueActor*>(this)->ActorCallback< WatchValueActor, 8, Void >::remove();

	}
	void a_callback_fire(ActorCallback< WatchValueActor, 8, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("watchValue", reinterpret_cast<unsigned long>(this), 8);
		a_exitChoose8();
		try {
			a_body1loopBody1cont1Catch1when4(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("watchValue", reinterpret_cast<unsigned long>(this), 8);

	}
	void a_callback_fire(ActorCallback< WatchValueActor, 8, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("watchValue", reinterpret_cast<unsigned long>(this), 8);
		a_exitChoose8();
		try {
			a_body1loopBody1cont1Catch1when4(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("watchValue", reinterpret_cast<unsigned long>(this), 8);

	}
	void a_callback_error(ActorCallback< WatchValueActor, 8, Void >*,Error err) 
	{
		fdb_probe_actor_enter("watchValue", reinterpret_cast<unsigned long>(this), 8);
		a_exitChoose8();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("watchValue", reinterpret_cast<unsigned long>(this), 8);

	}
															#line 3913 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Database cx;
															#line 3913 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<const WatchParameters> parameters;
															#line 3914 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Span span;
															#line 3915 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Version ver;
															#line 3920 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeyRangeLocationInfo locationInfo;
															#line 3930 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Optional<UID> watchValueID;
															#line 3940 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	WatchValueReply resp;
															#line 3990 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Error err;
															#line 17920 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via watchValue()
															#line 3913 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class WatchValueActor final : public Actor<Version>, public ActorCallback< WatchValueActor, 0, KeyRangeLocationInfo >, public ActorCallback< WatchValueActor, 1, WatchValueReply >, public ActorCallback< WatchValueActor, 2, Void >, public ActorCallback< WatchValueActor, 3, Void >, public ActorCallback< WatchValueActor, 4, Version >, public ActorCallback< WatchValueActor, 5, Void >, public ActorCallback< WatchValueActor, 6, Void >, public ActorCallback< WatchValueActor, 7, Void >, public ActorCallback< WatchValueActor, 8, Void >, public FastAllocated<WatchValueActor>, public WatchValueActorState<WatchValueActor> {
															#line 17925 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<WatchValueActor>::operator new;
	using FastAllocated<WatchValueActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Version>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< WatchValueActor, 0, KeyRangeLocationInfo >;
friend struct ActorCallback< WatchValueActor, 1, WatchValueReply >;
friend struct ActorCallback< WatchValueActor, 2, Void >;
friend struct ActorCallback< WatchValueActor, 3, Void >;
friend struct ActorCallback< WatchValueActor, 4, Version >;
friend struct ActorCallback< WatchValueActor, 5, Void >;
friend struct ActorCallback< WatchValueActor, 6, Void >;
friend struct ActorCallback< WatchValueActor, 7, Void >;
friend struct ActorCallback< WatchValueActor, 8, Void >;
															#line 3913 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	WatchValueActor(Database const& cx,Reference<const WatchParameters> const& parameters) 
															#line 17944 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Version>(),
		   WatchValueActorState<WatchValueActor>(cx, parameters)
	{
		fdb_probe_actor_enter("watchValue", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("watchValue");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("watchValue", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< WatchValueActor, 0, KeyRangeLocationInfo >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< WatchValueActor, 1, WatchValueReply >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< WatchValueActor, 3, Void >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< WatchValueActor, 4, Version >*)0, actor_cancelled()); break;
		case 5: this->a_callback_error((ActorCallback< WatchValueActor, 5, Void >*)0, actor_cancelled()); break;
		case 6: this->a_callback_error((ActorCallback< WatchValueActor, 6, Void >*)0, actor_cancelled()); break;
		case 7: this->a_callback_error((ActorCallback< WatchValueActor, 7, Void >*)0, actor_cancelled()); break;
		case 8: this->a_callback_error((ActorCallback< WatchValueActor, 8, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 3913 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<Version> watchValue( Database const& cx, Reference<const WatchParameters> const& parameters ) {
															#line 3913 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Version>(new WatchValueActor(cx, parameters));
															#line 17979 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 3997 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

															#line 17984 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via watchStorageServerResp()
															#line 3998 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class WatchStorageServerRespActor>
															#line 3998 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class WatchStorageServerRespActorState {
															#line 17991 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 3998 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	WatchStorageServerRespActorState(int64_t const& tenantId,Key const& key,Database const& cx) 
															#line 3998 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 3998 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : tenantId(tenantId),
															#line 3998 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   key(key),
															#line 3998 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   cx(cx)
															#line 18002 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("watchStorageServerResp", reinterpret_cast<unsigned long>(this));

	}
	~WatchStorageServerRespActorState() 
	{
		fdb_probe_actor_destroy("watchStorageServerResp", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 3999 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			;
															#line 18017 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~WatchStorageServerRespActorState();
		static_cast<WatchStorageServerRespActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
		try {
															#line 4001 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			metadata = cx->getWatchMetadata(tenantId, key);
															#line 4002 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!metadata.isValid())
															#line 18050 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 4003 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (!static_cast<WatchStorageServerRespActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~WatchStorageServerRespActorState(); static_cast<WatchStorageServerRespActor*>(this)->destroy(); return 0; }
															#line 18054 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				new (&static_cast<WatchStorageServerRespActor*>(this)->SAV< Void >::value()) Void(Void());
				this->~WatchStorageServerRespActorState();
				static_cast<WatchStorageServerRespActor*>(this)->finishSendAndDelPromiseRef();
				return 0;
			}
															#line 4005 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Version> __when_expr_0 = watchValue(cx, metadata->parameters);
															#line 4005 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<WatchStorageServerRespActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 18064 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1loopBody1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
			static_cast<WatchStorageServerRespActor*>(this)->actor_wait_state = 1;
															#line 4005 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< WatchStorageServerRespActor, 0, Version >*>(static_cast<WatchStorageServerRespActor*>(this)));
															#line 18069 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 4028 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (e.code() == error_code_operation_cancelled)
															#line 18091 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 4029 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				return a_body1Catch1(e, std::max(0, loopDepth - 1));
															#line 18095 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 4032 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			Reference<WatchMetadata> metadata = cx->getWatchMetadata(tenantId, key);
															#line 4033 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!metadata.isValid())
															#line 18101 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 4034 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (!static_cast<WatchStorageServerRespActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~WatchStorageServerRespActorState(); static_cast<WatchStorageServerRespActor*>(this)->destroy(); return 0; }
															#line 18105 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				new (&static_cast<WatchStorageServerRespActor*>(this)->SAV< Void >::value()) Void(Void());
				this->~WatchStorageServerRespActorState();
				static_cast<WatchStorageServerRespActor*>(this)->finishSendAndDelPromiseRef();
				return 0;
			}
			else
			{
															#line 4035 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (metadata->watchPromise.getFutureReferenceCount() == 1)
															#line 18115 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 4036 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					cx->deleteWatchMetadata(tenantId, key);
															#line 4037 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					if (!static_cast<WatchStorageServerRespActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~WatchStorageServerRespActorState(); static_cast<WatchStorageServerRespActor*>(this)->destroy(); return 0; }
															#line 18121 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					new (&static_cast<WatchStorageServerRespActor*>(this)->SAV< Void >::value()) Void(Void());
					this->~WatchStorageServerRespActorState();
					static_cast<WatchStorageServerRespActor*>(this)->finishSendAndDelPromiseRef();
					return 0;
				}
				else
				{
															#line 4038 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					if (e.code() == error_code_future_version)
															#line 18131 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					{
						return a_body1loopHead1(loopDepth); // continue
					}
				}
			}
															#line 4041 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			cx->deleteWatchMetadata(tenantId, key);
															#line 4042 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			metadata->watchPromise.sendError(e);
															#line 4043 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			return a_body1Catch1(e, std::max(0, loopDepth - 1));
															#line 18143 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(Version const& watchVersion,int loopDepth) 
	{
															#line 4007 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		metadata = cx->getWatchMetadata(tenantId, key);
															#line 4008 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!metadata.isValid())
															#line 18159 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 4009 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<WatchStorageServerRespActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~WatchStorageServerRespActorState(); static_cast<WatchStorageServerRespActor*>(this)->destroy(); return 0; }
															#line 18163 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<WatchStorageServerRespActor*>(this)->SAV< Void >::value()) Void(Void());
			this->~WatchStorageServerRespActorState();
			static_cast<WatchStorageServerRespActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 4012 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (watchVersion >= metadata->parameters->version)
															#line 18171 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 4013 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			cx->deleteWatchMetadata(tenantId, key);
															#line 4014 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (metadata->watchPromise.canBeSet())
															#line 18177 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 4015 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				metadata->watchPromise.send(watchVersion);
															#line 18181 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
		}
		else
		{
															#line 4019 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			CODE_PROBE(true, "ABA issue where the version returned from the server is less than the version in the map");
															#line 4023 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (metadata->watchPromise.getFutureReferenceCount() == 1)
															#line 18190 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 4024 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				cx->deleteWatchMetadata(tenantId, key);
															#line 18194 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
		}
		loopDepth = a_body1loopBody1cont10(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2(Version && watchVersion,int loopDepth) 
	{
															#line 4007 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		metadata = cx->getWatchMetadata(tenantId, key);
															#line 4008 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!metadata.isValid())
															#line 18207 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 4009 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<WatchStorageServerRespActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~WatchStorageServerRespActorState(); static_cast<WatchStorageServerRespActor*>(this)->destroy(); return 0; }
															#line 18211 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<WatchStorageServerRespActor*>(this)->SAV< Void >::value()) Void(Void());
			this->~WatchStorageServerRespActorState();
			static_cast<WatchStorageServerRespActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 4012 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (watchVersion >= metadata->parameters->version)
															#line 18219 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 4013 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			cx->deleteWatchMetadata(tenantId, key);
															#line 4014 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (metadata->watchPromise.canBeSet())
															#line 18225 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 4015 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				metadata->watchPromise.send(watchVersion);
															#line 18229 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
		}
		else
		{
															#line 4019 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			CODE_PROBE(true, "ABA issue where the version returned from the server is less than the version in the map");
															#line 4023 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (metadata->watchPromise.getFutureReferenceCount() == 1)
															#line 18238 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 4024 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				cx->deleteWatchMetadata(tenantId, key);
															#line 18242 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
		}
		loopDepth = a_body1loopBody1cont10(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Version const& watchVersion,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(watchVersion, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Version && watchVersion,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(std::move(watchVersion), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<WatchStorageServerRespActor*>(this)->actor_wait_state > 0) static_cast<WatchStorageServerRespActor*>(this)->actor_wait_state = 0;
		static_cast<WatchStorageServerRespActor*>(this)->ActorCallback< WatchStorageServerRespActor, 0, Version >::remove();

	}
	void a_callback_fire(ActorCallback< WatchStorageServerRespActor, 0, Version >*,Version const& value) 
	{
		fdb_probe_actor_enter("watchStorageServerResp", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("watchStorageServerResp", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< WatchStorageServerRespActor, 0, Version >*,Version && value) 
	{
		fdb_probe_actor_enter("watchStorageServerResp", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("watchStorageServerResp", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< WatchStorageServerRespActor, 0, Version >*,Error err) 
	{
		fdb_probe_actor_enter("watchStorageServerResp", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("watchStorageServerResp", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1cont10(int loopDepth) 
	{
		try {
			loopDepth = a_body1loopBody1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
															#line 3998 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	int64_t tenantId;
															#line 3998 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Key key;
															#line 3998 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Database cx;
															#line 4001 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<WatchMetadata> metadata;
															#line 18333 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via watchStorageServerResp()
															#line 3998 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class WatchStorageServerRespActor final : public Actor<Void>, public ActorCallback< WatchStorageServerRespActor, 0, Version >, public FastAllocated<WatchStorageServerRespActor>, public WatchStorageServerRespActorState<WatchStorageServerRespActor> {
															#line 18338 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<WatchStorageServerRespActor>::operator new;
	using FastAllocated<WatchStorageServerRespActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< WatchStorageServerRespActor, 0, Version >;
															#line 3998 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	WatchStorageServerRespActor(int64_t const& tenantId,Key const& key,Database const& cx) 
															#line 18349 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Void>(),
		   WatchStorageServerRespActorState<WatchStorageServerRespActor>(tenantId, key, cx)
	{
		fdb_probe_actor_enter("watchStorageServerResp", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("watchStorageServerResp");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("watchStorageServerResp", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< WatchStorageServerRespActor, 0, Version >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 3998 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<Void> watchStorageServerResp( int64_t const& tenantId, Key const& key, Database const& cx ) {
															#line 3998 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Void>(new WatchStorageServerRespActor(tenantId, key, cx));
															#line 18377 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 4047 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

															#line 18382 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via sameVersionDiffValue()
															#line 4048 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class SameVersionDiffValueActor>
															#line 4048 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class SameVersionDiffValueActorState {
															#line 18389 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 4048 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	SameVersionDiffValueActorState(Database const& cx,Reference<WatchParameters> const& parameters) 
															#line 4048 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 4048 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : cx(cx),
															#line 4048 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   parameters(parameters),
															#line 4049 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   tr(cx, parameters->tenant.hasTenant() ? makeReference<Tenant>(parameters->tenant.tenantId) : Optional<Reference<Tenant>>())
															#line 18400 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("sameVersionDiffValue", reinterpret_cast<unsigned long>(this));

	}
	~SameVersionDiffValueActorState() 
	{
		fdb_probe_actor_destroy("sameVersionDiffValue", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 4054 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			;
															#line 18415 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~SameVersionDiffValueActorState();
		static_cast<SameVersionDiffValueActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
		try {
															#line 4056 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!parameters->tenant.hasTenant())
															#line 18446 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 4057 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				tr.setOption(FDBTransactionOptions::READ_SYSTEM_KEYS);
															#line 18450 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 4060 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Optional<Value>> __when_expr_0 = tr.get(parameters->key);
															#line 4060 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<SameVersionDiffValueActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 18456 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1loopBody1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
			static_cast<SameVersionDiffValueActor*>(this)->actor_wait_state = 1;
															#line 4060 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< SameVersionDiffValueActor, 0, Optional<Value> >*>(static_cast<SameVersionDiffValueActor*>(this)));
															#line 18461 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 4088 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_2 = tr.onError(e);
															#line 4088 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<SameVersionDiffValueActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 18485 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1Catch1when1(__when_expr_2.get(), loopDepth); };
			static_cast<SameVersionDiffValueActor*>(this)->actor_wait_state = 3;
															#line 4088 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< SameVersionDiffValueActor, 2, Void >*>(static_cast<SameVersionDiffValueActor*>(this)));
															#line 18490 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(int loopDepth) 
	{
															#line 4061 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		Reference<WatchMetadata> metadata = cx->getWatchMetadata(parameters->tenant.tenantId, parameters->key);
															#line 4064 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (metadata.isValid() && valSS != metadata->parameters->value)
															#line 18507 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 4065 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			cx->deleteWatchMetadata(parameters->tenant.tenantId, parameters->key);
															#line 4067 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			metadata->watchPromise.send(parameters->version);
															#line 4068 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			metadata->watchFutureSS.cancel();
															#line 18515 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 4072 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (valSS == parameters->value && tr.getTransactionState()->tenantId() == parameters->tenant.tenantId)
															#line 18519 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 4073 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			metadata = makeReference<WatchMetadata>(parameters);
															#line 4074 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			cx->setWatchMetadata(metadata);
															#line 4076 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			metadata->watchFutureSS = watchStorageServerResp(parameters->tenant.tenantId, parameters->key, cx);
															#line 18527 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 4080 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (valSS != parameters->value)
															#line 18531 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 4081 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<SameVersionDiffValueActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~SameVersionDiffValueActorState(); static_cast<SameVersionDiffValueActor*>(this)->destroy(); return 0; }
															#line 18535 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<SameVersionDiffValueActor*>(this)->SAV< Void >::value()) Void(Void());
			this->~SameVersionDiffValueActorState();
			static_cast<SameVersionDiffValueActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 4084 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_1 = success(metadata->watchPromise.getFuture());
															#line 4084 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<SameVersionDiffValueActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 18545 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
		static_cast<SameVersionDiffValueActor*>(this)->actor_wait_state = 2;
															#line 4084 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< SameVersionDiffValueActor, 1, Void >*>(static_cast<SameVersionDiffValueActor*>(this)));
															#line 18550 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1when1(Optional<Value> const& __valSS,int loopDepth) 
	{
															#line 4060 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		valSS = __valSS;
															#line 18559 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont2(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Optional<Value> && __valSS,int loopDepth) 
	{
		valSS = std::move(__valSS);
		loopDepth = a_body1loopBody1cont2(loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<SameVersionDiffValueActor*>(this)->actor_wait_state > 0) static_cast<SameVersionDiffValueActor*>(this)->actor_wait_state = 0;
		static_cast<SameVersionDiffValueActor*>(this)->ActorCallback< SameVersionDiffValueActor, 0, Optional<Value> >::remove();

	}
	void a_callback_fire(ActorCallback< SameVersionDiffValueActor, 0, Optional<Value> >*,Optional<Value> const& value) 
	{
		fdb_probe_actor_enter("sameVersionDiffValue", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("sameVersionDiffValue", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< SameVersionDiffValueActor, 0, Optional<Value> >*,Optional<Value> && value) 
	{
		fdb_probe_actor_enter("sameVersionDiffValue", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("sameVersionDiffValue", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< SameVersionDiffValueActor, 0, Optional<Value> >*,Error err) 
	{
		fdb_probe_actor_enter("sameVersionDiffValue", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("sameVersionDiffValue", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1cont4(Void const& _,int loopDepth) 
	{
															#line 4086 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<SameVersionDiffValueActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~SameVersionDiffValueActorState(); static_cast<SameVersionDiffValueActor*>(this)->destroy(); return 0; }
															#line 18626 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<SameVersionDiffValueActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~SameVersionDiffValueActorState();
		static_cast<SameVersionDiffValueActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1cont4(Void && _,int loopDepth) 
	{
															#line 4086 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<SameVersionDiffValueActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~SameVersionDiffValueActorState(); static_cast<SameVersionDiffValueActor*>(this)->destroy(); return 0; }
															#line 18638 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<SameVersionDiffValueActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~SameVersionDiffValueActorState();
		static_cast<SameVersionDiffValueActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont4(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont4(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<SameVersionDiffValueActor*>(this)->actor_wait_state > 0) static_cast<SameVersionDiffValueActor*>(this)->actor_wait_state = 0;
		static_cast<SameVersionDiffValueActor*>(this)->ActorCallback< SameVersionDiffValueActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< SameVersionDiffValueActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("sameVersionDiffValue", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("sameVersionDiffValue", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< SameVersionDiffValueActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("sameVersionDiffValue", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("sameVersionDiffValue", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< SameVersionDiffValueActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("sameVersionDiffValue", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("sameVersionDiffValue", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<SameVersionDiffValueActor*>(this)->actor_wait_state > 0) static_cast<SameVersionDiffValueActor*>(this)->actor_wait_state = 0;
		static_cast<SameVersionDiffValueActor*>(this)->ActorCallback< SameVersionDiffValueActor, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< SameVersionDiffValueActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("sameVersionDiffValue", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("sameVersionDiffValue", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< SameVersionDiffValueActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("sameVersionDiffValue", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("sameVersionDiffValue", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< SameVersionDiffValueActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("sameVersionDiffValue", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("sameVersionDiffValue", reinterpret_cast<unsigned long>(this), 2);

	}
															#line 4048 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Database cx;
															#line 4048 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<WatchParameters> parameters;
															#line 4049 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	ReadYourWritesTransaction tr;
															#line 4060 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Optional<Value> valSS;
															#line 18792 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via sameVersionDiffValue()
															#line 4048 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class SameVersionDiffValueActor final : public Actor<Void>, public ActorCallback< SameVersionDiffValueActor, 0, Optional<Value> >, public ActorCallback< SameVersionDiffValueActor, 1, Void >, public ActorCallback< SameVersionDiffValueActor, 2, Void >, public FastAllocated<SameVersionDiffValueActor>, public SameVersionDiffValueActorState<SameVersionDiffValueActor> {
															#line 18797 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<SameVersionDiffValueActor>::operator new;
	using FastAllocated<SameVersionDiffValueActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< SameVersionDiffValueActor, 0, Optional<Value> >;
friend struct ActorCallback< SameVersionDiffValueActor, 1, Void >;
friend struct ActorCallback< SameVersionDiffValueActor, 2, Void >;
															#line 4048 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	SameVersionDiffValueActor(Database const& cx,Reference<WatchParameters> const& parameters) 
															#line 18810 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Void>(),
		   SameVersionDiffValueActorState<SameVersionDiffValueActor>(cx, parameters)
	{
		fdb_probe_actor_enter("sameVersionDiffValue", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("sameVersionDiffValue");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("sameVersionDiffValue", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< SameVersionDiffValueActor, 0, Optional<Value> >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< SameVersionDiffValueActor, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< SameVersionDiffValueActor, 2, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 4048 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<Void> sameVersionDiffValue( Database const& cx, Reference<WatchParameters> const& parameters ) {
															#line 4048 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Void>(new SameVersionDiffValueActor(cx, parameters));
															#line 18840 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 4092 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

Future<Void> getWatchFuture(Database cx, Reference<WatchParameters> parameters) {
	Reference<WatchMetadata> metadata = cx->getWatchMetadata(parameters->tenant.tenantId, parameters->key);

	// case 1: key not in map
	if (!metadata.isValid()) {
		metadata = makeReference<WatchMetadata>(parameters);
		cx->setWatchMetadata(metadata);

		metadata->watchFutureSS = watchStorageServerResp(parameters->tenant.tenantId, parameters->key, cx);
		return success(metadata->watchPromise.getFuture());
	}
	// case 2: val_1 == val_2 (received watch with same value as key already in the map so just update)
	else if (metadata->parameters->value == parameters->value) {
		if (parameters->version > metadata->parameters->version) {
			metadata->parameters = parameters;
		}

		return success(metadata->watchPromise.getFuture());
	}
	// case 3: val_1 != val_2 && version_2 > version_1 (received watch with different value and a higher version so
	// recreate in SS)
	else if (parameters->version > metadata->parameters->version) {
		CODE_PROBE(true,
		           "Setting a watch that has a different value than the one in the map but a higher version (newer)");
		cx->deleteWatchMetadata(parameters->tenant.tenantId, parameters->key);

		metadata->watchPromise.send(parameters->version);
		metadata->watchFutureSS.cancel();

		metadata = makeReference<WatchMetadata>(parameters);
		cx->setWatchMetadata(metadata);

		metadata->watchFutureSS = watchStorageServerResp(parameters->tenant.tenantId, parameters->key, cx);

		return success(metadata->watchPromise.getFuture());
	}
	// case 5: val_1 != val_2 && version_1 == version_2 (received watch with different value but same version)
	else if (metadata->parameters->version == parameters->version) {
		CODE_PROBE(true, "Setting a watch which has a different value than the one in the map but the same version");
		return sameVersionDiffValue(cx, parameters);
	}
	CODE_PROBE(true, "Setting a watch which has a different value than the one in the map but a lower version (older)");

	// case 4: val_1 != val_2 && version_2 < version_1
	return Void();
}

namespace {

// NOTE: Since an ACTOR could receive multiple exceptions for a single catch clause, e.g. broken promise together with
// operation cancelled, If the decreaseWatchRefCount is placed at the catch clause, it might be triggered for multiple
// times. One could check if the SAV isSet, but seems a more intuitive way is to use RAII-style constructor/destructor
// pair. Yet the object has to be constructed after a wait statement, so it must be trivially-constructible. This
// requires move-assignment operator implemented.
class WatchRefCountUpdater {
	Database cx;
	int64_t tenantID;
	KeyRef key;
	Version version;

public:
	WatchRefCountUpdater() = default;

	WatchRefCountUpdater(const Database& cx_, const int64_t tenantID_, KeyRef key_, const Version& ver)
	  : cx(cx_), tenantID(tenantID_), key(key_), version(ver) {}

	WatchRefCountUpdater& operator=(WatchRefCountUpdater&& other) {
		if (cx.getReference()) {
			cx->decreaseWatchRefCount(tenantID, key, version);
		}

		cx = std::move(other.cx);
		tenantID = std::move(other.tenantID);
		key = std::move(other.key);
		version = std::move(other.version);

		cx->increaseWatchRefCount(tenantID, key, version);

		return *this;
	}

	~WatchRefCountUpdater() {
		if (cx.getReference()) {
			cx->decreaseWatchRefCount(tenantID, key, version);
		}
	}
};

} // namespace

															#line 18935 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via watchValueMap()
															#line 4183 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class WatchValueMapActor>
															#line 4183 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class WatchValueMapActorState {
															#line 18942 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 4183 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	WatchValueMapActorState(Future<Version> const& version,TenantInfo const& tenant,Key const& key,Optional<Value> const& value,Database const& cx,TagSet const& tags,SpanContext const& spanContext,TaskPriority const& taskID,Optional<UID> const& debugID,UseProvisionalProxies const& useProvisionalProxies) 
															#line 4183 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 4183 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : version(version),
															#line 4183 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   tenant(tenant),
															#line 4183 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   key(key),
															#line 4183 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   value(value),
															#line 4183 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   cx(cx),
															#line 4183 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   tags(tags),
															#line 4183 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   spanContext(spanContext),
															#line 4183 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   taskID(taskID),
															#line 4183 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   debugID(debugID),
															#line 4183 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   useProvisionalProxies(useProvisionalProxies)
															#line 18967 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("watchValueMap", reinterpret_cast<unsigned long>(this));

	}
	~WatchValueMapActorState() 
	{
		fdb_probe_actor_destroy("watchValueMap", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 4193 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Version> __when_expr_0 = version;
															#line 4193 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<WatchValueMapActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 18984 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<WatchValueMapActor*>(this)->actor_wait_state = 1;
															#line 4193 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< WatchValueMapActor, 0, Version >*>(static_cast<WatchValueMapActor*>(this)));
															#line 18989 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~WatchValueMapActorState();
		static_cast<WatchValueMapActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 4194 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		watchRefCountUpdater = WatchRefCountUpdater(cx, tenant.tenantId, key, ver);
															#line 4196 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_1 = getWatchFuture(cx, makeReference<WatchParameters>( tenant, key, value, ver, tags, spanContext, taskID, debugID, useProvisionalProxies));
															#line 4196 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<WatchValueMapActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 19016 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<WatchValueMapActor*>(this)->actor_wait_state = 2;
															#line 4196 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< WatchValueMapActor, 1, Void >*>(static_cast<WatchValueMapActor*>(this)));
															#line 19021 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1when1(Version const& __ver,int loopDepth) 
	{
															#line 4193 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ver = __ver;
															#line 19030 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1when1(Version && __ver,int loopDepth) 
	{
		ver = std::move(__ver);
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<WatchValueMapActor*>(this)->actor_wait_state > 0) static_cast<WatchValueMapActor*>(this)->actor_wait_state = 0;
		static_cast<WatchValueMapActor*>(this)->ActorCallback< WatchValueMapActor, 0, Version >::remove();

	}
	void a_callback_fire(ActorCallback< WatchValueMapActor, 0, Version >*,Version const& value) 
	{
		fdb_probe_actor_enter("watchValueMap", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("watchValueMap", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< WatchValueMapActor, 0, Version >*,Version && value) 
	{
		fdb_probe_actor_enter("watchValueMap", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("watchValueMap", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< WatchValueMapActor, 0, Version >*,Error err) 
	{
		fdb_probe_actor_enter("watchValueMap", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("watchValueMap", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont2(Void const& _,int loopDepth) 
	{
															#line 4200 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<WatchValueMapActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~WatchValueMapActorState(); static_cast<WatchValueMapActor*>(this)->destroy(); return 0; }
															#line 19097 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<WatchValueMapActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~WatchValueMapActorState();
		static_cast<WatchValueMapActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont2(Void && _,int loopDepth) 
	{
															#line 4200 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<WatchValueMapActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~WatchValueMapActorState(); static_cast<WatchValueMapActor*>(this)->destroy(); return 0; }
															#line 19109 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<WatchValueMapActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~WatchValueMapActorState();
		static_cast<WatchValueMapActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<WatchValueMapActor*>(this)->actor_wait_state > 0) static_cast<WatchValueMapActor*>(this)->actor_wait_state = 0;
		static_cast<WatchValueMapActor*>(this)->ActorCallback< WatchValueMapActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< WatchValueMapActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("watchValueMap", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("watchValueMap", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< WatchValueMapActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("watchValueMap", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("watchValueMap", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< WatchValueMapActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("watchValueMap", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("watchValueMap", reinterpret_cast<unsigned long>(this), 1);

	}
															#line 4183 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Future<Version> version;
															#line 4183 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	TenantInfo tenant;
															#line 4183 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Key key;
															#line 4183 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Optional<Value> value;
															#line 4183 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Database cx;
															#line 4183 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	TagSet tags;
															#line 4183 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	SpanContext spanContext;
															#line 4183 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	TaskPriority taskID;
															#line 4183 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Optional<UID> debugID;
															#line 4183 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	UseProvisionalProxies useProvisionalProxies;
															#line 4193 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Version ver;
															#line 4194 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	WatchRefCountUpdater watchRefCountUpdater;
															#line 19204 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via watchValueMap()
															#line 4183 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class WatchValueMapActor final : public Actor<Void>, public ActorCallback< WatchValueMapActor, 0, Version >, public ActorCallback< WatchValueMapActor, 1, Void >, public FastAllocated<WatchValueMapActor>, public WatchValueMapActorState<WatchValueMapActor> {
															#line 19209 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<WatchValueMapActor>::operator new;
	using FastAllocated<WatchValueMapActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< WatchValueMapActor, 0, Version >;
friend struct ActorCallback< WatchValueMapActor, 1, Void >;
															#line 4183 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	WatchValueMapActor(Future<Version> const& version,TenantInfo const& tenant,Key const& key,Optional<Value> const& value,Database const& cx,TagSet const& tags,SpanContext const& spanContext,TaskPriority const& taskID,Optional<UID> const& debugID,UseProvisionalProxies const& useProvisionalProxies) 
															#line 19221 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Void>(),
		   WatchValueMapActorState<WatchValueMapActor>(version, tenant, key, value, cx, tags, spanContext, taskID, debugID, useProvisionalProxies)
	{
		fdb_probe_actor_enter("watchValueMap", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("watchValueMap");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("watchValueMap", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< WatchValueMapActor, 0, Version >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< WatchValueMapActor, 1, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 4183 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<Void> watchValueMap( Future<Version> const& version, TenantInfo const& tenant, Key const& key, Optional<Value> const& value, Database const& cx, TagSet const& tags, SpanContext const& spanContext, TaskPriority const& taskID, Optional<UID> const& debugID, UseProvisionalProxies const& useProvisionalProxies ) {
															#line 4183 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Void>(new WatchValueMapActor(version, tenant, key, value, cx, tags, spanContext, taskID, debugID, useProvisionalProxies));
															#line 19250 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 4202 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

template <class GetKeyValuesFamilyRequest>
void transformRangeLimits(GetRangeLimits limits, Reverse reverse, GetKeyValuesFamilyRequest& req) {
	if (limits.bytes != 0) {
		if (!limits.hasRowLimit())
			req.limit = CLIENT_KNOBS->REPLY_BYTE_LIMIT; // Can't get more than this many rows anyway
		else
			req.limit = std::min(CLIENT_KNOBS->REPLY_BYTE_LIMIT, limits.rows);

		if (reverse)
			req.limit *= -1;

		if (!limits.hasByteLimit())
			req.limitBytes = CLIENT_KNOBS->REPLY_BYTE_LIMIT;
		else
			req.limitBytes = std::min(CLIENT_KNOBS->REPLY_BYTE_LIMIT, limits.bytes);
	} else {
		req.limitBytes = CLIENT_KNOBS->REPLY_BYTE_LIMIT;
		req.limit = reverse ? -limits.minRows : limits.minRows;
	}
}

template <class GetKeyValuesFamilyRequest>
PublicRequestStream<GetKeyValuesFamilyRequest> StorageServerInterface::*getRangeRequestStream() {
	if constexpr (std::is_same<GetKeyValuesFamilyRequest, GetKeyValuesRequest>::value) {
		return &StorageServerInterface::getKeyValues;
	} else if (std::is_same<GetKeyValuesFamilyRequest, GetMappedKeyValuesRequest>::value) {
		return &StorageServerInterface::getMappedKeyValues;
	} else {
		UNREACHABLE();
	}
}

															#line 19287 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via getExactRange()
															#line 4235 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class GetKeyValuesFamilyRequest, class GetKeyValuesFamilyReply, class RangeResultFamily, class GetExactRangeActor>
															#line 4235 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetExactRangeActorState {
															#line 19294 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 4235 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetExactRangeActorState(Reference<TransactionState> const& trState,KeyRange const& keys,Key const& mapper,GetRangeLimits const& limits,Reverse const& reverse,UseTenant const& useTenant) 
															#line 4235 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 4235 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : trState(trState),
															#line 4235 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   keys(keys),
															#line 4235 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   mapper(mapper),
															#line 4235 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   limits(limits),
															#line 4235 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   reverse(reverse),
															#line 4235 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   useTenant(useTenant),
															#line 4242 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   output(),
															#line 4244 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   span("NAPI:getExactRange"_loc, trState->spanContext)
															#line 19315 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("getExactRange", reinterpret_cast<unsigned long>(this));

	}
	~GetExactRangeActorState() 
	{
		fdb_probe_actor_destroy("getExactRange", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 4246 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (useTenant && trState->tenant().present())
															#line 19330 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 4247 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				span.addAttribute("tenant"_sr, trState->tenant().get()->name.castTo<TenantNameRef>().orDefault("<unspecified>"_sr));
															#line 19334 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 4252 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			;
															#line 19338 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~GetExactRangeActorState();
		static_cast<GetExactRangeActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
															#line 4253 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<std::vector<KeyRangeLocationInfo>> __when_expr_0 = getKeyRangeLocations(trState, keys, CLIENT_KNOBS->GET_RANGE_SHARD_LIMIT, reverse, getRangeRequestStream<GetKeyValuesFamilyRequest>(), useTenant);
															#line 4253 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<GetExactRangeActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 19370 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
		static_cast<GetExactRangeActor*>(this)->actor_wait_state = 1;
															#line 4253 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< GetExactRangeActor, 0, std::vector<KeyRangeLocationInfo> >*>(static_cast<GetExactRangeActor*>(this)));
															#line 19375 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
															#line 4260 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(locations.size());
															#line 4261 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		shard = 0;
															#line 4262 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		;
															#line 19388 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont1loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(std::vector<KeyRangeLocationInfo> const& __locations,int loopDepth) 
	{
															#line 4253 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		locations = __locations;
															#line 19397 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(std::vector<KeyRangeLocationInfo> && __locations,int loopDepth) 
	{
		locations = std::move(__locations);
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<GetExactRangeActor*>(this)->actor_wait_state > 0) static_cast<GetExactRangeActor*>(this)->actor_wait_state = 0;
		static_cast<GetExactRangeActor*>(this)->ActorCallback< GetExactRangeActor, 0, std::vector<KeyRangeLocationInfo> >::remove();

	}
	void a_callback_fire(ActorCallback< GetExactRangeActor, 0, std::vector<KeyRangeLocationInfo> >*,std::vector<KeyRangeLocationInfo> const& value) 
	{
		fdb_probe_actor_enter("getExactRange", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getExactRange", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< GetExactRangeActor, 0, std::vector<KeyRangeLocationInfo> >*,std::vector<KeyRangeLocationInfo> && value) 
	{
		fdb_probe_actor_enter("getExactRange", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getExactRange", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< GetExactRangeActor, 0, std::vector<KeyRangeLocationInfo> >*,Error err) 
	{
		fdb_probe_actor_enter("getExactRange", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getExactRange", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1cont2(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1cont1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1cont1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1(int loopDepth) 
	{
															#line 4263 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		const KeyRangeRef& range = locations[shard].range;
															#line 4265 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		GetKeyValuesFamilyRequest req;
															#line 4266 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		req.mapper = mapper;
															#line 4267 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		req.arena.dependsOn(mapper.arena());
															#line 4269 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		req.tenantInfo = useTenant ? trState->getTenantInfo() : TenantInfo();
															#line 4270 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		req.version = trState->readVersion();
															#line 4271 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		req.begin = firstGreaterOrEqual(range.begin);
															#line 4272 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		req.end = firstGreaterOrEqual(range.end);
															#line 4274 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		req.spanContext = span.context;
															#line 4275 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		trState->cx->getLatestCommitVersions(locations[shard].locations, trState, req.ssLatestCommitVersions);
															#line 4278 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		req.arena.dependsOn(locations[shard].range.arena());
															#line 4280 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		transformRangeLimits(limits, reverse, req);
															#line 4281 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(req.limitBytes > 0 && req.limit != 0 && req.limit < 0 == reverse);
															#line 4284 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		req.tags = trState->cx->sampleReadTags() ? trState->options.readTags : Optional<TagSet>();
															#line 4286 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		req.options = trState->readOptions;
															#line 19505 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		try {
															#line 4289 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (trState->readOptions.present() && trState->readOptions.get().debugID.present())
															#line 19509 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 4290 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				g_traceBatch.addEvent("TransactionDebug", trState->readOptions.get().debugID.get().first(), "NativeAPI.getExactRange.Before");
															#line 19513 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 4302 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			++trState->cx->transactionPhysicalReads;
															#line 4303 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			rep = GetKeyValuesFamilyReply();
															#line 19519 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			try {
															#line 4306 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				StrictFuture<Void> __when_expr_1 = trState->cx->connectionFileChanged();
															#line 4305 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (static_cast<GetExactRangeActor*>(this)->actor_wait_state < 0) return a_body1loopBody1cont1loopBody1Catch2(actor_cancelled(), loopDepth);
															#line 19525 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1cont1loopBody1Catch2(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont1loopBody1when1(__when_expr_1.get(), loopDepth); };
															#line 4309 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				StrictFuture<GetKeyValuesFamilyReply> __when_expr_2 = loadBalance( trState->cx.getPtr(), locations[shard].locations, getRangeRequestStream<GetKeyValuesFamilyRequest>(), req, TaskPriority::DefaultPromiseEndpoint, AtMostOnce::False, trState->cx->enableLocalityLoadBalance ? &trState->cx->queueModel : nullptr);
															#line 19529 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1loopBody1cont1loopBody1Catch2(__when_expr_2.getError(), loopDepth); else return a_body1loopBody1cont1loopBody1when2(__when_expr_2.get(), loopDepth); };
				static_cast<GetExactRangeActor*>(this)->actor_wait_state = 2;
															#line 4306 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< GetExactRangeActor, 1, Void >*>(static_cast<GetExactRangeActor*>(this)));
															#line 4309 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< GetExactRangeActor, 2, GetKeyValuesFamilyReply >*>(static_cast<GetExactRangeActor*>(this)));
															#line 19536 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				loopDepth = 0;
			}
			catch (Error& error) {
				loopDepth = a_body1loopBody1cont1loopBody1Catch2(error, loopDepth);
			} catch (...) {
				loopDepth = a_body1loopBody1cont1loopBody1Catch2(unknown_error(), loopDepth);
			}
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1cont1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1cont1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1break1(int loopDepth) 
	{
		try {
			return a_body1loopBody1cont2(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopBody1cont1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 4402 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (e.code() == error_code_wrong_shard_server || e.code() == error_code_all_alternatives_failed)
															#line 19577 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 4403 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				const KeyRangeRef& range = locations[shard].range;
															#line 4405 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (reverse)
															#line 19583 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 4406 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					keys = KeyRangeRef(keys.begin, range.end);
															#line 19587 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
				else
				{
															#line 4408 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					keys = KeyRangeRef(range.begin, keys.end);
															#line 19593 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
															#line 4410 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				trState->cx->invalidateCache( useTenant ? trState->tenant().mapRef(&Tenant::prefix) : Optional<KeyRef>(), keys);
															#line 4413 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				StrictFuture<Void> __when_expr_3 = delay(CLIENT_KNOBS->WRONG_SHARD_SERVER_DELAY, trState->taskID);
															#line 4413 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (static_cast<GetExactRangeActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 2));
															#line 19601 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch1(__when_expr_3.getError(), std::max(0, loopDepth - 2)); else return a_body1loopBody1cont1loopBody1Catch1when1(__when_expr_3.get(), loopDepth); };
				static_cast<GetExactRangeActor*>(this)->actor_wait_state = 3;
															#line 4413 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< GetExactRangeActor, 3, Void >*>(static_cast<GetExactRangeActor*>(this)));
															#line 19606 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				loopDepth = 0;
			}
			else
			{
															#line 4416 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				TraceEvent(SevInfo, "GetExactRangeError") .error(e) .detail("Tenant", trState->tenant()) .detail("ShardBegin", locations[shard].range.begin) .detail("ShardEnd", locations[shard].range.end);
															#line 4421 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				return a_body1Catch1(e, std::max(0, loopDepth - 2));
															#line 19615 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 2));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 2));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1cont2(int loopDepth) 
	{
															#line 4325 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (trState->readOptions.present() && trState->readOptions.get().debugID.present())
															#line 19630 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 4326 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			g_traceBatch.addEvent("TransactionDebug", trState->readOptions.get().debugID.get().first(), "NativeAPI.getExactRange.After");
															#line 19634 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 4329 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		output.arena().dependsOn(rep.arena);
															#line 4330 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		output.append(output.arena(), rep.data.begin(), rep.data.size());
															#line 4332 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (limits.hasRowLimit() && rep.data.size() > limits.rows)
															#line 19642 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 4333 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent(SevError, "GetExactRangeTooManyRows") .detail("RowLimit", limits.rows) .detail("DeliveredRows", output.size());
															#line 4336 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ASSERT(false);
															#line 19648 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 4338 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		limits.decrement(rep.data);
															#line 4340 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (limits.isReached())
															#line 19654 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 4341 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			output.more = true;
															#line 4342 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<GetExactRangeActor*>(this)->SAV<RangeResultFamily>::futures) { (void)(output); this->~GetExactRangeActorState(); static_cast<GetExactRangeActor*>(this)->destroy(); return 0; }
															#line 19660 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<GetExactRangeActor*>(this)->SAV< RangeResultFamily >::value()) RangeResultFamily(std::move(output)); // state_var_RVO
			this->~GetExactRangeActorState();
			static_cast<GetExactRangeActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 4345 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		bool more = rep.more;
															#line 4347 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (reverse && more && rep.data.size() > 0 && output[output.size() - 1].key == locations[shard].range.begin)
															#line 19670 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 4349 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			more = false;
															#line 19674 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 4351 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (more)
															#line 19678 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 4352 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!rep.data.size())
															#line 19682 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 4353 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				TraceEvent(SevError, "GetExactRangeError") .detail("Reason", "More data indicated but no rows present") .detail("LimitBytes", limits.bytes) .detail("LimitRows", limits.rows) .detail("OutputSize", output.size()) .detail("OutputBytes", output.expectedSize()) .detail("BlockSize", rep.data.size()) .detail("BlockBytes", rep.data.expectedSize());
															#line 4361 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				ASSERT(false);
															#line 19688 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 4363 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			CODE_PROBE(true, "GetKeyValuesFamilyReply.more in getExactRange");
															#line 4365 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (reverse)
															#line 19694 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 4366 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				locations[shard].range = KeyRangeRef(locations[shard].range.begin, output[output.size() - 1].key);
															#line 19698 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
			else
			{
															#line 4369 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				locations[shard].range = KeyRangeRef(keyAfter(output[output.size() - 1].key), locations[shard].range.end);
															#line 19704 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
		}
															#line 4373 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!more || locations[shard].range.empty())
															#line 19709 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 4374 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			CODE_PROBE(true, "getExactrange (!more || locations[shard].first.empty())");
															#line 4375 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (shard == locations.size() - 1)
															#line 19715 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 4376 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				const KeyRangeRef& range = locations[shard].range;
															#line 4377 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				KeyRef begin = reverse ? keys.begin : range.end;
															#line 4378 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				KeyRef end = reverse ? range.begin : keys.end;
															#line 4380 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (begin >= end)
															#line 19725 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 4381 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					output.more = false;
															#line 4382 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					if (!static_cast<GetExactRangeActor*>(this)->SAV<RangeResultFamily>::futures) { (void)(output); this->~GetExactRangeActorState(); static_cast<GetExactRangeActor*>(this)->destroy(); return 0; }
															#line 19731 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					new (&static_cast<GetExactRangeActor*>(this)->SAV< RangeResultFamily >::value()) RangeResultFamily(std::move(output)); // state_var_RVO
					this->~GetExactRangeActorState();
					static_cast<GetExactRangeActor*>(this)->finishSendAndDelPromiseRef();
					return 0;
				}
															#line 4384 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				CODE_PROBE(true, "Multiple requests of key locations");
															#line 4386 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				keys = KeyRangeRef(begin, end);
															#line 19741 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				return a_body1loopBody1cont1break1(loopDepth==0?0:loopDepth-1); // break
			}
															#line 4390 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			++shard;
															#line 19746 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 4396 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (limits.hasSatisfiedMinRows() && output.size() > 0)
															#line 19750 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 4397 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			output.more = true;
															#line 4398 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<GetExactRangeActor*>(this)->SAV<RangeResultFamily>::futures) { (void)(output); this->~GetExactRangeActorState(); static_cast<GetExactRangeActor*>(this)->destroy(); return 0; }
															#line 19756 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<GetExactRangeActor*>(this)->SAV< RangeResultFamily >::value()) RangeResultFamily(std::move(output)); // state_var_RVO
			this->~GetExactRangeActorState();
			static_cast<GetExactRangeActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
		loopDepth = a_body1loopBody1cont1loopBody1cont20(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1Catch2(const Error& __current_error,int loopDepth=0) 
	{
		try {
															#line 4322 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			++trState->cx->transactionPhysicalReadsCompleted;
															#line 4323 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			return a_body1loopBody1cont1loopBody1Catch1(__current_error, loopDepth);
															#line 19773 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1cont1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1cont1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1cont4(int loopDepth) 
	{
															#line 4320 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		++trState->cx->transactionPhysicalReadsCompleted;
															#line 19787 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont1loopBody1cont6(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1when1(Void const& _,int loopDepth) 
	{
															#line 4307 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		return a_body1loopBody1cont1loopBody1Catch2(transaction_too_old(), loopDepth);
															#line 19796 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1when1(Void && _,int loopDepth) 
	{
															#line 4307 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		return a_body1loopBody1cont1loopBody1Catch2(transaction_too_old(), loopDepth);
															#line 19804 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1when2(GetKeyValuesFamilyReply const& _rep,int loopDepth) 
	{
															#line 4317 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		rep = _rep;
															#line 19812 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont1loopBody1cont4(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1when2(GetKeyValuesFamilyReply && _rep,int loopDepth) 
	{
															#line 4317 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		rep = _rep;
															#line 19821 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont1loopBody1cont4(loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<GetExactRangeActor*>(this)->actor_wait_state > 0) static_cast<GetExactRangeActor*>(this)->actor_wait_state = 0;
		static_cast<GetExactRangeActor*>(this)->ActorCallback< GetExactRangeActor, 1, Void >::remove();
		static_cast<GetExactRangeActor*>(this)->ActorCallback< GetExactRangeActor, 2, GetKeyValuesFamilyReply >::remove();

	}
	void a_callback_fire(ActorCallback< GetExactRangeActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getExactRange", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1loopBody1Catch2(error, 0);
		} catch (...) {
			a_body1loopBody1cont1loopBody1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getExactRange", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< GetExactRangeActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getExactRange", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1loopBody1Catch2(error, 0);
		} catch (...) {
			a_body1loopBody1cont1loopBody1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getExactRange", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< GetExactRangeActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getExactRange", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont1loopBody1Catch2(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1loopBody1Catch2(error, 0);
		} catch (...) {
			a_body1loopBody1cont1loopBody1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getExactRange", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< GetExactRangeActor, 2, GetKeyValuesFamilyReply >*,GetKeyValuesFamilyReply const& value) 
	{
		fdb_probe_actor_enter("getExactRange", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose2();
		try {
			a_body1loopBody1cont1loopBody1when2(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1loopBody1Catch2(error, 0);
		} catch (...) {
			a_body1loopBody1cont1loopBody1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getExactRange", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< GetExactRangeActor, 2, GetKeyValuesFamilyReply >*,GetKeyValuesFamilyReply && value) 
	{
		fdb_probe_actor_enter("getExactRange", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose2();
		try {
			a_body1loopBody1cont1loopBody1when2(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1loopBody1Catch2(error, 0);
		} catch (...) {
			a_body1loopBody1cont1loopBody1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getExactRange", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< GetExactRangeActor, 2, GetKeyValuesFamilyReply >*,Error err) 
	{
		fdb_probe_actor_enter("getExactRange", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose2();
		try {
			a_body1loopBody1cont1loopBody1Catch2(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1loopBody1Catch2(error, 0);
		} catch (...) {
			a_body1loopBody1cont1loopBody1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getExactRange", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1loopBody1cont1loopBody1cont6(int loopDepth) 
	{
		try {
			loopDepth = a_body1loopBody1cont1loopBody1cont2(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1cont1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1cont1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1cont20(int loopDepth) 
	{
		try {
			loopDepth = a_body1loopBody1cont1loopBody1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 2));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 2));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1Catch1cont2(Void const& _,int loopDepth) 
	{
		return a_body1loopBody1cont1break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1Catch1cont2(Void && _,int loopDepth) 
	{
		return a_body1loopBody1cont1break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1loopBody1Catch1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1loopBody1Catch1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<GetExactRangeActor*>(this)->actor_wait_state > 0) static_cast<GetExactRangeActor*>(this)->actor_wait_state = 0;
		static_cast<GetExactRangeActor*>(this)->ActorCallback< GetExactRangeActor, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetExactRangeActor, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getExactRange", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose3();
		try {
			a_body1loopBody1cont1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getExactRange", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< GetExactRangeActor, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getExactRange", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose3();
		try {
			a_body1loopBody1cont1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getExactRange", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< GetExactRangeActor, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getExactRange", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getExactRange", reinterpret_cast<unsigned long>(this), 3);

	}
															#line 4235 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<TransactionState> trState;
															#line 4235 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeyRange keys;
															#line 4235 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Key mapper;
															#line 4235 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetRangeLimits limits;
															#line 4235 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reverse reverse;
															#line 4235 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	UseTenant useTenant;
															#line 4242 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	RangeResultFamily output;
															#line 4244 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Span span;
															#line 4253 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	std::vector<KeyRangeLocationInfo> locations;
															#line 4261 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	int shard;
															#line 4303 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetKeyValuesFamilyReply rep;
															#line 20046 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via getExactRange()
															#line 4235 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class GetKeyValuesFamilyRequest, class GetKeyValuesFamilyReply, class RangeResultFamily>
															#line 4235 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetExactRangeActor final : public Actor<RangeResultFamily>, public ActorCallback< GetExactRangeActor<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily>, 0, std::vector<KeyRangeLocationInfo> >, public ActorCallback< GetExactRangeActor<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily>, 1, Void >, public ActorCallback< GetExactRangeActor<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily>, 2, GetKeyValuesFamilyReply >, public ActorCallback< GetExactRangeActor<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily>, 3, Void >, public FastAllocated<GetExactRangeActor<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily>>, public GetExactRangeActorState<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily, GetExactRangeActor<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily>> {
															#line 20053 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<GetExactRangeActor<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily>>::operator new;
	using FastAllocated<GetExactRangeActor<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily>>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<RangeResultFamily>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< GetExactRangeActor<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily>, 0, std::vector<KeyRangeLocationInfo> >;
friend struct ActorCallback< GetExactRangeActor<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily>, 1, Void >;
friend struct ActorCallback< GetExactRangeActor<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily>, 2, GetKeyValuesFamilyReply >;
friend struct ActorCallback< GetExactRangeActor<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily>, 3, Void >;
															#line 4235 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetExactRangeActor(Reference<TransactionState> const& trState,KeyRange const& keys,Key const& mapper,GetRangeLimits const& limits,Reverse const& reverse,UseTenant const& useTenant) 
															#line 20067 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<RangeResultFamily>(),
		   GetExactRangeActorState<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily, GetExactRangeActor<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily>>(trState, keys, mapper, limits, reverse, useTenant)
	{
		fdb_probe_actor_enter("getExactRange", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("getExactRange");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("getExactRange", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< GetExactRangeActor<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily>, 0, std::vector<KeyRangeLocationInfo> >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< GetExactRangeActor<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily>, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< GetExactRangeActor<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily>, 3, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 4235 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class GetKeyValuesFamilyRequest, class GetKeyValuesFamilyReply, class RangeResultFamily>
															#line 4235 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<RangeResultFamily> getExactRange( Reference<TransactionState> const& trState, KeyRange const& keys, Key const& mapper, GetRangeLimits const& limits, Reverse const& reverse, UseTenant const& useTenant ) {
															#line 4235 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<RangeResultFamily>(new GetExactRangeActor<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily>(trState, keys, mapper, limits, reverse, useTenant));
															#line 20099 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 4427 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

Future<Key> resolveKey(Reference<TransactionState> trState, KeySelector const& key, UseTenant useTenant) {
	if (key.isFirstGreaterOrEqual())
		return Future<Key>(key.getKey());

	if (key.isFirstGreaterThan())
		return Future<Key>(keyAfter(key.getKey()));

	return getKey(trState, key, useTenant);
}

															#line 20114 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via getRangeFallback()
															#line 4438 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class GetKeyValuesFamilyRequest, class GetKeyValuesFamilyReply, class RangeResultFamily, class GetRangeFallbackActor>
															#line 4438 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetRangeFallbackActorState {
															#line 20121 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 4438 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetRangeFallbackActorState(Reference<TransactionState> const& trState,KeySelector const& begin,KeySelector const& end,Key const& mapper,GetRangeLimits const& limits,Reverse const& reverse,UseTenant const& useTenant) 
															#line 4438 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 4438 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : trState(trState),
															#line 4438 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   begin(begin),
															#line 4438 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   end(end),
															#line 4438 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   mapper(mapper),
															#line 4438 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   limits(limits),
															#line 4438 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   reverse(reverse),
															#line 4438 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   useTenant(useTenant)
															#line 20140 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("getRangeFallback", reinterpret_cast<unsigned long>(this));

	}
	~GetRangeFallbackActorState() 
	{
		fdb_probe_actor_destroy("getRangeFallback", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 4446 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			Future<Key> fb = resolveKey(trState, begin, useTenant);
															#line 4447 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			fe = resolveKey(trState, end, useTenant);
															#line 4449 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Key> __when_expr_0 = fb;
															#line 4449 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<GetRangeFallbackActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 20161 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<GetRangeFallbackActor*>(this)->actor_wait_state = 1;
															#line 4449 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< GetRangeFallbackActor, 0, Key >*>(static_cast<GetRangeFallbackActor*>(this)));
															#line 20166 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~GetRangeFallbackActorState();
		static_cast<GetRangeFallbackActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 4450 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Key> __when_expr_1 = fe;
															#line 4450 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<GetRangeFallbackActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 20191 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<GetRangeFallbackActor*>(this)->actor_wait_state = 2;
															#line 4450 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< GetRangeFallbackActor, 1, Key >*>(static_cast<GetRangeFallbackActor*>(this)));
															#line 20196 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1when1(Key const& __b,int loopDepth) 
	{
															#line 4449 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		b = __b;
															#line 20205 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1when1(Key && __b,int loopDepth) 
	{
		b = std::move(__b);
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<GetRangeFallbackActor*>(this)->actor_wait_state > 0) static_cast<GetRangeFallbackActor*>(this)->actor_wait_state = 0;
		static_cast<GetRangeFallbackActor*>(this)->ActorCallback< GetRangeFallbackActor, 0, Key >::remove();

	}
	void a_callback_fire(ActorCallback< GetRangeFallbackActor, 0, Key >*,Key const& value) 
	{
		fdb_probe_actor_enter("getRangeFallback", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeFallback", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< GetRangeFallbackActor, 0, Key >*,Key && value) 
	{
		fdb_probe_actor_enter("getRangeFallback", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeFallback", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< GetRangeFallbackActor, 0, Key >*,Error err) 
	{
		fdb_probe_actor_enter("getRangeFallback", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeFallback", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont2(int loopDepth) 
	{
															#line 4451 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (b >= e)
															#line 20272 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 4452 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<GetRangeFallbackActor*>(this)->SAV<RangeResultFamily>::futures) { (void)(RangeResultFamily()); this->~GetRangeFallbackActorState(); static_cast<GetRangeFallbackActor*>(this)->destroy(); return 0; }
															#line 20276 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<GetRangeFallbackActor*>(this)->SAV< RangeResultFamily >::value()) RangeResultFamily(RangeResultFamily());
			this->~GetRangeFallbackActorState();
			static_cast<GetRangeFallbackActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 4459 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<RangeResultFamily> __when_expr_2 = getExactRange<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily>( trState, KeyRangeRef(b, e), mapper, limits, reverse, useTenant);
															#line 4459 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<GetRangeFallbackActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 20286 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont2when1(__when_expr_2.get(), loopDepth); };
		static_cast<GetRangeFallbackActor*>(this)->actor_wait_state = 3;
															#line 4459 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< GetRangeFallbackActor, 2, RangeResultFamily >*>(static_cast<GetRangeFallbackActor*>(this)));
															#line 20291 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1when1(Key const& __e,int loopDepth) 
	{
															#line 4450 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		e = __e;
															#line 20300 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont2(loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Key && __e,int loopDepth) 
	{
		e = std::move(__e);
		loopDepth = a_body1cont2(loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<GetRangeFallbackActor*>(this)->actor_wait_state > 0) static_cast<GetRangeFallbackActor*>(this)->actor_wait_state = 0;
		static_cast<GetRangeFallbackActor*>(this)->ActorCallback< GetRangeFallbackActor, 1, Key >::remove();

	}
	void a_callback_fire(ActorCallback< GetRangeFallbackActor, 1, Key >*,Key const& value) 
	{
		fdb_probe_actor_enter("getRangeFallback", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeFallback", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< GetRangeFallbackActor, 1, Key >*,Key && value) 
	{
		fdb_probe_actor_enter("getRangeFallback", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeFallback", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< GetRangeFallbackActor, 1, Key >*,Error err) 
	{
		fdb_probe_actor_enter("getRangeFallback", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeFallback", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont3(RangeResultFamily const& _r,int loopDepth) 
	{
															#line 4461 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		RangeResultFamily r = _r;
															#line 4463 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (b == allKeys.begin && ((reverse && !r.more) || !reverse))
															#line 20369 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 4464 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			r.readToBegin = true;
															#line 20373 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 4471 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (e == allKeys.end && ((!reverse && !r.more) || reverse))
															#line 20377 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 4472 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			r.readThroughEnd = true;
															#line 20381 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 4474 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(!limits.hasRowLimit() || r.size() <= limits.rows);
															#line 4477 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (limits.hasByteLimit() && r.expectedSize() > size_t(limits.bytes + CLIENT_KNOBS->SYSTEM_KEY_SIZE_LIMIT + CLIENT_KNOBS->VALUE_SIZE_LIMIT + 1) && limits.minRows == 0)
															#line 20387 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 4481 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent(SevWarnAlways, "GetRangeFallbackTooMuchData") .detail("LimitBytes", limits.bytes) .detail("DeliveredBytes", r.expectedSize()) .detail("LimitRows", limits.rows) .detail("DeliveredRows", r.size());
															#line 20391 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 4488 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<GetRangeFallbackActor*>(this)->SAV<RangeResultFamily>::futures) { (void)(r); this->~GetRangeFallbackActorState(); static_cast<GetRangeFallbackActor*>(this)->destroy(); return 0; }
															#line 20395 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<GetRangeFallbackActor*>(this)->SAV< RangeResultFamily >::value()) RangeResultFamily(r);
		this->~GetRangeFallbackActorState();
		static_cast<GetRangeFallbackActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont3(RangeResultFamily && _r,int loopDepth) 
	{
															#line 4461 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		RangeResultFamily r = _r;
															#line 4463 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (b == allKeys.begin && ((reverse && !r.more) || !reverse))
															#line 20409 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 4464 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			r.readToBegin = true;
															#line 20413 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 4471 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (e == allKeys.end && ((!reverse && !r.more) || reverse))
															#line 20417 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 4472 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			r.readThroughEnd = true;
															#line 20421 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 4474 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(!limits.hasRowLimit() || r.size() <= limits.rows);
															#line 4477 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (limits.hasByteLimit() && r.expectedSize() > size_t(limits.bytes + CLIENT_KNOBS->SYSTEM_KEY_SIZE_LIMIT + CLIENT_KNOBS->VALUE_SIZE_LIMIT + 1) && limits.minRows == 0)
															#line 20427 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 4481 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent(SevWarnAlways, "GetRangeFallbackTooMuchData") .detail("LimitBytes", limits.bytes) .detail("DeliveredBytes", r.expectedSize()) .detail("LimitRows", limits.rows) .detail("DeliveredRows", r.size());
															#line 20431 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 4488 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<GetRangeFallbackActor*>(this)->SAV<RangeResultFamily>::futures) { (void)(r); this->~GetRangeFallbackActorState(); static_cast<GetRangeFallbackActor*>(this)->destroy(); return 0; }
															#line 20435 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<GetRangeFallbackActor*>(this)->SAV< RangeResultFamily >::value()) RangeResultFamily(r);
		this->~GetRangeFallbackActorState();
		static_cast<GetRangeFallbackActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont2when1(RangeResultFamily const& _r,int loopDepth) 
	{
		loopDepth = a_body1cont3(_r, loopDepth);

		return loopDepth;
	}
	int a_body1cont2when1(RangeResultFamily && _r,int loopDepth) 
	{
		loopDepth = a_body1cont3(std::move(_r), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<GetRangeFallbackActor*>(this)->actor_wait_state > 0) static_cast<GetRangeFallbackActor*>(this)->actor_wait_state = 0;
		static_cast<GetRangeFallbackActor*>(this)->ActorCallback< GetRangeFallbackActor, 2, RangeResultFamily >::remove();

	}
	void a_callback_fire(ActorCallback< GetRangeFallbackActor, 2, RangeResultFamily >*,RangeResultFamily const& value) 
	{
		fdb_probe_actor_enter("getRangeFallback", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeFallback", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< GetRangeFallbackActor, 2, RangeResultFamily >*,RangeResultFamily && value) 
	{
		fdb_probe_actor_enter("getRangeFallback", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeFallback", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< GetRangeFallbackActor, 2, RangeResultFamily >*,Error err) 
	{
		fdb_probe_actor_enter("getRangeFallback", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeFallback", reinterpret_cast<unsigned long>(this), 2);

	}
															#line 4438 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<TransactionState> trState;
															#line 4438 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeySelector begin;
															#line 4438 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeySelector end;
															#line 4438 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Key mapper;
															#line 4438 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetRangeLimits limits;
															#line 4438 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reverse reverse;
															#line 4438 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	UseTenant useTenant;
															#line 4447 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Future<Key> fe;
															#line 4449 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Key b;
															#line 4450 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Key e;
															#line 20526 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via getRangeFallback()
															#line 4438 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class GetKeyValuesFamilyRequest, class GetKeyValuesFamilyReply, class RangeResultFamily>
															#line 4438 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetRangeFallbackActor final : public Actor<RangeResultFamily>, public ActorCallback< GetRangeFallbackActor<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily>, 0, Key >, public ActorCallback< GetRangeFallbackActor<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily>, 1, Key >, public ActorCallback< GetRangeFallbackActor<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily>, 2, RangeResultFamily >, public FastAllocated<GetRangeFallbackActor<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily>>, public GetRangeFallbackActorState<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily, GetRangeFallbackActor<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily>> {
															#line 20533 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<GetRangeFallbackActor<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily>>::operator new;
	using FastAllocated<GetRangeFallbackActor<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily>>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<RangeResultFamily>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< GetRangeFallbackActor<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily>, 0, Key >;
friend struct ActorCallback< GetRangeFallbackActor<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily>, 1, Key >;
friend struct ActorCallback< GetRangeFallbackActor<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily>, 2, RangeResultFamily >;
															#line 4438 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetRangeFallbackActor(Reference<TransactionState> const& trState,KeySelector const& begin,KeySelector const& end,Key const& mapper,GetRangeLimits const& limits,Reverse const& reverse,UseTenant const& useTenant) 
															#line 20546 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<RangeResultFamily>(),
		   GetRangeFallbackActorState<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily, GetRangeFallbackActor<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily>>(trState, begin, end, mapper, limits, reverse, useTenant)
	{
		fdb_probe_actor_enter("getRangeFallback", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("getRangeFallback");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("getRangeFallback", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< GetRangeFallbackActor<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily>, 0, Key >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< GetRangeFallbackActor<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily>, 1, Key >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< GetRangeFallbackActor<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily>, 2, RangeResultFamily >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 4438 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class GetKeyValuesFamilyRequest, class GetKeyValuesFamilyReply, class RangeResultFamily>
															#line 4438 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<RangeResultFamily> getRangeFallback( Reference<TransactionState> const& trState, KeySelector const& begin, KeySelector const& end, Key const& mapper, GetRangeLimits const& limits, Reverse const& reverse, UseTenant const& useTenant ) {
															#line 4438 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<RangeResultFamily>(new GetRangeFallbackActor<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily>(trState, begin, end, mapper, limits, reverse, useTenant));
															#line 20578 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 4490 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

int64_t inline getRangeResultFamilyBytes(RangeResultRef result) {
	return result.expectedSize();
}

int64_t inline getRangeResultFamilyBytes(MappedRangeResultRef result) {
	int64_t bytes = 0;
	for (const MappedKeyValueRef& mappedKeyValue : result) {
		bytes += mappedKeyValue.key.size() + mappedKeyValue.value.size();
		auto& reqAndResult = mappedKeyValue.reqAndResult;
		if (std::holds_alternative<GetValueReqAndResultRef>(reqAndResult)) {
			auto getValue = std::get<GetValueReqAndResultRef>(reqAndResult);
			bytes += getValue.expectedSize();
		} else if (std::holds_alternative<GetRangeReqAndResultRef>(reqAndResult)) {
			auto getRange = std::get<GetRangeReqAndResultRef>(reqAndResult);
			bytes += getRange.result.expectedSize();
		} else {
			throw internal_error();
		}
	}
	return bytes;
}

// TODO: Client should add mapped keys to conflict ranges.
template <class RangeResultFamily> // RangeResult or MappedRangeResult
void getRangeFinished(Reference<TransactionState> trState,
                      double startTime,
                      KeySelector begin,
                      KeySelector end,
                      Snapshot snapshot,
                      Promise<std::pair<Key, Key>> conflictRange,
                      Reverse reverse,
                      RangeResultFamily result) {
	int64_t bytes = getRangeResultFamilyBytes(result);

	trState->totalCost += getReadOperationCost(bytes);
	trState->cx->transactionBytesRead += bytes;
	trState->cx->transactionKeysRead += result.size();

	if (trState->trLogInfo) {
		trState->trLogInfo->addLog(FdbClientLogEvents::EventGetRange(startTime,
		                                                             trState->cx->clientLocality.dcId(),
		                                                             now() - startTime,
		                                                             bytes,
		                                                             begin.getKey(),
		                                                             end.getKey(),
		                                                             trState->tenant().flatMapRef(&Tenant::name)));
	}

	if (!snapshot) {
		Key rangeBegin;
		Key rangeEnd;

		if (result.readToBegin) {
			rangeBegin = allKeys.begin;
		} else if (((!reverse || !result.more || begin.offset > 1) && begin.offset > 0) || result.size() == 0) {
			rangeBegin = Key(begin.getKey(), begin.arena());
		} else {
			rangeBegin = reverse ? result.end()[-1].key : result[0].key;
		}

		if (end.offset > begin.offset && end.getKey() < rangeBegin) {
			rangeBegin = Key(end.getKey(), end.arena());
		}

		if (result.readThroughEnd) {
			rangeEnd = allKeys.end;
		} else if (((reverse || !result.more || end.offset <= 0) && end.offset <= 1) || result.size() == 0) {
			rangeEnd = Key(end.getKey(), end.arena());
		} else {
			rangeEnd = keyAfter(reverse ? result[0].key : result.end()[-1].key);
		}

		if (begin.offset < end.offset && begin.getKey() > rangeEnd) {
			rangeEnd = Key(begin.getKey(), begin.arena());
		}

		conflictRange.send(std::make_pair(rangeBegin, rangeEnd));
	}
}

															#line 20663 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via getRange()
															#line 4571 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class GetKeyValuesFamilyRequest, class GetKeyValuesFamilyReply, class RangeResultFamily, class GetRangeActor>
															#line 4571 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetRangeActorState {
															#line 20670 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 4571 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetRangeActorState(Reference<TransactionState> const& trState,KeySelector const& begin,KeySelector const& end,Key const& mapper,GetRangeLimits const& limits,Promise<std::pair<Key, Key>> const& conflictRange,Snapshot const& snapshot,Reverse const& reverse,UseTenant const& useTenant = UseTenant::True) 
															#line 4571 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 4571 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : trState(trState),
															#line 4571 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   begin(begin),
															#line 4571 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   end(end),
															#line 4571 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   mapper(mapper),
															#line 4571 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   limits(limits),
															#line 4571 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   conflictRange(conflictRange),
															#line 4571 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   snapshot(snapshot),
															#line 4571 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   reverse(reverse),
															#line 4571 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   useTenant(useTenant),
															#line 4587 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   originalLimits(limits),
															#line 4588 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   originalBegin(begin),
															#line 4589 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   originalEnd(end),
															#line 4590 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   output(),
															#line 4591 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   span("NAPI:getRange"_loc, trState->spanContext),
															#line 4592 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   getRangeID(Optional<UID>())
															#line 20705 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("getRange", reinterpret_cast<unsigned long>(this));

	}
	~GetRangeActorState() 
	{
		fdb_probe_actor_destroy("getRange", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 4593 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (useTenant && trState->tenant().present())
															#line 20720 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 4594 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				span.addAttribute("tenant"_sr, trState->tenant().get()->name.castTo<TenantNameRef>().orDefault("<unspecified>"_sr));
															#line 20724 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
			try {
															#line 4599 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				StrictFuture<Void> __when_expr_0 = trState->startTransaction();
															#line 4599 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (static_cast<GetRangeActor*>(this)->actor_wait_state < 0) return a_body1Catch2(actor_cancelled(), loopDepth);
															#line 20731 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch2(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
				static_cast<GetRangeActor*>(this)->actor_wait_state = 1;
															#line 4599 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< GetRangeActor, 0, Void >*>(static_cast<GetRangeActor*>(this)));
															#line 20736 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				loopDepth = 0;
			}
			catch (Error& error) {
				loopDepth = a_body1Catch2(error, loopDepth);
			} catch (...) {
				loopDepth = a_body1Catch2(unknown_error(), loopDepth);
			}
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~GetRangeActorState();
		static_cast<GetRangeActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1Catch2(const Error& e,int loopDepth=0) 
	{
		try {
															#line 4870 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (conflictRange.canBeSet())
															#line 20766 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 4871 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				conflictRange.send(std::make_pair(Key(), Key()));
															#line 20770 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 4874 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			return a_body1Catch1(e, loopDepth);
															#line 20774 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont3(Void const& _,int loopDepth) 
	{
															#line 4600 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		trState->cx->validateVersion(trState->readVersion());
															#line 4602 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		startTime = now();
															#line 4604 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (begin.getKey() == allKeys.begin && begin.offset < 1)
															#line 20792 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 4605 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			output.readToBegin = true;
															#line 4606 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			begin = KeySelector(firstGreaterOrEqual(begin.getKey()), begin.arena());
															#line 20798 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 4609 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(!limits.isReached());
															#line 4610 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT((!limits.hasRowLimit() || limits.rows >= limits.minRows) && limits.minRows >= 0);
															#line 4612 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		;
															#line 20806 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont3loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1cont3(Void && _,int loopDepth) 
	{
															#line 4600 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		trState->cx->validateVersion(trState->readVersion());
															#line 4602 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		startTime = now();
															#line 4604 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (begin.getKey() == allKeys.begin && begin.offset < 1)
															#line 20819 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 4605 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			output.readToBegin = true;
															#line 4606 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			begin = KeySelector(firstGreaterOrEqual(begin.getKey()), begin.arena());
															#line 20825 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 4609 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(!limits.isReached());
															#line 4610 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT((!limits.hasRowLimit() || limits.rows >= limits.minRows) && limits.minRows >= 0);
															#line 4612 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		;
															#line 20833 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont3loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont3(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont3(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<GetRangeActor*>(this)->actor_wait_state > 0) static_cast<GetRangeActor*>(this)->actor_wait_state = 0;
		static_cast<GetRangeActor*>(this)->ActorCallback< GetRangeActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetRangeActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getRange", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRange", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< GetRangeActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getRange", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRange", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< GetRangeActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getRange", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch2(err, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRange", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont3loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1cont3loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1(int loopDepth) 
	{
															#line 4613 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (end.getKey() == allKeys.begin && (end.offset < 1 || end.isFirstGreaterOrEqual()))
															#line 20912 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 4614 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			getRangeFinished( trState, startTime, originalBegin, originalEnd, snapshot, conflictRange, reverse, output);
															#line 4616 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<GetRangeActor*>(this)->SAV<RangeResultFamily>::futures) { (void)(output); this->~GetRangeActorState(); static_cast<GetRangeActor*>(this)->destroy(); return 0; }
															#line 20918 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<GetRangeActor*>(this)->SAV< RangeResultFamily >::value()) RangeResultFamily(std::move(output)); // state_var_RVO
			this->~GetRangeActorState();
			static_cast<GetRangeActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 4619 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		Key locationKey = reverse ? Key(end.getKey(), end.arena()) : Key(begin.getKey(), begin.arena());
															#line 4620 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		Reverse locationBackward{ reverse ? (end - 1).isBackward() : begin.isBackward() };
															#line 4621 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<KeyRangeLocationInfo> __when_expr_1 = getKeyLocation( trState, locationKey, getRangeRequestStream<GetKeyValuesFamilyRequest>(), locationBackward, useTenant);
															#line 4621 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<GetRangeActor*>(this)->actor_wait_state < 0) return a_body1Catch2(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 20932 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch2(__when_expr_1.getError(), std::max(0, loopDepth - 1)); else return a_body1cont3loopBody1when1(__when_expr_1.get(), loopDepth); };
		static_cast<GetRangeActor*>(this)->actor_wait_state = 2;
															#line 4621 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< GetRangeActor, 1, KeyRangeLocationInfo >*>(static_cast<GetRangeActor*>(this)));
															#line 20937 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont3loopBody1cont1(int loopDepth) 
	{
															#line 4623 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		shard = beginServer.range;
															#line 4624 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		modifiedSelectors = false;
															#line 4625 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		req = GetKeyValuesFamilyRequest();
															#line 4626 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		req.mapper = mapper;
															#line 4627 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		req.arena.dependsOn(mapper.arena());
															#line 4628 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		req.tenantInfo = useTenant ? trState->getTenantInfo() : TenantInfo();
															#line 4629 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		req.options = trState->readOptions;
															#line 4630 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		req.version = trState->readVersion();
															#line 4632 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		trState->cx->getLatestCommitVersions(beginServer.locations, trState, req.ssLatestCommitVersions);
															#line 4636 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		bool dependOnShard = false;
															#line 4637 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (reverse && (begin - 1).isDefinitelyLess(shard.begin) && (!begin.isFirstGreaterOrEqual() || begin.getKey() != shard.begin))
															#line 20966 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 4642 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			req.begin = firstGreaterOrEqual(shard.begin);
															#line 4643 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			modifiedSelectors = true;
															#line 4644 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			req.arena.dependsOn(shard.arena());
															#line 4645 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			dependOnShard = true;
															#line 20976 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
		else
		{
															#line 4647 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			req.begin = begin;
															#line 4648 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			req.arena.dependsOn(begin.arena());
															#line 20984 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 4651 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!reverse && end.isDefinitelyGreater(shard.end))
															#line 20988 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 4652 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			req.end = firstGreaterOrEqual(shard.end);
															#line 4653 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			modifiedSelectors = true;
															#line 4654 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!dependOnShard)
															#line 20996 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 4655 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				req.arena.dependsOn(shard.arena());
															#line 21000 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
		}
		else
		{
															#line 4658 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			req.end = end;
															#line 4659 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			req.arena.dependsOn(end.arena());
															#line 21009 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 4662 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		transformRangeLimits(limits, reverse, req);
															#line 4663 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(req.limitBytes > 0 && req.limit != 0 && req.limit < 0 == reverse);
															#line 4665 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		req.tags = trState->cx->sampleReadTags() ? trState->options.readTags : Optional<TagSet>();
															#line 4666 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		req.spanContext = span.context;
															#line 4667 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (trState->readOptions.present() && trState->readOptions.get().debugID.present())
															#line 21021 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 4668 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			getRangeID = nondeterministicRandom()->randomUniqueID();
															#line 4669 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			g_traceBatch.addAttach( "TransactionAttachID", trState->readOptions.get().debugID.get().first(), getRangeID.get().first());
															#line 21027 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
		try {
															#line 4673 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (getRangeID.present())
															#line 21032 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 4674 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				g_traceBatch.addEvent("TransactionDebug", getRangeID.get().first(), "NativeAPI.getRange.Before");
															#line 21036 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 4694 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			++trState->cx->transactionPhysicalReads;
															#line 4695 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			rep = GetKeyValuesFamilyReply();
															#line 21042 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			try {
															#line 4697 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (CLIENT_BUGGIFY_WITH_PROB(.01))
															#line 21046 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 4698 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					return a_body1cont3loopBody1cont1Catch2(deterministicRandom()->randomChoice( std::vector<Error>{ transaction_too_old(), future_version() }), loopDepth);
															#line 21050 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
															#line 4702 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				StrictFuture<GetKeyValuesFamilyReply> __when_expr_2 = loadBalance(trState->cx.getPtr(), beginServer.locations, getRangeRequestStream<GetKeyValuesFamilyRequest>(), req, TaskPriority::DefaultPromiseEndpoint, AtMostOnce::False, trState->cx->enableLocalityLoadBalance ? &trState->cx->queueModel : nullptr);
															#line 4702 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (static_cast<GetRangeActor*>(this)->actor_wait_state < 0) return a_body1cont3loopBody1cont1Catch2(actor_cancelled(), loopDepth);
															#line 21056 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1cont3loopBody1cont1Catch2(__when_expr_2.getError(), loopDepth); else return a_body1cont3loopBody1cont1when1(__when_expr_2.get(), loopDepth); };
				static_cast<GetRangeActor*>(this)->actor_wait_state = 3;
															#line 4702 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< GetRangeActor, 2, GetKeyValuesFamilyReply >*>(static_cast<GetRangeActor*>(this)));
															#line 21061 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				loopDepth = 0;
			}
			catch (Error& error) {
				loopDepth = a_body1cont3loopBody1cont1Catch2(error, loopDepth);
			} catch (...) {
				loopDepth = a_body1cont3loopBody1cont1Catch2(unknown_error(), loopDepth);
			}
		}
		catch (Error& error) {
			loopDepth = a_body1cont3loopBody1cont1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1cont3loopBody1cont1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont3loopBody1when1(KeyRangeLocationInfo const& __beginServer,int loopDepth) 
	{
															#line 4621 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		beginServer = __beginServer;
															#line 21082 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont3loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1when1(KeyRangeLocationInfo && __beginServer,int loopDepth) 
	{
		beginServer = std::move(__beginServer);
		loopDepth = a_body1cont3loopBody1cont1(loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<GetRangeActor*>(this)->actor_wait_state > 0) static_cast<GetRangeActor*>(this)->actor_wait_state = 0;
		static_cast<GetRangeActor*>(this)->ActorCallback< GetRangeActor, 1, KeyRangeLocationInfo >::remove();

	}
	void a_callback_fire(ActorCallback< GetRangeActor, 1, KeyRangeLocationInfo >*,KeyRangeLocationInfo const& value) 
	{
		fdb_probe_actor_enter("getRange", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont3loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRange", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< GetRangeActor, 1, KeyRangeLocationInfo >*,KeyRangeLocationInfo && value) 
	{
		fdb_probe_actor_enter("getRange", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont3loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRange", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< GetRangeActor, 1, KeyRangeLocationInfo >*,Error err) 
	{
		fdb_probe_actor_enter("getRange", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch2(err, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRange", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont3loopBody1cont3(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1cont3loopHead1(0);

		return loopDepth;
	}
	int a_body1cont3loopBody1cont1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 4835 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (getRangeID.present())
															#line 21156 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 4836 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				g_traceBatch.addEvent("TransactionDebug", getRangeID.get().first(), "NativeAPI.getRange.Error");
															#line 4837 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				TraceEvent("TransactionDebugError", getRangeID.get()).error(e);
															#line 21162 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 4839 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (e.code() == error_code_wrong_shard_server || e.code() == error_code_all_alternatives_failed)
															#line 21166 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 4840 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				trState->cx->invalidateCache(useTenant ? trState->tenant().mapRef(&Tenant::prefix) : Optional<KeyRef>(), reverse ? end.getKey() : begin.getKey(), Reverse{ reverse ? (end - 1).isBackward() : begin.isBackward() });
															#line 4845 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (e.code() == error_code_wrong_shard_server)
															#line 21172 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 4846 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					StrictFuture<RangeResultFamily> __when_expr_4 = getRangeFallback<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily>( trState, originalBegin, originalEnd, mapper, originalLimits, reverse, useTenant);
															#line 4846 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					if (static_cast<GetRangeActor*>(this)->actor_wait_state < 0) return a_body1Catch2(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 21178 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1Catch2(__when_expr_4.getError(), std::max(0, loopDepth - 1)); else return a_body1cont3loopBody1cont1Catch1when1(__when_expr_4.get(), loopDepth); };
					static_cast<GetRangeActor*>(this)->actor_wait_state = 5;
															#line 4846 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< GetRangeActor, 4, RangeResultFamily >*>(static_cast<GetRangeActor*>(this)));
															#line 21183 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					loopDepth = 0;
				}
				else
				{
					loopDepth = a_body1cont3loopBody1cont1Catch1cont3(loopDepth);
				}
			}
			else
			{
															#line 4856 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (trState->trLogInfo)
															#line 21195 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 4857 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					trState->trLogInfo->addLog( FdbClientLogEvents::EventGetRangeError(startTime, trState->cx->clientLocality.dcId(), static_cast<int>(e.code()), begin.getKey(), end.getKey(), trState->tenant().flatMapRef(&Tenant::name)));
															#line 21199 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
															#line 4865 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				return a_body1Catch2(e, std::max(0, loopDepth - 1));
															#line 21203 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
		}
		catch (Error& error) {
			loopDepth = a_body1Catch2(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch2(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1cont3loopBody1cont10(int loopDepth) 
	{
															#line 4717 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (getRangeID.present())
															#line 21218 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 4718 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			g_traceBatch.addEvent("TransactionDebug", getRangeID.get().first(), "NativeAPI.getRange.After");
															#line 21222 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 4732 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(!rep.more || rep.data.size());
															#line 4733 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(!limits.hasRowLimit() || rep.data.size() <= limits.rows);
															#line 4735 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		limits.decrement(rep.data);
															#line 4737 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (reverse && begin.isLastLessOrEqual() && rep.data.size() && rep.data.end()[-1].key == begin.getKey())
															#line 21232 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 4739 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			modifiedSelectors = false;
															#line 21236 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 4742 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		bool finished = limits.isReached() || (!modifiedSelectors && !rep.more) || limits.hasSatisfiedMinRows();
															#line 4743 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		bool readThrough = modifiedSelectors && !rep.more;
															#line 4746 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (finished && !output.size())
															#line 21244 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 4747 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			bool readToBegin = output.readToBegin;
															#line 4748 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			bool readThroughEnd = output.readThroughEnd;
															#line 4750 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			using RangeResultRefFamily = typename RangeResultFamily::RefType;
															#line 4751 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			output = RangeResultFamily( RangeResultRefFamily(rep.data, modifiedSelectors || limits.isReached() || rep.more), rep.arena);
															#line 4753 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			output.readToBegin = readToBegin;
															#line 4754 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			output.readThroughEnd = readThroughEnd;
															#line 4756 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (BUGGIFY && limits.hasByteLimit() && output.size() > std::max(1, originalLimits.minRows) && (!std::is_same<GetKeyValuesFamilyRequest, GetMappedKeyValuesRequest>::value))
															#line 21260 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 4761 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				RangeResultFamily copy;
															#line 4762 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				int newSize = deterministicRandom()->randomInt(std::max(1, originalLimits.minRows), output.size());
															#line 4764 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				for(int i = 0;i < newSize;i++) {
															#line 4765 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					copy.push_back_deep(copy.arena(), output[i]);
															#line 21270 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
															#line 4767 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				output = copy;
															#line 4768 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				output.more = true;
															#line 4770 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				getRangeFinished( trState, startTime, originalBegin, originalEnd, snapshot, conflictRange, reverse, output);
															#line 4772 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (!static_cast<GetRangeActor*>(this)->SAV<RangeResultFamily>::futures) { (void)(output); this->~GetRangeActorState(); static_cast<GetRangeActor*>(this)->destroy(); return 0; }
															#line 21280 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				new (&static_cast<GetRangeActor*>(this)->SAV< RangeResultFamily >::value()) RangeResultFamily(std::move(output)); // state_var_RVO
				this->~GetRangeActorState();
				static_cast<GetRangeActor*>(this)->finishSendAndDelPromiseRef();
				return 0;
			}
															#line 4775 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (readThrough)
															#line 21288 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 4776 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				output.arena().dependsOn(shard.arena());
															#line 4778 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				ASSERT(modifiedSelectors);
															#line 4779 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				output.more = true;
															#line 4780 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				output.setReadThrough(reverse ? shard.begin : shard.end);
															#line 21298 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 4783 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			getRangeFinished( trState, startTime, originalBegin, originalEnd, snapshot, conflictRange, reverse, output);
															#line 4785 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!output.more)
															#line 21304 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 4786 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				ASSERT(!output.readThrough.present());
															#line 21308 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 4788 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<GetRangeActor*>(this)->SAV<RangeResultFamily>::futures) { (void)(output); this->~GetRangeActorState(); static_cast<GetRangeActor*>(this)->destroy(); return 0; }
															#line 21312 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<GetRangeActor*>(this)->SAV< RangeResultFamily >::value()) RangeResultFamily(std::move(output)); // state_var_RVO
			this->~GetRangeActorState();
			static_cast<GetRangeActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 4791 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		output.arena().dependsOn(rep.arena);
															#line 4792 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		output.append(output.arena(), rep.data.begin(), rep.data.size());
															#line 4794 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (finished)
															#line 21324 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 4795 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			output.more = modifiedSelectors || limits.isReached() || rep.more;
															#line 4796 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (readThrough)
															#line 21330 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 4797 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				output.arena().dependsOn(shard.arena());
															#line 4798 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				output.setReadThrough(reverse ? shard.begin : shard.end);
															#line 21336 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 4801 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			getRangeFinished( trState, startTime, originalBegin, originalEnd, snapshot, conflictRange, reverse, output);
															#line 4803 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!output.more)
															#line 21342 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 4804 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				ASSERT(!output.readThrough.present());
															#line 21346 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 4806 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<GetRangeActor*>(this)->SAV<RangeResultFamily>::futures) { (void)(output); this->~GetRangeActorState(); static_cast<GetRangeActor*>(this)->destroy(); return 0; }
															#line 21350 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<GetRangeActor*>(this)->SAV< RangeResultFamily >::value()) RangeResultFamily(std::move(output)); // state_var_RVO
			this->~GetRangeActorState();
			static_cast<GetRangeActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 4809 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!rep.more)
															#line 21358 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 4810 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ASSERT(modifiedSelectors);
															#line 4811 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			CODE_PROBE(true, "!GetKeyValuesFamilyReply.more and modifiedSelectors in getRange");
															#line 4813 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!rep.data.size())
															#line 21366 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 4814 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				StrictFuture<RangeResultFamily> __when_expr_3 = getRangeFallback<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily>( trState, originalBegin, originalEnd, mapper, originalLimits, reverse, useTenant);
															#line 4814 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (static_cast<GetRangeActor*>(this)->actor_wait_state < 0) return a_body1cont3loopBody1cont1Catch1(actor_cancelled(), loopDepth);
															#line 21372 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1cont3loopBody1cont1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1cont3loopBody1cont10when1(__when_expr_3.get(), loopDepth); };
				static_cast<GetRangeActor*>(this)->actor_wait_state = 4;
															#line 4814 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< GetRangeActor, 3, RangeResultFamily >*>(static_cast<GetRangeActor*>(this)));
															#line 21377 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				loopDepth = 0;
			}
			else
			{
				loopDepth = a_body1cont3loopBody1cont10cont12(loopDepth);
			}
		}
		else
		{
															#line 4827 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			CODE_PROBE(true, "GetKeyValuesFamilyReply.more in getRange");
															#line 4828 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (reverse)
															#line 21391 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 4829 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				end = firstGreaterOrEqual(output[output.size() - 1].key);
															#line 21395 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
			else
			{
															#line 4831 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				begin = firstGreaterThan(output[output.size() - 1].key);
															#line 21401 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
			loopDepth = a_body1cont3loopBody1cont10cont1(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont3loopBody1cont1Catch2(const Error& __current_error,int loopDepth=0) 
	{
		try {
															#line 4713 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			++trState->cx->transactionPhysicalReadsCompleted;
															#line 4714 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			return a_body1cont3loopBody1cont1Catch1(__current_error, loopDepth);
															#line 21415 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
		catch (Error& error) {
			loopDepth = a_body1cont3loopBody1cont1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1cont3loopBody1cont1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont3loopBody1cont12(GetKeyValuesFamilyReply const& _rep,int loopDepth) 
	{
															#line 4710 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		rep = _rep;
															#line 4711 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		++trState->cx->transactionPhysicalReadsCompleted;
															#line 21431 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont3loopBody1cont12cont2(loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1cont12(GetKeyValuesFamilyReply && _rep,int loopDepth) 
	{
															#line 4710 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		rep = _rep;
															#line 4711 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		++trState->cx->transactionPhysicalReadsCompleted;
															#line 21442 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont3loopBody1cont12cont2(loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1cont1when1(GetKeyValuesFamilyReply const& _rep,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1cont12(_rep, loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1cont1when1(GetKeyValuesFamilyReply && _rep,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1cont12(std::move(_rep), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<GetRangeActor*>(this)->actor_wait_state > 0) static_cast<GetRangeActor*>(this)->actor_wait_state = 0;
		static_cast<GetRangeActor*>(this)->ActorCallback< GetRangeActor, 2, GetKeyValuesFamilyReply >::remove();

	}
	void a_callback_fire(ActorCallback< GetRangeActor, 2, GetKeyValuesFamilyReply >*,GetKeyValuesFamilyReply const& value) 
	{
		fdb_probe_actor_enter("getRange", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont3loopBody1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont3loopBody1cont1Catch2(error, 0);
		} catch (...) {
			a_body1cont3loopBody1cont1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRange", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< GetRangeActor, 2, GetKeyValuesFamilyReply >*,GetKeyValuesFamilyReply && value) 
	{
		fdb_probe_actor_enter("getRange", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont3loopBody1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont3loopBody1cont1Catch2(error, 0);
		} catch (...) {
			a_body1cont3loopBody1cont1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRange", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< GetRangeActor, 2, GetKeyValuesFamilyReply >*,Error err) 
	{
		fdb_probe_actor_enter("getRange", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont3loopBody1cont1Catch2(err, 0);
		}
		catch (Error& error) {
			a_body1cont3loopBody1cont1Catch2(error, 0);
		} catch (...) {
			a_body1cont3loopBody1cont1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRange", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1cont3loopBody1cont12cont2(int loopDepth) 
	{
		try {
			loopDepth = a_body1cont3loopBody1cont10(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1cont3loopBody1cont1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1cont3loopBody1cont1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont3loopBody1cont10cont1(int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1cont10cont17(loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1cont10cont12(int loopDepth) 
	{
															#line 4822 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (reverse)
															#line 21533 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 4823 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			end = firstGreaterOrEqual(shard.begin);
															#line 21537 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
		else
		{
															#line 4825 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			begin = firstGreaterOrEqual(shard.end);
															#line 21543 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
		loopDepth = a_body1cont3loopBody1cont10cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1cont10cont13(RangeResultFamily const& result,int loopDepth) 
	{
															#line 4817 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		getRangeFinished( trState, startTime, originalBegin, originalEnd, snapshot, conflictRange, reverse, result);
															#line 4819 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<GetRangeActor*>(this)->SAV<RangeResultFamily>::futures) { (void)(result); this->~GetRangeActorState(); static_cast<GetRangeActor*>(this)->destroy(); return 0; }
															#line 21555 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<GetRangeActor*>(this)->SAV< RangeResultFamily >::value()) RangeResultFamily(result);
		this->~GetRangeActorState();
		static_cast<GetRangeActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont3loopBody1cont10cont13(RangeResultFamily && result,int loopDepth) 
	{
															#line 4817 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		getRangeFinished( trState, startTime, originalBegin, originalEnd, snapshot, conflictRange, reverse, result);
															#line 4819 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<GetRangeActor*>(this)->SAV<RangeResultFamily>::futures) { (void)(result); this->~GetRangeActorState(); static_cast<GetRangeActor*>(this)->destroy(); return 0; }
															#line 21569 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<GetRangeActor*>(this)->SAV< RangeResultFamily >::value()) RangeResultFamily(result);
		this->~GetRangeActorState();
		static_cast<GetRangeActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont3loopBody1cont10when1(RangeResultFamily const& result,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1cont10cont13(result, loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1cont10when1(RangeResultFamily && result,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1cont10cont13(std::move(result), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<GetRangeActor*>(this)->actor_wait_state > 0) static_cast<GetRangeActor*>(this)->actor_wait_state = 0;
		static_cast<GetRangeActor*>(this)->ActorCallback< GetRangeActor, 3, RangeResultFamily >::remove();

	}
	void a_callback_fire(ActorCallback< GetRangeActor, 3, RangeResultFamily >*,RangeResultFamily const& value) 
	{
		fdb_probe_actor_enter("getRange", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont3loopBody1cont10when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont3loopBody1cont1Catch1(error, 0);
		} catch (...) {
			a_body1cont3loopBody1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRange", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< GetRangeActor, 3, RangeResultFamily >*,RangeResultFamily && value) 
	{
		fdb_probe_actor_enter("getRange", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont3loopBody1cont10when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont3loopBody1cont1Catch1(error, 0);
		} catch (...) {
			a_body1cont3loopBody1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRange", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< GetRangeActor, 3, RangeResultFamily >*,Error err) 
	{
		fdb_probe_actor_enter("getRange", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont3loopBody1cont1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont3loopBody1cont1Catch1(error, 0);
		} catch (...) {
			a_body1cont3loopBody1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRange", reinterpret_cast<unsigned long>(this), 3);

	}
	int a_body1cont3loopBody1cont10cont17(int loopDepth) 
	{
		try {
			loopDepth = a_body1cont3loopBody1cont3(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch2(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch2(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1cont3loopBody1cont1Catch1cont1(int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1cont1Catch1cont3(int loopDepth) 
	{
															#line 4854 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_5 = delay(CLIENT_KNOBS->WRONG_SHARD_SERVER_DELAY, trState->taskID);
															#line 4854 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<GetRangeActor*>(this)->actor_wait_state < 0) return a_body1Catch2(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 21665 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_5.isReady()) { if (__when_expr_5.isError()) return a_body1Catch2(__when_expr_5.getError(), std::max(0, loopDepth - 1)); else return a_body1cont3loopBody1cont1Catch1cont3when1(__when_expr_5.get(), loopDepth); };
		static_cast<GetRangeActor*>(this)->actor_wait_state = 6;
															#line 4854 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_5.addCallbackAndClear(static_cast<ActorCallback< GetRangeActor, 5, Void >*>(static_cast<GetRangeActor*>(this)));
															#line 21670 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont3loopBody1cont1Catch1cont4(RangeResultFamily const& result,int loopDepth) 
	{
															#line 4849 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		getRangeFinished( trState, startTime, originalBegin, originalEnd, snapshot, conflictRange, reverse, result);
															#line 4851 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<GetRangeActor*>(this)->SAV<RangeResultFamily>::futures) { (void)(result); this->~GetRangeActorState(); static_cast<GetRangeActor*>(this)->destroy(); return 0; }
															#line 21681 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<GetRangeActor*>(this)->SAV< RangeResultFamily >::value()) RangeResultFamily(result);
		this->~GetRangeActorState();
		static_cast<GetRangeActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont3loopBody1cont1Catch1cont4(RangeResultFamily && result,int loopDepth) 
	{
															#line 4849 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		getRangeFinished( trState, startTime, originalBegin, originalEnd, snapshot, conflictRange, reverse, result);
															#line 4851 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<GetRangeActor*>(this)->SAV<RangeResultFamily>::futures) { (void)(result); this->~GetRangeActorState(); static_cast<GetRangeActor*>(this)->destroy(); return 0; }
															#line 21695 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<GetRangeActor*>(this)->SAV< RangeResultFamily >::value()) RangeResultFamily(result);
		this->~GetRangeActorState();
		static_cast<GetRangeActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont3loopBody1cont1Catch1when1(RangeResultFamily const& result,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1cont1Catch1cont4(result, loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1cont1Catch1when1(RangeResultFamily && result,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1cont1Catch1cont4(std::move(result), loopDepth);

		return loopDepth;
	}
	void a_exitChoose5() 
	{
		if (static_cast<GetRangeActor*>(this)->actor_wait_state > 0) static_cast<GetRangeActor*>(this)->actor_wait_state = 0;
		static_cast<GetRangeActor*>(this)->ActorCallback< GetRangeActor, 4, RangeResultFamily >::remove();

	}
	void a_callback_fire(ActorCallback< GetRangeActor, 4, RangeResultFamily >*,RangeResultFamily const& value) 
	{
		fdb_probe_actor_enter("getRange", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont3loopBody1cont1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRange", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_fire(ActorCallback< GetRangeActor, 4, RangeResultFamily >*,RangeResultFamily && value) 
	{
		fdb_probe_actor_enter("getRange", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont3loopBody1cont1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRange", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_error(ActorCallback< GetRangeActor, 4, RangeResultFamily >*,Error err) 
	{
		fdb_probe_actor_enter("getRange", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1Catch2(err, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRange", reinterpret_cast<unsigned long>(this), 4);

	}
	int a_body1cont3loopBody1cont1Catch1cont6(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1cont1Catch1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1cont1Catch1cont6(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1cont1Catch1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1cont1Catch1cont3when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1cont1Catch1cont6(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1cont1Catch1cont3when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1cont1Catch1cont6(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose6() 
	{
		if (static_cast<GetRangeActor*>(this)->actor_wait_state > 0) static_cast<GetRangeActor*>(this)->actor_wait_state = 0;
		static_cast<GetRangeActor*>(this)->ActorCallback< GetRangeActor, 5, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetRangeActor, 5, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getRange", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1cont3loopBody1cont1Catch1cont3when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRange", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_fire(ActorCallback< GetRangeActor, 5, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getRange", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1cont3loopBody1cont1Catch1cont3when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRange", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_error(ActorCallback< GetRangeActor, 5, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getRange", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1Catch2(err, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRange", reinterpret_cast<unsigned long>(this), 5);

	}
															#line 4571 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<TransactionState> trState;
															#line 4571 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeySelector begin;
															#line 4571 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeySelector end;
															#line 4571 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Key mapper;
															#line 4571 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetRangeLimits limits;
															#line 4571 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Promise<std::pair<Key, Key>> conflictRange;
															#line 4571 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Snapshot snapshot;
															#line 4571 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reverse reverse;
															#line 4571 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	UseTenant useTenant;
															#line 4587 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetRangeLimits originalLimits;
															#line 4588 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeySelector originalBegin;
															#line 4589 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeySelector originalEnd;
															#line 4590 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	RangeResultFamily output;
															#line 4591 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Span span;
															#line 4592 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Optional<UID> getRangeID;
															#line 4602 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	double startTime;
															#line 4621 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeyRangeLocationInfo beginServer;
															#line 4623 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeyRange shard;
															#line 4624 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	bool modifiedSelectors;
															#line 4625 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetKeyValuesFamilyRequest req;
															#line 4695 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetKeyValuesFamilyReply rep;
															#line 21883 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via getRange()
															#line 4571 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class GetKeyValuesFamilyRequest, class GetKeyValuesFamilyReply, class RangeResultFamily>
															#line 4571 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetRangeActor final : public Actor<RangeResultFamily>, public ActorCallback< GetRangeActor<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily>, 0, Void >, public ActorCallback< GetRangeActor<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily>, 1, KeyRangeLocationInfo >, public ActorCallback< GetRangeActor<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily>, 2, GetKeyValuesFamilyReply >, public ActorCallback< GetRangeActor<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily>, 3, RangeResultFamily >, public ActorCallback< GetRangeActor<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily>, 4, RangeResultFamily >, public ActorCallback< GetRangeActor<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily>, 5, Void >, public FastAllocated<GetRangeActor<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily>>, public GetRangeActorState<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily, GetRangeActor<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily>> {
															#line 21890 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<GetRangeActor<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily>>::operator new;
	using FastAllocated<GetRangeActor<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily>>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<RangeResultFamily>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< GetRangeActor<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily>, 0, Void >;
friend struct ActorCallback< GetRangeActor<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily>, 1, KeyRangeLocationInfo >;
friend struct ActorCallback< GetRangeActor<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily>, 2, GetKeyValuesFamilyReply >;
friend struct ActorCallback< GetRangeActor<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily>, 3, RangeResultFamily >;
friend struct ActorCallback< GetRangeActor<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily>, 4, RangeResultFamily >;
friend struct ActorCallback< GetRangeActor<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily>, 5, Void >;
															#line 4571 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetRangeActor(Reference<TransactionState> const& trState,KeySelector const& begin,KeySelector const& end,Key const& mapper,GetRangeLimits const& limits,Promise<std::pair<Key, Key>> const& conflictRange,Snapshot const& snapshot,Reverse const& reverse,UseTenant const& useTenant = UseTenant::True) 
															#line 21906 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<RangeResultFamily>(),
		   GetRangeActorState<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily, GetRangeActor<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily>>(trState, begin, end, mapper, limits, conflictRange, snapshot, reverse, useTenant)
	{
		fdb_probe_actor_enter("getRange", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("getRange");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("getRange", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< GetRangeActor<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily>, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< GetRangeActor<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily>, 1, KeyRangeLocationInfo >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< GetRangeActor<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily>, 2, GetKeyValuesFamilyReply >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< GetRangeActor<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily>, 3, RangeResultFamily >*)0, actor_cancelled()); break;
		case 5: this->a_callback_error((ActorCallback< GetRangeActor<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily>, 4, RangeResultFamily >*)0, actor_cancelled()); break;
		case 6: this->a_callback_error((ActorCallback< GetRangeActor<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily>, 5, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 4571 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class GetKeyValuesFamilyRequest, class GetKeyValuesFamilyReply, class RangeResultFamily>
															#line 4571 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<RangeResultFamily> getRange( Reference<TransactionState> const& trState, KeySelector const& begin, KeySelector const& end, Key const& mapper, GetRangeLimits const& limits, Promise<std::pair<Key, Key>> const& conflictRange, Snapshot const& snapshot, Reverse const& reverse, UseTenant const& useTenant = UseTenant::True ) {
															#line 4571 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<RangeResultFamily>(new GetRangeActor<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily>(trState, begin, end, mapper, limits, conflictRange, snapshot, reverse, useTenant));
															#line 21941 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 4877 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

template <class StreamReply>
struct TSSDuplicateStreamData {
	PromiseStream<StreamReply> stream;
	Promise<Void> tssComparisonDone;

	// empty constructor for optional?
	TSSDuplicateStreamData() {}

	TSSDuplicateStreamData(PromiseStream<StreamReply> stream) : stream(stream) {}

	bool done() { return tssComparisonDone.getFuture().isReady(); }

	void setDone() {
		if (tssComparisonDone.canBeSet()) {
			tssComparisonDone.send(Void());
		}
	}

	~TSSDuplicateStreamData() {}
};

// Error tracking here is weird, and latency doesn't really mean the same thing here as it does with normal tss
// comparisons, so this is pretty much just counting mismatches
															#line 21969 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via tssStreamComparison()
															#line 4901 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class Request, class TssStreamComparisonActor>
															#line 4901 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class TssStreamComparisonActorState {
															#line 21976 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 4901 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	TssStreamComparisonActorState(Request const& request,TSSDuplicateStreamData<REPLYSTREAM_TYPE(Request)> const& streamData,ReplyPromiseStream<REPLYSTREAM_TYPE(Request)> const& tssReplyStream,TSSEndpointData const& tssData) 
															#line 4901 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 4901 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : request(request),
															#line 4901 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   streamData(streamData),
															#line 4901 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   tssReplyStream(tssReplyStream),
															#line 4901 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   tssData(tssData),
															#line 4906 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   ssEndOfStream(false),
															#line 4907 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   tssEndOfStream(false),
															#line 4908 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   ssReply(Optional<REPLYSTREAM_TYPE(Request)>()),
															#line 4909 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   tssReply(Optional<REPLYSTREAM_TYPE(Request)>())
															#line 21997 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("tssStreamComparison", reinterpret_cast<unsigned long>(this));

	}
	~TssStreamComparisonActorState() 
	{
		fdb_probe_actor_destroy("tssStreamComparison", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 4911 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			;
															#line 22012 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~TssStreamComparisonActorState();
		static_cast<TssStreamComparisonActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
															#line 4913 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ssReply = Optional<REPLYSTREAM_TYPE(Request)>();
															#line 4914 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		tssReply = Optional<REPLYSTREAM_TYPE(Request)>();
															#line 4916 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		startTime = now();
															#line 22046 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		try {
															#line 4919 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			FutureStream<REPLYSTREAM_TYPE(Request)> __when_expr_0 = streamData.stream.getFuture();
															#line 4919 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<TssStreamComparisonActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 22052 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1loopBody1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1loopBody1when1(__when_expr_0.pop(), loopDepth); };
			static_cast<TssStreamComparisonActor*>(this)->actor_wait_state = 1;
															#line 4919 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorSingleCallback< TssStreamComparisonActor, 0, REPLYSTREAM_TYPE(Request) >*>(static_cast<TssStreamComparisonActor*>(this)));
															#line 22057 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
															#line 4936 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		sleepTime = std::max(startTime + FLOW_KNOBS->LOAD_BALANCE_TSS_TIMEOUT - now(), 0.0);
															#line 22072 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		try {
															#line 4940 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			FutureStream<REPLYSTREAM_TYPE(Request)> __when_expr_1 = tssReplyStream.getFuture();
															#line 4939 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<TssStreamComparisonActor*>(this)->actor_wait_state < 0) return a_body1loopBody1cont1Catch1(actor_cancelled(), loopDepth);
															#line 22078 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1cont1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont1when1(__when_expr_1.pop(), loopDepth); };
															#line 4943 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_2 = delay(sleepTime);
															#line 22082 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1loopBody1cont1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1loopBody1cont1when2(__when_expr_2.get(), loopDepth); };
			static_cast<TssStreamComparisonActor*>(this)->actor_wait_state = 2;
															#line 4940 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorSingleCallback< TssStreamComparisonActor, 1, REPLYSTREAM_TYPE(Request) >*>(static_cast<TssStreamComparisonActor*>(this)));
															#line 4943 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< TssStreamComparisonActor, 2, Void >*>(static_cast<TssStreamComparisonActor*>(this)));
															#line 22089 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1cont1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1cont1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 4922 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (e.code() == error_code_actor_cancelled)
															#line 22105 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 4923 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				streamData.setDone();
															#line 4924 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				return a_body1Catch1(e, std::max(0, loopDepth - 1));
															#line 22111 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 4926 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (e.code() == error_code_end_of_stream)
															#line 22115 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 4929 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				ssEndOfStream = true;
															#line 22119 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
			else
			{
															#line 4931 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				tssData.metrics->ssError(e.code());
															#line 22125 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 4933 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			CODE_PROBE(e.code() != error_code_end_of_stream, "SS got error in TSS stream comparison");
															#line 22129 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1loopBody1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(REPLYSTREAM_TYPE(Request) const& _ssReply,int loopDepth) 
	{
															#line 4920 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ssReply = _ssReply;
															#line 22144 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont4(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2(REPLYSTREAM_TYPE(Request) && _ssReply,int loopDepth) 
	{
															#line 4920 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ssReply = _ssReply;
															#line 22153 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont4(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(REPLYSTREAM_TYPE(Request) const& _ssReply,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(_ssReply, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(REPLYSTREAM_TYPE(Request) && _ssReply,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(std::move(_ssReply), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<TssStreamComparisonActor*>(this)->actor_wait_state > 0) static_cast<TssStreamComparisonActor*>(this)->actor_wait_state = 0;
		static_cast<TssStreamComparisonActor*>(this)->ActorSingleCallback< TssStreamComparisonActor, 0, REPLYSTREAM_TYPE(Request) >::remove();

	}
	void a_callback_fire(ActorSingleCallback< TssStreamComparisonActor, 0, REPLYSTREAM_TYPE(Request) >*,REPLYSTREAM_TYPE(Request) const& value) 
	{
		fdb_probe_actor_enter("tssStreamComparison", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("tssStreamComparison", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorSingleCallback< TssStreamComparisonActor, 0, REPLYSTREAM_TYPE(Request) >*,REPLYSTREAM_TYPE(Request) && value) 
	{
		fdb_probe_actor_enter("tssStreamComparison", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("tssStreamComparison", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorSingleCallback< TssStreamComparisonActor, 0, REPLYSTREAM_TYPE(Request) >*,Error err) 
	{
		fdb_probe_actor_enter("tssStreamComparison", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("tssStreamComparison", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1cont4(int loopDepth) 
	{
		try {
			loopDepth = a_body1loopBody1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont5(int loopDepth) 
	{
															#line 4963 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!ssEndOfStream || !tssEndOfStream)
															#line 22238 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 4964 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			++tssData.metrics->streamComparisons;
															#line 22242 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 4968 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (ssReply.present() && tssReply.present())
															#line 22246 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 4975 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if ((!ssEndOfStream || !tssEndOfStream) && !TSS_doCompare(ssReply.get(), tssReply.get()))
															#line 22250 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 4976 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				CODE_PROBE(true, "TSS mismatch in stream comparison");
															#line 4977 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				TraceEvent mismatchEvent( (g_network->isSimulated() && g_simulator->tssMode == ISimulator::TSSMode::EnabledDropMutations) ? SevWarnAlways : SevError, TSS_mismatchTraceName(request));
															#line 4982 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				mismatchEvent.setMaxEventLength(FLOW_KNOBS->TSS_LARGE_TRACE_SIZE);
															#line 4983 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				mismatchEvent.detail("TSSID", tssData.tssId);
															#line 4985 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (tssData.metrics->shouldRecordDetailedMismatch())
															#line 22262 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 4986 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					TSS_traceMismatch(mismatchEvent, request, ssReply.get(), tssReply.get());
															#line 4988 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					CODE_PROBE(FLOW_KNOBS->LOAD_BALANCE_TSS_MISMATCH_TRACE_FULL, "Tracing Full TSS Mismatch in stream comparison", probe::decoration::rare);
															#line 4991 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					CODE_PROBE(!FLOW_KNOBS->LOAD_BALANCE_TSS_MISMATCH_TRACE_FULL, "Tracing Partial TSS Mismatch in stream comparison and storing the rest in FDB");
															#line 4994 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					if (!FLOW_KNOBS->LOAD_BALANCE_TSS_MISMATCH_TRACE_FULL)
															#line 22272 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					{
															#line 4995 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
						mismatchEvent.disable();
															#line 4996 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
						UID mismatchUID = deterministicRandom()->randomUniqueID();
															#line 4997 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
						tssData.metrics->recordDetailedMismatchData(mismatchUID, mismatchEvent.getFields().toString());
															#line 5000 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
						TraceEvent summaryEvent((g_network->isSimulated() && g_simulator->tssMode == ISimulator::TSSMode::EnabledDropMutations) ? SevWarnAlways : SevError, TSS_mismatchTraceName(request));
															#line 5005 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
						summaryEvent.detail("TSSID", tssData.tssId).detail("MismatchId", mismatchUID);
															#line 22284 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					}
				}
				else
				{
															#line 5009 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					mismatchEvent.disable();
															#line 22291 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
															#line 5011 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				streamData.setDone();
															#line 5012 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (!static_cast<TssStreamComparisonActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~TssStreamComparisonActorState(); static_cast<TssStreamComparisonActor*>(this)->destroy(); return 0; }
															#line 22297 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				new (&static_cast<TssStreamComparisonActor*>(this)->SAV< Void >::value()) Void(Void());
				this->~TssStreamComparisonActorState();
				static_cast<TssStreamComparisonActor*>(this)->finishSendAndDelPromiseRef();
				return 0;
			}
		}
															#line 5015 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!ssReply.present() || !tssReply.present() || ssEndOfStream || tssEndOfStream)
															#line 22306 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 5017 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			streamData.setDone();
															#line 5018 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<TssStreamComparisonActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~TssStreamComparisonActorState(); static_cast<TssStreamComparisonActor*>(this)->destroy(); return 0; }
															#line 22312 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<TssStreamComparisonActor*>(this)->SAV< Void >::value()) Void(Void());
			this->~TssStreamComparisonActorState();
			static_cast<TssStreamComparisonActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1cont1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 4949 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (e.code() == error_code_actor_cancelled)
															#line 22327 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 4950 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				streamData.setDone();
															#line 4951 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				return a_body1Catch1(e, std::max(0, loopDepth - 1));
															#line 22333 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 4953 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (e.code() == error_code_end_of_stream)
															#line 22337 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 4956 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				tssEndOfStream = true;
															#line 22341 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
			else
			{
															#line 4958 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				tssData.metrics->tssError(e.code());
															#line 22347 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 4960 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			CODE_PROBE(e.code() != error_code_end_of_stream, "TSS got error in TSS stream comparison");
															#line 22351 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1loopBody1cont5(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont6(int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont7(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1when1(REPLYSTREAM_TYPE(Request) const& _tssReply,int loopDepth) 
	{
															#line 4941 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		tssReply = _tssReply;
															#line 22372 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont6(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1when1(REPLYSTREAM_TYPE(Request) && _tssReply,int loopDepth) 
	{
															#line 4941 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		tssReply = _tssReply;
															#line 22381 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont6(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1when2(Void const& _,int loopDepth) 
	{
															#line 4944 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		++tssData.metrics->tssTimeouts;
															#line 4945 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		CODE_PROBE(true, "Got TSS timeout in stream comparison", probe::decoration::rare);
															#line 22392 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont6(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1when2(Void && _,int loopDepth) 
	{
															#line 4944 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		++tssData.metrics->tssTimeouts;
															#line 4945 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		CODE_PROBE(true, "Got TSS timeout in stream comparison", probe::decoration::rare);
															#line 22403 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont6(loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<TssStreamComparisonActor*>(this)->actor_wait_state > 0) static_cast<TssStreamComparisonActor*>(this)->actor_wait_state = 0;
		static_cast<TssStreamComparisonActor*>(this)->ActorSingleCallback< TssStreamComparisonActor, 1, REPLYSTREAM_TYPE(Request) >::remove();
		static_cast<TssStreamComparisonActor*>(this)->ActorCallback< TssStreamComparisonActor, 2, Void >::remove();

	}
	void a_callback_fire(ActorSingleCallback< TssStreamComparisonActor, 1, REPLYSTREAM_TYPE(Request) >*,REPLYSTREAM_TYPE(Request) const& value) 
	{
		fdb_probe_actor_enter("tssStreamComparison", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("tssStreamComparison", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorSingleCallback< TssStreamComparisonActor, 1, REPLYSTREAM_TYPE(Request) >*,REPLYSTREAM_TYPE(Request) && value) 
	{
		fdb_probe_actor_enter("tssStreamComparison", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("tssStreamComparison", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorSingleCallback< TssStreamComparisonActor, 1, REPLYSTREAM_TYPE(Request) >*,Error err) 
	{
		fdb_probe_actor_enter("tssStreamComparison", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("tssStreamComparison", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< TssStreamComparisonActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("tssStreamComparison", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose2();
		try {
			a_body1loopBody1cont1when2(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("tssStreamComparison", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< TssStreamComparisonActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("tssStreamComparison", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose2();
		try {
			a_body1loopBody1cont1when2(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("tssStreamComparison", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< TssStreamComparisonActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("tssStreamComparison", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose2();
		try {
			a_body1loopBody1cont1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("tssStreamComparison", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1loopBody1cont7(int loopDepth) 
	{
		try {
			loopDepth = a_body1loopBody1cont5(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
															#line 4901 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Request request;
															#line 4901 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	TSSDuplicateStreamData<REPLYSTREAM_TYPE(Request)> streamData;
															#line 4901 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	ReplyPromiseStream<REPLYSTREAM_TYPE(Request)> tssReplyStream;
															#line 4901 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	TSSEndpointData tssData;
															#line 4906 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	bool ssEndOfStream;
															#line 4907 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	bool tssEndOfStream;
															#line 4908 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Optional<REPLYSTREAM_TYPE(Request)> ssReply;
															#line 4909 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Optional<REPLYSTREAM_TYPE(Request)> tssReply;
															#line 4916 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	double startTime;
															#line 4936 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	double sleepTime;
															#line 22538 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via tssStreamComparison()
															#line 4901 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class Request>
															#line 4901 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class TssStreamComparisonActor final : public Actor<Void>, public ActorSingleCallback< TssStreamComparisonActor<Request>, 0, REPLYSTREAM_TYPE(Request) >, public ActorSingleCallback< TssStreamComparisonActor<Request>, 1, REPLYSTREAM_TYPE(Request) >, public ActorCallback< TssStreamComparisonActor<Request>, 2, Void >, public FastAllocated<TssStreamComparisonActor<Request>>, public TssStreamComparisonActorState<Request, TssStreamComparisonActor<Request>> {
															#line 22545 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<TssStreamComparisonActor<Request>>::operator new;
	using FastAllocated<TssStreamComparisonActor<Request>>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorSingleCallback< TssStreamComparisonActor<Request>, 0, REPLYSTREAM_TYPE(Request) >;
friend struct ActorSingleCallback< TssStreamComparisonActor<Request>, 1, REPLYSTREAM_TYPE(Request) >;
friend struct ActorCallback< TssStreamComparisonActor<Request>, 2, Void >;
															#line 4901 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	TssStreamComparisonActor(Request const& request,TSSDuplicateStreamData<REPLYSTREAM_TYPE(Request)> const& streamData,ReplyPromiseStream<REPLYSTREAM_TYPE(Request)> const& tssReplyStream,TSSEndpointData const& tssData) 
															#line 22558 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Void>(),
		   TssStreamComparisonActorState<Request, TssStreamComparisonActor<Request>>(request, streamData, tssReplyStream, tssData)
	{
		fdb_probe_actor_enter("tssStreamComparison", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("tssStreamComparison");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("tssStreamComparison", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorSingleCallback< TssStreamComparisonActor<Request>, 0, REPLYSTREAM_TYPE(Request) >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorSingleCallback< TssStreamComparisonActor<Request>, 1, REPLYSTREAM_TYPE(Request) >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 4901 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class Request>
															#line 4901 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] static Future<Void> tssStreamComparison( Request const& request, TSSDuplicateStreamData<REPLYSTREAM_TYPE(Request)> const& streamData, ReplyPromiseStream<REPLYSTREAM_TYPE(Request)> const& tssReplyStream, TSSEndpointData const& tssData ) {
															#line 4901 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Void>(new TssStreamComparisonActor<Request>(request, streamData, tssReplyStream, tssData));
															#line 22589 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 5022 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

// Currently only used for GetKeyValuesStream but could easily be plugged for other stream types
// User of the stream has to forward the SS's responses to the returned promise stream, if it is set
template <class Request, bool P>
Optional<TSSDuplicateStreamData<REPLYSTREAM_TYPE(Request)>>
maybeDuplicateTSSStreamFragment(Request& req, QueueModel* model, RequestStream<Request, P> const* ssStream) {
	if (model) {
		Optional<TSSEndpointData> tssData = model->getTssData(ssStream->getEndpoint().token.first());

		if (tssData.present()) {
			CODE_PROBE(true, "duplicating stream to TSS");
			resetReply(req);
			// FIXME: optimize to avoid creating new netNotifiedQueueWithAcknowledgements for each stream duplication
			RequestStream<Request> tssRequestStream(tssData.get().endpoint);
			ReplyPromiseStream<REPLYSTREAM_TYPE(Request)> tssReplyStream = tssRequestStream.getReplyStream(req);
			PromiseStream<REPLYSTREAM_TYPE(Request)> ssDuplicateReplyStream;
			TSSDuplicateStreamData<REPLYSTREAM_TYPE(Request)> streamData(ssDuplicateReplyStream);
			model->addActor.send(tssStreamComparison(req, streamData, tssReplyStream, tssData.get()));
			return Optional<TSSDuplicateStreamData<REPLYSTREAM_TYPE(Request)>>(streamData);
		}
	}
	return Optional<TSSDuplicateStreamData<REPLYSTREAM_TYPE(Request)>>();
}

// Streams all of the KV pairs in a target key range into a ParallelStream fragment
															#line 22618 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via getRangeStreamFragment()
															#line 5047 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class GetRangeStreamFragmentActor>
															#line 5047 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetRangeStreamFragmentActorState {
															#line 22625 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 5047 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetRangeStreamFragmentActorState(Reference<TransactionState> const& trState,ParallelStream<RangeResult>::Fragment* const& results,KeyRange const& keys,GetRangeLimits const& limits,Snapshot const& snapshot,Reverse const& reverse,SpanContext const& spanContext) 
															#line 5047 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 5047 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : trState(trState),
															#line 5047 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   results(results),
															#line 5047 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   keys(keys),
															#line 5047 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   limits(limits),
															#line 5047 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   snapshot(snapshot),
															#line 5047 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   reverse(reverse),
															#line 5047 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   spanContext(spanContext)
															#line 22644 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("getRangeStreamFragment", reinterpret_cast<unsigned long>(this));

	}
	~GetRangeStreamFragmentActorState() 
	{
		fdb_probe_actor_destroy("getRangeStreamFragment", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 5054 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			;
															#line 22659 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~GetRangeStreamFragmentActorState();
		static_cast<GetRangeStreamFragmentActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
															#line 5055 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<std::vector<KeyRangeLocationInfo>> __when_expr_0 = getKeyRangeLocations(trState, keys, CLIENT_KNOBS->GET_RANGE_SHARD_LIMIT, reverse, &StorageServerInterface::getKeyValuesStream, UseTenant::True);
															#line 5055 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<GetRangeStreamFragmentActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 22691 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
		static_cast<GetRangeStreamFragmentActor*>(this)->actor_wait_state = 1;
															#line 5055 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< GetRangeStreamFragmentActor, 0, std::vector<KeyRangeLocationInfo> >*>(static_cast<GetRangeStreamFragmentActor*>(this)));
															#line 22696 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
															#line 5062 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(locations.size());
															#line 5063 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		shard = 0;
															#line 5064 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		;
															#line 22709 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont1loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(std::vector<KeyRangeLocationInfo> const& __locations,int loopDepth) 
	{
															#line 5055 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		locations = __locations;
															#line 22718 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(std::vector<KeyRangeLocationInfo> && __locations,int loopDepth) 
	{
		locations = std::move(__locations);
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<GetRangeStreamFragmentActor*>(this)->actor_wait_state > 0) static_cast<GetRangeStreamFragmentActor*>(this)->actor_wait_state = 0;
		static_cast<GetRangeStreamFragmentActor*>(this)->ActorCallback< GetRangeStreamFragmentActor, 0, std::vector<KeyRangeLocationInfo> >::remove();

	}
	void a_callback_fire(ActorCallback< GetRangeStreamFragmentActor, 0, std::vector<KeyRangeLocationInfo> >*,std::vector<KeyRangeLocationInfo> const& value) 
	{
		fdb_probe_actor_enter("getRangeStreamFragment", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeStreamFragment", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< GetRangeStreamFragmentActor, 0, std::vector<KeyRangeLocationInfo> >*,std::vector<KeyRangeLocationInfo> && value) 
	{
		fdb_probe_actor_enter("getRangeStreamFragment", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeStreamFragment", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< GetRangeStreamFragmentActor, 0, std::vector<KeyRangeLocationInfo> >*,Error err) 
	{
		fdb_probe_actor_enter("getRangeStreamFragment", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeStreamFragment", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1cont2(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1cont1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1cont1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1(int loopDepth) 
	{
															#line 5065 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		const KeyRange& range = locations[shard].range;
															#line 5067 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		tssDuplicateStream = Optional<TSSDuplicateStreamData<GetKeyValuesStreamReply>>();
															#line 5068 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		req = GetKeyValuesStreamRequest();
															#line 5069 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		req.tenantInfo = trState->getTenantInfo();
															#line 5070 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		req.version = trState->readVersion();
															#line 5071 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		req.begin = firstGreaterOrEqual(range.begin);
															#line 5072 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		req.end = firstGreaterOrEqual(range.end);
															#line 5073 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		req.spanContext = spanContext;
															#line 5074 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		req.limit = reverse ? -CLIENT_KNOBS->REPLY_BYTE_LIMIT : CLIENT_KNOBS->REPLY_BYTE_LIMIT;
															#line 5075 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		req.limitBytes = std::numeric_limits<int>::max();
															#line 5076 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		req.options = trState->readOptions;
															#line 5078 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		trState->cx->getLatestCommitVersions(locations[shard].locations, trState, req.ssLatestCommitVersions);
															#line 5081 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		req.arena.dependsOn(range.arena());
															#line 5083 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(req.limitBytes > 0 && req.limit != 0 && req.limit < 0 == reverse);
															#line 5086 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		req.tags = trState->cx->sampleReadTags() ? trState->options.readTags : Optional<TagSet>();
															#line 22826 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		try {
															#line 5089 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (trState->readOptions.present() && trState->readOptions.get().debugID.present())
															#line 22830 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 5090 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				g_traceBatch.addEvent("TransactionDebug", trState->readOptions.get().debugID.get().first(), "NativeAPI.RangeStream.Before");
															#line 22834 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 5094 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			++trState->cx->transactionPhysicalReads;
															#line 5095 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			rep = GetKeyValuesStreamReply();
															#line 5097 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (locations[shard].locations->size() == 0)
															#line 22842 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 5098 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				StrictFuture<Void> __when_expr_1 = trState->cx->connectionFileChanged();
															#line 5098 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (static_cast<GetRangeStreamFragmentActor*>(this)->actor_wait_state < 0) return a_body1loopBody1cont1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 22848 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1cont1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont1loopBody1when1(__when_expr_1.get(), loopDepth); };
				static_cast<GetRangeStreamFragmentActor*>(this)->actor_wait_state = 2;
															#line 5098 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< GetRangeStreamFragmentActor, 1, Void >*>(static_cast<GetRangeStreamFragmentActor*>(this)));
															#line 22853 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				loopDepth = 0;
			}
			else
			{
				loopDepth = a_body1loopBody1cont1loopBody1cont2(loopDepth);
			}
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1cont1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1cont1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1break1(int loopDepth) 
	{
		try {
			return a_body1loopBody1cont2(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopBody1cont1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 5297 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (tssDuplicateStream.present() && !tssDuplicateStream.get().done())
															#line 22893 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 5298 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				tssDuplicateStream.get().stream.sendError(e);
															#line 22897 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 5300 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (e.code() == error_code_actor_cancelled)
															#line 22901 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 5301 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				return a_body1Catch1(e, std::max(0, loopDepth - 2));
															#line 22905 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 5303 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (e.code() == error_code_wrong_shard_server || e.code() == error_code_all_alternatives_failed || e.code() == error_code_connection_failed || e.code() == error_code_request_maybe_delivered)
															#line 22909 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 5305 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				const KeyRangeRef& range = locations[shard].range;
															#line 5307 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (reverse)
															#line 22915 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 5308 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					keys = KeyRangeRef(keys.begin, range.end);
															#line 22919 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
				else
				{
															#line 5310 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					keys = KeyRangeRef(range.begin, keys.end);
															#line 22925 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
															#line 5312 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				trState->cx->invalidateCache(trState->tenant().mapRef(&Tenant::prefix), keys);
															#line 5314 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				StrictFuture<Void> __when_expr_6 = delay(CLIENT_KNOBS->WRONG_SHARD_SERVER_DELAY, trState->taskID);
															#line 5314 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (static_cast<GetRangeStreamFragmentActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 2));
															#line 22933 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				if (__when_expr_6.isReady()) { if (__when_expr_6.isError()) return a_body1Catch1(__when_expr_6.getError(), std::max(0, loopDepth - 2)); else return a_body1loopBody1cont1loopBody1Catch1when1(__when_expr_6.get(), loopDepth); };
				static_cast<GetRangeStreamFragmentActor*>(this)->actor_wait_state = 6;
															#line 5314 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				__when_expr_6.addCallbackAndClear(static_cast<ActorCallback< GetRangeStreamFragmentActor, 6, Void >*>(static_cast<GetRangeStreamFragmentActor*>(this)));
															#line 22938 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				loopDepth = 0;
			}
			else
			{
															#line 5317 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				results->sendError(e);
															#line 5318 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (!static_cast<GetRangeStreamFragmentActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~GetRangeStreamFragmentActorState(); static_cast<GetRangeStreamFragmentActor*>(this)->destroy(); return 0; }
															#line 22947 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				new (&static_cast<GetRangeStreamFragmentActor*>(this)->SAV< Void >::value()) Void(Void());
				this->~GetRangeStreamFragmentActorState();
				static_cast<GetRangeStreamFragmentActor*>(this)->finishSendAndDelPromiseRef();
				return 0;
			}
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 2));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 2));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1cont2(int loopDepth) 
	{
															#line 5103 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		useIdx = -1;
															#line 5105 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		;
															#line 22968 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont1loopBody1cont2loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1cont4(Void const& _,int loopDepth) 
	{
															#line 5099 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		results->sendError(transaction_too_old());
															#line 5100 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<GetRangeStreamFragmentActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~GetRangeStreamFragmentActorState(); static_cast<GetRangeStreamFragmentActor*>(this)->destroy(); return 0; }
															#line 22979 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<GetRangeStreamFragmentActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~GetRangeStreamFragmentActorState();
		static_cast<GetRangeStreamFragmentActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1cont4(Void && _,int loopDepth) 
	{
															#line 5099 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		results->sendError(transaction_too_old());
															#line 5100 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<GetRangeStreamFragmentActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~GetRangeStreamFragmentActorState(); static_cast<GetRangeStreamFragmentActor*>(this)->destroy(); return 0; }
															#line 22993 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<GetRangeStreamFragmentActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~GetRangeStreamFragmentActorState();
		static_cast<GetRangeStreamFragmentActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1loopBody1cont4(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1loopBody1cont4(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<GetRangeStreamFragmentActor*>(this)->actor_wait_state > 0) static_cast<GetRangeStreamFragmentActor*>(this)->actor_wait_state = 0;
		static_cast<GetRangeStreamFragmentActor*>(this)->ActorCallback< GetRangeStreamFragmentActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetRangeStreamFragmentActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getRangeStreamFragment", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeStreamFragment", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< GetRangeStreamFragmentActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getRangeStreamFragment", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeStreamFragment", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< GetRangeStreamFragmentActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getRangeStreamFragment", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeStreamFragment", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1loopBody1cont1loopBody1cont6(int loopDepth) 
	{
															#line 5144 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		replyStream = locations[shard] .locations->get(useIdx, &StorageServerInterface::getKeyValuesStream) .getReplyStream(req);
															#line 5149 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		tssDuplicateStream = maybeDuplicateTSSStreamFragment( req, trState->cx->enableLocalityLoadBalance ? &trState->cx->queueModel : nullptr, &locations[shard].locations->get(useIdx, &StorageServerInterface::getKeyValuesStream));
															#line 5154 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		breakAgain = false;
															#line 5155 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		;
															#line 23074 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont1loopBody1cont6loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1cont2loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1cont1loopBody1cont2loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1cont2loopBody1(int loopDepth) 
	{
															#line 5108 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		int count = 0;
															#line 5109 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for(int i = 0;i < locations[shard].locations->size();i++) {
															#line 5110 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!IFailureMonitor::failureMonitor() .getState(locations[shard] .locations->get(i, &StorageServerInterface::getKeyValuesStream) .getEndpoint()) .failed)
															#line 23094 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 5115 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (deterministicRandom()->random01() <= 1.0 / ++count)
															#line 23098 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 5116 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					useIdx = i;
															#line 23102 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
			}
		}
															#line 5121 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (useIdx >= 0)
															#line 23108 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
			return a_body1loopBody1cont1loopBody1cont2break1(loopDepth==0?0:loopDepth-1); // break
		}
															#line 5125 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		std::vector<Future<Void>> ok(locations[shard].locations->size());
															#line 5126 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for(int i = 0;i < ok.size();i++) {
															#line 5127 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ok[i] = IFailureMonitor::failureMonitor().onStateEqual( locations[shard] .locations->get(i, &StorageServerInterface::getKeyValuesStream) .getEndpoint(), FailureStatus(false));
															#line 23118 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 5135 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (now() - g_network->networkInfo.newestAlternativesFailure > 1 || deterministicRandom()->random01() < 0.01)
															#line 23122 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 5137 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent("AllAlternativesFailed") .detail("Alternatives", locations[shard].locations->description());
															#line 23126 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 5141 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_2 = allAlternativesFailedDelay(quorum(ok, 1));
															#line 5141 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<GetRangeStreamFragmentActor*>(this)->actor_wait_state < 0) return a_body1loopBody1cont1loopBody1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 23132 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1loopBody1cont1loopBody1Catch1(__when_expr_2.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1cont1loopBody1cont2loopBody1when1(__when_expr_2.get(), loopDepth); };
		static_cast<GetRangeStreamFragmentActor*>(this)->actor_wait_state = 3;
															#line 5141 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< GetRangeStreamFragmentActor, 2, Void >*>(static_cast<GetRangeStreamFragmentActor*>(this)));
															#line 23137 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1cont2break1(int loopDepth) 
	{
		try {
			return a_body1loopBody1cont1loopBody1cont6(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1cont1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1cont1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1cont2loopBody1cont1(Void const& _,int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopBody1cont1loopBody1cont2loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1cont2loopBody1cont1(Void && _,int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopBody1cont1loopBody1cont2loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1cont2loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1loopBody1cont2loopBody1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1cont2loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1loopBody1cont2loopBody1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<GetRangeStreamFragmentActor*>(this)->actor_wait_state > 0) static_cast<GetRangeStreamFragmentActor*>(this)->actor_wait_state = 0;
		static_cast<GetRangeStreamFragmentActor*>(this)->ActorCallback< GetRangeStreamFragmentActor, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetRangeStreamFragmentActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getRangeStreamFragment", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont1loopBody1cont2loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeStreamFragment", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< GetRangeStreamFragmentActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getRangeStreamFragment", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont1loopBody1cont2loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeStreamFragment", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< GetRangeStreamFragmentActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getRangeStreamFragment", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeStreamFragment", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1loopBody1cont1loopBody1cont7(int loopDepth) 
	{
															#line 5292 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (breakAgain)
															#line 23234 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
			return a_body1loopBody1cont1break1(loopDepth==0?0:loopDepth-1); // break
		}
		loopDepth = a_body1loopBody1cont1loopBody1cont10(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1cont6loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1cont1loopBody1cont6loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1cont6loopBody1(int loopDepth) 
	{
															#line 5156 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_3 = results->onEmpty();
															#line 5156 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<GetRangeStreamFragmentActor*>(this)->actor_wait_state < 0) return a_body1loopBody1cont1loopBody1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 23255 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1loopBody1cont1loopBody1Catch1(__when_expr_3.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1cont1loopBody1cont6loopBody1when1(__when_expr_3.get(), loopDepth); };
		static_cast<GetRangeStreamFragmentActor*>(this)->actor_wait_state = 4;
															#line 5156 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< GetRangeStreamFragmentActor, 3, Void >*>(static_cast<GetRangeStreamFragmentActor*>(this)));
															#line 23260 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1cont6break1(int loopDepth) 
	{
		try {
			return a_body1loopBody1cont1loopBody1cont7(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1cont1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1cont1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1cont6loopBody1cont1(Void const& _,int loopDepth) 
	{
		try {
															#line 5159 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_4 = trState->cx->connectionFileChanged();
															#line 5158 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<GetRangeStreamFragmentActor*>(this)->actor_wait_state < 0) return a_body1loopBody1cont1loopBody1cont6loopBody1cont1Catch1(actor_cancelled(), loopDepth);
															#line 23285 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1loopBody1cont1loopBody1cont6loopBody1cont1Catch1(__when_expr_4.getError(), loopDepth); else return a_body1loopBody1cont1loopBody1cont6loopBody1cont1when1(__when_expr_4.get(), loopDepth); };
															#line 5167 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			FutureStream<GetKeyValuesStreamReply> __when_expr_5 = replyStream.getFuture();
															#line 23289 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_5.isReady()) { if (__when_expr_5.isError()) return a_body1loopBody1cont1loopBody1cont6loopBody1cont1Catch1(__when_expr_5.getError(), loopDepth); else return a_body1loopBody1cont1loopBody1cont6loopBody1cont1when2(__when_expr_5.pop(), loopDepth); };
			static_cast<GetRangeStreamFragmentActor*>(this)->actor_wait_state = 5;
															#line 5159 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< GetRangeStreamFragmentActor, 4, Void >*>(static_cast<GetRangeStreamFragmentActor*>(this)));
															#line 5167 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_5.addCallbackAndClear(static_cast<ActorSingleCallback< GetRangeStreamFragmentActor, 5, GetKeyValuesStreamReply >*>(static_cast<GetRangeStreamFragmentActor*>(this)));
															#line 23296 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1cont1loopBody1cont6loopBody1cont1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1cont1loopBody1cont6loopBody1cont1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1cont6loopBody1cont1(Void && _,int loopDepth) 
	{
		try {
															#line 5159 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_4 = trState->cx->connectionFileChanged();
															#line 5158 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<GetRangeStreamFragmentActor*>(this)->actor_wait_state < 0) return a_body1loopBody1cont1loopBody1cont6loopBody1cont1Catch1(actor_cancelled(), loopDepth);
															#line 23314 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1loopBody1cont1loopBody1cont6loopBody1cont1Catch1(__when_expr_4.getError(), loopDepth); else return a_body1loopBody1cont1loopBody1cont6loopBody1cont1when1(__when_expr_4.get(), loopDepth); };
															#line 5167 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			FutureStream<GetKeyValuesStreamReply> __when_expr_5 = replyStream.getFuture();
															#line 23318 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_5.isReady()) { if (__when_expr_5.isError()) return a_body1loopBody1cont1loopBody1cont6loopBody1cont1Catch1(__when_expr_5.getError(), loopDepth); else return a_body1loopBody1cont1loopBody1cont6loopBody1cont1when2(__when_expr_5.pop(), loopDepth); };
			static_cast<GetRangeStreamFragmentActor*>(this)->actor_wait_state = 5;
															#line 5159 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< GetRangeStreamFragmentActor, 4, Void >*>(static_cast<GetRangeStreamFragmentActor*>(this)));
															#line 5167 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_5.addCallbackAndClear(static_cast<ActorSingleCallback< GetRangeStreamFragmentActor, 5, GetKeyValuesStreamReply >*>(static_cast<GetRangeStreamFragmentActor*>(this)));
															#line 23325 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1cont1loopBody1cont6loopBody1cont1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1cont1loopBody1cont6loopBody1cont1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1cont6loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1loopBody1cont6loopBody1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1cont6loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1loopBody1cont6loopBody1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<GetRangeStreamFragmentActor*>(this)->actor_wait_state > 0) static_cast<GetRangeStreamFragmentActor*>(this)->actor_wait_state = 0;
		static_cast<GetRangeStreamFragmentActor*>(this)->ActorCallback< GetRangeStreamFragmentActor, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetRangeStreamFragmentActor, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getRangeStreamFragment", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1cont1loopBody1cont6loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeStreamFragment", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< GetRangeStreamFragmentActor, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getRangeStreamFragment", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1cont1loopBody1cont6loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeStreamFragment", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< GetRangeStreamFragmentActor, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getRangeStreamFragment", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1cont1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeStreamFragment", reinterpret_cast<unsigned long>(this), 3);

	}
	int a_body1loopBody1cont1loopBody1cont6loopBody1cont2(int loopDepth) 
	{
															#line 5188 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (trState->readOptions.present() && trState->readOptions.get().debugID.present())
															#line 23403 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 5189 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			g_traceBatch.addEvent("TransactionDebug", trState->readOptions.get().debugID.get().first(), "NativeAPI.getExactRange.After");
															#line 23407 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 5192 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		RangeResult output(RangeResultRef(rep.data, rep.more), rep.arena);
															#line 5194 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (tssDuplicateStream.present() && !tssDuplicateStream.get().done())
															#line 23413 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 5196 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			GetKeyValuesStreamReply replyCopy;
															#line 5197 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			replyCopy.version = rep.version;
															#line 5198 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			replyCopy.more = rep.more;
															#line 5199 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			replyCopy.cached = rep.cached;
															#line 5200 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			replyCopy.arena.dependsOn(rep.arena);
															#line 5201 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			replyCopy.data.append(replyCopy.arena, rep.data.begin(), rep.data.size());
															#line 5202 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tssDuplicateStream.get().stream.send(replyCopy);
															#line 23429 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 5205 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		int64_t bytes = 0;
															#line 5206 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for( const KeyValueRef& kv : output ) {
															#line 5207 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			bytes += kv.key.size() + kv.value.size();
															#line 23437 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 5210 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		trState->cx->transactionBytesRead += bytes;
															#line 5211 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		trState->cx->transactionKeysRead += output.size();
															#line 5214 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (reverse && output.more && rep.data.size() > 0 && output[output.size() - 1].key == locations[shard].range.begin)
															#line 23445 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 5216 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			output.more = false;
															#line 23449 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 5219 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (output.more)
															#line 23453 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 5220 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!rep.data.size())
															#line 23457 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 5221 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				TraceEvent(SevError, "GetRangeStreamError") .detail("Reason", "More data indicated but no rows present") .detail("LimitBytes", limits.bytes) .detail("LimitRows", limits.rows) .detail("OutputSize", output.size()) .detail("OutputBytes", output.expectedSize()) .detail("BlockSize", rep.data.size()) .detail("BlockBytes", rep.data.expectedSize());
															#line 5229 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				ASSERT(false);
															#line 23463 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 5231 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			CODE_PROBE(true, "GetKeyValuesStreamReply.more in getRangeStream");
															#line 5233 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (reverse)
															#line 23469 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 5234 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				locations[shard].range = KeyRangeRef(locations[shard].range.begin, output[output.size() - 1].key);
															#line 23473 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
			else
			{
															#line 5237 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				locations[shard].range = KeyRangeRef(keyAfter(output[output.size() - 1].key), locations[shard].range.end);
															#line 23479 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
		}
															#line 5241 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (locations[shard].range.empty())
															#line 23484 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 5242 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			output.more = false;
															#line 23488 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 5245 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!output.more)
															#line 23492 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 5246 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			const KeyRange& range = locations[shard].range;
															#line 5247 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (shard == locations.size() - 1)
															#line 23498 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 5248 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				KeyRef begin = reverse ? keys.begin : range.end;
															#line 5249 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				KeyRef end = reverse ? range.begin : keys.end;
															#line 5251 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (begin >= end)
															#line 23506 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 5252 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					if (range.begin == allKeys.begin)
															#line 23510 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					{
															#line 5253 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
						output.readToBegin = true;
															#line 23514 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					}
															#line 5255 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					if (range.end == allKeys.end)
															#line 23518 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					{
															#line 5256 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
						output.readThroughEnd = true;
															#line 23522 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					}
															#line 5258 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					output.arena().dependsOn(keys.arena());
															#line 5261 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					output.more = true;
															#line 5262 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					output.setReadThrough(reverse ? keys.begin : keys.end);
															#line 5263 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					results->send(std::move(output));
															#line 5264 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					results->finish();
															#line 5265 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					if (tssDuplicateStream.present() && !tssDuplicateStream.get().done())
															#line 23536 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					{
															#line 5266 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
						tssDuplicateStream.get().stream.sendError(end_of_stream());
															#line 23540 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					}
															#line 5268 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					if (!static_cast<GetRangeStreamFragmentActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~GetRangeStreamFragmentActorState(); static_cast<GetRangeStreamFragmentActor*>(this)->destroy(); return 0; }
															#line 23544 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					new (&static_cast<GetRangeStreamFragmentActor*>(this)->SAV< Void >::value()) Void(Void());
					this->~GetRangeStreamFragmentActorState();
					static_cast<GetRangeStreamFragmentActor*>(this)->finishSendAndDelPromiseRef();
					return 0;
				}
															#line 5270 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				keys = KeyRangeRef(begin, end);
															#line 5271 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				breakAgain = true;
															#line 23554 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
			else
			{
															#line 5273 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				++shard;
															#line 23560 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 5275 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			output.arena().dependsOn(range.arena());
															#line 5277 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			output.more = true;
															#line 5278 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			output.setReadThrough(reverse ? range.begin : range.end);
															#line 5279 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			results->send(std::move(output));
															#line 23570 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			return a_body1loopBody1cont1loopBody1cont6break1(loopDepth==0?0:loopDepth-1); // break
		}
															#line 5283 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(output.size());
															#line 5284 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (keys.begin == allKeys.begin && !reverse)
															#line 23577 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 5285 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			output.readToBegin = true;
															#line 23581 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 5287 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (keys.end == allKeys.end && reverse)
															#line 23585 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 5288 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			output.readThroughEnd = true;
															#line 23589 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 5290 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		results->send(std::move(output));
															#line 23593 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (loopDepth == 0) return a_body1loopBody1cont1loopBody1cont6loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1cont6loopBody1cont1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 5173 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			++trState->cx->transactionPhysicalReadsCompleted;
															#line 5174 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (e.code() == error_code_broken_promise)
															#line 23605 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 5175 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (tssDuplicateStream.present() && !tssDuplicateStream.get().done())
															#line 23609 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 5176 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					tssDuplicateStream.get().stream.sendError(connection_failed());
															#line 23613 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
															#line 5178 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				return a_body1loopBody1cont1loopBody1Catch1(connection_failed(), std::max(0, loopDepth - 1));
															#line 23617 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 5180 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (e.code() != error_code_end_of_stream)
															#line 23621 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 5181 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (tssDuplicateStream.present() && !tssDuplicateStream.get().done())
															#line 23625 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 5182 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					tssDuplicateStream.get().stream.sendError(e);
															#line 23629 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
															#line 5184 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				return a_body1loopBody1cont1loopBody1Catch1(e, std::max(0, loopDepth - 1));
															#line 23633 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 5186 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			rep = GetKeyValuesStreamReply();
															#line 23637 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1loopBody1cont1loopBody1cont6loopBody1cont2(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1cont1loopBody1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1loopBody1cont1loopBody1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1cont6loopBody1cont3(int loopDepth) 
	{
															#line 5171 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		++trState->cx->transactionPhysicalReadsCompleted;
															#line 23652 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont1loopBody1cont6loopBody1cont5(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1cont6loopBody1cont1when1(Void const& _,int loopDepth) 
	{
															#line 5160 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		results->sendError(transaction_too_old());
															#line 5161 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (tssDuplicateStream.present() && !tssDuplicateStream.get().done())
															#line 23663 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 5162 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tssDuplicateStream.get().stream.sendError(transaction_too_old());
															#line 23667 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 5164 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<GetRangeStreamFragmentActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~GetRangeStreamFragmentActorState(); static_cast<GetRangeStreamFragmentActor*>(this)->destroy(); return 0; }
															#line 23671 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<GetRangeStreamFragmentActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~GetRangeStreamFragmentActorState();
		static_cast<GetRangeStreamFragmentActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1cont6loopBody1cont1when1(Void && _,int loopDepth) 
	{
															#line 5160 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		results->sendError(transaction_too_old());
															#line 5161 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (tssDuplicateStream.present() && !tssDuplicateStream.get().done())
															#line 23685 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 5162 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tssDuplicateStream.get().stream.sendError(transaction_too_old());
															#line 23689 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 5164 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<GetRangeStreamFragmentActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~GetRangeStreamFragmentActorState(); static_cast<GetRangeStreamFragmentActor*>(this)->destroy(); return 0; }
															#line 23693 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<GetRangeStreamFragmentActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~GetRangeStreamFragmentActorState();
		static_cast<GetRangeStreamFragmentActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1cont6loopBody1cont1when2(GetKeyValuesStreamReply const& _rep,int loopDepth) 
	{
															#line 5168 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		rep = _rep;
															#line 23705 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont1loopBody1cont6loopBody1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1cont6loopBody1cont1when2(GetKeyValuesStreamReply && _rep,int loopDepth) 
	{
															#line 5168 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		rep = _rep;
															#line 23714 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont1loopBody1cont6loopBody1cont3(loopDepth);

		return loopDepth;
	}
	void a_exitChoose5() 
	{
		if (static_cast<GetRangeStreamFragmentActor*>(this)->actor_wait_state > 0) static_cast<GetRangeStreamFragmentActor*>(this)->actor_wait_state = 0;
		static_cast<GetRangeStreamFragmentActor*>(this)->ActorCallback< GetRangeStreamFragmentActor, 4, Void >::remove();
		static_cast<GetRangeStreamFragmentActor*>(this)->ActorSingleCallback< GetRangeStreamFragmentActor, 5, GetKeyValuesStreamReply >::remove();

	}
	void a_callback_fire(ActorCallback< GetRangeStreamFragmentActor, 4, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getRangeStreamFragment", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1loopBody1cont1loopBody1cont6loopBody1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1loopBody1cont6loopBody1cont1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont1loopBody1cont6loopBody1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeStreamFragment", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_fire(ActorCallback< GetRangeStreamFragmentActor, 4, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getRangeStreamFragment", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1loopBody1cont1loopBody1cont6loopBody1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1loopBody1cont6loopBody1cont1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont1loopBody1cont6loopBody1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeStreamFragment", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_error(ActorCallback< GetRangeStreamFragmentActor, 4, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getRangeStreamFragment", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1loopBody1cont1loopBody1cont6loopBody1cont1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1loopBody1cont6loopBody1cont1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont1loopBody1cont6loopBody1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeStreamFragment", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_fire(ActorSingleCallback< GetRangeStreamFragmentActor, 5, GetKeyValuesStreamReply >*,GetKeyValuesStreamReply const& value) 
	{
		fdb_probe_actor_enter("getRangeStreamFragment", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose5();
		try {
			a_body1loopBody1cont1loopBody1cont6loopBody1cont1when2(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1loopBody1cont6loopBody1cont1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont1loopBody1cont6loopBody1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeStreamFragment", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_fire(ActorSingleCallback< GetRangeStreamFragmentActor, 5, GetKeyValuesStreamReply >*,GetKeyValuesStreamReply && value) 
	{
		fdb_probe_actor_enter("getRangeStreamFragment", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose5();
		try {
			a_body1loopBody1cont1loopBody1cont6loopBody1cont1when2(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1loopBody1cont6loopBody1cont1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont1loopBody1cont6loopBody1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeStreamFragment", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_error(ActorSingleCallback< GetRangeStreamFragmentActor, 5, GetKeyValuesStreamReply >*,Error err) 
	{
		fdb_probe_actor_enter("getRangeStreamFragment", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose5();
		try {
			a_body1loopBody1cont1loopBody1cont6loopBody1cont1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1loopBody1cont6loopBody1cont1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont1loopBody1cont6loopBody1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeStreamFragment", reinterpret_cast<unsigned long>(this), 5);

	}
	int a_body1loopBody1cont1loopBody1cont6loopBody1cont5(int loopDepth) 
	{
		try {
			loopDepth = a_body1loopBody1cont1loopBody1cont6loopBody1cont2(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1cont1loopBody1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1loopBody1cont1loopBody1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1cont10(int loopDepth) 
	{
		try {
			loopDepth = a_body1loopBody1cont1loopBody1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 2));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 2));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1Catch1cont4(Void const& _,int loopDepth) 
	{
		return a_body1loopBody1cont1break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1Catch1cont4(Void && _,int loopDepth) 
	{
		return a_body1loopBody1cont1break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1loopBody1Catch1cont4(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1loopBody1Catch1cont4(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose6() 
	{
		if (static_cast<GetRangeStreamFragmentActor*>(this)->actor_wait_state > 0) static_cast<GetRangeStreamFragmentActor*>(this)->actor_wait_state = 0;
		static_cast<GetRangeStreamFragmentActor*>(this)->ActorCallback< GetRangeStreamFragmentActor, 6, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetRangeStreamFragmentActor, 6, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getRangeStreamFragment", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose6();
		try {
			a_body1loopBody1cont1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeStreamFragment", reinterpret_cast<unsigned long>(this), 6);

	}
	void a_callback_fire(ActorCallback< GetRangeStreamFragmentActor, 6, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getRangeStreamFragment", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose6();
		try {
			a_body1loopBody1cont1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeStreamFragment", reinterpret_cast<unsigned long>(this), 6);

	}
	void a_callback_error(ActorCallback< GetRangeStreamFragmentActor, 6, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getRangeStreamFragment", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose6();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeStreamFragment", reinterpret_cast<unsigned long>(this), 6);

	}
															#line 5047 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<TransactionState> trState;
															#line 5047 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	ParallelStream<RangeResult>::Fragment* results;
															#line 5047 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeyRange keys;
															#line 5047 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetRangeLimits limits;
															#line 5047 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Snapshot snapshot;
															#line 5047 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reverse reverse;
															#line 5047 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	SpanContext spanContext;
															#line 5055 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	std::vector<KeyRangeLocationInfo> locations;
															#line 5063 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	int shard;
															#line 5067 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Optional<TSSDuplicateStreamData<GetKeyValuesStreamReply>> tssDuplicateStream;
															#line 5068 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetKeyValuesStreamRequest req;
															#line 5095 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetKeyValuesStreamReply rep;
															#line 5103 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	int useIdx;
															#line 5144 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	ReplyPromiseStream<GetKeyValuesStreamReply> replyStream;
															#line 5154 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	bool breakAgain;
															#line 23947 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via getRangeStreamFragment()
															#line 5047 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetRangeStreamFragmentActor final : public Actor<Void>, public ActorCallback< GetRangeStreamFragmentActor, 0, std::vector<KeyRangeLocationInfo> >, public ActorCallback< GetRangeStreamFragmentActor, 1, Void >, public ActorCallback< GetRangeStreamFragmentActor, 2, Void >, public ActorCallback< GetRangeStreamFragmentActor, 3, Void >, public ActorCallback< GetRangeStreamFragmentActor, 4, Void >, public ActorSingleCallback< GetRangeStreamFragmentActor, 5, GetKeyValuesStreamReply >, public ActorCallback< GetRangeStreamFragmentActor, 6, Void >, public FastAllocated<GetRangeStreamFragmentActor>, public GetRangeStreamFragmentActorState<GetRangeStreamFragmentActor> {
															#line 23952 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<GetRangeStreamFragmentActor>::operator new;
	using FastAllocated<GetRangeStreamFragmentActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< GetRangeStreamFragmentActor, 0, std::vector<KeyRangeLocationInfo> >;
friend struct ActorCallback< GetRangeStreamFragmentActor, 1, Void >;
friend struct ActorCallback< GetRangeStreamFragmentActor, 2, Void >;
friend struct ActorCallback< GetRangeStreamFragmentActor, 3, Void >;
friend struct ActorCallback< GetRangeStreamFragmentActor, 4, Void >;
friend struct ActorSingleCallback< GetRangeStreamFragmentActor, 5, GetKeyValuesStreamReply >;
friend struct ActorCallback< GetRangeStreamFragmentActor, 6, Void >;
															#line 5047 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetRangeStreamFragmentActor(Reference<TransactionState> const& trState,ParallelStream<RangeResult>::Fragment* const& results,KeyRange const& keys,GetRangeLimits const& limits,Snapshot const& snapshot,Reverse const& reverse,SpanContext const& spanContext) 
															#line 23969 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Void>(),
		   GetRangeStreamFragmentActorState<GetRangeStreamFragmentActor>(trState, results, keys, limits, snapshot, reverse, spanContext)
	{
		fdb_probe_actor_enter("getRangeStreamFragment", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("getRangeStreamFragment");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("getRangeStreamFragment", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< GetRangeStreamFragmentActor, 0, std::vector<KeyRangeLocationInfo> >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< GetRangeStreamFragmentActor, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< GetRangeStreamFragmentActor, 2, Void >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< GetRangeStreamFragmentActor, 3, Void >*)0, actor_cancelled()); break;
		case 5: this->a_callback_error((ActorCallback< GetRangeStreamFragmentActor, 4, Void >*)0, actor_cancelled()); break;
		case 6: this->a_callback_error((ActorCallback< GetRangeStreamFragmentActor, 6, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 5047 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<Void> getRangeStreamFragment( Reference<TransactionState> const& trState, ParallelStream<RangeResult>::Fragment* const& results, KeyRange const& keys, GetRangeLimits const& limits, Snapshot const& snapshot, Reverse const& reverse, SpanContext const& spanContext ) {
															#line 5047 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Void>(new GetRangeStreamFragmentActor(trState, results, keys, limits, snapshot, reverse, spanContext));
															#line 24002 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 5324 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

															#line 24007 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
[[nodiscard]] Future<Standalone<VectorRef<KeyRef>>> getRangeSplitPoints( Reference<TransactionState> const& trState, KeyRange const& keys, int64_t const& chunkSize );

#line 5328 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

static KeyRange intersect(KeyRangeRef lhs, KeyRangeRef rhs) {
	return KeyRange(KeyRangeRef(std::max(lhs.begin, rhs.begin), std::min(lhs.end, rhs.end)));
}

// Divides the requested key range into 1MB fragments, create range streams for each fragment, and merges the results so
// the client get them in order
															#line 24018 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via getRangeStream()
															#line 5335 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class GetRangeStreamActor>
															#line 5335 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetRangeStreamActorState {
															#line 24025 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 5335 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetRangeStreamActorState(Reference<TransactionState> const& trState,PromiseStream<RangeResult> const& _results,KeySelector const& begin,KeySelector const& end,GetRangeLimits const& limits,Promise<std::pair<Key, Key>> const& conflictRange,Snapshot const& snapshot,Reverse const& reverse) 
															#line 5335 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 5335 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : trState(trState),
															#line 5335 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   _results(_results),
															#line 5335 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   begin(begin),
															#line 5335 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   end(end),
															#line 5335 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   limits(limits),
															#line 5335 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   conflictRange(conflictRange),
															#line 5335 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   snapshot(snapshot),
															#line 5335 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   reverse(reverse),
															#line 5343 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   results(_results, CLIENT_KNOBS->RANGESTREAM_BUFFERED_FRAGMENTS_LIMIT)
															#line 24048 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("getRangeStream", reinterpret_cast<unsigned long>(this));

	}
	~GetRangeStreamActorState() 
	{
		fdb_probe_actor_destroy("getRangeStream", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 5346 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ASSERT(!limits.hasRowLimit());
															#line 5347 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			span = Span("NAPI:getRangeStream"_loc, trState->spanContext);
															#line 5349 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_0 = trState->startTransaction();
															#line 5349 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<GetRangeStreamActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 24069 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<GetRangeStreamActor*>(this)->actor_wait_state = 1;
															#line 5349 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< GetRangeStreamActor, 0, Void >*>(static_cast<GetRangeStreamActor*>(this)));
															#line 24074 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~GetRangeStreamActorState();
		static_cast<GetRangeStreamActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void const& _,int loopDepth) 
	{
															#line 5350 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		trState->cx->validateVersion(trState->readVersion());
															#line 5352 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		Future<Key> fb = resolveKey(trState, begin, UseTenant::True);
															#line 5353 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		fe = resolveKey(trState, end, UseTenant::True);
															#line 5355 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Key> __when_expr_1 = fb;
															#line 5355 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<GetRangeStreamActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 24105 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<GetRangeStreamActor*>(this)->actor_wait_state = 2;
															#line 5355 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< GetRangeStreamActor, 1, Key >*>(static_cast<GetRangeStreamActor*>(this)));
															#line 24110 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void && _,int loopDepth) 
	{
															#line 5350 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		trState->cx->validateVersion(trState->readVersion());
															#line 5352 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		Future<Key> fb = resolveKey(trState, begin, UseTenant::True);
															#line 5353 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		fe = resolveKey(trState, end, UseTenant::True);
															#line 5355 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Key> __when_expr_1 = fb;
															#line 5355 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<GetRangeStreamActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 24127 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<GetRangeStreamActor*>(this)->actor_wait_state = 2;
															#line 5355 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< GetRangeStreamActor, 1, Key >*>(static_cast<GetRangeStreamActor*>(this)));
															#line 24132 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<GetRangeStreamActor*>(this)->actor_wait_state > 0) static_cast<GetRangeStreamActor*>(this)->actor_wait_state = 0;
		static_cast<GetRangeStreamActor*>(this)->ActorCallback< GetRangeStreamActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetRangeStreamActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getRangeStream", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeStream", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< GetRangeStreamActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getRangeStream", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeStream", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< GetRangeStreamActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getRangeStream", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeStream", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont2(int loopDepth) 
	{
															#line 5356 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Key> __when_expr_2 = fe;
															#line 5356 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<GetRangeStreamActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 24206 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont2when1(__when_expr_2.get(), loopDepth); };
		static_cast<GetRangeStreamActor*>(this)->actor_wait_state = 3;
															#line 5356 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< GetRangeStreamActor, 2, Key >*>(static_cast<GetRangeStreamActor*>(this)));
															#line 24211 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1when1(Key const& __b,int loopDepth) 
	{
															#line 5355 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		b = __b;
															#line 24220 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont2(loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Key && __b,int loopDepth) 
	{
		b = std::move(__b);
		loopDepth = a_body1cont2(loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<GetRangeStreamActor*>(this)->actor_wait_state > 0) static_cast<GetRangeStreamActor*>(this)->actor_wait_state = 0;
		static_cast<GetRangeStreamActor*>(this)->ActorCallback< GetRangeStreamActor, 1, Key >::remove();

	}
	void a_callback_fire(ActorCallback< GetRangeStreamActor, 1, Key >*,Key const& value) 
	{
		fdb_probe_actor_enter("getRangeStream", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeStream", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< GetRangeStreamActor, 1, Key >*,Key && value) 
	{
		fdb_probe_actor_enter("getRangeStream", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeStream", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< GetRangeStreamActor, 1, Key >*,Error err) 
	{
		fdb_probe_actor_enter("getRangeStream", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeStream", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont3(int loopDepth) 
	{
															#line 5358 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!snapshot)
															#line 24287 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 5360 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			conflictRange.send(std::make_pair(std::min(b, Key(begin.getKey(), begin.arena())), std::max(e, Key(end.getKey(), end.arena()))));
															#line 24291 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 5364 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (b >= e)
															#line 24295 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 5365 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_3 = results.finish();
															#line 5365 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<GetRangeStreamActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 24301 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1cont3when1(__when_expr_3.get(), loopDepth); };
			static_cast<GetRangeStreamActor*>(this)->actor_wait_state = 4;
															#line 5365 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< GetRangeStreamActor, 3, Void >*>(static_cast<GetRangeStreamActor*>(this)));
															#line 24306 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1cont4(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont2when1(Key const& __e,int loopDepth) 
	{
															#line 5356 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		e = __e;
															#line 24320 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1cont2when1(Key && __e,int loopDepth) 
	{
		e = std::move(__e);
		loopDepth = a_body1cont3(loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<GetRangeStreamActor*>(this)->actor_wait_state > 0) static_cast<GetRangeStreamActor*>(this)->actor_wait_state = 0;
		static_cast<GetRangeStreamActor*>(this)->ActorCallback< GetRangeStreamActor, 2, Key >::remove();

	}
	void a_callback_fire(ActorCallback< GetRangeStreamActor, 2, Key >*,Key const& value) 
	{
		fdb_probe_actor_enter("getRangeStream", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeStream", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< GetRangeStreamActor, 2, Key >*,Key && value) 
	{
		fdb_probe_actor_enter("getRangeStream", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeStream", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< GetRangeStreamActor, 2, Key >*,Error err) 
	{
		fdb_probe_actor_enter("getRangeStream", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeStream", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1cont4(int loopDepth) 
	{
															#line 5373 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		outstandingRequests = std::vector<Future<Void>>();
															#line 5374 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		;
															#line 24389 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont4loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1cont6(Void const& _,int loopDepth) 
	{
															#line 5366 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<GetRangeStreamActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~GetRangeStreamActorState(); static_cast<GetRangeStreamActor*>(this)->destroy(); return 0; }
															#line 24398 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<GetRangeStreamActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~GetRangeStreamActorState();
		static_cast<GetRangeStreamActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont6(Void && _,int loopDepth) 
	{
															#line 5366 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<GetRangeStreamActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~GetRangeStreamActorState(); static_cast<GetRangeStreamActor*>(this)->destroy(); return 0; }
															#line 24410 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<GetRangeStreamActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~GetRangeStreamActorState();
		static_cast<GetRangeStreamActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont3when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont6(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont3when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont6(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<GetRangeStreamActor*>(this)->actor_wait_state > 0) static_cast<GetRangeStreamActor*>(this)->actor_wait_state = 0;
		static_cast<GetRangeStreamActor*>(this)->ActorCallback< GetRangeStreamActor, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetRangeStreamActor, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getRangeStream", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont3when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeStream", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< GetRangeStreamActor, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getRangeStream", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont3when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeStream", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< GetRangeStreamActor, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getRangeStream", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeStream", reinterpret_cast<unsigned long>(this), 3);

	}
	int a_body1cont8(int loopDepth) 
	{
															#line 5410 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_7 = waitForAll(outstandingRequests) && results.finish();
															#line 5410 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<GetRangeStreamActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 24487 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_7.isReady()) { if (__when_expr_7.isError()) return a_body1Catch1(__when_expr_7.getError(), loopDepth); else return a_body1cont8when1(__when_expr_7.get(), loopDepth); };
		static_cast<GetRangeStreamActor*>(this)->actor_wait_state = 8;
															#line 5410 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_7.addCallbackAndClear(static_cast<ActorCallback< GetRangeStreamActor, 7, Void >*>(static_cast<GetRangeStreamActor*>(this)));
															#line 24492 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont4loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1cont4loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1cont4loopBody1(int loopDepth) 
	{
															#line 5374 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!(b < e))
															#line 24508 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
			return a_body1cont4break1(loopDepth==0?0:loopDepth-1); // break
		}
															#line 5375 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<KeyRangeLocationInfo> __when_expr_4 = getKeyLocation( trState, reverse ? e : b, &StorageServerInterface::getKeyValuesStream, reverse, UseTenant::True);
															#line 5375 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<GetRangeStreamActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 24516 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1Catch1(__when_expr_4.getError(), std::max(0, loopDepth - 1)); else return a_body1cont4loopBody1when1(__when_expr_4.get(), loopDepth); };
		static_cast<GetRangeStreamActor*>(this)->actor_wait_state = 5;
															#line 5375 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< GetRangeStreamActor, 4, KeyRangeLocationInfo >*>(static_cast<GetRangeStreamActor*>(this)));
															#line 24521 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont4break1(int loopDepth) 
	{
		try {
			return a_body1cont8(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont4loopBody1cont1(int loopDepth) 
	{
															#line 5377 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		shardIntersection = intersect(locationInfo.range, KeyRangeRef(b, e));
															#line 5378 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Standalone<VectorRef<KeyRef>>> __when_expr_5 = getRangeSplitPoints(trState, shardIntersection, CLIENT_KNOBS->RANGESTREAM_FRAGMENT_SIZE);
															#line 5378 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<GetRangeStreamActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 24547 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_5.isReady()) { if (__when_expr_5.isError()) return a_body1Catch1(__when_expr_5.getError(), std::max(0, loopDepth - 1)); else return a_body1cont4loopBody1cont1when1(__when_expr_5.get(), loopDepth); };
		static_cast<GetRangeStreamActor*>(this)->actor_wait_state = 6;
															#line 5378 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_5.addCallbackAndClear(static_cast<ActorCallback< GetRangeStreamActor, 5, Standalone<VectorRef<KeyRef>> >*>(static_cast<GetRangeStreamActor*>(this)));
															#line 24552 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont4loopBody1when1(KeyRangeLocationInfo const& __locationInfo,int loopDepth) 
	{
															#line 5375 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		locationInfo = __locationInfo;
															#line 24561 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont4loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont4loopBody1when1(KeyRangeLocationInfo && __locationInfo,int loopDepth) 
	{
		locationInfo = std::move(__locationInfo);
		loopDepth = a_body1cont4loopBody1cont1(loopDepth);

		return loopDepth;
	}
	void a_exitChoose5() 
	{
		if (static_cast<GetRangeStreamActor*>(this)->actor_wait_state > 0) static_cast<GetRangeStreamActor*>(this)->actor_wait_state = 0;
		static_cast<GetRangeStreamActor*>(this)->ActorCallback< GetRangeStreamActor, 4, KeyRangeLocationInfo >::remove();

	}
	void a_callback_fire(ActorCallback< GetRangeStreamActor, 4, KeyRangeLocationInfo >*,KeyRangeLocationInfo const& value) 
	{
		fdb_probe_actor_enter("getRangeStream", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont4loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeStream", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_fire(ActorCallback< GetRangeStreamActor, 4, KeyRangeLocationInfo >*,KeyRangeLocationInfo && value) 
	{
		fdb_probe_actor_enter("getRangeStream", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont4loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeStream", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_error(ActorCallback< GetRangeStreamActor, 4, KeyRangeLocationInfo >*,Error err) 
	{
		fdb_probe_actor_enter("getRangeStream", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeStream", reinterpret_cast<unsigned long>(this), 4);

	}
	int a_body1cont4loopBody1cont3(int loopDepth) 
	{
															#line 5380 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		toSend = std::vector<KeyRange>();
															#line 5383 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!splitPoints.empty())
															#line 24630 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 5384 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			toSend.push_back(KeyRange(KeyRangeRef(shardIntersection.begin, splitPoints.front()), splitPoints.arena()));
															#line 5385 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			for(int i = 0;i < splitPoints.size() - 1;++i) {
															#line 5386 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				toSend.push_back(KeyRange(KeyRangeRef(splitPoints[i], splitPoints[i + 1]), splitPoints.arena()));
															#line 24638 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 5388 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			toSend.push_back(KeyRange(KeyRangeRef(splitPoints.back(), shardIntersection.end), splitPoints.arena()));
															#line 24642 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
		else
		{
															#line 5390 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			toSend.push_back(KeyRange(KeyRangeRef(shardIntersection.begin, shardIntersection.end)));
															#line 24648 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 5393 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		idx = 0;
															#line 5394 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		useIdx = 0;
															#line 5395 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		;
															#line 24656 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont4loopBody1cont3loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1cont4loopBody1cont1when1(Standalone<VectorRef<KeyRef>> const& __splitPoints,int loopDepth) 
	{
															#line 5378 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		splitPoints = __splitPoints;
															#line 24665 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont4loopBody1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1cont4loopBody1cont1when1(Standalone<VectorRef<KeyRef>> && __splitPoints,int loopDepth) 
	{
		splitPoints = std::move(__splitPoints);
		loopDepth = a_body1cont4loopBody1cont3(loopDepth);

		return loopDepth;
	}
	void a_exitChoose6() 
	{
		if (static_cast<GetRangeStreamActor*>(this)->actor_wait_state > 0) static_cast<GetRangeStreamActor*>(this)->actor_wait_state = 0;
		static_cast<GetRangeStreamActor*>(this)->ActorCallback< GetRangeStreamActor, 5, Standalone<VectorRef<KeyRef>> >::remove();

	}
	void a_callback_fire(ActorCallback< GetRangeStreamActor, 5, Standalone<VectorRef<KeyRef>> >*,Standalone<VectorRef<KeyRef>> const& value) 
	{
		fdb_probe_actor_enter("getRangeStream", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1cont4loopBody1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeStream", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_fire(ActorCallback< GetRangeStreamActor, 5, Standalone<VectorRef<KeyRef>> >*,Standalone<VectorRef<KeyRef>> && value) 
	{
		fdb_probe_actor_enter("getRangeStream", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1cont4loopBody1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeStream", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_error(ActorCallback< GetRangeStreamActor, 5, Standalone<VectorRef<KeyRef>> >*,Error err) 
	{
		fdb_probe_actor_enter("getRangeStream", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeStream", reinterpret_cast<unsigned long>(this), 5);

	}
	int a_body1cont4loopBody1cont4(int loopDepth) 
	{
															#line 5404 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (reverse)
															#line 24732 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 5405 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			e = shardIntersection.begin;
															#line 24736 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
		else
		{
															#line 5407 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			b = shardIntersection.end;
															#line 24742 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
		if (loopDepth == 0) return a_body1cont4loopHead1(0);

		return loopDepth;
	}
	int a_body1cont4loopBody1cont3loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1cont4loopBody1cont3loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1cont4loopBody1cont3loopBody1(int loopDepth) 
	{
															#line 5395 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!(idx < toSend.size()))
															#line 24759 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
			return a_body1cont4loopBody1cont3break1(loopDepth==0?0:loopDepth-1); // break
		}
															#line 5396 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		useIdx = reverse ? toSend.size() - idx - 1 : idx;
															#line 5397 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (toSend[useIdx].empty())
															#line 24767 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
			return a_body1cont4loopBody1cont3continue1(loopDepth); // continue
		}
															#line 5400 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<ParallelStream<RangeResult>::Fragment*> __when_expr_6 = results.createFragment();
															#line 5400 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<GetRangeStreamActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 2));
															#line 24775 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_6.isReady()) { if (__when_expr_6.isError()) return a_body1Catch1(__when_expr_6.getError(), std::max(0, loopDepth - 2)); else return a_body1cont4loopBody1cont3loopBody1when1(__when_expr_6.get(), loopDepth); };
		static_cast<GetRangeStreamActor*>(this)->actor_wait_state = 7;
															#line 5400 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_6.addCallbackAndClear(static_cast<ActorCallback< GetRangeStreamActor, 6, ParallelStream<RangeResult>::Fragment* >*>(static_cast<GetRangeStreamActor*>(this)));
															#line 24780 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont4loopBody1cont3break1(int loopDepth) 
	{
		try {
			return a_body1cont4loopBody1cont4(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1cont4loopBody1cont3continue1(int loopDepth) 
	{
															#line 5395 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		++idx;
															#line 24802 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (loopDepth == 0) return a_body1cont4loopBody1cont3loopHead1(0);

		return loopDepth;
	}
	int a_body1cont4loopBody1cont3loopBody1cont1(ParallelStream<RangeResult>::Fragment* const& fragment,int loopDepth) 
	{
															#line 5401 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		outstandingRequests.push_back( getRangeStreamFragment(trState, fragment, toSend[useIdx], limits, snapshot, reverse, span.context));
															#line 5395 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		++idx;
															#line 24813 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (loopDepth == 0) return a_body1cont4loopBody1cont3loopHead1(0);

		return loopDepth;
	}
	int a_body1cont4loopBody1cont3loopBody1cont1(ParallelStream<RangeResult>::Fragment* && fragment,int loopDepth) 
	{
															#line 5401 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		outstandingRequests.push_back( getRangeStreamFragment(trState, fragment, toSend[useIdx], limits, snapshot, reverse, span.context));
															#line 5395 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		++idx;
															#line 24824 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (loopDepth == 0) return a_body1cont4loopBody1cont3loopHead1(0);

		return loopDepth;
	}
	int a_body1cont4loopBody1cont3loopBody1when1(ParallelStream<RangeResult>::Fragment* const& fragment,int loopDepth) 
	{
		loopDepth = a_body1cont4loopBody1cont3loopBody1cont1(fragment, loopDepth);

		return loopDepth;
	}
	int a_body1cont4loopBody1cont3loopBody1when1(ParallelStream<RangeResult>::Fragment* && fragment,int loopDepth) 
	{
		loopDepth = a_body1cont4loopBody1cont3loopBody1cont1(std::move(fragment), loopDepth);

		return loopDepth;
	}
	void a_exitChoose7() 
	{
		if (static_cast<GetRangeStreamActor*>(this)->actor_wait_state > 0) static_cast<GetRangeStreamActor*>(this)->actor_wait_state = 0;
		static_cast<GetRangeStreamActor*>(this)->ActorCallback< GetRangeStreamActor, 6, ParallelStream<RangeResult>::Fragment* >::remove();

	}
	void a_callback_fire(ActorCallback< GetRangeStreamActor, 6, ParallelStream<RangeResult>::Fragment* >*,ParallelStream<RangeResult>::Fragment* const& value) 
	{
		fdb_probe_actor_enter("getRangeStream", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1cont4loopBody1cont3loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeStream", reinterpret_cast<unsigned long>(this), 6);

	}
	void a_callback_fire(ActorCallback< GetRangeStreamActor, 6, ParallelStream<RangeResult>::Fragment* >*,ParallelStream<RangeResult>::Fragment* && value) 
	{
		fdb_probe_actor_enter("getRangeStream", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1cont4loopBody1cont3loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeStream", reinterpret_cast<unsigned long>(this), 6);

	}
	void a_callback_error(ActorCallback< GetRangeStreamActor, 6, ParallelStream<RangeResult>::Fragment* >*,Error err) 
	{
		fdb_probe_actor_enter("getRangeStream", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeStream", reinterpret_cast<unsigned long>(this), 6);

	}
	int a_body1cont9(Void const& _,int loopDepth) 
	{
															#line 5411 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<GetRangeStreamActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~GetRangeStreamActorState(); static_cast<GetRangeStreamActor*>(this)->destroy(); return 0; }
															#line 24896 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<GetRangeStreamActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~GetRangeStreamActorState();
		static_cast<GetRangeStreamActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont9(Void && _,int loopDepth) 
	{
															#line 5411 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<GetRangeStreamActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~GetRangeStreamActorState(); static_cast<GetRangeStreamActor*>(this)->destroy(); return 0; }
															#line 24908 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<GetRangeStreamActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~GetRangeStreamActorState();
		static_cast<GetRangeStreamActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont8when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont9(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont8when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont9(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose8() 
	{
		if (static_cast<GetRangeStreamActor*>(this)->actor_wait_state > 0) static_cast<GetRangeStreamActor*>(this)->actor_wait_state = 0;
		static_cast<GetRangeStreamActor*>(this)->ActorCallback< GetRangeStreamActor, 7, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetRangeStreamActor, 7, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getRangeStream", reinterpret_cast<unsigned long>(this), 7);
		a_exitChoose8();
		try {
			a_body1cont8when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeStream", reinterpret_cast<unsigned long>(this), 7);

	}
	void a_callback_fire(ActorCallback< GetRangeStreamActor, 7, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getRangeStream", reinterpret_cast<unsigned long>(this), 7);
		a_exitChoose8();
		try {
			a_body1cont8when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeStream", reinterpret_cast<unsigned long>(this), 7);

	}
	void a_callback_error(ActorCallback< GetRangeStreamActor, 7, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getRangeStream", reinterpret_cast<unsigned long>(this), 7);
		a_exitChoose8();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeStream", reinterpret_cast<unsigned long>(this), 7);

	}
															#line 5335 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<TransactionState> trState;
															#line 5335 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	PromiseStream<RangeResult> _results;
															#line 5335 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeySelector begin;
															#line 5335 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeySelector end;
															#line 5335 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetRangeLimits limits;
															#line 5335 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Promise<std::pair<Key, Key>> conflictRange;
															#line 5335 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Snapshot snapshot;
															#line 5335 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reverse reverse;
															#line 5343 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	ParallelStream<RangeResult> results;
															#line 5347 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Span span;
															#line 5353 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Future<Key> fe;
															#line 5355 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Key b;
															#line 5356 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Key e;
															#line 5373 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	std::vector<Future<Void>> outstandingRequests;
															#line 5375 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeyRangeLocationInfo locationInfo;
															#line 5377 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeyRange shardIntersection;
															#line 5378 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Standalone<VectorRef<KeyRef>> splitPoints;
															#line 5380 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	std::vector<KeyRange> toSend;
															#line 5393 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	int idx;
															#line 5394 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	int useIdx;
															#line 25019 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via getRangeStream()
															#line 5335 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetRangeStreamActor final : public Actor<Void>, public ActorCallback< GetRangeStreamActor, 0, Void >, public ActorCallback< GetRangeStreamActor, 1, Key >, public ActorCallback< GetRangeStreamActor, 2, Key >, public ActorCallback< GetRangeStreamActor, 3, Void >, public ActorCallback< GetRangeStreamActor, 4, KeyRangeLocationInfo >, public ActorCallback< GetRangeStreamActor, 5, Standalone<VectorRef<KeyRef>> >, public ActorCallback< GetRangeStreamActor, 6, ParallelStream<RangeResult>::Fragment* >, public ActorCallback< GetRangeStreamActor, 7, Void >, public FastAllocated<GetRangeStreamActor>, public GetRangeStreamActorState<GetRangeStreamActor> {
															#line 25024 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<GetRangeStreamActor>::operator new;
	using FastAllocated<GetRangeStreamActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< GetRangeStreamActor, 0, Void >;
friend struct ActorCallback< GetRangeStreamActor, 1, Key >;
friend struct ActorCallback< GetRangeStreamActor, 2, Key >;
friend struct ActorCallback< GetRangeStreamActor, 3, Void >;
friend struct ActorCallback< GetRangeStreamActor, 4, KeyRangeLocationInfo >;
friend struct ActorCallback< GetRangeStreamActor, 5, Standalone<VectorRef<KeyRef>> >;
friend struct ActorCallback< GetRangeStreamActor, 6, ParallelStream<RangeResult>::Fragment* >;
friend struct ActorCallback< GetRangeStreamActor, 7, Void >;
															#line 5335 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetRangeStreamActor(Reference<TransactionState> const& trState,PromiseStream<RangeResult> const& _results,KeySelector const& begin,KeySelector const& end,GetRangeLimits const& limits,Promise<std::pair<Key, Key>> const& conflictRange,Snapshot const& snapshot,Reverse const& reverse) 
															#line 25042 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Void>(),
		   GetRangeStreamActorState<GetRangeStreamActor>(trState, _results, begin, end, limits, conflictRange, snapshot, reverse)
	{
		fdb_probe_actor_enter("getRangeStream", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("getRangeStream");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("getRangeStream", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< GetRangeStreamActor, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< GetRangeStreamActor, 1, Key >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< GetRangeStreamActor, 2, Key >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< GetRangeStreamActor, 3, Void >*)0, actor_cancelled()); break;
		case 5: this->a_callback_error((ActorCallback< GetRangeStreamActor, 4, KeyRangeLocationInfo >*)0, actor_cancelled()); break;
		case 6: this->a_callback_error((ActorCallback< GetRangeStreamActor, 5, Standalone<VectorRef<KeyRef>> >*)0, actor_cancelled()); break;
		case 7: this->a_callback_error((ActorCallback< GetRangeStreamActor, 6, ParallelStream<RangeResult>::Fragment* >*)0, actor_cancelled()); break;
		case 8: this->a_callback_error((ActorCallback< GetRangeStreamActor, 7, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 5335 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<Void> getRangeStream( Reference<TransactionState> const& trState, PromiseStream<RangeResult> const& _results, KeySelector const& begin, KeySelector const& end, GetRangeLimits const& limits, Promise<std::pair<Key, Key>> const& conflictRange, Snapshot const& snapshot, Reverse const& reverse ) {
															#line 5335 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Void>(new GetRangeStreamActor(trState, _results, begin, end, limits, conflictRange, snapshot, reverse));
															#line 25077 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 5413 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

Future<RangeResult> getRange(Reference<TransactionState> const& trState,
                             KeySelector const& begin,
                             KeySelector const& end,
                             GetRangeLimits const& limits,
                             Reverse const& reverse,
                             UseTenant const& useTenant) {
	return getRange<GetKeyValuesRequest, GetKeyValuesReply, RangeResult>(
	    trState, begin, end, ""_sr, limits, Promise<std::pair<Key, Key>>(), Snapshot::True, reverse, useTenant);
}

bool DatabaseContext::debugUseTags = false;
const std::vector<std::string> DatabaseContext::debugTransactionTagChoices = { "a", "b", "c", "d", "e", "f", "g",
	                                                                           "h", "i", "j", "k", "l", "m", "n",
	                                                                           "o", "p", "q", "r", "s", "t" };

void debugAddTags(Reference<TransactionState> trState) {
	int numTags = deterministicRandom()->randomInt(0, CLIENT_KNOBS->MAX_TAGS_PER_TRANSACTION + 1);
	for (int i = 0; i < numTags; ++i) {
		TransactionTag tag;
		if (deterministicRandom()->random01() < 0.7) {
			tag = TransactionTagRef(deterministicRandom()->randomChoice(DatabaseContext::debugTransactionTagChoices));
		} else {
			int length = deterministicRandom()->randomInt(1, CLIENT_KNOBS->MAX_TRANSACTION_TAG_LENGTH + 1);
			uint8_t* s = new (tag.arena()) uint8_t[length];
			for (int j = 0; j < length; ++j) {
				s[j] = (uint8_t)deterministicRandom()->randomInt(0, 256);
			}

			tag.contents() = TransactionTagRef(s, length);
		}

		if (deterministicRandom()->coinflip()) {
			trState->options.readTags.addTag(tag);
		}
		trState->options.tags.addTag(tag);
	}
}

Transaction::Transaction()
  : trState(makeReference<TransactionState>(TaskPriority::DefaultEndpoint, generateSpanID(false))) {}

Transaction::Transaction(Database const& cx, Optional<Reference<Tenant>> const& tenant)
  : trState(makeReference<TransactionState>(cx,
                                            tenant,
                                            cx->taskID,
                                            generateSpanID(cx->transactionTracingSample),
                                            createTrLogInfoProbabilistically(cx))),
    span(trState->spanContext, "Transaction"_loc), backoff(CLIENT_KNOBS->DEFAULT_BACKOFF), tr(trState->spanContext) {
	if (DatabaseContext::debugUseTags) {
		debugAddTags(trState);
	}
}

Transaction::~Transaction() {
	flushTrLogsIfEnabled();
	cancelWatches();
}

void Transaction::operator=(Transaction&& r) noexcept {
	flushTrLogsIfEnabled();
	tr = std::move(r.tr);
	trState = std::move(r.trState);
	extraConflictRanges = std::move(r.extraConflictRanges);
	commitResult = std::move(r.commitResult);
	committing = std::move(r.committing);
	backoff = r.backoff;
	watches = r.watches;
}

void Transaction::flushTrLogsIfEnabled() {
	if (trState && trState->trLogInfo && trState->trLogInfo->logsAdded && trState->trLogInfo->trLogWriter.getData()) {
		ASSERT(trState->trLogInfo->flushed == false);
		trState->cx->clientStatusUpdater.inStatusQ.push_back(
		    { trState->trLogInfo->identifier, std::move(trState->trLogInfo->trLogWriter) });
		trState->trLogInfo->flushed = true;
	}
}

VersionVector Transaction::getVersionVector() const {
	return trState->cx->ssVersionVectorCache;
}

void Transaction::setVersion(Version v) {
	trState->startTime = now();
	if (trState->readVersionFuture.isValid())
		throw read_version_already_set();
	if (v <= 0)
		throw version_invalid();

	trState->readVersionFuture = v;
	trState->readVersionObtainedFromGrvProxy = false;
}

Future<Optional<Value>> Transaction::get(const Key& key, Snapshot snapshot) {
	++trState->cx->transactionLogicalReads;
	++trState->cx->transactionGetValueRequests;
	// ASSERT (key < allKeys.end);

	// There are no keys in the database with size greater than the max key size
	if (key.size() > getMaxReadKeySize(key)) {
		return Optional<Value>();
	}

	auto ver = getReadVersion();

	/*	if (!systemKeys.contains(key))
	        return Optional<Value>(Value()); */

	if (!snapshot)
		tr.transaction.read_conflict_ranges.push_back(tr.arena, singleKeyRange(key, tr.arena));

	UseTenant useTenant = UseTenant::True;
	if (key == metadataVersionKey) {
		// It is legal to read the metadata version key inside of a tenant.
		// This will return the global metadata version key.
		useTenant = UseTenant::False;
		++trState->cx->transactionMetadataVersionReads;
		if (!ver.isReady() || trState->metadataVersion.isSet()) {
			return trState->metadataVersion.getFuture();
		} else {
			if (ver.isError()) {
				return ver.getError();
			}
			if (ver.get() == trState->cx->metadataVersionCache[trState->cx->mvCacheInsertLocation].first) {
				return trState->cx->metadataVersionCache[trState->cx->mvCacheInsertLocation].second;
			}

			Version v = ver.get();
			int hi = trState->cx->mvCacheInsertLocation;
			int lo = (trState->cx->mvCacheInsertLocation + 1) % trState->cx->metadataVersionCache.size();

			while (hi != lo) {
				int cu = hi > lo ? (hi + lo) / 2
				                 : ((hi + trState->cx->metadataVersionCache.size() + lo) / 2) %
				                       trState->cx->metadataVersionCache.size();
				if (v == trState->cx->metadataVersionCache[cu].first) {
					return trState->cx->metadataVersionCache[cu].second;
				}
				if (cu == lo) {
					break;
				}
				if (v < trState->cx->metadataVersionCache[cu].first) {
					hi = cu;
				} else {
					lo = (cu + 1) % trState->cx->metadataVersionCache.size();
				}
			}
		}
	}

	return getValue(trState, key, useTenant);
}

void Watch::setWatch(Future<Void> watchFuture) {
	this->watchFuture = watchFuture;

	// Cause the watch loop to go around and start waiting on watchFuture
	onSetWatchTrigger.send(Void());
}

															#line 25242 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via getTenantMetadata()
															#line 5574 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class GetTenantMetadataActor>
															#line 5574 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetTenantMetadataActorState {
															#line 25249 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 5574 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetTenantMetadataActorState(Reference<TransactionState> const& trState) 
															#line 5574 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 5574 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : trState(trState)
															#line 25256 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("getTenantMetadata", reinterpret_cast<unsigned long>(this));

	}
	~GetTenantMetadataActorState() 
	{
		fdb_probe_actor_destroy("getTenantMetadata", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 5575 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_0 = trState->startTransaction();
															#line 5575 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<GetTenantMetadataActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 25273 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<GetTenantMetadataActor*>(this)->actor_wait_state = 1;
															#line 5575 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< GetTenantMetadataActor, 0, Void >*>(static_cast<GetTenantMetadataActor*>(this)));
															#line 25278 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~GetTenantMetadataActorState();
		static_cast<GetTenantMetadataActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void const& _,int loopDepth) 
	{
															#line 5576 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<GetTenantMetadataActor*>(this)->SAV<TenantInfo>::futures) { (void)(trState->getTenantInfo()); this->~GetTenantMetadataActorState(); static_cast<GetTenantMetadataActor*>(this)->destroy(); return 0; }
															#line 25301 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<GetTenantMetadataActor*>(this)->SAV< TenantInfo >::value()) TenantInfo(trState->getTenantInfo());
		this->~GetTenantMetadataActorState();
		static_cast<GetTenantMetadataActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1(Void && _,int loopDepth) 
	{
															#line 5576 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<GetTenantMetadataActor*>(this)->SAV<TenantInfo>::futures) { (void)(trState->getTenantInfo()); this->~GetTenantMetadataActorState(); static_cast<GetTenantMetadataActor*>(this)->destroy(); return 0; }
															#line 25313 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<GetTenantMetadataActor*>(this)->SAV< TenantInfo >::value()) TenantInfo(trState->getTenantInfo());
		this->~GetTenantMetadataActorState();
		static_cast<GetTenantMetadataActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<GetTenantMetadataActor*>(this)->actor_wait_state > 0) static_cast<GetTenantMetadataActor*>(this)->actor_wait_state = 0;
		static_cast<GetTenantMetadataActor*>(this)->ActorCallback< GetTenantMetadataActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetTenantMetadataActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getTenantMetadata", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getTenantMetadata", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< GetTenantMetadataActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getTenantMetadata", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getTenantMetadata", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< GetTenantMetadataActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getTenantMetadata", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getTenantMetadata", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 5574 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<TransactionState> trState;
															#line 25386 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via getTenantMetadata()
															#line 5574 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetTenantMetadataActor final : public Actor<TenantInfo>, public ActorCallback< GetTenantMetadataActor, 0, Void >, public FastAllocated<GetTenantMetadataActor>, public GetTenantMetadataActorState<GetTenantMetadataActor> {
															#line 25391 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<GetTenantMetadataActor>::operator new;
	using FastAllocated<GetTenantMetadataActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<TenantInfo>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< GetTenantMetadataActor, 0, Void >;
															#line 5574 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetTenantMetadataActor(Reference<TransactionState> const& trState) 
															#line 25402 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<TenantInfo>(),
		   GetTenantMetadataActorState<GetTenantMetadataActor>(trState)
	{
		fdb_probe_actor_enter("getTenantMetadata", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("getTenantMetadata");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("getTenantMetadata", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< GetTenantMetadataActor, 0, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 5574 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<TenantInfo> getTenantMetadata( Reference<TransactionState> const& trState ) {
															#line 5574 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<TenantInfo>(new GetTenantMetadataActor(trState));
															#line 25430 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 5578 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

Future<TenantInfo> populateAndGetTenant(Reference<TransactionState> trState, Key const& key) {
	if (!trState->hasTenant() || key == metadataVersionKey) {
		return TenantInfo();
	} else if (trState->startTransaction().canGet()) {
		return trState->getTenantInfo();
	} else {
		return getTenantMetadata(trState);
	}
}

// Restarts a watch after a database switch
															#line 25446 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via restartWatch()
															#line 5590 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class RestartWatchActor>
															#line 5590 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class RestartWatchActorState {
															#line 25453 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 5590 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	RestartWatchActorState(Database const& cx,TenantInfo const& tenantInfo,Key const& key,Optional<Value> const& value,TagSet const& tags,SpanContext const& spanContext,TaskPriority const& taskID,Optional<UID> const& debugID,UseProvisionalProxies const& useProvisionalProxies) 
															#line 5590 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 5590 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : cx(cx),
															#line 5590 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   tenantInfo(tenantInfo),
															#line 5590 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   key(key),
															#line 5590 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   value(value),
															#line 5590 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   tags(tags),
															#line 5590 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   spanContext(spanContext),
															#line 5590 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   taskID(taskID),
															#line 5590 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   debugID(debugID),
															#line 5590 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   useProvisionalProxies(useProvisionalProxies)
															#line 25476 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("restartWatch", reinterpret_cast<unsigned long>(this));

	}
	~RestartWatchActorState() 
	{
		fdb_probe_actor_destroy("restartWatch", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 5601 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			cx->deleteWatchMetadata(tenantInfo.tenantId, key, true);
															#line 5603 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_0 = watchValueMap(cx->minAcceptableReadVersion, tenantInfo, key, value, cx, tags, spanContext, taskID, debugID, useProvisionalProxies);
															#line 5603 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<RestartWatchActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 25495 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<RestartWatchActor*>(this)->actor_wait_state = 1;
															#line 5603 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< RestartWatchActor, 0, Void >*>(static_cast<RestartWatchActor*>(this)));
															#line 25500 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~RestartWatchActorState();
		static_cast<RestartWatchActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void const& _,int loopDepth) 
	{
															#line 5614 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<RestartWatchActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~RestartWatchActorState(); static_cast<RestartWatchActor*>(this)->destroy(); return 0; }
															#line 25523 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<RestartWatchActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~RestartWatchActorState();
		static_cast<RestartWatchActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1(Void && _,int loopDepth) 
	{
															#line 5614 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<RestartWatchActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~RestartWatchActorState(); static_cast<RestartWatchActor*>(this)->destroy(); return 0; }
															#line 25535 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<RestartWatchActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~RestartWatchActorState();
		static_cast<RestartWatchActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<RestartWatchActor*>(this)->actor_wait_state > 0) static_cast<RestartWatchActor*>(this)->actor_wait_state = 0;
		static_cast<RestartWatchActor*>(this)->ActorCallback< RestartWatchActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< RestartWatchActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("restartWatch", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("restartWatch", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< RestartWatchActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("restartWatch", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("restartWatch", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< RestartWatchActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("restartWatch", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("restartWatch", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 5590 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Database cx;
															#line 5590 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	TenantInfo tenantInfo;
															#line 5590 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Key key;
															#line 5590 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Optional<Value> value;
															#line 5590 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	TagSet tags;
															#line 5590 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	SpanContext spanContext;
															#line 5590 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	TaskPriority taskID;
															#line 5590 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Optional<UID> debugID;
															#line 5590 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	UseProvisionalProxies useProvisionalProxies;
															#line 25624 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via restartWatch()
															#line 5590 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class RestartWatchActor final : public Actor<Void>, public ActorCallback< RestartWatchActor, 0, Void >, public FastAllocated<RestartWatchActor>, public RestartWatchActorState<RestartWatchActor> {
															#line 25629 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<RestartWatchActor>::operator new;
	using FastAllocated<RestartWatchActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< RestartWatchActor, 0, Void >;
															#line 5590 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	RestartWatchActor(Database const& cx,TenantInfo const& tenantInfo,Key const& key,Optional<Value> const& value,TagSet const& tags,SpanContext const& spanContext,TaskPriority const& taskID,Optional<UID> const& debugID,UseProvisionalProxies const& useProvisionalProxies) 
															#line 25640 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Void>(),
		   RestartWatchActorState<RestartWatchActor>(cx, tenantInfo, key, value, tags, spanContext, taskID, debugID, useProvisionalProxies)
	{
		fdb_probe_actor_enter("restartWatch", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("restartWatch");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("restartWatch", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< RestartWatchActor, 0, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 5590 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<Void> restartWatch( Database const& cx, TenantInfo const& tenantInfo, Key const& key, Optional<Value> const& value, TagSet const& tags, SpanContext const& spanContext, TaskPriority const& taskID, Optional<UID> const& debugID, UseProvisionalProxies const& useProvisionalProxies ) {
															#line 5590 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Void>(new RestartWatchActor(cx, tenantInfo, key, value, tags, spanContext, taskID, debugID, useProvisionalProxies));
															#line 25668 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 5616 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

// FIXME: This seems pretty horrible. Now a Database can't die until all of its watches do...
															#line 25674 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via watch()
															#line 5618 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class WatchActor>
															#line 5618 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class WatchActorState {
															#line 25681 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 5618 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	WatchActorState(Reference<Watch> const& watch,Database const& cx,Future<TenantInfo> const& tenant,TagSet const& tags,SpanContext const& spanContext,TaskPriority const& taskID,Optional<UID> const& debugID,UseProvisionalProxies const& useProvisionalProxies) 
															#line 5618 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 5618 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : watch(watch),
															#line 5618 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   cx(cx),
															#line 5618 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   tenant(tenant),
															#line 5618 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   tags(tags),
															#line 5618 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   spanContext(spanContext),
															#line 5618 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   taskID(taskID),
															#line 5618 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   debugID(debugID),
															#line 5618 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   useProvisionalProxies(useProvisionalProxies)
															#line 25702 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("watch", reinterpret_cast<unsigned long>(this));

	}
	~WatchActorState() 
	{
		fdb_probe_actor_destroy("watch", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
			try {
															#line 5630 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				StrictFuture<Void> __when_expr_0 = watch->onChangeTrigger.getFuture();
															#line 5627 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (static_cast<WatchActor*>(this)->actor_wait_state < 0) return a_body1Catch2(actor_cancelled(), loopDepth);
															#line 25720 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch2(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
															#line 5633 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				StrictFuture<Void> __when_expr_1 = watch->onSetWatchTrigger.getFuture();
															#line 25724 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch2(__when_expr_1.getError(), loopDepth); else return a_body1when2(__when_expr_1.get(), loopDepth); };
				static_cast<WatchActor*>(this)->actor_wait_state = 1;
															#line 5630 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< WatchActor, 0, Void >*>(static_cast<WatchActor*>(this)));
															#line 5633 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< WatchActor, 1, Void >*>(static_cast<WatchActor*>(this)));
															#line 25731 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				loopDepth = 0;
			}
			catch (Error& error) {
				loopDepth = a_body1Catch2(error, loopDepth);
			} catch (...) {
				loopDepth = a_body1Catch2(unknown_error(), loopDepth);
			}
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~WatchActorState();
		static_cast<WatchActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 5664 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		cx->decreaseWatchCounter();
															#line 5665 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<WatchActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~WatchActorState(); static_cast<WatchActor*>(this)->destroy(); return 0; }
															#line 25762 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<WatchActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~WatchActorState();
		static_cast<WatchActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1Catch2(const Error& e,int loopDepth=0) 
	{
		try {
															#line 5660 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			cx->decreaseWatchCounter();
															#line 5661 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			return a_body1Catch1(e, loopDepth);
															#line 25777 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont2(int loopDepth) 
	{
		loopDepth = a_body1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont2(loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont2(loopDepth);

		return loopDepth;
	}
	int a_body1when2(Void const& _,int loopDepth) 
	{
															#line 5635 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<TenantInfo> __when_expr_2 = tenant;
															#line 5635 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<WatchActor*>(this)->actor_wait_state < 0) return a_body1Catch2(actor_cancelled(), loopDepth);
															#line 25811 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch2(__when_expr_2.getError(), loopDepth); else return a_body1when2when1(__when_expr_2.get(), loopDepth); };
		static_cast<WatchActor*>(this)->actor_wait_state = 2;
															#line 5635 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< WatchActor, 2, TenantInfo >*>(static_cast<WatchActor*>(this)));
															#line 25816 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1when2(Void && _,int loopDepth) 
	{
															#line 5635 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<TenantInfo> __when_expr_2 = tenant;
															#line 5635 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<WatchActor*>(this)->actor_wait_state < 0) return a_body1Catch2(actor_cancelled(), loopDepth);
															#line 25827 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch2(__when_expr_2.getError(), loopDepth); else return a_body1when2when1(__when_expr_2.get(), loopDepth); };
		static_cast<WatchActor*>(this)->actor_wait_state = 2;
															#line 5635 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< WatchActor, 2, TenantInfo >*>(static_cast<WatchActor*>(this)));
															#line 25832 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<WatchActor*>(this)->actor_wait_state > 0) static_cast<WatchActor*>(this)->actor_wait_state = 0;
		static_cast<WatchActor*>(this)->ActorCallback< WatchActor, 0, Void >::remove();
		static_cast<WatchActor*>(this)->ActorCallback< WatchActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< WatchActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("watch", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("watch", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< WatchActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("watch", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("watch", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< WatchActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("watch", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch2(err, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("watch", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1when2cont1(int loopDepth) 
	{
															#line 5636 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		;
															#line 25893 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1when2cont1loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1when2when1(TenantInfo const& __tenantInfo,int loopDepth) 
	{
															#line 5635 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		tenantInfo = __tenantInfo;
															#line 25902 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1when2cont1(loopDepth);

		return loopDepth;
	}
	int a_body1when2when1(TenantInfo && __tenantInfo,int loopDepth) 
	{
		tenantInfo = std::move(__tenantInfo);
		loopDepth = a_body1when2cont1(loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<WatchActor*>(this)->actor_wait_state > 0) static_cast<WatchActor*>(this)->actor_wait_state = 0;
		static_cast<WatchActor*>(this)->ActorCallback< WatchActor, 2, TenantInfo >::remove();

	}
	void a_callback_fire(ActorCallback< WatchActor, 2, TenantInfo >*,TenantInfo const& value) 
	{
		fdb_probe_actor_enter("watch", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose2();
		try {
			a_body1when2when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("watch", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< WatchActor, 2, TenantInfo >*,TenantInfo && value) 
	{
		fdb_probe_actor_enter("watch", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose2();
		try {
			a_body1when2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("watch", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< WatchActor, 2, TenantInfo >*,Error err) 
	{
		fdb_probe_actor_enter("watch", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose2();
		try {
			a_body1Catch2(err, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("watch", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1when2cont2(int loopDepth) 
	{
		loopDepth = a_body1cont2(loopDepth);

		return loopDepth;
	}
	int a_body1when2cont1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1when2cont1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1when2cont1loopBody1(int loopDepth) 
	{
															#line 5639 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_3 = watch->watchFuture;
															#line 5637 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<WatchActor*>(this)->actor_wait_state < 0) return a_body1Catch2(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 25984 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch2(__when_expr_3.getError(), std::max(0, loopDepth - 1)); else return a_body1when2cont1loopBody1when1(__when_expr_3.get(), loopDepth); };
															#line 5643 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_4 = cx->connectionFileChanged();
															#line 25988 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1Catch2(__when_expr_4.getError(), std::max(0, loopDepth - 1)); else return a_body1when2cont1loopBody1when2(__when_expr_4.get(), loopDepth); };
		static_cast<WatchActor*>(this)->actor_wait_state = 3;
															#line 5639 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< WatchActor, 3, Void >*>(static_cast<WatchActor*>(this)));
															#line 5643 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< WatchActor, 4, Void >*>(static_cast<WatchActor*>(this)));
															#line 25995 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1when2cont1break1(int loopDepth) 
	{
		try {
			return a_body1when2cont2(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch2(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch2(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1when2cont1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1when2cont1loopHead1(0);

		return loopDepth;
	}
	int a_body1when2cont1loopBody1when1(Void const& _,int loopDepth) 
	{
		return a_body1when2cont1break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1when2cont1loopBody1when1(Void && _,int loopDepth) 
	{
		return a_body1when2cont1break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1when2cont1loopBody1when2(Void const& _,int loopDepth) 
	{
															#line 5644 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		CODE_PROBE(true, "Recreated a watch after switch");
															#line 5645 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		watch->watchFuture = restartWatch(cx, tenantInfo, watch->key, watch->value, tags, spanContext, taskID, debugID, useProvisionalProxies);
															#line 26037 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1when2cont1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1when2cont1loopBody1when2(Void && _,int loopDepth) 
	{
															#line 5644 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		CODE_PROBE(true, "Recreated a watch after switch");
															#line 5645 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		watch->watchFuture = restartWatch(cx, tenantInfo, watch->key, watch->value, tags, spanContext, taskID, debugID, useProvisionalProxies);
															#line 26048 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1when2cont1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<WatchActor*>(this)->actor_wait_state > 0) static_cast<WatchActor*>(this)->actor_wait_state = 0;
		static_cast<WatchActor*>(this)->ActorCallback< WatchActor, 3, Void >::remove();
		static_cast<WatchActor*>(this)->ActorCallback< WatchActor, 4, Void >::remove();

	}
	void a_callback_fire(ActorCallback< WatchActor, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("watch", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose3();
		try {
			a_body1when2cont1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("watch", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< WatchActor, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("watch", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose3();
		try {
			a_body1when2cont1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("watch", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< WatchActor, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("watch", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose3();
		try {
			a_body1Catch2(err, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("watch", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< WatchActor, 4, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("watch", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose3();
		try {
			a_body1when2cont1loopBody1when2(value, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("watch", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_fire(ActorCallback< WatchActor, 4, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("watch", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose3();
		try {
			a_body1when2cont1loopBody1when2(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("watch", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_error(ActorCallback< WatchActor, 4, Void >*,Error err) 
	{
		fdb_probe_actor_enter("watch", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose3();
		try {
			a_body1Catch2(err, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("watch", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_fire(ActorCallback< WatchActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("watch", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose1();
		try {
			a_body1when2(value, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("watch", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< WatchActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("watch", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose1();
		try {
			a_body1when2(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("watch", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< WatchActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("watch", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose1();
		try {
			a_body1Catch2(err, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("watch", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont3(int loopDepth) 
	{
		try {
			loopDepth = a_body1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
															#line 5618 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<Watch> watch;
															#line 5618 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Database cx;
															#line 5618 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Future<TenantInfo> tenant;
															#line 5618 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	TagSet tags;
															#line 5618 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	SpanContext spanContext;
															#line 5618 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	TaskPriority taskID;
															#line 5618 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Optional<UID> debugID;
															#line 5618 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	UseProvisionalProxies useProvisionalProxies;
															#line 5635 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	TenantInfo tenantInfo;
															#line 26226 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via watch()
															#line 5618 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class WatchActor final : public Actor<Void>, public ActorCallback< WatchActor, 0, Void >, public ActorCallback< WatchActor, 1, Void >, public ActorCallback< WatchActor, 2, TenantInfo >, public ActorCallback< WatchActor, 3, Void >, public ActorCallback< WatchActor, 4, Void >, public FastAllocated<WatchActor>, public WatchActorState<WatchActor> {
															#line 26231 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<WatchActor>::operator new;
	using FastAllocated<WatchActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< WatchActor, 0, Void >;
friend struct ActorCallback< WatchActor, 1, Void >;
friend struct ActorCallback< WatchActor, 2, TenantInfo >;
friend struct ActorCallback< WatchActor, 3, Void >;
friend struct ActorCallback< WatchActor, 4, Void >;
															#line 5618 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	WatchActor(Reference<Watch> const& watch,Database const& cx,Future<TenantInfo> const& tenant,TagSet const& tags,SpanContext const& spanContext,TaskPriority const& taskID,Optional<UID> const& debugID,UseProvisionalProxies const& useProvisionalProxies) 
															#line 26246 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Void>(),
		   WatchActorState<WatchActor>(watch, cx, tenant, tags, spanContext, taskID, debugID, useProvisionalProxies)
	{
		fdb_probe_actor_enter("watch", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("watch");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("watch", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< WatchActor, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< WatchActor, 2, TenantInfo >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< WatchActor, 3, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 5618 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<Void> watch( Reference<Watch> const& watch, Database const& cx, Future<TenantInfo> const& tenant, TagSet const& tags, SpanContext const& spanContext, TaskPriority const& taskID, Optional<UID> const& debugID, UseProvisionalProxies const& useProvisionalProxies ) {
															#line 5618 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Void>(new WatchActor(watch, cx, tenant, tags, spanContext, taskID, debugID, useProvisionalProxies));
															#line 26276 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 5667 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

Future<Version> Transaction::getRawReadVersion() {
	return ::getRawVersion(trState);
}

Future<Void> Transaction::watch(Reference<Watch> watch) {
	++trState->cx->transactionWatchRequests;

	trState->cx->increaseWatchCounter();
	watch->readOptions = trState->readOptions;
	watches.push_back(watch);
	return ::watch(watch,
	               trState->cx,
	               populateAndGetTenant(trState, watch->key),
	               trState->options.readTags,
	               trState->spanContext,
	               trState->taskID,
	               trState->readOptions.present() ? trState->readOptions.get().debugID : Optional<UID>(),
	               trState->useProvisionalProxies);
}

															#line 26301 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via getAddressesForKeyActor()
															#line 5688 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class GetAddressesForKeyActorActor>
															#line 5688 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetAddressesForKeyActorActorState {
															#line 26308 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 5688 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetAddressesForKeyActorActorState(Reference<TransactionState> const& trState,Key const& key) 
															#line 5688 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 5688 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : trState(trState),
															#line 5688 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   key(key),
															#line 5689 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   ssi()
															#line 26319 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("getAddressesForKeyActor", reinterpret_cast<unsigned long>(this));

	}
	~GetAddressesForKeyActorActorState() 
	{
		fdb_probe_actor_destroy("getAddressesForKeyActor", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 5691 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_0 = trState->startTransaction();
															#line 5691 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<GetAddressesForKeyActorActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 26336 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<GetAddressesForKeyActorActor*>(this)->actor_wait_state = 1;
															#line 5691 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< GetAddressesForKeyActorActor, 0, Void >*>(static_cast<GetAddressesForKeyActorActor*>(this)));
															#line 26341 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~GetAddressesForKeyActorActorState();
		static_cast<GetAddressesForKeyActorActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void const& _,int loopDepth) 
	{
															#line 5693 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		resolvedKey = key;
															#line 5694 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (trState->hasTenant())
															#line 26366 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 5695 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			resolvedKey = key.withPrefix(trState->tenant().get()->prefix());
															#line 26370 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 5700 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ksKey = keyServersKey(resolvedKey);
															#line 5701 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<RangeResult> __when_expr_1 = getRange(trState, lastLessOrEqual(serverTagKeys.begin), firstGreaterThan(serverTagKeys.end), GetRangeLimits(CLIENT_KNOBS->TOO_MANY), Reverse::False, UseTenant::False);
															#line 5701 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<GetAddressesForKeyActorActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 26378 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<GetAddressesForKeyActorActor*>(this)->actor_wait_state = 2;
															#line 5701 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< GetAddressesForKeyActorActor, 1, RangeResult >*>(static_cast<GetAddressesForKeyActorActor*>(this)));
															#line 26383 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void && _,int loopDepth) 
	{
															#line 5693 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		resolvedKey = key;
															#line 5694 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (trState->hasTenant())
															#line 26394 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 5695 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			resolvedKey = key.withPrefix(trState->tenant().get()->prefix());
															#line 26398 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 5700 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ksKey = keyServersKey(resolvedKey);
															#line 5701 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<RangeResult> __when_expr_1 = getRange(trState, lastLessOrEqual(serverTagKeys.begin), firstGreaterThan(serverTagKeys.end), GetRangeLimits(CLIENT_KNOBS->TOO_MANY), Reverse::False, UseTenant::False);
															#line 5701 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<GetAddressesForKeyActorActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 26406 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<GetAddressesForKeyActorActor*>(this)->actor_wait_state = 2;
															#line 5701 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< GetAddressesForKeyActorActor, 1, RangeResult >*>(static_cast<GetAddressesForKeyActorActor*>(this)));
															#line 26411 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<GetAddressesForKeyActorActor*>(this)->actor_wait_state > 0) static_cast<GetAddressesForKeyActorActor*>(this)->actor_wait_state = 0;
		static_cast<GetAddressesForKeyActorActor*>(this)->ActorCallback< GetAddressesForKeyActorActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetAddressesForKeyActorActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getAddressesForKeyActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getAddressesForKeyActor", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< GetAddressesForKeyActorActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getAddressesForKeyActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getAddressesForKeyActor", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< GetAddressesForKeyActorActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getAddressesForKeyActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getAddressesForKeyActor", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont2(int loopDepth) 
	{
															#line 5707 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(!serverTagResult.more && serverTagResult.size() < CLIENT_KNOBS->TOO_MANY);
															#line 5708 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		Future<RangeResult> futureServerUids = getRange( trState, lastLessOrEqual(ksKey), firstGreaterThan(ksKey), GetRangeLimits(1), Reverse::False, UseTenant::False);
															#line 5710 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<RangeResult> __when_expr_2 = futureServerUids;
															#line 5710 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<GetAddressesForKeyActorActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 26489 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont2when1(__when_expr_2.get(), loopDepth); };
		static_cast<GetAddressesForKeyActorActor*>(this)->actor_wait_state = 3;
															#line 5710 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< GetAddressesForKeyActorActor, 2, RangeResult >*>(static_cast<GetAddressesForKeyActorActor*>(this)));
															#line 26494 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1when1(RangeResult const& __serverTagResult,int loopDepth) 
	{
															#line 5701 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		serverTagResult = __serverTagResult;
															#line 26503 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont2(loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(RangeResult && __serverTagResult,int loopDepth) 
	{
		serverTagResult = std::move(__serverTagResult);
		loopDepth = a_body1cont2(loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<GetAddressesForKeyActorActor*>(this)->actor_wait_state > 0) static_cast<GetAddressesForKeyActorActor*>(this)->actor_wait_state = 0;
		static_cast<GetAddressesForKeyActorActor*>(this)->ActorCallback< GetAddressesForKeyActorActor, 1, RangeResult >::remove();

	}
	void a_callback_fire(ActorCallback< GetAddressesForKeyActorActor, 1, RangeResult >*,RangeResult const& value) 
	{
		fdb_probe_actor_enter("getAddressesForKeyActor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getAddressesForKeyActor", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< GetAddressesForKeyActorActor, 1, RangeResult >*,RangeResult && value) 
	{
		fdb_probe_actor_enter("getAddressesForKeyActor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getAddressesForKeyActor", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< GetAddressesForKeyActorActor, 1, RangeResult >*,Error err) 
	{
		fdb_probe_actor_enter("getAddressesForKeyActor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getAddressesForKeyActor", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont4(RangeResult const& serverUids,int loopDepth) 
	{
															#line 5712 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(serverUids.size());
															#line 5714 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		std::vector<UID> src;
															#line 5715 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		std::vector<UID> ignore;
															#line 5718 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		decodeKeyServersValue(serverTagResult, serverUids[0].value, src, ignore);
															#line 5719 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Optional<std::vector<StorageServerInterface>>> __when_expr_3 = transactionalGetServerInterfaces(trState, src);
															#line 5719 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<GetAddressesForKeyActorActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 26580 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1cont4when1(__when_expr_3.get(), loopDepth); };
		static_cast<GetAddressesForKeyActorActor*>(this)->actor_wait_state = 4;
															#line 5719 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< GetAddressesForKeyActorActor, 3, Optional<std::vector<StorageServerInterface>> >*>(static_cast<GetAddressesForKeyActorActor*>(this)));
															#line 26585 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont4(RangeResult && serverUids,int loopDepth) 
	{
															#line 5712 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(serverUids.size());
															#line 5714 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		std::vector<UID> src;
															#line 5715 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		std::vector<UID> ignore;
															#line 5718 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		decodeKeyServersValue(serverTagResult, serverUids[0].value, src, ignore);
															#line 5719 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Optional<std::vector<StorageServerInterface>>> __when_expr_3 = transactionalGetServerInterfaces(trState, src);
															#line 5719 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<GetAddressesForKeyActorActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 26604 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1cont4when1(__when_expr_3.get(), loopDepth); };
		static_cast<GetAddressesForKeyActorActor*>(this)->actor_wait_state = 4;
															#line 5719 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< GetAddressesForKeyActorActor, 3, Optional<std::vector<StorageServerInterface>> >*>(static_cast<GetAddressesForKeyActorActor*>(this)));
															#line 26609 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont2when1(RangeResult const& serverUids,int loopDepth) 
	{
		loopDepth = a_body1cont4(serverUids, loopDepth);

		return loopDepth;
	}
	int a_body1cont2when1(RangeResult && serverUids,int loopDepth) 
	{
		loopDepth = a_body1cont4(std::move(serverUids), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<GetAddressesForKeyActorActor*>(this)->actor_wait_state > 0) static_cast<GetAddressesForKeyActorActor*>(this)->actor_wait_state = 0;
		static_cast<GetAddressesForKeyActorActor*>(this)->ActorCallback< GetAddressesForKeyActorActor, 2, RangeResult >::remove();

	}
	void a_callback_fire(ActorCallback< GetAddressesForKeyActorActor, 2, RangeResult >*,RangeResult const& value) 
	{
		fdb_probe_actor_enter("getAddressesForKeyActor", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getAddressesForKeyActor", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< GetAddressesForKeyActorActor, 2, RangeResult >*,RangeResult && value) 
	{
		fdb_probe_actor_enter("getAddressesForKeyActor", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getAddressesForKeyActor", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< GetAddressesForKeyActorActor, 2, RangeResult >*,Error err) 
	{
		fdb_probe_actor_enter("getAddressesForKeyActor", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getAddressesForKeyActor", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1cont5(Optional<std::vector<StorageServerInterface>> const& serverInterfaces,int loopDepth) 
	{
															#line 5722 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(serverInterfaces.present());
															#line 5724 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ssi = serverInterfaces.get();
															#line 5726 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		Standalone<VectorRef<const char*>> addresses;
															#line 5727 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for( auto i : ssi ) {
															#line 5728 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			std::string ipString = trState->options.includePort ? i.address().toString() : i.address().ip.toString();
															#line 5729 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			char* c_string = new (addresses.arena()) char[ipString.length() + 1];
															#line 5730 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			strcpy(c_string, ipString.c_str());
															#line 5731 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			addresses.push_back(addresses.arena(), c_string);
															#line 26695 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 5733 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<GetAddressesForKeyActorActor*>(this)->SAV<Standalone<VectorRef<const char*>>>::futures) { (void)(addresses); this->~GetAddressesForKeyActorActorState(); static_cast<GetAddressesForKeyActorActor*>(this)->destroy(); return 0; }
															#line 26699 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<GetAddressesForKeyActorActor*>(this)->SAV< Standalone<VectorRef<const char*>> >::value()) Standalone<VectorRef<const char*>>(addresses);
		this->~GetAddressesForKeyActorActorState();
		static_cast<GetAddressesForKeyActorActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont5(Optional<std::vector<StorageServerInterface>> && serverInterfaces,int loopDepth) 
	{
															#line 5722 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(serverInterfaces.present());
															#line 5724 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ssi = serverInterfaces.get();
															#line 5726 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		Standalone<VectorRef<const char*>> addresses;
															#line 5727 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for( auto i : ssi ) {
															#line 5728 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			std::string ipString = trState->options.includePort ? i.address().toString() : i.address().ip.toString();
															#line 5729 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			char* c_string = new (addresses.arena()) char[ipString.length() + 1];
															#line 5730 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			strcpy(c_string, ipString.c_str());
															#line 5731 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			addresses.push_back(addresses.arena(), c_string);
															#line 26725 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 5733 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<GetAddressesForKeyActorActor*>(this)->SAV<Standalone<VectorRef<const char*>>>::futures) { (void)(addresses); this->~GetAddressesForKeyActorActorState(); static_cast<GetAddressesForKeyActorActor*>(this)->destroy(); return 0; }
															#line 26729 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<GetAddressesForKeyActorActor*>(this)->SAV< Standalone<VectorRef<const char*>> >::value()) Standalone<VectorRef<const char*>>(addresses);
		this->~GetAddressesForKeyActorActorState();
		static_cast<GetAddressesForKeyActorActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont4when1(Optional<std::vector<StorageServerInterface>> const& serverInterfaces,int loopDepth) 
	{
		loopDepth = a_body1cont5(serverInterfaces, loopDepth);

		return loopDepth;
	}
	int a_body1cont4when1(Optional<std::vector<StorageServerInterface>> && serverInterfaces,int loopDepth) 
	{
		loopDepth = a_body1cont5(std::move(serverInterfaces), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<GetAddressesForKeyActorActor*>(this)->actor_wait_state > 0) static_cast<GetAddressesForKeyActorActor*>(this)->actor_wait_state = 0;
		static_cast<GetAddressesForKeyActorActor*>(this)->ActorCallback< GetAddressesForKeyActorActor, 3, Optional<std::vector<StorageServerInterface>> >::remove();

	}
	void a_callback_fire(ActorCallback< GetAddressesForKeyActorActor, 3, Optional<std::vector<StorageServerInterface>> >*,Optional<std::vector<StorageServerInterface>> const& value) 
	{
		fdb_probe_actor_enter("getAddressesForKeyActor", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont4when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getAddressesForKeyActor", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< GetAddressesForKeyActorActor, 3, Optional<std::vector<StorageServerInterface>> >*,Optional<std::vector<StorageServerInterface>> && value) 
	{
		fdb_probe_actor_enter("getAddressesForKeyActor", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont4when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getAddressesForKeyActor", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< GetAddressesForKeyActorActor, 3, Optional<std::vector<StorageServerInterface>> >*,Error err) 
	{
		fdb_probe_actor_enter("getAddressesForKeyActor", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getAddressesForKeyActor", reinterpret_cast<unsigned long>(this), 3);

	}
															#line 5688 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<TransactionState> trState;
															#line 5688 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Key key;
															#line 5689 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	std::vector<StorageServerInterface> ssi;
															#line 5693 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Key resolvedKey;
															#line 5700 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Key ksKey;
															#line 5701 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	RangeResult serverTagResult;
															#line 26812 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via getAddressesForKeyActor()
															#line 5688 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetAddressesForKeyActorActor final : public Actor<Standalone<VectorRef<const char*>>>, public ActorCallback< GetAddressesForKeyActorActor, 0, Void >, public ActorCallback< GetAddressesForKeyActorActor, 1, RangeResult >, public ActorCallback< GetAddressesForKeyActorActor, 2, RangeResult >, public ActorCallback< GetAddressesForKeyActorActor, 3, Optional<std::vector<StorageServerInterface>> >, public FastAllocated<GetAddressesForKeyActorActor>, public GetAddressesForKeyActorActorState<GetAddressesForKeyActorActor> {
															#line 26817 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<GetAddressesForKeyActorActor>::operator new;
	using FastAllocated<GetAddressesForKeyActorActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Standalone<VectorRef<const char*>>>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< GetAddressesForKeyActorActor, 0, Void >;
friend struct ActorCallback< GetAddressesForKeyActorActor, 1, RangeResult >;
friend struct ActorCallback< GetAddressesForKeyActorActor, 2, RangeResult >;
friend struct ActorCallback< GetAddressesForKeyActorActor, 3, Optional<std::vector<StorageServerInterface>> >;
															#line 5688 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetAddressesForKeyActorActor(Reference<TransactionState> const& trState,Key const& key) 
															#line 26831 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Standalone<VectorRef<const char*>>>(),
		   GetAddressesForKeyActorActorState<GetAddressesForKeyActorActor>(trState, key)
	{
		fdb_probe_actor_enter("getAddressesForKeyActor", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("getAddressesForKeyActor");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("getAddressesForKeyActor", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< GetAddressesForKeyActorActor, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< GetAddressesForKeyActorActor, 1, RangeResult >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< GetAddressesForKeyActorActor, 2, RangeResult >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< GetAddressesForKeyActorActor, 3, Optional<std::vector<StorageServerInterface>> >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 5688 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<Standalone<VectorRef<const char*>>> getAddressesForKeyActor( Reference<TransactionState> const& trState, Key const& key ) {
															#line 5688 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Standalone<VectorRef<const char*>>>(new GetAddressesForKeyActorActor(trState, key));
															#line 26862 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 5735 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

Future<Standalone<VectorRef<const char*>>> Transaction::getAddressesForKey(const Key& key) {
	++trState->cx->transactionLogicalReads;
	++trState->cx->transactionGetAddressesForKeyRequests;
	return getAddressesForKeyActor(trState, key);
}

															#line 26873 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via getKeyAndConflictRange()
															#line 5742 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class GetKeyAndConflictRangeActor>
															#line 5742 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetKeyAndConflictRangeActorState {
															#line 26880 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 5742 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetKeyAndConflictRangeActorState(Reference<TransactionState> const& trState,KeySelector const& k,Promise<std::pair<Key, Key>> const& conflictRange) 
															#line 5742 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 5742 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : trState(trState),
															#line 5742 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   k(k),
															#line 5742 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   conflictRange(conflictRange)
															#line 26891 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("getKeyAndConflictRange", reinterpret_cast<unsigned long>(this));

	}
	~GetKeyAndConflictRangeActorState() 
	{
		fdb_probe_actor_destroy("getKeyAndConflictRange", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
			try {
															#line 5746 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				StrictFuture<Key> __when_expr_0 = getKey(trState, k);
															#line 5746 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (static_cast<GetKeyAndConflictRangeActor*>(this)->actor_wait_state < 0) return a_body1Catch2(actor_cancelled(), loopDepth);
															#line 26909 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch2(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
				static_cast<GetKeyAndConflictRangeActor*>(this)->actor_wait_state = 1;
															#line 5746 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< GetKeyAndConflictRangeActor, 0, Key >*>(static_cast<GetKeyAndConflictRangeActor*>(this)));
															#line 26914 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				loopDepth = 0;
			}
			catch (Error& error) {
				loopDepth = a_body1Catch2(error, loopDepth);
			} catch (...) {
				loopDepth = a_body1Catch2(unknown_error(), loopDepth);
			}
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~GetKeyAndConflictRangeActorState();
		static_cast<GetKeyAndConflictRangeActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1Catch2(const Error& e,int loopDepth=0) 
	{
		try {
															#line 5754 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			conflictRange.send(std::make_pair(Key(), Key()));
															#line 5755 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			return a_body1Catch1(e, loopDepth);
															#line 26946 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont2(Key const& rep,int loopDepth) 
	{
															#line 5747 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (k.offset <= 0)
															#line 26960 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 5748 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			conflictRange.send(std::make_pair(rep, k.orEqual ? keyAfter(k.getKey()) : Key(k.getKey(), k.arena())));
															#line 26964 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
		else
		{
															#line 5750 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			conflictRange.send( std::make_pair(k.orEqual ? keyAfter(k.getKey()) : Key(k.getKey(), k.arena()), keyAfter(rep)));
															#line 26970 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 5752 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<GetKeyAndConflictRangeActor*>(this)->SAV<Key>::futures) { (void)(rep); this->~GetKeyAndConflictRangeActorState(); static_cast<GetKeyAndConflictRangeActor*>(this)->destroy(); return 0; }
															#line 26974 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<GetKeyAndConflictRangeActor*>(this)->SAV< Key >::value()) Key(rep);
		this->~GetKeyAndConflictRangeActorState();
		static_cast<GetKeyAndConflictRangeActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont2(Key && rep,int loopDepth) 
	{
															#line 5747 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (k.offset <= 0)
															#line 26986 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 5748 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			conflictRange.send(std::make_pair(rep, k.orEqual ? keyAfter(k.getKey()) : Key(k.getKey(), k.arena())));
															#line 26990 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
		else
		{
															#line 5750 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			conflictRange.send( std::make_pair(k.orEqual ? keyAfter(k.getKey()) : Key(k.getKey(), k.arena()), keyAfter(rep)));
															#line 26996 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 5752 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<GetKeyAndConflictRangeActor*>(this)->SAV<Key>::futures) { (void)(rep); this->~GetKeyAndConflictRangeActorState(); static_cast<GetKeyAndConflictRangeActor*>(this)->destroy(); return 0; }
															#line 27000 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<GetKeyAndConflictRangeActor*>(this)->SAV< Key >::value()) Key(rep);
		this->~GetKeyAndConflictRangeActorState();
		static_cast<GetKeyAndConflictRangeActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1when1(Key const& rep,int loopDepth) 
	{
		loopDepth = a_body1cont2(rep, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Key && rep,int loopDepth) 
	{
		loopDepth = a_body1cont2(std::move(rep), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<GetKeyAndConflictRangeActor*>(this)->actor_wait_state > 0) static_cast<GetKeyAndConflictRangeActor*>(this)->actor_wait_state = 0;
		static_cast<GetKeyAndConflictRangeActor*>(this)->ActorCallback< GetKeyAndConflictRangeActor, 0, Key >::remove();

	}
	void a_callback_fire(ActorCallback< GetKeyAndConflictRangeActor, 0, Key >*,Key const& value) 
	{
		fdb_probe_actor_enter("getKeyAndConflictRange", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getKeyAndConflictRange", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< GetKeyAndConflictRangeActor, 0, Key >*,Key && value) 
	{
		fdb_probe_actor_enter("getKeyAndConflictRange", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getKeyAndConflictRange", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< GetKeyAndConflictRangeActor, 0, Key >*,Error err) 
	{
		fdb_probe_actor_enter("getKeyAndConflictRange", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch2(err, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getKeyAndConflictRange", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 5742 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<TransactionState> trState;
															#line 5742 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeySelector k;
															#line 5742 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Promise<std::pair<Key, Key>> conflictRange;
															#line 27077 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via getKeyAndConflictRange()
															#line 5742 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetKeyAndConflictRangeActor final : public Actor<Key>, public ActorCallback< GetKeyAndConflictRangeActor, 0, Key >, public FastAllocated<GetKeyAndConflictRangeActor>, public GetKeyAndConflictRangeActorState<GetKeyAndConflictRangeActor> {
															#line 27082 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<GetKeyAndConflictRangeActor>::operator new;
	using FastAllocated<GetKeyAndConflictRangeActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Key>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< GetKeyAndConflictRangeActor, 0, Key >;
															#line 5742 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetKeyAndConflictRangeActor(Reference<TransactionState> const& trState,KeySelector const& k,Promise<std::pair<Key, Key>> const& conflictRange) 
															#line 27093 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Key>(),
		   GetKeyAndConflictRangeActorState<GetKeyAndConflictRangeActor>(trState, k, conflictRange)
	{
		fdb_probe_actor_enter("getKeyAndConflictRange", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("getKeyAndConflictRange");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("getKeyAndConflictRange", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< GetKeyAndConflictRangeActor, 0, Key >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 5742 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<Key> getKeyAndConflictRange( Reference<TransactionState> const& trState, KeySelector const& k, Promise<std::pair<Key, Key>> const& conflictRange ) {
															#line 5742 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Key>(new GetKeyAndConflictRangeActor(trState, k, conflictRange));
															#line 27121 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 5758 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

Future<Key> Transaction::getKey(const KeySelector& key, Snapshot snapshot) {
	++trState->cx->transactionLogicalReads;
	++trState->cx->transactionGetKeyRequests;
	if (snapshot)
		return ::getKey(trState, key);

	Promise<std::pair<Key, Key>> conflictRange;
	extraConflictRanges.push_back(conflictRange.getFuture());
	return getKeyAndConflictRange(trState, key, conflictRange);
}

template <class GetKeyValuesFamilyRequest>
void increaseCounterForRequest(Database cx) {
	if constexpr (std::is_same<GetKeyValuesFamilyRequest, GetKeyValuesRequest>::value) {
		++cx->transactionGetRangeRequests;
	} else if (std::is_same<GetKeyValuesFamilyRequest, GetMappedKeyValuesRequest>::value) {
		++cx->transactionGetMappedRangeRequests;
	} else {
		UNREACHABLE();
	}
}

template <class GetKeyValuesFamilyRequest, class GetKeyValuesFamilyReply, class RangeResultFamily>
Future<RangeResultFamily> Transaction::getRangeInternal(const KeySelector& begin,
                                                        const KeySelector& end,
                                                        const Key& mapper,
                                                        GetRangeLimits limits,
                                                        Snapshot snapshot,
                                                        Reverse reverse) {
	++trState->cx->transactionLogicalReads;
	increaseCounterForRequest<GetKeyValuesFamilyRequest>(trState->cx);

	if (limits.isReached())
		return RangeResultFamily();

	if (!limits.isValid())
		return range_limits_invalid();

	ASSERT(limits.rows != 0);

	KeySelector b = begin;
	if (b.orEqual) {
		CODE_PROBE(true, "Native begin orEqual==true");
		b.removeOrEqual(b.arena());
	}

	KeySelector e = end;
	if (e.orEqual) {
		CODE_PROBE(true, "Native end orEqual==true");
		e.removeOrEqual(e.arena());
	}

	if (b.offset >= e.offset && b.getKey() >= e.getKey()) {
		CODE_PROBE(true, "Native range inverted");
		return RangeResultFamily();
	}

	if (!snapshot && !std::is_same_v<GetKeyValuesFamilyRequest, GetKeyValuesRequest>) {
		// Currently, NativeAPI does not support serialization for getMappedRange. You should consider use
		// ReadYourWrites APIs which wraps around NativeAPI and provides serialization for getMappedRange. (Even if
		// you don't want RYW, you may use ReadYourWrites APIs with RYW disabled.)
		throw unsupported_operation();
	}
	Promise<std::pair<Key, Key>> conflictRange;
	if (!snapshot) {
		extraConflictRanges.push_back(conflictRange.getFuture());
	}

	return ::getRange<GetKeyValuesFamilyRequest, GetKeyValuesFamilyReply, RangeResultFamily>(
	    trState, b, e, mapper, limits, conflictRange, snapshot, reverse);
}

Future<RangeResult> Transaction::getRange(const KeySelector& begin,
                                          const KeySelector& end,
                                          GetRangeLimits limits,
                                          Snapshot snapshot,
                                          Reverse reverse) {
	return getRangeInternal<GetKeyValuesRequest, GetKeyValuesReply, RangeResult>(
	    begin, end, ""_sr, limits, snapshot, reverse);
}

Future<MappedRangeResult> Transaction::getMappedRange(const KeySelector& begin,
                                                      const KeySelector& end,
                                                      const Key& mapper,
                                                      GetRangeLimits limits,
                                                      Snapshot snapshot,
                                                      Reverse reverse) {
	return getRangeInternal<GetMappedKeyValuesRequest, GetMappedKeyValuesReply, MappedRangeResult>(
	    begin, end, mapper, limits, snapshot, reverse);
}

Future<RangeResult> Transaction::getRange(const KeySelector& begin,
                                          const KeySelector& end,
                                          int limit,
                                          Snapshot snapshot,
                                          Reverse reverse) {
	return getRange(begin, end, GetRangeLimits(limit), snapshot, reverse);
}

// A method for streaming data from the storage server that is more efficient than getRange when reading large amounts
// of data
Future<Void> Transaction::getRangeStream(PromiseStream<RangeResult>& results,
                                         const KeySelector& begin,
                                         const KeySelector& end,
                                         GetRangeLimits limits,
                                         Snapshot snapshot,
                                         Reverse reverse) {
	++trState->cx->transactionLogicalReads;
	++trState->cx->transactionGetRangeStreamRequests;

	// FIXME: limits are not implemented yet, and this code has not be tested with reverse=true
	ASSERT(!limits.hasByteLimit() && !limits.hasRowLimit() && !reverse);

	KeySelector b = begin;
	if (b.orEqual) {
		CODE_PROBE(true, "Native stream begin orEqual==true", probe::decoration::rare);
		b.removeOrEqual(b.arena());
	}

	KeySelector e = end;
	if (e.orEqual) {
		CODE_PROBE(true, "Native stream end orEqual==true", probe::decoration::rare);
		e.removeOrEqual(e.arena());
	}

	if (b.offset >= e.offset && b.getKey() >= e.getKey()) {
		CODE_PROBE(true, "Native stream range inverted", probe::decoration::rare);
		results.sendError(end_of_stream());
		return Void();
	}

	Promise<std::pair<Key, Key>> conflictRange;
	if (!snapshot) {
		extraConflictRanges.push_back(conflictRange.getFuture());
	}

	return forwardErrors(::getRangeStream(trState, results, b, e, limits, conflictRange, snapshot, reverse), results);
}

Future<Void> Transaction::getRangeStream(PromiseStream<RangeResult>& results,
                                         const KeySelector& begin,
                                         const KeySelector& end,
                                         int limit,
                                         Snapshot snapshot,
                                         Reverse reverse) {
	return getRangeStream(results, begin, end, GetRangeLimits(limit), snapshot, reverse);
}

void Transaction::addReadConflictRange(KeyRangeRef const& keys) {
	ASSERT(!keys.empty());

	// There aren't any keys in the database with size larger than the max key size, so if range contains large keys
	// we can translate it to an equivalent one with smaller keys
	KeyRef begin = keys.begin;
	KeyRef end = keys.end;

	int64_t beginMaxSize = getMaxReadKeySize(begin);
	int64_t endMaxSize = getMaxReadKeySize(end);
	if (begin.size() > beginMaxSize) {
		begin = begin.substr(0, beginMaxSize + 1);
	}
	if (end.size() > endMaxSize) {
		end = end.substr(0, endMaxSize + 1);
	}

	KeyRangeRef r = KeyRangeRef(begin, end);

	if (r.empty()) {
		return;
	}

	tr.transaction.read_conflict_ranges.push_back_deep(tr.arena, r);
}

void Transaction::makeSelfConflicting() {
	BinaryWriter wr(Unversioned());
	wr.serializeBytes("\xFF/SC/"_sr);
	wr << deterministicRandom()->randomUniqueID();
	auto r = singleKeyRange(wr.toValue(), tr.arena);
	tr.transaction.read_conflict_ranges.push_back(tr.arena, r);
	tr.transaction.write_conflict_ranges.push_back(tr.arena, r);
}

void Transaction::set(const KeyRef& key, const ValueRef& value, AddConflictRange addConflictRange) {
	++trState->cx->transactionSetMutations;
	if (key.size() > getMaxWriteKeySize(key, trState->options.rawAccess))
		throw key_too_large();
	if (value.size() > CLIENT_KNOBS->VALUE_SIZE_LIMIT)
		throw value_too_large();

	auto& req = tr;
	auto& t = req.transaction;
	auto r = singleKeyRange(key, req.arena);
	auto v = ValueRef(req.arena, value);
	t.mutations.emplace_back(req.arena, MutationRef::SetValue, r.begin, v);
	trState->totalCost += getWriteOperationCost(key.expectedSize() + value.expectedSize());

	if (addConflictRange) {
		t.write_conflict_ranges.push_back(req.arena, r);
	}
}

void Transaction::atomicOp(const KeyRef& key,
                           const ValueRef& operand,
                           MutationRef::Type operationType,
                           AddConflictRange addConflictRange) {
	++trState->cx->transactionAtomicMutations;
	if (key.size() > getMaxWriteKeySize(key, trState->options.rawAccess))
		throw key_too_large();
	if (operand.size() > CLIENT_KNOBS->VALUE_SIZE_LIMIT)
		throw value_too_large();

	if (apiVersionAtLeast(510)) {
		if (operationType == MutationRef::Min)
			operationType = MutationRef::MinV2;
		else if (operationType == MutationRef::And)
			operationType = MutationRef::AndV2;
	}

	auto& req = tr;
	auto& t = req.transaction;
	auto r = singleKeyRange(key, req.arena);
	auto v = ValueRef(req.arena, operand);

	t.mutations.emplace_back(req.arena, operationType, r.begin, v);
	trState->totalCost += getWriteOperationCost(key.expectedSize());

	if (addConflictRange && operationType != MutationRef::SetVersionstampedKey)
		t.write_conflict_ranges.push_back(req.arena, r);

	CODE_PROBE(true, "NativeAPI atomic operation");
}

void Transaction::clear(const KeyRangeRef& range, AddConflictRange addConflictRange) {
	++trState->cx->transactionClearMutations;
	auto& req = tr;
	auto& t = req.transaction;

	KeyRef begin = range.begin;
	KeyRef end = range.end;

	// There aren't any keys in the database with size larger than the max key size, so if range contains large keys
	// we can translate it to an equivalent one with smaller keys
	int64_t beginMaxSize = getMaxClearKeySize(begin);
	int64_t endMaxSize = getMaxClearKeySize(end);
	if (begin.size() > beginMaxSize) {
		begin = begin.substr(0, beginMaxSize + 1);
	}
	if (end.size() > endMaxSize) {
		end = end.substr(0, endMaxSize + 1);
	}

	auto r = KeyRangeRef(req.arena, KeyRangeRef(begin, end));
	if (r.empty())
		return;

	t.mutations.emplace_back(req.arena, MutationRef::ClearRange, r.begin, r.end);
	// NOTE: The throttling cost of each clear is assumed to be one page.
	// This makes compuation fast, but can be inaccurate and may
	// underestimate the cost of large clears.
	trState->totalCost += CLIENT_KNOBS->TAG_THROTTLING_PAGE_SIZE;
	if (addConflictRange)
		t.write_conflict_ranges.push_back(req.arena, r);
}
void Transaction::clear(const KeyRef& key, AddConflictRange addConflictRange) {
	++trState->cx->transactionClearMutations;
	// There aren't any keys in the database with size larger than the max key size
	if (key.size() > getMaxClearKeySize(key)) {
		return;
	}

	auto& req = tr;
	auto& t = req.transaction;

	// efficient single key range clear range mutation, see singleKeyRange
	uint8_t* data = new (req.arena) uint8_t[key.size() + 1];
	memcpy(data, key.begin(), key.size());
	data[key.size()] = 0;
	t.mutations.emplace_back(
	    req.arena, MutationRef::ClearRange, KeyRef(data, key.size()), KeyRef(data, key.size() + 1));
	if (addConflictRange)
		t.write_conflict_ranges.emplace_back(req.arena, KeyRef(data, key.size()), KeyRef(data, key.size() + 1));
}
void Transaction::addWriteConflictRange(const KeyRangeRef& keys) {
	ASSERT(!keys.empty());
	auto& req = tr;
	auto& t = req.transaction;

	// There aren't any keys in the database with size larger than the max key size, so if range contains large keys
	// we can translate it to an equivalent one with smaller keys
	KeyRef begin = keys.begin;
	KeyRef end = keys.end;

	int64_t beginMaxSize = getMaxKeySize(begin);
	int64_t endMaxSize = getMaxKeySize(end);
	if (begin.size() > beginMaxSize) {
		begin = begin.substr(0, beginMaxSize + 1);
	}
	if (end.size() > endMaxSize) {
		end = end.substr(0, endMaxSize + 1);
	}
	KeyRangeRef r = KeyRangeRef(begin, end);

	if (r.empty()) {
		return;
	}

	t.write_conflict_ranges.push_back_deep(req.arena, r);
}

double Transaction::getBackoff(int errCode) {
	double returnedBackoff = backoff;

	if (errCode == error_code_tag_throttled) {
		auto priorityItr = trState->cx->throttledTags.find(trState->options.priority);
		for (auto& tag : trState->options.tags) {
			if (priorityItr != trState->cx->throttledTags.end()) {
				auto tagItr = priorityItr->second.find(tag);
				if (tagItr != priorityItr->second.end()) {
					CODE_PROBE(true, "Returning throttle backoff");
					returnedBackoff = std::max(
					    returnedBackoff,
					    std::min(CLIENT_KNOBS->TAG_THROTTLE_RECHECK_INTERVAL, tagItr->second.throttleDuration()));
					if (returnedBackoff == CLIENT_KNOBS->TAG_THROTTLE_RECHECK_INTERVAL) {
						break;
					}
				}
			}
		}
	}

	returnedBackoff *= deterministicRandom()->random01();

	// Set backoff for next time
	if (errCode == error_code_commit_proxy_memory_limit_exceeded ||
	    errCode == error_code_grv_proxy_memory_limit_exceeded) {

		backoff = std::min(backoff * CLIENT_KNOBS->BACKOFF_GROWTH_RATE, CLIENT_KNOBS->RESOURCE_CONSTRAINED_MAX_BACKOFF);
	} else {
		backoff = std::min(backoff * CLIENT_KNOBS->BACKOFF_GROWTH_RATE, trState->options.maxBackoff);
	}

	return returnedBackoff;
}

TransactionOptions::TransactionOptions(Database const& cx) {
	reset(cx);
	if (BUGGIFY) {
		commitOnFirstProxy = true;
	}
}

void TransactionOptions::clear() {
	maxBackoff = CLIENT_KNOBS->DEFAULT_MAX_BACKOFF;
	getReadVersionFlags = 0;
	sizeLimit = CLIENT_KNOBS->TRANSACTION_SIZE_LIMIT;
	maxTransactionLoggingFieldLength = 0;
	checkWritesEnabled = false;
	causalWriteRisky = false;
	commitOnFirstProxy = false;
	debugDump = false;
	lockAware = false;
	readOnly = false;
	firstInBatch = false;
	includePort = false;
	reportConflictingKeys = false;
	tags = TagSet{};
	readTags = TagSet{};
	priority = TransactionPriority::DEFAULT;
	expensiveClearCostEstimation = false;
	useGrvCache = false;
	skipGrvCache = false;
	rawAccess = false;
	bypassStorageQuota = false;
}

TransactionOptions::TransactionOptions() {
	clear();
}

void TransactionOptions::reset(Database const& cx) {
	clear();
	lockAware = cx->lockAware;
	if (cx->apiVersionAtLeast(630)) {
		includePort = true;
	}
}

void Transaction::resetImpl(bool generateNewSpan) {
	flushTrLogsIfEnabled();
	trState = trState->cloneAndReset(createTrLogInfoProbabilistically(trState->cx), generateNewSpan);
	tr = CommitTransactionRequest(trState->spanContext);
	extraConflictRanges.clear();
	commitResult = Promise<Void>();
	committing = Future<Void>();
	cancelWatches();
}

TagSet const& Transaction::getTags() const {
	return trState->options.tags;
}

void Transaction::reset() {
	resetImpl(false);
}

void Transaction::fullReset() {
	resetImpl(true);
	span = Span(trState->spanContext, "Transaction"_loc);
	backoff = CLIENT_KNOBS->DEFAULT_BACKOFF;
}

int Transaction::apiVersionAtLeast(int minVersion) const {
	return trState->cx->apiVersionAtLeast(minVersion);
}

class MutationBlock {
public:
	bool mutated;
	bool cleared;
	ValueRef setValue;

	MutationBlock() : mutated(false) {}
	MutationBlock(bool _cleared) : mutated(true), cleared(_cleared) {}
	MutationBlock(ValueRef value) : mutated(true), cleared(false), setValue(value) {}
};

bool compareBegin(KeyRangeRef lhs, KeyRangeRef rhs) {
	return lhs.begin < rhs.begin;
}

// If there is any intersection between the two given sets of ranges, returns a range that
//   falls within the intersection
Optional<KeyRangeRef> intersects(VectorRef<KeyRangeRef> lhs, VectorRef<KeyRangeRef> rhs) {
	if (lhs.size() && rhs.size()) {
		std::sort(lhs.begin(), lhs.end(), compareBegin);
		std::sort(rhs.begin(), rhs.end(), compareBegin);

		int l = 0, r = 0;
		while (l < lhs.size() && r < rhs.size()) {
			if (lhs[l].end <= rhs[r].begin)
				l++;
			else if (rhs[r].end <= lhs[l].begin)
				r++;
			else
				return lhs[l] & rhs[r];
		}
	}

	return Optional<KeyRangeRef>();
}

															#line 27578 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via checkWrites()
															#line 6211 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class CheckWritesActor>
															#line 6211 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class CheckWritesActorState {
															#line 27585 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 6211 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	CheckWritesActorState(Reference<TransactionState> const& trState,Future<Void> const& committed,Promise<Void> const& outCommitted,CommitTransactionRequest const& req) 
															#line 6211 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 6211 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : trState(trState),
															#line 6211 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   committed(committed),
															#line 6211 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   outCommitted(outCommitted),
															#line 6211 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   req(req),
															#line 6215 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   version()
															#line 27600 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("checkWrites", reinterpret_cast<unsigned long>(this));

	}
	~CheckWritesActorState() 
	{
		fdb_probe_actor_destroy("checkWrites", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
			try {
															#line 6217 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				StrictFuture<Void> __when_expr_0 = committed;
															#line 6217 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch2(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
															#line 27618 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				static_cast<CheckWritesActor*>(this)->actor_wait_state = 1;
															#line 6217 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< CheckWritesActor, 0, Void >*>(static_cast<CheckWritesActor*>(this)));
															#line 27622 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				loopDepth = 0;
			}
			catch (Error& error) {
				loopDepth = a_body1Catch2(error, loopDepth);
			} catch (...) {
				loopDepth = a_body1Catch2(unknown_error(), loopDepth);
			}
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		delete static_cast<CheckWritesActor*>(this);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 6227 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_1 = delay(deterministicRandom()->random01());
															#line 6227 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
															#line 27652 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		static_cast<CheckWritesActor*>(this)->actor_wait_state = 2;
															#line 6227 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< CheckWritesActor, 1, Void >*>(static_cast<CheckWritesActor*>(this)));
															#line 27656 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1Catch2(const Error& e,int loopDepth=0) 
	{
		try {
															#line 6223 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			outCommitted.sendError(e);
															#line 6224 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			delete static_cast<CheckWritesActor*>(this);
															#line 27668 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			return 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont2(Void const& _,int loopDepth) 
	{
															#line 6220 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		version = trState->committedVersion;
															#line 6221 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		outCommitted.send(Void());
															#line 27685 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont4(loopDepth);

		return loopDepth;
	}
	int a_body1cont2(Void && _,int loopDepth) 
	{
															#line 6220 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		version = trState->committedVersion;
															#line 6221 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		outCommitted.send(Void());
															#line 27696 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont4(loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<CheckWritesActor*>(this)->actor_wait_state > 0) static_cast<CheckWritesActor*>(this)->actor_wait_state = 0;
		static_cast<CheckWritesActor*>(this)->ActorCallback< CheckWritesActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< CheckWritesActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("checkWrites", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("checkWrites", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< CheckWritesActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("checkWrites", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("checkWrites", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< CheckWritesActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("checkWrites", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch2(err, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("checkWrites", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont4(int loopDepth) 
	{
		try {
			loopDepth = a_body1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont5(Void const& _,int loopDepth) 
	{
															#line 6229 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		expectedValues = KeyRangeMap<MutationBlock>();
															#line 6231 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		auto& mutations = req.transaction.mutations;
															#line 6232 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		mCount = mutations.size();
															#line 6234 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for(int idx = 0;idx < mutations.size();idx++) {
															#line 6235 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (mutations[idx].type == MutationRef::SetValue)
															#line 27789 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 6236 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				expectedValues.insert(singleKeyRange(mutations[idx].param1), MutationBlock(mutations[idx].param2));
															#line 27793 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
			else
			{
															#line 6237 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (mutations[idx].type == MutationRef::ClearRange)
															#line 27799 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 6238 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					expectedValues.insert(KeyRangeRef(mutations[idx].param1, mutations[idx].param2), MutationBlock(true));
															#line 27803 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
			}
		}
		try {
															#line 6242 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tr = Transaction(trState->cx);
															#line 6243 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tr.setVersion(version);
															#line 6244 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			checkedRanges = 0;
															#line 6245 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ranges = expectedValues.ranges();
															#line 6246 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			it = ranges.begin();
															#line 6247 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			;
															#line 27820 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1cont5loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1cont5Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1cont5Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont5(Void && _,int loopDepth) 
	{
															#line 6229 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		expectedValues = KeyRangeMap<MutationBlock>();
															#line 6231 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		auto& mutations = req.transaction.mutations;
															#line 6232 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		mCount = mutations.size();
															#line 6234 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for(int idx = 0;idx < mutations.size();idx++) {
															#line 6235 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (mutations[idx].type == MutationRef::SetValue)
															#line 27843 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 6236 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				expectedValues.insert(singleKeyRange(mutations[idx].param1), MutationBlock(mutations[idx].param2));
															#line 27847 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
			else
			{
															#line 6237 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (mutations[idx].type == MutationRef::ClearRange)
															#line 27853 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 6238 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					expectedValues.insert(KeyRangeRef(mutations[idx].param1, mutations[idx].param2), MutationBlock(true));
															#line 27857 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
			}
		}
		try {
															#line 6242 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tr = Transaction(trState->cx);
															#line 6243 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tr.setVersion(version);
															#line 6244 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			checkedRanges = 0;
															#line 6245 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ranges = expectedValues.ranges();
															#line 6246 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			it = ranges.begin();
															#line 6247 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			;
															#line 27874 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1cont5loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1cont5Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1cont5Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont5(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont5(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<CheckWritesActor*>(this)->actor_wait_state > 0) static_cast<CheckWritesActor*>(this)->actor_wait_state = 0;
		static_cast<CheckWritesActor*>(this)->ActorCallback< CheckWritesActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< CheckWritesActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("checkWrites", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("checkWrites", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< CheckWritesActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("checkWrites", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("checkWrites", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< CheckWritesActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("checkWrites", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("checkWrites", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont6(int loopDepth) 
	{
		loopDepth = a_body1cont12(loopDepth);

		return loopDepth;
	}
	int a_body1cont5Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 6279 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			bool ok = e.code() == error_code_transaction_too_old || e.code() == error_code_future_version;
															#line 6280 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent(ok ? SevWarn : SevError, "CheckWritesFailed").error(e);
															#line 6281 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			return a_body1Catch1(e, loopDepth);
															#line 27963 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont11(int loopDepth) 
	{
															#line 6274 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		TraceEvent("CheckWritesSuccess") .detail("Version", version) .detail("MutationCount", mCount) .detail("CheckedRanges", checkedRanges);
															#line 27977 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont11cont2(loopDepth);

		return loopDepth;
	}
	int a_body1cont5loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1cont5loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1cont5loopBody1(int loopDepth) 
	{
															#line 6247 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!(it != ranges.end()))
															#line 27993 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
			return a_body1cont5break1(loopDepth==0?0:loopDepth-1); // break
		}
															#line 6248 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		m = it->value();
															#line 6249 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (m.mutated)
															#line 28001 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 6250 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			checkedRanges++;
															#line 6251 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (m.cleared)
															#line 28007 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 6252 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				StrictFuture<RangeResult> __when_expr_2 = tr.getRange(it->range(), 1);
															#line 6252 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1cont5Catch1(__when_expr_2.getError(), std::max(0, loopDepth - 1)); else return a_body1cont5loopBody1when1(__when_expr_2.get(), loopDepth); };
															#line 28013 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				static_cast<CheckWritesActor*>(this)->actor_wait_state = 3;
															#line 6252 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< CheckWritesActor, 2, RangeResult >*>(static_cast<CheckWritesActor*>(this)));
															#line 28017 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				loopDepth = 0;
			}
			else
			{
															#line 6261 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				StrictFuture<Optional<Value>> __when_expr_3 = tr.get(it->range().begin);
															#line 6261 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1cont5Catch1(__when_expr_3.getError(), std::max(0, loopDepth - 1)); else return a_body1cont5loopBody1when2(__when_expr_3.get(), loopDepth); };
															#line 28026 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				static_cast<CheckWritesActor*>(this)->actor_wait_state = 4;
															#line 6261 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< CheckWritesActor, 3, Optional<Value> >*>(static_cast<CheckWritesActor*>(this)));
															#line 28030 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				loopDepth = 0;
			}
		}
		else
		{
			loopDepth = a_body1cont5loopBody1cont1(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont5break1(int loopDepth) 
	{
		try {
			return a_body1cont11(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1cont5Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1cont5Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont5loopBody1cont1(int loopDepth) 
	{
															#line 6247 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		++it;
															#line 28058 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (loopDepth == 0) return a_body1cont5loopHead1(0);

		return loopDepth;
	}
	int a_body1cont5loopBody1cont3(int loopDepth) 
	{
		loopDepth = a_body1cont5loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont5loopBody1cont4(RangeResult const& shouldBeEmpty,int loopDepth) 
	{
															#line 6253 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (shouldBeEmpty.size())
															#line 28073 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 6254 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent(SevError, "CheckWritesFailed") .detail("Class", "Clear") .detail("KeyBegin", it->range().begin) .detail("KeyEnd", it->range().end);
															#line 6258 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			delete static_cast<CheckWritesActor*>(this);
															#line 28079 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			return 0;
		}
		loopDepth = a_body1cont5loopBody1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1cont5loopBody1cont4(RangeResult && shouldBeEmpty,int loopDepth) 
	{
															#line 6253 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (shouldBeEmpty.size())
															#line 28090 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 6254 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent(SevError, "CheckWritesFailed") .detail("Class", "Clear") .detail("KeyBegin", it->range().begin) .detail("KeyEnd", it->range().end);
															#line 6258 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			delete static_cast<CheckWritesActor*>(this);
															#line 28096 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			return 0;
		}
		loopDepth = a_body1cont5loopBody1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1cont5loopBody1when1(RangeResult const& shouldBeEmpty,int loopDepth) 
	{
		loopDepth = a_body1cont5loopBody1cont4(shouldBeEmpty, loopDepth);

		return loopDepth;
	}
	int a_body1cont5loopBody1when1(RangeResult && shouldBeEmpty,int loopDepth) 
	{
		loopDepth = a_body1cont5loopBody1cont4(std::move(shouldBeEmpty), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<CheckWritesActor*>(this)->actor_wait_state > 0) static_cast<CheckWritesActor*>(this)->actor_wait_state = 0;
		static_cast<CheckWritesActor*>(this)->ActorCallback< CheckWritesActor, 2, RangeResult >::remove();

	}
	void a_callback_fire(ActorCallback< CheckWritesActor, 2, RangeResult >*,RangeResult const& value) 
	{
		fdb_probe_actor_enter("checkWrites", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont5loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont5Catch1(error, 0);
		} catch (...) {
			a_body1cont5Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("checkWrites", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< CheckWritesActor, 2, RangeResult >*,RangeResult && value) 
	{
		fdb_probe_actor_enter("checkWrites", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont5loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont5Catch1(error, 0);
		} catch (...) {
			a_body1cont5Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("checkWrites", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< CheckWritesActor, 2, RangeResult >*,Error err) 
	{
		fdb_probe_actor_enter("checkWrites", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont5Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont5Catch1(error, 0);
		} catch (...) {
			a_body1cont5Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("checkWrites", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1cont5loopBody1cont7(Optional<Value> const& val,int loopDepth) 
	{
															#line 6262 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!val.present() || val.get() != m.setValue)
															#line 28170 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 6263 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent evt(SevError, "CheckWritesFailed");
															#line 6264 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			evt.detail("Class", "Set").detail("Key", it->range().begin).detail("Expected", m.setValue);
															#line 6265 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!val.present())
															#line 28178 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 6266 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				evt.detail("Actual", "_Value Missing_");
															#line 28182 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
			else
			{
															#line 6268 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				evt.detail("Actual", val.get());
															#line 28188 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 6269 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			delete static_cast<CheckWritesActor*>(this);
															#line 28192 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			return 0;
		}
		loopDepth = a_body1cont5loopBody1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1cont5loopBody1cont7(Optional<Value> && val,int loopDepth) 
	{
															#line 6262 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!val.present() || val.get() != m.setValue)
															#line 28203 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 6263 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent evt(SevError, "CheckWritesFailed");
															#line 6264 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			evt.detail("Class", "Set").detail("Key", it->range().begin).detail("Expected", m.setValue);
															#line 6265 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!val.present())
															#line 28211 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 6266 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				evt.detail("Actual", "_Value Missing_");
															#line 28215 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
			else
			{
															#line 6268 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				evt.detail("Actual", val.get());
															#line 28221 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 6269 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			delete static_cast<CheckWritesActor*>(this);
															#line 28225 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			return 0;
		}
		loopDepth = a_body1cont5loopBody1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1cont5loopBody1when2(Optional<Value> const& val,int loopDepth) 
	{
		loopDepth = a_body1cont5loopBody1cont7(val, loopDepth);

		return loopDepth;
	}
	int a_body1cont5loopBody1when2(Optional<Value> && val,int loopDepth) 
	{
		loopDepth = a_body1cont5loopBody1cont7(std::move(val), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<CheckWritesActor*>(this)->actor_wait_state > 0) static_cast<CheckWritesActor*>(this)->actor_wait_state = 0;
		static_cast<CheckWritesActor*>(this)->ActorCallback< CheckWritesActor, 3, Optional<Value> >::remove();

	}
	void a_callback_fire(ActorCallback< CheckWritesActor, 3, Optional<Value> >*,Optional<Value> const& value) 
	{
		fdb_probe_actor_enter("checkWrites", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont5loopBody1when2(value, 0);
		}
		catch (Error& error) {
			a_body1cont5Catch1(error, 0);
		} catch (...) {
			a_body1cont5Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("checkWrites", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< CheckWritesActor, 3, Optional<Value> >*,Optional<Value> && value) 
	{
		fdb_probe_actor_enter("checkWrites", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont5loopBody1when2(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont5Catch1(error, 0);
		} catch (...) {
			a_body1cont5Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("checkWrites", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< CheckWritesActor, 3, Optional<Value> >*,Error err) 
	{
		fdb_probe_actor_enter("checkWrites", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont5Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont5Catch1(error, 0);
		} catch (...) {
			a_body1cont5Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("checkWrites", reinterpret_cast<unsigned long>(this), 3);

	}
	int a_body1cont11cont2(int loopDepth) 
	{
		try {
			loopDepth = a_body1cont6(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont12(int loopDepth) 
	{
															#line 6211 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		delete static_cast<CheckWritesActor*>(this);
															#line 28312 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		return 0;

		return loopDepth;
	}
															#line 6211 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<TransactionState> trState;
															#line 6211 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Future<Void> committed;
															#line 6211 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Promise<Void> outCommitted;
															#line 6211 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	CommitTransactionRequest req;
															#line 6215 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Version version;
															#line 6229 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeyRangeMap<MutationBlock> expectedValues;
															#line 6232 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	int mCount;
															#line 6242 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Transaction tr;
															#line 6244 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	int checkedRanges;
															#line 6245 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeyRangeMap<MutationBlock>::Ranges ranges;
															#line 6246 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeyRangeMap<MutationBlock>::iterator it;
															#line 6248 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	MutationBlock m;
															#line 28341 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via checkWrites()
															#line 6211 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class CheckWritesActor final : public Actor<void>, public ActorCallback< CheckWritesActor, 0, Void >, public ActorCallback< CheckWritesActor, 1, Void >, public ActorCallback< CheckWritesActor, 2, RangeResult >, public ActorCallback< CheckWritesActor, 3, Optional<Value> >, public FastAllocated<CheckWritesActor>, public CheckWritesActorState<CheckWritesActor> {
															#line 28346 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<CheckWritesActor>::operator new;
	using FastAllocated<CheckWritesActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() {{ ((Actor<void>*)this)->~Actor(); operator delete(this); }}
#pragma clang diagnostic pop
friend struct ActorCallback< CheckWritesActor, 0, Void >;
friend struct ActorCallback< CheckWritesActor, 1, Void >;
friend struct ActorCallback< CheckWritesActor, 2, RangeResult >;
friend struct ActorCallback< CheckWritesActor, 3, Optional<Value> >;
															#line 6211 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	CheckWritesActor(Reference<TransactionState> const& trState,Future<Void> const& committed,Promise<Void> const& outCommitted,CommitTransactionRequest const& req) 
															#line 28360 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<void>(),
		   CheckWritesActorState<CheckWritesActor>(trState, committed, outCommitted, req)
	{
		fdb_probe_actor_enter("checkWrites", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("checkWrites");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("checkWrites", reinterpret_cast<unsigned long>(this), -1);

	}
};
}
															#line 6211 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
void checkWrites( Reference<TransactionState> const& trState, Future<Void> const& committed, Promise<Void> const& outCommitted, CommitTransactionRequest const& req ) {
															#line 6211 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	new CheckWritesActor(trState, committed, outCommitted, req);
															#line 28379 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 6284 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

FDB_BOOLEAN_PARAM(TenantPrefixPrepended);

															#line 28386 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via commitDummyTransaction()
															#line 6287 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class CommitDummyTransactionActor>
															#line 6287 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class CommitDummyTransactionActorState {
															#line 28393 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 6287 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	CommitDummyTransactionActorState(Reference<TransactionState> const& trState,KeyRange const& range,TenantPrefixPrepended const& tenantPrefixPrepended) 
															#line 6287 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 6287 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : trState(trState),
															#line 6287 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   range(range),
															#line 6287 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   tenantPrefixPrepended(tenantPrefixPrepended),
															#line 6290 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   tr(trState->cx, trState->tenant()),
															#line 6291 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   retries(0),
															#line 6292 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   span("NAPI:dummyTransaction"_loc, trState->spanContext)
															#line 28410 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("commitDummyTransaction", reinterpret_cast<unsigned long>(this));

	}
	~CommitDummyTransactionActorState() 
	{
		fdb_probe_actor_destroy("commitDummyTransaction", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 6293 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tr.span.setParent(span.context);
															#line 6294 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			;
															#line 28427 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~CommitDummyTransactionActorState();
		static_cast<CommitDummyTransactionActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
		try {
															#line 6296 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent("CommitDummyTransaction").detail("Key", range.begin).detail("Retries", retries);
															#line 6297 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tr.trState->options = trState->options;
															#line 6298 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tr.trState->taskID = trState->taskID;
															#line 6299 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tr.trState->authToken = trState->authToken;
															#line 6300 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!trState->hasTenant())
															#line 28466 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 6301 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				tr.setOption(FDBTransactionOptions::RAW_ACCESS);
															#line 28470 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
			else
			{
															#line 6303 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				tr.trState->skipApplyTenantPrefix = tenantPrefixPrepended;
															#line 6304 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				CODE_PROBE(true, "Commit of a dummy transaction in tenant keyspace");
															#line 28478 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 6306 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tr.setOption(FDBTransactionOptions::CAUSAL_WRITE_RISKY);
															#line 6307 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tr.setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 6308 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tr.addReadConflictRange(range);
															#line 6309 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tr.addWriteConflictRange(range);
															#line 6310 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_0 = tr.commit();
															#line 6310 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<CommitDummyTransactionActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 28492 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1loopBody1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
			static_cast<CommitDummyTransactionActor*>(this)->actor_wait_state = 1;
															#line 6310 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< CommitDummyTransactionActor, 0, Void >*>(static_cast<CommitDummyTransactionActor*>(this)));
															#line 28497 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
															#line 6323 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		++retries;
															#line 28512 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 6314 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (e.code() == error_code_tenant_not_found)
															#line 28522 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 6315 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (!static_cast<CommitDummyTransactionActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~CommitDummyTransactionActorState(); static_cast<CommitDummyTransactionActor*>(this)->destroy(); return 0; }
															#line 28526 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				new (&static_cast<CommitDummyTransactionActor*>(this)->SAV< Void >::value()) Void(Void());
				this->~CommitDummyTransactionActorState();
				static_cast<CommitDummyTransactionActor*>(this)->finishSendAndDelPromiseRef();
				return 0;
			}
															#line 6317 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent("CommitDummyTransactionError") .errorUnsuppressed(e) .detail("Key", range.begin) .detail("Retries", retries);
															#line 6321 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_1 = tr.onError(e);
															#line 6321 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<CommitDummyTransactionActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 28538 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1Catch1when1(__when_expr_1.get(), loopDepth); };
			static_cast<CommitDummyTransactionActor*>(this)->actor_wait_state = 2;
															#line 6321 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< CommitDummyTransactionActor, 1, Void >*>(static_cast<CommitDummyTransactionActor*>(this)));
															#line 28543 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(Void const& _,int loopDepth) 
	{
															#line 6311 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<CommitDummyTransactionActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~CommitDummyTransactionActorState(); static_cast<CommitDummyTransactionActor*>(this)->destroy(); return 0; }
															#line 28558 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<CommitDummyTransactionActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~CommitDummyTransactionActorState();
		static_cast<CommitDummyTransactionActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2(Void && _,int loopDepth) 
	{
															#line 6311 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<CommitDummyTransactionActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~CommitDummyTransactionActorState(); static_cast<CommitDummyTransactionActor*>(this)->destroy(); return 0; }
															#line 28570 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<CommitDummyTransactionActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~CommitDummyTransactionActorState();
		static_cast<CommitDummyTransactionActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<CommitDummyTransactionActor*>(this)->actor_wait_state > 0) static_cast<CommitDummyTransactionActor*>(this)->actor_wait_state = 0;
		static_cast<CommitDummyTransactionActor*>(this)->ActorCallback< CommitDummyTransactionActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< CommitDummyTransactionActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("commitDummyTransaction", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("commitDummyTransaction", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< CommitDummyTransactionActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("commitDummyTransaction", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("commitDummyTransaction", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< CommitDummyTransactionActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("commitDummyTransaction", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("commitDummyTransaction", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<CommitDummyTransactionActor*>(this)->actor_wait_state > 0) static_cast<CommitDummyTransactionActor*>(this)->actor_wait_state = 0;
		static_cast<CommitDummyTransactionActor*>(this)->ActorCallback< CommitDummyTransactionActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< CommitDummyTransactionActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("commitDummyTransaction", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("commitDummyTransaction", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< CommitDummyTransactionActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("commitDummyTransaction", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("commitDummyTransaction", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< CommitDummyTransactionActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("commitDummyTransaction", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("commitDummyTransaction", reinterpret_cast<unsigned long>(this), 1);

	}
															#line 6287 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<TransactionState> trState;
															#line 6287 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeyRange range;
															#line 6287 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	TenantPrefixPrepended tenantPrefixPrepended;
															#line 6290 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Transaction tr;
															#line 6291 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	int retries;
															#line 6292 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Span span;
															#line 28728 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via commitDummyTransaction()
															#line 6287 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class CommitDummyTransactionActor final : public Actor<Void>, public ActorCallback< CommitDummyTransactionActor, 0, Void >, public ActorCallback< CommitDummyTransactionActor, 1, Void >, public FastAllocated<CommitDummyTransactionActor>, public CommitDummyTransactionActorState<CommitDummyTransactionActor> {
															#line 28733 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<CommitDummyTransactionActor>::operator new;
	using FastAllocated<CommitDummyTransactionActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< CommitDummyTransactionActor, 0, Void >;
friend struct ActorCallback< CommitDummyTransactionActor, 1, Void >;
															#line 6287 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	CommitDummyTransactionActor(Reference<TransactionState> const& trState,KeyRange const& range,TenantPrefixPrepended const& tenantPrefixPrepended) 
															#line 28745 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Void>(),
		   CommitDummyTransactionActorState<CommitDummyTransactionActor>(trState, range, tenantPrefixPrepended)
	{
		fdb_probe_actor_enter("commitDummyTransaction", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("commitDummyTransaction");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("commitDummyTransaction", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< CommitDummyTransactionActor, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< CommitDummyTransactionActor, 1, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 6287 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] static Future<Void> commitDummyTransaction( Reference<TransactionState> const& trState, KeyRange const& range, TenantPrefixPrepended const& tenantPrefixPrepended ) {
															#line 6287 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Void>(new CommitDummyTransactionActor(trState, range, tenantPrefixPrepended));
															#line 28774 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 6326 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

															#line 28779 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via determineCommitStatus()
															#line 6327 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class DetermineCommitStatusActor>
															#line 6327 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class DetermineCommitStatusActorState {
															#line 28786 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 6327 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	DetermineCommitStatusActorState(Reference<TransactionState> const& trState,Version const& minPossibleCommitVersion,Version const& maxPossibleCommitVersion,IdempotencyIdRef const& idempotencyId) 
															#line 6327 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 6327 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : trState(trState),
															#line 6327 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   minPossibleCommitVersion(minPossibleCommitVersion),
															#line 6327 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   maxPossibleCommitVersion(maxPossibleCommitVersion),
															#line 6327 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   idempotencyId(idempotencyId),
															#line 6331 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   tr(trState->cx),
															#line 6332 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   retries(0),
															#line 6333 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   expiredVersion(),
															#line 6334 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   span("NAPI:determineCommitStatus"_loc, trState->spanContext)
															#line 28807 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("determineCommitStatus", reinterpret_cast<unsigned long>(this));

	}
	~DetermineCommitStatusActorState() 
	{
		fdb_probe_actor_destroy("determineCommitStatus", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 6335 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tr.span.setParent(span.context);
															#line 6336 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			;
															#line 28824 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~DetermineCommitStatusActorState();
		static_cast<DetermineCommitStatusActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
		try {
															#line 6338 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tr.trState->options = trState->options;
															#line 6339 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tr.trState->taskID = trState->taskID;
															#line 6340 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tr.trState->authToken = trState->authToken;
															#line 6341 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tr.setOption(FDBTransactionOptions::READ_SYSTEM_KEYS);
															#line 6342 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tr.setOption(FDBTransactionOptions::READ_LOCK_AWARE);
															#line 6343 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			KeyBackedObjectProperty<IdempotencyIdsExpiredVersion, _Unversioned> expiredKey(idempotencyIdsExpiredVersion, Unversioned());
															#line 6345 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<IdempotencyIdsExpiredVersion> __when_expr_0 = expiredKey.getD(&tr);
															#line 6345 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<DetermineCommitStatusActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 28869 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1loopBody1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
			static_cast<DetermineCommitStatusActor*>(this)->actor_wait_state = 1;
															#line 6345 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< DetermineCommitStatusActor, 0, IdempotencyIdsExpiredVersion >*>(static_cast<DetermineCommitStatusActor*>(this)));
															#line 28874 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
															#line 6387 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		++retries;
															#line 28889 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 6381 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent("DetermineCommitStatusError") .errorUnsuppressed(e) .detail("IdempotencyId", idempotencyId.asStringRefUnsafe()) .detail("Retries", retries);
															#line 6385 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_3 = tr.onError(e);
															#line 6385 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<DetermineCommitStatusActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 28903 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch1(__when_expr_3.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1Catch1when1(__when_expr_3.get(), loopDepth); };
			static_cast<DetermineCommitStatusActor*>(this)->actor_wait_state = 4;
															#line 6385 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< DetermineCommitStatusActor, 3, Void >*>(static_cast<DetermineCommitStatusActor*>(this)));
															#line 28908 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(IdempotencyIdsExpiredVersion const& expiredVal,int loopDepth) 
	{
															#line 6346 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		expiredVersion = expiredVal.expired;
															#line 6347 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (expiredVersion >= minPossibleCommitVersion)
															#line 28925 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 6348 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			return a_body1loopBody1Catch1(commit_unknown_result_fatal(), loopDepth);
															#line 28929 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 6350 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Version> __when_expr_1 = tr.getReadVersion();
															#line 6350 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<DetermineCommitStatusActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 28935 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
		static_cast<DetermineCommitStatusActor*>(this)->actor_wait_state = 2;
															#line 6350 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< DetermineCommitStatusActor, 1, Version >*>(static_cast<DetermineCommitStatusActor*>(this)));
															#line 28940 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2(IdempotencyIdsExpiredVersion && expiredVal,int loopDepth) 
	{
															#line 6346 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		expiredVersion = expiredVal.expired;
															#line 6347 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (expiredVersion >= minPossibleCommitVersion)
															#line 28951 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 6348 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			return a_body1loopBody1Catch1(commit_unknown_result_fatal(), loopDepth);
															#line 28955 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 6350 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Version> __when_expr_1 = tr.getReadVersion();
															#line 6350 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<DetermineCommitStatusActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 28961 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
		static_cast<DetermineCommitStatusActor*>(this)->actor_wait_state = 2;
															#line 6350 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< DetermineCommitStatusActor, 1, Version >*>(static_cast<DetermineCommitStatusActor*>(this)));
															#line 28966 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1when1(IdempotencyIdsExpiredVersion const& expiredVal,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(expiredVal, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(IdempotencyIdsExpiredVersion && expiredVal,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(std::move(expiredVal), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<DetermineCommitStatusActor*>(this)->actor_wait_state > 0) static_cast<DetermineCommitStatusActor*>(this)->actor_wait_state = 0;
		static_cast<DetermineCommitStatusActor*>(this)->ActorCallback< DetermineCommitStatusActor, 0, IdempotencyIdsExpiredVersion >::remove();

	}
	void a_callback_fire(ActorCallback< DetermineCommitStatusActor, 0, IdempotencyIdsExpiredVersion >*,IdempotencyIdsExpiredVersion const& value) 
	{
		fdb_probe_actor_enter("determineCommitStatus", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("determineCommitStatus", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< DetermineCommitStatusActor, 0, IdempotencyIdsExpiredVersion >*,IdempotencyIdsExpiredVersion && value) 
	{
		fdb_probe_actor_enter("determineCommitStatus", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("determineCommitStatus", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< DetermineCommitStatusActor, 0, IdempotencyIdsExpiredVersion >*,Error err) 
	{
		fdb_probe_actor_enter("determineCommitStatus", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("determineCommitStatus", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1cont3(Version const& rv,int loopDepth) 
	{
															#line 6351 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		TraceEvent("DetermineCommitStatusAttempt") .detail("IdempotencyId", idempotencyId.asStringRefUnsafe()) .detail("Retries", retries) .detail("ReadVersion", rv) .detail("ExpiredVersion", expiredVersion) .detail("MinPossibleCommitVersion", minPossibleCommitVersion) .detail("MaxPossibleCommitVersion", maxPossibleCommitVersion);
															#line 6358 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		KeyRange possibleRange = KeyRangeRef(BinaryWriter::toValue(bigEndian64(minPossibleCommitVersion), Unversioned()) .withPrefix(idempotencyIdKeys.begin), BinaryWriter::toValue(bigEndian64(maxPossibleCommitVersion + 1), Unversioned()) .withPrefix(idempotencyIdKeys.begin));
															#line 6363 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<RangeResult> __when_expr_2 = tr.getRange(possibleRange, CLIENT_KNOBS->TOO_MANY);
															#line 6363 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<DetermineCommitStatusActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 29044 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1loopBody1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1loopBody1cont3when1(__when_expr_2.get(), loopDepth); };
		static_cast<DetermineCommitStatusActor*>(this)->actor_wait_state = 3;
															#line 6363 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< DetermineCommitStatusActor, 2, RangeResult >*>(static_cast<DetermineCommitStatusActor*>(this)));
															#line 29049 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont3(Version && rv,int loopDepth) 
	{
															#line 6351 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		TraceEvent("DetermineCommitStatusAttempt") .detail("IdempotencyId", idempotencyId.asStringRefUnsafe()) .detail("Retries", retries) .detail("ReadVersion", rv) .detail("ExpiredVersion", expiredVersion) .detail("MinPossibleCommitVersion", minPossibleCommitVersion) .detail("MaxPossibleCommitVersion", maxPossibleCommitVersion);
															#line 6358 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		KeyRange possibleRange = KeyRangeRef(BinaryWriter::toValue(bigEndian64(minPossibleCommitVersion), Unversioned()) .withPrefix(idempotencyIdKeys.begin), BinaryWriter::toValue(bigEndian64(maxPossibleCommitVersion + 1), Unversioned()) .withPrefix(idempotencyIdKeys.begin));
															#line 6363 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<RangeResult> __when_expr_2 = tr.getRange(possibleRange, CLIENT_KNOBS->TOO_MANY);
															#line 6363 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<DetermineCommitStatusActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 29064 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1loopBody1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1loopBody1cont3when1(__when_expr_2.get(), loopDepth); };
		static_cast<DetermineCommitStatusActor*>(this)->actor_wait_state = 3;
															#line 6363 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< DetermineCommitStatusActor, 2, RangeResult >*>(static_cast<DetermineCommitStatusActor*>(this)));
															#line 29069 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(Version const& rv,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3(rv, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(Version && rv,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3(std::move(rv), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<DetermineCommitStatusActor*>(this)->actor_wait_state > 0) static_cast<DetermineCommitStatusActor*>(this)->actor_wait_state = 0;
		static_cast<DetermineCommitStatusActor*>(this)->ActorCallback< DetermineCommitStatusActor, 1, Version >::remove();

	}
	void a_callback_fire(ActorCallback< DetermineCommitStatusActor, 1, Version >*,Version const& value) 
	{
		fdb_probe_actor_enter("determineCommitStatus", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("determineCommitStatus", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< DetermineCommitStatusActor, 1, Version >*,Version && value) 
	{
		fdb_probe_actor_enter("determineCommitStatus", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("determineCommitStatus", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< DetermineCommitStatusActor, 1, Version >*,Error err) 
	{
		fdb_probe_actor_enter("determineCommitStatus", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("determineCommitStatus", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1loopBody1cont5(RangeResult const& range,int loopDepth) 
	{
															#line 6364 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(!range.more);
															#line 6365 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for( const auto& kv : range ) {
															#line 6366 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			auto commitResult = kvContainsIdempotencyId(kv, idempotencyId);
															#line 6367 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (commitResult.present())
															#line 29147 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 6368 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				TraceEvent("DetermineCommitStatus") .detail("Committed", 1) .detail("IdempotencyId", idempotencyId.asStringRefUnsafe()) .detail("Retries", retries);
															#line 6372 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (!static_cast<DetermineCommitStatusActor*>(this)->SAV<Optional<CommitResult>>::futures) { (void)(commitResult); this->~DetermineCommitStatusActorState(); static_cast<DetermineCommitStatusActor*>(this)->destroy(); return 0; }
															#line 29153 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				new (&static_cast<DetermineCommitStatusActor*>(this)->SAV< Optional<CommitResult> >::value()) Optional<CommitResult>(commitResult);
				this->~DetermineCommitStatusActorState();
				static_cast<DetermineCommitStatusActor*>(this)->finishSendAndDelPromiseRef();
				return 0;
			}
		}
															#line 6375 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		TraceEvent("DetermineCommitStatus") .detail("Committed", 0) .detail("IdempotencyId", idempotencyId.asStringRefUnsafe()) .detail("Retries", retries);
															#line 6379 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<DetermineCommitStatusActor*>(this)->SAV<Optional<CommitResult>>::futures) { (void)(Optional<CommitResult>()); this->~DetermineCommitStatusActorState(); static_cast<DetermineCommitStatusActor*>(this)->destroy(); return 0; }
															#line 29164 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<DetermineCommitStatusActor*>(this)->SAV< Optional<CommitResult> >::value()) Optional<CommitResult>(Optional<CommitResult>());
		this->~DetermineCommitStatusActorState();
		static_cast<DetermineCommitStatusActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1cont5(RangeResult && range,int loopDepth) 
	{
															#line 6364 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(!range.more);
															#line 6365 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for( const auto& kv : range ) {
															#line 6366 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			auto commitResult = kvContainsIdempotencyId(kv, idempotencyId);
															#line 6367 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (commitResult.present())
															#line 29182 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 6368 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				TraceEvent("DetermineCommitStatus") .detail("Committed", 1) .detail("IdempotencyId", idempotencyId.asStringRefUnsafe()) .detail("Retries", retries);
															#line 6372 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (!static_cast<DetermineCommitStatusActor*>(this)->SAV<Optional<CommitResult>>::futures) { (void)(commitResult); this->~DetermineCommitStatusActorState(); static_cast<DetermineCommitStatusActor*>(this)->destroy(); return 0; }
															#line 29188 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				new (&static_cast<DetermineCommitStatusActor*>(this)->SAV< Optional<CommitResult> >::value()) Optional<CommitResult>(commitResult);
				this->~DetermineCommitStatusActorState();
				static_cast<DetermineCommitStatusActor*>(this)->finishSendAndDelPromiseRef();
				return 0;
			}
		}
															#line 6375 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		TraceEvent("DetermineCommitStatus") .detail("Committed", 0) .detail("IdempotencyId", idempotencyId.asStringRefUnsafe()) .detail("Retries", retries);
															#line 6379 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<DetermineCommitStatusActor*>(this)->SAV<Optional<CommitResult>>::futures) { (void)(Optional<CommitResult>()); this->~DetermineCommitStatusActorState(); static_cast<DetermineCommitStatusActor*>(this)->destroy(); return 0; }
															#line 29199 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<DetermineCommitStatusActor*>(this)->SAV< Optional<CommitResult> >::value()) Optional<CommitResult>(Optional<CommitResult>());
		this->~DetermineCommitStatusActorState();
		static_cast<DetermineCommitStatusActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1cont3when1(RangeResult const& range,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont5(range, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont3when1(RangeResult && range,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont5(std::move(range), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<DetermineCommitStatusActor*>(this)->actor_wait_state > 0) static_cast<DetermineCommitStatusActor*>(this)->actor_wait_state = 0;
		static_cast<DetermineCommitStatusActor*>(this)->ActorCallback< DetermineCommitStatusActor, 2, RangeResult >::remove();

	}
	void a_callback_fire(ActorCallback< DetermineCommitStatusActor, 2, RangeResult >*,RangeResult const& value) 
	{
		fdb_probe_actor_enter("determineCommitStatus", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont3when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("determineCommitStatus", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< DetermineCommitStatusActor, 2, RangeResult >*,RangeResult && value) 
	{
		fdb_probe_actor_enter("determineCommitStatus", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont3when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("determineCommitStatus", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< DetermineCommitStatusActor, 2, RangeResult >*,Error err) 
	{
		fdb_probe_actor_enter("determineCommitStatus", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("determineCommitStatus", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<DetermineCommitStatusActor*>(this)->actor_wait_state > 0) static_cast<DetermineCommitStatusActor*>(this)->actor_wait_state = 0;
		static_cast<DetermineCommitStatusActor*>(this)->ActorCallback< DetermineCommitStatusActor, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< DetermineCommitStatusActor, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("determineCommitStatus", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("determineCommitStatus", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< DetermineCommitStatusActor, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("determineCommitStatus", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("determineCommitStatus", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< DetermineCommitStatusActor, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("determineCommitStatus", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("determineCommitStatus", reinterpret_cast<unsigned long>(this), 3);

	}
															#line 6327 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<TransactionState> trState;
															#line 6327 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Version minPossibleCommitVersion;
															#line 6327 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Version maxPossibleCommitVersion;
															#line 6327 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	IdempotencyIdRef idempotencyId;
															#line 6331 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Transaction tr;
															#line 6332 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	int retries;
															#line 6333 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Version expiredVersion;
															#line 6334 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Span span;
															#line 29361 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via determineCommitStatus()
															#line 6327 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class DetermineCommitStatusActor final : public Actor<Optional<CommitResult>>, public ActorCallback< DetermineCommitStatusActor, 0, IdempotencyIdsExpiredVersion >, public ActorCallback< DetermineCommitStatusActor, 1, Version >, public ActorCallback< DetermineCommitStatusActor, 2, RangeResult >, public ActorCallback< DetermineCommitStatusActor, 3, Void >, public FastAllocated<DetermineCommitStatusActor>, public DetermineCommitStatusActorState<DetermineCommitStatusActor> {
															#line 29366 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<DetermineCommitStatusActor>::operator new;
	using FastAllocated<DetermineCommitStatusActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Optional<CommitResult>>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< DetermineCommitStatusActor, 0, IdempotencyIdsExpiredVersion >;
friend struct ActorCallback< DetermineCommitStatusActor, 1, Version >;
friend struct ActorCallback< DetermineCommitStatusActor, 2, RangeResult >;
friend struct ActorCallback< DetermineCommitStatusActor, 3, Void >;
															#line 6327 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	DetermineCommitStatusActor(Reference<TransactionState> const& trState,Version const& minPossibleCommitVersion,Version const& maxPossibleCommitVersion,IdempotencyIdRef const& idempotencyId) 
															#line 29380 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Optional<CommitResult>>(),
		   DetermineCommitStatusActorState<DetermineCommitStatusActor>(trState, minPossibleCommitVersion, maxPossibleCommitVersion, idempotencyId)
	{
		fdb_probe_actor_enter("determineCommitStatus", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("determineCommitStatus");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("determineCommitStatus", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< DetermineCommitStatusActor, 0, IdempotencyIdsExpiredVersion >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< DetermineCommitStatusActor, 1, Version >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< DetermineCommitStatusActor, 2, RangeResult >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< DetermineCommitStatusActor, 3, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 6327 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] static Future<Optional<CommitResult>> determineCommitStatus( Reference<TransactionState> const& trState, Version const& minPossibleCommitVersion, Version const& maxPossibleCommitVersion, IdempotencyIdRef const& idempotencyId ) {
															#line 6327 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Optional<CommitResult>>(new DetermineCommitStatusActor(trState, minPossibleCommitVersion, maxPossibleCommitVersion, idempotencyId));
															#line 29411 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 6390 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

void Transaction::cancelWatches(Error const& e) {
	for (int i = 0; i < watches.size(); ++i)
		if (!watches[i]->onChangeTrigger.isSet())
			watches[i]->onChangeTrigger.sendError(e);

	watches.clear();
}

void Transaction::setupWatches() {
	try {
		Future<Version> watchVersion = getCommittedVersion() > 0 ? getCommittedVersion() : getReadVersion();

		for (int i = 0; i < watches.size(); ++i)
			watches[i]->setWatch(
			    watchValueMap(watchVersion,
			                  trState->getTenantInfo(),
			                  watches[i]->key,
			                  watches[i]->value,
			                  trState->cx,
			                  trState->options.readTags,
			                  trState->spanContext,
			                  trState->taskID,
			                  trState->readOptions.present() ? trState->readOptions.get().debugID : Optional<UID>(),
			                  trState->useProvisionalProxies));

		watches.clear();
	} catch (Error&) {
		ASSERT(false); // The above code must NOT throw because commit has already occured.
		throw internal_error();
	}
}

															#line 29448 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via estimateCommitCosts()
															#line 6423 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class EstimateCommitCostsActor>
															#line 6423 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class EstimateCommitCostsActorState {
															#line 29455 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 6423 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	EstimateCommitCostsActorState(Reference<TransactionState> const& trState,CommitTransactionRef const* const& transaction) 
															#line 6423 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 6423 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : trState(trState),
															#line 6423 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   transaction(transaction),
															#line 6425 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   trCommitCosts(),
															#line 6426 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   keyRange(),
															#line 6427 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   i(0)
															#line 29470 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("estimateCommitCosts", reinterpret_cast<unsigned long>(this));

	}
	~EstimateCommitCostsActorState() 
	{
		fdb_probe_actor_destroy("estimateCommitCosts", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 6429 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			;
															#line 29485 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~EstimateCommitCostsActorState();
		static_cast<EstimateCommitCostsActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 6474 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!trState->cx->sampleOnCost(trCommitCosts.writeCosts))
															#line 29508 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 6475 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<EstimateCommitCostsActor*>(this)->SAV<Optional<ClientTrCommitCostEstimation>>::futures) { (void)(Optional<ClientTrCommitCostEstimation>()); this->~EstimateCommitCostsActorState(); static_cast<EstimateCommitCostsActor*>(this)->destroy(); return 0; }
															#line 29512 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<EstimateCommitCostsActor*>(this)->SAV< Optional<ClientTrCommitCostEstimation> >::value()) Optional<ClientTrCommitCostEstimation>(Optional<ClientTrCommitCostEstimation>());
			this->~EstimateCommitCostsActorState();
			static_cast<EstimateCommitCostsActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 6483 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(trCommitCosts.writeCosts > 0);
															#line 6484 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		std::deque<std::pair<int, uint64_t>> newClearIdxCosts;
															#line 6485 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for( const auto& [idx, cost] : trCommitCosts.clearIdxCosts ) {
															#line 6486 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (trCommitCosts.writeCosts >= CLIENT_KNOBS->COMMIT_SAMPLE_COST)
															#line 29526 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 6487 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				double mul = trCommitCosts.writeCosts / std::max(1.0, (double)CLIENT_KNOBS->COMMIT_SAMPLE_COST);
															#line 6488 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (deterministicRandom()->random01() < cost * mul / trCommitCosts.writeCosts)
															#line 29532 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 6489 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					newClearIdxCosts.emplace_back( idx, cost < CLIENT_KNOBS->COMMIT_SAMPLE_COST ? CLIENT_KNOBS->COMMIT_SAMPLE_COST : cost);
															#line 29536 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
			}
			else
			{
															#line 6492 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (deterministicRandom()->random01() < (double)cost / trCommitCosts.writeCosts)
															#line 29543 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 6493 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					newClearIdxCosts.emplace_back( idx, cost < CLIENT_KNOBS->COMMIT_SAMPLE_COST ? CLIENT_KNOBS->COMMIT_SAMPLE_COST : cost);
															#line 29547 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
			}
		}
															#line 6498 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		trCommitCosts.clearIdxCosts.swap(newClearIdxCosts);
															#line 6499 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<EstimateCommitCostsActor*>(this)->SAV<Optional<ClientTrCommitCostEstimation>>::futures) { (void)(trCommitCosts); this->~EstimateCommitCostsActorState(); static_cast<EstimateCommitCostsActor*>(this)->destroy(); return 0; }
															#line 29555 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<EstimateCommitCostsActor*>(this)->SAV< Optional<ClientTrCommitCostEstimation> >::value()) Optional<ClientTrCommitCostEstimation>(std::move(trCommitCosts)); // state_var_RVO
		this->~EstimateCommitCostsActorState();
		static_cast<EstimateCommitCostsActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
															#line 6429 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!(i < transaction->mutations.size()))
															#line 29574 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
			return a_body1break1(loopDepth==0?0:loopDepth-1); // break
		}
															#line 6430 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		auto const& mutation = transaction->mutations[i];
															#line 6432 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (mutation.type == MutationRef::Type::SetValue || mutation.isAtomicOp())
															#line 29582 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 6433 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			trCommitCosts.opsCount++;
															#line 6434 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			trCommitCosts.writeCosts += getWriteOperationCost(mutation.expectedSize());
															#line 29588 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1loopBody1cont1(loopDepth);
		}
		else
		{
															#line 6435 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (mutation.type == MutationRef::Type::ClearRange)
															#line 29595 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 6436 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				trCommitCosts.opsCount++;
															#line 6437 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				keyRange = KeyRangeRef(mutation.param1, mutation.param2);
															#line 6438 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (trState->options.expensiveClearCostEstimation)
															#line 29603 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 6439 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					StrictFuture<StorageMetrics> __when_expr_0 = trState->cx->getStorageMetrics(keyRange, CLIENT_KNOBS->TOO_MANY, trState);
															#line 6439 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					if (static_cast<EstimateCommitCostsActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 29609 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
					static_cast<EstimateCommitCostsActor*>(this)->actor_wait_state = 1;
															#line 6439 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< EstimateCommitCostsActor, 0, StorageMetrics >*>(static_cast<EstimateCommitCostsActor*>(this)));
															#line 29614 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					loopDepth = 0;
				}
				else
				{
															#line 6445 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					if (trState->hasTenant())
															#line 29621 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					{
															#line 6446 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
						StrictFuture<Void> __when_expr_1 = trState->tenant().get()->ready();
															#line 6446 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
						if (static_cast<EstimateCommitCostsActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 29627 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
						if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1when2(__when_expr_1.get(), loopDepth); };
						static_cast<EstimateCommitCostsActor*>(this)->actor_wait_state = 2;
															#line 6446 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
						__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< EstimateCommitCostsActor, 1, Void >*>(static_cast<EstimateCommitCostsActor*>(this)));
															#line 29632 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
						loopDepth = 0;
					}
					else
					{
						loopDepth = a_body1loopBody1cont8(loopDepth);
					}
				}
			}
			else
			{
				loopDepth = a_body1loopBody1cont4(loopDepth);
			}
		}

		return loopDepth;
	}
	int a_body1break1(int loopDepth) 
	{
		try {
			return a_body1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1continue1(int loopDepth) 
	{
															#line 6429 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		++i;
															#line 29666 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
															#line 6429 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		++i;
															#line 29675 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1cont4(int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont5(int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont4(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont6(StorageMetrics const& m,int loopDepth) 
	{
															#line 6440 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		trCommitCosts.clearIdxCosts.emplace_back(i, getWriteOperationCost(m.bytes));
															#line 6441 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		trCommitCosts.writeCosts += getWriteOperationCost(m.bytes);
															#line 6442 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		++trCommitCosts.expensiveCostEstCount;
															#line 6443 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		++trState->cx->transactionsExpensiveClearCostEstCount;
															#line 29702 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont5(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont6(StorageMetrics && m,int loopDepth) 
	{
															#line 6440 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		trCommitCosts.clearIdxCosts.emplace_back(i, getWriteOperationCost(m.bytes));
															#line 6441 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		trCommitCosts.writeCosts += getWriteOperationCost(m.bytes);
															#line 6442 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		++trCommitCosts.expensiveCostEstCount;
															#line 6443 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		++trState->cx->transactionsExpensiveClearCostEstCount;
															#line 29717 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont5(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(StorageMetrics const& m,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont6(m, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(StorageMetrics && m,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont6(std::move(m), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<EstimateCommitCostsActor*>(this)->actor_wait_state > 0) static_cast<EstimateCommitCostsActor*>(this)->actor_wait_state = 0;
		static_cast<EstimateCommitCostsActor*>(this)->ActorCallback< EstimateCommitCostsActor, 0, StorageMetrics >::remove();

	}
	void a_callback_fire(ActorCallback< EstimateCommitCostsActor, 0, StorageMetrics >*,StorageMetrics const& value) 
	{
		fdb_probe_actor_enter("estimateCommitCosts", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("estimateCommitCosts", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< EstimateCommitCostsActor, 0, StorageMetrics >*,StorageMetrics && value) 
	{
		fdb_probe_actor_enter("estimateCommitCosts", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("estimateCommitCosts", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< EstimateCommitCostsActor, 0, StorageMetrics >*,Error err) 
	{
		fdb_probe_actor_enter("estimateCommitCosts", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("estimateCommitCosts", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1cont8(int loopDepth) 
	{
															#line 6448 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<std::vector<KeyRangeLocationInfo>> __when_expr_2 = getKeyRangeLocations(trState, keyRange, CLIENT_KNOBS->TOO_MANY, Reverse::False, &StorageServerInterface::getShardState, UseTenant::True);
															#line 6448 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<EstimateCommitCostsActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 29791 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1cont8when1(__when_expr_2.get(), loopDepth); };
		static_cast<EstimateCommitCostsActor*>(this)->actor_wait_state = 3;
															#line 6448 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< EstimateCommitCostsActor, 2, std::vector<KeyRangeLocationInfo> >*>(static_cast<EstimateCommitCostsActor*>(this)));
															#line 29796 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont9(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont8(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont9(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont8(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when2(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont9(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when2(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont9(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<EstimateCommitCostsActor*>(this)->actor_wait_state > 0) static_cast<EstimateCommitCostsActor*>(this)->actor_wait_state = 0;
		static_cast<EstimateCommitCostsActor*>(this)->ActorCallback< EstimateCommitCostsActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< EstimateCommitCostsActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("estimateCommitCosts", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1when2(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("estimateCommitCosts", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< EstimateCommitCostsActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("estimateCommitCosts", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1when2(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("estimateCommitCosts", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< EstimateCommitCostsActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("estimateCommitCosts", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("estimateCommitCosts", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1loopBody1cont10(std::vector<KeyRangeLocationInfo> const& locations,int loopDepth) 
	{
															#line 6455 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (locations.empty())
															#line 29880 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
			return a_body1continue1(loopDepth); // continue
		}
															#line 6459 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		uint64_t bytes = 0;
															#line 6460 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (locations.size() == 1)
															#line 29888 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 6461 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			bytes = CLIENT_KNOBS->INCOMPLETE_SHARD_PLUS;
															#line 29892 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
		else
		{
															#line 6463 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			bytes = CLIENT_KNOBS->INCOMPLETE_SHARD_PLUS * 2 + (locations.size() - 2) * (int64_t)trState->cx->smoothMidShardSize.smoothTotal();
															#line 29898 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 6467 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		trCommitCosts.clearIdxCosts.emplace_back(i, getWriteOperationCost(bytes));
															#line 6468 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		trCommitCosts.writeCosts += getWriteOperationCost(bytes);
															#line 29904 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont5(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont10(std::vector<KeyRangeLocationInfo> && locations,int loopDepth) 
	{
															#line 6455 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (locations.empty())
															#line 29913 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
			return a_body1continue1(loopDepth); // continue
		}
															#line 6459 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		uint64_t bytes = 0;
															#line 6460 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (locations.size() == 1)
															#line 29921 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 6461 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			bytes = CLIENT_KNOBS->INCOMPLETE_SHARD_PLUS;
															#line 29925 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
		else
		{
															#line 6463 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			bytes = CLIENT_KNOBS->INCOMPLETE_SHARD_PLUS * 2 + (locations.size() - 2) * (int64_t)trState->cx->smoothMidShardSize.smoothTotal();
															#line 29931 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 6467 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		trCommitCosts.clearIdxCosts.emplace_back(i, getWriteOperationCost(bytes));
															#line 6468 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		trCommitCosts.writeCosts += getWriteOperationCost(bytes);
															#line 29937 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont5(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont8when1(std::vector<KeyRangeLocationInfo> const& locations,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont10(locations, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont8when1(std::vector<KeyRangeLocationInfo> && locations,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont10(std::move(locations), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<EstimateCommitCostsActor*>(this)->actor_wait_state > 0) static_cast<EstimateCommitCostsActor*>(this)->actor_wait_state = 0;
		static_cast<EstimateCommitCostsActor*>(this)->ActorCallback< EstimateCommitCostsActor, 2, std::vector<KeyRangeLocationInfo> >::remove();

	}
	void a_callback_fire(ActorCallback< EstimateCommitCostsActor, 2, std::vector<KeyRangeLocationInfo> >*,std::vector<KeyRangeLocationInfo> const& value) 
	{
		fdb_probe_actor_enter("estimateCommitCosts", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont8when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("estimateCommitCosts", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< EstimateCommitCostsActor, 2, std::vector<KeyRangeLocationInfo> >*,std::vector<KeyRangeLocationInfo> && value) 
	{
		fdb_probe_actor_enter("estimateCommitCosts", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont8when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("estimateCommitCosts", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< EstimateCommitCostsActor, 2, std::vector<KeyRangeLocationInfo> >*,Error err) 
	{
		fdb_probe_actor_enter("estimateCommitCosts", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("estimateCommitCosts", reinterpret_cast<unsigned long>(this), 2);

	}
															#line 6423 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<TransactionState> trState;
															#line 6423 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	CommitTransactionRef const* transaction;
															#line 6425 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	ClientTrCommitCostEstimation trCommitCosts;
															#line 6426 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeyRangeRef keyRange;
															#line 6427 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	int i;
															#line 30015 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via estimateCommitCosts()
															#line 6423 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class EstimateCommitCostsActor final : public Actor<Optional<ClientTrCommitCostEstimation>>, public ActorCallback< EstimateCommitCostsActor, 0, StorageMetrics >, public ActorCallback< EstimateCommitCostsActor, 1, Void >, public ActorCallback< EstimateCommitCostsActor, 2, std::vector<KeyRangeLocationInfo> >, public FastAllocated<EstimateCommitCostsActor>, public EstimateCommitCostsActorState<EstimateCommitCostsActor> {
															#line 30020 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<EstimateCommitCostsActor>::operator new;
	using FastAllocated<EstimateCommitCostsActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Optional<ClientTrCommitCostEstimation>>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< EstimateCommitCostsActor, 0, StorageMetrics >;
friend struct ActorCallback< EstimateCommitCostsActor, 1, Void >;
friend struct ActorCallback< EstimateCommitCostsActor, 2, std::vector<KeyRangeLocationInfo> >;
															#line 6423 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	EstimateCommitCostsActor(Reference<TransactionState> const& trState,CommitTransactionRef const* const& transaction) 
															#line 30033 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Optional<ClientTrCommitCostEstimation>>(),
		   EstimateCommitCostsActorState<EstimateCommitCostsActor>(trState, transaction)
	{
		fdb_probe_actor_enter("estimateCommitCosts", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("estimateCommitCosts");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("estimateCommitCosts", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< EstimateCommitCostsActor, 0, StorageMetrics >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< EstimateCommitCostsActor, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< EstimateCommitCostsActor, 2, std::vector<KeyRangeLocationInfo> >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 6423 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<Optional<ClientTrCommitCostEstimation>> estimateCommitCosts( Reference<TransactionState> const& trState, CommitTransactionRef const* const& transaction ) {
															#line 6423 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Optional<ClientTrCommitCostEstimation>>(new EstimateCommitCostsActor(trState, transaction));
															#line 30063 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 6501 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

// TODO: send the prefix as part of the commit request and ship it all the way
// through to the storage servers
void applyTenantPrefix(CommitTransactionRequest& req, Key tenantPrefix) {
	VectorRef<MutationRef> updatedMutations;
	updatedMutations.reserve(req.arena, req.transaction.mutations.size());
	for (auto& m : req.transaction.mutations) {
		StringRef param1 = m.param1;
		StringRef param2 = m.param2;
		if (m.param1 != metadataVersionKey) {
			param1 = m.param1.withPrefix(tenantPrefix, req.arena);
			if (m.type == MutationRef::ClearRange) {
				param2 = m.param2.withPrefix(tenantPrefix, req.arena);
			} else if (m.type == MutationRef::SetVersionstampedKey) {
				uint8_t* key = mutateString(param1);
				int* offset = reinterpret_cast<int*>(&key[param1.size() - 4]);
				*offset += tenantPrefix.size();
			}
		}
		updatedMutations.push_back(req.arena, MutationRef(MutationRef::Type(m.type), param1, param2));
	}
	req.transaction.mutations = updatedMutations;

	VectorRef<KeyRangeRef> updatedReadConflictRanges;
	updatedReadConflictRanges.reserve(req.arena, req.transaction.read_conflict_ranges.size());
	for (auto const& rc : req.transaction.read_conflict_ranges) {
		if (rc.begin != metadataVersionKey) {
			updatedReadConflictRanges.push_back(req.arena, rc.withPrefix(tenantPrefix, req.arena));
		} else {
			updatedReadConflictRanges.push_back(req.arena, rc);
		}
	}
	req.transaction.read_conflict_ranges = updatedReadConflictRanges;

	VectorRef<KeyRangeRef> updatedWriteConflictRanges;
	updatedWriteConflictRanges.reserve(req.arena, req.transaction.write_conflict_ranges.size());
	for (auto& wc : req.transaction.write_conflict_ranges) {
		if (wc.begin != metadataVersionKey) {
			updatedWriteConflictRanges.push_back(req.arena, wc.withPrefix(tenantPrefix, req.arena));
		} else {
			updatedWriteConflictRanges.push_back(req.arena, wc);
		}
	}
	req.transaction.write_conflict_ranges = updatedWriteConflictRanges;
}

															#line 30113 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via tryCommit()
															#line 6547 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class TryCommitActor>
															#line 6547 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class TryCommitActorState {
															#line 30120 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 6547 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	TryCommitActorState(Reference<TransactionState> const& trState,CommitTransactionRequest const& req) 
															#line 6547 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 6547 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : trState(trState),
															#line 6547 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   req(req),
															#line 6548 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   interval("TransactionCommit"),
															#line 6549 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   startTime(now()),
															#line 6550 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   span("NAPI:tryCommit"_loc, trState->spanContext),
															#line 6551 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   debugID(trState->readOptions.present() ? trState->readOptions.get().debugID : Optional<UID>()),
															#line 6552 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   tenantPrefixPrepended(TenantPrefixPrepended::False)
															#line 30139 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("tryCommit", reinterpret_cast<unsigned long>(this));

	}
	~TryCommitActorState() 
	{
		fdb_probe_actor_destroy("tryCommit", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 6553 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (debugID.present())
															#line 30154 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 6554 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				TraceEvent(interval.begin()).detail("Parent", debugID.get());
															#line 30158 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 6559 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			startFuture = trState->startTransaction(GetReadVersionRequest::FLAG_CAUSAL_READ_RISKY);
															#line 30162 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			try {
															#line 6562 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (CLIENT_BUGGIFY)
															#line 30166 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 6563 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					return a_body1Catch2(deterministicRandom()->randomChoice(std::vector<Error>{ not_committed(), transaction_too_old(), commit_proxy_memory_limit_exceeded(), grv_proxy_memory_limit_exceeded(), commit_unknown_result() }), loopDepth);
															#line 30170 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
															#line 6570 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (req.tagSet.present() && trState->options.priority < TransactionPriority::IMMEDIATE)
															#line 30174 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 6571 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					commitCostFuture = estimateCommitCosts(trState, &req.transaction);
															#line 6573 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					StrictFuture<Void> __when_expr_0 = startFuture;
															#line 6573 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					if (static_cast<TryCommitActor*>(this)->actor_wait_state < 0) return a_body1Catch2(actor_cancelled(), loopDepth);
															#line 30182 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch2(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
					static_cast<TryCommitActor*>(this)->actor_wait_state = 1;
															#line 6573 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< TryCommitActor, 0, Void >*>(static_cast<TryCommitActor*>(this)));
															#line 30187 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					loopDepth = 0;
				}
				else
				{
															#line 6576 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					StrictFuture<Void> __when_expr_2 = startFuture;
															#line 6576 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					if (static_cast<TryCommitActor*>(this)->actor_wait_state < 0) return a_body1Catch2(actor_cancelled(), loopDepth);
															#line 30196 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch2(__when_expr_2.getError(), loopDepth); else return a_body1when2(__when_expr_2.get(), loopDepth); };
					static_cast<TryCommitActor*>(this)->actor_wait_state = 3;
															#line 6576 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< TryCommitActor, 2, Void >*>(static_cast<TryCommitActor*>(this)));
															#line 30201 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					loopDepth = 0;
				}
			}
			catch (Error& error) {
				loopDepth = a_body1Catch2(error, loopDepth);
			} catch (...) {
				loopDepth = a_body1Catch2(unknown_error(), loopDepth);
			}
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~TryCommitActorState();
		static_cast<TryCommitActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1Catch2(const Error& e,int loopDepth=0) 
	{
		try {
															#line 6712 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (e.code() == error_code_request_maybe_delivered || e.code() == error_code_commit_unknown_result)
															#line 30232 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 6715 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (!trState->options.causalWriteRisky || req.idempotencyId.valid())
															#line 30236 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 6725 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					KeyRangeRef selfConflictingRange = intersects(req.transaction.write_conflict_ranges, req.transaction.read_conflict_ranges).get();
															#line 6728 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					CODE_PROBE(true, "Waiting for dummy transaction to report commit_unknown_result");
															#line 6730 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					StrictFuture<Void> __when_expr_5 = commitDummyTransaction(trState, singleKeyRange(selfConflictingRange.begin), tenantPrefixPrepended);
															#line 6730 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					if (static_cast<TryCommitActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 30246 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					if (__when_expr_5.isReady()) { if (__when_expr_5.isError()) return a_body1Catch1(__when_expr_5.getError(), loopDepth); else return a_body1Catch2when1(__when_expr_5.get(), loopDepth); };
					static_cast<TryCommitActor*>(this)->actor_wait_state = 5;
															#line 6730 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					__when_expr_5.addCallbackAndClear(static_cast<ActorCallback< TryCommitActor, 5, Void >*>(static_cast<TryCommitActor*>(this)));
															#line 30251 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					loopDepth = 0;
				}
				else
				{
					loopDepth = a_body1Catch2cont2(loopDepth);
				}
			}
			else
			{
															#line 6756 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (e.code() != error_code_transaction_too_old && e.code() != error_code_not_committed && e.code() != error_code_database_locked && e.code() != error_code_commit_proxy_memory_limit_exceeded && e.code() != error_code_grv_proxy_memory_limit_exceeded && e.code() != error_code_batch_transaction_throttled && e.code() != error_code_tag_throttled && e.code() != error_code_process_behind && e.code() != error_code_future_version && e.code() != error_code_tenant_not_found && e.code() != error_code_illegal_tenant_access && e.code() != error_code_proxy_tag_throttled && e.code() != error_code_storage_quota_exceeded && e.code() != error_code_tenant_locked)
															#line 30263 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 6764 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					TraceEvent(SevError, "TryCommitError").error(e);
															#line 30267 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
															#line 6766 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (trState->trLogInfo)
															#line 30271 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 6767 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					trState->trLogInfo->addLog( FdbClientLogEvents::EventCommitError(startTime, trState->cx->clientLocality.dcId(), static_cast<int>(e.code()), req, trState->tenant().flatMapRef(&Tenant::name)));
															#line 30275 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
															#line 6773 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				return a_body1Catch1(e, loopDepth);
															#line 30279 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont3(int loopDepth) 
	{
															#line 6579 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		req.transaction.read_snapshot = trState->readVersion();
															#line 6581 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		tenantPrefix = Key();
															#line 6584 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (trState->hasTenant() && !trState->skipApplyTenantPrefix)
															#line 30298 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 6585 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			applyTenantPrefix(req, trState->tenant().get()->prefix());
															#line 6586 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tenantPrefixPrepended = TenantPrefixPrepended::True;
															#line 6587 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tenantPrefix = trState->tenant().get()->prefix();
															#line 30306 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 6589 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		CODE_PROBE(trState->skipApplyTenantPrefix, "Tenant prefix prepend skipped for dummy transaction");
															#line 6590 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		req.tenantInfo = trState->getTenantInfo();
															#line 6591 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		startTime = now();
															#line 6592 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		commitID = Optional<UID>();
															#line 6594 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (debugID.present())
															#line 30318 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 6595 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			commitID = nondeterministicRandom()->randomUniqueID();
															#line 6596 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			g_traceBatch.addAttach("CommitAttachID", debugID.get().first(), commitID.get().first());
															#line 6597 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			g_traceBatch.addEvent("CommitDebug", commitID.get().first(), "NativeAPI.commit.Before");
															#line 30326 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 6600 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		req.debugID = commitID;
															#line 6601 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		reply = Future<CommitID>();
															#line 6604 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		alternativeChosen = -1;
															#line 6606 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		proxiesUsed = Reference<CommitProxyInfo>();
															#line 6608 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (trState->options.commitOnFirstProxy)
															#line 30338 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 6609 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (trState->cx->clientInfo->get().firstCommitProxy.present())
															#line 30342 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 6610 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				reply = throwErrorOr(brokenPromiseToMaybeDelivered( trState->cx->clientInfo->get().firstCommitProxy.get().commit.tryGetReply(req)));
															#line 30346 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
			else
			{
															#line 6613 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				const std::vector<CommitProxyInterface>& proxies = trState->cx->clientInfo->get().commitProxies;
															#line 6614 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				reply = proxies.size() ? throwErrorOr(brokenPromiseToMaybeDelivered(proxies[0].commit.tryGetReply(req))) : Never();
															#line 30354 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
		}
		else
		{
															#line 6618 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			proxiesUsed = trState->cx->getCommitProxies(trState->useProvisionalProxies);
															#line 6619 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			reply = basicLoadBalance(proxiesUsed, &CommitProxyInterface::commit, req, TaskPriority::DefaultPromiseEndpoint, AtMostOnce::True, &alternativeChosen);
															#line 30363 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 6626 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		grvTime = now();
															#line 6628 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_3 = trState->cx->onProxiesChanged();
															#line 6627 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<TryCommitActor*>(this)->actor_wait_state < 0) return a_body1Catch2(actor_cancelled(), loopDepth);
															#line 30371 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch2(__when_expr_3.getError(), loopDepth); else return a_body1cont3when1(__when_expr_3.get(), loopDepth); };
															#line 6632 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<CommitID> __when_expr_4 = reply;
															#line 30375 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1Catch2(__when_expr_4.getError(), loopDepth); else return a_body1cont3when2(__when_expr_4.get(), loopDepth); };
		static_cast<TryCommitActor*>(this)->actor_wait_state = 4;
															#line 6628 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< TryCommitActor, 3, Void >*>(static_cast<TryCommitActor*>(this)));
															#line 6632 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< TryCommitActor, 4, CommitID >*>(static_cast<TryCommitActor*>(this)));
															#line 30382 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont5(Void const& _,int loopDepth) 
	{
															#line 6574 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_1 = store(req.commitCostEstimation, commitCostFuture);
															#line 6574 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<TryCommitActor*>(this)->actor_wait_state < 0) return a_body1Catch2(actor_cancelled(), loopDepth);
															#line 30393 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch2(__when_expr_1.getError(), loopDepth); else return a_body1cont5when1(__when_expr_1.get(), loopDepth); };
		static_cast<TryCommitActor*>(this)->actor_wait_state = 2;
															#line 6574 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< TryCommitActor, 1, Void >*>(static_cast<TryCommitActor*>(this)));
															#line 30398 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont5(Void && _,int loopDepth) 
	{
															#line 6574 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_1 = store(req.commitCostEstimation, commitCostFuture);
															#line 6574 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<TryCommitActor*>(this)->actor_wait_state < 0) return a_body1Catch2(actor_cancelled(), loopDepth);
															#line 30409 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch2(__when_expr_1.getError(), loopDepth); else return a_body1cont5when1(__when_expr_1.get(), loopDepth); };
		static_cast<TryCommitActor*>(this)->actor_wait_state = 2;
															#line 6574 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< TryCommitActor, 1, Void >*>(static_cast<TryCommitActor*>(this)));
															#line 30414 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont5(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont5(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<TryCommitActor*>(this)->actor_wait_state > 0) static_cast<TryCommitActor*>(this)->actor_wait_state = 0;
		static_cast<TryCommitActor*>(this)->ActorCallback< TryCommitActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< TryCommitActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("tryCommit", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("tryCommit", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< TryCommitActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("tryCommit", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("tryCommit", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< TryCommitActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("tryCommit", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch2(err, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("tryCommit", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont6(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1cont6(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1cont5when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont6(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont5when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont6(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<TryCommitActor*>(this)->actor_wait_state > 0) static_cast<TryCommitActor*>(this)->actor_wait_state = 0;
		static_cast<TryCommitActor*>(this)->ActorCallback< TryCommitActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< TryCommitActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("tryCommit", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont5when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("tryCommit", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< TryCommitActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("tryCommit", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont5when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("tryCommit", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< TryCommitActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("tryCommit", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch2(err, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("tryCommit", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont7(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1cont7(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1when2(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont7(_, loopDepth);

		return loopDepth;
	}
	int a_body1when2(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont7(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<TryCommitActor*>(this)->actor_wait_state > 0) static_cast<TryCommitActor*>(this)->actor_wait_state = 0;
		static_cast<TryCommitActor*>(this)->ActorCallback< TryCommitActor, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< TryCommitActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("tryCommit", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1when2(value, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("tryCommit", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< TryCommitActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("tryCommit", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1when2(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("tryCommit", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< TryCommitActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("tryCommit", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch2(err, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("tryCommit", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1cont3when1(Void const& _,int loopDepth) 
	{
															#line 6629 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		reply.cancel();
															#line 6630 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		return a_body1Catch2(request_maybe_delivered(), loopDepth);
															#line 30638 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"

		return loopDepth;
	}
	int a_body1cont3when1(Void && _,int loopDepth) 
	{
															#line 6629 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		reply.cancel();
															#line 6630 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		return a_body1Catch2(request_maybe_delivered(), loopDepth);
															#line 30648 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"

		return loopDepth;
	}
	int a_body1cont3when2(CommitID const& ci,int loopDepth) 
	{
															#line 6633 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		Version v = ci.version;
															#line 6634 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (v != invalidVersion)
															#line 30658 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 6635 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (CLIENT_BUGGIFY)
															#line 30662 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 6636 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				return a_body1Catch2(commit_unknown_result(), loopDepth);
															#line 30666 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 6638 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			trState->cx->updateCachedReadVersion(grvTime, v);
															#line 6639 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (debugID.present())
															#line 30672 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 6640 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				TraceEvent(interval.end()).detail("CommittedVersion", v);
															#line 30676 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 6641 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			trState->committedVersion = v;
															#line 6642 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (v > trState->cx->metadataVersionCache[trState->cx->mvCacheInsertLocation].first)
															#line 30682 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 6643 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				trState->cx->mvCacheInsertLocation = (trState->cx->mvCacheInsertLocation + 1) % trState->cx->metadataVersionCache.size();
															#line 6645 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				trState->cx->metadataVersionCache[trState->cx->mvCacheInsertLocation] = std::make_pair(v, ci.metadataVersion);
															#line 30688 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 6649 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			Standalone<StringRef> ret = makeString(10);
															#line 6650 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			placeVersionstamp(mutateString(ret), v, ci.txnBatchId);
															#line 6651 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			trState->versionstampPromise.send(ret);
															#line 6653 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			trState->numErrors = 0;
															#line 6654 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			++trState->cx->transactionsCommitCompleted;
															#line 6655 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			trState->cx->transactionCommittedMutations += req.transaction.mutations.size();
															#line 6656 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			trState->cx->transactionCommittedMutationBytes += req.transaction.mutations.expectedSize();
															#line 6658 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (commitID.present())
															#line 30706 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 6659 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				g_traceBatch.addEvent("CommitDebug", commitID.get().first(), "NativeAPI.commit.After");
															#line 30710 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 6661 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			double latency = now() - startTime;
															#line 6662 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			trState->cx->commitLatencies.addSample(latency);
															#line 6663 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			trState->cx->latencies.addSample(now() - trState->startTime);
															#line 6664 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (trState->trLogInfo)
															#line 30720 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 6665 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				trState->trLogInfo->addLog( FdbClientLogEvents::EventCommit_V2(startTime, trState->cx->clientLocality.dcId(), latency, req.transaction.mutations.size(), req.transaction.mutations.expectedSize(), ci.version, req, trState->tenant().flatMapRef(&Tenant::name)));
															#line 30724 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 6674 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (trState->automaticIdempotency && alternativeChosen >= 0)
															#line 30728 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 6676 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				proxiesUsed->getInterface(alternativeChosen) .expireIdempotencyId.send(ExpireIdempotencyIdRequest{ ci.version, uint8_t(ci.txnBatchId >> 8), trState->getTenantInfo() });
															#line 30732 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 6680 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<TryCommitActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~TryCommitActorState(); static_cast<TryCommitActor*>(this)->destroy(); return 0; }
															#line 30736 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<TryCommitActor*>(this)->SAV< Void >::value()) Void(Void());
			this->~TryCommitActorState();
			static_cast<TryCommitActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
		else
		{
															#line 6683 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			trState->conflictingKeys.reset();
															#line 6684 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (ci.conflictingKRIndices.present())
															#line 30748 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 6685 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				trState->conflictingKeys = std::make_shared<CoalescedKeyRangeMap<Value>>(conflictingKeysFalse, specialKeys.end);
															#line 6687 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				conflictingKRIndices = ci.conflictingKRIndices.get();
															#line 6690 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				mergedIds = std::unordered_set<int>(conflictingKRIndices.begin(), conflictingKRIndices.end());
															#line 6692 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				for( auto const& rCRIndex : mergedIds ) {
															#line 6693 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					const KeyRangeRef kr = req.transaction.read_conflict_ranges[rCRIndex];
															#line 6694 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					const KeyRange krWithPrefix = KeyRangeRef(kr.begin.removePrefix(tenantPrefix).withPrefix(conflictingKeysRange.begin), kr.end.removePrefix(tenantPrefix).withPrefix(conflictingKeysRange.begin));
															#line 6697 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					trState->conflictingKeys->insert(krWithPrefix, conflictingKeysTrue);
															#line 30764 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
			}
															#line 6701 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (debugID.present())
															#line 30769 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 6702 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				TraceEvent(interval.end()).detail("Conflict", 1);
															#line 30773 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 6704 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (commitID.present())
															#line 30777 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 6705 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				g_traceBatch.addEvent("CommitDebug", commitID.get().first(), "NativeAPI.commit.After");
															#line 30781 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 6707 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			return a_body1Catch2(not_committed(), loopDepth);
															#line 30785 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}

		return loopDepth;
	}
	int a_body1cont3when2(CommitID && ci,int loopDepth) 
	{
															#line 6633 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		Version v = ci.version;
															#line 6634 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (v != invalidVersion)
															#line 30796 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 6635 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (CLIENT_BUGGIFY)
															#line 30800 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 6636 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				return a_body1Catch2(commit_unknown_result(), loopDepth);
															#line 30804 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 6638 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			trState->cx->updateCachedReadVersion(grvTime, v);
															#line 6639 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (debugID.present())
															#line 30810 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 6640 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				TraceEvent(interval.end()).detail("CommittedVersion", v);
															#line 30814 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 6641 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			trState->committedVersion = v;
															#line 6642 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (v > trState->cx->metadataVersionCache[trState->cx->mvCacheInsertLocation].first)
															#line 30820 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 6643 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				trState->cx->mvCacheInsertLocation = (trState->cx->mvCacheInsertLocation + 1) % trState->cx->metadataVersionCache.size();
															#line 6645 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				trState->cx->metadataVersionCache[trState->cx->mvCacheInsertLocation] = std::make_pair(v, ci.metadataVersion);
															#line 30826 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 6649 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			Standalone<StringRef> ret = makeString(10);
															#line 6650 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			placeVersionstamp(mutateString(ret), v, ci.txnBatchId);
															#line 6651 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			trState->versionstampPromise.send(ret);
															#line 6653 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			trState->numErrors = 0;
															#line 6654 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			++trState->cx->transactionsCommitCompleted;
															#line 6655 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			trState->cx->transactionCommittedMutations += req.transaction.mutations.size();
															#line 6656 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			trState->cx->transactionCommittedMutationBytes += req.transaction.mutations.expectedSize();
															#line 6658 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (commitID.present())
															#line 30844 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 6659 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				g_traceBatch.addEvent("CommitDebug", commitID.get().first(), "NativeAPI.commit.After");
															#line 30848 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 6661 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			double latency = now() - startTime;
															#line 6662 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			trState->cx->commitLatencies.addSample(latency);
															#line 6663 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			trState->cx->latencies.addSample(now() - trState->startTime);
															#line 6664 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (trState->trLogInfo)
															#line 30858 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 6665 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				trState->trLogInfo->addLog( FdbClientLogEvents::EventCommit_V2(startTime, trState->cx->clientLocality.dcId(), latency, req.transaction.mutations.size(), req.transaction.mutations.expectedSize(), ci.version, req, trState->tenant().flatMapRef(&Tenant::name)));
															#line 30862 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 6674 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (trState->automaticIdempotency && alternativeChosen >= 0)
															#line 30866 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 6676 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				proxiesUsed->getInterface(alternativeChosen) .expireIdempotencyId.send(ExpireIdempotencyIdRequest{ ci.version, uint8_t(ci.txnBatchId >> 8), trState->getTenantInfo() });
															#line 30870 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 6680 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<TryCommitActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~TryCommitActorState(); static_cast<TryCommitActor*>(this)->destroy(); return 0; }
															#line 30874 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<TryCommitActor*>(this)->SAV< Void >::value()) Void(Void());
			this->~TryCommitActorState();
			static_cast<TryCommitActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
		else
		{
															#line 6683 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			trState->conflictingKeys.reset();
															#line 6684 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (ci.conflictingKRIndices.present())
															#line 30886 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 6685 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				trState->conflictingKeys = std::make_shared<CoalescedKeyRangeMap<Value>>(conflictingKeysFalse, specialKeys.end);
															#line 6687 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				conflictingKRIndices = ci.conflictingKRIndices.get();
															#line 6690 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				mergedIds = std::unordered_set<int>(conflictingKRIndices.begin(), conflictingKRIndices.end());
															#line 6692 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				for( auto const& rCRIndex : mergedIds ) {
															#line 6693 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					const KeyRangeRef kr = req.transaction.read_conflict_ranges[rCRIndex];
															#line 6694 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					const KeyRange krWithPrefix = KeyRangeRef(kr.begin.removePrefix(tenantPrefix).withPrefix(conflictingKeysRange.begin), kr.end.removePrefix(tenantPrefix).withPrefix(conflictingKeysRange.begin));
															#line 6697 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					trState->conflictingKeys->insert(krWithPrefix, conflictingKeysTrue);
															#line 30902 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
			}
															#line 6701 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (debugID.present())
															#line 30907 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 6702 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				TraceEvent(interval.end()).detail("Conflict", 1);
															#line 30911 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 6704 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (commitID.present())
															#line 30915 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 6705 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				g_traceBatch.addEvent("CommitDebug", commitID.get().first(), "NativeAPI.commit.After");
															#line 30919 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 6707 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			return a_body1Catch2(not_committed(), loopDepth);
															#line 30923 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<TryCommitActor*>(this)->actor_wait_state > 0) static_cast<TryCommitActor*>(this)->actor_wait_state = 0;
		static_cast<TryCommitActor*>(this)->ActorCallback< TryCommitActor, 3, Void >::remove();
		static_cast<TryCommitActor*>(this)->ActorCallback< TryCommitActor, 4, CommitID >::remove();

	}
	void a_callback_fire(ActorCallback< TryCommitActor, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("tryCommit", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont3when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("tryCommit", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< TryCommitActor, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("tryCommit", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont3when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("tryCommit", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< TryCommitActor, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("tryCommit", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1Catch2(err, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("tryCommit", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< TryCommitActor, 4, CommitID >*,CommitID const& value) 
	{
		fdb_probe_actor_enter("tryCommit", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose4();
		try {
			a_body1cont3when2(value, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("tryCommit", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_fire(ActorCallback< TryCommitActor, 4, CommitID >*,CommitID && value) 
	{
		fdb_probe_actor_enter("tryCommit", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose4();
		try {
			a_body1cont3when2(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("tryCommit", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_error(ActorCallback< TryCommitActor, 4, CommitID >*,Error err) 
	{
		fdb_probe_actor_enter("tryCommit", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose4();
		try {
			a_body1Catch2(err, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("tryCommit", reinterpret_cast<unsigned long>(this), 4);

	}
	int a_body1Catch2cont2(int loopDepth) 
	{
															#line 6754 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		return a_body1Catch1(commit_unknown_result(), loopDepth);
															#line 31029 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"

		return loopDepth;
	}
	int a_body1Catch2cont3(Void const& _,int loopDepth) 
	{
															#line 6732 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (req.idempotencyId.valid())
															#line 31037 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 6733 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Optional<CommitResult>> __when_expr_6 = determineCommitStatus( trState, req.transaction.read_snapshot, req.transaction.read_snapshot + 5e6 , req.idempotencyId);
															#line 6733 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<TryCommitActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 31043 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_6.isReady()) { if (__when_expr_6.isError()) return a_body1Catch1(__when_expr_6.getError(), loopDepth); else return a_body1Catch2cont3when1(__when_expr_6.get(), loopDepth); };
			static_cast<TryCommitActor*>(this)->actor_wait_state = 6;
															#line 6733 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_6.addCallbackAndClear(static_cast<ActorCallback< TryCommitActor, 6, Optional<CommitResult> >*>(static_cast<TryCommitActor*>(this)));
															#line 31048 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1Catch2cont4(loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch2cont3(Void && _,int loopDepth) 
	{
															#line 6732 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (req.idempotencyId.valid())
															#line 31062 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 6733 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Optional<CommitResult>> __when_expr_6 = determineCommitStatus( trState, req.transaction.read_snapshot, req.transaction.read_snapshot + 5e6 , req.idempotencyId);
															#line 6733 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<TryCommitActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 31068 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_6.isReady()) { if (__when_expr_6.isError()) return a_body1Catch1(__when_expr_6.getError(), loopDepth); else return a_body1Catch2cont3when1(__when_expr_6.get(), loopDepth); };
			static_cast<TryCommitActor*>(this)->actor_wait_state = 6;
															#line 6733 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_6.addCallbackAndClear(static_cast<ActorCallback< TryCommitActor, 6, Optional<CommitResult> >*>(static_cast<TryCommitActor*>(this)));
															#line 31073 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1Catch2cont4(loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1Catch2cont3(_, loopDepth);

		return loopDepth;
	}
	int a_body1Catch2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1Catch2cont3(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose5() 
	{
		if (static_cast<TryCommitActor*>(this)->actor_wait_state > 0) static_cast<TryCommitActor*>(this)->actor_wait_state = 0;
		static_cast<TryCommitActor*>(this)->ActorCallback< TryCommitActor, 5, Void >::remove();

	}
	void a_callback_fire(ActorCallback< TryCommitActor, 5, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("tryCommit", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose5();
		try {
			a_body1Catch2when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("tryCommit", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_fire(ActorCallback< TryCommitActor, 5, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("tryCommit", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose5();
		try {
			a_body1Catch2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("tryCommit", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_error(ActorCallback< TryCommitActor, 5, Void >*,Error err) 
	{
		fdb_probe_actor_enter("tryCommit", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose5();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("tryCommit", reinterpret_cast<unsigned long>(this), 5);

	}
	int a_body1Catch2cont4(int loopDepth) 
	{
		loopDepth = a_body1Catch2cont2(loopDepth);

		return loopDepth;
	}
	int a_body1Catch2cont5(Optional<CommitResult> const& commitResult,int loopDepth) 
	{
															#line 6738 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (commitResult.present())
															#line 31156 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 6739 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			Standalone<StringRef> ret = makeString(10);
															#line 6740 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			placeVersionstamp( mutateString(ret), commitResult.get().commitVersion, commitResult.get().batchIndex);
															#line 6742 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			trState->versionstampPromise.send(ret);
															#line 6743 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			CODE_PROBE(true, "AutomaticIdempotencyCommitted");
															#line 6744 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<TryCommitActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~TryCommitActorState(); static_cast<TryCommitActor*>(this)->destroy(); return 0; }
															#line 31168 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<TryCommitActor*>(this)->SAV< Void >::value()) Void(Void());
			this->~TryCommitActorState();
			static_cast<TryCommitActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
		else
		{
															#line 6746 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			CODE_PROBE(true, "AutomaticIdempotencyNotCommitted");
															#line 6747 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			return a_body1Catch1(transaction_too_old(), loopDepth);
															#line 31180 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}

		return loopDepth;
	}
	int a_body1Catch2cont5(Optional<CommitResult> && commitResult,int loopDepth) 
	{
															#line 6738 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (commitResult.present())
															#line 31189 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 6739 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			Standalone<StringRef> ret = makeString(10);
															#line 6740 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			placeVersionstamp( mutateString(ret), commitResult.get().commitVersion, commitResult.get().batchIndex);
															#line 6742 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			trState->versionstampPromise.send(ret);
															#line 6743 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			CODE_PROBE(true, "AutomaticIdempotencyCommitted");
															#line 6744 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<TryCommitActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~TryCommitActorState(); static_cast<TryCommitActor*>(this)->destroy(); return 0; }
															#line 31201 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<TryCommitActor*>(this)->SAV< Void >::value()) Void(Void());
			this->~TryCommitActorState();
			static_cast<TryCommitActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
		else
		{
															#line 6746 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			CODE_PROBE(true, "AutomaticIdempotencyNotCommitted");
															#line 6747 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			return a_body1Catch1(transaction_too_old(), loopDepth);
															#line 31213 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}

		return loopDepth;
	}
	int a_body1Catch2cont3when1(Optional<CommitResult> const& commitResult,int loopDepth) 
	{
		loopDepth = a_body1Catch2cont5(commitResult, loopDepth);

		return loopDepth;
	}
	int a_body1Catch2cont3when1(Optional<CommitResult> && commitResult,int loopDepth) 
	{
		loopDepth = a_body1Catch2cont5(std::move(commitResult), loopDepth);

		return loopDepth;
	}
	void a_exitChoose6() 
	{
		if (static_cast<TryCommitActor*>(this)->actor_wait_state > 0) static_cast<TryCommitActor*>(this)->actor_wait_state = 0;
		static_cast<TryCommitActor*>(this)->ActorCallback< TryCommitActor, 6, Optional<CommitResult> >::remove();

	}
	void a_callback_fire(ActorCallback< TryCommitActor, 6, Optional<CommitResult> >*,Optional<CommitResult> const& value) 
	{
		fdb_probe_actor_enter("tryCommit", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose6();
		try {
			a_body1Catch2cont3when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("tryCommit", reinterpret_cast<unsigned long>(this), 6);

	}
	void a_callback_fire(ActorCallback< TryCommitActor, 6, Optional<CommitResult> >*,Optional<CommitResult> && value) 
	{
		fdb_probe_actor_enter("tryCommit", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose6();
		try {
			a_body1Catch2cont3when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("tryCommit", reinterpret_cast<unsigned long>(this), 6);

	}
	void a_callback_error(ActorCallback< TryCommitActor, 6, Optional<CommitResult> >*,Error err) 
	{
		fdb_probe_actor_enter("tryCommit", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose6();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("tryCommit", reinterpret_cast<unsigned long>(this), 6);

	}
															#line 6547 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<TransactionState> trState;
															#line 6547 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	CommitTransactionRequest req;
															#line 6548 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	TraceInterval interval;
															#line 6549 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	double startTime;
															#line 6550 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Span span;
															#line 6551 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Optional<UID> debugID;
															#line 6552 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	TenantPrefixPrepended tenantPrefixPrepended;
															#line 6559 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Future<Void> startFuture;
															#line 6571 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Future<Optional<ClientTrCommitCostEstimation>> commitCostFuture;
															#line 6581 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Key tenantPrefix;
															#line 6592 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Optional<UID> commitID;
															#line 6601 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Future<CommitID> reply;
															#line 6604 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	int alternativeChosen;
															#line 6606 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<CommitProxyInfo> proxiesUsed;
															#line 6626 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	double grvTime;
															#line 6687 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Standalone<VectorRef<int>> conflictingKRIndices;
															#line 6690 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	std::unordered_set<int> mergedIds;
															#line 31315 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via tryCommit()
															#line 6547 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class TryCommitActor final : public Actor<Void>, public ActorCallback< TryCommitActor, 0, Void >, public ActorCallback< TryCommitActor, 1, Void >, public ActorCallback< TryCommitActor, 2, Void >, public ActorCallback< TryCommitActor, 3, Void >, public ActorCallback< TryCommitActor, 4, CommitID >, public ActorCallback< TryCommitActor, 5, Void >, public ActorCallback< TryCommitActor, 6, Optional<CommitResult> >, public FastAllocated<TryCommitActor>, public TryCommitActorState<TryCommitActor> {
															#line 31320 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<TryCommitActor>::operator new;
	using FastAllocated<TryCommitActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< TryCommitActor, 0, Void >;
friend struct ActorCallback< TryCommitActor, 1, Void >;
friend struct ActorCallback< TryCommitActor, 2, Void >;
friend struct ActorCallback< TryCommitActor, 3, Void >;
friend struct ActorCallback< TryCommitActor, 4, CommitID >;
friend struct ActorCallback< TryCommitActor, 5, Void >;
friend struct ActorCallback< TryCommitActor, 6, Optional<CommitResult> >;
															#line 6547 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	TryCommitActor(Reference<TransactionState> const& trState,CommitTransactionRequest const& req) 
															#line 31337 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Void>(),
		   TryCommitActorState<TryCommitActor>(trState, req)
	{
		fdb_probe_actor_enter("tryCommit", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("tryCommit");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("tryCommit", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< TryCommitActor, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< TryCommitActor, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< TryCommitActor, 2, Void >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< TryCommitActor, 3, Void >*)0, actor_cancelled()); break;
		case 5: this->a_callback_error((ActorCallback< TryCommitActor, 5, Void >*)0, actor_cancelled()); break;
		case 6: this->a_callback_error((ActorCallback< TryCommitActor, 6, Optional<CommitResult> >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 6547 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] static Future<Void> tryCommit( Reference<TransactionState> const& trState, CommitTransactionRequest const& req ) {
															#line 6547 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Void>(new TryCommitActor(trState, req));
															#line 31370 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 6777 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

Future<Void> Transaction::commitMutations() {
	try {
		// if this is a read-only transaction return immediately
		if (!tr.transaction.write_conflict_ranges.size() && !tr.transaction.mutations.size()) {
			trState->numErrors = 0;

			trState->committedVersion = invalidVersion;
			trState->versionstampPromise.sendError(no_commit_version());
			return Void();
		}

		++trState->cx->transactionsCommitStarted;

		if (trState->options.readOnly)
			return transaction_read_only();

		trState->cx->mutationsPerCommit.addSample(tr.transaction.mutations.size());
		trState->cx->bytesPerCommit.addSample(tr.transaction.mutations.expectedSize());
		if (trState->options.tags.size())
			tr.tagSet = trState->options.tags;

		size_t transactionSize = getSize();
		if (transactionSize > (uint64_t)FLOW_KNOBS->PACKET_WARNING) {
			TraceEvent(SevWarn, "LargeTransaction")
			    .suppressFor(1.0)
			    .detail("Size", transactionSize)
			    .detail("NumMutations", tr.transaction.mutations.size())
			    .detail("ReadConflictSize", tr.transaction.read_conflict_ranges.expectedSize())
			    .detail("WriteConflictSize", tr.transaction.write_conflict_ranges.expectedSize())
			    .detail("DebugIdentifier", trState->trLogInfo ? trState->trLogInfo->identifier : "");
		}

		if (!apiVersionAtLeast(300)) {
			transactionSize =
			    tr.transaction.mutations.expectedSize(); // Old API versions didn't account for conflict ranges when
			                                             // determining whether to throw transaction_too_large
		}

		if (transactionSize > trState->options.sizeLimit) {
			return transaction_too_large();
		}

		bool isCheckingWrites = trState->options.checkWritesEnabled && deterministicRandom()->random01() < 0.01;
		for (int i = 0; i < extraConflictRanges.size(); i++)
			if (extraConflictRanges[i].isReady() &&
			    extraConflictRanges[i].get().first < extraConflictRanges[i].get().second)
				tr.transaction.read_conflict_ranges.emplace_back(
				    tr.arena, extraConflictRanges[i].get().first, extraConflictRanges[i].get().second);

		if (tr.idempotencyId.valid()) {
			// We need to be able confirm that this transaction is no longer in
			// flight, and if the idempotency id is in the read and write
			// conflict range we can use that.
			BinaryWriter wr(Unversioned());
			wr.serializeBytes("\xFF/SC/"_sr);
			wr.serializeBytes(tr.idempotencyId.asStringRefUnsafe());
			auto r = singleKeyRange(wr.toValue(), tr.arena);
			tr.transaction.read_conflict_ranges.push_back(tr.arena, r);
			tr.transaction.write_conflict_ranges.push_back(tr.arena, r);
		}

		if (!trState->options.causalWriteRisky &&
		    !intersects(tr.transaction.write_conflict_ranges, tr.transaction.read_conflict_ranges).present())
			makeSelfConflicting();

		if (isCheckingWrites) {
			// add all writes into the read conflict range...
			tr.transaction.read_conflict_ranges.append(
			    tr.arena, tr.transaction.write_conflict_ranges.begin(), tr.transaction.write_conflict_ranges.size());
		}

		if (trState->options.debugDump) {
			UID u = nondeterministicRandom()->randomUniqueID();
			TraceEvent("TransactionDump", u).log();
			for (auto i = tr.transaction.mutations.begin(); i != tr.transaction.mutations.end(); ++i)
				TraceEvent("TransactionMutation", u)
				    .detail("T", i->type)
				    .detail("P1", i->param1)
				    .detail("P2", i->param2);
		}

		if (trState->options.lockAware) {
			tr.flags = tr.flags | CommitTransactionRequest::FLAG_IS_LOCK_AWARE;
		}
		if (trState->options.firstInBatch) {
			tr.flags = tr.flags | CommitTransactionRequest::FLAG_FIRST_IN_BATCH;
		}
		if (trState->options.bypassStorageQuota) {
			tr.flags = tr.flags | CommitTransactionRequest::FLAG_BYPASS_STORAGE_QUOTA;
		}
		if (trState->options.reportConflictingKeys) {
			tr.transaction.report_conflicting_keys = true;
		}

		Future<Void> commitResult = tryCommit(trState, tr);

		if (isCheckingWrites) {
			Promise<Void> committed;
			checkWrites(trState, commitResult, committed, tr);
			return committed.getFuture();
		}
		return commitResult;
	} catch (Error& e) {
		TraceEvent("ClientCommitError").error(e);
		return Future<Void>(e);
	} catch (...) {
		Error e(error_code_unknown_error);
		TraceEvent("ClientCommitError").error(e);
		return Future<Void>(e);
	}
}

															#line 31487 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via commitAndWatch()
															#line 6890 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class CommitAndWatchActor>
															#line 6890 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class CommitAndWatchActorState {
															#line 31494 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 6890 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	CommitAndWatchActorState(Transaction* const& self) 
															#line 6890 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 6890 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : self(self)
															#line 31501 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("commitAndWatch", reinterpret_cast<unsigned long>(this));

	}
	~CommitAndWatchActorState() 
	{
		fdb_probe_actor_destroy("commitAndWatch", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
			try {
															#line 6892 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				StrictFuture<Void> __when_expr_0 = self->commitMutations();
															#line 6892 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (static_cast<CommitAndWatchActor*>(this)->actor_wait_state < 0) return a_body1Catch2(actor_cancelled(), loopDepth);
															#line 31519 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch2(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
				static_cast<CommitAndWatchActor*>(this)->actor_wait_state = 1;
															#line 6892 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< CommitAndWatchActor, 0, Void >*>(static_cast<CommitAndWatchActor*>(this)));
															#line 31524 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				loopDepth = 0;
			}
			catch (Error& error) {
				loopDepth = a_body1Catch2(error, loopDepth);
			} catch (...) {
				loopDepth = a_body1Catch2(unknown_error(), loopDepth);
			}
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~CommitAndWatchActorState();
		static_cast<CommitAndWatchActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1Catch2(const Error& e,int loopDepth=0) 
	{
		try {
															#line 6907 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (e.code() != error_code_actor_cancelled)
															#line 31554 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 6908 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (!self->watches.empty())
															#line 31558 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 6909 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					self->cancelWatches(e);
															#line 31562 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
															#line 6912 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				self->trState->versionstampPromise.sendError(transaction_invalid_version());
															#line 6914 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (!self->apiVersionAtLeast(700))
															#line 31568 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 6915 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					self->reset();
															#line 31572 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
			}
															#line 6919 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			return a_body1Catch1(e, loopDepth);
															#line 31577 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont2(Void const& _,int loopDepth) 
	{
															#line 6894 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		self->getDatabase()->transactionTracingSample = (self->getCommittedVersion() % 60000000) < (60000000 * FLOW_KNOBS->TRACING_SAMPLE_RATE);
															#line 6897 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!self->watches.empty())
															#line 31593 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 6898 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			self->setupWatches();
															#line 31597 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 6901 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!self->apiVersionAtLeast(700))
															#line 31601 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 6902 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			self->reset();
															#line 31605 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 6905 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<CommitAndWatchActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~CommitAndWatchActorState(); static_cast<CommitAndWatchActor*>(this)->destroy(); return 0; }
															#line 31609 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<CommitAndWatchActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~CommitAndWatchActorState();
		static_cast<CommitAndWatchActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont2(Void && _,int loopDepth) 
	{
															#line 6894 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		self->getDatabase()->transactionTracingSample = (self->getCommittedVersion() % 60000000) < (60000000 * FLOW_KNOBS->TRACING_SAMPLE_RATE);
															#line 6897 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!self->watches.empty())
															#line 31623 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 6898 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			self->setupWatches();
															#line 31627 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 6901 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!self->apiVersionAtLeast(700))
															#line 31631 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 6902 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			self->reset();
															#line 31635 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 6905 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<CommitAndWatchActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~CommitAndWatchActorState(); static_cast<CommitAndWatchActor*>(this)->destroy(); return 0; }
															#line 31639 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<CommitAndWatchActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~CommitAndWatchActorState();
		static_cast<CommitAndWatchActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<CommitAndWatchActor*>(this)->actor_wait_state > 0) static_cast<CommitAndWatchActor*>(this)->actor_wait_state = 0;
		static_cast<CommitAndWatchActor*>(this)->ActorCallback< CommitAndWatchActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< CommitAndWatchActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("commitAndWatch", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("commitAndWatch", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< CommitAndWatchActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("commitAndWatch", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("commitAndWatch", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< CommitAndWatchActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("commitAndWatch", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch2(err, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("commitAndWatch", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 6890 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Transaction* self;
															#line 31712 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via commitAndWatch()
															#line 6890 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class CommitAndWatchActor final : public Actor<Void>, public ActorCallback< CommitAndWatchActor, 0, Void >, public FastAllocated<CommitAndWatchActor>, public CommitAndWatchActorState<CommitAndWatchActor> {
															#line 31717 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<CommitAndWatchActor>::operator new;
	using FastAllocated<CommitAndWatchActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< CommitAndWatchActor, 0, Void >;
															#line 6890 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	CommitAndWatchActor(Transaction* const& self) 
															#line 31728 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Void>(),
		   CommitAndWatchActorState<CommitAndWatchActor>(self)
	{
		fdb_probe_actor_enter("commitAndWatch", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("commitAndWatch");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("commitAndWatch", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< CommitAndWatchActor, 0, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 6890 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<Void> commitAndWatch( Transaction* const& self ) {
															#line 6890 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Void>(new CommitAndWatchActor(self));
															#line 31756 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 6922 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

Future<Void> Transaction::commit() {
	ASSERT(!committing.isValid());
	committing = commitAndWatch(this);
	return committing;
}

void Transaction::setOption(FDBTransactionOptions::Option option, Optional<StringRef> value) {
	switch (option) {
	case FDBTransactionOptions::INITIALIZE_NEW_DATABASE:
		validateOptionValueNotPresent(value);
		if (trState->readVersionFuture.isValid())
			throw read_version_already_set();
		trState->readVersionFuture = Version(0);
		trState->options.causalWriteRisky = true;
		break;

	case FDBTransactionOptions::CAUSAL_READ_RISKY:
		validateOptionValueNotPresent(value);
		trState->options.getReadVersionFlags |= GetReadVersionRequest::FLAG_CAUSAL_READ_RISKY;
		break;

	case FDBTransactionOptions::PRIORITY_SYSTEM_IMMEDIATE:
		validateOptionValueNotPresent(value);
		trState->options.priority = TransactionPriority::IMMEDIATE;
		break;

	case FDBTransactionOptions::PRIORITY_BATCH:
		validateOptionValueNotPresent(value);
		trState->options.priority = TransactionPriority::BATCH;
		break;

	case FDBTransactionOptions::CAUSAL_WRITE_RISKY:
		validateOptionValueNotPresent(value);
		trState->options.causalWriteRisky = true;
		break;

	case FDBTransactionOptions::COMMIT_ON_FIRST_PROXY:
		validateOptionValueNotPresent(value);
		trState->options.commitOnFirstProxy = true;
		break;

	case FDBTransactionOptions::CHECK_WRITES_ENABLE:
		validateOptionValueNotPresent(value);
		trState->options.checkWritesEnabled = true;
		break;

	case FDBTransactionOptions::DEBUG_DUMP:
		validateOptionValueNotPresent(value);
		trState->options.debugDump = true;
		break;

	case FDBTransactionOptions::TRANSACTION_LOGGING_ENABLE:
		setOption(FDBTransactionOptions::DEBUG_TRANSACTION_IDENTIFIER, value);
		setOption(FDBTransactionOptions::LOG_TRANSACTION);
		break;

	case FDBTransactionOptions::DEBUG_TRANSACTION_IDENTIFIER:
		validateOptionValuePresent(value);

		if (value.get().size() > 100 || value.get().size() == 0) {
			throw invalid_option_value();
		}

		if (trState->trLogInfo) {
			if (trState->trLogInfo->identifier.empty()) {
				trState->trLogInfo->identifier = value.get().printable();
			} else if (trState->trLogInfo->identifier != value.get().printable()) {
				TraceEvent(SevWarn, "CannotChangeDebugTransactionIdentifier")
				    .detail("PreviousIdentifier", trState->trLogInfo->identifier)
				    .detail("NewIdentifier", value.get());
				throw client_invalid_operation();
			}
		} else {
			trState->trLogInfo =
			    makeReference<TransactionLogInfo>(value.get().printable(), TransactionLogInfo::DONT_LOG);
			trState->trLogInfo->maxFieldLength = trState->options.maxTransactionLoggingFieldLength;
		}
		if (trState->readOptions.present() && trState->readOptions.get().debugID.present()) {
			TraceEvent(SevInfo, "TransactionBeingTraced")
			    .detail("DebugTransactionID", trState->trLogInfo->identifier)
			    .detail("ServerTraceID", trState->readOptions.get().debugID.get());
		}
		break;

	case FDBTransactionOptions::LOG_TRANSACTION:
		validateOptionValueNotPresent(value);
		if (trState->trLogInfo && !trState->trLogInfo->identifier.empty()) {
			trState->trLogInfo->logTo(TransactionLogInfo::TRACE_LOG);
		} else {
			TraceEvent(SevWarn, "DebugTransactionIdentifierNotSet")
			    .detail("Error", "Debug Transaction Identifier option must be set before logging the transaction");
			throw client_invalid_operation();
		}
		break;

	case FDBTransactionOptions::TRANSACTION_LOGGING_MAX_FIELD_LENGTH:
		validateOptionValuePresent(value);
		{
			int maxFieldLength = extractIntOption(value, -1, std::numeric_limits<int32_t>::max());
			if (maxFieldLength == 0) {
				throw invalid_option_value();
			}
			trState->options.maxTransactionLoggingFieldLength = maxFieldLength;
		}
		if (trState->trLogInfo) {
			trState->trLogInfo->maxFieldLength = trState->options.maxTransactionLoggingFieldLength;
		}
		break;

	case FDBTransactionOptions::SERVER_REQUEST_TRACING:
		validateOptionValueNotPresent(value);
		debugTransaction(deterministicRandom()->randomUniqueID());
		if (trState->trLogInfo && !trState->trLogInfo->identifier.empty() && trState->readOptions.present() &&
		    trState->readOptions.get().debugID.present()) {
			TraceEvent(SevInfo, "TransactionBeingTraced")
			    .detail("DebugTransactionID", trState->trLogInfo->identifier)
			    .detail("ServerTraceID", trState->readOptions.get().debugID.get());
		}
		break;

	case FDBTransactionOptions::MAX_RETRY_DELAY:
		validateOptionValuePresent(value);
		trState->options.maxBackoff = extractIntOption(value, 0, std::numeric_limits<int32_t>::max()) / 1000.0;
		break;

	case FDBTransactionOptions::SIZE_LIMIT:
		validateOptionValuePresent(value);
		trState->options.sizeLimit = extractIntOption(value, 32, CLIENT_KNOBS->TRANSACTION_SIZE_LIMIT);
		break;

	case FDBTransactionOptions::LOCK_AWARE:
		validateOptionValueNotPresent(value);
		if (!trState->readOptions.present()) {
			trState->readOptions = ReadOptions();
		}
		trState->readOptions.get().lockAware = true;
		trState->options.lockAware = true;
		trState->options.readOnly = false;
		break;

	case FDBTransactionOptions::READ_LOCK_AWARE:
		validateOptionValueNotPresent(value);
		if (!trState->readOptions.present()) {
			trState->readOptions = ReadOptions();
		}
		trState->readOptions.get().lockAware = true;
		if (!trState->options.lockAware) {
			trState->options.lockAware = true;
			trState->options.readOnly = true;
		}
		break;

	case FDBTransactionOptions::FIRST_IN_BATCH:
		validateOptionValueNotPresent(value);
		trState->options.firstInBatch = true;
		break;

	case FDBTransactionOptions::USE_PROVISIONAL_PROXIES:
		validateOptionValueNotPresent(value);
		if (trState->hasTenant()) {
			Error e = invalid_option();
			TraceEvent(SevWarn, "TenantTransactionUseProvisionalProxies").error(e).detail("Tenant", trState->tenant());
			throw e;
		}
		trState->options.getReadVersionFlags |= GetReadVersionRequest::FLAG_USE_PROVISIONAL_PROXIES;
		trState->useProvisionalProxies = UseProvisionalProxies::True;
		break;

	case FDBTransactionOptions::INCLUDE_PORT_IN_ADDRESS:
		validateOptionValueNotPresent(value);
		trState->options.includePort = true;
		break;

	case FDBTransactionOptions::TAG:
		validateOptionValuePresent(value);
		trState->options.tags.addTag(value.get());
		break;

	case FDBTransactionOptions::AUTO_THROTTLE_TAG:
		validateOptionValuePresent(value);
		trState->options.tags.addTag(value.get());
		trState->options.readTags.addTag(value.get());
		break;

	case FDBTransactionOptions::SPAN_PARENT:
		validateOptionValuePresent(value);
		if (value.get().size() != 33) {
			throw invalid_option_value();
		}
		CODE_PROBE(true, "Adding link in FDBTransactionOptions::SPAN_PARENT");
		span.setParent(BinaryReader::fromStringRef<SpanContext>(value.get(), IncludeVersion()));
		break;

	case FDBTransactionOptions::REPORT_CONFLICTING_KEYS:
		validateOptionValueNotPresent(value);
		trState->options.reportConflictingKeys = true;
		break;

	case FDBTransactionOptions::EXPENSIVE_CLEAR_COST_ESTIMATION_ENABLE:
		validateOptionValueNotPresent(value);
		trState->options.expensiveClearCostEstimation = true;
		break;

	case FDBTransactionOptions::USE_GRV_CACHE:
		validateOptionValueNotPresent(value);
		if (apiVersionAtLeast(ApiVersion::withGrvCache().version()) && !trState->cx->sharedStatePtr) {
			throw invalid_option();
		}
		if (trState->numErrors == 0) {
			trState->options.useGrvCache = true;
		}
		break;

	case FDBTransactionOptions::SKIP_GRV_CACHE:
		validateOptionValueNotPresent(value);
		trState->options.skipGrvCache = true;
		break;
	case FDBTransactionOptions::READ_SYSTEM_KEYS:
	case FDBTransactionOptions::ACCESS_SYSTEM_KEYS:
	case FDBTransactionOptions::RAW_ACCESS:
		// System key access implies raw access. Native API handles the raw access,
		// system key access is handled in RYW.
		validateOptionValueNotPresent(value);
		if (trState->hasTenant(ResolveDefaultTenant::False)) {
			Error e = invalid_option();
			TraceEvent(SevWarn, "TenantTransactionRawAccess").error(e).detail("Tenant", trState->tenant());
			throw e;
		}
		trState->options.rawAccess = true;
		break;

	case FDBTransactionOptions::BYPASS_STORAGE_QUOTA:
		trState->options.bypassStorageQuota = true;
		break;

	case FDBTransactionOptions::AUTHORIZATION_TOKEN:
		if (value.present())
			trState->authToken = WipedString(value.get());
		else
			trState->authToken.reset();
		break;
	case FDBTransactionOptions::IDEMPOTENCY_ID:
		validateOptionValuePresent(value);
		if (!(value.get().size() >= 16 && value.get().size() < 256)) {
			Error e = invalid_option();
			TraceEvent(SevWarn, "IdempotencyIdInvalidSize")
			    .error(e)
			    .detail("IdempotencyId", value.get().printable())
			    .detail("Recommendation", "Use an idempotency id that's at least 16 bytes and less than 256 bytes");
			throw e;
		}
		tr.idempotencyId = IdempotencyIdRef(tr.arena, IdempotencyIdRef(value.get()));
		trState->automaticIdempotency = false;
		break;
	case FDBTransactionOptions::AUTOMATIC_IDEMPOTENCY:
		validateOptionValueNotPresent(value);
		if (!tr.idempotencyId.valid()) {
			tr.idempotencyId = IdempotencyIdRef(
			    tr.arena,
			    IdempotencyIdRef(BinaryWriter::toValue(deterministicRandom()->randomUniqueID(), Unversioned())));
		}
		trState->automaticIdempotency = true;
		break;

	case FDBTransactionOptions::READ_SERVER_SIDE_CACHE_ENABLE:
		trState->readOptions.withDefault(ReadOptions()).cacheResult = CacheResult::True;
		break;

	case FDBTransactionOptions::READ_SERVER_SIDE_CACHE_DISABLE:
		trState->readOptions.withDefault(ReadOptions()).cacheResult = CacheResult::False;
		break;

	case FDBTransactionOptions::READ_PRIORITY_LOW:
		trState->readOptions.withDefault(ReadOptions()).type = ReadType::LOW;
		break;

	case FDBTransactionOptions::READ_PRIORITY_NORMAL:
		trState->readOptions.withDefault(ReadOptions()).type = ReadType::NORMAL;
		break;

	case FDBTransactionOptions::READ_PRIORITY_HIGH:
		trState->readOptions.withDefault(ReadOptions()).type = ReadType::HIGH;
		break;

	default:
		break;
	}
}

															#line 32050 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via getConsistentReadVersion()
															#line 7212 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class GetConsistentReadVersionActor>
															#line 7212 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetConsistentReadVersionActorState {
															#line 32057 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 7212 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetConsistentReadVersionActorState(SpanContext const& parentSpan,DatabaseContext* const& cx,uint32_t const& transactionCount,TransactionPriority const& priority,uint32_t const& flags,TransactionTagMap<uint32_t> const& tags,Optional<UID> const& debugID) 
															#line 7212 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 7212 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : parentSpan(parentSpan),
															#line 7212 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   cx(cx),
															#line 7212 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   transactionCount(transactionCount),
															#line 7212 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   priority(priority),
															#line 7212 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   flags(flags),
															#line 7212 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   tags(tags),
															#line 7212 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   debugID(debugID),
															#line 7219 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   span("NAPI:getConsistentReadVersion"_loc, parentSpan)
															#line 32078 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("getConsistentReadVersion", reinterpret_cast<unsigned long>(this));

	}
	~GetConsistentReadVersionActorState() 
	{
		fdb_probe_actor_destroy("getConsistentReadVersion", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 7221 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			++cx->transactionReadVersionBatches;
															#line 7222 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (debugID.present())
															#line 32095 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 7223 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				g_traceBatch.addEvent("TransactionDebug", debugID.get().first(), "NativeAPI.getConsistentReadVersion.Before");
															#line 32099 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 7224 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			;
															#line 32103 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~GetConsistentReadVersionActorState();
		static_cast<GetConsistentReadVersionActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
		try {
															#line 7226 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			req = GetReadVersionRequest(span.context, transactionCount, priority, cx->ssVersionVectorCache.getMaxVersion(), flags, tags, debugID);
															#line 7233 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			onProxiesChanged = cx->onProxiesChanged();
															#line 7236 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_0 = onProxiesChanged;
															#line 7235 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<GetConsistentReadVersionActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 32140 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1loopBody1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
															#line 7239 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<GetReadVersionReply> __when_expr_1 = basicLoadBalance(cx->getGrvProxies(UseProvisionalProxies( flags & GetReadVersionRequest::FLAG_USE_PROVISIONAL_PROXIES)), &GrvProxyInterface::getConsistentReadVersion, req, cx->taskID);
															#line 32144 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1when2(__when_expr_1.get(), loopDepth); };
			static_cast<GetConsistentReadVersionActor*>(this)->actor_wait_state = 1;
															#line 7236 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< GetConsistentReadVersionActor, 0, Void >*>(static_cast<GetConsistentReadVersionActor*>(this)));
															#line 7239 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< GetConsistentReadVersionActor, 1, GetReadVersionReply >*>(static_cast<GetConsistentReadVersionActor*>(this)));
															#line 32151 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 7280 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (e.code() != error_code_broken_promise && e.code() != error_code_batch_transaction_throttled && e.code() != error_code_grv_proxy_memory_limit_exceeded && e.code() != error_code_proxy_tag_throttled)
															#line 32173 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 7282 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				TraceEvent(SevError, "GetConsistentReadVersionError").error(e);
															#line 32177 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 7283 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (e.code() == error_code_batch_transaction_throttled && !cx->apiVersionAtLeast(630))
															#line 32181 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 7284 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				StrictFuture<Void> __when_expr_2 = delayJittered(5.0);
															#line 7284 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (static_cast<GetConsistentReadVersionActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 32187 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1Catch1when1(__when_expr_2.get(), loopDepth); };
				static_cast<GetConsistentReadVersionActor*>(this)->actor_wait_state = 2;
															#line 7284 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< GetConsistentReadVersionActor, 2, Void >*>(static_cast<GetConsistentReadVersionActor*>(this)));
															#line 32192 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				loopDepth = 0;
			}
			else
			{
															#line 7285 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (e.code() == error_code_grv_proxy_memory_limit_exceeded)
															#line 32199 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 7288 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					StrictFuture<Void> __when_expr_3 = delayJittered(CLIENT_KNOBS->GRV_ERROR_RETRY_DELAY);
															#line 7288 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					if (static_cast<GetConsistentReadVersionActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 32205 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch1(__when_expr_3.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1Catch1when2(__when_expr_3.get(), loopDepth); };
					static_cast<GetConsistentReadVersionActor*>(this)->actor_wait_state = 3;
															#line 7288 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< GetConsistentReadVersionActor, 3, Void >*>(static_cast<GetConsistentReadVersionActor*>(this)));
															#line 32210 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					loopDepth = 0;
				}
				else
				{
															#line 7290 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					return a_body1Catch1(e, std::max(0, loopDepth - 1));
															#line 32217 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
			}
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Void const& _,int loopDepth) 
	{
															#line 7237 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		onProxiesChanged = cx->onProxiesChanged();
															#line 32239 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont2(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Void && _,int loopDepth) 
	{
															#line 7237 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		onProxiesChanged = cx->onProxiesChanged();
															#line 32248 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont2(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when2(GetReadVersionReply const& v,int loopDepth) 
	{
															#line 7245 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		CODE_PROBE(v.proxyTagThrottledDuration > 0.0, "getConsistentReadVersion received GetReadVersionReply delayed by proxy tag throttling");
															#line 7247 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (tags.size() != 0)
															#line 32259 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 7248 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			auto& priorityThrottledTags = cx->throttledTags[priority];
															#line 7249 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			for( auto& tag : tags ) {
															#line 7250 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				auto itr = v.tagThrottleInfo.find(tag.first);
															#line 7251 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (itr == v.tagThrottleInfo.end())
															#line 32269 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 7252 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					CODE_PROBE(true, "Removing client throttle");
															#line 7253 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					priorityThrottledTags.erase(tag.first);
															#line 32275 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
				else
				{
															#line 7255 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					CODE_PROBE(true, "Setting client throttle");
															#line 7256 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					auto result = priorityThrottledTags.try_emplace(tag.first, itr->second);
															#line 7257 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					if (!result.second)
															#line 32285 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					{
															#line 7258 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
						result.first->second.update(itr->second);
															#line 32289 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					}
				}
			}
		}
															#line 7264 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (debugID.present())
															#line 32296 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 7265 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			g_traceBatch.addEvent( "TransactionDebug", debugID.get().first(), "NativeAPI.getConsistentReadVersion.After");
															#line 32300 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 7267 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(v.version > 0);
															#line 7268 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		cx->minAcceptableReadVersion = std::min(cx->minAcceptableReadVersion, v.version);
															#line 7269 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (cx->versionVectorCacheActive(v.ssVersionVectorDelta))
															#line 32308 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 7270 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (cx->isCurrentGrvProxy(v.proxyId))
															#line 32312 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 7271 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				cx->ssVersionVectorCache.applyDelta(v.ssVersionVectorDelta);
															#line 32316 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
			else
			{
				return a_body1loopHead1(loopDepth); // continue
			}
		}
															#line 7276 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<GetConsistentReadVersionActor*>(this)->SAV<GetReadVersionReply>::futures) { (void)(v); this->~GetConsistentReadVersionActorState(); static_cast<GetConsistentReadVersionActor*>(this)->destroy(); return 0; }
															#line 32325 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<GetConsistentReadVersionActor*>(this)->SAV< GetReadVersionReply >::value()) GetReadVersionReply(v);
		this->~GetConsistentReadVersionActorState();
		static_cast<GetConsistentReadVersionActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1when2(GetReadVersionReply && v,int loopDepth) 
	{
															#line 7245 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		CODE_PROBE(v.proxyTagThrottledDuration > 0.0, "getConsistentReadVersion received GetReadVersionReply delayed by proxy tag throttling");
															#line 7247 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (tags.size() != 0)
															#line 32339 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 7248 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			auto& priorityThrottledTags = cx->throttledTags[priority];
															#line 7249 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			for( auto& tag : tags ) {
															#line 7250 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				auto itr = v.tagThrottleInfo.find(tag.first);
															#line 7251 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (itr == v.tagThrottleInfo.end())
															#line 32349 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 7252 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					CODE_PROBE(true, "Removing client throttle");
															#line 7253 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					priorityThrottledTags.erase(tag.first);
															#line 32355 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
				else
				{
															#line 7255 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					CODE_PROBE(true, "Setting client throttle");
															#line 7256 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					auto result = priorityThrottledTags.try_emplace(tag.first, itr->second);
															#line 7257 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					if (!result.second)
															#line 32365 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					{
															#line 7258 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
						result.first->second.update(itr->second);
															#line 32369 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					}
				}
			}
		}
															#line 7264 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (debugID.present())
															#line 32376 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 7265 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			g_traceBatch.addEvent( "TransactionDebug", debugID.get().first(), "NativeAPI.getConsistentReadVersion.After");
															#line 32380 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 7267 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(v.version > 0);
															#line 7268 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		cx->minAcceptableReadVersion = std::min(cx->minAcceptableReadVersion, v.version);
															#line 7269 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (cx->versionVectorCacheActive(v.ssVersionVectorDelta))
															#line 32388 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 7270 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (cx->isCurrentGrvProxy(v.proxyId))
															#line 32392 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 7271 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				cx->ssVersionVectorCache.applyDelta(v.ssVersionVectorDelta);
															#line 32396 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
			else
			{
				return a_body1loopHead1(loopDepth); // continue
			}
		}
															#line 7276 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<GetConsistentReadVersionActor*>(this)->SAV<GetReadVersionReply>::futures) { (void)(v); this->~GetConsistentReadVersionActorState(); static_cast<GetConsistentReadVersionActor*>(this)->destroy(); return 0; }
															#line 32405 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<GetConsistentReadVersionActor*>(this)->SAV< GetReadVersionReply >::value()) GetReadVersionReply(v);
		this->~GetConsistentReadVersionActorState();
		static_cast<GetConsistentReadVersionActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<GetConsistentReadVersionActor*>(this)->actor_wait_state > 0) static_cast<GetConsistentReadVersionActor*>(this)->actor_wait_state = 0;
		static_cast<GetConsistentReadVersionActor*>(this)->ActorCallback< GetConsistentReadVersionActor, 0, Void >::remove();
		static_cast<GetConsistentReadVersionActor*>(this)->ActorCallback< GetConsistentReadVersionActor, 1, GetReadVersionReply >::remove();

	}
	void a_callback_fire(ActorCallback< GetConsistentReadVersionActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getConsistentReadVersion", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getConsistentReadVersion", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< GetConsistentReadVersionActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getConsistentReadVersion", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getConsistentReadVersion", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< GetConsistentReadVersionActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getConsistentReadVersion", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getConsistentReadVersion", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< GetConsistentReadVersionActor, 1, GetReadVersionReply >*,GetReadVersionReply const& value) 
	{
		fdb_probe_actor_enter("getConsistentReadVersion", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose1();
		try {
			a_body1loopBody1when2(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getConsistentReadVersion", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< GetConsistentReadVersionActor, 1, GetReadVersionReply >*,GetReadVersionReply && value) 
	{
		fdb_probe_actor_enter("getConsistentReadVersion", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose1();
		try {
			a_body1loopBody1when2(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getConsistentReadVersion", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< GetConsistentReadVersionActor, 1, GetReadVersionReply >*,Error err) 
	{
		fdb_probe_actor_enter("getConsistentReadVersion", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getConsistentReadVersion", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1loopBody1cont3(int loopDepth) 
	{
		try {
			loopDepth = a_body1loopBody1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont3(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont3(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont3(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont3(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<GetConsistentReadVersionActor*>(this)->actor_wait_state > 0) static_cast<GetConsistentReadVersionActor*>(this)->actor_wait_state = 0;
		static_cast<GetConsistentReadVersionActor*>(this)->ActorCallback< GetConsistentReadVersionActor, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetConsistentReadVersionActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getConsistentReadVersion", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getConsistentReadVersion", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< GetConsistentReadVersionActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getConsistentReadVersion", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getConsistentReadVersion", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< GetConsistentReadVersionActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getConsistentReadVersion", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getConsistentReadVersion", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1loopBody1Catch1cont4(int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont5(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont4(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont5(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont4(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when2(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont5(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when2(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont5(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<GetConsistentReadVersionActor*>(this)->actor_wait_state > 0) static_cast<GetConsistentReadVersionActor*>(this)->actor_wait_state = 0;
		static_cast<GetConsistentReadVersionActor*>(this)->ActorCallback< GetConsistentReadVersionActor, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetConsistentReadVersionActor, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getConsistentReadVersion", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose3();
		try {
			a_body1loopBody1Catch1when2(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getConsistentReadVersion", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< GetConsistentReadVersionActor, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getConsistentReadVersion", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose3();
		try {
			a_body1loopBody1Catch1when2(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getConsistentReadVersion", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< GetConsistentReadVersionActor, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getConsistentReadVersion", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getConsistentReadVersion", reinterpret_cast<unsigned long>(this), 3);

	}
															#line 7212 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	SpanContext parentSpan;
															#line 7212 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	DatabaseContext* cx;
															#line 7212 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	uint32_t transactionCount;
															#line 7212 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	TransactionPriority priority;
															#line 7212 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	uint32_t flags;
															#line 7212 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	TransactionTagMap<uint32_t> tags;
															#line 7212 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Optional<UID> debugID;
															#line 7219 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Span span;
															#line 7226 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetReadVersionRequest req;
															#line 7233 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Future<Void> onProxiesChanged;
															#line 32705 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via getConsistentReadVersion()
															#line 7212 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetConsistentReadVersionActor final : public Actor<GetReadVersionReply>, public ActorCallback< GetConsistentReadVersionActor, 0, Void >, public ActorCallback< GetConsistentReadVersionActor, 1, GetReadVersionReply >, public ActorCallback< GetConsistentReadVersionActor, 2, Void >, public ActorCallback< GetConsistentReadVersionActor, 3, Void >, public FastAllocated<GetConsistentReadVersionActor>, public GetConsistentReadVersionActorState<GetConsistentReadVersionActor> {
															#line 32710 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<GetConsistentReadVersionActor>::operator new;
	using FastAllocated<GetConsistentReadVersionActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<GetReadVersionReply>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< GetConsistentReadVersionActor, 0, Void >;
friend struct ActorCallback< GetConsistentReadVersionActor, 1, GetReadVersionReply >;
friend struct ActorCallback< GetConsistentReadVersionActor, 2, Void >;
friend struct ActorCallback< GetConsistentReadVersionActor, 3, Void >;
															#line 7212 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetConsistentReadVersionActor(SpanContext const& parentSpan,DatabaseContext* const& cx,uint32_t const& transactionCount,TransactionPriority const& priority,uint32_t const& flags,TransactionTagMap<uint32_t> const& tags,Optional<UID> const& debugID) 
															#line 32724 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<GetReadVersionReply>(),
		   GetConsistentReadVersionActorState<GetConsistentReadVersionActor>(parentSpan, cx, transactionCount, priority, flags, tags, debugID)
	{
		fdb_probe_actor_enter("getConsistentReadVersion", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("getConsistentReadVersion");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("getConsistentReadVersion", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< GetConsistentReadVersionActor, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< GetConsistentReadVersionActor, 2, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< GetConsistentReadVersionActor, 3, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 7212 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<GetReadVersionReply> getConsistentReadVersion( SpanContext const& parentSpan, DatabaseContext* const& cx, uint32_t const& transactionCount, TransactionPriority const& priority, uint32_t const& flags, TransactionTagMap<uint32_t> const& tags, Optional<UID> const& debugID ) {
															#line 7212 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<GetReadVersionReply>(new GetConsistentReadVersionActor(parentSpan, cx, transactionCount, priority, flags, tags, debugID));
															#line 32754 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 7295 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

															#line 32759 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via readVersionBatcher()
															#line 7296 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class ReadVersionBatcherActor>
															#line 7296 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class ReadVersionBatcherActorState {
															#line 32766 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 7296 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	ReadVersionBatcherActorState(DatabaseContext* const& cx,FutureStream<DatabaseContext::VersionRequest> const& versionStream,TransactionPriority const& priority,uint32_t const& flags) 
															#line 7296 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 7296 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : cx(cx),
															#line 7296 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   versionStream(versionStream),
															#line 7296 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   priority(priority),
															#line 7296 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   flags(flags),
															#line 7300 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   requests(),
															#line 7301 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   addActor(),
															#line 7302 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   collection(actorCollection(addActor.getFuture())),
															#line 7303 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   timeout(),
															#line 7304 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   debugID(),
															#line 7305 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   send_batch(),
															#line 7306 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   batchSizeDist(Histogram::getHistogram( "GrvBatcher"_sr, "ClientGrvBatchSize"_sr, Histogram::Unit::countLinear, 0, CLIENT_KNOBS->MAX_BATCH_SIZE * 2)),
															#line 7308 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   batchIntervalDist(Histogram::getHistogram("GrvBatcher"_sr, "ClientGrvBatchInterval"_sr, Histogram::Unit::milliseconds, 0, CLIENT_KNOBS->GRV_BATCH_TIMEOUT * 1000000 * 2)),
															#line 7314 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   grvReplyLatencyDist(Histogram::getHistogram("GrvBatcher"_sr, "ClientGrvReplyLatency"_sr, Histogram::Unit::milliseconds)),
															#line 7316 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   lastRequestTime(now()),
															#line 7318 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   tags(),
															#line 7321 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   replyTimes(),
															#line 7322 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   batchTime(0),
															#line 7323 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   span("NAPI:readVersionBatcher"_loc)
															#line 32807 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("readVersionBatcher", reinterpret_cast<unsigned long>(this));

	}
	~ReadVersionBatcherActorState() 
	{
		fdb_probe_actor_destroy("readVersionBatcher", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 7324 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			;
															#line 32822 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~ReadVersionBatcherActorState();
		static_cast<ReadVersionBatcherActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
															#line 7325 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		send_batch = false;
															#line 7327 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		FutureStream<DatabaseContext::VersionRequest> __when_expr_0 = versionStream;
															#line 7326 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<ReadVersionBatcherActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 32856 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1when1(__when_expr_0.pop(), loopDepth); };
															#line 7347 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_1 = timeout.isValid() ? timeout : Never();
															#line 32860 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1when2(__when_expr_1.get(), loopDepth); };
															#line 7352 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		FutureStream<double> __when_expr_2 = replyTimes.getFuture();
															#line 32864 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1when3(__when_expr_2.pop(), loopDepth); };
															#line 7357 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_3 = collection;
															#line 32868 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch1(__when_expr_3.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1when4(__when_expr_3.get(), loopDepth); };
		static_cast<ReadVersionBatcherActor*>(this)->actor_wait_state = 1;
															#line 7327 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_0.addCallbackAndClear(static_cast<ActorSingleCallback< ReadVersionBatcherActor, 0, DatabaseContext::VersionRequest >*>(static_cast<ReadVersionBatcherActor*>(this)));
															#line 7347 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< ReadVersionBatcherActor, 1, Void >*>(static_cast<ReadVersionBatcherActor*>(this)));
															#line 7352 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorSingleCallback< ReadVersionBatcherActor, 2, double >*>(static_cast<ReadVersionBatcherActor*>(this)));
															#line 7357 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< ReadVersionBatcherActor, 3, Void >*>(static_cast<ReadVersionBatcherActor*>(this)));
															#line 32879 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
															#line 7359 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (send_batch)
															#line 32888 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 7360 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			int count = requests.size();
															#line 7361 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ASSERT(count);
															#line 7363 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			batchSizeDist->sampleRecordCounter(count);
															#line 7364 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			auto requestTime = now();
															#line 7365 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			batchIntervalDist->sampleSeconds(requestTime - lastRequestTime);
															#line 7366 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			lastRequestTime = requestTime;
															#line 7369 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			Promise<GetReadVersionReply> GRVReply;
															#line 7370 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			requests.push_back(GRVReply);
															#line 7371 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			addActor.send(ready(timeReply(GRVReply.getFuture(), replyTimes)));
															#line 7373 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			Future<Void> batch = incrementalBroadcastWithError( getConsistentReadVersion(span.context, cx, count, priority, flags, std::move(tags), std::move(debugID)), std::move(requests), CLIENT_KNOBS->BROADCAST_BATCH_SIZE);
															#line 7378 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			span = Span("NAPI:readVersionBatcher"_loc);
															#line 7379 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tags.clear();
															#line 7380 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			debugID = Optional<UID>();
															#line 7381 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			requests.clear();
															#line 7382 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			addActor.send(batch);
															#line 7383 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			timeout = Future<Void>();
															#line 32922 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1when1(DatabaseContext::VersionRequest const& req,int loopDepth) 
	{
															#line 7328 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (req.debugID.present())
															#line 32932 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 7329 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!debugID.present())
															#line 32936 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 7330 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				debugID = nondeterministicRandom()->randomUniqueID();
															#line 32940 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 7332 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			g_traceBatch.addAttach("TransactionAttachID", req.debugID.get().first(), debugID.get().first());
															#line 32944 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 7334 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		span.addLink(req.spanContext);
															#line 7335 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		requests.push_back(req.reply);
															#line 7336 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for( auto tag : req.tags ) {
															#line 7337 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			++tags[tag];
															#line 32954 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 7340 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (requests.size() == CLIENT_KNOBS->MAX_BATCH_SIZE)
															#line 32958 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 7341 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			send_batch = true;
															#line 7342 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			++cx->transactionGrvFullBatches;
															#line 32964 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
		else
		{
															#line 7343 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!timeout.isValid())
															#line 32970 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 7344 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				timeout = delay(batchTime, TaskPriority::GetConsistentReadVersion);
															#line 32974 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
		}
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(DatabaseContext::VersionRequest && req,int loopDepth) 
	{
															#line 7328 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (req.debugID.present())
															#line 32985 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 7329 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!debugID.present())
															#line 32989 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 7330 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				debugID = nondeterministicRandom()->randomUniqueID();
															#line 32993 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 7332 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			g_traceBatch.addAttach("TransactionAttachID", req.debugID.get().first(), debugID.get().first());
															#line 32997 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 7334 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		span.addLink(req.spanContext);
															#line 7335 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		requests.push_back(req.reply);
															#line 7336 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for( auto tag : req.tags ) {
															#line 7337 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			++tags[tag];
															#line 33007 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 7340 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (requests.size() == CLIENT_KNOBS->MAX_BATCH_SIZE)
															#line 33011 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 7341 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			send_batch = true;
															#line 7342 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			++cx->transactionGrvFullBatches;
															#line 33017 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
		else
		{
															#line 7343 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!timeout.isValid())
															#line 33023 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 7344 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				timeout = delay(batchTime, TaskPriority::GetConsistentReadVersion);
															#line 33027 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
		}
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when2(Void const& _,int loopDepth) 
	{
															#line 7348 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		send_batch = true;
															#line 7349 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		++cx->transactionGrvTimedOutBatches;
															#line 33040 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when2(Void && _,int loopDepth) 
	{
															#line 7348 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		send_batch = true;
															#line 7349 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		++cx->transactionGrvTimedOutBatches;
															#line 33051 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when3(double const& reply_latency,int loopDepth) 
	{
															#line 7353 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		double target_latency = reply_latency * 0.5;
															#line 7354 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		batchTime = std::min(0.1 * target_latency + 0.9 * batchTime, CLIENT_KNOBS->GRV_BATCH_TIMEOUT);
															#line 7355 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		grvReplyLatencyDist->sampleSeconds(reply_latency);
															#line 33064 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when3(double && reply_latency,int loopDepth) 
	{
															#line 7353 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		double target_latency = reply_latency * 0.5;
															#line 7354 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		batchTime = std::min(0.1 * target_latency + 0.9 * batchTime, CLIENT_KNOBS->GRV_BATCH_TIMEOUT);
															#line 7355 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		grvReplyLatencyDist->sampleSeconds(reply_latency);
															#line 33077 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when4(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when4(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<ReadVersionBatcherActor*>(this)->actor_wait_state > 0) static_cast<ReadVersionBatcherActor*>(this)->actor_wait_state = 0;
		static_cast<ReadVersionBatcherActor*>(this)->ActorSingleCallback< ReadVersionBatcherActor, 0, DatabaseContext::VersionRequest >::remove();
		static_cast<ReadVersionBatcherActor*>(this)->ActorCallback< ReadVersionBatcherActor, 1, Void >::remove();
		static_cast<ReadVersionBatcherActor*>(this)->ActorSingleCallback< ReadVersionBatcherActor, 2, double >::remove();
		static_cast<ReadVersionBatcherActor*>(this)->ActorCallback< ReadVersionBatcherActor, 3, Void >::remove();

	}
	void a_callback_fire(ActorSingleCallback< ReadVersionBatcherActor, 0, DatabaseContext::VersionRequest >*,DatabaseContext::VersionRequest const& value) 
	{
		fdb_probe_actor_enter("readVersionBatcher", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("readVersionBatcher", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorSingleCallback< ReadVersionBatcherActor, 0, DatabaseContext::VersionRequest >*,DatabaseContext::VersionRequest && value) 
	{
		fdb_probe_actor_enter("readVersionBatcher", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("readVersionBatcher", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorSingleCallback< ReadVersionBatcherActor, 0, DatabaseContext::VersionRequest >*,Error err) 
	{
		fdb_probe_actor_enter("readVersionBatcher", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("readVersionBatcher", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< ReadVersionBatcherActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("readVersionBatcher", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose1();
		try {
			a_body1loopBody1when2(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("readVersionBatcher", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< ReadVersionBatcherActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("readVersionBatcher", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose1();
		try {
			a_body1loopBody1when2(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("readVersionBatcher", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< ReadVersionBatcherActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("readVersionBatcher", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("readVersionBatcher", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorSingleCallback< ReadVersionBatcherActor, 2, double >*,double const& value) 
	{
		fdb_probe_actor_enter("readVersionBatcher", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose1();
		try {
			a_body1loopBody1when3(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("readVersionBatcher", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorSingleCallback< ReadVersionBatcherActor, 2, double >*,double && value) 
	{
		fdb_probe_actor_enter("readVersionBatcher", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose1();
		try {
			a_body1loopBody1when3(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("readVersionBatcher", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorSingleCallback< ReadVersionBatcherActor, 2, double >*,Error err) 
	{
		fdb_probe_actor_enter("readVersionBatcher", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("readVersionBatcher", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< ReadVersionBatcherActor, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("readVersionBatcher", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose1();
		try {
			a_body1loopBody1when4(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("readVersionBatcher", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< ReadVersionBatcherActor, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("readVersionBatcher", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose1();
		try {
			a_body1loopBody1when4(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("readVersionBatcher", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< ReadVersionBatcherActor, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("readVersionBatcher", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("readVersionBatcher", reinterpret_cast<unsigned long>(this), 3);

	}
															#line 7296 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	DatabaseContext* cx;
															#line 7296 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	FutureStream<DatabaseContext::VersionRequest> versionStream;
															#line 7296 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	TransactionPriority priority;
															#line 7296 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	uint32_t flags;
															#line 7300 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	std::vector<Promise<GetReadVersionReply>> requests;
															#line 7301 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	PromiseStream<Future<Void>> addActor;
															#line 7302 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Future<Void> collection;
															#line 7303 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Future<Void> timeout;
															#line 7304 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Optional<UID> debugID;
															#line 7305 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	bool send_batch;
															#line 7306 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<Histogram> batchSizeDist;
															#line 7308 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<Histogram> batchIntervalDist;
															#line 7314 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<Histogram> grvReplyLatencyDist;
															#line 7316 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	double lastRequestTime;
															#line 7318 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	TransactionTagMap<uint32_t> tags;
															#line 7321 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	PromiseStream<double> replyTimes;
															#line 7322 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	double batchTime;
															#line 7323 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Span span;
															#line 33319 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via readVersionBatcher()
															#line 7296 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class ReadVersionBatcherActor final : public Actor<Void>, public ActorSingleCallback< ReadVersionBatcherActor, 0, DatabaseContext::VersionRequest >, public ActorCallback< ReadVersionBatcherActor, 1, Void >, public ActorSingleCallback< ReadVersionBatcherActor, 2, double >, public ActorCallback< ReadVersionBatcherActor, 3, Void >, public FastAllocated<ReadVersionBatcherActor>, public ReadVersionBatcherActorState<ReadVersionBatcherActor> {
															#line 33324 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<ReadVersionBatcherActor>::operator new;
	using FastAllocated<ReadVersionBatcherActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorSingleCallback< ReadVersionBatcherActor, 0, DatabaseContext::VersionRequest >;
friend struct ActorCallback< ReadVersionBatcherActor, 1, Void >;
friend struct ActorSingleCallback< ReadVersionBatcherActor, 2, double >;
friend struct ActorCallback< ReadVersionBatcherActor, 3, Void >;
															#line 7296 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	ReadVersionBatcherActor(DatabaseContext* const& cx,FutureStream<DatabaseContext::VersionRequest> const& versionStream,TransactionPriority const& priority,uint32_t const& flags) 
															#line 33338 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Void>(),
		   ReadVersionBatcherActorState<ReadVersionBatcherActor>(cx, versionStream, priority, flags)
	{
		fdb_probe_actor_enter("readVersionBatcher", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("readVersionBatcher");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("readVersionBatcher", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorSingleCallback< ReadVersionBatcherActor, 0, DatabaseContext::VersionRequest >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 7296 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<Void> readVersionBatcher( DatabaseContext* const& cx, FutureStream<DatabaseContext::VersionRequest> const& versionStream, TransactionPriority const& priority, uint32_t const& flags ) {
															#line 7296 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Void>(new ReadVersionBatcherActor(cx, versionStream, priority, flags));
															#line 33366 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 7387 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

															#line 33371 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via extractReadVersion()
															#line 7388 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class ExtractReadVersionActor>
															#line 7388 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class ExtractReadVersionActorState {
															#line 33378 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 7388 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	ExtractReadVersionActorState(Reference<TransactionState> const& trState,Location const& location,SpanContext const& spanContext,Future<GetReadVersionReply> const& f,Promise<Optional<Value>> const& metadataVersion) 
															#line 7388 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 7388 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : trState(trState),
															#line 7388 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   location(location),
															#line 7388 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   spanContext(spanContext),
															#line 7388 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   f(f),
															#line 7388 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   metadataVersion(metadataVersion),
															#line 7393 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   span(spanContext, location, trState->spanContext)
															#line 33395 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("extractReadVersion", reinterpret_cast<unsigned long>(this));

	}
	~ExtractReadVersionActorState() 
	{
		fdb_probe_actor_destroy("extractReadVersion", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 7394 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<GetReadVersionReply> __when_expr_0 = f;
															#line 7394 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<ExtractReadVersionActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 33412 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<ExtractReadVersionActor*>(this)->actor_wait_state = 1;
															#line 7394 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< ExtractReadVersionActor, 0, GetReadVersionReply >*>(static_cast<ExtractReadVersionActor*>(this)));
															#line 33417 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~ExtractReadVersionActorState();
		static_cast<ExtractReadVersionActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(GetReadVersionReply const& rep,int loopDepth) 
	{
															#line 7395 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		double replyTime = now();
															#line 7396 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		double latency = replyTime - trState->startTime;
															#line 7397 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		trState->cx->lastProxyRequestTime = trState->startTime;
															#line 7398 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		trState->cx->updateCachedReadVersion(trState->startTime, rep.version);
															#line 7399 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		trState->proxyTagThrottledDuration += rep.proxyTagThrottledDuration;
															#line 7400 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (rep.rkBatchThrottled)
															#line 33450 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 7401 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			trState->cx->lastRkBatchThrottleTime = replyTime;
															#line 33454 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 7403 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (rep.rkDefaultThrottled)
															#line 33458 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 7404 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			trState->cx->lastRkDefaultThrottleTime = replyTime;
															#line 33462 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 7406 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		trState->cx->GRVLatencies.addSample(latency);
															#line 7407 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (trState->trLogInfo)
															#line 33468 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 7408 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			trState->trLogInfo->addLog(FdbClientLogEvents::EventGetVersion_V3(trState->startTime, trState->cx->clientLocality.dcId(), latency, trState->options.priority, rep.version, trState->tenant().flatMapRef(&Tenant::name)));
															#line 33472 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 7414 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (rep.locked && !trState->options.lockAware)
															#line 33476 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 7415 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			return a_body1Catch1(database_locked(), loopDepth);
															#line 33480 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 7417 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		++trState->cx->transactionReadVersionsCompleted;
															#line 7418 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		switch (trState->options.priority) { case TransactionPriority::IMMEDIATE: ++trState->cx->transactionImmediateReadVersionsCompleted; break; case TransactionPriority::DEFAULT: ++trState->cx->transactionDefaultReadVersionsCompleted; break; case TransactionPriority::BATCH: ++trState->cx->transactionBatchReadVersionsCompleted; break; default: ASSERT(false); };
															#line 7432 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (trState->options.tags.size() != 0)
															#line 33488 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 7433 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			auto& priorityThrottledTags = trState->cx->throttledTags[trState->options.priority];
															#line 7434 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			for( auto& tag : trState->options.tags ) {
															#line 7435 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				auto itr = priorityThrottledTags.find(tag);
															#line 7436 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (itr != priorityThrottledTags.end())
															#line 33498 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 7437 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					if (itr->second.expired())
															#line 33502 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					{
															#line 7438 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
						priorityThrottledTags.erase(itr);
															#line 33506 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					}
					else
					{
															#line 7439 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
						if (itr->second.throttleDuration() > 0)
															#line 33512 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
						{
															#line 7440 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
							CODE_PROBE(true, "throttling transaction after getting read version");
															#line 7441 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
							++trState->cx->transactionReadVersionsThrottled;
															#line 7442 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
							return a_body1Catch1(tag_throttled(), loopDepth);
															#line 33520 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
						}
					}
				}
			}
															#line 7447 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			for( auto& tag : trState->options.tags ) {
															#line 7448 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				auto itr = priorityThrottledTags.find(tag);
															#line 7449 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (itr != priorityThrottledTags.end())
															#line 33531 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 7450 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					itr->second.addReleased(1);
															#line 33535 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
			}
		}
															#line 7455 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (rep.version > trState->cx->metadataVersionCache[trState->cx->mvCacheInsertLocation].first)
															#line 33541 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 7456 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			trState->cx->mvCacheInsertLocation = (trState->cx->mvCacheInsertLocation + 1) % trState->cx->metadataVersionCache.size();
															#line 7458 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			trState->cx->metadataVersionCache[trState->cx->mvCacheInsertLocation] = std::make_pair(rep.version, rep.metadataVersion);
															#line 33547 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 7462 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		metadataVersion.send(rep.metadataVersion);
															#line 7463 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (trState->cx->versionVectorCacheActive(rep.ssVersionVectorDelta))
															#line 33553 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 7464 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (trState->cx->isCurrentGrvProxy(rep.proxyId))
															#line 33557 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 7465 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				trState->cx->ssVersionVectorCache.applyDelta(rep.ssVersionVectorDelta);
															#line 33561 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
			else
			{
															#line 7467 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				trState->cx->ssVersionVectorCache.clear();
															#line 33567 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
		}
															#line 7470 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<ExtractReadVersionActor*>(this)->SAV<Version>::futures) { (void)(rep.version); this->~ExtractReadVersionActorState(); static_cast<ExtractReadVersionActor*>(this)->destroy(); return 0; }
															#line 33572 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<ExtractReadVersionActor*>(this)->SAV< Version >::value()) Version(rep.version);
		this->~ExtractReadVersionActorState();
		static_cast<ExtractReadVersionActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1(GetReadVersionReply && rep,int loopDepth) 
	{
															#line 7395 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		double replyTime = now();
															#line 7396 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		double latency = replyTime - trState->startTime;
															#line 7397 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		trState->cx->lastProxyRequestTime = trState->startTime;
															#line 7398 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		trState->cx->updateCachedReadVersion(trState->startTime, rep.version);
															#line 7399 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		trState->proxyTagThrottledDuration += rep.proxyTagThrottledDuration;
															#line 7400 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (rep.rkBatchThrottled)
															#line 33594 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 7401 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			trState->cx->lastRkBatchThrottleTime = replyTime;
															#line 33598 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 7403 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (rep.rkDefaultThrottled)
															#line 33602 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 7404 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			trState->cx->lastRkDefaultThrottleTime = replyTime;
															#line 33606 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 7406 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		trState->cx->GRVLatencies.addSample(latency);
															#line 7407 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (trState->trLogInfo)
															#line 33612 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 7408 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			trState->trLogInfo->addLog(FdbClientLogEvents::EventGetVersion_V3(trState->startTime, trState->cx->clientLocality.dcId(), latency, trState->options.priority, rep.version, trState->tenant().flatMapRef(&Tenant::name)));
															#line 33616 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 7414 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (rep.locked && !trState->options.lockAware)
															#line 33620 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 7415 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			return a_body1Catch1(database_locked(), loopDepth);
															#line 33624 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 7417 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		++trState->cx->transactionReadVersionsCompleted;
															#line 7418 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		switch (trState->options.priority) { case TransactionPriority::IMMEDIATE: ++trState->cx->transactionImmediateReadVersionsCompleted; break; case TransactionPriority::DEFAULT: ++trState->cx->transactionDefaultReadVersionsCompleted; break; case TransactionPriority::BATCH: ++trState->cx->transactionBatchReadVersionsCompleted; break; default: ASSERT(false); };
															#line 7432 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (trState->options.tags.size() != 0)
															#line 33632 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 7433 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			auto& priorityThrottledTags = trState->cx->throttledTags[trState->options.priority];
															#line 7434 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			for( auto& tag : trState->options.tags ) {
															#line 7435 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				auto itr = priorityThrottledTags.find(tag);
															#line 7436 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (itr != priorityThrottledTags.end())
															#line 33642 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 7437 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					if (itr->second.expired())
															#line 33646 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					{
															#line 7438 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
						priorityThrottledTags.erase(itr);
															#line 33650 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					}
					else
					{
															#line 7439 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
						if (itr->second.throttleDuration() > 0)
															#line 33656 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
						{
															#line 7440 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
							CODE_PROBE(true, "throttling transaction after getting read version");
															#line 7441 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
							++trState->cx->transactionReadVersionsThrottled;
															#line 7442 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
							return a_body1Catch1(tag_throttled(), loopDepth);
															#line 33664 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
						}
					}
				}
			}
															#line 7447 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			for( auto& tag : trState->options.tags ) {
															#line 7448 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				auto itr = priorityThrottledTags.find(tag);
															#line 7449 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (itr != priorityThrottledTags.end())
															#line 33675 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 7450 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					itr->second.addReleased(1);
															#line 33679 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
			}
		}
															#line 7455 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (rep.version > trState->cx->metadataVersionCache[trState->cx->mvCacheInsertLocation].first)
															#line 33685 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 7456 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			trState->cx->mvCacheInsertLocation = (trState->cx->mvCacheInsertLocation + 1) % trState->cx->metadataVersionCache.size();
															#line 7458 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			trState->cx->metadataVersionCache[trState->cx->mvCacheInsertLocation] = std::make_pair(rep.version, rep.metadataVersion);
															#line 33691 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 7462 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		metadataVersion.send(rep.metadataVersion);
															#line 7463 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (trState->cx->versionVectorCacheActive(rep.ssVersionVectorDelta))
															#line 33697 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 7464 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (trState->cx->isCurrentGrvProxy(rep.proxyId))
															#line 33701 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 7465 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				trState->cx->ssVersionVectorCache.applyDelta(rep.ssVersionVectorDelta);
															#line 33705 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
			else
			{
															#line 7467 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				trState->cx->ssVersionVectorCache.clear();
															#line 33711 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
		}
															#line 7470 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<ExtractReadVersionActor*>(this)->SAV<Version>::futures) { (void)(rep.version); this->~ExtractReadVersionActorState(); static_cast<ExtractReadVersionActor*>(this)->destroy(); return 0; }
															#line 33716 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<ExtractReadVersionActor*>(this)->SAV< Version >::value()) Version(rep.version);
		this->~ExtractReadVersionActorState();
		static_cast<ExtractReadVersionActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1when1(GetReadVersionReply const& rep,int loopDepth) 
	{
		loopDepth = a_body1cont1(rep, loopDepth);

		return loopDepth;
	}
	int a_body1when1(GetReadVersionReply && rep,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(rep), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<ExtractReadVersionActor*>(this)->actor_wait_state > 0) static_cast<ExtractReadVersionActor*>(this)->actor_wait_state = 0;
		static_cast<ExtractReadVersionActor*>(this)->ActorCallback< ExtractReadVersionActor, 0, GetReadVersionReply >::remove();

	}
	void a_callback_fire(ActorCallback< ExtractReadVersionActor, 0, GetReadVersionReply >*,GetReadVersionReply const& value) 
	{
		fdb_probe_actor_enter("extractReadVersion", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("extractReadVersion", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< ExtractReadVersionActor, 0, GetReadVersionReply >*,GetReadVersionReply && value) 
	{
		fdb_probe_actor_enter("extractReadVersion", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("extractReadVersion", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< ExtractReadVersionActor, 0, GetReadVersionReply >*,Error err) 
	{
		fdb_probe_actor_enter("extractReadVersion", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("extractReadVersion", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 7388 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<TransactionState> trState;
															#line 7388 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Location location;
															#line 7388 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	SpanContext spanContext;
															#line 7388 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Future<GetReadVersionReply> f;
															#line 7388 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Promise<Optional<Value>> metadataVersion;
															#line 7393 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Span span;
															#line 33799 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via extractReadVersion()
															#line 7388 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class ExtractReadVersionActor final : public Actor<Version>, public ActorCallback< ExtractReadVersionActor, 0, GetReadVersionReply >, public FastAllocated<ExtractReadVersionActor>, public ExtractReadVersionActorState<ExtractReadVersionActor> {
															#line 33804 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<ExtractReadVersionActor>::operator new;
	using FastAllocated<ExtractReadVersionActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Version>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< ExtractReadVersionActor, 0, GetReadVersionReply >;
															#line 7388 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	ExtractReadVersionActor(Reference<TransactionState> const& trState,Location const& location,SpanContext const& spanContext,Future<GetReadVersionReply> const& f,Promise<Optional<Value>> const& metadataVersion) 
															#line 33815 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Version>(),
		   ExtractReadVersionActorState<ExtractReadVersionActor>(trState, location, spanContext, f, metadataVersion)
	{
		fdb_probe_actor_enter("extractReadVersion", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("extractReadVersion");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("extractReadVersion", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< ExtractReadVersionActor, 0, GetReadVersionReply >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 7388 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<Version> extractReadVersion( Reference<TransactionState> const& trState, Location const& location, SpanContext const& spanContext, Future<GetReadVersionReply> const& f, Promise<Optional<Value>> const& metadataVersion ) {
															#line 7388 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Version>(new ExtractReadVersionActor(trState, location, spanContext, f, metadataVersion));
															#line 33843 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 7472 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

bool rkThrottlingCooledDown(DatabaseContext* cx, TransactionPriority priority) {
	if (priority == TransactionPriority::IMMEDIATE) {
		return true;
	} else if (priority == TransactionPriority::BATCH) {
		if (cx->lastRkBatchThrottleTime == 0.0) {
			return true;
		}
		return (now() - cx->lastRkBatchThrottleTime > CLIENT_KNOBS->GRV_CACHE_RK_COOLDOWN);
	} else if (priority == TransactionPriority::DEFAULT) {
		if (cx->lastRkDefaultThrottleTime == 0.0) {
			return true;
		}
		return (now() - cx->lastRkDefaultThrottleTime > CLIENT_KNOBS->GRV_CACHE_RK_COOLDOWN);
	}
	return false;
}

Future<Version> TransactionState::getReadVersion(uint32_t flags) {
	ASSERT(!readVersionFuture.isValid());

	if (!CLIENT_KNOBS->FORCE_GRV_CACHE_OFF && !options.skipGrvCache &&
	    (deterministicRandom()->random01() <= CLIENT_KNOBS->DEBUG_USE_GRV_CACHE_CHANCE || options.useGrvCache) &&
	    rkThrottlingCooledDown(cx.getPtr(), options.priority)) {
		// Upon our first request to use cached RVs, start the background updater
		if (!cx->grvUpdateHandler.isValid()) {
			cx->grvUpdateHandler = backgroundGrvUpdater(cx.getPtr());
		}
		Version rv = cx->getCachedReadVersion();
		double lastTime = cx->getLastGrvTime();
		double requestTime = now();
		if (requestTime - lastTime <= CLIENT_KNOBS->MAX_VERSION_CACHE_LAG && rv != Version(0)) {
			ASSERT(!debug_checkVersionTime(rv, requestTime, "CheckStaleness"));
			return rv;
		} // else go through regular GRV path
	}
	++cx->transactionReadVersions;
	flags |= options.getReadVersionFlags;
	switch (options.priority) {
	case TransactionPriority::IMMEDIATE:
		flags |= GetReadVersionRequest::PRIORITY_SYSTEM_IMMEDIATE;
		++cx->transactionImmediateReadVersions;
		break;
	case TransactionPriority::DEFAULT:
		flags |= GetReadVersionRequest::PRIORITY_DEFAULT;
		++cx->transactionDefaultReadVersions;
		break;
	case TransactionPriority::BATCH:
		flags |= GetReadVersionRequest::PRIORITY_BATCH;
		++cx->transactionBatchReadVersions;
		break;
	default:
		ASSERT(false);
	}

	if (options.tags.size() != 0) {
		double maxThrottleDelay = 0.0;
		bool canRecheck = false;

		auto& priorityThrottledTags = cx->throttledTags[options.priority];
		for (auto& tag : options.tags) {
			auto itr = priorityThrottledTags.find(tag);
			if (itr != priorityThrottledTags.end()) {
				if (!itr->second.expired()) {
					maxThrottleDelay = std::max(maxThrottleDelay, itr->second.throttleDuration());
					canRecheck = itr->second.canRecheck();
				} else {
					priorityThrottledTags.erase(itr);
				}
			}
		}

		if (maxThrottleDelay > 0.0 && !canRecheck) { // TODO: allow delaying?
			CODE_PROBE(true, "Throttling tag before GRV request");
			++cx->transactionReadVersionsThrottled;
			return tag_throttled();
		} else {
			CODE_PROBE(maxThrottleDelay > 0.0, "Rechecking throttle");
		}

		for (auto& tag : options.tags) {
			auto itr = priorityThrottledTags.find(tag);
			if (itr != priorityThrottledTags.end()) {
				itr->second.updateChecked();
			}
		}
	}

	auto& batcher = cx->versionBatcher[flags];
	if (!batcher.actor.isValid()) {
		batcher.actor = readVersionBatcher(cx.getPtr(), batcher.stream.getFuture(), options.priority, flags);
	}

	Location location = "NAPI:getReadVersion"_loc;
	SpanContext derivedSpanContext = generateSpanID(cx->transactionTracingSample, spanContext);
	Optional<UID> versionDebugID = readOptions.present() ? readOptions.get().debugID : Optional<UID>();
	auto const req = DatabaseContext::VersionRequest(derivedSpanContext, options.tags, versionDebugID);
	batcher.stream.send(req);
	startTime = now();
	return extractReadVersion(
	    Reference<TransactionState>::addRef(this), location, spanContext, req.reply.getFuture(), metadataVersion);
}

Optional<Version> Transaction::getCachedReadVersion() const {
	if (trState->readVersionFuture.canGet()) {
		return trState->readVersion();
	} else {
		return Optional<Version>();
	}
}

double Transaction::getTagThrottledDuration() const {
	return trState->proxyTagThrottledDuration;
}

Future<Standalone<StringRef>> Transaction::getVersionstamp() {
	if (committing.isValid()) {
		return transaction_invalid_version();
	}
	return trState->versionstampPromise.getFuture();
}

// Gets the protocol version reported by a coordinator via the protocol info interface
															#line 33970 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via getCoordinatorProtocol()
															#line 7595 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class GetCoordinatorProtocolActor>
															#line 7595 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetCoordinatorProtocolActorState {
															#line 33977 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 7595 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetCoordinatorProtocolActorState(NetworkAddress const& coordinatorAddress) 
															#line 7595 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 7595 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : coordinatorAddress(coordinatorAddress)
															#line 33984 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("getCoordinatorProtocol", reinterpret_cast<unsigned long>(this));

	}
	~GetCoordinatorProtocolActorState() 
	{
		fdb_probe_actor_destroy("getCoordinatorProtocol", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 7596 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			RequestStream<ProtocolInfoRequest> requestStream( Endpoint::wellKnown({ coordinatorAddress }, WLTOKEN_PROTOCOL_INFO));
															#line 7598 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<ProtocolInfoReply> __when_expr_0 = retryBrokenPromise(requestStream, ProtocolInfoRequest{});
															#line 7598 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<GetCoordinatorProtocolActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 34003 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<GetCoordinatorProtocolActor*>(this)->actor_wait_state = 1;
															#line 7598 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< GetCoordinatorProtocolActor, 0, ProtocolInfoReply >*>(static_cast<GetCoordinatorProtocolActor*>(this)));
															#line 34008 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~GetCoordinatorProtocolActorState();
		static_cast<GetCoordinatorProtocolActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(ProtocolInfoReply const& reply,int loopDepth) 
	{
															#line 7599 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<GetCoordinatorProtocolActor*>(this)->SAV<ProtocolVersion>::futures) { (void)(reply.version); this->~GetCoordinatorProtocolActorState(); static_cast<GetCoordinatorProtocolActor*>(this)->destroy(); return 0; }
															#line 34031 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<GetCoordinatorProtocolActor*>(this)->SAV< ProtocolVersion >::value()) ProtocolVersion(reply.version);
		this->~GetCoordinatorProtocolActorState();
		static_cast<GetCoordinatorProtocolActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1(ProtocolInfoReply && reply,int loopDepth) 
	{
															#line 7599 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<GetCoordinatorProtocolActor*>(this)->SAV<ProtocolVersion>::futures) { (void)(reply.version); this->~GetCoordinatorProtocolActorState(); static_cast<GetCoordinatorProtocolActor*>(this)->destroy(); return 0; }
															#line 34043 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<GetCoordinatorProtocolActor*>(this)->SAV< ProtocolVersion >::value()) ProtocolVersion(reply.version);
		this->~GetCoordinatorProtocolActorState();
		static_cast<GetCoordinatorProtocolActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1when1(ProtocolInfoReply const& reply,int loopDepth) 
	{
		loopDepth = a_body1cont1(reply, loopDepth);

		return loopDepth;
	}
	int a_body1when1(ProtocolInfoReply && reply,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(reply), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<GetCoordinatorProtocolActor*>(this)->actor_wait_state > 0) static_cast<GetCoordinatorProtocolActor*>(this)->actor_wait_state = 0;
		static_cast<GetCoordinatorProtocolActor*>(this)->ActorCallback< GetCoordinatorProtocolActor, 0, ProtocolInfoReply >::remove();

	}
	void a_callback_fire(ActorCallback< GetCoordinatorProtocolActor, 0, ProtocolInfoReply >*,ProtocolInfoReply const& value) 
	{
		fdb_probe_actor_enter("getCoordinatorProtocol", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getCoordinatorProtocol", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< GetCoordinatorProtocolActor, 0, ProtocolInfoReply >*,ProtocolInfoReply && value) 
	{
		fdb_probe_actor_enter("getCoordinatorProtocol", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getCoordinatorProtocol", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< GetCoordinatorProtocolActor, 0, ProtocolInfoReply >*,Error err) 
	{
		fdb_probe_actor_enter("getCoordinatorProtocol", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getCoordinatorProtocol", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 7595 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	NetworkAddress coordinatorAddress;
															#line 34116 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via getCoordinatorProtocol()
															#line 7595 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetCoordinatorProtocolActor final : public Actor<ProtocolVersion>, public ActorCallback< GetCoordinatorProtocolActor, 0, ProtocolInfoReply >, public FastAllocated<GetCoordinatorProtocolActor>, public GetCoordinatorProtocolActorState<GetCoordinatorProtocolActor> {
															#line 34121 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<GetCoordinatorProtocolActor>::operator new;
	using FastAllocated<GetCoordinatorProtocolActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<ProtocolVersion>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< GetCoordinatorProtocolActor, 0, ProtocolInfoReply >;
															#line 7595 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetCoordinatorProtocolActor(NetworkAddress const& coordinatorAddress) 
															#line 34132 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<ProtocolVersion>(),
		   GetCoordinatorProtocolActorState<GetCoordinatorProtocolActor>(coordinatorAddress)
	{
		fdb_probe_actor_enter("getCoordinatorProtocol", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("getCoordinatorProtocol");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("getCoordinatorProtocol", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< GetCoordinatorProtocolActor, 0, ProtocolInfoReply >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 7595 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<ProtocolVersion> getCoordinatorProtocol( NetworkAddress const& coordinatorAddress ) {
															#line 7595 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<ProtocolVersion>(new GetCoordinatorProtocolActor(coordinatorAddress));
															#line 34160 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 7601 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

// Gets the protocol version reported by a coordinator in its connect packet
// If we are unable to get a version from the connect packet (e.g. because we lost connection with the peer), then this
// function will return with an unset result.
// If an expected version is given, this future won't return if the actual protocol version matches the expected version
															#line 34169 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via getCoordinatorProtocolFromConnectPacket()
															#line 7606 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class GetCoordinatorProtocolFromConnectPacketActor>
															#line 7606 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetCoordinatorProtocolFromConnectPacketActorState {
															#line 34176 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 7606 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetCoordinatorProtocolFromConnectPacketActorState(NetworkAddress const& coordinatorAddress,Optional<ProtocolVersion> const& expectedVersion) 
															#line 7606 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 7606 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : coordinatorAddress(coordinatorAddress),
															#line 7606 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   expectedVersion(expectedVersion),
															#line 7609 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   protocolVersion(FlowTransport::transport().getPeerProtocolAsyncVar(coordinatorAddress))
															#line 34187 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("getCoordinatorProtocolFromConnectPacket", reinterpret_cast<unsigned long>(this));

	}
	~GetCoordinatorProtocolFromConnectPacketActorState() 
	{
		fdb_probe_actor_destroy("getCoordinatorProtocolFromConnectPacket", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 7612 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!protocolVersion.present())
															#line 34202 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 7613 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				TraceEvent(SevWarnAlways, "GetCoordinatorProtocolPeerMissing").detail("Address", coordinatorAddress);
															#line 7614 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				StrictFuture<Void> __when_expr_0 = delay(FLOW_KNOBS->CONNECTION_MONITOR_TIMEOUT);
															#line 7614 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (static_cast<GetCoordinatorProtocolFromConnectPacketActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 34210 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
				static_cast<GetCoordinatorProtocolFromConnectPacketActor*>(this)->actor_wait_state = 1;
															#line 7614 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< GetCoordinatorProtocolFromConnectPacketActor, 0, Void >*>(static_cast<GetCoordinatorProtocolFromConnectPacketActor*>(this)));
															#line 34215 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				loopDepth = 0;
			}
			else
			{
				loopDepth = a_body1cont1(loopDepth);
			}
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~GetCoordinatorProtocolFromConnectPacketActorState();
		static_cast<GetCoordinatorProtocolFromConnectPacketActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 7618 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		;
															#line 34243 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont1loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1cont2(Void const& _,int loopDepth) 
	{
															#line 7615 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<GetCoordinatorProtocolFromConnectPacketActor*>(this)->SAV<Optional<ProtocolVersion>>::futures) { (void)(Optional<ProtocolVersion>()); this->~GetCoordinatorProtocolFromConnectPacketActorState(); static_cast<GetCoordinatorProtocolFromConnectPacketActor*>(this)->destroy(); return 0; }
															#line 34252 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<GetCoordinatorProtocolFromConnectPacketActor*>(this)->SAV< Optional<ProtocolVersion> >::value()) Optional<ProtocolVersion>(Optional<ProtocolVersion>());
		this->~GetCoordinatorProtocolFromConnectPacketActorState();
		static_cast<GetCoordinatorProtocolFromConnectPacketActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont2(Void && _,int loopDepth) 
	{
															#line 7615 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<GetCoordinatorProtocolFromConnectPacketActor*>(this)->SAV<Optional<ProtocolVersion>>::futures) { (void)(Optional<ProtocolVersion>()); this->~GetCoordinatorProtocolFromConnectPacketActorState(); static_cast<GetCoordinatorProtocolFromConnectPacketActor*>(this)->destroy(); return 0; }
															#line 34264 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<GetCoordinatorProtocolFromConnectPacketActor*>(this)->SAV< Optional<ProtocolVersion> >::value()) Optional<ProtocolVersion>(Optional<ProtocolVersion>());
		this->~GetCoordinatorProtocolFromConnectPacketActorState();
		static_cast<GetCoordinatorProtocolFromConnectPacketActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<GetCoordinatorProtocolFromConnectPacketActor*>(this)->actor_wait_state > 0) static_cast<GetCoordinatorProtocolFromConnectPacketActor*>(this)->actor_wait_state = 0;
		static_cast<GetCoordinatorProtocolFromConnectPacketActor*>(this)->ActorCallback< GetCoordinatorProtocolFromConnectPacketActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetCoordinatorProtocolFromConnectPacketActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getCoordinatorProtocolFromConnectPacket", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getCoordinatorProtocolFromConnectPacket", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< GetCoordinatorProtocolFromConnectPacketActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getCoordinatorProtocolFromConnectPacket", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getCoordinatorProtocolFromConnectPacket", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< GetCoordinatorProtocolFromConnectPacketActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getCoordinatorProtocolFromConnectPacket", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getCoordinatorProtocolFromConnectPacket", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1cont1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1(int loopDepth) 
	{
															#line 7619 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (protocolVersion.get()->get().present() && protocolVersion.get()->get() != expectedVersion)
															#line 34346 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 7620 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<GetCoordinatorProtocolFromConnectPacketActor*>(this)->SAV<Optional<ProtocolVersion>>::futures) { (void)(protocolVersion.get()->get()); this->~GetCoordinatorProtocolFromConnectPacketActorState(); static_cast<GetCoordinatorProtocolFromConnectPacketActor*>(this)->destroy(); return 0; }
															#line 34350 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<GetCoordinatorProtocolFromConnectPacketActor*>(this)->SAV< Optional<ProtocolVersion> >::value()) Optional<ProtocolVersion>(protocolVersion.get()->get());
			this->~GetCoordinatorProtocolFromConnectPacketActorState();
			static_cast<GetCoordinatorProtocolFromConnectPacketActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 7623 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		Future<Void> change = protocolVersion.get()->onChange();
															#line 7624 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!protocolVersion.get()->get().present())
															#line 34360 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 7626 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			change = timeout(change, FLOW_KNOBS->CONNECTION_MONITOR_TIMEOUT, Void());
															#line 34364 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 7629 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_1 = change;
															#line 7629 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<GetCoordinatorProtocolFromConnectPacketActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 34370 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), std::max(0, loopDepth - 1)); else return a_body1cont1loopBody1when1(__when_expr_1.get(), loopDepth); };
		static_cast<GetCoordinatorProtocolFromConnectPacketActor*>(this)->actor_wait_state = 2;
															#line 7629 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< GetCoordinatorProtocolFromConnectPacketActor, 1, Void >*>(static_cast<GetCoordinatorProtocolFromConnectPacketActor*>(this)));
															#line 34375 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1(Void const& _,int loopDepth) 
	{
															#line 7631 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!protocolVersion.get()->get().present())
															#line 34384 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 7632 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<GetCoordinatorProtocolFromConnectPacketActor*>(this)->SAV<Optional<ProtocolVersion>>::futures) { (void)(protocolVersion.get()->get()); this->~GetCoordinatorProtocolFromConnectPacketActorState(); static_cast<GetCoordinatorProtocolFromConnectPacketActor*>(this)->destroy(); return 0; }
															#line 34388 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<GetCoordinatorProtocolFromConnectPacketActor*>(this)->SAV< Optional<ProtocolVersion> >::value()) Optional<ProtocolVersion>(protocolVersion.get()->get());
			this->~GetCoordinatorProtocolFromConnectPacketActorState();
			static_cast<GetCoordinatorProtocolFromConnectPacketActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
		if (loopDepth == 0) return a_body1cont1loopHead1(0);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1(Void && _,int loopDepth) 
	{
															#line 7631 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!protocolVersion.get()->get().present())
															#line 34402 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 7632 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<GetCoordinatorProtocolFromConnectPacketActor*>(this)->SAV<Optional<ProtocolVersion>>::futures) { (void)(protocolVersion.get()->get()); this->~GetCoordinatorProtocolFromConnectPacketActorState(); static_cast<GetCoordinatorProtocolFromConnectPacketActor*>(this)->destroy(); return 0; }
															#line 34406 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<GetCoordinatorProtocolFromConnectPacketActor*>(this)->SAV< Optional<ProtocolVersion> >::value()) Optional<ProtocolVersion>(protocolVersion.get()->get());
			this->~GetCoordinatorProtocolFromConnectPacketActorState();
			static_cast<GetCoordinatorProtocolFromConnectPacketActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
		if (loopDepth == 0) return a_body1cont1loopHead1(0);

		return loopDepth;
	}
	int a_body1cont1loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<GetCoordinatorProtocolFromConnectPacketActor*>(this)->actor_wait_state > 0) static_cast<GetCoordinatorProtocolFromConnectPacketActor*>(this)->actor_wait_state = 0;
		static_cast<GetCoordinatorProtocolFromConnectPacketActor*>(this)->ActorCallback< GetCoordinatorProtocolFromConnectPacketActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetCoordinatorProtocolFromConnectPacketActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getCoordinatorProtocolFromConnectPacket", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getCoordinatorProtocolFromConnectPacket", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< GetCoordinatorProtocolFromConnectPacketActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getCoordinatorProtocolFromConnectPacket", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getCoordinatorProtocolFromConnectPacket", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< GetCoordinatorProtocolFromConnectPacketActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getCoordinatorProtocolFromConnectPacket", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getCoordinatorProtocolFromConnectPacket", reinterpret_cast<unsigned long>(this), 1);

	}
															#line 7606 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	NetworkAddress coordinatorAddress;
															#line 7606 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Optional<ProtocolVersion> expectedVersion;
															#line 7609 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Optional<Reference<AsyncVar<Optional<ProtocolVersion>> const>> protocolVersion;
															#line 34485 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via getCoordinatorProtocolFromConnectPacket()
															#line 7606 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetCoordinatorProtocolFromConnectPacketActor final : public Actor<Optional<ProtocolVersion>>, public ActorCallback< GetCoordinatorProtocolFromConnectPacketActor, 0, Void >, public ActorCallback< GetCoordinatorProtocolFromConnectPacketActor, 1, Void >, public FastAllocated<GetCoordinatorProtocolFromConnectPacketActor>, public GetCoordinatorProtocolFromConnectPacketActorState<GetCoordinatorProtocolFromConnectPacketActor> {
															#line 34490 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<GetCoordinatorProtocolFromConnectPacketActor>::operator new;
	using FastAllocated<GetCoordinatorProtocolFromConnectPacketActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Optional<ProtocolVersion>>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< GetCoordinatorProtocolFromConnectPacketActor, 0, Void >;
friend struct ActorCallback< GetCoordinatorProtocolFromConnectPacketActor, 1, Void >;
															#line 7606 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetCoordinatorProtocolFromConnectPacketActor(NetworkAddress const& coordinatorAddress,Optional<ProtocolVersion> const& expectedVersion) 
															#line 34502 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Optional<ProtocolVersion>>(),
		   GetCoordinatorProtocolFromConnectPacketActorState<GetCoordinatorProtocolFromConnectPacketActor>(coordinatorAddress, expectedVersion)
	{
		fdb_probe_actor_enter("getCoordinatorProtocolFromConnectPacket", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("getCoordinatorProtocolFromConnectPacket");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("getCoordinatorProtocolFromConnectPacket", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< GetCoordinatorProtocolFromConnectPacketActor, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< GetCoordinatorProtocolFromConnectPacketActor, 1, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 7606 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<Optional<ProtocolVersion>> getCoordinatorProtocolFromConnectPacket( NetworkAddress const& coordinatorAddress, Optional<ProtocolVersion> const& expectedVersion ) {
															#line 7606 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Optional<ProtocolVersion>>(new GetCoordinatorProtocolFromConnectPacketActor(coordinatorAddress, expectedVersion));
															#line 34531 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 7636 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

// Returns the protocol version reported by the given coordinator
// If an expected version is given, the future won't return until the protocol version is different than expected
															#line 34538 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via getClusterProtocolImpl()
															#line 7639 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class GetClusterProtocolImplActor>
															#line 7639 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetClusterProtocolImplActorState {
															#line 34545 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 7639 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetClusterProtocolImplActorState(Reference<AsyncVar<Optional<ClientLeaderRegInterface>> const> const& coordinator,Optional<ProtocolVersion> const& expectedVersion) 
															#line 7639 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 7639 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : coordinator(coordinator),
															#line 7639 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   expectedVersion(expectedVersion),
															#line 7642 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   needToConnect(true),
															#line 7643 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   protocolVersion(Never())
															#line 34558 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("getClusterProtocolImpl", reinterpret_cast<unsigned long>(this));

	}
	~GetClusterProtocolImplActorState() 
	{
		fdb_probe_actor_destroy("getClusterProtocolImpl", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 7645 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			;
															#line 34573 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~GetClusterProtocolImplActorState();
		static_cast<GetClusterProtocolImplActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
															#line 7646 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!coordinator->get().present())
															#line 34603 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 7647 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_0 = coordinator->onChange();
															#line 7647 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<GetClusterProtocolImplActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 34609 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
			static_cast<GetClusterProtocolImplActor*>(this)->actor_wait_state = 1;
															#line 7647 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< GetClusterProtocolImplActor, 0, Void >*>(static_cast<GetClusterProtocolImplActor*>(this)));
															#line 34614 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
															#line 7649 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			coordinatorAddress = NetworkAddress();
															#line 7650 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (coordinator->get().get().hostname.present())
															#line 34623 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 7651 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				h = coordinator->get().get().hostname.get();
															#line 7652 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				StrictFuture<Void> __when_expr_1 = store(coordinatorAddress, h.resolveWithRetry());
															#line 7652 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (static_cast<GetClusterProtocolImplActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 34631 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1when2(__when_expr_1.get(), loopDepth); };
				static_cast<GetClusterProtocolImplActor*>(this)->actor_wait_state = 2;
															#line 7652 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< GetClusterProtocolImplActor, 1, Void >*>(static_cast<GetClusterProtocolImplActor*>(this)));
															#line 34636 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				loopDepth = 0;
			}
			else
			{
															#line 7654 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				coordinatorAddress = coordinator->get().get().getLeader.getEndpoint().getPrimaryAddress();
															#line 34643 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				loopDepth = a_body1loopBody1cont3(loopDepth);
			}
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1cont2(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<GetClusterProtocolImplActor*>(this)->actor_wait_state > 0) static_cast<GetClusterProtocolImplActor*>(this)->actor_wait_state = 0;
		static_cast<GetClusterProtocolImplActor*>(this)->ActorCallback< GetClusterProtocolImplActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetClusterProtocolImplActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getClusterProtocolImpl", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getClusterProtocolImpl", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< GetClusterProtocolImplActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getClusterProtocolImpl", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getClusterProtocolImpl", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< GetClusterProtocolImplActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getClusterProtocolImpl", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getClusterProtocolImpl", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1cont3(int loopDepth) 
	{
															#line 7657 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (needToConnect)
															#line 34735 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 7660 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			protocolVersion = getCoordinatorProtocol(coordinatorAddress);
															#line 7661 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			needToConnect = false;
															#line 34741 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 7664 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_2 = coordinator->onChange();
															#line 7663 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<GetClusterProtocolImplActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 34747 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1cont3when1(__when_expr_2.get(), loopDepth); };
															#line 7668 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<ProtocolVersion> __when_expr_3 = protocolVersion;
															#line 34751 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch1(__when_expr_3.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1cont3when2(__when_expr_3.get(), loopDepth); };
															#line 7678 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Optional<ProtocolVersion>> __when_expr_4 = getCoordinatorProtocolFromConnectPacket(coordinatorAddress, expectedVersion);
															#line 34755 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1Catch1(__when_expr_4.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1cont3when3(__when_expr_4.get(), loopDepth); };
		static_cast<GetClusterProtocolImplActor*>(this)->actor_wait_state = 3;
															#line 7664 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< GetClusterProtocolImplActor, 2, Void >*>(static_cast<GetClusterProtocolImplActor*>(this)));
															#line 7668 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< GetClusterProtocolImplActor, 3, ProtocolVersion >*>(static_cast<GetClusterProtocolImplActor*>(this)));
															#line 7678 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< GetClusterProtocolImplActor, 4, Optional<ProtocolVersion> >*>(static_cast<GetClusterProtocolImplActor*>(this)));
															#line 34764 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont4(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont4(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when2(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont4(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when2(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont4(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<GetClusterProtocolImplActor*>(this)->actor_wait_state > 0) static_cast<GetClusterProtocolImplActor*>(this)->actor_wait_state = 0;
		static_cast<GetClusterProtocolImplActor*>(this)->ActorCallback< GetClusterProtocolImplActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetClusterProtocolImplActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getClusterProtocolImpl", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1when2(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getClusterProtocolImpl", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< GetClusterProtocolImplActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getClusterProtocolImpl", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1when2(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getClusterProtocolImpl", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< GetClusterProtocolImplActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getClusterProtocolImpl", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getClusterProtocolImpl", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1loopBody1cont6(int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont3when1(Void const& _,int loopDepth) 
	{
															#line 7665 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		needToConnect = true;
															#line 34854 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont6(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont3when1(Void && _,int loopDepth) 
	{
															#line 7665 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		needToConnect = true;
															#line 34863 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont6(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont3when2(ProtocolVersion const& pv,int loopDepth) 
	{
															#line 7669 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!expectedVersion.present() || expectedVersion.get() != pv)
															#line 34872 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 7670 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<GetClusterProtocolImplActor*>(this)->SAV<ProtocolVersion>::futures) { (void)(pv); this->~GetClusterProtocolImplActorState(); static_cast<GetClusterProtocolImplActor*>(this)->destroy(); return 0; }
															#line 34876 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<GetClusterProtocolImplActor*>(this)->SAV< ProtocolVersion >::value()) ProtocolVersion(pv);
			this->~GetClusterProtocolImplActorState();
			static_cast<GetClusterProtocolImplActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 7673 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		protocolVersion = Never();
															#line 34884 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont6(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont3when2(ProtocolVersion && pv,int loopDepth) 
	{
															#line 7669 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!expectedVersion.present() || expectedVersion.get() != pv)
															#line 34893 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 7670 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<GetClusterProtocolImplActor*>(this)->SAV<ProtocolVersion>::futures) { (void)(pv); this->~GetClusterProtocolImplActorState(); static_cast<GetClusterProtocolImplActor*>(this)->destroy(); return 0; }
															#line 34897 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<GetClusterProtocolImplActor*>(this)->SAV< ProtocolVersion >::value()) ProtocolVersion(pv);
			this->~GetClusterProtocolImplActorState();
			static_cast<GetClusterProtocolImplActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 7673 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		protocolVersion = Never();
															#line 34905 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont6(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont3when3(Optional<ProtocolVersion> const& pv,int loopDepth) 
	{
															#line 7680 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (pv.present())
															#line 34914 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 7681 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<GetClusterProtocolImplActor*>(this)->SAV<ProtocolVersion>::futures) { (void)(pv.get()); this->~GetClusterProtocolImplActorState(); static_cast<GetClusterProtocolImplActor*>(this)->destroy(); return 0; }
															#line 34918 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<GetClusterProtocolImplActor*>(this)->SAV< ProtocolVersion >::value()) ProtocolVersion(pv.get());
			this->~GetClusterProtocolImplActorState();
			static_cast<GetClusterProtocolImplActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
		else
		{
															#line 7683 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			needToConnect = true;
															#line 34928 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
		loopDepth = a_body1loopBody1cont6(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont3when3(Optional<ProtocolVersion> && pv,int loopDepth) 
	{
															#line 7680 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (pv.present())
															#line 34938 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 7681 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<GetClusterProtocolImplActor*>(this)->SAV<ProtocolVersion>::futures) { (void)(pv.get()); this->~GetClusterProtocolImplActorState(); static_cast<GetClusterProtocolImplActor*>(this)->destroy(); return 0; }
															#line 34942 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<GetClusterProtocolImplActor*>(this)->SAV< ProtocolVersion >::value()) ProtocolVersion(pv.get());
			this->~GetClusterProtocolImplActorState();
			static_cast<GetClusterProtocolImplActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
		else
		{
															#line 7683 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			needToConnect = true;
															#line 34952 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
		loopDepth = a_body1loopBody1cont6(loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<GetClusterProtocolImplActor*>(this)->actor_wait_state > 0) static_cast<GetClusterProtocolImplActor*>(this)->actor_wait_state = 0;
		static_cast<GetClusterProtocolImplActor*>(this)->ActorCallback< GetClusterProtocolImplActor, 2, Void >::remove();
		static_cast<GetClusterProtocolImplActor*>(this)->ActorCallback< GetClusterProtocolImplActor, 3, ProtocolVersion >::remove();
		static_cast<GetClusterProtocolImplActor*>(this)->ActorCallback< GetClusterProtocolImplActor, 4, Optional<ProtocolVersion> >::remove();

	}
	void a_callback_fire(ActorCallback< GetClusterProtocolImplActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getClusterProtocolImpl", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont3when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getClusterProtocolImpl", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< GetClusterProtocolImplActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getClusterProtocolImpl", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont3when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getClusterProtocolImpl", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< GetClusterProtocolImplActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getClusterProtocolImpl", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getClusterProtocolImpl", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< GetClusterProtocolImplActor, 3, ProtocolVersion >*,ProtocolVersion const& value) 
	{
		fdb_probe_actor_enter("getClusterProtocolImpl", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose3();
		try {
			a_body1loopBody1cont3when2(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getClusterProtocolImpl", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< GetClusterProtocolImplActor, 3, ProtocolVersion >*,ProtocolVersion && value) 
	{
		fdb_probe_actor_enter("getClusterProtocolImpl", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose3();
		try {
			a_body1loopBody1cont3when2(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getClusterProtocolImpl", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< GetClusterProtocolImplActor, 3, ProtocolVersion >*,Error err) 
	{
		fdb_probe_actor_enter("getClusterProtocolImpl", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getClusterProtocolImpl", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< GetClusterProtocolImplActor, 4, Optional<ProtocolVersion> >*,Optional<ProtocolVersion> const& value) 
	{
		fdb_probe_actor_enter("getClusterProtocolImpl", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose3();
		try {
			a_body1loopBody1cont3when3(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getClusterProtocolImpl", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_fire(ActorCallback< GetClusterProtocolImplActor, 4, Optional<ProtocolVersion> >*,Optional<ProtocolVersion> && value) 
	{
		fdb_probe_actor_enter("getClusterProtocolImpl", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose3();
		try {
			a_body1loopBody1cont3when3(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getClusterProtocolImpl", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_error(ActorCallback< GetClusterProtocolImplActor, 4, Optional<ProtocolVersion> >*,Error err) 
	{
		fdb_probe_actor_enter("getClusterProtocolImpl", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getClusterProtocolImpl", reinterpret_cast<unsigned long>(this), 4);

	}
															#line 7639 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<AsyncVar<Optional<ClientLeaderRegInterface>> const> coordinator;
															#line 7639 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Optional<ProtocolVersion> expectedVersion;
															#line 7642 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	bool needToConnect;
															#line 7643 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Future<ProtocolVersion> protocolVersion;
															#line 7649 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	NetworkAddress coordinatorAddress;
															#line 7651 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Hostname h;
															#line 35113 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via getClusterProtocolImpl()
															#line 7639 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetClusterProtocolImplActor final : public Actor<ProtocolVersion>, public ActorCallback< GetClusterProtocolImplActor, 0, Void >, public ActorCallback< GetClusterProtocolImplActor, 1, Void >, public ActorCallback< GetClusterProtocolImplActor, 2, Void >, public ActorCallback< GetClusterProtocolImplActor, 3, ProtocolVersion >, public ActorCallback< GetClusterProtocolImplActor, 4, Optional<ProtocolVersion> >, public FastAllocated<GetClusterProtocolImplActor>, public GetClusterProtocolImplActorState<GetClusterProtocolImplActor> {
															#line 35118 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<GetClusterProtocolImplActor>::operator new;
	using FastAllocated<GetClusterProtocolImplActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<ProtocolVersion>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< GetClusterProtocolImplActor, 0, Void >;
friend struct ActorCallback< GetClusterProtocolImplActor, 1, Void >;
friend struct ActorCallback< GetClusterProtocolImplActor, 2, Void >;
friend struct ActorCallback< GetClusterProtocolImplActor, 3, ProtocolVersion >;
friend struct ActorCallback< GetClusterProtocolImplActor, 4, Optional<ProtocolVersion> >;
															#line 7639 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetClusterProtocolImplActor(Reference<AsyncVar<Optional<ClientLeaderRegInterface>> const> const& coordinator,Optional<ProtocolVersion> const& expectedVersion) 
															#line 35133 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<ProtocolVersion>(),
		   GetClusterProtocolImplActorState<GetClusterProtocolImplActor>(coordinator, expectedVersion)
	{
		fdb_probe_actor_enter("getClusterProtocolImpl", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("getClusterProtocolImpl");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("getClusterProtocolImpl", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< GetClusterProtocolImplActor, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< GetClusterProtocolImplActor, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< GetClusterProtocolImplActor, 2, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 7639 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<ProtocolVersion> getClusterProtocolImpl( Reference<AsyncVar<Optional<ClientLeaderRegInterface>> const> const& coordinator, Optional<ProtocolVersion> const& expectedVersion ) {
															#line 7639 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<ProtocolVersion>(new GetClusterProtocolImplActor(coordinator, expectedVersion));
															#line 35163 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 7690 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

// Returns the protocol version reported by the coordinator this client is currently connected to
// If an expected version is given, the future won't return until the protocol version is different than expected
// Note: this will never return if the server is running a protocol from FDB 5.0 or older
Future<ProtocolVersion> DatabaseContext::getClusterProtocol(Optional<ProtocolVersion> expectedVersion) {
	return getClusterProtocolImpl(coordinator, expectedVersion);
}

double ClientTagThrottleData::throttleDuration() const {
	if (expiration <= now()) {
		return 0.0;
	}

	double capacity =
	    (smoothRate.smoothTotal() - smoothReleased.smoothRate()) * CLIENT_KNOBS->TAG_THROTTLE_SMOOTHING_WINDOW;

	if (capacity >= 1) {
		return 0.0;
	}

	if (tpsRate == 0) {
		return std::max(0.0, expiration - now());
	}

	return std::min(expiration - now(), capacity / tpsRate);
}

uint32_t Transaction::getSize() {
	auto s = tr.transaction.mutations.expectedSize() + tr.transaction.read_conflict_ranges.expectedSize() +
	         tr.transaction.write_conflict_ranges.expectedSize();
	return s;
}

Future<Void> Transaction::onError(Error const& e) {
	if (g_network->isSimulated() && ++trState->numErrors % 10 == 0) {
		TraceEvent(SevWarnAlways, "TransactionTooManyRetries")
		    .errorUnsuppressed(e)
		    .detail("NumRetries", trState->numErrors);
	}
	if (e.code() == error_code_success) {
		return client_invalid_operation();
	}
	if (e.code() == error_code_not_committed || e.code() == error_code_commit_unknown_result ||
	    e.code() == error_code_database_locked || e.code() == error_code_commit_proxy_memory_limit_exceeded ||
	    e.code() == error_code_grv_proxy_memory_limit_exceeded || e.code() == error_code_process_behind ||
	    e.code() == error_code_batch_transaction_throttled || e.code() == error_code_tag_throttled ||
	    e.code() == error_code_blob_granule_request_failed || e.code() == error_code_proxy_tag_throttled) {
		if (e.code() == error_code_not_committed)
			++trState->cx->transactionsNotCommitted;
		else if (e.code() == error_code_commit_unknown_result)
			++trState->cx->transactionsMaybeCommitted;
		else if (e.code() == error_code_commit_proxy_memory_limit_exceeded ||
		         e.code() == error_code_grv_proxy_memory_limit_exceeded)
			++trState->cx->transactionsResourceConstrained;
		else if (e.code() == error_code_process_behind)
			++trState->cx->transactionsProcessBehind;
		else if (e.code() == error_code_batch_transaction_throttled || e.code() == error_code_tag_throttled) {
			++trState->cx->transactionsThrottled;
		} else if (e.code() == error_code_proxy_tag_throttled) {
			++trState->cx->transactionsThrottled;
			trState->proxyTagThrottledDuration += CLIENT_KNOBS->PROXY_MAX_TAG_THROTTLE_DURATION;
		}

		double backoff = getBackoff(e.code());
		reset();
		return delay(backoff, trState->taskID);
	}
	if (e.code() == error_code_transaction_too_old || e.code() == error_code_future_version) {
		if (e.code() == error_code_transaction_too_old)
			++trState->cx->transactionsTooOld;
		else if (e.code() == error_code_future_version)
			++trState->cx->transactionsFutureVersions;

		double maxBackoff = trState->options.maxBackoff;
		reset();
		return delay(std::min(CLIENT_KNOBS->FUTURE_VERSION_RETRY_DELAY, maxBackoff), trState->taskID);
	}

	return e;
}
															#line 35247 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
[[nodiscard]] Future<StorageMetrics> getStorageMetricsLargeKeyRange( Database const& cx, KeyRange const& keys, Optional<Reference<TransactionState>> const& trState );

#line 7773 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

															#line 35252 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via doGetStorageMetrics()
															#line 7774 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class DoGetStorageMetricsActor>
															#line 7774 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class DoGetStorageMetricsActorState {
															#line 35259 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 7774 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	DoGetStorageMetricsActorState(Database const& cx,TenantInfo const& tenantInfo,Version const& version,KeyRange const& keys,Reference<LocationInfo> const& locationInfo,Optional<Reference<TransactionState>> const& trState) 
															#line 7774 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 7774 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : cx(cx),
															#line 7774 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   tenantInfo(tenantInfo),
															#line 7774 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   version(version),
															#line 7774 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   keys(keys),
															#line 7774 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   locationInfo(locationInfo),
															#line 7774 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   trState(trState)
															#line 35276 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("doGetStorageMetrics", reinterpret_cast<unsigned long>(this));

	}
	~DoGetStorageMetricsActorState() 
	{
		fdb_probe_actor_destroy("doGetStorageMetrics", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
			try {
															#line 7781 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				WaitMetricsRequest req(tenantInfo, version, keys, StorageMetrics(), StorageMetrics());
															#line 7782 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				req.min.bytes = 0;
															#line 7783 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				req.max.bytes = -1;
															#line 7784 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				StrictFuture<StorageMetrics> __when_expr_0 = loadBalance( locationInfo->locations(), &StorageServerInterface::waitMetrics, req, TaskPriority::DataDistribution);
															#line 7784 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (static_cast<DoGetStorageMetricsActor*>(this)->actor_wait_state < 0) return a_body1Catch2(actor_cancelled(), loopDepth);
															#line 35300 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch2(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
				static_cast<DoGetStorageMetricsActor*>(this)->actor_wait_state = 1;
															#line 7784 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< DoGetStorageMetricsActor, 0, StorageMetrics >*>(static_cast<DoGetStorageMetricsActor*>(this)));
															#line 35305 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				loopDepth = 0;
			}
			catch (Error& error) {
				loopDepth = a_body1Catch2(error, loopDepth);
			} catch (...) {
				loopDepth = a_body1Catch2(unknown_error(), loopDepth);
			}
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~DoGetStorageMetricsActorState();
		static_cast<DoGetStorageMetricsActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1Catch2(const Error& e,int loopDepth=0) 
	{
		try {
															#line 7788 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (e.code() == error_code_wrong_shard_server || e.code() == error_code_all_alternatives_failed)
															#line 35335 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 7789 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				cx->invalidateCache(tenantInfo.prefix, keys);
															#line 7790 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				StrictFuture<Void> __when_expr_1 = delay(CLIENT_KNOBS->WRONG_SHARD_SERVER_DELAY, TaskPriority::DataDistribution);
															#line 7790 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (static_cast<DoGetStorageMetricsActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 35343 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1Catch2when1(__when_expr_1.get(), loopDepth); };
				static_cast<DoGetStorageMetricsActor*>(this)->actor_wait_state = 2;
															#line 7790 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< DoGetStorageMetricsActor, 1, Void >*>(static_cast<DoGetStorageMetricsActor*>(this)));
															#line 35348 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				loopDepth = 0;
			}
			else
			{
															#line 7791 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (e.code() == error_code_future_version)
															#line 35355 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 7792 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					StrictFuture<Void> __when_expr_2 = delay(CLIENT_KNOBS->FUTURE_VERSION_RETRY_DELAY, TaskPriority::DataDistribution);
															#line 7792 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					if (static_cast<DoGetStorageMetricsActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 35361 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1Catch2when2(__when_expr_2.get(), loopDepth); };
					static_cast<DoGetStorageMetricsActor*>(this)->actor_wait_state = 3;
															#line 7792 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< DoGetStorageMetricsActor, 2, Void >*>(static_cast<DoGetStorageMetricsActor*>(this)));
															#line 35366 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					loopDepth = 0;
				}
				else
				{
															#line 7794 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					bool ok = e.code() == error_code_tenant_not_found;
															#line 7795 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					TraceEvent(ok ? SevInfo : SevError, "DoGetStorageMetricsError").error(e);
															#line 7796 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					return a_body1Catch1(e, loopDepth);
															#line 35377 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
			}
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont2(StorageMetrics const& m,int loopDepth) 
	{
															#line 7786 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<DoGetStorageMetricsActor*>(this)->SAV<StorageMetrics>::futures) { (void)(m); this->~DoGetStorageMetricsActorState(); static_cast<DoGetStorageMetricsActor*>(this)->destroy(); return 0; }
															#line 35393 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<DoGetStorageMetricsActor*>(this)->SAV< StorageMetrics >::value()) StorageMetrics(m);
		this->~DoGetStorageMetricsActorState();
		static_cast<DoGetStorageMetricsActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont2(StorageMetrics && m,int loopDepth) 
	{
															#line 7786 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<DoGetStorageMetricsActor*>(this)->SAV<StorageMetrics>::futures) { (void)(m); this->~DoGetStorageMetricsActorState(); static_cast<DoGetStorageMetricsActor*>(this)->destroy(); return 0; }
															#line 35405 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<DoGetStorageMetricsActor*>(this)->SAV< StorageMetrics >::value()) StorageMetrics(m);
		this->~DoGetStorageMetricsActorState();
		static_cast<DoGetStorageMetricsActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1when1(StorageMetrics const& m,int loopDepth) 
	{
		loopDepth = a_body1cont2(m, loopDepth);

		return loopDepth;
	}
	int a_body1when1(StorageMetrics && m,int loopDepth) 
	{
		loopDepth = a_body1cont2(std::move(m), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<DoGetStorageMetricsActor*>(this)->actor_wait_state > 0) static_cast<DoGetStorageMetricsActor*>(this)->actor_wait_state = 0;
		static_cast<DoGetStorageMetricsActor*>(this)->ActorCallback< DoGetStorageMetricsActor, 0, StorageMetrics >::remove();

	}
	void a_callback_fire(ActorCallback< DoGetStorageMetricsActor, 0, StorageMetrics >*,StorageMetrics const& value) 
	{
		fdb_probe_actor_enter("doGetStorageMetrics", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("doGetStorageMetrics", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< DoGetStorageMetricsActor, 0, StorageMetrics >*,StorageMetrics && value) 
	{
		fdb_probe_actor_enter("doGetStorageMetrics", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("doGetStorageMetrics", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< DoGetStorageMetricsActor, 0, StorageMetrics >*,Error err) 
	{
		fdb_probe_actor_enter("doGetStorageMetrics", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch2(err, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("doGetStorageMetrics", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1Catch2cont1(int loopDepth) 
	{
															#line 7799 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<StorageMetrics> __when_expr_3 = getStorageMetricsLargeKeyRange(cx, keys, trState);
															#line 7799 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<DoGetStorageMetricsActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 35482 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1Catch2cont1when1(__when_expr_3.get(), loopDepth); };
		static_cast<DoGetStorageMetricsActor*>(this)->actor_wait_state = 4;
															#line 7799 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< DoGetStorageMetricsActor, 3, StorageMetrics >*>(static_cast<DoGetStorageMetricsActor*>(this)));
															#line 35487 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1Catch2cont2(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1Catch2cont1(loopDepth);

		return loopDepth;
	}
	int a_body1Catch2cont2(Void && _,int loopDepth) 
	{
		loopDepth = a_body1Catch2cont1(loopDepth);

		return loopDepth;
	}
	int a_body1Catch2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1Catch2cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1Catch2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1Catch2cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<DoGetStorageMetricsActor*>(this)->actor_wait_state > 0) static_cast<DoGetStorageMetricsActor*>(this)->actor_wait_state = 0;
		static_cast<DoGetStorageMetricsActor*>(this)->ActorCallback< DoGetStorageMetricsActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< DoGetStorageMetricsActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("doGetStorageMetrics", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch2when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("doGetStorageMetrics", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< DoGetStorageMetricsActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("doGetStorageMetrics", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("doGetStorageMetrics", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< DoGetStorageMetricsActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("doGetStorageMetrics", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("doGetStorageMetrics", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1Catch2cont3(int loopDepth) 
	{
		loopDepth = a_body1Catch2cont1(loopDepth);

		return loopDepth;
	}
	int a_body1Catch2cont4(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1Catch2cont3(loopDepth);

		return loopDepth;
	}
	int a_body1Catch2cont4(Void && _,int loopDepth) 
	{
		loopDepth = a_body1Catch2cont3(loopDepth);

		return loopDepth;
	}
	int a_body1Catch2when2(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1Catch2cont4(_, loopDepth);

		return loopDepth;
	}
	int a_body1Catch2when2(Void && _,int loopDepth) 
	{
		loopDepth = a_body1Catch2cont4(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<DoGetStorageMetricsActor*>(this)->actor_wait_state > 0) static_cast<DoGetStorageMetricsActor*>(this)->actor_wait_state = 0;
		static_cast<DoGetStorageMetricsActor*>(this)->ActorCallback< DoGetStorageMetricsActor, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< DoGetStorageMetricsActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("doGetStorageMetrics", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch2when2(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("doGetStorageMetrics", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< DoGetStorageMetricsActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("doGetStorageMetrics", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch2when2(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("doGetStorageMetrics", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< DoGetStorageMetricsActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("doGetStorageMetrics", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("doGetStorageMetrics", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1Catch2cont6(StorageMetrics const& m,int loopDepth) 
	{
															#line 7800 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<DoGetStorageMetricsActor*>(this)->SAV<StorageMetrics>::futures) { (void)(m); this->~DoGetStorageMetricsActorState(); static_cast<DoGetStorageMetricsActor*>(this)->destroy(); return 0; }
															#line 35652 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<DoGetStorageMetricsActor*>(this)->SAV< StorageMetrics >::value()) StorageMetrics(m);
		this->~DoGetStorageMetricsActorState();
		static_cast<DoGetStorageMetricsActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1Catch2cont6(StorageMetrics && m,int loopDepth) 
	{
															#line 7800 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<DoGetStorageMetricsActor*>(this)->SAV<StorageMetrics>::futures) { (void)(m); this->~DoGetStorageMetricsActorState(); static_cast<DoGetStorageMetricsActor*>(this)->destroy(); return 0; }
															#line 35664 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<DoGetStorageMetricsActor*>(this)->SAV< StorageMetrics >::value()) StorageMetrics(m);
		this->~DoGetStorageMetricsActorState();
		static_cast<DoGetStorageMetricsActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1Catch2cont1when1(StorageMetrics const& m,int loopDepth) 
	{
		loopDepth = a_body1Catch2cont6(m, loopDepth);

		return loopDepth;
	}
	int a_body1Catch2cont1when1(StorageMetrics && m,int loopDepth) 
	{
		loopDepth = a_body1Catch2cont6(std::move(m), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<DoGetStorageMetricsActor*>(this)->actor_wait_state > 0) static_cast<DoGetStorageMetricsActor*>(this)->actor_wait_state = 0;
		static_cast<DoGetStorageMetricsActor*>(this)->ActorCallback< DoGetStorageMetricsActor, 3, StorageMetrics >::remove();

	}
	void a_callback_fire(ActorCallback< DoGetStorageMetricsActor, 3, StorageMetrics >*,StorageMetrics const& value) 
	{
		fdb_probe_actor_enter("doGetStorageMetrics", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1Catch2cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("doGetStorageMetrics", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< DoGetStorageMetricsActor, 3, StorageMetrics >*,StorageMetrics && value) 
	{
		fdb_probe_actor_enter("doGetStorageMetrics", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1Catch2cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("doGetStorageMetrics", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< DoGetStorageMetricsActor, 3, StorageMetrics >*,Error err) 
	{
		fdb_probe_actor_enter("doGetStorageMetrics", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("doGetStorageMetrics", reinterpret_cast<unsigned long>(this), 3);

	}
															#line 7774 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Database cx;
															#line 7774 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	TenantInfo tenantInfo;
															#line 7774 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Version version;
															#line 7774 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeyRange keys;
															#line 7774 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<LocationInfo> locationInfo;
															#line 7774 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Optional<Reference<TransactionState>> trState;
															#line 35747 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via doGetStorageMetrics()
															#line 7774 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class DoGetStorageMetricsActor final : public Actor<StorageMetrics>, public ActorCallback< DoGetStorageMetricsActor, 0, StorageMetrics >, public ActorCallback< DoGetStorageMetricsActor, 1, Void >, public ActorCallback< DoGetStorageMetricsActor, 2, Void >, public ActorCallback< DoGetStorageMetricsActor, 3, StorageMetrics >, public FastAllocated<DoGetStorageMetricsActor>, public DoGetStorageMetricsActorState<DoGetStorageMetricsActor> {
															#line 35752 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<DoGetStorageMetricsActor>::operator new;
	using FastAllocated<DoGetStorageMetricsActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<StorageMetrics>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< DoGetStorageMetricsActor, 0, StorageMetrics >;
friend struct ActorCallback< DoGetStorageMetricsActor, 1, Void >;
friend struct ActorCallback< DoGetStorageMetricsActor, 2, Void >;
friend struct ActorCallback< DoGetStorageMetricsActor, 3, StorageMetrics >;
															#line 7774 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	DoGetStorageMetricsActor(Database const& cx,TenantInfo const& tenantInfo,Version const& version,KeyRange const& keys,Reference<LocationInfo> const& locationInfo,Optional<Reference<TransactionState>> const& trState) 
															#line 35766 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<StorageMetrics>(),
		   DoGetStorageMetricsActorState<DoGetStorageMetricsActor>(cx, tenantInfo, version, keys, locationInfo, trState)
	{
		fdb_probe_actor_enter("doGetStorageMetrics", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("doGetStorageMetrics");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("doGetStorageMetrics", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< DoGetStorageMetricsActor, 0, StorageMetrics >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< DoGetStorageMetricsActor, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< DoGetStorageMetricsActor, 2, Void >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< DoGetStorageMetricsActor, 3, StorageMetrics >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 7774 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<StorageMetrics> doGetStorageMetrics( Database const& cx, TenantInfo const& tenantInfo, Version const& version, KeyRange const& keys, Reference<LocationInfo> const& locationInfo, Optional<Reference<TransactionState>> const& trState ) {
															#line 7774 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<StorageMetrics>(new DoGetStorageMetricsActor(cx, tenantInfo, version, keys, locationInfo, trState));
															#line 35797 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 7803 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

															#line 35802 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via getStorageMetricsLargeKeyRange()
															#line 7804 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class GetStorageMetricsLargeKeyRangeActor>
															#line 7804 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetStorageMetricsLargeKeyRangeActorState {
															#line 35809 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 7804 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetStorageMetricsLargeKeyRangeActorState(Database const& cx,KeyRange const& keys,Optional<Reference<TransactionState>> const& trState) 
															#line 7804 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 7804 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : cx(cx),
															#line 7804 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   keys(keys),
															#line 7804 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   trState(trState),
															#line 7807 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   span("NAPI:GetStorageMetricsLargeKeyRange"_loc)
															#line 35822 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("getStorageMetricsLargeKeyRange", reinterpret_cast<unsigned long>(this));

	}
	~GetStorageMetricsLargeKeyRangeActorState() 
	{
		fdb_probe_actor_destroy("getStorageMetricsLargeKeyRange", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 7808 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (trState.present())
															#line 35837 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 7809 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				StrictFuture<Void> __when_expr_0 = trState.get()->startTransaction();
															#line 7809 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (static_cast<GetStorageMetricsLargeKeyRangeActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 35843 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
				static_cast<GetStorageMetricsLargeKeyRangeActor*>(this)->actor_wait_state = 1;
															#line 7809 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< GetStorageMetricsLargeKeyRangeActor, 0, Void >*>(static_cast<GetStorageMetricsLargeKeyRangeActor*>(this)));
															#line 35848 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				loopDepth = 0;
			}
			else
			{
				loopDepth = a_body1cont1(loopDepth);
			}
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~GetStorageMetricsLargeKeyRangeActorState();
		static_cast<GetStorageMetricsLargeKeyRangeActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 7811 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<TenantInfo> __when_expr_1 = trState.present() ? populateAndGetTenant(trState.get(), keys.begin) : TenantInfo();
															#line 7811 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<GetStorageMetricsLargeKeyRangeActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 35878 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<GetStorageMetricsLargeKeyRangeActor*>(this)->actor_wait_state = 2;
															#line 7811 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< GetStorageMetricsLargeKeyRangeActor, 1, TenantInfo >*>(static_cast<GetStorageMetricsLargeKeyRangeActor*>(this)));
															#line 35883 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont2(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont2(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<GetStorageMetricsLargeKeyRangeActor*>(this)->actor_wait_state > 0) static_cast<GetStorageMetricsLargeKeyRangeActor*>(this)->actor_wait_state = 0;
		static_cast<GetStorageMetricsLargeKeyRangeActor*>(this)->ActorCallback< GetStorageMetricsLargeKeyRangeActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetStorageMetricsLargeKeyRangeActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getStorageMetricsLargeKeyRange", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getStorageMetricsLargeKeyRange", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< GetStorageMetricsLargeKeyRangeActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getStorageMetricsLargeKeyRange", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getStorageMetricsLargeKeyRange", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< GetStorageMetricsLargeKeyRangeActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getStorageMetricsLargeKeyRange", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getStorageMetricsLargeKeyRange", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont3(int loopDepth) 
	{
															#line 7813 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		version = trState.present() ? trState.get()->readVersion() : latestVersion;
															#line 7814 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<std::vector<KeyRangeLocationInfo>> __when_expr_2 = getKeyRangeLocations(cx, tenantInfo, keys, std::numeric_limits<int>::max(), Reverse::False, &StorageServerInterface::waitMetrics, span.context, Optional<UID>(), UseProvisionalProxies::False, version);
															#line 7814 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<GetStorageMetricsLargeKeyRangeActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 35971 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont3when1(__when_expr_2.get(), loopDepth); };
		static_cast<GetStorageMetricsLargeKeyRangeActor*>(this)->actor_wait_state = 3;
															#line 7814 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< GetStorageMetricsLargeKeyRangeActor, 2, std::vector<KeyRangeLocationInfo> >*>(static_cast<GetStorageMetricsLargeKeyRangeActor*>(this)));
															#line 35976 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1when1(TenantInfo const& __tenantInfo,int loopDepth) 
	{
															#line 7811 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		tenantInfo = __tenantInfo;
															#line 35985 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(TenantInfo && __tenantInfo,int loopDepth) 
	{
		tenantInfo = std::move(__tenantInfo);
		loopDepth = a_body1cont3(loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<GetStorageMetricsLargeKeyRangeActor*>(this)->actor_wait_state > 0) static_cast<GetStorageMetricsLargeKeyRangeActor*>(this)->actor_wait_state = 0;
		static_cast<GetStorageMetricsLargeKeyRangeActor*>(this)->ActorCallback< GetStorageMetricsLargeKeyRangeActor, 1, TenantInfo >::remove();

	}
	void a_callback_fire(ActorCallback< GetStorageMetricsLargeKeyRangeActor, 1, TenantInfo >*,TenantInfo const& value) 
	{
		fdb_probe_actor_enter("getStorageMetricsLargeKeyRange", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getStorageMetricsLargeKeyRange", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< GetStorageMetricsLargeKeyRangeActor, 1, TenantInfo >*,TenantInfo && value) 
	{
		fdb_probe_actor_enter("getStorageMetricsLargeKeyRange", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getStorageMetricsLargeKeyRange", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< GetStorageMetricsLargeKeyRangeActor, 1, TenantInfo >*,Error err) 
	{
		fdb_probe_actor_enter("getStorageMetricsLargeKeyRange", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getStorageMetricsLargeKeyRange", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont4(std::vector<KeyRangeLocationInfo> const& locations,int loopDepth) 
	{
															#line 7824 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		nLocs = locations.size();
															#line 7825 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		fx = std::vector<Future<StorageMetrics>>(nLocs);
															#line 7826 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		total = StorageMetrics();
															#line 7827 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		KeyRef partBegin, partEnd;
															#line 7828 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for(int i = 0;i < nLocs;i++) {
															#line 7829 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			partBegin = (i == 0) ? keys.begin : locations[i].range.begin;
															#line 7830 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			partEnd = (i == nLocs - 1) ? keys.end : locations[i].range.end;
															#line 7831 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			fx[i] = doGetStorageMetrics( cx, tenantInfo, version, KeyRangeRef(partBegin, partEnd), locations[i].locations, trState);
															#line 36066 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 7834 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_3 = waitForAll(fx);
															#line 7834 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<GetStorageMetricsLargeKeyRangeActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 36072 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1cont4when1(__when_expr_3.get(), loopDepth); };
		static_cast<GetStorageMetricsLargeKeyRangeActor*>(this)->actor_wait_state = 4;
															#line 7834 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< GetStorageMetricsLargeKeyRangeActor, 3, Void >*>(static_cast<GetStorageMetricsLargeKeyRangeActor*>(this)));
															#line 36077 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont4(std::vector<KeyRangeLocationInfo> && locations,int loopDepth) 
	{
															#line 7824 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		nLocs = locations.size();
															#line 7825 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		fx = std::vector<Future<StorageMetrics>>(nLocs);
															#line 7826 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		total = StorageMetrics();
															#line 7827 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		KeyRef partBegin, partEnd;
															#line 7828 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for(int i = 0;i < nLocs;i++) {
															#line 7829 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			partBegin = (i == 0) ? keys.begin : locations[i].range.begin;
															#line 7830 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			partEnd = (i == nLocs - 1) ? keys.end : locations[i].range.end;
															#line 7831 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			fx[i] = doGetStorageMetrics( cx, tenantInfo, version, KeyRangeRef(partBegin, partEnd), locations[i].locations, trState);
															#line 36100 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 7834 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_3 = waitForAll(fx);
															#line 7834 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<GetStorageMetricsLargeKeyRangeActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 36106 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1cont4when1(__when_expr_3.get(), loopDepth); };
		static_cast<GetStorageMetricsLargeKeyRangeActor*>(this)->actor_wait_state = 4;
															#line 7834 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< GetStorageMetricsLargeKeyRangeActor, 3, Void >*>(static_cast<GetStorageMetricsLargeKeyRangeActor*>(this)));
															#line 36111 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont3when1(std::vector<KeyRangeLocationInfo> const& locations,int loopDepth) 
	{
		loopDepth = a_body1cont4(locations, loopDepth);

		return loopDepth;
	}
	int a_body1cont3when1(std::vector<KeyRangeLocationInfo> && locations,int loopDepth) 
	{
		loopDepth = a_body1cont4(std::move(locations), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<GetStorageMetricsLargeKeyRangeActor*>(this)->actor_wait_state > 0) static_cast<GetStorageMetricsLargeKeyRangeActor*>(this)->actor_wait_state = 0;
		static_cast<GetStorageMetricsLargeKeyRangeActor*>(this)->ActorCallback< GetStorageMetricsLargeKeyRangeActor, 2, std::vector<KeyRangeLocationInfo> >::remove();

	}
	void a_callback_fire(ActorCallback< GetStorageMetricsLargeKeyRangeActor, 2, std::vector<KeyRangeLocationInfo> >*,std::vector<KeyRangeLocationInfo> const& value) 
	{
		fdb_probe_actor_enter("getStorageMetricsLargeKeyRange", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont3when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getStorageMetricsLargeKeyRange", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< GetStorageMetricsLargeKeyRangeActor, 2, std::vector<KeyRangeLocationInfo> >*,std::vector<KeyRangeLocationInfo> && value) 
	{
		fdb_probe_actor_enter("getStorageMetricsLargeKeyRange", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont3when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getStorageMetricsLargeKeyRange", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< GetStorageMetricsLargeKeyRangeActor, 2, std::vector<KeyRangeLocationInfo> >*,Error err) 
	{
		fdb_probe_actor_enter("getStorageMetricsLargeKeyRange", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getStorageMetricsLargeKeyRange", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1cont5(Void const& _,int loopDepth) 
	{
															#line 7835 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for(int i = 0;i < nLocs;i++) {
															#line 7836 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			total += fx[i].get();
															#line 36185 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 7838 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<GetStorageMetricsLargeKeyRangeActor*>(this)->SAV<StorageMetrics>::futures) { (void)(total); this->~GetStorageMetricsLargeKeyRangeActorState(); static_cast<GetStorageMetricsLargeKeyRangeActor*>(this)->destroy(); return 0; }
															#line 36189 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<GetStorageMetricsLargeKeyRangeActor*>(this)->SAV< StorageMetrics >::value()) StorageMetrics(std::move(total)); // state_var_RVO
		this->~GetStorageMetricsLargeKeyRangeActorState();
		static_cast<GetStorageMetricsLargeKeyRangeActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont5(Void && _,int loopDepth) 
	{
															#line 7835 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for(int i = 0;i < nLocs;i++) {
															#line 7836 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			total += fx[i].get();
															#line 36203 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 7838 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<GetStorageMetricsLargeKeyRangeActor*>(this)->SAV<StorageMetrics>::futures) { (void)(total); this->~GetStorageMetricsLargeKeyRangeActorState(); static_cast<GetStorageMetricsLargeKeyRangeActor*>(this)->destroy(); return 0; }
															#line 36207 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<GetStorageMetricsLargeKeyRangeActor*>(this)->SAV< StorageMetrics >::value()) StorageMetrics(std::move(total)); // state_var_RVO
		this->~GetStorageMetricsLargeKeyRangeActorState();
		static_cast<GetStorageMetricsLargeKeyRangeActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont4when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont5(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont4when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont5(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<GetStorageMetricsLargeKeyRangeActor*>(this)->actor_wait_state > 0) static_cast<GetStorageMetricsLargeKeyRangeActor*>(this)->actor_wait_state = 0;
		static_cast<GetStorageMetricsLargeKeyRangeActor*>(this)->ActorCallback< GetStorageMetricsLargeKeyRangeActor, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetStorageMetricsLargeKeyRangeActor, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getStorageMetricsLargeKeyRange", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont4when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getStorageMetricsLargeKeyRange", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< GetStorageMetricsLargeKeyRangeActor, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getStorageMetricsLargeKeyRange", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont4when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getStorageMetricsLargeKeyRange", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< GetStorageMetricsLargeKeyRangeActor, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getStorageMetricsLargeKeyRange", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getStorageMetricsLargeKeyRange", reinterpret_cast<unsigned long>(this), 3);

	}
															#line 7804 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Database cx;
															#line 7804 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeyRange keys;
															#line 7804 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Optional<Reference<TransactionState>> trState;
															#line 7807 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Span span;
															#line 7811 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	TenantInfo tenantInfo;
															#line 7813 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Version version;
															#line 7824 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	int nLocs;
															#line 7825 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	std::vector<Future<StorageMetrics>> fx;
															#line 7826 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	StorageMetrics total;
															#line 36296 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via getStorageMetricsLargeKeyRange()
															#line 7804 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetStorageMetricsLargeKeyRangeActor final : public Actor<StorageMetrics>, public ActorCallback< GetStorageMetricsLargeKeyRangeActor, 0, Void >, public ActorCallback< GetStorageMetricsLargeKeyRangeActor, 1, TenantInfo >, public ActorCallback< GetStorageMetricsLargeKeyRangeActor, 2, std::vector<KeyRangeLocationInfo> >, public ActorCallback< GetStorageMetricsLargeKeyRangeActor, 3, Void >, public FastAllocated<GetStorageMetricsLargeKeyRangeActor>, public GetStorageMetricsLargeKeyRangeActorState<GetStorageMetricsLargeKeyRangeActor> {
															#line 36301 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<GetStorageMetricsLargeKeyRangeActor>::operator new;
	using FastAllocated<GetStorageMetricsLargeKeyRangeActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<StorageMetrics>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< GetStorageMetricsLargeKeyRangeActor, 0, Void >;
friend struct ActorCallback< GetStorageMetricsLargeKeyRangeActor, 1, TenantInfo >;
friend struct ActorCallback< GetStorageMetricsLargeKeyRangeActor, 2, std::vector<KeyRangeLocationInfo> >;
friend struct ActorCallback< GetStorageMetricsLargeKeyRangeActor, 3, Void >;
															#line 7804 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetStorageMetricsLargeKeyRangeActor(Database const& cx,KeyRange const& keys,Optional<Reference<TransactionState>> const& trState) 
															#line 36315 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<StorageMetrics>(),
		   GetStorageMetricsLargeKeyRangeActorState<GetStorageMetricsLargeKeyRangeActor>(cx, keys, trState)
	{
		fdb_probe_actor_enter("getStorageMetricsLargeKeyRange", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("getStorageMetricsLargeKeyRange");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("getStorageMetricsLargeKeyRange", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< GetStorageMetricsLargeKeyRangeActor, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< GetStorageMetricsLargeKeyRangeActor, 1, TenantInfo >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< GetStorageMetricsLargeKeyRangeActor, 2, std::vector<KeyRangeLocationInfo> >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< GetStorageMetricsLargeKeyRangeActor, 3, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 7804 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<StorageMetrics> getStorageMetricsLargeKeyRange( Database const& cx, KeyRange const& keys, Optional<Reference<TransactionState>> const& trState ) {
															#line 7804 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<StorageMetrics>(new GetStorageMetricsLargeKeyRangeActor(cx, keys, trState));
															#line 36346 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 7840 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

															#line 36351 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via trackBoundedStorageMetrics()
															#line 7841 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class TrackBoundedStorageMetricsActor>
															#line 7841 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class TrackBoundedStorageMetricsActorState {
															#line 36358 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 7841 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	TrackBoundedStorageMetricsActorState(TenantInfo const& tenantInfo,Version const& version,KeyRange const& keys,Reference<LocationInfo> const& location,StorageMetrics const& x,StorageMetrics const& halfError,PromiseStream<StorageMetrics> const& deltaStream) 
															#line 7841 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 7841 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : tenantInfo(tenantInfo),
															#line 7841 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   version(version),
															#line 7841 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   keys(keys),
															#line 7841 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   location(location),
															#line 7841 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   x(x),
															#line 7841 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   halfError(halfError),
															#line 7841 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   deltaStream(deltaStream)
															#line 36377 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("trackBoundedStorageMetrics", reinterpret_cast<unsigned long>(this));

	}
	~TrackBoundedStorageMetricsActorState() 
	{
		fdb_probe_actor_destroy("trackBoundedStorageMetrics", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
			try {
															#line 7849 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				;
															#line 36393 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				loopDepth = a_body1loopHead1(loopDepth);
			}
			catch (Error& error) {
				loopDepth = a_body1Catch2(error, loopDepth);
			} catch (...) {
				loopDepth = a_body1Catch2(unknown_error(), loopDepth);
			}
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~TrackBoundedStorageMetricsActorState();
		static_cast<TrackBoundedStorageMetricsActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1Catch2(const Error& e,int loopDepth=0) 
	{
		try {
															#line 7856 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			deltaStream.sendError(e);
															#line 7857 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			return a_body1Catch1(e, loopDepth);
															#line 36425 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
															#line 7850 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		WaitMetricsRequest req(tenantInfo, version, keys, x - halfError, x + halfError);
															#line 7851 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<StorageMetrics> __when_expr_0 = loadBalance(location->locations(), &StorageServerInterface::waitMetrics, req);
															#line 7851 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<TrackBoundedStorageMetricsActor*>(this)->actor_wait_state < 0) return a_body1Catch2(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 36450 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch2(__when_expr_0.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
		static_cast<TrackBoundedStorageMetricsActor*>(this)->actor_wait_state = 1;
															#line 7851 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< TrackBoundedStorageMetricsActor, 0, StorageMetrics >*>(static_cast<TrackBoundedStorageMetricsActor*>(this)));
															#line 36455 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont1(StorageMetrics const& nextX,int loopDepth) 
	{
															#line 7852 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		deltaStream.send(nextX - x);
															#line 7853 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		x = nextX;
															#line 36466 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1cont1(StorageMetrics && nextX,int loopDepth) 
	{
															#line 7852 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		deltaStream.send(nextX - x);
															#line 7853 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		x = nextX;
															#line 36477 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1when1(StorageMetrics const& nextX,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(nextX, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(StorageMetrics && nextX,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(std::move(nextX), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<TrackBoundedStorageMetricsActor*>(this)->actor_wait_state > 0) static_cast<TrackBoundedStorageMetricsActor*>(this)->actor_wait_state = 0;
		static_cast<TrackBoundedStorageMetricsActor*>(this)->ActorCallback< TrackBoundedStorageMetricsActor, 0, StorageMetrics >::remove();

	}
	void a_callback_fire(ActorCallback< TrackBoundedStorageMetricsActor, 0, StorageMetrics >*,StorageMetrics const& value) 
	{
		fdb_probe_actor_enter("trackBoundedStorageMetrics", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("trackBoundedStorageMetrics", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< TrackBoundedStorageMetricsActor, 0, StorageMetrics >*,StorageMetrics && value) 
	{
		fdb_probe_actor_enter("trackBoundedStorageMetrics", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("trackBoundedStorageMetrics", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< TrackBoundedStorageMetricsActor, 0, StorageMetrics >*,Error err) 
	{
		fdb_probe_actor_enter("trackBoundedStorageMetrics", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch2(err, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("trackBoundedStorageMetrics", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 7841 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	TenantInfo tenantInfo;
															#line 7841 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Version version;
															#line 7841 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeyRange keys;
															#line 7841 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<LocationInfo> location;
															#line 7841 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	StorageMetrics x;
															#line 7841 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	StorageMetrics halfError;
															#line 7841 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	PromiseStream<StorageMetrics> deltaStream;
															#line 36559 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via trackBoundedStorageMetrics()
															#line 7841 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class TrackBoundedStorageMetricsActor final : public Actor<Void>, public ActorCallback< TrackBoundedStorageMetricsActor, 0, StorageMetrics >, public FastAllocated<TrackBoundedStorageMetricsActor>, public TrackBoundedStorageMetricsActorState<TrackBoundedStorageMetricsActor> {
															#line 36564 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<TrackBoundedStorageMetricsActor>::operator new;
	using FastAllocated<TrackBoundedStorageMetricsActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< TrackBoundedStorageMetricsActor, 0, StorageMetrics >;
															#line 7841 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	TrackBoundedStorageMetricsActor(TenantInfo const& tenantInfo,Version const& version,KeyRange const& keys,Reference<LocationInfo> const& location,StorageMetrics const& x,StorageMetrics const& halfError,PromiseStream<StorageMetrics> const& deltaStream) 
															#line 36575 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Void>(),
		   TrackBoundedStorageMetricsActorState<TrackBoundedStorageMetricsActor>(tenantInfo, version, keys, location, x, halfError, deltaStream)
	{
		fdb_probe_actor_enter("trackBoundedStorageMetrics", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("trackBoundedStorageMetrics");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("trackBoundedStorageMetrics", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< TrackBoundedStorageMetricsActor, 0, StorageMetrics >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 7841 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<Void> trackBoundedStorageMetrics( TenantInfo const& tenantInfo, Version const& version, KeyRange const& keys, Reference<LocationInfo> const& location, StorageMetrics const& x, StorageMetrics const& halfError, PromiseStream<StorageMetrics> const& deltaStream ) {
															#line 7841 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Void>(new TrackBoundedStorageMetricsActor(tenantInfo, version, keys, location, x, halfError, deltaStream));
															#line 36603 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 7860 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

															#line 36608 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via waitStorageMetricsMultipleLocations()
															#line 7861 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class WaitStorageMetricsMultipleLocationsActor>
															#line 7861 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class WaitStorageMetricsMultipleLocationsActorState {
															#line 36615 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 7861 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	WaitStorageMetricsMultipleLocationsActorState(TenantInfo const& tenantInfo,Version const& version,std::vector<KeyRangeLocationInfo> const& locations,StorageMetrics const& min,StorageMetrics const& max,StorageMetrics const& permittedError) 
															#line 7861 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 7861 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : tenantInfo(tenantInfo),
															#line 7861 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   version(version),
															#line 7861 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   locations(locations),
															#line 7861 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   min(min),
															#line 7861 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   max(max),
															#line 7861 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   permittedError(permittedError),
															#line 7867 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   nLocs(locations.size()),
															#line 7868 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   fx(nLocs),
															#line 7869 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   total(),
															#line 7870 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   deltas(),
															#line 7871 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   wx(fx.size()),
															#line 7872 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   halfErrorPerMachine(permittedError * (0.5 / nLocs)),
															#line 7873 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   maxPlus(max + halfErrorPerMachine * (nLocs - 1)),
															#line 7874 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   minMinus(min - halfErrorPerMachine * (nLocs - 1))
															#line 36648 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("waitStorageMetricsMultipleLocations", reinterpret_cast<unsigned long>(this));

	}
	~WaitStorageMetricsMultipleLocationsActorState() 
	{
		fdb_probe_actor_destroy("waitStorageMetricsMultipleLocations", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 7876 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			for(int i = 0;i < nLocs;i++) {
															#line 7877 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				WaitMetricsRequest req(tenantInfo, version, locations[i].range, StorageMetrics(), StorageMetrics());
															#line 7878 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				req.min.bytes = 0;
															#line 7879 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				req.max.bytes = -1;
															#line 7880 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				fx[i] = loadBalance(locations[i].locations->locations(), &StorageServerInterface::waitMetrics, req, TaskPriority::DataDistribution);
															#line 36671 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 7885 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_0 = waitForAll(fx);
															#line 7885 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<WaitStorageMetricsMultipleLocationsActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 36677 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<WaitStorageMetricsMultipleLocationsActor*>(this)->actor_wait_state = 1;
															#line 7885 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< WaitStorageMetricsMultipleLocationsActor, 0, Void >*>(static_cast<WaitStorageMetricsMultipleLocationsActor*>(this)));
															#line 36682 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~WaitStorageMetricsMultipleLocationsActorState();
		static_cast<WaitStorageMetricsMultipleLocationsActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void const& _,int loopDepth) 
	{
															#line 7888 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for(int i = 0;i < nLocs;i++) {
															#line 7889 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			total += fx[i].get();
															#line 36707 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 7891 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!total.allLessOrEqual(maxPlus))
															#line 36711 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 7892 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<WaitStorageMetricsMultipleLocationsActor*>(this)->SAV<StorageMetrics>::futures) { (void)(total); this->~WaitStorageMetricsMultipleLocationsActorState(); static_cast<WaitStorageMetricsMultipleLocationsActor*>(this)->destroy(); return 0; }
															#line 36715 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<WaitStorageMetricsMultipleLocationsActor*>(this)->SAV< StorageMetrics >::value()) StorageMetrics(std::move(total)); // state_var_RVO
			this->~WaitStorageMetricsMultipleLocationsActorState();
			static_cast<WaitStorageMetricsMultipleLocationsActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 7893 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!minMinus.allLessOrEqual(total))
															#line 36723 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 7894 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<WaitStorageMetricsMultipleLocationsActor*>(this)->SAV<StorageMetrics>::futures) { (void)(total); this->~WaitStorageMetricsMultipleLocationsActorState(); static_cast<WaitStorageMetricsMultipleLocationsActor*>(this)->destroy(); return 0; }
															#line 36727 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<WaitStorageMetricsMultipleLocationsActor*>(this)->SAV< StorageMetrics >::value()) StorageMetrics(std::move(total)); // state_var_RVO
			this->~WaitStorageMetricsMultipleLocationsActorState();
			static_cast<WaitStorageMetricsMultipleLocationsActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 7896 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for(int i = 0;i < nLocs;i++) {
															#line 7897 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			wx[i] = trackBoundedStorageMetrics( tenantInfo, version, locations[i].range, locations[i].locations, fx[i].get(), halfErrorPerMachine, deltas);
															#line 36737 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 7900 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		;
															#line 36741 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont1loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1(Void && _,int loopDepth) 
	{
															#line 7888 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for(int i = 0;i < nLocs;i++) {
															#line 7889 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			total += fx[i].get();
															#line 36752 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 7891 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!total.allLessOrEqual(maxPlus))
															#line 36756 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 7892 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<WaitStorageMetricsMultipleLocationsActor*>(this)->SAV<StorageMetrics>::futures) { (void)(total); this->~WaitStorageMetricsMultipleLocationsActorState(); static_cast<WaitStorageMetricsMultipleLocationsActor*>(this)->destroy(); return 0; }
															#line 36760 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<WaitStorageMetricsMultipleLocationsActor*>(this)->SAV< StorageMetrics >::value()) StorageMetrics(std::move(total)); // state_var_RVO
			this->~WaitStorageMetricsMultipleLocationsActorState();
			static_cast<WaitStorageMetricsMultipleLocationsActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 7893 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!minMinus.allLessOrEqual(total))
															#line 36768 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 7894 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<WaitStorageMetricsMultipleLocationsActor*>(this)->SAV<StorageMetrics>::futures) { (void)(total); this->~WaitStorageMetricsMultipleLocationsActorState(); static_cast<WaitStorageMetricsMultipleLocationsActor*>(this)->destroy(); return 0; }
															#line 36772 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<WaitStorageMetricsMultipleLocationsActor*>(this)->SAV< StorageMetrics >::value()) StorageMetrics(std::move(total)); // state_var_RVO
			this->~WaitStorageMetricsMultipleLocationsActorState();
			static_cast<WaitStorageMetricsMultipleLocationsActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 7896 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for(int i = 0;i < nLocs;i++) {
															#line 7897 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			wx[i] = trackBoundedStorageMetrics( tenantInfo, version, locations[i].range, locations[i].locations, fx[i].get(), halfErrorPerMachine, deltas);
															#line 36782 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 7900 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		;
															#line 36786 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont1loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<WaitStorageMetricsMultipleLocationsActor*>(this)->actor_wait_state > 0) static_cast<WaitStorageMetricsMultipleLocationsActor*>(this)->actor_wait_state = 0;
		static_cast<WaitStorageMetricsMultipleLocationsActor*>(this)->ActorCallback< WaitStorageMetricsMultipleLocationsActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< WaitStorageMetricsMultipleLocationsActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("waitStorageMetricsMultipleLocations", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitStorageMetricsMultipleLocations", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< WaitStorageMetricsMultipleLocationsActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("waitStorageMetricsMultipleLocations", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitStorageMetricsMultipleLocations", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< WaitStorageMetricsMultipleLocationsActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("waitStorageMetricsMultipleLocations", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitStorageMetricsMultipleLocations", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1cont1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1(int loopDepth) 
	{
															#line 7901 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		FutureStream<StorageMetrics> __when_expr_1 = deltas.getFuture();
															#line 7901 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<WaitStorageMetricsMultipleLocationsActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 36867 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), std::max(0, loopDepth - 1)); else return a_body1cont1loopBody1when1(__when_expr_1.pop(), loopDepth); };
		static_cast<WaitStorageMetricsMultipleLocationsActor*>(this)->actor_wait_state = 2;
															#line 7901 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorSingleCallback< WaitStorageMetricsMultipleLocationsActor, 1, StorageMetrics >*>(static_cast<WaitStorageMetricsMultipleLocationsActor*>(this)));
															#line 36872 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1(StorageMetrics const& delta,int loopDepth) 
	{
															#line 7902 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		total += delta;
															#line 7903 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!total.allLessOrEqual(maxPlus))
															#line 36883 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 7904 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<WaitStorageMetricsMultipleLocationsActor*>(this)->SAV<StorageMetrics>::futures) { (void)(total); this->~WaitStorageMetricsMultipleLocationsActorState(); static_cast<WaitStorageMetricsMultipleLocationsActor*>(this)->destroy(); return 0; }
															#line 36887 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<WaitStorageMetricsMultipleLocationsActor*>(this)->SAV< StorageMetrics >::value()) StorageMetrics(std::move(total)); // state_var_RVO
			this->~WaitStorageMetricsMultipleLocationsActorState();
			static_cast<WaitStorageMetricsMultipleLocationsActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 7905 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!minMinus.allLessOrEqual(total))
															#line 36895 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 7906 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<WaitStorageMetricsMultipleLocationsActor*>(this)->SAV<StorageMetrics>::futures) { (void)(total); this->~WaitStorageMetricsMultipleLocationsActorState(); static_cast<WaitStorageMetricsMultipleLocationsActor*>(this)->destroy(); return 0; }
															#line 36899 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<WaitStorageMetricsMultipleLocationsActor*>(this)->SAV< StorageMetrics >::value()) StorageMetrics(std::move(total)); // state_var_RVO
			this->~WaitStorageMetricsMultipleLocationsActorState();
			static_cast<WaitStorageMetricsMultipleLocationsActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
		if (loopDepth == 0) return a_body1cont1loopHead1(0);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1(StorageMetrics && delta,int loopDepth) 
	{
															#line 7902 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		total += delta;
															#line 7903 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!total.allLessOrEqual(maxPlus))
															#line 36915 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 7904 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<WaitStorageMetricsMultipleLocationsActor*>(this)->SAV<StorageMetrics>::futures) { (void)(total); this->~WaitStorageMetricsMultipleLocationsActorState(); static_cast<WaitStorageMetricsMultipleLocationsActor*>(this)->destroy(); return 0; }
															#line 36919 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<WaitStorageMetricsMultipleLocationsActor*>(this)->SAV< StorageMetrics >::value()) StorageMetrics(std::move(total)); // state_var_RVO
			this->~WaitStorageMetricsMultipleLocationsActorState();
			static_cast<WaitStorageMetricsMultipleLocationsActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 7905 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!minMinus.allLessOrEqual(total))
															#line 36927 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 7906 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<WaitStorageMetricsMultipleLocationsActor*>(this)->SAV<StorageMetrics>::futures) { (void)(total); this->~WaitStorageMetricsMultipleLocationsActorState(); static_cast<WaitStorageMetricsMultipleLocationsActor*>(this)->destroy(); return 0; }
															#line 36931 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<WaitStorageMetricsMultipleLocationsActor*>(this)->SAV< StorageMetrics >::value()) StorageMetrics(std::move(total)); // state_var_RVO
			this->~WaitStorageMetricsMultipleLocationsActorState();
			static_cast<WaitStorageMetricsMultipleLocationsActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
		if (loopDepth == 0) return a_body1cont1loopHead1(0);

		return loopDepth;
	}
	int a_body1cont1loopBody1when1(StorageMetrics const& delta,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont1(delta, loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1when1(StorageMetrics && delta,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont1(std::move(delta), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<WaitStorageMetricsMultipleLocationsActor*>(this)->actor_wait_state > 0) static_cast<WaitStorageMetricsMultipleLocationsActor*>(this)->actor_wait_state = 0;
		static_cast<WaitStorageMetricsMultipleLocationsActor*>(this)->ActorSingleCallback< WaitStorageMetricsMultipleLocationsActor, 1, StorageMetrics >::remove();

	}
	void a_callback_fire(ActorSingleCallback< WaitStorageMetricsMultipleLocationsActor, 1, StorageMetrics >*,StorageMetrics const& value) 
	{
		fdb_probe_actor_enter("waitStorageMetricsMultipleLocations", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitStorageMetricsMultipleLocations", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorSingleCallback< WaitStorageMetricsMultipleLocationsActor, 1, StorageMetrics >*,StorageMetrics && value) 
	{
		fdb_probe_actor_enter("waitStorageMetricsMultipleLocations", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitStorageMetricsMultipleLocations", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorSingleCallback< WaitStorageMetricsMultipleLocationsActor, 1, StorageMetrics >*,Error err) 
	{
		fdb_probe_actor_enter("waitStorageMetricsMultipleLocations", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitStorageMetricsMultipleLocations", reinterpret_cast<unsigned long>(this), 1);

	}
															#line 7861 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	TenantInfo tenantInfo;
															#line 7861 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Version version;
															#line 7861 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	std::vector<KeyRangeLocationInfo> locations;
															#line 7861 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	StorageMetrics min;
															#line 7861 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	StorageMetrics max;
															#line 7861 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	StorageMetrics permittedError;
															#line 7867 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	int nLocs;
															#line 7868 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	std::vector<Future<StorageMetrics>> fx;
															#line 7869 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	StorageMetrics total;
															#line 7870 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	PromiseStream<StorageMetrics> deltas;
															#line 7871 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	std::vector<Future<Void>> wx;
															#line 7872 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	StorageMetrics halfErrorPerMachine;
															#line 7873 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	StorageMetrics maxPlus;
															#line 7874 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	StorageMetrics minMinus;
															#line 37032 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via waitStorageMetricsMultipleLocations()
															#line 7861 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class WaitStorageMetricsMultipleLocationsActor final : public Actor<StorageMetrics>, public ActorCallback< WaitStorageMetricsMultipleLocationsActor, 0, Void >, public ActorSingleCallback< WaitStorageMetricsMultipleLocationsActor, 1, StorageMetrics >, public FastAllocated<WaitStorageMetricsMultipleLocationsActor>, public WaitStorageMetricsMultipleLocationsActorState<WaitStorageMetricsMultipleLocationsActor> {
															#line 37037 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<WaitStorageMetricsMultipleLocationsActor>::operator new;
	using FastAllocated<WaitStorageMetricsMultipleLocationsActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<StorageMetrics>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< WaitStorageMetricsMultipleLocationsActor, 0, Void >;
friend struct ActorSingleCallback< WaitStorageMetricsMultipleLocationsActor, 1, StorageMetrics >;
															#line 7861 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	WaitStorageMetricsMultipleLocationsActor(TenantInfo const& tenantInfo,Version const& version,std::vector<KeyRangeLocationInfo> const& locations,StorageMetrics const& min,StorageMetrics const& max,StorageMetrics const& permittedError) 
															#line 37049 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<StorageMetrics>(),
		   WaitStorageMetricsMultipleLocationsActorState<WaitStorageMetricsMultipleLocationsActor>(tenantInfo, version, locations, min, max, permittedError)
	{
		fdb_probe_actor_enter("waitStorageMetricsMultipleLocations", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("waitStorageMetricsMultipleLocations");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("waitStorageMetricsMultipleLocations", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< WaitStorageMetricsMultipleLocationsActor, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorSingleCallback< WaitStorageMetricsMultipleLocationsActor, 1, StorageMetrics >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 7861 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<StorageMetrics> waitStorageMetricsMultipleLocations( TenantInfo const& tenantInfo, Version const& version, std::vector<KeyRangeLocationInfo> const& locations, StorageMetrics const& min, StorageMetrics const& max, StorageMetrics const& permittedError ) {
															#line 7861 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<StorageMetrics>(new WaitStorageMetricsMultipleLocationsActor(tenantInfo, version, locations, min, max, permittedError));
															#line 37078 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 7909 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

															#line 37083 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via extractMetrics()
															#line 7910 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class ExtractMetricsActor>
															#line 7910 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class ExtractMetricsActorState {
															#line 37090 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 7910 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	ExtractMetricsActorState(Future<std::pair<Optional<StorageMetrics>, int>> const& fMetrics) 
															#line 7910 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 7910 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : fMetrics(fMetrics)
															#line 37097 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("extractMetrics", reinterpret_cast<unsigned long>(this));

	}
	~ExtractMetricsActorState() 
	{
		fdb_probe_actor_destroy("extractMetrics", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 7911 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<std::pair<Optional<StorageMetrics>, int>> __when_expr_0 = fMetrics;
															#line 7911 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<ExtractMetricsActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 37114 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<ExtractMetricsActor*>(this)->actor_wait_state = 1;
															#line 7911 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< ExtractMetricsActor, 0, std::pair<Optional<StorageMetrics>, int> >*>(static_cast<ExtractMetricsActor*>(this)));
															#line 37119 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~ExtractMetricsActorState();
		static_cast<ExtractMetricsActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(std::pair<Optional<StorageMetrics>, int> const& x,int loopDepth) 
	{
															#line 7912 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<ExtractMetricsActor*>(this)->SAV<StorageMetrics>::futures) { (void)(x.first.get()); this->~ExtractMetricsActorState(); static_cast<ExtractMetricsActor*>(this)->destroy(); return 0; }
															#line 37142 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<ExtractMetricsActor*>(this)->SAV< StorageMetrics >::value()) StorageMetrics(x.first.get());
		this->~ExtractMetricsActorState();
		static_cast<ExtractMetricsActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1(std::pair<Optional<StorageMetrics>, int> && x,int loopDepth) 
	{
															#line 7912 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<ExtractMetricsActor*>(this)->SAV<StorageMetrics>::futures) { (void)(x.first.get()); this->~ExtractMetricsActorState(); static_cast<ExtractMetricsActor*>(this)->destroy(); return 0; }
															#line 37154 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<ExtractMetricsActor*>(this)->SAV< StorageMetrics >::value()) StorageMetrics(x.first.get());
		this->~ExtractMetricsActorState();
		static_cast<ExtractMetricsActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1when1(std::pair<Optional<StorageMetrics>, int> const& x,int loopDepth) 
	{
		loopDepth = a_body1cont1(x, loopDepth);

		return loopDepth;
	}
	int a_body1when1(std::pair<Optional<StorageMetrics>, int> && x,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(x), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<ExtractMetricsActor*>(this)->actor_wait_state > 0) static_cast<ExtractMetricsActor*>(this)->actor_wait_state = 0;
		static_cast<ExtractMetricsActor*>(this)->ActorCallback< ExtractMetricsActor, 0, std::pair<Optional<StorageMetrics>, int> >::remove();

	}
	void a_callback_fire(ActorCallback< ExtractMetricsActor, 0, std::pair<Optional<StorageMetrics>, int> >*,std::pair<Optional<StorageMetrics>, int> const& value) 
	{
		fdb_probe_actor_enter("extractMetrics", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("extractMetrics", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< ExtractMetricsActor, 0, std::pair<Optional<StorageMetrics>, int> >*,std::pair<Optional<StorageMetrics>, int> && value) 
	{
		fdb_probe_actor_enter("extractMetrics", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("extractMetrics", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< ExtractMetricsActor, 0, std::pair<Optional<StorageMetrics>, int> >*,Error err) 
	{
		fdb_probe_actor_enter("extractMetrics", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("extractMetrics", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 7910 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Future<std::pair<Optional<StorageMetrics>, int>> fMetrics;
															#line 37227 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via extractMetrics()
															#line 7910 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class ExtractMetricsActor final : public Actor<StorageMetrics>, public ActorCallback< ExtractMetricsActor, 0, std::pair<Optional<StorageMetrics>, int> >, public FastAllocated<ExtractMetricsActor>, public ExtractMetricsActorState<ExtractMetricsActor> {
															#line 37232 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<ExtractMetricsActor>::operator new;
	using FastAllocated<ExtractMetricsActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<StorageMetrics>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< ExtractMetricsActor, 0, std::pair<Optional<StorageMetrics>, int> >;
															#line 7910 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	ExtractMetricsActor(Future<std::pair<Optional<StorageMetrics>, int>> const& fMetrics) 
															#line 37243 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<StorageMetrics>(),
		   ExtractMetricsActorState<ExtractMetricsActor>(fMetrics)
	{
		fdb_probe_actor_enter("extractMetrics", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("extractMetrics");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("extractMetrics", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< ExtractMetricsActor, 0, std::pair<Optional<StorageMetrics>, int> >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 7910 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<StorageMetrics> extractMetrics( Future<std::pair<Optional<StorageMetrics>, int>> const& fMetrics ) {
															#line 7910 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<StorageMetrics>(new ExtractMetricsActor(fMetrics));
															#line 37271 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 7914 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

															#line 37276 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via getReadHotRanges()
															#line 7915 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class GetReadHotRangesActor>
															#line 7915 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetReadHotRangesActorState {
															#line 37283 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 7915 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetReadHotRangesActorState(Database const& cx,KeyRange const& keys) 
															#line 7915 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 7915 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : cx(cx),
															#line 7915 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   keys(keys),
															#line 7916 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   span("NAPI:GetReadHotRanges"_loc)
															#line 37294 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("getReadHotRanges", reinterpret_cast<unsigned long>(this));

	}
	~GetReadHotRangesActorState() 
	{
		fdb_probe_actor_destroy("getReadHotRanges", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 7917 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			;
															#line 37309 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~GetReadHotRangesActorState();
		static_cast<GetReadHotRangesActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
															#line 7918 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		int64_t shardLimit = 100;
															#line 7920 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<std::vector<KeyRangeLocationInfo>> __when_expr_0 = getKeyRangeLocations(cx, TenantInfo(), keys, shardLimit, Reverse::False, &StorageServerInterface::getReadHotRanges, span.context, Optional<UID>(), UseProvisionalProxies::False, latestVersion);
															#line 7920 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<GetReadHotRangesActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 37343 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
		static_cast<GetReadHotRangesActor*>(this)->actor_wait_state = 1;
															#line 7920 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< GetReadHotRangesActor, 0, std::vector<KeyRangeLocationInfo> >*>(static_cast<GetReadHotRangesActor*>(this)));
															#line 37348 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont1(std::vector<KeyRangeLocationInfo> const& locations,int loopDepth) 
	{
		try {
															#line 7936 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			nLocs = locations.size();
															#line 7943 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			fReplies = std::vector<Future<ReadHotSubRangeReply>>(nLocs);
															#line 7944 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			KeyRef partBegin, partEnd;
															#line 7945 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			for(int i = 0;i < nLocs;i++) {
															#line 7946 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				partBegin = (i == 0) ? keys.begin : locations[i].range.begin;
															#line 7947 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				partEnd = (i == nLocs - 1) ? keys.end : locations[i].range.end;
															#line 7948 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				ReadHotSubRangeRequest req(KeyRangeRef(partBegin, partEnd));
															#line 7949 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				fReplies[i] = loadBalance(locations[i].locations->locations(), &StorageServerInterface::getReadHotRanges, req, TaskPriority::DataDistribution);
															#line 37372 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 7955 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_1 = waitForAll(fReplies);
															#line 7955 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<GetReadHotRangesActor*>(this)->actor_wait_state < 0) return a_body1loopBody1cont1Catch1(actor_cancelled(), loopDepth);
															#line 37378 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1cont1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont1when1(__when_expr_1.get(), loopDepth); };
			static_cast<GetReadHotRangesActor*>(this)->actor_wait_state = 2;
															#line 7955 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< GetReadHotRangesActor, 1, Void >*>(static_cast<GetReadHotRangesActor*>(this)));
															#line 37383 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1cont1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1cont1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(std::vector<KeyRangeLocationInfo> && locations,int loopDepth) 
	{
		try {
															#line 7936 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			nLocs = locations.size();
															#line 7943 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			fReplies = std::vector<Future<ReadHotSubRangeReply>>(nLocs);
															#line 7944 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			KeyRef partBegin, partEnd;
															#line 7945 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			for(int i = 0;i < nLocs;i++) {
															#line 7946 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				partBegin = (i == 0) ? keys.begin : locations[i].range.begin;
															#line 7947 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				partEnd = (i == nLocs - 1) ? keys.end : locations[i].range.end;
															#line 7948 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				ReadHotSubRangeRequest req(KeyRangeRef(partBegin, partEnd));
															#line 7949 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				fReplies[i] = loadBalance(locations[i].locations->locations(), &StorageServerInterface::getReadHotRanges, req, TaskPriority::DataDistribution);
															#line 37413 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 7955 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_1 = waitForAll(fReplies);
															#line 7955 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<GetReadHotRangesActor*>(this)->actor_wait_state < 0) return a_body1loopBody1cont1Catch1(actor_cancelled(), loopDepth);
															#line 37419 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1cont1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont1when1(__when_expr_1.get(), loopDepth); };
			static_cast<GetReadHotRangesActor*>(this)->actor_wait_state = 2;
															#line 7955 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< GetReadHotRangesActor, 1, Void >*>(static_cast<GetReadHotRangesActor*>(this)));
															#line 37424 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1cont1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1cont1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1when1(std::vector<KeyRangeLocationInfo> const& locations,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(locations, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(std::vector<KeyRangeLocationInfo> && locations,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(std::move(locations), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<GetReadHotRangesActor*>(this)->actor_wait_state > 0) static_cast<GetReadHotRangesActor*>(this)->actor_wait_state = 0;
		static_cast<GetReadHotRangesActor*>(this)->ActorCallback< GetReadHotRangesActor, 0, std::vector<KeyRangeLocationInfo> >::remove();

	}
	void a_callback_fire(ActorCallback< GetReadHotRangesActor, 0, std::vector<KeyRangeLocationInfo> >*,std::vector<KeyRangeLocationInfo> const& value) 
	{
		fdb_probe_actor_enter("getReadHotRanges", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getReadHotRanges", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< GetReadHotRangesActor, 0, std::vector<KeyRangeLocationInfo> >*,std::vector<KeyRangeLocationInfo> && value) 
	{
		fdb_probe_actor_enter("getReadHotRanges", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getReadHotRanges", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< GetReadHotRangesActor, 0, std::vector<KeyRangeLocationInfo> >*,Error err) 
	{
		fdb_probe_actor_enter("getReadHotRanges", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getReadHotRanges", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1cont2(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1cont1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 7973 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (e.code() != error_code_wrong_shard_server && e.code() != error_code_all_alternatives_failed)
															#line 37509 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 7974 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				TraceEvent(SevError, "GetReadHotSubRangesError").error(e);
															#line 7975 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				return a_body1Catch1(e, std::max(0, loopDepth - 1));
															#line 37515 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 7977 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			cx->invalidateCache({}, keys);
															#line 7978 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_2 = delay(CLIENT_KNOBS->WRONG_SHARD_SERVER_DELAY, TaskPriority::DataDistribution);
															#line 7978 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<GetReadHotRangesActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 37523 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1cont1Catch1when1(__when_expr_2.get(), loopDepth); };
			static_cast<GetReadHotRangesActor*>(this)->actor_wait_state = 3;
															#line 7978 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< GetReadHotRangesActor, 2, Void >*>(static_cast<GetReadHotRangesActor*>(this)));
															#line 37528 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont3(Void const& _,int loopDepth) 
	{
															#line 7957 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (nLocs == 1)
															#line 37543 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 7958 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			CODE_PROBE(true, "Single-shard read hot range request");
															#line 7959 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<GetReadHotRangesActor*>(this)->SAV<Standalone<VectorRef<ReadHotRangeWithMetrics>>>::futures) { (void)(fReplies[0].get().readHotRanges); this->~GetReadHotRangesActorState(); static_cast<GetReadHotRangesActor*>(this)->destroy(); return 0; }
															#line 37549 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<GetReadHotRangesActor*>(this)->SAV< Standalone<VectorRef<ReadHotRangeWithMetrics>> >::value()) Standalone<VectorRef<ReadHotRangeWithMetrics>>(fReplies[0].get().readHotRanges);
			this->~GetReadHotRangesActorState();
			static_cast<GetReadHotRangesActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
		else
		{
															#line 7961 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			CODE_PROBE(true, "Multi-shard read hot range request");
															#line 7962 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			Standalone<VectorRef<ReadHotRangeWithMetrics>> results;
															#line 7963 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			for(int i = 0;i < nLocs;i++) {
															#line 7964 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				results.append(results.arena(), fReplies[i].get().readHotRanges.begin(), fReplies[i].get().readHotRanges.size());
															#line 7967 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				results.arena().dependsOn(fReplies[i].get().readHotRanges.arena());
															#line 37567 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 7970 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<GetReadHotRangesActor*>(this)->SAV<Standalone<VectorRef<ReadHotRangeWithMetrics>>>::futures) { (void)(results); this->~GetReadHotRangesActorState(); static_cast<GetReadHotRangesActor*>(this)->destroy(); return 0; }
															#line 37571 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<GetReadHotRangesActor*>(this)->SAV< Standalone<VectorRef<ReadHotRangeWithMetrics>> >::value()) Standalone<VectorRef<ReadHotRangeWithMetrics>>(results);
			this->~GetReadHotRangesActorState();
			static_cast<GetReadHotRangesActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}

		return loopDepth;
	}
	int a_body1loopBody1cont3(Void && _,int loopDepth) 
	{
															#line 7957 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (nLocs == 1)
															#line 37584 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 7958 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			CODE_PROBE(true, "Single-shard read hot range request");
															#line 7959 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<GetReadHotRangesActor*>(this)->SAV<Standalone<VectorRef<ReadHotRangeWithMetrics>>>::futures) { (void)(fReplies[0].get().readHotRanges); this->~GetReadHotRangesActorState(); static_cast<GetReadHotRangesActor*>(this)->destroy(); return 0; }
															#line 37590 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<GetReadHotRangesActor*>(this)->SAV< Standalone<VectorRef<ReadHotRangeWithMetrics>> >::value()) Standalone<VectorRef<ReadHotRangeWithMetrics>>(fReplies[0].get().readHotRanges);
			this->~GetReadHotRangesActorState();
			static_cast<GetReadHotRangesActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
		else
		{
															#line 7961 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			CODE_PROBE(true, "Multi-shard read hot range request");
															#line 7962 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			Standalone<VectorRef<ReadHotRangeWithMetrics>> results;
															#line 7963 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			for(int i = 0;i < nLocs;i++) {
															#line 7964 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				results.append(results.arena(), fReplies[i].get().readHotRanges.begin(), fReplies[i].get().readHotRanges.size());
															#line 7967 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				results.arena().dependsOn(fReplies[i].get().readHotRanges.arena());
															#line 37608 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 7970 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<GetReadHotRangesActor*>(this)->SAV<Standalone<VectorRef<ReadHotRangeWithMetrics>>>::futures) { (void)(results); this->~GetReadHotRangesActorState(); static_cast<GetReadHotRangesActor*>(this)->destroy(); return 0; }
															#line 37612 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<GetReadHotRangesActor*>(this)->SAV< Standalone<VectorRef<ReadHotRangeWithMetrics>> >::value()) Standalone<VectorRef<ReadHotRangeWithMetrics>>(results);
			this->~GetReadHotRangesActorState();
			static_cast<GetReadHotRangesActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<GetReadHotRangesActor*>(this)->actor_wait_state > 0) static_cast<GetReadHotRangesActor*>(this)->actor_wait_state = 0;
		static_cast<GetReadHotRangesActor*>(this)->ActorCallback< GetReadHotRangesActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetReadHotRangesActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getReadHotRanges", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getReadHotRanges", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< GetReadHotRangesActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getReadHotRanges", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getReadHotRanges", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< GetReadHotRangesActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getReadHotRanges", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getReadHotRanges", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1loopBody1cont1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<GetReadHotRangesActor*>(this)->actor_wait_state > 0) static_cast<GetReadHotRangesActor*>(this)->actor_wait_state = 0;
		static_cast<GetReadHotRangesActor*>(this)->ActorCallback< GetReadHotRangesActor, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetReadHotRangesActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getReadHotRanges", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getReadHotRanges", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< GetReadHotRangesActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getReadHotRanges", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getReadHotRanges", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< GetReadHotRangesActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getReadHotRanges", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getReadHotRanges", reinterpret_cast<unsigned long>(this), 2);

	}
															#line 7915 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Database cx;
															#line 7915 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeyRange keys;
															#line 7916 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Span span;
															#line 7936 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	int nLocs;
															#line 7943 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	std::vector<Future<ReadHotSubRangeReply>> fReplies;
															#line 37769 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via getReadHotRanges()
															#line 7915 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetReadHotRangesActor final : public Actor<Standalone<VectorRef<ReadHotRangeWithMetrics>>>, public ActorCallback< GetReadHotRangesActor, 0, std::vector<KeyRangeLocationInfo> >, public ActorCallback< GetReadHotRangesActor, 1, Void >, public ActorCallback< GetReadHotRangesActor, 2, Void >, public FastAllocated<GetReadHotRangesActor>, public GetReadHotRangesActorState<GetReadHotRangesActor> {
															#line 37774 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<GetReadHotRangesActor>::operator new;
	using FastAllocated<GetReadHotRangesActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Standalone<VectorRef<ReadHotRangeWithMetrics>>>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< GetReadHotRangesActor, 0, std::vector<KeyRangeLocationInfo> >;
friend struct ActorCallback< GetReadHotRangesActor, 1, Void >;
friend struct ActorCallback< GetReadHotRangesActor, 2, Void >;
															#line 7915 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetReadHotRangesActor(Database const& cx,KeyRange const& keys) 
															#line 37787 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Standalone<VectorRef<ReadHotRangeWithMetrics>>>(),
		   GetReadHotRangesActorState<GetReadHotRangesActor>(cx, keys)
	{
		fdb_probe_actor_enter("getReadHotRanges", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("getReadHotRanges");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("getReadHotRanges", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< GetReadHotRangesActor, 0, std::vector<KeyRangeLocationInfo> >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< GetReadHotRangesActor, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< GetReadHotRangesActor, 2, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 7915 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<Standalone<VectorRef<ReadHotRangeWithMetrics>>> getReadHotRanges( Database const& cx, KeyRange const& keys ) {
															#line 7915 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Standalone<VectorRef<ReadHotRangeWithMetrics>>>(new GetReadHotRangesActor(cx, keys));
															#line 37817 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 7982 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

															#line 37822 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via waitStorageMetricsWithLocation()
															#line 7983 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class WaitStorageMetricsWithLocationActor>
															#line 7983 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class WaitStorageMetricsWithLocationActorState {
															#line 37829 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 7983 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	WaitStorageMetricsWithLocationActorState(TenantInfo const& tenantInfo,Version const& version,KeyRange const& keys,std::vector<KeyRangeLocationInfo> const& locations,StorageMetrics const& min,StorageMetrics const& max,StorageMetrics const& permittedError) 
															#line 7983 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 7983 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : tenantInfo(tenantInfo),
															#line 7983 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   version(version),
															#line 7983 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   keys(keys),
															#line 7983 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   locations(locations),
															#line 7983 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   min(min),
															#line 7983 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   max(max),
															#line 7983 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   permittedError(permittedError)
															#line 37848 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("waitStorageMetricsWithLocation", reinterpret_cast<unsigned long>(this));

	}
	~WaitStorageMetricsWithLocationActorState() 
	{
		fdb_probe_actor_destroy("waitStorageMetricsWithLocation", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 7990 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			Future<StorageMetrics> fx;
															#line 7991 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (locations.size() > 1)
															#line 37865 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 7992 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				fx = waitStorageMetricsMultipleLocations(tenantInfo, version, locations, min, max, permittedError);
															#line 37869 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
			else
			{
															#line 7994 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				WaitMetricsRequest req(tenantInfo, version, keys, min, max);
															#line 7995 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				fx = loadBalance(locations[0].locations->locations(), &StorageServerInterface::waitMetrics, req, TaskPriority::DataDistribution);
															#line 37877 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 8000 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<StorageMetrics> __when_expr_0 = fx;
															#line 8000 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<WaitStorageMetricsWithLocationActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 37883 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<WaitStorageMetricsWithLocationActor*>(this)->actor_wait_state = 1;
															#line 8000 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< WaitStorageMetricsWithLocationActor, 0, StorageMetrics >*>(static_cast<WaitStorageMetricsWithLocationActor*>(this)));
															#line 37888 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~WaitStorageMetricsWithLocationActorState();
		static_cast<WaitStorageMetricsWithLocationActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(StorageMetrics const& x,int loopDepth) 
	{
															#line 8001 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<WaitStorageMetricsWithLocationActor*>(this)->SAV<Optional<StorageMetrics>>::futures) { (void)(x); this->~WaitStorageMetricsWithLocationActorState(); static_cast<WaitStorageMetricsWithLocationActor*>(this)->destroy(); return 0; }
															#line 37911 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<WaitStorageMetricsWithLocationActor*>(this)->SAV< Optional<StorageMetrics> >::value()) Optional<StorageMetrics>(x);
		this->~WaitStorageMetricsWithLocationActorState();
		static_cast<WaitStorageMetricsWithLocationActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1(StorageMetrics && x,int loopDepth) 
	{
															#line 8001 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<WaitStorageMetricsWithLocationActor*>(this)->SAV<Optional<StorageMetrics>>::futures) { (void)(x); this->~WaitStorageMetricsWithLocationActorState(); static_cast<WaitStorageMetricsWithLocationActor*>(this)->destroy(); return 0; }
															#line 37923 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<WaitStorageMetricsWithLocationActor*>(this)->SAV< Optional<StorageMetrics> >::value()) Optional<StorageMetrics>(x);
		this->~WaitStorageMetricsWithLocationActorState();
		static_cast<WaitStorageMetricsWithLocationActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1when1(StorageMetrics const& x,int loopDepth) 
	{
		loopDepth = a_body1cont1(x, loopDepth);

		return loopDepth;
	}
	int a_body1when1(StorageMetrics && x,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(x), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<WaitStorageMetricsWithLocationActor*>(this)->actor_wait_state > 0) static_cast<WaitStorageMetricsWithLocationActor*>(this)->actor_wait_state = 0;
		static_cast<WaitStorageMetricsWithLocationActor*>(this)->ActorCallback< WaitStorageMetricsWithLocationActor, 0, StorageMetrics >::remove();

	}
	void a_callback_fire(ActorCallback< WaitStorageMetricsWithLocationActor, 0, StorageMetrics >*,StorageMetrics const& value) 
	{
		fdb_probe_actor_enter("waitStorageMetricsWithLocation", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitStorageMetricsWithLocation", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< WaitStorageMetricsWithLocationActor, 0, StorageMetrics >*,StorageMetrics && value) 
	{
		fdb_probe_actor_enter("waitStorageMetricsWithLocation", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitStorageMetricsWithLocation", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< WaitStorageMetricsWithLocationActor, 0, StorageMetrics >*,Error err) 
	{
		fdb_probe_actor_enter("waitStorageMetricsWithLocation", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitStorageMetricsWithLocation", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 7983 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	TenantInfo tenantInfo;
															#line 7983 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Version version;
															#line 7983 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeyRange keys;
															#line 7983 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	std::vector<KeyRangeLocationInfo> locations;
															#line 7983 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	StorageMetrics min;
															#line 7983 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	StorageMetrics max;
															#line 7983 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	StorageMetrics permittedError;
															#line 38008 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via waitStorageMetricsWithLocation()
															#line 7983 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class WaitStorageMetricsWithLocationActor final : public Actor<Optional<StorageMetrics>>, public ActorCallback< WaitStorageMetricsWithLocationActor, 0, StorageMetrics >, public FastAllocated<WaitStorageMetricsWithLocationActor>, public WaitStorageMetricsWithLocationActorState<WaitStorageMetricsWithLocationActor> {
															#line 38013 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<WaitStorageMetricsWithLocationActor>::operator new;
	using FastAllocated<WaitStorageMetricsWithLocationActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Optional<StorageMetrics>>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< WaitStorageMetricsWithLocationActor, 0, StorageMetrics >;
															#line 7983 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	WaitStorageMetricsWithLocationActor(TenantInfo const& tenantInfo,Version const& version,KeyRange const& keys,std::vector<KeyRangeLocationInfo> const& locations,StorageMetrics const& min,StorageMetrics const& max,StorageMetrics const& permittedError) 
															#line 38024 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Optional<StorageMetrics>>(),
		   WaitStorageMetricsWithLocationActorState<WaitStorageMetricsWithLocationActor>(tenantInfo, version, keys, locations, min, max, permittedError)
	{
		fdb_probe_actor_enter("waitStorageMetricsWithLocation", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("waitStorageMetricsWithLocation");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("waitStorageMetricsWithLocation", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< WaitStorageMetricsWithLocationActor, 0, StorageMetrics >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 7983 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<Optional<StorageMetrics>> waitStorageMetricsWithLocation( TenantInfo const& tenantInfo, Version const& version, KeyRange const& keys, std::vector<KeyRangeLocationInfo> const& locations, StorageMetrics const& min, StorageMetrics const& max, StorageMetrics const& permittedError ) {
															#line 7983 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Optional<StorageMetrics>>(new WaitStorageMetricsWithLocationActor(tenantInfo, version, keys, locations, min, max, permittedError));
															#line 38052 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 8003 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

															#line 38057 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via waitStorageMetrics()
															#line 8004 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class WaitStorageMetricsActor>
															#line 8004 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class WaitStorageMetricsActorState {
															#line 38064 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 8004 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	WaitStorageMetricsActorState(Database const& cx,KeyRange const& keys,StorageMetrics const& min,StorageMetrics const& max,StorageMetrics const& permittedError,int const& shardLimit,int const& expectedShardCount,Optional<Reference<TransactionState>> const& trState) 
															#line 8004 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 8004 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : cx(cx),
															#line 8004 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   keys(keys),
															#line 8004 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   min(min),
															#line 8004 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   max(max),
															#line 8004 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   permittedError(permittedError),
															#line 8004 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   shardLimit(shardLimit),
															#line 8004 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   expectedShardCount(expectedShardCount),
															#line 8004 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   trState(trState),
															#line 8013 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   span("NAPI:WaitStorageMetrics"_loc, generateSpanID(cx->transactionTracingSample))
															#line 38087 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("waitStorageMetrics", reinterpret_cast<unsigned long>(this));

	}
	~WaitStorageMetricsActorState() 
	{
		fdb_probe_actor_destroy("waitStorageMetrics", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 8014 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			;
															#line 38102 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~WaitStorageMetricsActorState();
		static_cast<WaitStorageMetricsActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
															#line 8015 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (trState.present())
															#line 38132 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 8016 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_0 = trState.get()->startTransaction();
															#line 8016 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<WaitStorageMetricsActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 38138 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
			static_cast<WaitStorageMetricsActor*>(this)->actor_wait_state = 1;
															#line 8016 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< WaitStorageMetricsActor, 0, Void >*>(static_cast<WaitStorageMetricsActor*>(this)));
															#line 38143 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1loopBody1cont1(loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
															#line 8018 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<TenantInfo> __when_expr_1 = trState.present() ? populateAndGetTenant(trState.get(), keys.begin) : TenantInfo();
															#line 8018 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<WaitStorageMetricsActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 38159 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<WaitStorageMetricsActor*>(this)->actor_wait_state = 2;
															#line 8018 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< WaitStorageMetricsActor, 1, TenantInfo >*>(static_cast<WaitStorageMetricsActor*>(this)));
															#line 38164 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<WaitStorageMetricsActor*>(this)->actor_wait_state > 0) static_cast<WaitStorageMetricsActor*>(this)->actor_wait_state = 0;
		static_cast<WaitStorageMetricsActor*>(this)->ActorCallback< WaitStorageMetricsActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< WaitStorageMetricsActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("waitStorageMetrics", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitStorageMetrics", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< WaitStorageMetricsActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("waitStorageMetrics", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitStorageMetrics", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< WaitStorageMetricsActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("waitStorageMetrics", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitStorageMetrics", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1cont3(int loopDepth) 
	{
															#line 8020 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		version = trState.present() ? trState.get()->readVersion() : latestVersion;
															#line 8021 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<std::vector<KeyRangeLocationInfo>> __when_expr_2 = getKeyRangeLocations(cx, tenantInfo, keys, shardLimit, Reverse::False, &StorageServerInterface::waitMetrics, span.context, Optional<UID>(), UseProvisionalProxies::False, version);
															#line 8021 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<WaitStorageMetricsActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 38252 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1cont3when1(__when_expr_2.get(), loopDepth); };
		static_cast<WaitStorageMetricsActor*>(this)->actor_wait_state = 3;
															#line 8021 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< WaitStorageMetricsActor, 2, std::vector<KeyRangeLocationInfo> >*>(static_cast<WaitStorageMetricsActor*>(this)));
															#line 38257 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont1when1(TenantInfo const& __tenantInfo,int loopDepth) 
	{
															#line 8018 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		tenantInfo = __tenantInfo;
															#line 38266 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1when1(TenantInfo && __tenantInfo,int loopDepth) 
	{
		tenantInfo = std::move(__tenantInfo);
		loopDepth = a_body1loopBody1cont3(loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<WaitStorageMetricsActor*>(this)->actor_wait_state > 0) static_cast<WaitStorageMetricsActor*>(this)->actor_wait_state = 0;
		static_cast<WaitStorageMetricsActor*>(this)->ActorCallback< WaitStorageMetricsActor, 1, TenantInfo >::remove();

	}
	void a_callback_fire(ActorCallback< WaitStorageMetricsActor, 1, TenantInfo >*,TenantInfo const& value) 
	{
		fdb_probe_actor_enter("waitStorageMetrics", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitStorageMetrics", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< WaitStorageMetricsActor, 1, TenantInfo >*,TenantInfo && value) 
	{
		fdb_probe_actor_enter("waitStorageMetrics", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitStorageMetrics", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< WaitStorageMetricsActor, 1, TenantInfo >*,Error err) 
	{
		fdb_probe_actor_enter("waitStorageMetrics", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitStorageMetrics", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1loopBody1cont4(int loopDepth) 
	{
															#line 8032 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (expectedShardCount >= 0 && locations.size() != expectedShardCount)
															#line 38333 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 8033 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<WaitStorageMetricsActor*>(this)->SAV<std::pair<Optional<StorageMetrics>, int>>::futures) { (void)(std::make_pair(Optional<StorageMetrics>(), locations.size())); this->~WaitStorageMetricsActorState(); static_cast<WaitStorageMetricsActor*>(this)->destroy(); return 0; }
															#line 38337 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<WaitStorageMetricsActor*>(this)->SAV< std::pair<Optional<StorageMetrics>, int> >::value()) std::pair<Optional<StorageMetrics>, int>(std::make_pair(Optional<StorageMetrics>(), locations.size()));
			this->~WaitStorageMetricsActorState();
			static_cast<WaitStorageMetricsActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 8038 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (locations.size() >= shardLimit)
															#line 38345 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 8039 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent(SevWarn, "WaitStorageMetricsPenalty") .detail("Keys", keys) .detail("Limit", shardLimit) .detail("LocationSize", locations.size()) .detail("JitteredSecondsOfPenitence", CLIENT_KNOBS->STORAGE_METRICS_TOO_MANY_SHARDS_DELAY);
															#line 8044 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_3 = delayJittered(CLIENT_KNOBS->STORAGE_METRICS_TOO_MANY_SHARDS_DELAY, TaskPriority::DataDistribution);
															#line 8044 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<WaitStorageMetricsActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 38353 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch1(__when_expr_3.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1cont4when1(__when_expr_3.get(), loopDepth); };
			static_cast<WaitStorageMetricsActor*>(this)->actor_wait_state = 4;
															#line 8044 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< WaitStorageMetricsActor, 3, Void >*>(static_cast<WaitStorageMetricsActor*>(this)));
															#line 38358 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1loopBody1cont5(loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont3when1(std::vector<KeyRangeLocationInfo> const& __locations,int loopDepth) 
	{
															#line 8021 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		locations = __locations;
															#line 38372 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont4(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont3when1(std::vector<KeyRangeLocationInfo> && __locations,int loopDepth) 
	{
		locations = std::move(__locations);
		loopDepth = a_body1loopBody1cont4(loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<WaitStorageMetricsActor*>(this)->actor_wait_state > 0) static_cast<WaitStorageMetricsActor*>(this)->actor_wait_state = 0;
		static_cast<WaitStorageMetricsActor*>(this)->ActorCallback< WaitStorageMetricsActor, 2, std::vector<KeyRangeLocationInfo> >::remove();

	}
	void a_callback_fire(ActorCallback< WaitStorageMetricsActor, 2, std::vector<KeyRangeLocationInfo> >*,std::vector<KeyRangeLocationInfo> const& value) 
	{
		fdb_probe_actor_enter("waitStorageMetrics", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont3when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitStorageMetrics", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< WaitStorageMetricsActor, 2, std::vector<KeyRangeLocationInfo> >*,std::vector<KeyRangeLocationInfo> && value) 
	{
		fdb_probe_actor_enter("waitStorageMetrics", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont3when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitStorageMetrics", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< WaitStorageMetricsActor, 2, std::vector<KeyRangeLocationInfo> >*,Error err) 
	{
		fdb_probe_actor_enter("waitStorageMetrics", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitStorageMetrics", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1loopBody1cont5(int loopDepth) 
	{
		try {
															#line 8051 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Optional<StorageMetrics>> __when_expr_4 = waitStorageMetricsWithLocation(tenantInfo, version, keys, locations, min, max, permittedError);
															#line 8051 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<WaitStorageMetricsActor*>(this)->actor_wait_state < 0) return a_body1loopBody1cont5Catch1(actor_cancelled(), loopDepth);
															#line 38442 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1loopBody1cont5Catch1(__when_expr_4.getError(), loopDepth); else return a_body1loopBody1cont5when1(__when_expr_4.get(), loopDepth); };
			static_cast<WaitStorageMetricsActor*>(this)->actor_wait_state = 5;
															#line 8051 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< WaitStorageMetricsActor, 4, Optional<StorageMetrics> >*>(static_cast<WaitStorageMetricsActor*>(this)));
															#line 38447 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1cont5Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1cont5Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont7(Void const& _,int loopDepth) 
	{
															#line 8046 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		cx->invalidateCache(tenantInfo.prefix, keys);
															#line 38462 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		return a_body1loopHead1(loopDepth); // continue

		return loopDepth;
	}
	int a_body1loopBody1cont7(Void && _,int loopDepth) 
	{
															#line 8046 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		cx->invalidateCache(tenantInfo.prefix, keys);
															#line 38471 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		return a_body1loopHead1(loopDepth); // continue

		return loopDepth;
	}
	int a_body1loopBody1cont4when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont7(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont4when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont7(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<WaitStorageMetricsActor*>(this)->actor_wait_state > 0) static_cast<WaitStorageMetricsActor*>(this)->actor_wait_state = 0;
		static_cast<WaitStorageMetricsActor*>(this)->ActorCallback< WaitStorageMetricsActor, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< WaitStorageMetricsActor, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("waitStorageMetrics", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1cont4when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitStorageMetrics", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< WaitStorageMetricsActor, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("waitStorageMetrics", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1cont4when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitStorageMetrics", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< WaitStorageMetricsActor, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("waitStorageMetrics", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitStorageMetrics", reinterpret_cast<unsigned long>(this), 3);

	}
	int a_body1loopBody1cont9(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1cont5Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 8057 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent(SevDebug, "WaitStorageMetricsHandleError").error(e);
															#line 8058 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (e.code() == error_code_wrong_shard_server || e.code() == error_code_all_alternatives_failed)
															#line 38552 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 8059 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				cx->invalidateCache(tenantInfo.prefix, keys);
															#line 8060 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				StrictFuture<Void> __when_expr_5 = delay(CLIENT_KNOBS->WRONG_SHARD_SERVER_DELAY, TaskPriority::DataDistribution);
															#line 8060 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (static_cast<WaitStorageMetricsActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 38560 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				if (__when_expr_5.isReady()) { if (__when_expr_5.isError()) return a_body1Catch1(__when_expr_5.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1cont5Catch1when1(__when_expr_5.get(), loopDepth); };
				static_cast<WaitStorageMetricsActor*>(this)->actor_wait_state = 6;
															#line 8060 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				__when_expr_5.addCallbackAndClear(static_cast<ActorCallback< WaitStorageMetricsActor, 5, Void >*>(static_cast<WaitStorageMetricsActor*>(this)));
															#line 38565 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				loopDepth = 0;
			}
			else
			{
															#line 8061 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (e.code() == error_code_future_version)
															#line 38572 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 8062 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					StrictFuture<Void> __when_expr_6 = delay(CLIENT_KNOBS->FUTURE_VERSION_RETRY_DELAY, TaskPriority::DataDistribution);
															#line 8062 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					if (static_cast<WaitStorageMetricsActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 38578 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					if (__when_expr_6.isReady()) { if (__when_expr_6.isError()) return a_body1Catch1(__when_expr_6.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1cont5Catch1when2(__when_expr_6.get(), loopDepth); };
					static_cast<WaitStorageMetricsActor*>(this)->actor_wait_state = 7;
															#line 8062 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					__when_expr_6.addCallbackAndClear(static_cast<ActorCallback< WaitStorageMetricsActor, 6, Void >*>(static_cast<WaitStorageMetricsActor*>(this)));
															#line 38583 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					loopDepth = 0;
				}
				else
				{
															#line 8064 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					bool ok = e.code() == error_code_tenant_not_found;
															#line 8065 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					TraceEvent(ok ? SevInfo : SevError, "WaitStorageMetricsError").error(e);
															#line 8066 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					return a_body1Catch1(e, std::max(0, loopDepth - 1));
															#line 38594 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
			}
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont10(Optional<StorageMetrics> const& res,int loopDepth) 
	{
															#line 8053 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (res.present())
															#line 38610 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 8054 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<WaitStorageMetricsActor*>(this)->SAV<std::pair<Optional<StorageMetrics>, int>>::futures) { (void)(std::make_pair(res, -1)); this->~WaitStorageMetricsActorState(); static_cast<WaitStorageMetricsActor*>(this)->destroy(); return 0; }
															#line 38614 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<WaitStorageMetricsActor*>(this)->SAV< std::pair<Optional<StorageMetrics>, int> >::value()) std::pair<Optional<StorageMetrics>, int>(std::make_pair(res, -1));
			this->~WaitStorageMetricsActorState();
			static_cast<WaitStorageMetricsActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
		loopDepth = a_body1loopBody1cont10cont3(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont10(Optional<StorageMetrics> && res,int loopDepth) 
	{
															#line 8053 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (res.present())
															#line 38628 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 8054 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<WaitStorageMetricsActor*>(this)->SAV<std::pair<Optional<StorageMetrics>, int>>::futures) { (void)(std::make_pair(res, -1)); this->~WaitStorageMetricsActorState(); static_cast<WaitStorageMetricsActor*>(this)->destroy(); return 0; }
															#line 38632 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<WaitStorageMetricsActor*>(this)->SAV< std::pair<Optional<StorageMetrics>, int> >::value()) std::pair<Optional<StorageMetrics>, int>(std::make_pair(res, -1));
			this->~WaitStorageMetricsActorState();
			static_cast<WaitStorageMetricsActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
		loopDepth = a_body1loopBody1cont10cont3(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont5when1(Optional<StorageMetrics> const& res,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont10(res, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont5when1(Optional<StorageMetrics> && res,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont10(std::move(res), loopDepth);

		return loopDepth;
	}
	void a_exitChoose5() 
	{
		if (static_cast<WaitStorageMetricsActor*>(this)->actor_wait_state > 0) static_cast<WaitStorageMetricsActor*>(this)->actor_wait_state = 0;
		static_cast<WaitStorageMetricsActor*>(this)->ActorCallback< WaitStorageMetricsActor, 4, Optional<StorageMetrics> >::remove();

	}
	void a_callback_fire(ActorCallback< WaitStorageMetricsActor, 4, Optional<StorageMetrics> >*,Optional<StorageMetrics> const& value) 
	{
		fdb_probe_actor_enter("waitStorageMetrics", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1loopBody1cont5when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont5Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont5Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitStorageMetrics", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_fire(ActorCallback< WaitStorageMetricsActor, 4, Optional<StorageMetrics> >*,Optional<StorageMetrics> && value) 
	{
		fdb_probe_actor_enter("waitStorageMetrics", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1loopBody1cont5when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont5Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont5Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitStorageMetrics", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_error(ActorCallback< WaitStorageMetricsActor, 4, Optional<StorageMetrics> >*,Error err) 
	{
		fdb_probe_actor_enter("waitStorageMetrics", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1loopBody1cont5Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont5Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont5Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitStorageMetrics", reinterpret_cast<unsigned long>(this), 4);

	}
	int a_body1loopBody1cont10cont3(int loopDepth) 
	{
		try {
			loopDepth = a_body1loopBody1cont9(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont5Catch1cont1(int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont9(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont5Catch1cont2(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont5Catch1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont5Catch1cont2(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont5Catch1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont5Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont5Catch1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont5Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont5Catch1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose6() 
	{
		if (static_cast<WaitStorageMetricsActor*>(this)->actor_wait_state > 0) static_cast<WaitStorageMetricsActor*>(this)->actor_wait_state = 0;
		static_cast<WaitStorageMetricsActor*>(this)->ActorCallback< WaitStorageMetricsActor, 5, Void >::remove();

	}
	void a_callback_fire(ActorCallback< WaitStorageMetricsActor, 5, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("waitStorageMetrics", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1loopBody1cont5Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitStorageMetrics", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_fire(ActorCallback< WaitStorageMetricsActor, 5, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("waitStorageMetrics", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1loopBody1cont5Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitStorageMetrics", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_error(ActorCallback< WaitStorageMetricsActor, 5, Void >*,Error err) 
	{
		fdb_probe_actor_enter("waitStorageMetrics", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitStorageMetrics", reinterpret_cast<unsigned long>(this), 5);

	}
	int a_body1loopBody1cont5Catch1cont3(int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont5Catch1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont5Catch1cont4(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont5Catch1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont5Catch1cont4(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont5Catch1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont5Catch1when2(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont5Catch1cont4(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont5Catch1when2(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont5Catch1cont4(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose7() 
	{
		if (static_cast<WaitStorageMetricsActor*>(this)->actor_wait_state > 0) static_cast<WaitStorageMetricsActor*>(this)->actor_wait_state = 0;
		static_cast<WaitStorageMetricsActor*>(this)->ActorCallback< WaitStorageMetricsActor, 6, Void >::remove();

	}
	void a_callback_fire(ActorCallback< WaitStorageMetricsActor, 6, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("waitStorageMetrics", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1loopBody1cont5Catch1when2(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitStorageMetrics", reinterpret_cast<unsigned long>(this), 6);

	}
	void a_callback_fire(ActorCallback< WaitStorageMetricsActor, 6, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("waitStorageMetrics", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1loopBody1cont5Catch1when2(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitStorageMetrics", reinterpret_cast<unsigned long>(this), 6);

	}
	void a_callback_error(ActorCallback< WaitStorageMetricsActor, 6, Void >*,Error err) 
	{
		fdb_probe_actor_enter("waitStorageMetrics", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitStorageMetrics", reinterpret_cast<unsigned long>(this), 6);

	}
															#line 8004 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Database cx;
															#line 8004 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeyRange keys;
															#line 8004 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	StorageMetrics min;
															#line 8004 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	StorageMetrics max;
															#line 8004 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	StorageMetrics permittedError;
															#line 8004 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	int shardLimit;
															#line 8004 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	int expectedShardCount;
															#line 8004 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Optional<Reference<TransactionState>> trState;
															#line 8013 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Span span;
															#line 8018 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	TenantInfo tenantInfo;
															#line 8020 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Version version;
															#line 8021 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	std::vector<KeyRangeLocationInfo> locations;
															#line 38904 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via waitStorageMetrics()
															#line 8004 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class WaitStorageMetricsActor final : public Actor<std::pair<Optional<StorageMetrics>, int>>, public ActorCallback< WaitStorageMetricsActor, 0, Void >, public ActorCallback< WaitStorageMetricsActor, 1, TenantInfo >, public ActorCallback< WaitStorageMetricsActor, 2, std::vector<KeyRangeLocationInfo> >, public ActorCallback< WaitStorageMetricsActor, 3, Void >, public ActorCallback< WaitStorageMetricsActor, 4, Optional<StorageMetrics> >, public ActorCallback< WaitStorageMetricsActor, 5, Void >, public ActorCallback< WaitStorageMetricsActor, 6, Void >, public FastAllocated<WaitStorageMetricsActor>, public WaitStorageMetricsActorState<WaitStorageMetricsActor> {
															#line 38909 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<WaitStorageMetricsActor>::operator new;
	using FastAllocated<WaitStorageMetricsActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<std::pair<Optional<StorageMetrics>, int>>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< WaitStorageMetricsActor, 0, Void >;
friend struct ActorCallback< WaitStorageMetricsActor, 1, TenantInfo >;
friend struct ActorCallback< WaitStorageMetricsActor, 2, std::vector<KeyRangeLocationInfo> >;
friend struct ActorCallback< WaitStorageMetricsActor, 3, Void >;
friend struct ActorCallback< WaitStorageMetricsActor, 4, Optional<StorageMetrics> >;
friend struct ActorCallback< WaitStorageMetricsActor, 5, Void >;
friend struct ActorCallback< WaitStorageMetricsActor, 6, Void >;
															#line 8004 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	WaitStorageMetricsActor(Database const& cx,KeyRange const& keys,StorageMetrics const& min,StorageMetrics const& max,StorageMetrics const& permittedError,int const& shardLimit,int const& expectedShardCount,Optional<Reference<TransactionState>> const& trState) 
															#line 38926 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<std::pair<Optional<StorageMetrics>, int>>(),
		   WaitStorageMetricsActorState<WaitStorageMetricsActor>(cx, keys, min, max, permittedError, shardLimit, expectedShardCount, trState)
	{
		fdb_probe_actor_enter("waitStorageMetrics", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("waitStorageMetrics");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("waitStorageMetrics", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< WaitStorageMetricsActor, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< WaitStorageMetricsActor, 1, TenantInfo >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< WaitStorageMetricsActor, 2, std::vector<KeyRangeLocationInfo> >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< WaitStorageMetricsActor, 3, Void >*)0, actor_cancelled()); break;
		case 5: this->a_callback_error((ActorCallback< WaitStorageMetricsActor, 4, Optional<StorageMetrics> >*)0, actor_cancelled()); break;
		case 6: this->a_callback_error((ActorCallback< WaitStorageMetricsActor, 5, Void >*)0, actor_cancelled()); break;
		case 7: this->a_callback_error((ActorCallback< WaitStorageMetricsActor, 6, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 8004 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<std::pair<Optional<StorageMetrics>, int>> waitStorageMetrics( Database const& cx, KeyRange const& keys, StorageMetrics const& min, StorageMetrics const& max, StorageMetrics const& permittedError, int const& shardLimit, int const& expectedShardCount, Optional<Reference<TransactionState>> const& trState ) {
															#line 8004 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<std::pair<Optional<StorageMetrics>, int>>(new WaitStorageMetricsActor(cx, keys, min, max, permittedError, shardLimit, expectedShardCount, trState));
															#line 38960 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 8071 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

Future<std::pair<Optional<StorageMetrics>, int>> DatabaseContext::waitStorageMetrics(
    KeyRange const& keys,
    StorageMetrics const& min,
    StorageMetrics const& max,
    StorageMetrics const& permittedError,
    int shardLimit,
    int expectedShardCount,
    Optional<Reference<TransactionState>> trState) {
	return ::waitStorageMetrics(Database(Reference<DatabaseContext>::addRef(this)),
	                            keys,
	                            min,
	                            max,
	                            permittedError,
	                            shardLimit,
	                            expectedShardCount,
	                            trState);
}

Future<StorageMetrics> DatabaseContext::getStorageMetrics(KeyRange const& keys,
                                                          int shardLimit,
                                                          Optional<Reference<TransactionState>> trState) {
	if (shardLimit > 0) {
		StorageMetrics m;
		m.bytes = -1;
		return extractMetrics(::waitStorageMetrics(Database(Reference<DatabaseContext>::addRef(this)),
		                                           keys,
		                                           StorageMetrics(),
		                                           m,
		                                           StorageMetrics(),
		                                           shardLimit,
		                                           -1,
		                                           trState));
	} else {
		return ::getStorageMetricsLargeKeyRange(Database(Reference<DatabaseContext>::addRef(this)), keys, trState);
	}
}

															#line 39002 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via waitDataDistributionMetricsList()
															#line 8109 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class WaitDataDistributionMetricsListActor>
															#line 8109 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class WaitDataDistributionMetricsListActorState {
															#line 39009 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 8109 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	WaitDataDistributionMetricsListActorState(Database const& cx,KeyRange const& keys,int const& shardLimit) 
															#line 8109 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 8109 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : cx(cx),
															#line 8109 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   keys(keys),
															#line 8109 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   shardLimit(shardLimit)
															#line 39020 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("waitDataDistributionMetricsList", reinterpret_cast<unsigned long>(this));

	}
	~WaitDataDistributionMetricsListActorState() 
	{
		fdb_probe_actor_destroy("waitDataDistributionMetricsList", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 8112 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			;
															#line 39035 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~WaitDataDistributionMetricsListActorState();
		static_cast<WaitDataDistributionMetricsListActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
															#line 8114 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_0 = cx->onProxiesChanged();
															#line 8113 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<WaitDataDistributionMetricsListActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 39067 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
															#line 8115 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<ErrorOr<GetDDMetricsReply>> __when_expr_1 = errorOr(basicLoadBalance(cx->getCommitProxies(UseProvisionalProxies::False), &CommitProxyInterface::getDDMetrics, GetDDMetricsRequest(keys, shardLimit)));
															#line 39071 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1when2(__when_expr_1.get(), loopDepth); };
		static_cast<WaitDataDistributionMetricsListActor*>(this)->actor_wait_state = 1;
															#line 8114 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< WaitDataDistributionMetricsListActor, 0, Void >*>(static_cast<WaitDataDistributionMetricsListActor*>(this)));
															#line 8115 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< WaitDataDistributionMetricsListActor, 1, ErrorOr<GetDDMetricsReply> >*>(static_cast<WaitDataDistributionMetricsListActor*>(this)));
															#line 39078 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when2(ErrorOr<GetDDMetricsReply> const& rep,int loopDepth) 
	{
															#line 8119 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (rep.isError())
															#line 39105 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 8120 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			return a_body1Catch1(rep.getError(), std::max(0, loopDepth - 1));
															#line 39109 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 8122 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<WaitDataDistributionMetricsListActor*>(this)->SAV<Standalone<VectorRef<DDMetricsRef>>>::futures) { (void)(rep.get().storageMetricsList); this->~WaitDataDistributionMetricsListActorState(); static_cast<WaitDataDistributionMetricsListActor*>(this)->destroy(); return 0; }
															#line 39113 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<WaitDataDistributionMetricsListActor*>(this)->SAV< Standalone<VectorRef<DDMetricsRef>> >::value()) Standalone<VectorRef<DDMetricsRef>>(rep.get().storageMetricsList);
		this->~WaitDataDistributionMetricsListActorState();
		static_cast<WaitDataDistributionMetricsListActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1when2(ErrorOr<GetDDMetricsReply> && rep,int loopDepth) 
	{
															#line 8119 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (rep.isError())
															#line 39125 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 8120 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			return a_body1Catch1(rep.getError(), std::max(0, loopDepth - 1));
															#line 39129 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 8122 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<WaitDataDistributionMetricsListActor*>(this)->SAV<Standalone<VectorRef<DDMetricsRef>>>::futures) { (void)(rep.get().storageMetricsList); this->~WaitDataDistributionMetricsListActorState(); static_cast<WaitDataDistributionMetricsListActor*>(this)->destroy(); return 0; }
															#line 39133 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<WaitDataDistributionMetricsListActor*>(this)->SAV< Standalone<VectorRef<DDMetricsRef>> >::value()) Standalone<VectorRef<DDMetricsRef>>(rep.get().storageMetricsList);
		this->~WaitDataDistributionMetricsListActorState();
		static_cast<WaitDataDistributionMetricsListActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<WaitDataDistributionMetricsListActor*>(this)->actor_wait_state > 0) static_cast<WaitDataDistributionMetricsListActor*>(this)->actor_wait_state = 0;
		static_cast<WaitDataDistributionMetricsListActor*>(this)->ActorCallback< WaitDataDistributionMetricsListActor, 0, Void >::remove();
		static_cast<WaitDataDistributionMetricsListActor*>(this)->ActorCallback< WaitDataDistributionMetricsListActor, 1, ErrorOr<GetDDMetricsReply> >::remove();

	}
	void a_callback_fire(ActorCallback< WaitDataDistributionMetricsListActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("waitDataDistributionMetricsList", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitDataDistributionMetricsList", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< WaitDataDistributionMetricsListActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("waitDataDistributionMetricsList", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitDataDistributionMetricsList", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< WaitDataDistributionMetricsListActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("waitDataDistributionMetricsList", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitDataDistributionMetricsList", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< WaitDataDistributionMetricsListActor, 1, ErrorOr<GetDDMetricsReply> >*,ErrorOr<GetDDMetricsReply> const& value) 
	{
		fdb_probe_actor_enter("waitDataDistributionMetricsList", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose1();
		try {
			a_body1loopBody1when2(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitDataDistributionMetricsList", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< WaitDataDistributionMetricsListActor, 1, ErrorOr<GetDDMetricsReply> >*,ErrorOr<GetDDMetricsReply> && value) 
	{
		fdb_probe_actor_enter("waitDataDistributionMetricsList", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose1();
		try {
			a_body1loopBody1when2(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitDataDistributionMetricsList", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< WaitDataDistributionMetricsListActor, 1, ErrorOr<GetDDMetricsReply> >*,Error err) 
	{
		fdb_probe_actor_enter("waitDataDistributionMetricsList", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitDataDistributionMetricsList", reinterpret_cast<unsigned long>(this), 1);

	}
															#line 8109 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Database cx;
															#line 8109 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeyRange keys;
															#line 8109 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	int shardLimit;
															#line 39244 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via waitDataDistributionMetricsList()
															#line 8109 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class WaitDataDistributionMetricsListActor final : public Actor<Standalone<VectorRef<DDMetricsRef>>>, public ActorCallback< WaitDataDistributionMetricsListActor, 0, Void >, public ActorCallback< WaitDataDistributionMetricsListActor, 1, ErrorOr<GetDDMetricsReply> >, public FastAllocated<WaitDataDistributionMetricsListActor>, public WaitDataDistributionMetricsListActorState<WaitDataDistributionMetricsListActor> {
															#line 39249 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<WaitDataDistributionMetricsListActor>::operator new;
	using FastAllocated<WaitDataDistributionMetricsListActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Standalone<VectorRef<DDMetricsRef>>>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< WaitDataDistributionMetricsListActor, 0, Void >;
friend struct ActorCallback< WaitDataDistributionMetricsListActor, 1, ErrorOr<GetDDMetricsReply> >;
															#line 8109 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	WaitDataDistributionMetricsListActor(Database const& cx,KeyRange const& keys,int const& shardLimit) 
															#line 39261 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Standalone<VectorRef<DDMetricsRef>>>(),
		   WaitDataDistributionMetricsListActorState<WaitDataDistributionMetricsListActor>(cx, keys, shardLimit)
	{
		fdb_probe_actor_enter("waitDataDistributionMetricsList", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("waitDataDistributionMetricsList");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("waitDataDistributionMetricsList", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< WaitDataDistributionMetricsListActor, 0, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 8109 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<Standalone<VectorRef<DDMetricsRef>>> waitDataDistributionMetricsList( Database const& cx, KeyRange const& keys, int const& shardLimit ) {
															#line 8109 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Standalone<VectorRef<DDMetricsRef>>>(new WaitDataDistributionMetricsListActor(cx, keys, shardLimit));
															#line 39289 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 8127 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

Future<Standalone<VectorRef<ReadHotRangeWithMetrics>>> DatabaseContext::getReadHotRanges(KeyRange const& keys) {
	return ::getReadHotRanges(Database(Reference<DatabaseContext>::addRef(this)), keys);
}

															#line 39298 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via getRangeSplitPoints()
															#line 8132 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class GetRangeSplitPointsActor>
															#line 8132 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetRangeSplitPointsActorState {
															#line 39305 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 8132 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetRangeSplitPointsActorState(Reference<TransactionState> const& trState,KeyRange const& keys,int64_t const& chunkSize) 
															#line 8132 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 8132 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : trState(trState),
															#line 8132 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   keys(keys),
															#line 8132 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   chunkSize(chunkSize),
															#line 8135 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   span("NAPI:GetRangeSplitPoints"_loc, trState->spanContext)
															#line 39318 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("getRangeSplitPoints", reinterpret_cast<unsigned long>(this));

	}
	~GetRangeSplitPointsActorState() 
	{
		fdb_probe_actor_destroy("getRangeSplitPoints", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 8137 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (trState->hasTenant())
															#line 39333 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 8138 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				StrictFuture<Void> __when_expr_0 = trState->startTransaction();
															#line 8138 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (static_cast<GetRangeSplitPointsActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 39339 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
				static_cast<GetRangeSplitPointsActor*>(this)->actor_wait_state = 1;
															#line 8138 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< GetRangeSplitPointsActor, 0, Void >*>(static_cast<GetRangeSplitPointsActor*>(this)));
															#line 39344 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				loopDepth = 0;
			}
			else
			{
				loopDepth = a_body1cont1(loopDepth);
			}
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~GetRangeSplitPointsActorState();
		static_cast<GetRangeSplitPointsActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 8141 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		;
															#line 39372 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont1loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1cont2(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont2(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<GetRangeSplitPointsActor*>(this)->actor_wait_state > 0) static_cast<GetRangeSplitPointsActor*>(this)->actor_wait_state = 0;
		static_cast<GetRangeSplitPointsActor*>(this)->ActorCallback< GetRangeSplitPointsActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetRangeSplitPointsActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getRangeSplitPoints", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeSplitPoints", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< GetRangeSplitPointsActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getRangeSplitPoints", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeSplitPoints", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< GetRangeSplitPointsActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getRangeSplitPoints", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeSplitPoints", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1cont1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1(int loopDepth) 
	{
															#line 8142 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<std::vector<KeyRangeLocationInfo>> __when_expr_1 = getKeyRangeLocations(trState, keys, CLIENT_KNOBS->TOO_MANY, Reverse::False, &StorageServerInterface::getRangeSplitPoints, UseTenant::True);
															#line 8142 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<GetRangeSplitPointsActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 39465 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), std::max(0, loopDepth - 1)); else return a_body1cont1loopBody1when1(__when_expr_1.get(), loopDepth); };
		static_cast<GetRangeSplitPointsActor*>(this)->actor_wait_state = 2;
															#line 8142 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< GetRangeSplitPointsActor, 1, std::vector<KeyRangeLocationInfo> >*>(static_cast<GetRangeSplitPointsActor*>(this)));
															#line 39470 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1(int loopDepth) 
	{
		try {
															#line 8150 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			nLocs = locations.size();
															#line 8151 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			fReplies = std::vector<Future<SplitRangeReply>>(nLocs);
															#line 8152 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			KeyRef partBegin, partEnd;
															#line 8153 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			for(int i = 0;i < nLocs;i++) {
															#line 8154 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				partBegin = (i == 0) ? keys.begin : locations[i].range.begin;
															#line 8155 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				partEnd = (i == nLocs - 1) ? keys.end : locations[i].range.end;
															#line 8156 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				SplitRangeRequest req(trState->getTenantInfo(), KeyRangeRef(partBegin, partEnd), chunkSize);
															#line 8157 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				fReplies[i] = loadBalance(locations[i].locations->locations(), &StorageServerInterface::getRangeSplitPoints, req, TaskPriority::DataDistribution);
															#line 39494 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 8163 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_2 = waitForAll(fReplies);
															#line 8163 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<GetRangeSplitPointsActor*>(this)->actor_wait_state < 0) return a_body1cont1loopBody1cont1Catch1(actor_cancelled(), loopDepth);
															#line 39500 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1cont1loopBody1cont1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont1loopBody1cont1when1(__when_expr_2.get(), loopDepth); };
			static_cast<GetRangeSplitPointsActor*>(this)->actor_wait_state = 3;
															#line 8163 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< GetRangeSplitPointsActor, 2, Void >*>(static_cast<GetRangeSplitPointsActor*>(this)));
															#line 39505 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1cont1loopBody1cont1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1cont1loopBody1cont1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont1loopBody1when1(std::vector<KeyRangeLocationInfo> const& __locations,int loopDepth) 
	{
															#line 8142 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		locations = __locations;
															#line 39520 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1when1(std::vector<KeyRangeLocationInfo> && __locations,int loopDepth) 
	{
		locations = std::move(__locations);
		loopDepth = a_body1cont1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<GetRangeSplitPointsActor*>(this)->actor_wait_state > 0) static_cast<GetRangeSplitPointsActor*>(this)->actor_wait_state = 0;
		static_cast<GetRangeSplitPointsActor*>(this)->ActorCallback< GetRangeSplitPointsActor, 1, std::vector<KeyRangeLocationInfo> >::remove();

	}
	void a_callback_fire(ActorCallback< GetRangeSplitPointsActor, 1, std::vector<KeyRangeLocationInfo> >*,std::vector<KeyRangeLocationInfo> const& value) 
	{
		fdb_probe_actor_enter("getRangeSplitPoints", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeSplitPoints", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< GetRangeSplitPointsActor, 1, std::vector<KeyRangeLocationInfo> >*,std::vector<KeyRangeLocationInfo> && value) 
	{
		fdb_probe_actor_enter("getRangeSplitPoints", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeSplitPoints", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< GetRangeSplitPointsActor, 1, std::vector<KeyRangeLocationInfo> >*,Error err) 
	{
		fdb_probe_actor_enter("getRangeSplitPoints", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeSplitPoints", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont1loopBody1cont2(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1cont1loopHead1(0);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 8184 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (e.code() == error_code_wrong_shard_server || e.code() == error_code_all_alternatives_failed)
															#line 39594 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 8185 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				trState->cx->invalidateCache(trState->tenant().mapRef(&Tenant::prefix), keys);
															#line 8186 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				StrictFuture<Void> __when_expr_3 = delay(CLIENT_KNOBS->WRONG_SHARD_SERVER_DELAY, TaskPriority::DataDistribution);
															#line 8186 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (static_cast<GetRangeSplitPointsActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 39602 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch1(__when_expr_3.getError(), std::max(0, loopDepth - 1)); else return a_body1cont1loopBody1cont1Catch1when1(__when_expr_3.get(), loopDepth); };
				static_cast<GetRangeSplitPointsActor*>(this)->actor_wait_state = 4;
															#line 8186 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< GetRangeSplitPointsActor, 3, Void >*>(static_cast<GetRangeSplitPointsActor*>(this)));
															#line 39607 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				loopDepth = 0;
			}
			else
			{
															#line 8188 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				TraceEvent(SevError, "GetRangeSplitPoints").error(e);
															#line 8189 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				return a_body1Catch1(e, std::max(0, loopDepth - 1));
															#line 39616 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1cont1loopBody1cont3(Void const& _,int loopDepth) 
	{
															#line 8164 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		Standalone<VectorRef<KeyRef>> results;
															#line 8166 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		results.push_back_deep(results.arena(), keys.begin);
															#line 8167 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for(int i = 0;i < nLocs;i++) {
															#line 8168 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (i > 0)
															#line 39637 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 8169 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				results.push_back_deep(results.arena(), locations[i].range.begin);
															#line 39641 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 8172 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (fReplies[i].get().splitPoints.size() > 0)
															#line 39645 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 8173 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				results.append( results.arena(), fReplies[i].get().splitPoints.begin(), fReplies[i].get().splitPoints.size());
															#line 8175 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				results.arena().dependsOn(fReplies[i].get().splitPoints.arena());
															#line 39651 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
		}
															#line 8178 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (results.back() != keys.end)
															#line 39656 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 8179 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			results.push_back_deep(results.arena(), keys.end);
															#line 39660 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 8182 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<GetRangeSplitPointsActor*>(this)->SAV<Standalone<VectorRef<KeyRef>>>::futures) { (void)(results); this->~GetRangeSplitPointsActorState(); static_cast<GetRangeSplitPointsActor*>(this)->destroy(); return 0; }
															#line 39664 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<GetRangeSplitPointsActor*>(this)->SAV< Standalone<VectorRef<KeyRef>> >::value()) Standalone<VectorRef<KeyRef>>(results);
		this->~GetRangeSplitPointsActorState();
		static_cast<GetRangeSplitPointsActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1loopBody1cont3(Void && _,int loopDepth) 
	{
															#line 8164 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		Standalone<VectorRef<KeyRef>> results;
															#line 8166 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		results.push_back_deep(results.arena(), keys.begin);
															#line 8167 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for(int i = 0;i < nLocs;i++) {
															#line 8168 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (i > 0)
															#line 39682 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 8169 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				results.push_back_deep(results.arena(), locations[i].range.begin);
															#line 39686 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 8172 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (fReplies[i].get().splitPoints.size() > 0)
															#line 39690 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 8173 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				results.append( results.arena(), fReplies[i].get().splitPoints.begin(), fReplies[i].get().splitPoints.size());
															#line 8175 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				results.arena().dependsOn(fReplies[i].get().splitPoints.arena());
															#line 39696 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
		}
															#line 8178 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (results.back() != keys.end)
															#line 39701 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 8179 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			results.push_back_deep(results.arena(), keys.end);
															#line 39705 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 8182 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<GetRangeSplitPointsActor*>(this)->SAV<Standalone<VectorRef<KeyRef>>>::futures) { (void)(results); this->~GetRangeSplitPointsActorState(); static_cast<GetRangeSplitPointsActor*>(this)->destroy(); return 0; }
															#line 39709 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<GetRangeSplitPointsActor*>(this)->SAV< Standalone<VectorRef<KeyRef>> >::value()) Standalone<VectorRef<KeyRef>>(results);
		this->~GetRangeSplitPointsActorState();
		static_cast<GetRangeSplitPointsActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont3(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont3(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<GetRangeSplitPointsActor*>(this)->actor_wait_state > 0) static_cast<GetRangeSplitPointsActor*>(this)->actor_wait_state = 0;
		static_cast<GetRangeSplitPointsActor*>(this)->ActorCallback< GetRangeSplitPointsActor, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetRangeSplitPointsActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getRangeSplitPoints", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont1loopBody1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1cont1Catch1(error, 0);
		} catch (...) {
			a_body1cont1loopBody1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeSplitPoints", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< GetRangeSplitPointsActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getRangeSplitPoints", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont1loopBody1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1cont1Catch1(error, 0);
		} catch (...) {
			a_body1cont1loopBody1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeSplitPoints", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< GetRangeSplitPointsActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getRangeSplitPoints", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont1loopBody1cont1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1cont1Catch1(error, 0);
		} catch (...) {
			a_body1cont1loopBody1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeSplitPoints", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1cont1loopBody1cont1Catch1cont1(int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont2(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1Catch1cont2(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont1Catch1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1Catch1cont2(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont1Catch1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont1Catch1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont1Catch1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<GetRangeSplitPointsActor*>(this)->actor_wait_state > 0) static_cast<GetRangeSplitPointsActor*>(this)->actor_wait_state = 0;
		static_cast<GetRangeSplitPointsActor*>(this)->ActorCallback< GetRangeSplitPointsActor, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetRangeSplitPointsActor, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getRangeSplitPoints", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont1loopBody1cont1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeSplitPoints", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< GetRangeSplitPointsActor, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getRangeSplitPoints", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont1loopBody1cont1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeSplitPoints", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< GetRangeSplitPointsActor, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getRangeSplitPoints", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getRangeSplitPoints", reinterpret_cast<unsigned long>(this), 3);

	}
															#line 8132 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<TransactionState> trState;
															#line 8132 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeyRange keys;
															#line 8132 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	int64_t chunkSize;
															#line 8135 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Span span;
															#line 8142 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	std::vector<KeyRangeLocationInfo> locations;
															#line 8150 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	int nLocs;
															#line 8151 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	std::vector<Future<SplitRangeReply>> fReplies;
															#line 39875 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via getRangeSplitPoints()
															#line 8132 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetRangeSplitPointsActor final : public Actor<Standalone<VectorRef<KeyRef>>>, public ActorCallback< GetRangeSplitPointsActor, 0, Void >, public ActorCallback< GetRangeSplitPointsActor, 1, std::vector<KeyRangeLocationInfo> >, public ActorCallback< GetRangeSplitPointsActor, 2, Void >, public ActorCallback< GetRangeSplitPointsActor, 3, Void >, public FastAllocated<GetRangeSplitPointsActor>, public GetRangeSplitPointsActorState<GetRangeSplitPointsActor> {
															#line 39880 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<GetRangeSplitPointsActor>::operator new;
	using FastAllocated<GetRangeSplitPointsActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Standalone<VectorRef<KeyRef>>>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< GetRangeSplitPointsActor, 0, Void >;
friend struct ActorCallback< GetRangeSplitPointsActor, 1, std::vector<KeyRangeLocationInfo> >;
friend struct ActorCallback< GetRangeSplitPointsActor, 2, Void >;
friend struct ActorCallback< GetRangeSplitPointsActor, 3, Void >;
															#line 8132 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetRangeSplitPointsActor(Reference<TransactionState> const& trState,KeyRange const& keys,int64_t const& chunkSize) 
															#line 39894 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Standalone<VectorRef<KeyRef>>>(),
		   GetRangeSplitPointsActorState<GetRangeSplitPointsActor>(trState, keys, chunkSize)
	{
		fdb_probe_actor_enter("getRangeSplitPoints", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("getRangeSplitPoints");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("getRangeSplitPoints", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< GetRangeSplitPointsActor, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< GetRangeSplitPointsActor, 1, std::vector<KeyRangeLocationInfo> >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< GetRangeSplitPointsActor, 2, Void >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< GetRangeSplitPointsActor, 3, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 8132 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<Standalone<VectorRef<KeyRef>>> getRangeSplitPoints( Reference<TransactionState> const& trState, KeyRange const& keys, int64_t const& chunkSize ) {
															#line 8132 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Standalone<VectorRef<KeyRef>>>(new GetRangeSplitPointsActor(trState, keys, chunkSize));
															#line 39925 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 8194 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

Future<Standalone<VectorRef<KeyRef>>> Transaction::getRangeSplitPoints(KeyRange const& keys, int64_t chunkSize) {
	return ::getRangeSplitPoints(trState, keys, chunkSize);
}

#define BG_REQUEST_DEBUG false

															#line 39936 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via getBlobGranuleRangesActor()
															#line 8201 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class GetBlobGranuleRangesActorActor>
															#line 8201 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetBlobGranuleRangesActorActorState {
															#line 39943 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 8201 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetBlobGranuleRangesActorActorState(Transaction* const& self,KeyRange const& keyRange,int const& rangeLimit) 
															#line 8201 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 8201 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : self(self),
															#line 8201 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   keyRange(keyRange),
															#line 8201 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   rangeLimit(rangeLimit),
															#line 8205 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   currentRange(keyRange),
															#line 8206 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   results(),
															#line 8207 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   more(false)
															#line 39960 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("getBlobGranuleRangesActor", reinterpret_cast<unsigned long>(this));

	}
	~GetBlobGranuleRangesActorActorState() 
	{
		fdb_probe_actor_destroy("getBlobGranuleRangesActor", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 8208 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (BG_REQUEST_DEBUG)
															#line 39975 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 8209 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				fmt::print("Getting Blob Granules for [{0} - {1})\n", keyRange.begin.printable(), keyRange.end.printable());
															#line 39979 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 8212 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (self->getTenant().present())
															#line 39983 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 8213 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				StrictFuture<Void> __when_expr_0 = self->getTenant().get()->ready();
															#line 8213 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (static_cast<GetBlobGranuleRangesActorActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 39989 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
				static_cast<GetBlobGranuleRangesActorActor*>(this)->actor_wait_state = 1;
															#line 8213 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< GetBlobGranuleRangesActorActor, 0, Void >*>(static_cast<GetBlobGranuleRangesActorActor*>(this)));
															#line 39994 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				loopDepth = 0;
			}
			else
			{
				loopDepth = a_body1cont1(loopDepth);
			}
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~GetBlobGranuleRangesActorActorState();
		static_cast<GetBlobGranuleRangesActorActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 8215 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		;
															#line 40022 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont1loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1cont3(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont3(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont3(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont3(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<GetBlobGranuleRangesActorActor*>(this)->actor_wait_state > 0) static_cast<GetBlobGranuleRangesActorActor*>(this)->actor_wait_state = 0;
		static_cast<GetBlobGranuleRangesActorActor*>(this)->ActorCallback< GetBlobGranuleRangesActorActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetBlobGranuleRangesActorActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getBlobGranuleRangesActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getBlobGranuleRangesActor", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< GetBlobGranuleRangesActorActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getBlobGranuleRangesActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getBlobGranuleRangesActor", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< GetBlobGranuleRangesActorActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getBlobGranuleRangesActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getBlobGranuleRangesActor", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1cont1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1(int loopDepth) 
	{
															#line 8216 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		int remaining = std::max(0, rangeLimit - results.size()) + 1;
															#line 8218 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		remaining = std::min(1000, remaining);
															#line 8219 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (BUGGIFY_WITH_PROB(0.01))
															#line 40117 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 8220 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			remaining = std::min(remaining, deterministicRandom()->randomInt(1, 10));
															#line 40121 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 8222 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<std::vector<std::pair<KeyRange, UID>>> __when_expr_1 = getBlobGranuleLocations( self->trState, currentRange, remaining, Reverse::False, UseTenant::True, JustGranules::True, &more);
															#line 8222 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<GetBlobGranuleRangesActorActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 40127 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), std::max(0, loopDepth - 1)); else return a_body1cont1loopBody1when1(__when_expr_1.get(), loopDepth); };
		static_cast<GetBlobGranuleRangesActorActor*>(this)->actor_wait_state = 2;
															#line 8222 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< GetBlobGranuleRangesActorActor, 1, std::vector<std::pair<KeyRange, UID>> >*>(static_cast<GetBlobGranuleRangesActorActor*>(this)));
															#line 40132 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1(std::vector<std::pair<KeyRange, UID>> const& blobGranuleMapping,int loopDepth) 
	{
															#line 8224 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for( auto& it : blobGranuleMapping ) {
															#line 8225 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!results.empty() && results.back().end > it.first.end)
															#line 40143 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 8226 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				ASSERT(results.back().end > it.first.begin);
															#line 8227 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				ASSERT(results.back().end <= it.first.end);
															#line 8228 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				CODE_PROBE(true, "Merge while reading granules", probe::decoration::rare);
															#line 8229 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				for(;!results.empty() && results.back().begin >= it.first.begin;) {
															#line 8232 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					results.pop_back();
															#line 40155 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
															#line 8234 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				ASSERT(results.empty() || results.back().end == it.first.begin);
															#line 40159 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 8236 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			results.push_back_deep(results.arena(), it.first);
															#line 8237 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (results.size() == rangeLimit)
															#line 40165 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 8238 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (!static_cast<GetBlobGranuleRangesActorActor*>(this)->SAV<Standalone<VectorRef<KeyRangeRef>>>::futures) { (void)(results); this->~GetBlobGranuleRangesActorActorState(); static_cast<GetBlobGranuleRangesActorActor*>(this)->destroy(); return 0; }
															#line 40169 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				new (&static_cast<GetBlobGranuleRangesActorActor*>(this)->SAV< Standalone<VectorRef<KeyRangeRef>> >::value()) Standalone<VectorRef<KeyRangeRef>>(std::move(results)); // state_var_RVO
				this->~GetBlobGranuleRangesActorActorState();
				static_cast<GetBlobGranuleRangesActorActor*>(this)->finishSendAndDelPromiseRef();
				return 0;
			}
		}
															#line 8241 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!more)
															#line 40178 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 8242 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<GetBlobGranuleRangesActorActor*>(this)->SAV<Standalone<VectorRef<KeyRangeRef>>>::futures) { (void)(results); this->~GetBlobGranuleRangesActorActorState(); static_cast<GetBlobGranuleRangesActorActor*>(this)->destroy(); return 0; }
															#line 40182 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<GetBlobGranuleRangesActorActor*>(this)->SAV< Standalone<VectorRef<KeyRangeRef>> >::value()) Standalone<VectorRef<KeyRangeRef>>(std::move(results)); // state_var_RVO
			this->~GetBlobGranuleRangesActorActorState();
			static_cast<GetBlobGranuleRangesActorActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 8244 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		CODE_PROBE(more, "partial granule mapping");
															#line 8245 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		currentRange = KeyRangeRef(results.back().end, currentRange.end);
															#line 40192 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (loopDepth == 0) return a_body1cont1loopHead1(0);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1(std::vector<std::pair<KeyRange, UID>> && blobGranuleMapping,int loopDepth) 
	{
															#line 8224 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for( auto& it : blobGranuleMapping ) {
															#line 8225 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!results.empty() && results.back().end > it.first.end)
															#line 40203 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 8226 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				ASSERT(results.back().end > it.first.begin);
															#line 8227 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				ASSERT(results.back().end <= it.first.end);
															#line 8228 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				CODE_PROBE(true, "Merge while reading granules", probe::decoration::rare);
															#line 8229 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				for(;!results.empty() && results.back().begin >= it.first.begin;) {
															#line 8232 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					results.pop_back();
															#line 40215 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
															#line 8234 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				ASSERT(results.empty() || results.back().end == it.first.begin);
															#line 40219 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 8236 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			results.push_back_deep(results.arena(), it.first);
															#line 8237 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (results.size() == rangeLimit)
															#line 40225 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 8238 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (!static_cast<GetBlobGranuleRangesActorActor*>(this)->SAV<Standalone<VectorRef<KeyRangeRef>>>::futures) { (void)(results); this->~GetBlobGranuleRangesActorActorState(); static_cast<GetBlobGranuleRangesActorActor*>(this)->destroy(); return 0; }
															#line 40229 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				new (&static_cast<GetBlobGranuleRangesActorActor*>(this)->SAV< Standalone<VectorRef<KeyRangeRef>> >::value()) Standalone<VectorRef<KeyRangeRef>>(std::move(results)); // state_var_RVO
				this->~GetBlobGranuleRangesActorActorState();
				static_cast<GetBlobGranuleRangesActorActor*>(this)->finishSendAndDelPromiseRef();
				return 0;
			}
		}
															#line 8241 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!more)
															#line 40238 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 8242 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<GetBlobGranuleRangesActorActor*>(this)->SAV<Standalone<VectorRef<KeyRangeRef>>>::futures) { (void)(results); this->~GetBlobGranuleRangesActorActorState(); static_cast<GetBlobGranuleRangesActorActor*>(this)->destroy(); return 0; }
															#line 40242 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<GetBlobGranuleRangesActorActor*>(this)->SAV< Standalone<VectorRef<KeyRangeRef>> >::value()) Standalone<VectorRef<KeyRangeRef>>(std::move(results)); // state_var_RVO
			this->~GetBlobGranuleRangesActorActorState();
			static_cast<GetBlobGranuleRangesActorActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 8244 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		CODE_PROBE(more, "partial granule mapping");
															#line 8245 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		currentRange = KeyRangeRef(results.back().end, currentRange.end);
															#line 40252 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (loopDepth == 0) return a_body1cont1loopHead1(0);

		return loopDepth;
	}
	int a_body1cont1loopBody1when1(std::vector<std::pair<KeyRange, UID>> const& blobGranuleMapping,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont1(blobGranuleMapping, loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1when1(std::vector<std::pair<KeyRange, UID>> && blobGranuleMapping,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont1(std::move(blobGranuleMapping), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<GetBlobGranuleRangesActorActor*>(this)->actor_wait_state > 0) static_cast<GetBlobGranuleRangesActorActor*>(this)->actor_wait_state = 0;
		static_cast<GetBlobGranuleRangesActorActor*>(this)->ActorCallback< GetBlobGranuleRangesActorActor, 1, std::vector<std::pair<KeyRange, UID>> >::remove();

	}
	void a_callback_fire(ActorCallback< GetBlobGranuleRangesActorActor, 1, std::vector<std::pair<KeyRange, UID>> >*,std::vector<std::pair<KeyRange, UID>> const& value) 
	{
		fdb_probe_actor_enter("getBlobGranuleRangesActor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getBlobGranuleRangesActor", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< GetBlobGranuleRangesActorActor, 1, std::vector<std::pair<KeyRange, UID>> >*,std::vector<std::pair<KeyRange, UID>> && value) 
	{
		fdb_probe_actor_enter("getBlobGranuleRangesActor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getBlobGranuleRangesActor", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< GetBlobGranuleRangesActorActor, 1, std::vector<std::pair<KeyRange, UID>> >*,Error err) 
	{
		fdb_probe_actor_enter("getBlobGranuleRangesActor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getBlobGranuleRangesActor", reinterpret_cast<unsigned long>(this), 1);

	}
															#line 8201 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Transaction* self;
															#line 8201 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeyRange keyRange;
															#line 8201 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	int rangeLimit;
															#line 8205 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeyRange currentRange;
															#line 8206 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Standalone<VectorRef<KeyRangeRef>> results;
															#line 8207 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	bool more;
															#line 40332 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via getBlobGranuleRangesActor()
															#line 8201 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetBlobGranuleRangesActorActor final : public Actor<Standalone<VectorRef<KeyRangeRef>>>, public ActorCallback< GetBlobGranuleRangesActorActor, 0, Void >, public ActorCallback< GetBlobGranuleRangesActorActor, 1, std::vector<std::pair<KeyRange, UID>> >, public FastAllocated<GetBlobGranuleRangesActorActor>, public GetBlobGranuleRangesActorActorState<GetBlobGranuleRangesActorActor> {
															#line 40337 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<GetBlobGranuleRangesActorActor>::operator new;
	using FastAllocated<GetBlobGranuleRangesActorActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Standalone<VectorRef<KeyRangeRef>>>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< GetBlobGranuleRangesActorActor, 0, Void >;
friend struct ActorCallback< GetBlobGranuleRangesActorActor, 1, std::vector<std::pair<KeyRange, UID>> >;
															#line 8201 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetBlobGranuleRangesActorActor(Transaction* const& self,KeyRange const& keyRange,int const& rangeLimit) 
															#line 40349 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Standalone<VectorRef<KeyRangeRef>>>(),
		   GetBlobGranuleRangesActorActorState<GetBlobGranuleRangesActorActor>(self, keyRange, rangeLimit)
	{
		fdb_probe_actor_enter("getBlobGranuleRangesActor", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("getBlobGranuleRangesActor");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("getBlobGranuleRangesActor", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< GetBlobGranuleRangesActorActor, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< GetBlobGranuleRangesActorActor, 1, std::vector<std::pair<KeyRange, UID>> >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 8201 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<Standalone<VectorRef<KeyRangeRef>>> getBlobGranuleRangesActor( Transaction* const& self, KeyRange const& keyRange, int const& rangeLimit ) {
															#line 8201 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Standalone<VectorRef<KeyRangeRef>>>(new GetBlobGranuleRangesActorActor(self, keyRange, rangeLimit));
															#line 40378 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 8248 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

Future<Standalone<VectorRef<KeyRangeRef>>> Transaction::getBlobGranuleRanges(const KeyRange& range, int rangeLimit) {
	return ::getBlobGranuleRangesActor(this, range, rangeLimit);
}

// hack (for now) to get blob worker interface into load balance
struct BWLocationInfo : MultiInterface<ReferencedInterface<BlobWorkerInterface>> {
	using Locations = MultiInterface<ReferencedInterface<BlobWorkerInterface>>;
	explicit BWLocationInfo(const std::vector<Reference<ReferencedInterface<BlobWorkerInterface>>>& v) : Locations(v) {}
};

															#line 40393 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via readBlobGranulesActor()
															#line 8259 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class ReadBlobGranulesActorActor>
															#line 8259 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class ReadBlobGranulesActorActorState {
															#line 40400 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 8259 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	ReadBlobGranulesActorActorState(Transaction* const& self,KeyRange const& range,Version const& begin,Optional<Version> const& read,Version* const& readVersionOut,int const& chunkLimit,bool const& summarize) 
															#line 8259 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 8259 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : self(self),
															#line 8259 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   range(range),
															#line 8259 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   begin(begin),
															#line 8259 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   read(read),
															#line 8259 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   readVersionOut(readVersionOut),
															#line 8259 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   chunkLimit(chunkLimit),
															#line 8259 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   summarize(summarize)
															#line 40419 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("readBlobGranulesActor", reinterpret_cast<unsigned long>(this));

	}
	~ReadBlobGranulesActorActorState() 
	{
		fdb_probe_actor_destroy("readBlobGranulesActor", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 8268 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ASSERT(chunkLimit > 0);
															#line 8269 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			keyRange = range;
															#line 8270 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			i = int();
															#line 8271 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			rv = Version();
															#line 8273 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			results = Standalone<VectorRef<BlobGranuleChunkRef>>();
															#line 8274 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			startTime = now();
															#line 8276 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (read.present())
															#line 40446 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 8277 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				rv = read.get();
															#line 40450 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				loopDepth = a_body1cont1(loopDepth);
			}
			else
			{
															#line 8279 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				StrictFuture<Version> __when_expr_0 = self->getReadVersion();
															#line 8279 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (static_cast<ReadBlobGranulesActorActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 40459 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
				static_cast<ReadBlobGranulesActorActor*>(this)->actor_wait_state = 1;
															#line 8279 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< ReadBlobGranulesActorActor, 0, Version >*>(static_cast<ReadBlobGranulesActorActor*>(this)));
															#line 40464 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				loopDepth = 0;
			}
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~ReadBlobGranulesActorActorState();
		static_cast<ReadBlobGranulesActorActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 8287 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (BG_REQUEST_DEBUG)
															#line 40488 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 8288 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			fmt::print("Doing blob granule request [{0} - {1}) @ {2}{3}\n", range.begin.printable(), range.end.printable(), rv, self->getTenant().present() ? " for tenant " + printable(self->getTenant().get()->description()) : "");
															#line 40492 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 8296 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (self->getTenant().present())
															#line 40496 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 8298 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_1 = self->getTenant().get()->ready();
															#line 8298 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<ReadBlobGranulesActorActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 40502 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
			static_cast<ReadBlobGranulesActorActor*>(this)->actor_wait_state = 2;
															#line 8298 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< ReadBlobGranulesActorActor, 1, Void >*>(static_cast<ReadBlobGranulesActorActor*>(this)));
															#line 40507 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1cont5(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont3(Version const& _end,int loopDepth) 
	{
															#line 8280 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		rv = _end;
															#line 40521 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont3(Version && _end,int loopDepth) 
	{
															#line 8280 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		rv = _end;
															#line 40530 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1when1(Version const& _end,int loopDepth) 
	{
		loopDepth = a_body1cont3(_end, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Version && _end,int loopDepth) 
	{
		loopDepth = a_body1cont3(std::move(_end), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<ReadBlobGranulesActorActor*>(this)->actor_wait_state > 0) static_cast<ReadBlobGranulesActorActor*>(this)->actor_wait_state = 0;
		static_cast<ReadBlobGranulesActorActor*>(this)->ActorCallback< ReadBlobGranulesActorActor, 0, Version >::remove();

	}
	void a_callback_fire(ActorCallback< ReadBlobGranulesActorActor, 0, Version >*,Version const& value) 
	{
		fdb_probe_actor_enter("readBlobGranulesActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("readBlobGranulesActor", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< ReadBlobGranulesActorActor, 0, Version >*,Version && value) 
	{
		fdb_probe_actor_enter("readBlobGranulesActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("readBlobGranulesActor", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< ReadBlobGranulesActorActor, 0, Version >*,Error err) 
	{
		fdb_probe_actor_enter("readBlobGranulesActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("readBlobGranulesActor", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont5(int loopDepth) 
	{
															#line 8301 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		moreMapping = false;
															#line 8302 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<std::vector<std::pair<KeyRange, UID>>> __when_expr_2 = getBlobGranuleLocations(self->trState, keyRange, CLIENT_KNOBS->BG_TOO_MANY_GRANULES, Reverse::False, UseTenant::True, JustGranules::False, &moreMapping);
															#line 8302 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<ReadBlobGranulesActorActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 40606 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont5when1(__when_expr_2.get(), loopDepth); };
		static_cast<ReadBlobGranulesActorActor*>(this)->actor_wait_state = 3;
															#line 8302 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< ReadBlobGranulesActorActor, 2, std::vector<std::pair<KeyRange, UID>> >*>(static_cast<ReadBlobGranulesActorActor*>(this)));
															#line 40611 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont7(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont5(loopDepth);

		return loopDepth;
	}
	int a_body1cont7(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont5(loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont7(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont7(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<ReadBlobGranulesActorActor*>(this)->actor_wait_state > 0) static_cast<ReadBlobGranulesActorActor*>(this)->actor_wait_state = 0;
		static_cast<ReadBlobGranulesActorActor*>(this)->ActorCallback< ReadBlobGranulesActorActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< ReadBlobGranulesActorActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("readBlobGranulesActor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("readBlobGranulesActor", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< ReadBlobGranulesActorActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("readBlobGranulesActor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("readBlobGranulesActor", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< ReadBlobGranulesActorActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("readBlobGranulesActor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("readBlobGranulesActor", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont8(int loopDepth) 
	{
															#line 8311 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (blobGranuleMapping.empty())
															#line 40695 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 8312 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			return a_body1Catch1(blob_granule_transaction_too_old(), loopDepth);
															#line 40699 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 8314 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(blobGranuleMapping.front().first.begin <= keyRange.begin);
															#line 8315 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(moreMapping == blobGranuleMapping.back().first.end < keyRange.end);
															#line 8316 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (moreMapping)
															#line 40707 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 8317 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (BG_REQUEST_DEBUG)
															#line 40711 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 8318 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				fmt::print("BG Mapping for [{0} - {1}) too large! ({2}) LastRange=[{3} - {4}): {5}\n", keyRange.begin.printable(), keyRange.end.printable(), blobGranuleMapping.size(), blobGranuleMapping.back().first.begin.printable(), blobGranuleMapping.back().first.end.printable(), blobGranuleMapping.back().second.shortString());
															#line 40715 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 8326 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent(SevWarn, "BGMappingTooLarge") .detail("Range", range) .detail("Max", CLIENT_KNOBS->BG_TOO_MANY_GRANULES);
															#line 8329 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			return a_body1Catch1(unsupported_operation(), loopDepth);
															#line 40721 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 8331 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(blobGranuleMapping.size() <= CLIENT_KNOBS->BG_TOO_MANY_GRANULES);
															#line 8333 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (BG_REQUEST_DEBUG)
															#line 40727 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 8334 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			fmt::print("Doing blob granule request @ {}\n", rv);
															#line 8335 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			fmt::print("blob worker assignments:\n");
															#line 40733 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 8339 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		i = 0;
															#line 40737 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont8loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1cont5when1(std::vector<std::pair<KeyRange, UID>> const& __blobGranuleMapping,int loopDepth) 
	{
															#line 8302 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		blobGranuleMapping = __blobGranuleMapping;
															#line 40746 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont8(loopDepth);

		return loopDepth;
	}
	int a_body1cont5when1(std::vector<std::pair<KeyRange, UID>> && __blobGranuleMapping,int loopDepth) 
	{
		blobGranuleMapping = std::move(__blobGranuleMapping);
		loopDepth = a_body1cont8(loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<ReadBlobGranulesActorActor*>(this)->actor_wait_state > 0) static_cast<ReadBlobGranulesActorActor*>(this)->actor_wait_state = 0;
		static_cast<ReadBlobGranulesActorActor*>(this)->ActorCallback< ReadBlobGranulesActorActor, 2, std::vector<std::pair<KeyRange, UID>> >::remove();

	}
	void a_callback_fire(ActorCallback< ReadBlobGranulesActorActor, 2, std::vector<std::pair<KeyRange, UID>> >*,std::vector<std::pair<KeyRange, UID>> const& value) 
	{
		fdb_probe_actor_enter("readBlobGranulesActor", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont5when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("readBlobGranulesActor", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< ReadBlobGranulesActorActor, 2, std::vector<std::pair<KeyRange, UID>> >*,std::vector<std::pair<KeyRange, UID>> && value) 
	{
		fdb_probe_actor_enter("readBlobGranulesActor", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont5when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("readBlobGranulesActor", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< ReadBlobGranulesActorActor, 2, std::vector<std::pair<KeyRange, UID>> >*,Error err) 
	{
		fdb_probe_actor_enter("readBlobGranulesActor", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("readBlobGranulesActor", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1cont9(int loopDepth) 
	{
															#line 8491 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		self->trState->cx->anyBGReads = true;
															#line 8492 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		self->trState->cx->bgGranulesPerRequest.addSample(results.size());
															#line 8493 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		self->trState->cx->bgLatencies.addSample(now() - startTime);
															#line 8495 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (readVersionOut != nullptr)
															#line 40819 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 8496 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			*readVersionOut = rv;
															#line 40823 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 8498 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<ReadBlobGranulesActorActor*>(this)->SAV<Standalone<VectorRef<BlobGranuleChunkRef>>>::futures) { (void)(results); this->~ReadBlobGranulesActorActorState(); static_cast<ReadBlobGranulesActorActor*>(this)->destroy(); return 0; }
															#line 40827 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<ReadBlobGranulesActorActor*>(this)->SAV< Standalone<VectorRef<BlobGranuleChunkRef>> >::value()) Standalone<VectorRef<BlobGranuleChunkRef>>(std::move(results)); // state_var_RVO
		this->~ReadBlobGranulesActorActorState();
		static_cast<ReadBlobGranulesActorActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont8loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1cont8loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1cont8loopBody1(int loopDepth) 
	{
															#line 8339 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!(i < blobGranuleMapping.size()))
															#line 40846 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
			return a_body1cont8break1(loopDepth==0?0:loopDepth-1); // break
		}
															#line 8340 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		granule = blobGranuleMapping[i].first;
															#line 8342 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (granule.end <= keyRange.begin)
															#line 40854 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
			return a_body1cont8continue1(loopDepth); // continue
		}
															#line 8345 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		bwInterf = self->trState->cx->blobWorker_interf[blobGranuleMapping[i].second];
															#line 8346 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(bwInterf.id() != UID());
															#line 8347 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (BG_REQUEST_DEBUG)
															#line 40864 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 8348 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			fmt::print("Blob granule request mapping [{0} - {1})={2}\n", granule.begin.printable(), granule.end.printable(), bwInterf.id().toString().substr(0, 5));
															#line 40868 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 8354 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (keyRange.begin > granule.begin)
															#line 40872 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 8355 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			granule = KeyRangeRef(keyRange.begin, granule.end);
															#line 40876 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 8357 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (keyRange.end < granule.end)
															#line 40880 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 8358 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			granule = KeyRangeRef(granule.begin, keyRange.end);
															#line 40884 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 8361 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (g_network->isSimulated() && !g_simulator->speedUpSimulation && BUGGIFY_WITH_PROB(0.01))
															#line 40888 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 8363 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ASSERT(!self->trState->cx->blobWorker_interf.empty());
															#line 8364 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			CODE_PROBE(true, "Randomizing blob worker id for request");
															#line 8365 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent ev("RandomizingBlobWorkerForReq");
															#line 8366 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ev.detail("OriginalWorker", bwInterf.id());
															#line 8367 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			int randomIdx = deterministicRandom()->randomInt(0, self->trState->cx->blobWorker_interf.size());
															#line 8368 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			for( auto& it : self->trState->cx->blobWorker_interf ) {
															#line 8369 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (randomIdx == 0)
															#line 40904 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 8370 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					bwInterf = it.second;
															#line 40908 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					break;
				}
															#line 8373 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				randomIdx--;
															#line 40913 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 8375 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ev.detail("NewWorker", bwInterf.id());
															#line 40917 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 8378 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		req = BlobGranuleFileRequest();
															#line 8379 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		req.keyRange = KeyRangeRef(StringRef(req.arena, granule.begin), StringRef(req.arena, granule.end));
															#line 8380 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		req.beginVersion = begin;
															#line 8381 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		req.readVersion = rv;
															#line 8382 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		req.tenantInfo = self->getTenant().present() ? self->trState->getTenantInfo() : TenantInfo();
															#line 8383 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		req.canCollapseBegin = true;
															#line 8384 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		req.summarize = summarize;
															#line 8386 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		std::vector<Reference<ReferencedInterface<BlobWorkerInterface>>> v;
															#line 8387 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		v.push_back(makeReference<ReferencedInterface<BlobWorkerInterface>>(bwInterf));
															#line 8388 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		location = makeReference<BWLocationInfo>(v);
															#line 40939 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		try {
															#line 8393 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<BlobGranuleFileReply> __when_expr_3 = loadBalance(location, &BlobWorkerInterface::blobGranuleFileRequest, req, TaskPriority::DefaultPromiseEndpoint, AtMostOnce::False, nullptr);
															#line 8392 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<ReadBlobGranulesActorActor*>(this)->actor_wait_state < 0) return a_body1cont8loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 40945 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1cont8loopBody1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1cont8loopBody1when1(__when_expr_3.get(), loopDepth); };
															#line 8464 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_4 = IFailureMonitor::failureMonitor().onStateEqual( location->get(0, &BlobWorkerInterface::blobGranuleFileRequest).getEndpoint(), FailureStatus(true));
															#line 40949 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1cont8loopBody1Catch1(__when_expr_4.getError(), loopDepth); else return a_body1cont8loopBody1when2(__when_expr_4.get(), loopDepth); };
			static_cast<ReadBlobGranulesActorActor*>(this)->actor_wait_state = 4;
															#line 8393 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< ReadBlobGranulesActorActor, 3, BlobGranuleFileReply >*>(static_cast<ReadBlobGranulesActorActor*>(this)));
															#line 8464 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< ReadBlobGranulesActorActor, 4, Void >*>(static_cast<ReadBlobGranulesActorActor*>(this)));
															#line 40956 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1cont8loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1cont8loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont8break1(int loopDepth) 
	{
		try {
			return a_body1cont9(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont8continue1(int loopDepth) 
	{
															#line 8339 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		i++;
															#line 40984 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (loopDepth == 0) return a_body1cont8loopHead1(0);

		return loopDepth;
	}
	int a_body1cont8loopBody1cont1(int loopDepth) 
	{
															#line 8339 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		i++;
															#line 40993 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (loopDepth == 0) return a_body1cont8loopHead1(0);

		return loopDepth;
	}
	int a_body1cont8loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 8474 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (BG_REQUEST_DEBUG)
															#line 41003 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 8475 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				fmt::print("Blob granule request for [{0} - {1}) @ {2} - {3} got error from {4}: {5}\n", granule.begin.printable(), granule.end.printable(), begin, rv, bwInterf.id().toString().substr(0, 5), e.name());
															#line 41007 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 8484 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (e.code() == error_code_wrong_shard_server || e.code() == error_code_connection_failed)
															#line 41011 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 8485 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				return a_body1Catch1(blob_granule_request_failed(), std::max(0, loopDepth - 1));
															#line 41015 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 8487 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			return a_body1Catch1(e, std::max(0, loopDepth - 1));
															#line 41019 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1cont8loopBody1cont10(int loopDepth) 
	{
		loopDepth = a_body1cont8loopBody1cont10cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont8loopBody1when1(BlobGranuleFileReply const& rep,int loopDepth) 
	{
															#line 8399 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (BG_REQUEST_DEBUG)
															#line 41039 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 8400 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			fmt::print("Blob granule request for [{0} - {1}) @ {2} - {3} got reply from {4}:\n", granule.begin.printable(), granule.end.printable(), begin, rv, bwInterf.id().toString().substr(0, 5));
															#line 41043 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 8407 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(!rep.chunks.empty());
															#line 8408 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		results.arena().dependsOn(rep.arena);
															#line 8409 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for( auto& chunk : rep.chunks ) {
															#line 8410 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (BG_REQUEST_DEBUG)
															#line 41053 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 8411 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				fmt::print( "[{0} - {1})\n", chunk.keyRange.begin.printable(), chunk.keyRange.end.printable());
															#line 8414 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				fmt::print("  SnapshotFile: {0}\n    \n  DeltaFiles:\n", chunk.snapshotFile.present() ? chunk.snapshotFile.get().toString().c_str() : "<none>");
															#line 8417 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				for( auto& df : chunk.deltaFiles ) {
															#line 8418 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					fmt::print("    {0}\n", df.toString());
															#line 41063 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
															#line 8420 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				fmt::print("  Deltas: ({0})", chunk.newDeltas.size());
															#line 8421 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (chunk.newDeltas.size() > 0)
															#line 41069 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 8422 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					fmt::print(" with version [{0} - {1}]", chunk.newDeltas[0].version, chunk.newDeltas[chunk.newDeltas.size() - 1].version);
															#line 41073 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
															#line 8426 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				fmt::print("  IncludedVersion: {0}\n\n\n", chunk.includedVersion);
															#line 8427 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (chunk.tenantPrefix.present())
															#line 41079 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 8428 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					fmt::print("  TenantPrefix: {0}\n", chunk.tenantPrefix.get().printable());
															#line 41083 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
			}
															#line 8432 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ASSERT(chunk.tenantPrefix.present() == self->getTenant().present());
															#line 8433 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (chunk.tenantPrefix.present())
															#line 41090 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 8434 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				ASSERT(chunk.tenantPrefix.get() == self->getTenant().get()->prefix());
															#line 41094 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 8437 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!results.empty() && results.back().keyRange.end != chunk.keyRange.begin)
															#line 41098 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 8438 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				ASSERT(results.back().keyRange.end > chunk.keyRange.begin);
															#line 8439 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				ASSERT(results.back().keyRange.end <= chunk.keyRange.end);
															#line 8440 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				CODE_PROBE(true, "Merge while reading granule range", probe::decoration::rare);
															#line 8441 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				for(;!results.empty() && results.back().keyRange.begin >= chunk.keyRange.begin;) {
															#line 8444 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					results.pop_back();
															#line 41110 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
															#line 8446 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				ASSERT(results.empty() || results.back().keyRange.end == chunk.keyRange.begin);
															#line 41114 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 8448 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			results.push_back(results.arena(), chunk);
															#line 8449 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StringRef chunkEndKey = chunk.keyRange.end;
															#line 8450 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (chunk.tenantPrefix.present())
															#line 41122 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 8451 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				chunkEndKey = chunkEndKey.removePrefix(chunk.tenantPrefix.get());
															#line 41126 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 8453 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			keyRange = KeyRangeRef(std::min(chunkEndKey, keyRange.end), keyRange.end);
															#line 8454 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (summarize && results.size() == chunkLimit)
															#line 41132 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
				break;
			}
		}
															#line 8458 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (summarize && results.size() == chunkLimit)
															#line 41139 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
			return a_body1cont8break1(loopDepth==0?0:loopDepth-1); // break
		}
		loopDepth = a_body1cont8loopBody1cont10(loopDepth);

		return loopDepth;
	}
	int a_body1cont8loopBody1when1(BlobGranuleFileReply && rep,int loopDepth) 
	{
															#line 8399 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (BG_REQUEST_DEBUG)
															#line 41151 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 8400 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			fmt::print("Blob granule request for [{0} - {1}) @ {2} - {3} got reply from {4}:\n", granule.begin.printable(), granule.end.printable(), begin, rv, bwInterf.id().toString().substr(0, 5));
															#line 41155 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 8407 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(!rep.chunks.empty());
															#line 8408 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		results.arena().dependsOn(rep.arena);
															#line 8409 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for( auto& chunk : rep.chunks ) {
															#line 8410 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (BG_REQUEST_DEBUG)
															#line 41165 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 8411 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				fmt::print( "[{0} - {1})\n", chunk.keyRange.begin.printable(), chunk.keyRange.end.printable());
															#line 8414 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				fmt::print("  SnapshotFile: {0}\n    \n  DeltaFiles:\n", chunk.snapshotFile.present() ? chunk.snapshotFile.get().toString().c_str() : "<none>");
															#line 8417 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				for( auto& df : chunk.deltaFiles ) {
															#line 8418 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					fmt::print("    {0}\n", df.toString());
															#line 41175 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
															#line 8420 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				fmt::print("  Deltas: ({0})", chunk.newDeltas.size());
															#line 8421 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (chunk.newDeltas.size() > 0)
															#line 41181 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 8422 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					fmt::print(" with version [{0} - {1}]", chunk.newDeltas[0].version, chunk.newDeltas[chunk.newDeltas.size() - 1].version);
															#line 41185 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
															#line 8426 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				fmt::print("  IncludedVersion: {0}\n\n\n", chunk.includedVersion);
															#line 8427 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (chunk.tenantPrefix.present())
															#line 41191 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 8428 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					fmt::print("  TenantPrefix: {0}\n", chunk.tenantPrefix.get().printable());
															#line 41195 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
			}
															#line 8432 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ASSERT(chunk.tenantPrefix.present() == self->getTenant().present());
															#line 8433 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (chunk.tenantPrefix.present())
															#line 41202 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 8434 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				ASSERT(chunk.tenantPrefix.get() == self->getTenant().get()->prefix());
															#line 41206 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 8437 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!results.empty() && results.back().keyRange.end != chunk.keyRange.begin)
															#line 41210 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 8438 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				ASSERT(results.back().keyRange.end > chunk.keyRange.begin);
															#line 8439 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				ASSERT(results.back().keyRange.end <= chunk.keyRange.end);
															#line 8440 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				CODE_PROBE(true, "Merge while reading granule range", probe::decoration::rare);
															#line 8441 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				for(;!results.empty() && results.back().keyRange.begin >= chunk.keyRange.begin;) {
															#line 8444 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					results.pop_back();
															#line 41222 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
															#line 8446 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				ASSERT(results.empty() || results.back().keyRange.end == chunk.keyRange.begin);
															#line 41226 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 8448 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			results.push_back(results.arena(), chunk);
															#line 8449 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StringRef chunkEndKey = chunk.keyRange.end;
															#line 8450 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (chunk.tenantPrefix.present())
															#line 41234 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 8451 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				chunkEndKey = chunkEndKey.removePrefix(chunk.tenantPrefix.get());
															#line 41238 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 8453 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			keyRange = KeyRangeRef(std::min(chunkEndKey, keyRange.end), keyRange.end);
															#line 8454 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (summarize && results.size() == chunkLimit)
															#line 41244 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
				break;
			}
		}
															#line 8458 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (summarize && results.size() == chunkLimit)
															#line 41251 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
			return a_body1cont8break1(loopDepth==0?0:loopDepth-1); // break
		}
		loopDepth = a_body1cont8loopBody1cont10(loopDepth);

		return loopDepth;
	}
	int a_body1cont8loopBody1when2(Void const& _,int loopDepth) 
	{
															#line 8467 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (BG_REQUEST_DEBUG)
															#line 41263 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 8468 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			fmt::print("readBlobGranules got BW {0} failed\n", bwInterf.id().toString());
															#line 41267 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 8470 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		return a_body1cont8loopBody1Catch1(connection_failed(), loopDepth);
															#line 41271 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"

		return loopDepth;
	}
	int a_body1cont8loopBody1when2(Void && _,int loopDepth) 
	{
															#line 8467 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (BG_REQUEST_DEBUG)
															#line 41279 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 8468 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			fmt::print("readBlobGranules got BW {0} failed\n", bwInterf.id().toString());
															#line 41283 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 8470 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		return a_body1cont8loopBody1Catch1(connection_failed(), loopDepth);
															#line 41287 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<ReadBlobGranulesActorActor*>(this)->actor_wait_state > 0) static_cast<ReadBlobGranulesActorActor*>(this)->actor_wait_state = 0;
		static_cast<ReadBlobGranulesActorActor*>(this)->ActorCallback< ReadBlobGranulesActorActor, 3, BlobGranuleFileReply >::remove();
		static_cast<ReadBlobGranulesActorActor*>(this)->ActorCallback< ReadBlobGranulesActorActor, 4, Void >::remove();

	}
	void a_callback_fire(ActorCallback< ReadBlobGranulesActorActor, 3, BlobGranuleFileReply >*,BlobGranuleFileReply const& value) 
	{
		fdb_probe_actor_enter("readBlobGranulesActor", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont8loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont8loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont8loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("readBlobGranulesActor", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< ReadBlobGranulesActorActor, 3, BlobGranuleFileReply >*,BlobGranuleFileReply && value) 
	{
		fdb_probe_actor_enter("readBlobGranulesActor", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont8loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont8loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont8loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("readBlobGranulesActor", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< ReadBlobGranulesActorActor, 3, BlobGranuleFileReply >*,Error err) 
	{
		fdb_probe_actor_enter("readBlobGranulesActor", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont8loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont8loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont8loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("readBlobGranulesActor", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< ReadBlobGranulesActorActor, 4, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("readBlobGranulesActor", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose4();
		try {
			a_body1cont8loopBody1when2(value, 0);
		}
		catch (Error& error) {
			a_body1cont8loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont8loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("readBlobGranulesActor", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_fire(ActorCallback< ReadBlobGranulesActorActor, 4, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("readBlobGranulesActor", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose4();
		try {
			a_body1cont8loopBody1when2(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont8loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont8loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("readBlobGranulesActor", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_error(ActorCallback< ReadBlobGranulesActorActor, 4, Void >*,Error err) 
	{
		fdb_probe_actor_enter("readBlobGranulesActor", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose4();
		try {
			a_body1cont8loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont8loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont8loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("readBlobGranulesActor", reinterpret_cast<unsigned long>(this), 4);

	}
	int a_body1cont8loopBody1cont10cont1(int loopDepth) 
	{
		try {
			loopDepth = a_body1cont8loopBody1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
															#line 8259 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Transaction* self;
															#line 8259 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeyRange range;
															#line 8259 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Version begin;
															#line 8259 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Optional<Version> read;
															#line 8259 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Version* readVersionOut;
															#line 8259 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	int chunkLimit;
															#line 8259 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	bool summarize;
															#line 8269 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeyRange keyRange;
															#line 8270 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	int i;
															#line 8271 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Version rv;
															#line 8273 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Standalone<VectorRef<BlobGranuleChunkRef>> results;
															#line 8274 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	double startTime;
															#line 8301 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	bool moreMapping;
															#line 8302 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	std::vector<std::pair<KeyRange, UID>> blobGranuleMapping;
															#line 8340 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeyRange granule;
															#line 8345 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	BlobWorkerInterface bwInterf;
															#line 8378 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	BlobGranuleFileRequest req;
															#line 8388 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<MultiInterface<ReferencedInterface<BlobWorkerInterface>>> location;
															#line 41437 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via readBlobGranulesActor()
															#line 8259 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class ReadBlobGranulesActorActor final : public Actor<Standalone<VectorRef<BlobGranuleChunkRef>>>, public ActorCallback< ReadBlobGranulesActorActor, 0, Version >, public ActorCallback< ReadBlobGranulesActorActor, 1, Void >, public ActorCallback< ReadBlobGranulesActorActor, 2, std::vector<std::pair<KeyRange, UID>> >, public ActorCallback< ReadBlobGranulesActorActor, 3, BlobGranuleFileReply >, public ActorCallback< ReadBlobGranulesActorActor, 4, Void >, public FastAllocated<ReadBlobGranulesActorActor>, public ReadBlobGranulesActorActorState<ReadBlobGranulesActorActor> {
															#line 41442 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<ReadBlobGranulesActorActor>::operator new;
	using FastAllocated<ReadBlobGranulesActorActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Standalone<VectorRef<BlobGranuleChunkRef>>>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< ReadBlobGranulesActorActor, 0, Version >;
friend struct ActorCallback< ReadBlobGranulesActorActor, 1, Void >;
friend struct ActorCallback< ReadBlobGranulesActorActor, 2, std::vector<std::pair<KeyRange, UID>> >;
friend struct ActorCallback< ReadBlobGranulesActorActor, 3, BlobGranuleFileReply >;
friend struct ActorCallback< ReadBlobGranulesActorActor, 4, Void >;
															#line 8259 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	ReadBlobGranulesActorActor(Transaction* const& self,KeyRange const& range,Version const& begin,Optional<Version> const& read,Version* const& readVersionOut,int const& chunkLimit,bool const& summarize) 
															#line 41457 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Standalone<VectorRef<BlobGranuleChunkRef>>>(),
		   ReadBlobGranulesActorActorState<ReadBlobGranulesActorActor>(self, range, begin, read, readVersionOut, chunkLimit, summarize)
	{
		fdb_probe_actor_enter("readBlobGranulesActor", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("readBlobGranulesActor");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("readBlobGranulesActor", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< ReadBlobGranulesActorActor, 0, Version >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< ReadBlobGranulesActorActor, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< ReadBlobGranulesActorActor, 2, std::vector<std::pair<KeyRange, UID>> >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< ReadBlobGranulesActorActor, 3, BlobGranuleFileReply >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 8259 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<Standalone<VectorRef<BlobGranuleChunkRef>>> readBlobGranulesActor( Transaction* const& self, KeyRange const& range, Version const& begin, Optional<Version> const& read, Version* const& readVersionOut, int const& chunkLimit, bool const& summarize ) {
															#line 8259 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Standalone<VectorRef<BlobGranuleChunkRef>>>(new ReadBlobGranulesActorActor(self, range, begin, read, readVersionOut, chunkLimit, summarize));
															#line 41488 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 8500 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

Future<Standalone<VectorRef<BlobGranuleChunkRef>>> Transaction::readBlobGranules(const KeyRange& range,
                                                                                 Version begin,
                                                                                 Optional<Version> readVersion,
                                                                                 Version* readVersionOut) {
	return readBlobGranulesActor(
	    this, range, begin, readVersion, readVersionOut, std::numeric_limits<int>::max(), false);
}

															#line 41501 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via summarizeBlobGranulesActor()
															#line 8509 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class SummarizeBlobGranulesActorActor>
															#line 8509 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class SummarizeBlobGranulesActorActorState {
															#line 41508 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 8509 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	SummarizeBlobGranulesActorActorState(Transaction* const& self,KeyRange const& range,Optional<Version> const& summaryVersion,int const& rangeLimit) 
															#line 8509 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 8509 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : self(self),
															#line 8509 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   range(range),
															#line 8509 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   summaryVersion(summaryVersion),
															#line 8509 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   rangeLimit(rangeLimit),
															#line 8513 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   readVersionOut()
															#line 41523 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("summarizeBlobGranulesActor", reinterpret_cast<unsigned long>(this));

	}
	~SummarizeBlobGranulesActorActorState() 
	{
		fdb_probe_actor_destroy("summarizeBlobGranulesActor", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 8514 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Standalone<VectorRef<BlobGranuleChunkRef>>> __when_expr_0 = readBlobGranulesActor(self, range, 0, summaryVersion, &readVersionOut, rangeLimit, true);
															#line 8514 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<SummarizeBlobGranulesActorActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 41540 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<SummarizeBlobGranulesActorActor*>(this)->actor_wait_state = 1;
															#line 8514 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< SummarizeBlobGranulesActorActor, 0, Standalone<VectorRef<BlobGranuleChunkRef>> >*>(static_cast<SummarizeBlobGranulesActorActor*>(this)));
															#line 41545 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~SummarizeBlobGranulesActorActorState();
		static_cast<SummarizeBlobGranulesActorActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Standalone<VectorRef<BlobGranuleChunkRef>> const& chunks,int loopDepth) 
	{
															#line 8516 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(chunks.size() <= rangeLimit);
															#line 8517 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(!summaryVersion.present() || readVersionOut == summaryVersion.get());
															#line 8518 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		Standalone<VectorRef<BlobGranuleSummaryRef>> summaries;
															#line 8519 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		summaries.reserve(summaries.arena(), chunks.size());
															#line 8520 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for( auto& it : chunks ) {
															#line 8521 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			summaries.push_back(summaries.arena(), summarizeGranuleChunk(summaries.arena(), it));
															#line 41578 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 8524 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<SummarizeBlobGranulesActorActor*>(this)->SAV<Standalone<VectorRef<BlobGranuleSummaryRef>>>::futures) { (void)(summaries); this->~SummarizeBlobGranulesActorActorState(); static_cast<SummarizeBlobGranulesActorActor*>(this)->destroy(); return 0; }
															#line 41582 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<SummarizeBlobGranulesActorActor*>(this)->SAV< Standalone<VectorRef<BlobGranuleSummaryRef>> >::value()) Standalone<VectorRef<BlobGranuleSummaryRef>>(summaries);
		this->~SummarizeBlobGranulesActorActorState();
		static_cast<SummarizeBlobGranulesActorActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1(Standalone<VectorRef<BlobGranuleChunkRef>> && chunks,int loopDepth) 
	{
															#line 8516 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(chunks.size() <= rangeLimit);
															#line 8517 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(!summaryVersion.present() || readVersionOut == summaryVersion.get());
															#line 8518 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		Standalone<VectorRef<BlobGranuleSummaryRef>> summaries;
															#line 8519 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		summaries.reserve(summaries.arena(), chunks.size());
															#line 8520 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for( auto& it : chunks ) {
															#line 8521 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			summaries.push_back(summaries.arena(), summarizeGranuleChunk(summaries.arena(), it));
															#line 41604 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 8524 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<SummarizeBlobGranulesActorActor*>(this)->SAV<Standalone<VectorRef<BlobGranuleSummaryRef>>>::futures) { (void)(summaries); this->~SummarizeBlobGranulesActorActorState(); static_cast<SummarizeBlobGranulesActorActor*>(this)->destroy(); return 0; }
															#line 41608 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<SummarizeBlobGranulesActorActor*>(this)->SAV< Standalone<VectorRef<BlobGranuleSummaryRef>> >::value()) Standalone<VectorRef<BlobGranuleSummaryRef>>(summaries);
		this->~SummarizeBlobGranulesActorActorState();
		static_cast<SummarizeBlobGranulesActorActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1when1(Standalone<VectorRef<BlobGranuleChunkRef>> const& chunks,int loopDepth) 
	{
		loopDepth = a_body1cont1(chunks, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Standalone<VectorRef<BlobGranuleChunkRef>> && chunks,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(chunks), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<SummarizeBlobGranulesActorActor*>(this)->actor_wait_state > 0) static_cast<SummarizeBlobGranulesActorActor*>(this)->actor_wait_state = 0;
		static_cast<SummarizeBlobGranulesActorActor*>(this)->ActorCallback< SummarizeBlobGranulesActorActor, 0, Standalone<VectorRef<BlobGranuleChunkRef>> >::remove();

	}
	void a_callback_fire(ActorCallback< SummarizeBlobGranulesActorActor, 0, Standalone<VectorRef<BlobGranuleChunkRef>> >*,Standalone<VectorRef<BlobGranuleChunkRef>> const& value) 
	{
		fdb_probe_actor_enter("summarizeBlobGranulesActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("summarizeBlobGranulesActor", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< SummarizeBlobGranulesActorActor, 0, Standalone<VectorRef<BlobGranuleChunkRef>> >*,Standalone<VectorRef<BlobGranuleChunkRef>> && value) 
	{
		fdb_probe_actor_enter("summarizeBlobGranulesActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("summarizeBlobGranulesActor", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< SummarizeBlobGranulesActorActor, 0, Standalone<VectorRef<BlobGranuleChunkRef>> >*,Error err) 
	{
		fdb_probe_actor_enter("summarizeBlobGranulesActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("summarizeBlobGranulesActor", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 8509 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Transaction* self;
															#line 8509 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeyRange range;
															#line 8509 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Optional<Version> summaryVersion;
															#line 8509 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	int rangeLimit;
															#line 8513 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Version readVersionOut;
															#line 41689 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via summarizeBlobGranulesActor()
															#line 8509 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class SummarizeBlobGranulesActorActor final : public Actor<Standalone<VectorRef<BlobGranuleSummaryRef>>>, public ActorCallback< SummarizeBlobGranulesActorActor, 0, Standalone<VectorRef<BlobGranuleChunkRef>> >, public FastAllocated<SummarizeBlobGranulesActorActor>, public SummarizeBlobGranulesActorActorState<SummarizeBlobGranulesActorActor> {
															#line 41694 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<SummarizeBlobGranulesActorActor>::operator new;
	using FastAllocated<SummarizeBlobGranulesActorActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Standalone<VectorRef<BlobGranuleSummaryRef>>>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< SummarizeBlobGranulesActorActor, 0, Standalone<VectorRef<BlobGranuleChunkRef>> >;
															#line 8509 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	SummarizeBlobGranulesActorActor(Transaction* const& self,KeyRange const& range,Optional<Version> const& summaryVersion,int const& rangeLimit) 
															#line 41705 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Standalone<VectorRef<BlobGranuleSummaryRef>>>(),
		   SummarizeBlobGranulesActorActorState<SummarizeBlobGranulesActorActor>(self, range, summaryVersion, rangeLimit)
	{
		fdb_probe_actor_enter("summarizeBlobGranulesActor", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("summarizeBlobGranulesActor");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("summarizeBlobGranulesActor", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< SummarizeBlobGranulesActorActor, 0, Standalone<VectorRef<BlobGranuleChunkRef>> >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 8509 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<Standalone<VectorRef<BlobGranuleSummaryRef>>> summarizeBlobGranulesActor( Transaction* const& self, KeyRange const& range, Optional<Version> const& summaryVersion, int const& rangeLimit ) {
															#line 8509 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Standalone<VectorRef<BlobGranuleSummaryRef>>>(new SummarizeBlobGranulesActorActor(self, range, summaryVersion, rangeLimit));
															#line 41733 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 8526 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

Future<Standalone<VectorRef<BlobGranuleSummaryRef>>>
Transaction::summarizeBlobGranules(const KeyRange& range, Optional<Version> summaryVersion, int rangeLimit) {
	return summarizeBlobGranulesActor(this, range, summaryVersion, rangeLimit);
}

void Transaction::addGranuleMaterializeStats(const GranuleMaterializeStats& stats) {
	trState->cx->anyBGReads = true;
	trState->cx->bgReadInputBytes += stats.inputBytes;
	trState->cx->bgReadOutputBytes += stats.outputBytes;
	trState->cx->bgReadSnapshotRows += stats.snapshotRows;
	trState->cx->bgReadRowsCleared += stats.rowsCleared;
	trState->cx->bgReadRowsInserted += stats.rowsInserted;
	trState->cx->bgReadRowsUpdated += stats.rowsUpdated;
}

															#line 41753 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via setPerpetualStorageWiggle()
															#line 8542 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class SetPerpetualStorageWiggleActor>
															#line 8542 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class SetPerpetualStorageWiggleActorState {
															#line 41760 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 8542 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	SetPerpetualStorageWiggleActorState(Database const& cx,bool const& enable,LockAware const& lockAware) 
															#line 8542 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 8542 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : cx(cx),
															#line 8542 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   enable(enable),
															#line 8542 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   lockAware(lockAware),
															#line 8543 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   tr(cx),
															#line 8544 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   version(invalidVersion)
															#line 41775 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("setPerpetualStorageWiggle", reinterpret_cast<unsigned long>(this));

	}
	~SetPerpetualStorageWiggleActorState() 
	{
		fdb_probe_actor_destroy("setPerpetualStorageWiggle", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 8545 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			;
															#line 41790 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~SetPerpetualStorageWiggleActorState();
		static_cast<SetPerpetualStorageWiggleActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 8560 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<SetPerpetualStorageWiggleActor*>(this)->SAV<Version>::futures) { (void)(version); this->~SetPerpetualStorageWiggleActorState(); static_cast<SetPerpetualStorageWiggleActor*>(this)->destroy(); return 0; }
															#line 41813 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<SetPerpetualStorageWiggleActor*>(this)->SAV< Version >::value()) Version(std::move(version)); // state_var_RVO
		this->~SetPerpetualStorageWiggleActorState();
		static_cast<SetPerpetualStorageWiggleActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
		try {
															#line 8547 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tr.setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 8548 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (lockAware)
															#line 41835 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 8549 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				tr.setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 41839 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 8552 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tr.set(perpetualStorageWiggleKey, enable ? "1"_sr : "0"_sr);
															#line 8553 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_0 = tr.commit();
															#line 8553 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<SetPerpetualStorageWiggleActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 41847 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1loopBody1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
			static_cast<SetPerpetualStorageWiggleActor*>(this)->actor_wait_state = 1;
															#line 8553 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< SetPerpetualStorageWiggleActor, 0, Void >*>(static_cast<SetPerpetualStorageWiggleActor*>(this)));
															#line 41852 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1break1(int loopDepth) 
	{
		try {
			return a_body1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 8557 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_1 = tr.onError(e);
															#line 8557 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<SetPerpetualStorageWiggleActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 41889 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1Catch1when1(__when_expr_1.get(), loopDepth); };
			static_cast<SetPerpetualStorageWiggleActor*>(this)->actor_wait_state = 2;
															#line 8557 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< SetPerpetualStorageWiggleActor, 1, Void >*>(static_cast<SetPerpetualStorageWiggleActor*>(this)));
															#line 41894 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(Void const& _,int loopDepth) 
	{
															#line 8554 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		version = tr.getCommittedVersion();
															#line 41909 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		return a_body1break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1loopBody1cont2(Void && _,int loopDepth) 
	{
															#line 8554 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		version = tr.getCommittedVersion();
															#line 41918 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		return a_body1break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<SetPerpetualStorageWiggleActor*>(this)->actor_wait_state > 0) static_cast<SetPerpetualStorageWiggleActor*>(this)->actor_wait_state = 0;
		static_cast<SetPerpetualStorageWiggleActor*>(this)->ActorCallback< SetPerpetualStorageWiggleActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< SetPerpetualStorageWiggleActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("setPerpetualStorageWiggle", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("setPerpetualStorageWiggle", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< SetPerpetualStorageWiggleActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("setPerpetualStorageWiggle", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("setPerpetualStorageWiggle", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< SetPerpetualStorageWiggleActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("setPerpetualStorageWiggle", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("setPerpetualStorageWiggle", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<SetPerpetualStorageWiggleActor*>(this)->actor_wait_state > 0) static_cast<SetPerpetualStorageWiggleActor*>(this)->actor_wait_state = 0;
		static_cast<SetPerpetualStorageWiggleActor*>(this)->ActorCallback< SetPerpetualStorageWiggleActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< SetPerpetualStorageWiggleActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("setPerpetualStorageWiggle", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("setPerpetualStorageWiggle", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< SetPerpetualStorageWiggleActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("setPerpetualStorageWiggle", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("setPerpetualStorageWiggle", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< SetPerpetualStorageWiggleActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("setPerpetualStorageWiggle", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("setPerpetualStorageWiggle", reinterpret_cast<unsigned long>(this), 1);

	}
															#line 8542 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Database cx;
															#line 8542 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	bool enable;
															#line 8542 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	LockAware lockAware;
															#line 8543 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	ReadYourWritesTransaction tr;
															#line 8544 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Version version;
															#line 42071 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via setPerpetualStorageWiggle()
															#line 8542 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class SetPerpetualStorageWiggleActor final : public Actor<Version>, public ActorCallback< SetPerpetualStorageWiggleActor, 0, Void >, public ActorCallback< SetPerpetualStorageWiggleActor, 1, Void >, public FastAllocated<SetPerpetualStorageWiggleActor>, public SetPerpetualStorageWiggleActorState<SetPerpetualStorageWiggleActor> {
															#line 42076 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<SetPerpetualStorageWiggleActor>::operator new;
	using FastAllocated<SetPerpetualStorageWiggleActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Version>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< SetPerpetualStorageWiggleActor, 0, Void >;
friend struct ActorCallback< SetPerpetualStorageWiggleActor, 1, Void >;
															#line 8542 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	SetPerpetualStorageWiggleActor(Database const& cx,bool const& enable,LockAware const& lockAware) 
															#line 42088 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Version>(),
		   SetPerpetualStorageWiggleActorState<SetPerpetualStorageWiggleActor>(cx, enable, lockAware)
	{
		fdb_probe_actor_enter("setPerpetualStorageWiggle", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("setPerpetualStorageWiggle");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("setPerpetualStorageWiggle", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< SetPerpetualStorageWiggleActor, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< SetPerpetualStorageWiggleActor, 1, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 8542 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<Version> setPerpetualStorageWiggle( Database const& cx, bool const& enable, LockAware const& lockAware ) {
															#line 8542 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Version>(new SetPerpetualStorageWiggleActor(cx, enable, lockAware));
															#line 42117 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 8562 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

															#line 42122 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via checkBlobSubrange()
															#line 8563 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class CheckBlobSubrangeActor>
															#line 8563 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class CheckBlobSubrangeActorState {
															#line 42129 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 8563 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	CheckBlobSubrangeActorState(Database const& db,KeyRange const& keyRange,Optional<Version> const& version) 
															#line 8563 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 8563 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : db(db),
															#line 8563 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   keyRange(keyRange),
															#line 8563 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   version(version),
															#line 8564 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   tr(db),
															#line 8565 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   summaryVersion()
															#line 42144 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("checkBlobSubrange", reinterpret_cast<unsigned long>(this));

	}
	~CheckBlobSubrangeActorState() 
	{
		fdb_probe_actor_destroy("checkBlobSubrange", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 8566 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (version.present())
															#line 42159 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 8567 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				summaryVersion = version.get();
															#line 42163 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 8569 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			;
															#line 42167 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~CheckBlobSubrangeActorState();
		static_cast<CheckBlobSubrangeActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
		try {
															#line 8571 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!summaryVersion.present())
															#line 42198 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 8573 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				StrictFuture<Version> __when_expr_0 = tr.getReadVersion();
															#line 8573 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (static_cast<CheckBlobSubrangeActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 42204 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1loopBody1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
				static_cast<CheckBlobSubrangeActor*>(this)->actor_wait_state = 1;
															#line 8573 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< CheckBlobSubrangeActor, 0, Version >*>(static_cast<CheckBlobSubrangeActor*>(this)));
															#line 42209 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				loopDepth = 0;
			}
			else
			{
				loopDepth = a_body1loopBody1cont2(loopDepth);
			}
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 8581 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_2 = tr.onError(e);
															#line 8581 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<CheckBlobSubrangeActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 42238 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1Catch1when1(__when_expr_2.get(), loopDepth); };
			static_cast<CheckBlobSubrangeActor*>(this)->actor_wait_state = 3;
															#line 8581 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< CheckBlobSubrangeActor, 2, Void >*>(static_cast<CheckBlobSubrangeActor*>(this)));
															#line 42243 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(int loopDepth) 
	{
															#line 8578 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_1 = success(tr.summarizeBlobGranules(keyRange, summaryVersion, std::numeric_limits<int>::max()));
															#line 8578 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<CheckBlobSubrangeActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 42260 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
		static_cast<CheckBlobSubrangeActor*>(this)->actor_wait_state = 2;
															#line 8578 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< CheckBlobSubrangeActor, 1, Void >*>(static_cast<CheckBlobSubrangeActor*>(this)));
															#line 42265 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont3(Version const& summaryVersion_,int loopDepth) 
	{
															#line 8574 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		summaryVersion = summaryVersion_;
															#line 42274 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont2(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont3(Version && summaryVersion_,int loopDepth) 
	{
															#line 8574 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		summaryVersion = summaryVersion_;
															#line 42283 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont2(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Version const& summaryVersion_,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3(summaryVersion_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Version && summaryVersion_,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3(std::move(summaryVersion_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<CheckBlobSubrangeActor*>(this)->actor_wait_state > 0) static_cast<CheckBlobSubrangeActor*>(this)->actor_wait_state = 0;
		static_cast<CheckBlobSubrangeActor*>(this)->ActorCallback< CheckBlobSubrangeActor, 0, Version >::remove();

	}
	void a_callback_fire(ActorCallback< CheckBlobSubrangeActor, 0, Version >*,Version const& value) 
	{
		fdb_probe_actor_enter("checkBlobSubrange", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("checkBlobSubrange", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< CheckBlobSubrangeActor, 0, Version >*,Version && value) 
	{
		fdb_probe_actor_enter("checkBlobSubrange", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("checkBlobSubrange", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< CheckBlobSubrangeActor, 0, Version >*,Error err) 
	{
		fdb_probe_actor_enter("checkBlobSubrange", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("checkBlobSubrange", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1cont5(Void const& _,int loopDepth) 
	{
															#line 8579 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<CheckBlobSubrangeActor*>(this)->SAV<Version>::futures) { (void)(summaryVersion.get()); this->~CheckBlobSubrangeActorState(); static_cast<CheckBlobSubrangeActor*>(this)->destroy(); return 0; }
															#line 42355 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<CheckBlobSubrangeActor*>(this)->SAV< Version >::value()) Version(summaryVersion.get());
		this->~CheckBlobSubrangeActorState();
		static_cast<CheckBlobSubrangeActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1cont5(Void && _,int loopDepth) 
	{
															#line 8579 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<CheckBlobSubrangeActor*>(this)->SAV<Version>::futures) { (void)(summaryVersion.get()); this->~CheckBlobSubrangeActorState(); static_cast<CheckBlobSubrangeActor*>(this)->destroy(); return 0; }
															#line 42367 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<CheckBlobSubrangeActor*>(this)->SAV< Version >::value()) Version(summaryVersion.get());
		this->~CheckBlobSubrangeActorState();
		static_cast<CheckBlobSubrangeActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont5(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont5(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<CheckBlobSubrangeActor*>(this)->actor_wait_state > 0) static_cast<CheckBlobSubrangeActor*>(this)->actor_wait_state = 0;
		static_cast<CheckBlobSubrangeActor*>(this)->ActorCallback< CheckBlobSubrangeActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< CheckBlobSubrangeActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("checkBlobSubrange", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("checkBlobSubrange", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< CheckBlobSubrangeActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("checkBlobSubrange", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("checkBlobSubrange", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< CheckBlobSubrangeActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("checkBlobSubrange", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("checkBlobSubrange", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<CheckBlobSubrangeActor*>(this)->actor_wait_state > 0) static_cast<CheckBlobSubrangeActor*>(this)->actor_wait_state = 0;
		static_cast<CheckBlobSubrangeActor*>(this)->ActorCallback< CheckBlobSubrangeActor, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< CheckBlobSubrangeActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("checkBlobSubrange", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("checkBlobSubrange", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< CheckBlobSubrangeActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("checkBlobSubrange", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("checkBlobSubrange", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< CheckBlobSubrangeActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("checkBlobSubrange", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("checkBlobSubrange", reinterpret_cast<unsigned long>(this), 2);

	}
															#line 8563 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Database db;
															#line 8563 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeyRange keyRange;
															#line 8563 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Optional<Version> version;
															#line 8564 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Transaction tr;
															#line 8565 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Optional<Version> summaryVersion;
															#line 42523 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via checkBlobSubrange()
															#line 8563 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class CheckBlobSubrangeActor final : public Actor<Version>, public ActorCallback< CheckBlobSubrangeActor, 0, Version >, public ActorCallback< CheckBlobSubrangeActor, 1, Void >, public ActorCallback< CheckBlobSubrangeActor, 2, Void >, public FastAllocated<CheckBlobSubrangeActor>, public CheckBlobSubrangeActorState<CheckBlobSubrangeActor> {
															#line 42528 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<CheckBlobSubrangeActor>::operator new;
	using FastAllocated<CheckBlobSubrangeActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Version>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< CheckBlobSubrangeActor, 0, Version >;
friend struct ActorCallback< CheckBlobSubrangeActor, 1, Void >;
friend struct ActorCallback< CheckBlobSubrangeActor, 2, Void >;
															#line 8563 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	CheckBlobSubrangeActor(Database const& db,KeyRange const& keyRange,Optional<Version> const& version) 
															#line 42541 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Version>(),
		   CheckBlobSubrangeActorState<CheckBlobSubrangeActor>(db, keyRange, version)
	{
		fdb_probe_actor_enter("checkBlobSubrange", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("checkBlobSubrange");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("checkBlobSubrange", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< CheckBlobSubrangeActor, 0, Version >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< CheckBlobSubrangeActor, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< CheckBlobSubrangeActor, 2, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 8563 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<Version> checkBlobSubrange( Database const& db, KeyRange const& keyRange, Optional<Version> const& version ) {
															#line 8563 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Version>(new CheckBlobSubrangeActor(db, keyRange, version));
															#line 42571 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 8585 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

															#line 42576 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via verifyBlobRangeActor()
															#line 8586 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class VerifyBlobRangeActorActor>
															#line 8586 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class VerifyBlobRangeActorActorState {
															#line 42583 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 8586 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	VerifyBlobRangeActorActorState(Reference<DatabaseContext> const& cx,KeyRange const& range,Optional<Version> const& version,Optional<Reference<Tenant>> const& tenant) 
															#line 8586 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 8586 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : cx(cx),
															#line 8586 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   range(range),
															#line 8586 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   version(version),
															#line 8586 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   tenant(tenant),
															#line 8590 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   db(cx),
															#line 8591 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   tr(db),
															#line 8592 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   allRanges(),
															#line 8593 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   curRegion(KeyRangeRef(range.begin, range.begin)),
															#line 8594 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   readVersionOut(invalidVersion),
															#line 8595 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   batchSize(BUGGIFY ? deterministicRandom()->randomInt(2, 10) : CLIENT_KNOBS->BG_TOO_MANY_GRANULES / 2),
															#line 8596 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   loadSize((BUGGIFY ? deterministicRandom()->randomInt(1, 20) : 20) * batchSize)
															#line 42610 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("verifyBlobRangeActor", reinterpret_cast<unsigned long>(this));

	}
	~VerifyBlobRangeActorActorState() 
	{
		fdb_probe_actor_destroy("verifyBlobRangeActor", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 8598 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (version.present())
															#line 42625 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 8599 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (version.get() == latestVersion)
															#line 42629 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 8600 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					;
															#line 42633 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					loopDepth = a_body1loopHead1(loopDepth);
				}
				else
				{
					loopDepth = a_body1cont2(loopDepth);
				}
			}
			else
			{
				loopDepth = a_body1cont1(loopDepth);
			}
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~VerifyBlobRangeActorActorState();
		static_cast<VerifyBlobRangeActorActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 8616 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (tenant.present())
															#line 42666 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 8617 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_2 = tenant.get()->ready();
															#line 8617 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<VerifyBlobRangeActorActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 42672 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont1when1(__when_expr_2.get(), loopDepth); };
			static_cast<VerifyBlobRangeActorActor*>(this)->actor_wait_state = 3;
															#line 8617 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< VerifyBlobRangeActorActor, 2, Void >*>(static_cast<VerifyBlobRangeActorActor*>(this)));
															#line 42677 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1cont6(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont2(int loopDepth) 
	{
															#line 8610 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (version.get() <= 0)
															#line 42691 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 8611 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent("VerifyBlobInvalidVersion").detail("Range", range).detail("Version", version);
															#line 8612 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			return a_body1Catch1(unsupported_operation(), loopDepth);
															#line 42697 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont3(int loopDepth) 
	{
		loopDepth = a_body1cont2(loopDepth);

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
		try {
															#line 8602 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Version> __when_expr_0 = tr.getReadVersion();
															#line 8602 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<VerifyBlobRangeActorActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 42723 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1loopBody1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
			static_cast<VerifyBlobRangeActorActor*>(this)->actor_wait_state = 1;
															#line 8602 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< VerifyBlobRangeActorActor, 0, Version >*>(static_cast<VerifyBlobRangeActorActor*>(this)));
															#line 42728 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1break1(int loopDepth) 
	{
		try {
			return a_body1cont3(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 8606 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_1 = tr.onError(e);
															#line 8606 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<VerifyBlobRangeActorActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 42765 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1Catch1when1(__when_expr_1.get(), loopDepth); };
			static_cast<VerifyBlobRangeActorActor*>(this)->actor_wait_state = 2;
															#line 8606 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< VerifyBlobRangeActorActor, 1, Void >*>(static_cast<VerifyBlobRangeActorActor*>(this)));
															#line 42770 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(Version const& _version,int loopDepth) 
	{
															#line 8603 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		version = _version;
															#line 42785 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		return a_body1break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1loopBody1cont2(Version && _version,int loopDepth) 
	{
															#line 8603 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		version = _version;
															#line 42794 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		return a_body1break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1loopBody1when1(Version const& _version,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(_version, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Version && _version,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(std::move(_version), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<VerifyBlobRangeActorActor*>(this)->actor_wait_state > 0) static_cast<VerifyBlobRangeActorActor*>(this)->actor_wait_state = 0;
		static_cast<VerifyBlobRangeActorActor*>(this)->ActorCallback< VerifyBlobRangeActorActor, 0, Version >::remove();

	}
	void a_callback_fire(ActorCallback< VerifyBlobRangeActorActor, 0, Version >*,Version const& value) 
	{
		fdb_probe_actor_enter("verifyBlobRangeActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("verifyBlobRangeActor", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< VerifyBlobRangeActorActor, 0, Version >*,Version && value) 
	{
		fdb_probe_actor_enter("verifyBlobRangeActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("verifyBlobRangeActor", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< VerifyBlobRangeActorActor, 0, Version >*,Error err) 
	{
		fdb_probe_actor_enter("verifyBlobRangeActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("verifyBlobRangeActor", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<VerifyBlobRangeActorActor*>(this)->actor_wait_state > 0) static_cast<VerifyBlobRangeActorActor*>(this)->actor_wait_state = 0;
		static_cast<VerifyBlobRangeActorActor*>(this)->ActorCallback< VerifyBlobRangeActorActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< VerifyBlobRangeActorActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("verifyBlobRangeActor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("verifyBlobRangeActor", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< VerifyBlobRangeActorActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("verifyBlobRangeActor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("verifyBlobRangeActor", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< VerifyBlobRangeActorActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("verifyBlobRangeActor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("verifyBlobRangeActor", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont6(int loopDepth) 
	{
															#line 8622 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		;
															#line 42941 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont6loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1cont7(Void const& _,int loopDepth) 
	{
															#line 8618 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		range = range.withPrefix(tenant.get()->prefix());
															#line 8619 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		curRegion = KeyRangeRef(range.begin, range.begin);
															#line 42952 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont6(loopDepth);

		return loopDepth;
	}
	int a_body1cont7(Void && _,int loopDepth) 
	{
															#line 8618 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		range = range.withPrefix(tenant.get()->prefix());
															#line 8619 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		curRegion = KeyRangeRef(range.begin, range.begin);
															#line 42963 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont6(loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont7(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont7(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<VerifyBlobRangeActorActor*>(this)->actor_wait_state > 0) static_cast<VerifyBlobRangeActorActor*>(this)->actor_wait_state = 0;
		static_cast<VerifyBlobRangeActorActor*>(this)->ActorCallback< VerifyBlobRangeActorActor, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< VerifyBlobRangeActorActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("verifyBlobRangeActor", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("verifyBlobRangeActor", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< VerifyBlobRangeActorActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("verifyBlobRangeActor", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("verifyBlobRangeActor", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< VerifyBlobRangeActorActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("verifyBlobRangeActor", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("verifyBlobRangeActor", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1cont6loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1cont6loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1cont6loopBody1(int loopDepth) 
	{
															#line 8623 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (curRegion.begin >= range.end)
															#line 43042 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 8624 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<VerifyBlobRangeActorActor*>(this)->SAV<Version>::futures) { (void)(readVersionOut); this->~VerifyBlobRangeActorActorState(); static_cast<VerifyBlobRangeActorActor*>(this)->destroy(); return 0; }
															#line 43046 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<VerifyBlobRangeActorActor*>(this)->SAV< Version >::value()) Version(std::move(readVersionOut)); // state_var_RVO
			this->~VerifyBlobRangeActorActorState();
			static_cast<VerifyBlobRangeActorActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 8626 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		;
															#line 43054 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont6loopBody1loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1cont6loopBody1cont1(int loopDepth) 
	{
															#line 8635 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (allRanges.empty())
															#line 43063 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 8636 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (curRegion.begin < range.end)
															#line 43067 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 8637 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (!static_cast<VerifyBlobRangeActorActor*>(this)->SAV<Version>::futures) { (void)(invalidVersion); this->~VerifyBlobRangeActorActorState(); static_cast<VerifyBlobRangeActorActor*>(this)->destroy(); return 0; }
															#line 43071 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				new (&static_cast<VerifyBlobRangeActorActor*>(this)->SAV< Version >::value()) Version(invalidVersion);
				this->~VerifyBlobRangeActorActorState();
				static_cast<VerifyBlobRangeActorActor*>(this)->finishSendAndDelPromiseRef();
				return 0;
			}
															#line 8639 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<VerifyBlobRangeActorActor*>(this)->SAV<Version>::futures) { (void)(readVersionOut); this->~VerifyBlobRangeActorActorState(); static_cast<VerifyBlobRangeActorActor*>(this)->destroy(); return 0; }
															#line 43079 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<VerifyBlobRangeActorActor*>(this)->SAV< Version >::value()) Version(std::move(readVersionOut)); // state_var_RVO
			this->~VerifyBlobRangeActorActorState();
			static_cast<VerifyBlobRangeActorActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 8642 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		checkParts = std::vector<Future<Version>>();
															#line 8644 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		int batchCount = 0;
															#line 8645 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for( auto& it : allRanges ) {
															#line 8646 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (it.begin > curRegion.end)
															#line 43093 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 8647 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (!static_cast<VerifyBlobRangeActorActor*>(this)->SAV<Version>::futures) { (void)(invalidVersion); this->~VerifyBlobRangeActorActorState(); static_cast<VerifyBlobRangeActorActor*>(this)->destroy(); return 0; }
															#line 43097 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				new (&static_cast<VerifyBlobRangeActorActor*>(this)->SAV< Version >::value()) Version(invalidVersion);
				this->~VerifyBlobRangeActorActorState();
				static_cast<VerifyBlobRangeActorActor*>(this)->finishSendAndDelPromiseRef();
				return 0;
			}
															#line 8650 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			curRegion = KeyRangeRef(curRegion.begin, it.end);
															#line 8651 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			batchCount++;
															#line 8653 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (batchCount == batchSize)
															#line 43109 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 8654 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				checkParts.push_back(checkBlobSubrange(db, curRegion, version));
															#line 8655 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				batchCount = 0;
															#line 8656 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				curRegion = KeyRangeRef(curRegion.end, curRegion.end);
															#line 43117 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
		}
															#line 8659 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!curRegion.empty())
															#line 43122 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 8660 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			checkParts.push_back(checkBlobSubrange(db, curRegion, version));
															#line 43126 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
		try {
															#line 8664 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_5 = waitForAll(checkParts);
															#line 8664 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<VerifyBlobRangeActorActor*>(this)->actor_wait_state < 0) return a_body1cont6loopBody1cont1Catch1(actor_cancelled(), loopDepth);
															#line 43133 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_5.isReady()) { if (__when_expr_5.isError()) return a_body1cont6loopBody1cont1Catch1(__when_expr_5.getError(), loopDepth); else return a_body1cont6loopBody1cont1when1(__when_expr_5.get(), loopDepth); };
			static_cast<VerifyBlobRangeActorActor*>(this)->actor_wait_state = 6;
															#line 8664 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_5.addCallbackAndClear(static_cast<ActorCallback< VerifyBlobRangeActorActor, 5, Void >*>(static_cast<VerifyBlobRangeActorActor*>(this)));
															#line 43138 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1cont6loopBody1cont1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1cont6loopBody1cont1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont6loopBody1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1cont6loopBody1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1cont6loopBody1loopBody1(int loopDepth) 
	{
		try {
															#line 8628 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_3 = store(allRanges, tr.getBlobGranuleRanges(KeyRangeRef(curRegion.begin, range.end), loadSize));
															#line 8628 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<VerifyBlobRangeActorActor*>(this)->actor_wait_state < 0) return a_body1cont6loopBody1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 43163 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1cont6loopBody1loopBody1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1cont6loopBody1loopBody1when1(__when_expr_3.get(), loopDepth); };
			static_cast<VerifyBlobRangeActorActor*>(this)->actor_wait_state = 4;
															#line 8628 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< VerifyBlobRangeActorActor, 3, Void >*>(static_cast<VerifyBlobRangeActorActor*>(this)));
															#line 43168 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1cont6loopBody1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1cont6loopBody1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont6loopBody1break1(int loopDepth) 
	{
		try {
			return a_body1cont6loopBody1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1cont6loopBody1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1cont6loopBody1loopHead1(0);

		return loopDepth;
	}
	int a_body1cont6loopBody1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 8631 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_4 = tr.onError(e);
															#line 8631 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<VerifyBlobRangeActorActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 2));
															#line 43205 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1Catch1(__when_expr_4.getError(), std::max(0, loopDepth - 2)); else return a_body1cont6loopBody1loopBody1Catch1when1(__when_expr_4.get(), loopDepth); };
			static_cast<VerifyBlobRangeActorActor*>(this)->actor_wait_state = 5;
															#line 8631 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< VerifyBlobRangeActorActor, 4, Void >*>(static_cast<VerifyBlobRangeActorActor*>(this)));
															#line 43210 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 2));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 2));
		}

		return loopDepth;
	}
	int a_body1cont6loopBody1loopBody1cont2(Void const& _,int loopDepth) 
	{
		return a_body1cont6loopBody1break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1cont6loopBody1loopBody1cont2(Void && _,int loopDepth) 
	{
		return a_body1cont6loopBody1break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1cont6loopBody1loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont6loopBody1loopBody1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont6loopBody1loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont6loopBody1loopBody1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<VerifyBlobRangeActorActor*>(this)->actor_wait_state > 0) static_cast<VerifyBlobRangeActorActor*>(this)->actor_wait_state = 0;
		static_cast<VerifyBlobRangeActorActor*>(this)->ActorCallback< VerifyBlobRangeActorActor, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< VerifyBlobRangeActorActor, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("verifyBlobRangeActor", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont6loopBody1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont6loopBody1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont6loopBody1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("verifyBlobRangeActor", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< VerifyBlobRangeActorActor, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("verifyBlobRangeActor", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont6loopBody1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont6loopBody1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont6loopBody1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("verifyBlobRangeActor", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< VerifyBlobRangeActorActor, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("verifyBlobRangeActor", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont6loopBody1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont6loopBody1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont6loopBody1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("verifyBlobRangeActor", reinterpret_cast<unsigned long>(this), 3);

	}
	int a_body1cont6loopBody1loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont6loopBody1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont6loopBody1loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont6loopBody1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont6loopBody1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont6loopBody1loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont6loopBody1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont6loopBody1loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose5() 
	{
		if (static_cast<VerifyBlobRangeActorActor*>(this)->actor_wait_state > 0) static_cast<VerifyBlobRangeActorActor*>(this)->actor_wait_state = 0;
		static_cast<VerifyBlobRangeActorActor*>(this)->ActorCallback< VerifyBlobRangeActorActor, 4, Void >::remove();

	}
	void a_callback_fire(ActorCallback< VerifyBlobRangeActorActor, 4, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("verifyBlobRangeActor", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont6loopBody1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("verifyBlobRangeActor", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_fire(ActorCallback< VerifyBlobRangeActorActor, 4, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("verifyBlobRangeActor", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont6loopBody1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("verifyBlobRangeActor", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_error(ActorCallback< VerifyBlobRangeActorActor, 4, Void >*,Error err) 
	{
		fdb_probe_actor_enter("verifyBlobRangeActor", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("verifyBlobRangeActor", reinterpret_cast<unsigned long>(this), 4);

	}
	int a_body1cont6loopBody1cont3(int loopDepth) 
	{
															#line 8671 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(!checkParts.empty());
															#line 8672 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		readVersionOut = checkParts.back().get();
															#line 8673 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		curRegion = KeyRangeRef(curRegion.end, curRegion.end);
															#line 43379 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (loopDepth == 0) return a_body1cont6loopHead1(0);

		return loopDepth;
	}
	int a_body1cont6loopBody1cont1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 8666 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (e.code() == error_code_blob_granule_transaction_too_old)
															#line 43389 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 8667 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (!static_cast<VerifyBlobRangeActorActor*>(this)->SAV<Version>::futures) { (void)(invalidVersion); this->~VerifyBlobRangeActorActorState(); static_cast<VerifyBlobRangeActorActor*>(this)->destroy(); return 0; }
															#line 43393 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				new (&static_cast<VerifyBlobRangeActorActor*>(this)->SAV< Version >::value()) Version(invalidVersion);
				this->~VerifyBlobRangeActorActorState();
				static_cast<VerifyBlobRangeActorActor*>(this)->finishSendAndDelPromiseRef();
				return 0;
			}
															#line 8669 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			return a_body1Catch1(e, std::max(0, loopDepth - 1));
															#line 43401 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1cont6loopBody1cont10(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont6loopBody1cont10cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont6loopBody1cont10(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont6loopBody1cont10cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont6loopBody1cont1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont6loopBody1cont10(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont6loopBody1cont1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont6loopBody1cont10(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose6() 
	{
		if (static_cast<VerifyBlobRangeActorActor*>(this)->actor_wait_state > 0) static_cast<VerifyBlobRangeActorActor*>(this)->actor_wait_state = 0;
		static_cast<VerifyBlobRangeActorActor*>(this)->ActorCallback< VerifyBlobRangeActorActor, 5, Void >::remove();

	}
	void a_callback_fire(ActorCallback< VerifyBlobRangeActorActor, 5, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("verifyBlobRangeActor", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1cont6loopBody1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont6loopBody1cont1Catch1(error, 0);
		} catch (...) {
			a_body1cont6loopBody1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("verifyBlobRangeActor", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_fire(ActorCallback< VerifyBlobRangeActorActor, 5, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("verifyBlobRangeActor", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1cont6loopBody1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont6loopBody1cont1Catch1(error, 0);
		} catch (...) {
			a_body1cont6loopBody1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("verifyBlobRangeActor", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_error(ActorCallback< VerifyBlobRangeActorActor, 5, Void >*,Error err) 
	{
		fdb_probe_actor_enter("verifyBlobRangeActor", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1cont6loopBody1cont1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont6loopBody1cont1Catch1(error, 0);
		} catch (...) {
			a_body1cont6loopBody1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("verifyBlobRangeActor", reinterpret_cast<unsigned long>(this), 5);

	}
	int a_body1cont6loopBody1cont10cont1(int loopDepth) 
	{
		try {
			loopDepth = a_body1cont6loopBody1cont3(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
															#line 8586 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<DatabaseContext> cx;
															#line 8586 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeyRange range;
															#line 8586 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Optional<Version> version;
															#line 8586 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Optional<Reference<Tenant>> tenant;
															#line 8590 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Database db;
															#line 8591 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Transaction tr;
															#line 8592 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Standalone<VectorRef<KeyRangeRef>> allRanges;
															#line 8593 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeyRange curRegion;
															#line 8594 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Version readVersionOut;
															#line 8595 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	int batchSize;
															#line 8596 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	int loadSize;
															#line 8642 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	std::vector<Future<Version>> checkParts;
															#line 43523 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via verifyBlobRangeActor()
															#line 8586 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class VerifyBlobRangeActorActor final : public Actor<Version>, public ActorCallback< VerifyBlobRangeActorActor, 0, Version >, public ActorCallback< VerifyBlobRangeActorActor, 1, Void >, public ActorCallback< VerifyBlobRangeActorActor, 2, Void >, public ActorCallback< VerifyBlobRangeActorActor, 3, Void >, public ActorCallback< VerifyBlobRangeActorActor, 4, Void >, public ActorCallback< VerifyBlobRangeActorActor, 5, Void >, public FastAllocated<VerifyBlobRangeActorActor>, public VerifyBlobRangeActorActorState<VerifyBlobRangeActorActor> {
															#line 43528 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<VerifyBlobRangeActorActor>::operator new;
	using FastAllocated<VerifyBlobRangeActorActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Version>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< VerifyBlobRangeActorActor, 0, Version >;
friend struct ActorCallback< VerifyBlobRangeActorActor, 1, Void >;
friend struct ActorCallback< VerifyBlobRangeActorActor, 2, Void >;
friend struct ActorCallback< VerifyBlobRangeActorActor, 3, Void >;
friend struct ActorCallback< VerifyBlobRangeActorActor, 4, Void >;
friend struct ActorCallback< VerifyBlobRangeActorActor, 5, Void >;
															#line 8586 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	VerifyBlobRangeActorActor(Reference<DatabaseContext> const& cx,KeyRange const& range,Optional<Version> const& version,Optional<Reference<Tenant>> const& tenant) 
															#line 43544 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Version>(),
		   VerifyBlobRangeActorActorState<VerifyBlobRangeActorActor>(cx, range, version, tenant)
	{
		fdb_probe_actor_enter("verifyBlobRangeActor", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("verifyBlobRangeActor");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("verifyBlobRangeActor", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< VerifyBlobRangeActorActor, 0, Version >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< VerifyBlobRangeActorActor, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< VerifyBlobRangeActorActor, 2, Void >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< VerifyBlobRangeActorActor, 3, Void >*)0, actor_cancelled()); break;
		case 5: this->a_callback_error((ActorCallback< VerifyBlobRangeActorActor, 4, Void >*)0, actor_cancelled()); break;
		case 6: this->a_callback_error((ActorCallback< VerifyBlobRangeActorActor, 5, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 8586 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<Version> verifyBlobRangeActor( Reference<DatabaseContext> const& cx, KeyRange const& range, Optional<Version> const& version, Optional<Reference<Tenant>> const& tenant ) {
															#line 8586 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Version>(new VerifyBlobRangeActorActor(cx, range, version, tenant));
															#line 43577 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 8676 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

Future<Version> DatabaseContext::verifyBlobRange(const KeyRange& range,
                                                 Optional<Version> version,
                                                 Optional<Reference<Tenant>> tenant) {
	return verifyBlobRangeActor(Reference<DatabaseContext>::addRef(this), range, version, tenant);
}

															#line 43588 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via flushBlobRangeActor()
															#line 8683 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class FlushBlobRangeActorActor>
															#line 8683 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class FlushBlobRangeActorActorState {
															#line 43595 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 8683 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	FlushBlobRangeActorActorState(Reference<DatabaseContext> const& cx,KeyRange const& range,bool const& compact,Optional<Version> const& version,Optional<Reference<Tenant>> const& tenant) 
															#line 8683 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 8683 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : cx(cx),
															#line 8683 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   range(range),
															#line 8683 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   compact(compact),
															#line 8683 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   version(version),
															#line 8683 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   tenant(tenant)
															#line 43610 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("flushBlobRangeActor", reinterpret_cast<unsigned long>(this));

	}
	~FlushBlobRangeActorActorState() 
	{
		fdb_probe_actor_destroy("flushBlobRangeActor", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 8688 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (tenant.present())
															#line 43625 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 8689 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				StrictFuture<Void> __when_expr_0 = tenant.get()->ready();
															#line 8689 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (static_cast<FlushBlobRangeActorActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 43631 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
				static_cast<FlushBlobRangeActorActor*>(this)->actor_wait_state = 1;
															#line 8689 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< FlushBlobRangeActorActor, 0, Void >*>(static_cast<FlushBlobRangeActorActor*>(this)));
															#line 43636 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				loopDepth = 0;
			}
			else
			{
				loopDepth = a_body1cont1(loopDepth);
			}
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~FlushBlobRangeActorActorState();
		static_cast<FlushBlobRangeActorActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 8692 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		db = Database(cx);
															#line 8693 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!version.present())
															#line 43666 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 8694 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tr = Transaction(db);
															#line 8695 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Version> __when_expr_1 = tr.getReadVersion();
															#line 8695 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<FlushBlobRangeActorActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 43674 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
			static_cast<FlushBlobRangeActorActor*>(this)->actor_wait_state = 2;
															#line 8695 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< FlushBlobRangeActorActor, 1, Version >*>(static_cast<FlushBlobRangeActorActor*>(this)));
															#line 43679 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1cont4(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont2(Void const& _,int loopDepth) 
	{
															#line 8690 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		range = range.withPrefix(tenant.get()->prefix());
															#line 43693 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont2(Void && _,int loopDepth) 
	{
															#line 8690 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		range = range.withPrefix(tenant.get()->prefix());
															#line 43702 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<FlushBlobRangeActorActor*>(this)->actor_wait_state > 0) static_cast<FlushBlobRangeActorActor*>(this)->actor_wait_state = 0;
		static_cast<FlushBlobRangeActorActor*>(this)->ActorCallback< FlushBlobRangeActorActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< FlushBlobRangeActorActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("flushBlobRangeActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("flushBlobRangeActor", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< FlushBlobRangeActorActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("flushBlobRangeActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("flushBlobRangeActor", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< FlushBlobRangeActorActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("flushBlobRangeActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("flushBlobRangeActor", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont4(int loopDepth) 
	{
															#line 8698 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		FlushGranuleRequest req(-1, range, version.get(), compact);
															#line 43774 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		try {
															#line 8700 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_2 = success(doBlobGranuleRequests(db, range, req, &BlobWorkerInterface::flushGranuleRequest));
															#line 8700 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<FlushBlobRangeActorActor*>(this)->actor_wait_state < 0) return a_body1cont4Catch1(actor_cancelled(), loopDepth);
															#line 43780 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1cont4Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont4when1(__when_expr_2.get(), loopDepth); };
			static_cast<FlushBlobRangeActorActor*>(this)->actor_wait_state = 3;
															#line 8700 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< FlushBlobRangeActorActor, 2, Void >*>(static_cast<FlushBlobRangeActorActor*>(this)));
															#line 43785 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1cont4Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1cont4Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont5(Version const& _v,int loopDepth) 
	{
															#line 8696 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		version = _v;
															#line 43800 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont4(loopDepth);

		return loopDepth;
	}
	int a_body1cont5(Version && _v,int loopDepth) 
	{
															#line 8696 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		version = _v;
															#line 43809 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont4(loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Version const& _v,int loopDepth) 
	{
		loopDepth = a_body1cont5(_v, loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Version && _v,int loopDepth) 
	{
		loopDepth = a_body1cont5(std::move(_v), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<FlushBlobRangeActorActor*>(this)->actor_wait_state > 0) static_cast<FlushBlobRangeActorActor*>(this)->actor_wait_state = 0;
		static_cast<FlushBlobRangeActorActor*>(this)->ActorCallback< FlushBlobRangeActorActor, 1, Version >::remove();

	}
	void a_callback_fire(ActorCallback< FlushBlobRangeActorActor, 1, Version >*,Version const& value) 
	{
		fdb_probe_actor_enter("flushBlobRangeActor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("flushBlobRangeActor", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< FlushBlobRangeActorActor, 1, Version >*,Version && value) 
	{
		fdb_probe_actor_enter("flushBlobRangeActor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("flushBlobRangeActor", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< FlushBlobRangeActorActor, 1, Version >*,Error err) 
	{
		fdb_probe_actor_enter("flushBlobRangeActor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("flushBlobRangeActor", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont4Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 8703 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (e.code() == error_code_blob_granule_transaction_too_old)
															#line 43882 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 8705 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (!static_cast<FlushBlobRangeActorActor*>(this)->SAV<bool>::futures) { (void)(false); this->~FlushBlobRangeActorActorState(); static_cast<FlushBlobRangeActorActor*>(this)->destroy(); return 0; }
															#line 43886 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				new (&static_cast<FlushBlobRangeActorActor*>(this)->SAV< bool >::value()) bool(false);
				this->~FlushBlobRangeActorActorState();
				static_cast<FlushBlobRangeActorActor*>(this)->finishSendAndDelPromiseRef();
				return 0;
			}
															#line 8707 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			return a_body1Catch1(e, loopDepth);
															#line 43894 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont8(Void const& _,int loopDepth) 
	{
															#line 8701 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<FlushBlobRangeActorActor*>(this)->SAV<bool>::futures) { (void)(true); this->~FlushBlobRangeActorActorState(); static_cast<FlushBlobRangeActorActor*>(this)->destroy(); return 0; }
															#line 43908 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<FlushBlobRangeActorActor*>(this)->SAV< bool >::value()) bool(true);
		this->~FlushBlobRangeActorActorState();
		static_cast<FlushBlobRangeActorActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont8(Void && _,int loopDepth) 
	{
															#line 8701 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<FlushBlobRangeActorActor*>(this)->SAV<bool>::futures) { (void)(true); this->~FlushBlobRangeActorActorState(); static_cast<FlushBlobRangeActorActor*>(this)->destroy(); return 0; }
															#line 43920 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<FlushBlobRangeActorActor*>(this)->SAV< bool >::value()) bool(true);
		this->~FlushBlobRangeActorActorState();
		static_cast<FlushBlobRangeActorActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont4when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont8(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont4when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont8(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<FlushBlobRangeActorActor*>(this)->actor_wait_state > 0) static_cast<FlushBlobRangeActorActor*>(this)->actor_wait_state = 0;
		static_cast<FlushBlobRangeActorActor*>(this)->ActorCallback< FlushBlobRangeActorActor, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< FlushBlobRangeActorActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("flushBlobRangeActor", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont4when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont4Catch1(error, 0);
		} catch (...) {
			a_body1cont4Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("flushBlobRangeActor", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< FlushBlobRangeActorActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("flushBlobRangeActor", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont4when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont4Catch1(error, 0);
		} catch (...) {
			a_body1cont4Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("flushBlobRangeActor", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< FlushBlobRangeActorActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("flushBlobRangeActor", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont4Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont4Catch1(error, 0);
		} catch (...) {
			a_body1cont4Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("flushBlobRangeActor", reinterpret_cast<unsigned long>(this), 2);

	}
															#line 8683 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<DatabaseContext> cx;
															#line 8683 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeyRange range;
															#line 8683 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	bool compact;
															#line 8683 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Optional<Version> version;
															#line 8683 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Optional<Reference<Tenant>> tenant;
															#line 8692 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Database db;
															#line 8694 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Transaction tr;
															#line 44005 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via flushBlobRangeActor()
															#line 8683 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class FlushBlobRangeActorActor final : public Actor<bool>, public ActorCallback< FlushBlobRangeActorActor, 0, Void >, public ActorCallback< FlushBlobRangeActorActor, 1, Version >, public ActorCallback< FlushBlobRangeActorActor, 2, Void >, public FastAllocated<FlushBlobRangeActorActor>, public FlushBlobRangeActorActorState<FlushBlobRangeActorActor> {
															#line 44010 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<FlushBlobRangeActorActor>::operator new;
	using FastAllocated<FlushBlobRangeActorActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<bool>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< FlushBlobRangeActorActor, 0, Void >;
friend struct ActorCallback< FlushBlobRangeActorActor, 1, Version >;
friend struct ActorCallback< FlushBlobRangeActorActor, 2, Void >;
															#line 8683 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	FlushBlobRangeActorActor(Reference<DatabaseContext> const& cx,KeyRange const& range,bool const& compact,Optional<Version> const& version,Optional<Reference<Tenant>> const& tenant) 
															#line 44023 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<bool>(),
		   FlushBlobRangeActorActorState<FlushBlobRangeActorActor>(cx, range, compact, version, tenant)
	{
		fdb_probe_actor_enter("flushBlobRangeActor", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("flushBlobRangeActor");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("flushBlobRangeActor", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< FlushBlobRangeActorActor, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< FlushBlobRangeActorActor, 1, Version >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< FlushBlobRangeActorActor, 2, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 8683 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<bool> flushBlobRangeActor( Reference<DatabaseContext> const& cx, KeyRange const& range, bool const& compact, Optional<Version> const& version, Optional<Reference<Tenant>> const& tenant ) {
															#line 8683 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<bool>(new FlushBlobRangeActorActor(cx, range, compact, version, tenant));
															#line 44053 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 8710 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

Future<bool> DatabaseContext::flushBlobRange(const KeyRange& range,
                                             bool compact,
                                             Optional<Version> version,
                                             Optional<Reference<Tenant>> tenant) {
	return flushBlobRangeActor(Reference<DatabaseContext>::addRef(this), range, compact, version, tenant);
}

															#line 44065 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via readStorageWiggleValues()
															#line 8718 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class ReadStorageWiggleValuesActor>
															#line 8718 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class ReadStorageWiggleValuesActorState {
															#line 44072 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 8718 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	ReadStorageWiggleValuesActorState(Database const& cx,bool const& primary,bool const& use_system_priority) 
															#line 8718 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 8718 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : cx(cx),
															#line 8718 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   primary(primary),
															#line 8718 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   use_system_priority(use_system_priority),
															#line 8721 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   wiggleState(),
															#line 8722 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   metadataMap(wiggleState.wigglingStorageServer(PrimaryRegion(primary))),
															#line 8725 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   tr(new ReadYourWritesTransaction(cx)),
															#line 8726 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   res()
															#line 44091 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("readStorageWiggleValues", reinterpret_cast<unsigned long>(this));

	}
	~ReadStorageWiggleValuesActorState() 
	{
		fdb_probe_actor_destroy("readStorageWiggleValues", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 8729 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			;
															#line 44106 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~ReadStorageWiggleValuesActorState();
		static_cast<ReadStorageWiggleValuesActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 8743 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<ReadStorageWiggleValuesActor*>(this)->SAV<std::vector<std::pair<UID, StorageWiggleValue>>>::futures) { (void)(res.results); this->~ReadStorageWiggleValuesActorState(); static_cast<ReadStorageWiggleValuesActor*>(this)->destroy(); return 0; }
															#line 44129 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<ReadStorageWiggleValuesActor*>(this)->SAV< std::vector<std::pair<UID, StorageWiggleValue>> >::value()) std::vector<std::pair<UID, StorageWiggleValue>>(res.results);
		this->~ReadStorageWiggleValuesActorState();
		static_cast<ReadStorageWiggleValuesActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
		try {
															#line 8731 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tr->setOption(FDBTransactionOptions::READ_SYSTEM_KEYS);
															#line 8732 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tr->setOption(FDBTransactionOptions::READ_LOCK_AWARE);
															#line 8733 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (use_system_priority)
															#line 44153 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 8734 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				tr->setOption(FDBTransactionOptions::PRIORITY_SYSTEM_IMMEDIATE);
															#line 44157 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 8736 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_0 = store(res, metadataMap.getRange(tr, UID(0, 0), Optional<UID>(), CLIENT_KNOBS->TOO_MANY));
															#line 8736 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<ReadStorageWiggleValuesActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 44163 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1loopBody1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
			static_cast<ReadStorageWiggleValuesActor*>(this)->actor_wait_state = 1;
															#line 8736 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< ReadStorageWiggleValuesActor, 0, Void >*>(static_cast<ReadStorageWiggleValuesActor*>(this)));
															#line 44168 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1break1(int loopDepth) 
	{
		try {
			return a_body1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 8740 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_2 = tr->onError(e);
															#line 8740 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<ReadStorageWiggleValuesActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 44205 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1Catch1when1(__when_expr_2.get(), loopDepth); };
			static_cast<ReadStorageWiggleValuesActor*>(this)->actor_wait_state = 3;
															#line 8740 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< ReadStorageWiggleValuesActor, 2, Void >*>(static_cast<ReadStorageWiggleValuesActor*>(this)));
															#line 44210 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(Void const& _,int loopDepth) 
	{
															#line 8737 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_1 = tr->commit();
															#line 8737 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<ReadStorageWiggleValuesActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 44227 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
		static_cast<ReadStorageWiggleValuesActor*>(this)->actor_wait_state = 2;
															#line 8737 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< ReadStorageWiggleValuesActor, 1, Void >*>(static_cast<ReadStorageWiggleValuesActor*>(this)));
															#line 44232 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2(Void && _,int loopDepth) 
	{
															#line 8737 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_1 = tr->commit();
															#line 8737 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<ReadStorageWiggleValuesActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 44243 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
		static_cast<ReadStorageWiggleValuesActor*>(this)->actor_wait_state = 2;
															#line 8737 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< ReadStorageWiggleValuesActor, 1, Void >*>(static_cast<ReadStorageWiggleValuesActor*>(this)));
															#line 44248 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<ReadStorageWiggleValuesActor*>(this)->actor_wait_state > 0) static_cast<ReadStorageWiggleValuesActor*>(this)->actor_wait_state = 0;
		static_cast<ReadStorageWiggleValuesActor*>(this)->ActorCallback< ReadStorageWiggleValuesActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< ReadStorageWiggleValuesActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("readStorageWiggleValues", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("readStorageWiggleValues", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< ReadStorageWiggleValuesActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("readStorageWiggleValues", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("readStorageWiggleValues", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< ReadStorageWiggleValuesActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("readStorageWiggleValues", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("readStorageWiggleValues", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1cont4(Void const& _,int loopDepth) 
	{
		return a_body1break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1loopBody1cont4(Void && _,int loopDepth) 
	{
		return a_body1break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont4(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont4(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<ReadStorageWiggleValuesActor*>(this)->actor_wait_state > 0) static_cast<ReadStorageWiggleValuesActor*>(this)->actor_wait_state = 0;
		static_cast<ReadStorageWiggleValuesActor*>(this)->ActorCallback< ReadStorageWiggleValuesActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< ReadStorageWiggleValuesActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("readStorageWiggleValues", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("readStorageWiggleValues", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< ReadStorageWiggleValuesActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("readStorageWiggleValues", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("readStorageWiggleValues", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< ReadStorageWiggleValuesActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("readStorageWiggleValues", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("readStorageWiggleValues", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<ReadStorageWiggleValuesActor*>(this)->actor_wait_state > 0) static_cast<ReadStorageWiggleValuesActor*>(this)->actor_wait_state = 0;
		static_cast<ReadStorageWiggleValuesActor*>(this)->ActorCallback< ReadStorageWiggleValuesActor, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< ReadStorageWiggleValuesActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("readStorageWiggleValues", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("readStorageWiggleValues", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< ReadStorageWiggleValuesActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("readStorageWiggleValues", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("readStorageWiggleValues", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< ReadStorageWiggleValuesActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("readStorageWiggleValues", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("readStorageWiggleValues", reinterpret_cast<unsigned long>(this), 2);

	}
															#line 8718 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Database cx;
															#line 8718 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	bool primary;
															#line 8718 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	bool use_system_priority;
															#line 8721 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	StorageWiggleData wiggleState;
															#line 8722 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeyBackedObjectMap<UID, StorageWiggleValue, decltype(IncludeVersion())> metadataMap;
															#line 8725 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 8726 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeyBackedRangeResult<std::pair<UID, StorageWiggleValue>> res;
															#line 44480 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via readStorageWiggleValues()
															#line 8718 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class ReadStorageWiggleValuesActor final : public Actor<std::vector<std::pair<UID, StorageWiggleValue>>>, public ActorCallback< ReadStorageWiggleValuesActor, 0, Void >, public ActorCallback< ReadStorageWiggleValuesActor, 1, Void >, public ActorCallback< ReadStorageWiggleValuesActor, 2, Void >, public FastAllocated<ReadStorageWiggleValuesActor>, public ReadStorageWiggleValuesActorState<ReadStorageWiggleValuesActor> {
															#line 44485 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<ReadStorageWiggleValuesActor>::operator new;
	using FastAllocated<ReadStorageWiggleValuesActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<std::vector<std::pair<UID, StorageWiggleValue>>>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< ReadStorageWiggleValuesActor, 0, Void >;
friend struct ActorCallback< ReadStorageWiggleValuesActor, 1, Void >;
friend struct ActorCallback< ReadStorageWiggleValuesActor, 2, Void >;
															#line 8718 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	ReadStorageWiggleValuesActor(Database const& cx,bool const& primary,bool const& use_system_priority) 
															#line 44498 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<std::vector<std::pair<UID, StorageWiggleValue>>>(),
		   ReadStorageWiggleValuesActorState<ReadStorageWiggleValuesActor>(cx, primary, use_system_priority)
	{
		fdb_probe_actor_enter("readStorageWiggleValues", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("readStorageWiggleValues");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("readStorageWiggleValues", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< ReadStorageWiggleValuesActor, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< ReadStorageWiggleValuesActor, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< ReadStorageWiggleValuesActor, 2, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 8718 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<std::vector<std::pair<UID, StorageWiggleValue>>> readStorageWiggleValues( Database const& cx, bool const& primary, bool const& use_system_priority ) {
															#line 8718 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<std::vector<std::pair<UID, StorageWiggleValue>>>(new ReadStorageWiggleValuesActor(cx, primary, use_system_priority));
															#line 44528 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 8745 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

															#line 44533 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via splitStorageMetricsStream()
															#line 8746 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class SplitStorageMetricsStreamActor>
															#line 8746 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class SplitStorageMetricsStreamActorState {
															#line 44540 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 8746 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	SplitStorageMetricsStreamActorState(PromiseStream<Key> const& resultStream,Database const& cx,KeyRange const& keys,StorageMetrics const& limit,StorageMetrics const& estimated,Optional<int> const& minSplitBytes) 
															#line 8746 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 8746 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : resultStream(resultStream),
															#line 8746 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   cx(cx),
															#line 8746 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   keys(keys),
															#line 8746 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   limit(limit),
															#line 8746 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   estimated(estimated),
															#line 8746 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   minSplitBytes(minSplitBytes),
															#line 8752 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   span("NAPI:SplitStorageMetricsStream"_loc),
															#line 8753 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   beginKey(keys.begin),
															#line 8754 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   globalLastKey(beginKey)
															#line 44563 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("splitStorageMetricsStream", reinterpret_cast<unsigned long>(this));

	}
	~SplitStorageMetricsStreamActorState() 
	{
		fdb_probe_actor_destroy("splitStorageMetricsStream", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 8755 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			resultStream.send(beginKey);
															#line 8757 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			globalUsed = StorageMetrics();
															#line 8758 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			;
															#line 44582 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~SplitStorageMetricsStreamActorState();
		static_cast<SplitStorageMetricsStreamActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 8840 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<SplitStorageMetricsStreamActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~SplitStorageMetricsStreamActorState(); static_cast<SplitStorageMetricsStreamActor*>(this)->destroy(); return 0; }
															#line 44605 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<SplitStorageMetricsStreamActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~SplitStorageMetricsStreamActorState();
		static_cast<SplitStorageMetricsStreamActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
															#line 8759 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<std::vector<KeyRangeLocationInfo>> __when_expr_0 = getKeyRangeLocations(cx, TenantInfo(), KeyRangeRef(beginKey, keys.end), CLIENT_KNOBS->STORAGE_METRICS_SHARD_LIMIT, Reverse::False, &StorageServerInterface::splitMetrics, span.context, Optional<UID>(), UseProvisionalProxies::False, latestVersion);
															#line 8759 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<SplitStorageMetricsStreamActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 44626 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
		static_cast<SplitStorageMetricsStreamActor*>(this)->actor_wait_state = 1;
															#line 8759 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< SplitStorageMetricsStreamActor, 0, std::vector<KeyRangeLocationInfo> >*>(static_cast<SplitStorageMetricsStreamActor*>(this)));
															#line 44631 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1break1(int loopDepth) 
	{
		try {
			return a_body1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		try {
															#line 8773 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			localUsed = globalUsed;
															#line 8774 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			localLastKey = globalLastKey;
															#line 8775 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			results = Standalone<VectorRef<KeyRef>>();
															#line 8776 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			i = 0;
															#line 8777 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			;
															#line 44662 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1loopBody1cont1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1cont1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1cont1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1when1(std::vector<KeyRangeLocationInfo> const& __locations,int loopDepth) 
	{
															#line 8759 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		locations = __locations;
															#line 44677 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(std::vector<KeyRangeLocationInfo> && __locations,int loopDepth) 
	{
		locations = std::move(__locations);
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<SplitStorageMetricsStreamActor*>(this)->actor_wait_state > 0) static_cast<SplitStorageMetricsStreamActor*>(this)->actor_wait_state = 0;
		static_cast<SplitStorageMetricsStreamActor*>(this)->ActorCallback< SplitStorageMetricsStreamActor, 0, std::vector<KeyRangeLocationInfo> >::remove();

	}
	void a_callback_fire(ActorCallback< SplitStorageMetricsStreamActor, 0, std::vector<KeyRangeLocationInfo> >*,std::vector<KeyRangeLocationInfo> const& value) 
	{
		fdb_probe_actor_enter("splitStorageMetricsStream", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("splitStorageMetricsStream", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< SplitStorageMetricsStreamActor, 0, std::vector<KeyRangeLocationInfo> >*,std::vector<KeyRangeLocationInfo> && value) 
	{
		fdb_probe_actor_enter("splitStorageMetricsStream", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("splitStorageMetricsStream", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< SplitStorageMetricsStreamActor, 0, std::vector<KeyRangeLocationInfo> >*,Error err) 
	{
		fdb_probe_actor_enter("splitStorageMetricsStream", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("splitStorageMetricsStream", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1cont2(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1cont1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 8828 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (e.code() == error_code_operation_cancelled)
															#line 44751 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 8829 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				return a_body1Catch1(e, std::max(0, loopDepth - 1));
															#line 44755 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 8831 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (e.code() != error_code_wrong_shard_server && e.code() != error_code_all_alternatives_failed)
															#line 44759 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 8832 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				TraceEvent(SevError, "SplitStorageMetricsStreamError").error(e);
															#line 8833 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				resultStream.sendError(e);
															#line 8834 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				return a_body1Catch1(e, std::max(0, loopDepth - 1));
															#line 44767 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 8836 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			cx->invalidateCache({}, keys);
															#line 8837 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_2 = delay(CLIENT_KNOBS->WRONG_SHARD_SERVER_DELAY, TaskPriority::DataDistribution);
															#line 8837 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<SplitStorageMetricsStreamActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 44775 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1cont1Catch1when1(__when_expr_2.get(), loopDepth); };
			static_cast<SplitStorageMetricsStreamActor*>(this)->actor_wait_state = 3;
															#line 8837 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< SplitStorageMetricsStreamActor, 2, Void >*>(static_cast<SplitStorageMetricsStreamActor*>(this)));
															#line 44780 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont3(int loopDepth) 
	{
															#line 8805 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		globalUsed = localUsed;
															#line 8808 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (keys.end <= locations.back().range.end && globalUsed.allLessOrEqual(limit * CLIENT_KNOBS->STORAGE_METRICS_UNFAIR_SPLIT_LIMIT) && results.size() > 1)
															#line 44797 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 8811 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			results.resize(results.arena(), results.size() - 1);
															#line 8812 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			localLastKey = results.back();
															#line 44803 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 8814 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		globalLastKey = localLastKey;
															#line 8816 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for( auto& splitKey : results ) {
															#line 8817 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			resultStream.send(splitKey);
															#line 44811 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 8820 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (keys.end <= locations.back().range.end)
															#line 44815 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 8821 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			resultStream.send(keys.end);
															#line 8822 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			resultStream.sendError(end_of_stream());
															#line 44821 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			return a_body1break1(loopDepth==0?0:loopDepth-1); // break
		}
		else
		{
															#line 8825 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			beginKey = locations.back().range.end;
															#line 44828 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
		loopDepth = a_body1loopBody1cont9(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1cont1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1(int loopDepth) 
	{
															#line 8777 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!(i < locations.size()))
															#line 44845 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
			return a_body1loopBody1cont1break1(loopDepth==0?0:loopDepth-1); // break
		}
															#line 8778 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		SplitMetricsRequest req(locations[i].range, limit, localUsed, estimated, i == locations.size() - 1 && keys.end <= locations.back().range.end, minSplitBytes);
															#line 8784 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<SplitMetricsReply> __when_expr_1 = loadBalance(locations[i].locations->locations(), &StorageServerInterface::splitMetrics, req, TaskPriority::DataDistribution);
															#line 8784 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<SplitStorageMetricsStreamActor*>(this)->actor_wait_state < 0) return a_body1loopBody1cont1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 44855 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1cont1Catch1(__when_expr_1.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1cont1loopBody1when1(__when_expr_1.get(), loopDepth); };
		static_cast<SplitStorageMetricsStreamActor*>(this)->actor_wait_state = 2;
															#line 8784 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< SplitStorageMetricsStreamActor, 1, SplitMetricsReply >*>(static_cast<SplitStorageMetricsStreamActor*>(this)));
															#line 44860 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont1break1(int loopDepth) 
	{
		try {
			return a_body1loopBody1cont3(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1cont1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1cont1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1cont1(SplitMetricsReply const& res,int loopDepth) 
	{
															#line 8788 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (res.splits.size() && res.splits[0] <= localLastKey)
															#line 44882 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 8791 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ASSERT_WE_THINK(false);
															#line 8792 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			return a_body1loopBody1cont1Catch1(all_alternatives_failed(), std::max(0, loopDepth - 1));
															#line 44888 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 8795 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (res.splits.size())
															#line 44892 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 8796 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			results.append(results.arena(), res.splits.begin(), res.splits.size());
															#line 8797 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			results.arena().dependsOn(res.splits.arena());
															#line 8798 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			localLastKey = res.splits.back();
															#line 44900 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 8800 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		localUsed = res.used;
															#line 8777 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		i++;
															#line 44906 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (loopDepth == 0) return a_body1loopBody1cont1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1cont1(SplitMetricsReply && res,int loopDepth) 
	{
															#line 8788 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (res.splits.size() && res.splits[0] <= localLastKey)
															#line 44915 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 8791 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ASSERT_WE_THINK(false);
															#line 8792 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			return a_body1loopBody1cont1Catch1(all_alternatives_failed(), std::max(0, loopDepth - 1));
															#line 44921 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 8795 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (res.splits.size())
															#line 44925 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 8796 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			results.append(results.arena(), res.splits.begin(), res.splits.size());
															#line 8797 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			results.arena().dependsOn(res.splits.arena());
															#line 8798 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			localLastKey = res.splits.back();
															#line 44933 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 8800 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		localUsed = res.used;
															#line 8777 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		i++;
															#line 44939 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (loopDepth == 0) return a_body1loopBody1cont1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1when1(SplitMetricsReply const& res,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1loopBody1cont1(res, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1when1(SplitMetricsReply && res,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1loopBody1cont1(std::move(res), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<SplitStorageMetricsStreamActor*>(this)->actor_wait_state > 0) static_cast<SplitStorageMetricsStreamActor*>(this)->actor_wait_state = 0;
		static_cast<SplitStorageMetricsStreamActor*>(this)->ActorCallback< SplitStorageMetricsStreamActor, 1, SplitMetricsReply >::remove();

	}
	void a_callback_fire(ActorCallback< SplitStorageMetricsStreamActor, 1, SplitMetricsReply >*,SplitMetricsReply const& value) 
	{
		fdb_probe_actor_enter("splitStorageMetricsStream", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("splitStorageMetricsStream", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< SplitStorageMetricsStreamActor, 1, SplitMetricsReply >*,SplitMetricsReply && value) 
	{
		fdb_probe_actor_enter("splitStorageMetricsStream", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("splitStorageMetricsStream", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< SplitStorageMetricsStreamActor, 1, SplitMetricsReply >*,Error err) 
	{
		fdb_probe_actor_enter("splitStorageMetricsStream", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("splitStorageMetricsStream", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1loopBody1cont9(int loopDepth) 
	{
		try {
			loopDepth = a_body1loopBody1cont2(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<SplitStorageMetricsStreamActor*>(this)->actor_wait_state > 0) static_cast<SplitStorageMetricsStreamActor*>(this)->actor_wait_state = 0;
		static_cast<SplitStorageMetricsStreamActor*>(this)->ActorCallback< SplitStorageMetricsStreamActor, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< SplitStorageMetricsStreamActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("splitStorageMetricsStream", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("splitStorageMetricsStream", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< SplitStorageMetricsStreamActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("splitStorageMetricsStream", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("splitStorageMetricsStream", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< SplitStorageMetricsStreamActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("splitStorageMetricsStream", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("splitStorageMetricsStream", reinterpret_cast<unsigned long>(this), 2);

	}
															#line 8746 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	PromiseStream<Key> resultStream;
															#line 8746 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Database cx;
															#line 8746 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeyRange keys;
															#line 8746 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	StorageMetrics limit;
															#line 8746 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	StorageMetrics estimated;
															#line 8746 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Optional<int> minSplitBytes;
															#line 8752 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Span span;
															#line 8753 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Key beginKey;
															#line 8754 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Key globalLastKey;
															#line 8757 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	StorageMetrics globalUsed;
															#line 8759 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	std::vector<KeyRangeLocationInfo> locations;
															#line 8773 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	StorageMetrics localUsed;
															#line 8774 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Key localLastKey;
															#line 8775 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Standalone<VectorRef<KeyRef>> results;
															#line 8776 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	int i;
															#line 45125 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via splitStorageMetricsStream()
															#line 8746 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class SplitStorageMetricsStreamActor final : public Actor<Void>, public ActorCallback< SplitStorageMetricsStreamActor, 0, std::vector<KeyRangeLocationInfo> >, public ActorCallback< SplitStorageMetricsStreamActor, 1, SplitMetricsReply >, public ActorCallback< SplitStorageMetricsStreamActor, 2, Void >, public FastAllocated<SplitStorageMetricsStreamActor>, public SplitStorageMetricsStreamActorState<SplitStorageMetricsStreamActor> {
															#line 45130 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<SplitStorageMetricsStreamActor>::operator new;
	using FastAllocated<SplitStorageMetricsStreamActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< SplitStorageMetricsStreamActor, 0, std::vector<KeyRangeLocationInfo> >;
friend struct ActorCallback< SplitStorageMetricsStreamActor, 1, SplitMetricsReply >;
friend struct ActorCallback< SplitStorageMetricsStreamActor, 2, Void >;
															#line 8746 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	SplitStorageMetricsStreamActor(PromiseStream<Key> const& resultStream,Database const& cx,KeyRange const& keys,StorageMetrics const& limit,StorageMetrics const& estimated,Optional<int> const& minSplitBytes) 
															#line 45143 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Void>(),
		   SplitStorageMetricsStreamActorState<SplitStorageMetricsStreamActor>(resultStream, cx, keys, limit, estimated, minSplitBytes)
	{
		fdb_probe_actor_enter("splitStorageMetricsStream", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("splitStorageMetricsStream");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("splitStorageMetricsStream", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< SplitStorageMetricsStreamActor, 0, std::vector<KeyRangeLocationInfo> >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< SplitStorageMetricsStreamActor, 1, SplitMetricsReply >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< SplitStorageMetricsStreamActor, 2, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 8746 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<Void> splitStorageMetricsStream( PromiseStream<Key> const& resultStream, Database const& cx, KeyRange const& keys, StorageMetrics const& limit, StorageMetrics const& estimated, Optional<int> const& minSplitBytes ) {
															#line 8746 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Void>(new SplitStorageMetricsStreamActor(resultStream, cx, keys, limit, estimated, minSplitBytes));
															#line 45173 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 8842 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

Future<Void> DatabaseContext::splitStorageMetricsStream(const PromiseStream<Key>& resultStream,
                                                        KeyRange const& keys,
                                                        StorageMetrics const& limit,
                                                        StorageMetrics const& estimated,
                                                        Optional<int> const& minSplitBytes) {
	return ::splitStorageMetricsStream(
	    resultStream, Database(Reference<DatabaseContext>::addRef(this)), keys, limit, estimated, minSplitBytes);
}

															#line 45187 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via splitStorageMetricsWithLocations()
															#line 8852 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class SplitStorageMetricsWithLocationsActor>
															#line 8852 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class SplitStorageMetricsWithLocationsActorState {
															#line 45194 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 8852 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	SplitStorageMetricsWithLocationsActorState(std::vector<KeyRangeLocationInfo> const& locations,KeyRange const& keys,StorageMetrics const& limit,StorageMetrics const& estimated,Optional<int> const& minSplitBytes) 
															#line 8852 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 8852 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : locations(locations),
															#line 8852 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   keys(keys),
															#line 8852 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   limit(limit),
															#line 8852 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   estimated(estimated),
															#line 8852 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   minSplitBytes(minSplitBytes),
															#line 8858 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   used(),
															#line 8859 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   results()
															#line 45213 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("splitStorageMetricsWithLocations", reinterpret_cast<unsigned long>(this));

	}
	~SplitStorageMetricsWithLocationsActorState() 
	{
		fdb_probe_actor_destroy("splitStorageMetricsWithLocations", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 8860 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			results.push_back_deep(results.arena(), keys.begin);
															#line 45228 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			try {
															#line 8863 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				i = 0;
															#line 8864 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				;
															#line 45234 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				loopDepth = a_body1loopHead1(loopDepth);
			}
			catch (Error& error) {
				loopDepth = a_body1Catch2(error, loopDepth);
			} catch (...) {
				loopDepth = a_body1Catch2(unknown_error(), loopDepth);
			}
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~SplitStorageMetricsWithLocationsActorState();
		static_cast<SplitStorageMetricsWithLocationsActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 8911 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<SplitStorageMetricsWithLocationsActor*>(this)->SAV<Optional<Standalone<VectorRef<KeyRef>>>>::futures) { (void)(Optional<Standalone<VectorRef<KeyRef>>>()); this->~SplitStorageMetricsWithLocationsActorState(); static_cast<SplitStorageMetricsWithLocationsActor*>(this)->destroy(); return 0; }
															#line 45263 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<SplitStorageMetricsWithLocationsActor*>(this)->SAV< Optional<Standalone<VectorRef<KeyRef>>> >::value()) Optional<Standalone<VectorRef<KeyRef>>>(Optional<Standalone<VectorRef<KeyRef>>>());
		this->~SplitStorageMetricsWithLocationsActorState();
		static_cast<SplitStorageMetricsWithLocationsActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1Catch2(const Error& e,int loopDepth=0) 
	{
		try {
															#line 8906 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (e.code() != error_code_wrong_shard_server && e.code() != error_code_all_alternatives_failed)
															#line 45276 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 8907 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				TraceEvent(SevError, "SplitStorageMetricsError").error(e);
															#line 8908 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				return a_body1Catch1(e, loopDepth);
															#line 45282 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
			loopDepth = a_body1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont2(int loopDepth) 
	{
															#line 8897 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (used.allLessOrEqual(limit * CLIENT_KNOBS->STORAGE_METRICS_UNFAIR_SPLIT_LIMIT) && results.size() > 1)
															#line 45298 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 8898 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			results.resize(results.arena(), results.size() - 1);
															#line 45302 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 8901 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (keys.end <= locations.back().range.end)
															#line 45306 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 8902 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			results.push_back_deep(results.arena(), keys.end);
															#line 45310 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 8904 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<SplitStorageMetricsWithLocationsActor*>(this)->SAV<Optional<Standalone<VectorRef<KeyRef>>>>::futures) { (void)(results); this->~SplitStorageMetricsWithLocationsActorState(); static_cast<SplitStorageMetricsWithLocationsActor*>(this)->destroy(); return 0; }
															#line 45314 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<SplitStorageMetricsWithLocationsActor*>(this)->SAV< Optional<Standalone<VectorRef<KeyRef>>> >::value()) Optional<Standalone<VectorRef<KeyRef>>>(std::move(results)); // state_var_RVO
		this->~SplitStorageMetricsWithLocationsActorState();
		static_cast<SplitStorageMetricsWithLocationsActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
															#line 8864 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!(i < locations.size()))
															#line 45333 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
			return a_body1break1(loopDepth==0?0:loopDepth-1); // break
		}
															#line 8865 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		beginKey = locations[i].range.begin;
															#line 8866 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		;
															#line 45341 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1break1(int loopDepth) 
	{
		try {
			return a_body1cont2(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch2(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch2(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
															#line 8864 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		i++;
															#line 45363 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1loopBody1(int loopDepth) 
	{
															#line 8867 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		KeyRangeRef range(beginKey, locations[i].range.end);
															#line 8868 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		SplitMetricsRequest req(range, limit, used, estimated, i == locations.size() - 1, minSplitBytes);
															#line 8869 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<SplitMetricsReply> __when_expr_0 = loadBalance(locations[i].locations->locations(), &StorageServerInterface::splitMetrics, req, TaskPriority::DataDistribution);
															#line 8869 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<SplitStorageMetricsWithLocationsActor*>(this)->actor_wait_state < 0) return a_body1Catch2(actor_cancelled(), std::max(0, loopDepth - 2));
															#line 45385 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch2(__when_expr_0.getError(), std::max(0, loopDepth - 2)); else return a_body1loopBody1loopBody1when1(__when_expr_0.get(), loopDepth); };
		static_cast<SplitStorageMetricsWithLocationsActor*>(this)->actor_wait_state = 1;
															#line 8869 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< SplitStorageMetricsWithLocationsActor, 0, SplitMetricsReply >*>(static_cast<SplitStorageMetricsWithLocationsActor*>(this)));
															#line 45390 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1break1(int loopDepth) 
	{
		try {
			return a_body1loopBody1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch2(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch2(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1loopBody1cont1(SplitMetricsReply const& res,int loopDepth) 
	{
															#line 8873 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (res.splits.size() && res.splits[0] <= results.back())
															#line 45412 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 8876 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ASSERT_WE_THINK(false);
															#line 8877 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			return a_body1Catch2(all_alternatives_failed(), std::max(0, loopDepth - 2));
															#line 45418 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 8880 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (res.splits.size())
															#line 45422 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 8881 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			results.append(results.arena(), res.splits.begin(), res.splits.size());
															#line 8882 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			results.arena().dependsOn(res.splits.arena());
															#line 45428 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 8885 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		used = res.used;
															#line 8887 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (res.more && res.splits.size())
															#line 45434 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 8889 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			beginKey = KeyRef(beginKey.arena(), res.splits.back());
															#line 45438 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
		else
		{
			return a_body1loopBody1break1(loopDepth==0?0:loopDepth-1); // break
		}
		if (loopDepth == 0) return a_body1loopBody1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1loopBody1cont1(SplitMetricsReply && res,int loopDepth) 
	{
															#line 8873 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (res.splits.size() && res.splits[0] <= results.back())
															#line 45452 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 8876 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ASSERT_WE_THINK(false);
															#line 8877 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			return a_body1Catch2(all_alternatives_failed(), std::max(0, loopDepth - 2));
															#line 45458 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 8880 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (res.splits.size())
															#line 45462 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 8881 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			results.append(results.arena(), res.splits.begin(), res.splits.size());
															#line 8882 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			results.arena().dependsOn(res.splits.arena());
															#line 45468 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 8885 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		used = res.used;
															#line 8887 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (res.more && res.splits.size())
															#line 45474 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 8889 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			beginKey = KeyRef(beginKey.arena(), res.splits.back());
															#line 45478 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
		else
		{
			return a_body1loopBody1break1(loopDepth==0?0:loopDepth-1); // break
		}
		if (loopDepth == 0) return a_body1loopBody1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1loopBody1when1(SplitMetricsReply const& res,int loopDepth) 
	{
		loopDepth = a_body1loopBody1loopBody1cont1(res, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1loopBody1when1(SplitMetricsReply && res,int loopDepth) 
	{
		loopDepth = a_body1loopBody1loopBody1cont1(std::move(res), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<SplitStorageMetricsWithLocationsActor*>(this)->actor_wait_state > 0) static_cast<SplitStorageMetricsWithLocationsActor*>(this)->actor_wait_state = 0;
		static_cast<SplitStorageMetricsWithLocationsActor*>(this)->ActorCallback< SplitStorageMetricsWithLocationsActor, 0, SplitMetricsReply >::remove();

	}
	void a_callback_fire(ActorCallback< SplitStorageMetricsWithLocationsActor, 0, SplitMetricsReply >*,SplitMetricsReply const& value) 
	{
		fdb_probe_actor_enter("splitStorageMetricsWithLocations", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("splitStorageMetricsWithLocations", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< SplitStorageMetricsWithLocationsActor, 0, SplitMetricsReply >*,SplitMetricsReply && value) 
	{
		fdb_probe_actor_enter("splitStorageMetricsWithLocations", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("splitStorageMetricsWithLocations", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< SplitStorageMetricsWithLocationsActor, 0, SplitMetricsReply >*,Error err) 
	{
		fdb_probe_actor_enter("splitStorageMetricsWithLocations", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch2(err, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("splitStorageMetricsWithLocations", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 8852 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	std::vector<KeyRangeLocationInfo> locations;
															#line 8852 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeyRange keys;
															#line 8852 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	StorageMetrics limit;
															#line 8852 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	StorageMetrics estimated;
															#line 8852 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Optional<int> minSplitBytes;
															#line 8858 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	StorageMetrics used;
															#line 8859 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Standalone<VectorRef<KeyRef>> results;
															#line 8863 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	int i;
															#line 8865 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Key beginKey;
															#line 45569 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via splitStorageMetricsWithLocations()
															#line 8852 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class SplitStorageMetricsWithLocationsActor final : public Actor<Optional<Standalone<VectorRef<KeyRef>>>>, public ActorCallback< SplitStorageMetricsWithLocationsActor, 0, SplitMetricsReply >, public FastAllocated<SplitStorageMetricsWithLocationsActor>, public SplitStorageMetricsWithLocationsActorState<SplitStorageMetricsWithLocationsActor> {
															#line 45574 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<SplitStorageMetricsWithLocationsActor>::operator new;
	using FastAllocated<SplitStorageMetricsWithLocationsActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Optional<Standalone<VectorRef<KeyRef>>>>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< SplitStorageMetricsWithLocationsActor, 0, SplitMetricsReply >;
															#line 8852 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	SplitStorageMetricsWithLocationsActor(std::vector<KeyRangeLocationInfo> const& locations,KeyRange const& keys,StorageMetrics const& limit,StorageMetrics const& estimated,Optional<int> const& minSplitBytes) 
															#line 45585 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Optional<Standalone<VectorRef<KeyRef>>>>(),
		   SplitStorageMetricsWithLocationsActorState<SplitStorageMetricsWithLocationsActor>(locations, keys, limit, estimated, minSplitBytes)
	{
		fdb_probe_actor_enter("splitStorageMetricsWithLocations", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("splitStorageMetricsWithLocations");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("splitStorageMetricsWithLocations", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< SplitStorageMetricsWithLocationsActor, 0, SplitMetricsReply >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 8852 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<Optional<Standalone<VectorRef<KeyRef>>>> splitStorageMetricsWithLocations( std::vector<KeyRangeLocationInfo> const& locations, KeyRange const& keys, StorageMetrics const& limit, StorageMetrics const& estimated, Optional<int> const& minSplitBytes ) {
															#line 8852 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Optional<Standalone<VectorRef<KeyRef>>>>(new SplitStorageMetricsWithLocationsActor(locations, keys, limit, estimated, minSplitBytes));
															#line 45613 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 8913 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

															#line 45618 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via splitStorageMetrics()
															#line 8914 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class SplitStorageMetricsActor>
															#line 8914 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class SplitStorageMetricsActorState {
															#line 45625 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 8914 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	SplitStorageMetricsActorState(Database const& cx,KeyRange const& keys,StorageMetrics const& limit,StorageMetrics const& estimated,Optional<int> const& minSplitBytes) 
															#line 8914 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 8914 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : cx(cx),
															#line 8914 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   keys(keys),
															#line 8914 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   limit(limit),
															#line 8914 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   estimated(estimated),
															#line 8914 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   minSplitBytes(minSplitBytes),
															#line 8919 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   span("NAPI:SplitStorageMetrics"_loc)
															#line 45642 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("splitStorageMetrics", reinterpret_cast<unsigned long>(this));

	}
	~SplitStorageMetricsActorState() 
	{
		fdb_probe_actor_destroy("splitStorageMetrics", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 8920 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			;
															#line 45657 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~SplitStorageMetricsActorState();
		static_cast<SplitStorageMetricsActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
															#line 8921 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<std::vector<KeyRangeLocationInfo>> __when_expr_0 = getKeyRangeLocations(cx, TenantInfo(), keys, CLIENT_KNOBS->STORAGE_METRICS_SHARD_LIMIT, Reverse::False, &StorageServerInterface::splitMetrics, span.context, Optional<UID>(), UseProvisionalProxies::False, latestVersion);
															#line 8921 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<SplitStorageMetricsActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 45689 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
		static_cast<SplitStorageMetricsActor*>(this)->actor_wait_state = 1;
															#line 8921 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< SplitStorageMetricsActor, 0, std::vector<KeyRangeLocationInfo> >*>(static_cast<SplitStorageMetricsActor*>(this)));
															#line 45694 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
															#line 8935 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (locations.size() == CLIENT_KNOBS->STORAGE_METRICS_SHARD_LIMIT)
															#line 45703 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 8936 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_1 = delay(CLIENT_KNOBS->STORAGE_METRICS_TOO_MANY_SHARDS_DELAY, TaskPriority::DataDistribution);
															#line 8936 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<SplitStorageMetricsActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 45709 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1cont1when1(__when_expr_1.get(), loopDepth); };
			static_cast<SplitStorageMetricsActor*>(this)->actor_wait_state = 2;
															#line 8936 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< SplitStorageMetricsActor, 1, Void >*>(static_cast<SplitStorageMetricsActor*>(this)));
															#line 45714 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1loopBody1cont2(loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1when1(std::vector<KeyRangeLocationInfo> const& __locations,int loopDepth) 
	{
															#line 8921 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		locations = __locations;
															#line 45728 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(std::vector<KeyRangeLocationInfo> && __locations,int loopDepth) 
	{
		locations = std::move(__locations);
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<SplitStorageMetricsActor*>(this)->actor_wait_state > 0) static_cast<SplitStorageMetricsActor*>(this)->actor_wait_state = 0;
		static_cast<SplitStorageMetricsActor*>(this)->ActorCallback< SplitStorageMetricsActor, 0, std::vector<KeyRangeLocationInfo> >::remove();

	}
	void a_callback_fire(ActorCallback< SplitStorageMetricsActor, 0, std::vector<KeyRangeLocationInfo> >*,std::vector<KeyRangeLocationInfo> const& value) 
	{
		fdb_probe_actor_enter("splitStorageMetrics", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("splitStorageMetrics", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< SplitStorageMetricsActor, 0, std::vector<KeyRangeLocationInfo> >*,std::vector<KeyRangeLocationInfo> && value) 
	{
		fdb_probe_actor_enter("splitStorageMetrics", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("splitStorageMetrics", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< SplitStorageMetricsActor, 0, std::vector<KeyRangeLocationInfo> >*,Error err) 
	{
		fdb_probe_actor_enter("splitStorageMetrics", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("splitStorageMetrics", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1cont2(int loopDepth) 
	{
															#line 8941 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Optional<Standalone<VectorRef<KeyRef>>>> __when_expr_2 = splitStorageMetricsWithLocations(locations, keys, limit, estimated, minSplitBytes);
															#line 8941 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<SplitStorageMetricsActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 45797 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1cont2when1(__when_expr_2.get(), loopDepth); };
		static_cast<SplitStorageMetricsActor*>(this)->actor_wait_state = 3;
															#line 8941 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< SplitStorageMetricsActor, 2, Optional<Standalone<VectorRef<KeyRef>>> >*>(static_cast<SplitStorageMetricsActor*>(this)));
															#line 45802 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont3(Void const& _,int loopDepth) 
	{
															#line 8937 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		cx->invalidateCache({}, keys);
															#line 45811 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		return a_body1loopHead1(loopDepth); // continue

		return loopDepth;
	}
	int a_body1loopBody1cont3(Void && _,int loopDepth) 
	{
															#line 8937 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		cx->invalidateCache({}, keys);
															#line 45820 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		return a_body1loopHead1(loopDepth); // continue

		return loopDepth;
	}
	int a_body1loopBody1cont1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<SplitStorageMetricsActor*>(this)->actor_wait_state > 0) static_cast<SplitStorageMetricsActor*>(this)->actor_wait_state = 0;
		static_cast<SplitStorageMetricsActor*>(this)->ActorCallback< SplitStorageMetricsActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< SplitStorageMetricsActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("splitStorageMetrics", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("splitStorageMetrics", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< SplitStorageMetricsActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("splitStorageMetrics", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("splitStorageMetrics", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< SplitStorageMetricsActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("splitStorageMetrics", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("splitStorageMetrics", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1loopBody1cont5(Optional<Standalone<VectorRef<KeyRef>>> const& results,int loopDepth) 
	{
															#line 8944 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (results.present())
															#line 45892 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 8945 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<SplitStorageMetricsActor*>(this)->SAV<Standalone<VectorRef<KeyRef>>>::futures) { (void)(results.get()); this->~SplitStorageMetricsActorState(); static_cast<SplitStorageMetricsActor*>(this)->destroy(); return 0; }
															#line 45896 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<SplitStorageMetricsActor*>(this)->SAV< Standalone<VectorRef<KeyRef>> >::value()) Standalone<VectorRef<KeyRef>>(results.get());
			this->~SplitStorageMetricsActorState();
			static_cast<SplitStorageMetricsActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 8948 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		cx->invalidateCache({}, keys);
															#line 8949 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_3 = delay(CLIENT_KNOBS->WRONG_SHARD_SERVER_DELAY, TaskPriority::DataDistribution);
															#line 8949 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<SplitStorageMetricsActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 45908 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch1(__when_expr_3.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1cont5when1(__when_expr_3.get(), loopDepth); };
		static_cast<SplitStorageMetricsActor*>(this)->actor_wait_state = 4;
															#line 8949 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< SplitStorageMetricsActor, 3, Void >*>(static_cast<SplitStorageMetricsActor*>(this)));
															#line 45913 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont5(Optional<Standalone<VectorRef<KeyRef>>> && results,int loopDepth) 
	{
															#line 8944 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (results.present())
															#line 45922 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 8945 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<SplitStorageMetricsActor*>(this)->SAV<Standalone<VectorRef<KeyRef>>>::futures) { (void)(results.get()); this->~SplitStorageMetricsActorState(); static_cast<SplitStorageMetricsActor*>(this)->destroy(); return 0; }
															#line 45926 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<SplitStorageMetricsActor*>(this)->SAV< Standalone<VectorRef<KeyRef>> >::value()) Standalone<VectorRef<KeyRef>>(results.get());
			this->~SplitStorageMetricsActorState();
			static_cast<SplitStorageMetricsActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 8948 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		cx->invalidateCache({}, keys);
															#line 8949 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_3 = delay(CLIENT_KNOBS->WRONG_SHARD_SERVER_DELAY, TaskPriority::DataDistribution);
															#line 8949 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<SplitStorageMetricsActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 45938 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch1(__when_expr_3.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1cont5when1(__when_expr_3.get(), loopDepth); };
		static_cast<SplitStorageMetricsActor*>(this)->actor_wait_state = 4;
															#line 8949 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< SplitStorageMetricsActor, 3, Void >*>(static_cast<SplitStorageMetricsActor*>(this)));
															#line 45943 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(Optional<Standalone<VectorRef<KeyRef>>> const& results,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont5(results, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(Optional<Standalone<VectorRef<KeyRef>>> && results,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont5(std::move(results), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<SplitStorageMetricsActor*>(this)->actor_wait_state > 0) static_cast<SplitStorageMetricsActor*>(this)->actor_wait_state = 0;
		static_cast<SplitStorageMetricsActor*>(this)->ActorCallback< SplitStorageMetricsActor, 2, Optional<Standalone<VectorRef<KeyRef>>> >::remove();

	}
	void a_callback_fire(ActorCallback< SplitStorageMetricsActor, 2, Optional<Standalone<VectorRef<KeyRef>>> >*,Optional<Standalone<VectorRef<KeyRef>>> const& value) 
	{
		fdb_probe_actor_enter("splitStorageMetrics", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("splitStorageMetrics", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< SplitStorageMetricsActor, 2, Optional<Standalone<VectorRef<KeyRef>>> >*,Optional<Standalone<VectorRef<KeyRef>>> && value) 
	{
		fdb_probe_actor_enter("splitStorageMetrics", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("splitStorageMetrics", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< SplitStorageMetricsActor, 2, Optional<Standalone<VectorRef<KeyRef>>> >*,Error err) 
	{
		fdb_probe_actor_enter("splitStorageMetrics", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("splitStorageMetrics", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1loopBody1cont6(Void const& _,int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1cont6(Void && _,int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1cont5when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont6(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont5when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont6(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<SplitStorageMetricsActor*>(this)->actor_wait_state > 0) static_cast<SplitStorageMetricsActor*>(this)->actor_wait_state = 0;
		static_cast<SplitStorageMetricsActor*>(this)->ActorCallback< SplitStorageMetricsActor, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< SplitStorageMetricsActor, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("splitStorageMetrics", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1cont5when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("splitStorageMetrics", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< SplitStorageMetricsActor, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("splitStorageMetrics", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1cont5when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("splitStorageMetrics", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< SplitStorageMetricsActor, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("splitStorageMetrics", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("splitStorageMetrics", reinterpret_cast<unsigned long>(this), 3);

	}
															#line 8914 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Database cx;
															#line 8914 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeyRange keys;
															#line 8914 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	StorageMetrics limit;
															#line 8914 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	StorageMetrics estimated;
															#line 8914 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Optional<int> minSplitBytes;
															#line 8919 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Span span;
															#line 8921 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	std::vector<KeyRangeLocationInfo> locations;
															#line 46100 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via splitStorageMetrics()
															#line 8914 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class SplitStorageMetricsActor final : public Actor<Standalone<VectorRef<KeyRef>>>, public ActorCallback< SplitStorageMetricsActor, 0, std::vector<KeyRangeLocationInfo> >, public ActorCallback< SplitStorageMetricsActor, 1, Void >, public ActorCallback< SplitStorageMetricsActor, 2, Optional<Standalone<VectorRef<KeyRef>>> >, public ActorCallback< SplitStorageMetricsActor, 3, Void >, public FastAllocated<SplitStorageMetricsActor>, public SplitStorageMetricsActorState<SplitStorageMetricsActor> {
															#line 46105 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<SplitStorageMetricsActor>::operator new;
	using FastAllocated<SplitStorageMetricsActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Standalone<VectorRef<KeyRef>>>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< SplitStorageMetricsActor, 0, std::vector<KeyRangeLocationInfo> >;
friend struct ActorCallback< SplitStorageMetricsActor, 1, Void >;
friend struct ActorCallback< SplitStorageMetricsActor, 2, Optional<Standalone<VectorRef<KeyRef>>> >;
friend struct ActorCallback< SplitStorageMetricsActor, 3, Void >;
															#line 8914 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	SplitStorageMetricsActor(Database const& cx,KeyRange const& keys,StorageMetrics const& limit,StorageMetrics const& estimated,Optional<int> const& minSplitBytes) 
															#line 46119 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Standalone<VectorRef<KeyRef>>>(),
		   SplitStorageMetricsActorState<SplitStorageMetricsActor>(cx, keys, limit, estimated, minSplitBytes)
	{
		fdb_probe_actor_enter("splitStorageMetrics", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("splitStorageMetrics");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("splitStorageMetrics", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< SplitStorageMetricsActor, 0, std::vector<KeyRangeLocationInfo> >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< SplitStorageMetricsActor, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< SplitStorageMetricsActor, 2, Optional<Standalone<VectorRef<KeyRef>>> >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< SplitStorageMetricsActor, 3, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 8914 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<Standalone<VectorRef<KeyRef>>> splitStorageMetrics( Database const& cx, KeyRange const& keys, StorageMetrics const& limit, StorageMetrics const& estimated, Optional<int> const& minSplitBytes ) {
															#line 8914 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Standalone<VectorRef<KeyRef>>>(new SplitStorageMetricsActor(cx, keys, limit, estimated, minSplitBytes));
															#line 46150 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 8952 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

Future<Standalone<VectorRef<KeyRef>>> DatabaseContext::splitStorageMetrics(KeyRange const& keys,
                                                                           StorageMetrics const& limit,
                                                                           StorageMetrics const& estimated,
                                                                           Optional<int> const& minSplitBytes) {
	return ::splitStorageMetrics(
	    Database(Reference<DatabaseContext>::addRef(this)), keys, limit, estimated, minSplitBytes);
}

void Transaction::checkDeferredError() const {
	trState->cx->checkDeferredError();
}

Reference<TransactionLogInfo> Transaction::createTrLogInfoProbabilistically(const Database& cx) {
	if (!cx->isError()) {
		double clientSamplingProbability =
		    cx->globalConfig->get<double>(fdbClientInfoTxnSampleRate, CLIENT_KNOBS->CSI_SAMPLING_PROBABILITY);
		if (((networkOptions.logClientInfo.present() && networkOptions.logClientInfo.get()) || BUGGIFY) &&
		    deterministicRandom()->random01() < clientSamplingProbability &&
		    (!g_network->isSimulated() || !g_simulator->speedUpSimulation)) {
			return makeReference<TransactionLogInfo>(TransactionLogInfo::DATABASE);
		}
	}

	return Reference<TransactionLogInfo>();
}

void Transaction::setTransactionID(UID id) {
	ASSERT(getSize() == 0);
	trState->spanContext = SpanContext(id, trState->spanContext.spanID, trState->spanContext.m_Flags);
	tr.spanContext = trState->spanContext;
	span.context = trState->spanContext;
}

void Transaction::setToken(uint64_t token) {
	ASSERT(getSize() == 0);
	trState->spanContext = SpanContext(trState->spanContext.traceID, token);
}

void enableClientInfoLogging() {
	ASSERT(networkOptions.logClientInfo.present() == false);
	networkOptions.logClientInfo = true;
	TraceEvent(SevInfo, "ClientInfoLoggingEnabled").log();
}

															#line 46199 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via snapCreate()
															#line 8997 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class SnapCreateActor>
															#line 8997 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class SnapCreateActorState {
															#line 46206 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 8997 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	SnapCreateActorState(Database const& cx,Standalone<StringRef> const& snapCmd,UID const& snapUID) 
															#line 8997 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 8997 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : cx(cx),
															#line 8997 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   snapCmd(snapCmd),
															#line 8997 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   snapUID(snapUID)
															#line 46217 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("snapCreate", reinterpret_cast<unsigned long>(this));

	}
	~SnapCreateActorState() 
	{
		fdb_probe_actor_destroy("snapCreate", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 8998 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent("SnapCreateEnter").detail("SnapCmd", snapCmd).detail("UID", snapUID);
															#line 46232 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			try {
															#line 9000 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				;
															#line 46236 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				loopDepth = a_body1loopHead1(loopDepth);
			}
			catch (Error& error) {
				loopDepth = a_body1Catch2(error, loopDepth);
			} catch (...) {
				loopDepth = a_body1Catch2(unknown_error(), loopDepth);
			}
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~SnapCreateActorState();
		static_cast<SnapCreateActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1Catch2(const Error& e,int loopDepth=0) 
	{
		try {
															#line 9014 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent("SnapCreateError").error(e).detail("SnapCmd", snapCmd.toString()).detail("UID", snapUID);
															#line 9015 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			return a_body1Catch1(e, loopDepth);
															#line 46268 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
															#line 9002 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_0 = cx->onProxiesChanged();
															#line 9001 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<SnapCreateActor*>(this)->actor_wait_state < 0) return a_body1Catch2(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 46291 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch2(__when_expr_0.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
															#line 9003 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_1 = basicLoadBalance(cx->getCommitProxies(UseProvisionalProxies::False), &CommitProxyInterface::proxySnapReq, ProxySnapRequest(snapCmd, snapUID, snapUID), cx->taskID, AtMostOnce::True);
															#line 46295 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch2(__when_expr_1.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1when2(__when_expr_1.get(), loopDepth); };
		static_cast<SnapCreateActor*>(this)->actor_wait_state = 1;
															#line 9002 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< SnapCreateActor, 0, Void >*>(static_cast<SnapCreateActor*>(this)));
															#line 9003 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< SnapCreateActor, 1, Void >*>(static_cast<SnapCreateActor*>(this)));
															#line 46302 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when2(Void const& _,int loopDepth) 
	{
															#line 9008 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		TraceEvent("SnapCreateExit").detail("SnapCmd", snapCmd).detail("UID", snapUID);
															#line 9009 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<SnapCreateActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~SnapCreateActorState(); static_cast<SnapCreateActor*>(this)->destroy(); return 0; }
															#line 46331 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<SnapCreateActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~SnapCreateActorState();
		static_cast<SnapCreateActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1when2(Void && _,int loopDepth) 
	{
															#line 9008 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		TraceEvent("SnapCreateExit").detail("SnapCmd", snapCmd).detail("UID", snapUID);
															#line 9009 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<SnapCreateActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~SnapCreateActorState(); static_cast<SnapCreateActor*>(this)->destroy(); return 0; }
															#line 46345 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<SnapCreateActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~SnapCreateActorState();
		static_cast<SnapCreateActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<SnapCreateActor*>(this)->actor_wait_state > 0) static_cast<SnapCreateActor*>(this)->actor_wait_state = 0;
		static_cast<SnapCreateActor*>(this)->ActorCallback< SnapCreateActor, 0, Void >::remove();
		static_cast<SnapCreateActor*>(this)->ActorCallback< SnapCreateActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< SnapCreateActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("snapCreate", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("snapCreate", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< SnapCreateActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("snapCreate", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("snapCreate", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< SnapCreateActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("snapCreate", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch2(err, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("snapCreate", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< SnapCreateActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("snapCreate", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose1();
		try {
			a_body1loopBody1when2(value, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("snapCreate", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< SnapCreateActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("snapCreate", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose1();
		try {
			a_body1loopBody1when2(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("snapCreate", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< SnapCreateActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("snapCreate", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose1();
		try {
			a_body1Catch2(err, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("snapCreate", reinterpret_cast<unsigned long>(this), 1);

	}
															#line 8997 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Database cx;
															#line 8997 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Standalone<StringRef> snapCmd;
															#line 8997 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	UID snapUID;
															#line 46456 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via snapCreate()
															#line 8997 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class SnapCreateActor final : public Actor<Void>, public ActorCallback< SnapCreateActor, 0, Void >, public ActorCallback< SnapCreateActor, 1, Void >, public FastAllocated<SnapCreateActor>, public SnapCreateActorState<SnapCreateActor> {
															#line 46461 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<SnapCreateActor>::operator new;
	using FastAllocated<SnapCreateActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< SnapCreateActor, 0, Void >;
friend struct ActorCallback< SnapCreateActor, 1, Void >;
															#line 8997 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	SnapCreateActor(Database const& cx,Standalone<StringRef> const& snapCmd,UID const& snapUID) 
															#line 46473 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Void>(),
		   SnapCreateActorState<SnapCreateActor>(cx, snapCmd, snapUID)
	{
		fdb_probe_actor_enter("snapCreate", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("snapCreate");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("snapCreate", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< SnapCreateActor, 0, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 8997 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<Void> snapCreate( Database const& cx, Standalone<StringRef> const& snapCmd, UID const& snapUID ) {
															#line 8997 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Void>(new SnapCreateActor(cx, snapCmd, snapUID));
															#line 46501 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 9018 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

															#line 46506 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via createCheckpointImpl()
															#line 9019 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class T, class CreateCheckpointImplActor>
															#line 9019 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class CreateCheckpointImplActorState {
															#line 46513 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 9019 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	CreateCheckpointImplActorState(T const& tr,std::vector<KeyRange> const& ranges,CheckpointFormat const& format,Optional<UID> const& actionId) 
															#line 9019 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 9019 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : tr(tr),
															#line 9019 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   ranges(ranges),
															#line 9019 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   format(format),
															#line 9019 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   actionId(actionId)
															#line 46526 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("createCheckpointImpl", reinterpret_cast<unsigned long>(this));

	}
	~CreateCheckpointImplActorState() 
	{
		fdb_probe_actor_destroy("createCheckpointImpl", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 9024 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ASSERT(!tr->getTenant().present());
															#line 9025 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ASSERT(!ranges.empty());
															#line 9026 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ASSERT(actionId.present());
															#line 9027 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent(SevDebug, "CreateCheckpointTransactionBegin").detail("Ranges", describe(ranges));
															#line 9029 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<RangeResult> __when_expr_0 = tr->getRange(serverTagKeys, CLIENT_KNOBS->TOO_MANY);
															#line 9029 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<CreateCheckpointImplActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 46551 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<CreateCheckpointImplActor*>(this)->actor_wait_state = 1;
															#line 9029 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< CreateCheckpointImplActor, 0, RangeResult >*>(static_cast<CreateCheckpointImplActor*>(this)));
															#line 46556 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~CreateCheckpointImplActorState();
		static_cast<CreateCheckpointImplActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 9030 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(!UIDtoTagMap.more && UIDtoTagMap.size() < CLIENT_KNOBS->TOO_MANY);
															#line 9032 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		rangeMap = std::unordered_map<UID, std::vector<KeyRange>>();
															#line 9033 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		srcMap = std::unordered_map<UID, std::vector<UID>>();
															#line 9034 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		RangeForbody1cont1Iterator0 = std::begin(ranges);
															#line 46585 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont1loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1when1(RangeResult const& __UIDtoTagMap,int loopDepth) 
	{
															#line 9029 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		UIDtoTagMap = __UIDtoTagMap;
															#line 46594 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1when1(RangeResult && __UIDtoTagMap,int loopDepth) 
	{
		UIDtoTagMap = std::move(__UIDtoTagMap);
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<CreateCheckpointImplActor*>(this)->actor_wait_state > 0) static_cast<CreateCheckpointImplActor*>(this)->actor_wait_state = 0;
		static_cast<CreateCheckpointImplActor*>(this)->ActorCallback< CreateCheckpointImplActor, 0, RangeResult >::remove();

	}
	void a_callback_fire(ActorCallback< CreateCheckpointImplActor, 0, RangeResult >*,RangeResult const& value) 
	{
		fdb_probe_actor_enter("createCheckpointImpl", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("createCheckpointImpl", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< CreateCheckpointImplActor, 0, RangeResult >*,RangeResult && value) 
	{
		fdb_probe_actor_enter("createCheckpointImpl", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("createCheckpointImpl", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< CreateCheckpointImplActor, 0, RangeResult >*,Error err) 
	{
		fdb_probe_actor_enter("createCheckpointImpl", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("createCheckpointImpl", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont2(int loopDepth) 
	{
															#line 9049 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (format == DataMoveRocksCF)
															#line 46661 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 9050 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			for( const auto& [srcId, ranges] : rangeMap ) {
															#line 9053 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				const UID checkpointID = UID(deterministicRandom()->randomUInt64(), srcId.first());
															#line 9054 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				CheckpointMetaData checkpoint(ranges, format, srcMap[srcId], checkpointID, actionId.get());
															#line 9055 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				checkpoint.setState(CheckpointMetaData::Pending);
															#line 9056 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				tr->set(checkpointKeyFor(checkpointID), checkpointValue(checkpoint));
															#line 9058 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				TraceEvent(SevDebug, "CreateCheckpointTransactionShard") .detail("CheckpointKey", checkpointKeyFor(checkpointID)) .detail("CheckpointMetaData", checkpoint.toString());
															#line 46675 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
		}
		else
		{
															#line 9063 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			return a_body1Catch1(not_implemented(), loopDepth);
															#line 46682 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 9066 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<CreateCheckpointImplActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~CreateCheckpointImplActorState(); static_cast<CreateCheckpointImplActor*>(this)->destroy(); return 0; }
															#line 46686 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<CreateCheckpointImplActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~CreateCheckpointImplActorState();
		static_cast<CreateCheckpointImplActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1cont1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1(int loopDepth) 
	{
															#line 9034 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!(RangeForbody1cont1Iterator0 != std::end(ranges)))
															#line 46705 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
			return a_body1cont1break1(loopDepth==0?0:loopDepth-1); // break
		}
															#line 9034 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		const auto& range = *RangeForbody1cont1Iterator0;
															#line 46711 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 9035 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<RangeResult> __when_expr_1 = krmGetRanges(tr, keyServersPrefix, range);
															#line 9035 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<CreateCheckpointImplActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 46717 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), std::max(0, loopDepth - 1)); else return a_body1cont1loopBody1when1(__when_expr_1.get(), loopDepth); };
			static_cast<CreateCheckpointImplActor*>(this)->actor_wait_state = 2;
															#line 9035 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< CreateCheckpointImplActor, 1, RangeResult >*>(static_cast<CreateCheckpointImplActor*>(this)));
															#line 46722 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}

		return loopDepth;
	}
	int a_body1cont1break1(int loopDepth) 
	{
		try {
			return a_body1cont2(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1(int loopDepth) 
	{
															#line 9034 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		++RangeForbody1cont1Iterator0;
															#line 46745 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (loopDepth == 0) return a_body1cont1loopHead1(0);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont3(RangeResult const& keyServers,int loopDepth) 
	{
															#line 9036 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(!keyServers.more);
															#line 9037 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for(int i = 0;i < keyServers.size() - 1;++i) {
															#line 9038 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			const KeyRangeRef currentRange(keyServers[i].key, keyServers[i + 1].key);
															#line 9039 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			std::vector<UID> src;
															#line 9040 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			std::vector<UID> dest;
															#line 9041 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			UID srcId;
															#line 9042 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			UID destId;
															#line 9043 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			decodeKeyServersValue(UIDtoTagMap, keyServers[i].value, src, dest, srcId, destId);
															#line 9044 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			rangeMap[srcId].push_back(currentRange);
															#line 9045 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			srcMap.emplace(srcId, src);
															#line 46772 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
		loopDepth = a_body1cont1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont3(RangeResult && keyServers,int loopDepth) 
	{
															#line 9036 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(!keyServers.more);
															#line 9037 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for(int i = 0;i < keyServers.size() - 1;++i) {
															#line 9038 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			const KeyRangeRef currentRange(keyServers[i].key, keyServers[i + 1].key);
															#line 9039 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			std::vector<UID> src;
															#line 9040 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			std::vector<UID> dest;
															#line 9041 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			UID srcId;
															#line 9042 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			UID destId;
															#line 9043 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			decodeKeyServersValue(UIDtoTagMap, keyServers[i].value, src, dest, srcId, destId);
															#line 9044 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			rangeMap[srcId].push_back(currentRange);
															#line 9045 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			srcMap.emplace(srcId, src);
															#line 46800 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
		loopDepth = a_body1cont1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1when1(RangeResult const& keyServers,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont3(keyServers, loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1when1(RangeResult && keyServers,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont3(std::move(keyServers), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<CreateCheckpointImplActor*>(this)->actor_wait_state > 0) static_cast<CreateCheckpointImplActor*>(this)->actor_wait_state = 0;
		static_cast<CreateCheckpointImplActor*>(this)->ActorCallback< CreateCheckpointImplActor, 1, RangeResult >::remove();

	}
	void a_callback_fire(ActorCallback< CreateCheckpointImplActor, 1, RangeResult >*,RangeResult const& value) 
	{
		fdb_probe_actor_enter("createCheckpointImpl", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("createCheckpointImpl", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< CreateCheckpointImplActor, 1, RangeResult >*,RangeResult && value) 
	{
		fdb_probe_actor_enter("createCheckpointImpl", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("createCheckpointImpl", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< CreateCheckpointImplActor, 1, RangeResult >*,Error err) 
	{
		fdb_probe_actor_enter("createCheckpointImpl", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("createCheckpointImpl", reinterpret_cast<unsigned long>(this), 1);

	}
															#line 9019 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	T tr;
															#line 9019 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	std::vector<KeyRange> ranges;
															#line 9019 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	CheckpointFormat format;
															#line 9019 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Optional<UID> actionId;
															#line 9029 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	RangeResult UIDtoTagMap;
															#line 9032 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	std::unordered_map<UID, std::vector<KeyRange>> rangeMap;
															#line 9033 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	std::unordered_map<UID, std::vector<UID>> srcMap;
															#line 9034 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	decltype(std::begin(std::declval<std::vector<KeyRange>>())) RangeForbody1cont1Iterator0;
															#line 46885 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via createCheckpointImpl()
															#line 9019 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class T>
															#line 9019 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class CreateCheckpointImplActor final : public Actor<Void>, public ActorCallback< CreateCheckpointImplActor<T>, 0, RangeResult >, public ActorCallback< CreateCheckpointImplActor<T>, 1, RangeResult >, public FastAllocated<CreateCheckpointImplActor<T>>, public CreateCheckpointImplActorState<T, CreateCheckpointImplActor<T>> {
															#line 46892 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<CreateCheckpointImplActor<T>>::operator new;
	using FastAllocated<CreateCheckpointImplActor<T>>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< CreateCheckpointImplActor<T>, 0, RangeResult >;
friend struct ActorCallback< CreateCheckpointImplActor<T>, 1, RangeResult >;
															#line 9019 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	CreateCheckpointImplActor(T const& tr,std::vector<KeyRange> const& ranges,CheckpointFormat const& format,Optional<UID> const& actionId) 
															#line 46904 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Void>(),
		   CreateCheckpointImplActorState<T, CreateCheckpointImplActor<T>>(tr, ranges, format, actionId)
	{
		fdb_probe_actor_enter("createCheckpointImpl", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("createCheckpointImpl");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("createCheckpointImpl", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< CreateCheckpointImplActor<T>, 0, RangeResult >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< CreateCheckpointImplActor<T>, 1, RangeResult >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 9019 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class T>
															#line 9019 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] static Future<Void> createCheckpointImpl( T const& tr, std::vector<KeyRange> const& ranges, CheckpointFormat const& format, Optional<UID> const& actionId ) {
															#line 9019 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Void>(new CreateCheckpointImplActor<T>(tr, ranges, format, actionId));
															#line 46935 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 9068 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

Future<Void> createCheckpoint(Reference<ReadYourWritesTransaction> tr,
                              const std::vector<KeyRange>& ranges,
                              CheckpointFormat format,
                              Optional<UID> actionId) {
	return holdWhile(tr, createCheckpointImpl(tr, ranges, format, actionId));
}

Future<Void> createCheckpoint(Transaction* tr,
                              const std::vector<KeyRange>& ranges,
                              CheckpointFormat format,
                              Optional<UID> actionId) {
	return createCheckpointImpl(tr, ranges, format, actionId);
}

// Gets CheckpointMetaData of the specific keyrange, version and format from one of the storage servers, if none of the
// servers have the checkpoint, a checkpoint_not_found error is returned.
															#line 46956 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via getCheckpointMetaDataInternal()
															#line 9085 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class GetCheckpointMetaDataInternalActor>
															#line 9085 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetCheckpointMetaDataInternalActorState {
															#line 46963 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 9085 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetCheckpointMetaDataInternalActorState(KeyRange const& range,Version const& version,CheckpointFormat const& format,Optional<UID> const& actionId,Reference<LocationInfo> const& alternatives,double const& timeout) 
															#line 9085 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 9085 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : range(range),
															#line 9085 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   version(version),
															#line 9085 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   format(format),
															#line 9085 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   actionId(actionId),
															#line 9085 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   alternatives(alternatives),
															#line 9085 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   timeout(timeout)
															#line 46980 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("getCheckpointMetaDataInternal", reinterpret_cast<unsigned long>(this));

	}
	~GetCheckpointMetaDataInternalActorState() 
	{
		fdb_probe_actor_destroy("getCheckpointMetaDataInternal", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 9091 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent(SevDebug, "GetCheckpointMetaDataInternalBegin") .detail("Range", range) .detail("Version", version) .detail("Format", static_cast<int>(format)) .detail("Locations", alternatives->description());
															#line 9097 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			futures = std::vector<Future<ErrorOr<CheckpointMetaData>>>();
															#line 9098 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			index = 0;
															#line 9099 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			for(index = 0;index < alternatives->size();++index) {
															#line 9101 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				futures.push_back(errorOr(timeoutError(alternatives->getInterface(index).checkpoint.getReply( GetCheckpointRequest({ range }, version, format, actionId)), timeout)));
															#line 47003 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 9106 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			error = Optional<Error>();
															#line 9107 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_0 = waitForAll(futures);
															#line 9107 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<GetCheckpointMetaDataInternalActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 47011 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<GetCheckpointMetaDataInternalActor*>(this)->actor_wait_state = 1;
															#line 9107 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< GetCheckpointMetaDataInternalActor, 0, Void >*>(static_cast<GetCheckpointMetaDataInternalActor*>(this)));
															#line 47016 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~GetCheckpointMetaDataInternalActorState();
		static_cast<GetCheckpointMetaDataInternalActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void const& _,int loopDepth) 
	{
															#line 9108 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		TraceEvent(SevDebug, "GetCheckpointMetaDataInternalWaitEnd").detail("Range", range).detail("Version", version);
															#line 9110 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for(index = 0;index < futures.size();++index) {
															#line 9111 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!futures[index].isReady())
															#line 47043 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 9112 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				error = timed_out();
															#line 9113 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				TraceEvent(SevDebug, "GetCheckpointMetaDataInternalSSTimeout") .detail("Range", range) .detail("Version", version) .detail("StorageServer", alternatives->getInterface(index).uniqueID);
															#line 47049 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				continue;
			}
															#line 9120 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (futures[index].get().isError())
															#line 47054 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 9121 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				const Error& e = futures[index].get().getError();
															#line 9122 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				TraceEvent(SevWarn, "GetCheckpointMetaDataInternalError") .errorUnsuppressed(e) .detail("Range", range) .detail("Version", version) .detail("StorageServer", alternatives->getInterface(index).uniqueID);
															#line 9127 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (e.code() != error_code_checkpoint_not_found || !error.present())
															#line 47062 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 9128 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					error = e;
															#line 47066 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
			}
			else
			{
															#line 9131 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (!static_cast<GetCheckpointMetaDataInternalActor*>(this)->SAV<CheckpointMetaData>::futures) { (void)(futures[index].get().get()); this->~GetCheckpointMetaDataInternalActorState(); static_cast<GetCheckpointMetaDataInternalActor*>(this)->destroy(); return 0; }
															#line 47073 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				new (&static_cast<GetCheckpointMetaDataInternalActor*>(this)->SAV< CheckpointMetaData >::value()) CheckpointMetaData(futures[index].get().get());
				this->~GetCheckpointMetaDataInternalActorState();
				static_cast<GetCheckpointMetaDataInternalActor*>(this)->finishSendAndDelPromiseRef();
				return 0;
			}
		}
															#line 9135 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(error.present());
															#line 9136 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		return a_body1Catch1(error.get(), loopDepth);
															#line 47084 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"

		return loopDepth;
	}
	int a_body1cont1(Void && _,int loopDepth) 
	{
															#line 9108 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		TraceEvent(SevDebug, "GetCheckpointMetaDataInternalWaitEnd").detail("Range", range).detail("Version", version);
															#line 9110 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for(index = 0;index < futures.size();++index) {
															#line 9111 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!futures[index].isReady())
															#line 47096 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 9112 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				error = timed_out();
															#line 9113 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				TraceEvent(SevDebug, "GetCheckpointMetaDataInternalSSTimeout") .detail("Range", range) .detail("Version", version) .detail("StorageServer", alternatives->getInterface(index).uniqueID);
															#line 47102 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				continue;
			}
															#line 9120 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (futures[index].get().isError())
															#line 47107 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 9121 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				const Error& e = futures[index].get().getError();
															#line 9122 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				TraceEvent(SevWarn, "GetCheckpointMetaDataInternalError") .errorUnsuppressed(e) .detail("Range", range) .detail("Version", version) .detail("StorageServer", alternatives->getInterface(index).uniqueID);
															#line 9127 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (e.code() != error_code_checkpoint_not_found || !error.present())
															#line 47115 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 9128 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					error = e;
															#line 47119 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
			}
			else
			{
															#line 9131 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (!static_cast<GetCheckpointMetaDataInternalActor*>(this)->SAV<CheckpointMetaData>::futures) { (void)(futures[index].get().get()); this->~GetCheckpointMetaDataInternalActorState(); static_cast<GetCheckpointMetaDataInternalActor*>(this)->destroy(); return 0; }
															#line 47126 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				new (&static_cast<GetCheckpointMetaDataInternalActor*>(this)->SAV< CheckpointMetaData >::value()) CheckpointMetaData(futures[index].get().get());
				this->~GetCheckpointMetaDataInternalActorState();
				static_cast<GetCheckpointMetaDataInternalActor*>(this)->finishSendAndDelPromiseRef();
				return 0;
			}
		}
															#line 9135 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(error.present());
															#line 9136 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		return a_body1Catch1(error.get(), loopDepth);
															#line 47137 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<GetCheckpointMetaDataInternalActor*>(this)->actor_wait_state > 0) static_cast<GetCheckpointMetaDataInternalActor*>(this)->actor_wait_state = 0;
		static_cast<GetCheckpointMetaDataInternalActor*>(this)->ActorCallback< GetCheckpointMetaDataInternalActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetCheckpointMetaDataInternalActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getCheckpointMetaDataInternal", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getCheckpointMetaDataInternal", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< GetCheckpointMetaDataInternalActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getCheckpointMetaDataInternal", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getCheckpointMetaDataInternal", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< GetCheckpointMetaDataInternalActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getCheckpointMetaDataInternal", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getCheckpointMetaDataInternal", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 9085 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeyRange range;
															#line 9085 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Version version;
															#line 9085 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	CheckpointFormat format;
															#line 9085 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Optional<UID> actionId;
															#line 9085 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<LocationInfo> alternatives;
															#line 9085 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	double timeout;
															#line 9097 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	std::vector<Future<ErrorOr<CheckpointMetaData>>> futures;
															#line 9098 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	int index;
															#line 9106 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Optional<Error> error;
															#line 47222 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via getCheckpointMetaDataInternal()
															#line 9085 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetCheckpointMetaDataInternalActor final : public Actor<CheckpointMetaData>, public ActorCallback< GetCheckpointMetaDataInternalActor, 0, Void >, public FastAllocated<GetCheckpointMetaDataInternalActor>, public GetCheckpointMetaDataInternalActorState<GetCheckpointMetaDataInternalActor> {
															#line 47227 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<GetCheckpointMetaDataInternalActor>::operator new;
	using FastAllocated<GetCheckpointMetaDataInternalActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<CheckpointMetaData>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< GetCheckpointMetaDataInternalActor, 0, Void >;
															#line 9085 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetCheckpointMetaDataInternalActor(KeyRange const& range,Version const& version,CheckpointFormat const& format,Optional<UID> const& actionId,Reference<LocationInfo> const& alternatives,double const& timeout) 
															#line 47238 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<CheckpointMetaData>(),
		   GetCheckpointMetaDataInternalActorState<GetCheckpointMetaDataInternalActor>(range, version, format, actionId, alternatives, timeout)
	{
		fdb_probe_actor_enter("getCheckpointMetaDataInternal", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("getCheckpointMetaDataInternal");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("getCheckpointMetaDataInternal", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< GetCheckpointMetaDataInternalActor, 0, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 9085 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] static Future<CheckpointMetaData> getCheckpointMetaDataInternal( KeyRange const& range, Version const& version, CheckpointFormat const& format, Optional<UID> const& actionId, Reference<LocationInfo> const& alternatives, double const& timeout ) {
															#line 9085 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<CheckpointMetaData>(new GetCheckpointMetaDataInternalActor(range, version, format, actionId, alternatives, timeout));
															#line 47266 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 9138 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

															#line 47271 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via getCheckpointMetaDataForRange()
															#line 9139 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class GetCheckpointMetaDataForRangeActor>
															#line 9139 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetCheckpointMetaDataForRangeActorState {
															#line 47278 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 9139 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetCheckpointMetaDataForRangeActorState(Database const& cx,KeyRange const& range,Version const& version,CheckpointFormat const& format,Optional<UID> const& actionId,double const& timeout) 
															#line 9139 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 9139 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : cx(cx),
															#line 9139 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   range(range),
															#line 9139 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   version(version),
															#line 9139 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   format(format),
															#line 9139 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   actionId(actionId),
															#line 9139 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   timeout(timeout),
															#line 9146 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   span("NAPI:GetCheckpointMetaDataForRange"_loc),
															#line 9147 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   index(0),
															#line 9148 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   futures(),
															#line 9149 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   locations()
															#line 47303 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("getCheckpointMetaDataForRange", reinterpret_cast<unsigned long>(this));

	}
	~GetCheckpointMetaDataForRangeActorState() 
	{
		fdb_probe_actor_destroy("getCheckpointMetaDataForRange", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 9151 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			;
															#line 47318 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~GetCheckpointMetaDataForRangeActorState();
		static_cast<GetCheckpointMetaDataForRangeActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 9204 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		std::vector<std::pair<KeyRange, CheckpointMetaData>> res;
															#line 9205 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for(index = 0;index < futures.size();++index) {
															#line 9206 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent(SevDebug, "GetCheckpointShardEnd") .detail("Range", locations[index].range) .detail("Checkpoint", futures[index].get().toString());
															#line 9209 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			res.emplace_back(locations[index].range, futures[index].get());
															#line 47347 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 9211 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<GetCheckpointMetaDataForRangeActor*>(this)->SAV<std::vector<std::pair<KeyRange, CheckpointMetaData>>>::futures) { (void)(res); this->~GetCheckpointMetaDataForRangeActorState(); static_cast<GetCheckpointMetaDataForRangeActor*>(this)->destroy(); return 0; }
															#line 47351 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<GetCheckpointMetaDataForRangeActor*>(this)->SAV< std::vector<std::pair<KeyRange, CheckpointMetaData>> >::value()) std::vector<std::pair<KeyRange, CheckpointMetaData>>(res);
		this->~GetCheckpointMetaDataForRangeActorState();
		static_cast<GetCheckpointMetaDataForRangeActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
															#line 9152 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		locations.clear();
															#line 9153 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		TraceEvent(SevDebug, "GetCheckpointMetaDataForRangeBegin") .detail("Range", range.toString()) .detail("Version", version) .detail("Format", static_cast<int>(format));
															#line 9157 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		futures.clear();
															#line 47374 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		try {
															#line 9160 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_0 = store(locations, getKeyRangeLocations(cx, TenantInfo(), range, CLIENT_KNOBS->TOO_MANY, Reverse::False, &StorageServerInterface::checkpoint, span.context, Optional<UID>(), UseProvisionalProxies::False, latestVersion));
															#line 9160 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<GetCheckpointMetaDataForRangeActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 47380 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1loopBody1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
			static_cast<GetCheckpointMetaDataForRangeActor*>(this)->actor_wait_state = 1;
															#line 9160 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< GetCheckpointMetaDataForRangeActor, 0, Void >*>(static_cast<GetCheckpointMetaDataForRangeActor*>(this)));
															#line 47385 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1break1(int loopDepth) 
	{
		try {
			return a_body1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 9193 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent(SevWarn, "GetCheckpointError").errorUnsuppressed(e).detail("Range", range);
															#line 9194 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (e.code() == error_code_wrong_shard_server || e.code() == error_code_all_alternatives_failed || e.code() == error_code_connection_failed || e.code() == error_code_broken_promise)
															#line 47422 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 9196 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				cx->invalidateCache({}, range);
															#line 9197 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				StrictFuture<Void> __when_expr_4 = delay(CLIENT_KNOBS->WRONG_SHARD_SERVER_DELAY);
															#line 9197 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (static_cast<GetCheckpointMetaDataForRangeActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 47430 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1Catch1(__when_expr_4.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1Catch1when1(__when_expr_4.get(), loopDepth); };
				static_cast<GetCheckpointMetaDataForRangeActor*>(this)->actor_wait_state = 3;
															#line 9197 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< GetCheckpointMetaDataForRangeActor, 4, Void >*>(static_cast<GetCheckpointMetaDataForRangeActor*>(this)));
															#line 47435 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				loopDepth = 0;
			}
			else
			{
															#line 9199 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				return a_body1Catch1(e, std::max(0, loopDepth - 1));
															#line 47442 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(Void const& _,int loopDepth) 
	{
															#line 9172 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for(index = 0;index < locations.size();++index) {
															#line 9173 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			futures.push_back(getCheckpointMetaDataInternal( locations[index].range, version, format, actionId, locations[index].locations, timeout));
															#line 9175 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent(SevDebug, "GetCheckpointShardBegin") .detail("Range", locations[index].range) .detail("Version", version) .detail("StorageServers", locations[index].locations->description());
															#line 47461 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 9182 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_1 = cx->connectionFileChanged();
															#line 9181 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<GetCheckpointMetaDataForRangeActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 47467 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
															#line 9185 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_2 = waitForAll(futures);
															#line 47471 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1loopBody1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1loopBody1cont2when2(__when_expr_2.get(), loopDepth); };
															#line 9188 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_3 = delay(timeout);
															#line 47475 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1loopBody1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1loopBody1cont2when3(__when_expr_3.get(), loopDepth); };
		static_cast<GetCheckpointMetaDataForRangeActor*>(this)->actor_wait_state = 2;
															#line 9182 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< GetCheckpointMetaDataForRangeActor, 1, Void >*>(static_cast<GetCheckpointMetaDataForRangeActor*>(this)));
															#line 9185 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< GetCheckpointMetaDataForRangeActor, 2, Void >*>(static_cast<GetCheckpointMetaDataForRangeActor*>(this)));
															#line 9188 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< GetCheckpointMetaDataForRangeActor, 3, Void >*>(static_cast<GetCheckpointMetaDataForRangeActor*>(this)));
															#line 47484 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2(Void && _,int loopDepth) 
	{
															#line 9172 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for(index = 0;index < locations.size();++index) {
															#line 9173 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			futures.push_back(getCheckpointMetaDataInternal( locations[index].range, version, format, actionId, locations[index].locations, timeout));
															#line 9175 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent(SevDebug, "GetCheckpointShardBegin") .detail("Range", locations[index].range) .detail("Version", version) .detail("StorageServers", locations[index].locations->description());
															#line 47497 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 9182 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_1 = cx->connectionFileChanged();
															#line 9181 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<GetCheckpointMetaDataForRangeActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 47503 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
															#line 9185 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_2 = waitForAll(futures);
															#line 47507 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1loopBody1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1loopBody1cont2when2(__when_expr_2.get(), loopDepth); };
															#line 9188 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_3 = delay(timeout);
															#line 47511 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1loopBody1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1loopBody1cont2when3(__when_expr_3.get(), loopDepth); };
		static_cast<GetCheckpointMetaDataForRangeActor*>(this)->actor_wait_state = 2;
															#line 9182 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< GetCheckpointMetaDataForRangeActor, 1, Void >*>(static_cast<GetCheckpointMetaDataForRangeActor*>(this)));
															#line 9185 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< GetCheckpointMetaDataForRangeActor, 2, Void >*>(static_cast<GetCheckpointMetaDataForRangeActor*>(this)));
															#line 9188 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< GetCheckpointMetaDataForRangeActor, 3, Void >*>(static_cast<GetCheckpointMetaDataForRangeActor*>(this)));
															#line 47520 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<GetCheckpointMetaDataForRangeActor*>(this)->actor_wait_state > 0) static_cast<GetCheckpointMetaDataForRangeActor*>(this)->actor_wait_state = 0;
		static_cast<GetCheckpointMetaDataForRangeActor*>(this)->ActorCallback< GetCheckpointMetaDataForRangeActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetCheckpointMetaDataForRangeActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getCheckpointMetaDataForRange", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getCheckpointMetaDataForRange", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< GetCheckpointMetaDataForRangeActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getCheckpointMetaDataForRange", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getCheckpointMetaDataForRange", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< GetCheckpointMetaDataForRangeActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getCheckpointMetaDataForRange", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getCheckpointMetaDataForRange", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1cont3(int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont5(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(Void const& _,int loopDepth) 
	{
															#line 9183 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		cx->invalidateCache({}, range);
															#line 47598 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(Void && _,int loopDepth) 
	{
															#line 9183 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		cx->invalidateCache({}, range);
															#line 47607 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2when2(Void const& _,int loopDepth) 
	{
		return a_body1break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1loopBody1cont2when2(Void && _,int loopDepth) 
	{
		return a_body1break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1loopBody1cont2when3(Void const& _,int loopDepth) 
	{
															#line 9189 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		TraceEvent(SevWarn, "GetCheckpointTimeout").detail("Range", range).detail("Version", version);
															#line 47628 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2when3(Void && _,int loopDepth) 
	{
															#line 9189 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		TraceEvent(SevWarn, "GetCheckpointTimeout").detail("Range", range).detail("Version", version);
															#line 47637 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont3(loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<GetCheckpointMetaDataForRangeActor*>(this)->actor_wait_state > 0) static_cast<GetCheckpointMetaDataForRangeActor*>(this)->actor_wait_state = 0;
		static_cast<GetCheckpointMetaDataForRangeActor*>(this)->ActorCallback< GetCheckpointMetaDataForRangeActor, 1, Void >::remove();
		static_cast<GetCheckpointMetaDataForRangeActor*>(this)->ActorCallback< GetCheckpointMetaDataForRangeActor, 2, Void >::remove();
		static_cast<GetCheckpointMetaDataForRangeActor*>(this)->ActorCallback< GetCheckpointMetaDataForRangeActor, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetCheckpointMetaDataForRangeActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getCheckpointMetaDataForRange", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getCheckpointMetaDataForRange", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< GetCheckpointMetaDataForRangeActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getCheckpointMetaDataForRange", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getCheckpointMetaDataForRange", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< GetCheckpointMetaDataForRangeActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getCheckpointMetaDataForRange", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getCheckpointMetaDataForRange", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< GetCheckpointMetaDataForRangeActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getCheckpointMetaDataForRange", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when2(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getCheckpointMetaDataForRange", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< GetCheckpointMetaDataForRangeActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getCheckpointMetaDataForRange", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when2(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getCheckpointMetaDataForRange", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< GetCheckpointMetaDataForRangeActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getCheckpointMetaDataForRange", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getCheckpointMetaDataForRange", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< GetCheckpointMetaDataForRangeActor, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getCheckpointMetaDataForRange", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when3(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getCheckpointMetaDataForRange", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< GetCheckpointMetaDataForRangeActor, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getCheckpointMetaDataForRange", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when3(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getCheckpointMetaDataForRange", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< GetCheckpointMetaDataForRangeActor, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getCheckpointMetaDataForRange", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getCheckpointMetaDataForRange", reinterpret_cast<unsigned long>(this), 3);

	}
	int a_body1loopBody1cont5(int loopDepth) 
	{
		try {
			loopDepth = a_body1loopBody1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont2(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont2(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<GetCheckpointMetaDataForRangeActor*>(this)->actor_wait_state > 0) static_cast<GetCheckpointMetaDataForRangeActor*>(this)->actor_wait_state = 0;
		static_cast<GetCheckpointMetaDataForRangeActor*>(this)->ActorCallback< GetCheckpointMetaDataForRangeActor, 4, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetCheckpointMetaDataForRangeActor, 4, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getCheckpointMetaDataForRange", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose3();
		try {
			a_body1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getCheckpointMetaDataForRange", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_fire(ActorCallback< GetCheckpointMetaDataForRangeActor, 4, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getCheckpointMetaDataForRange", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose3();
		try {
			a_body1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getCheckpointMetaDataForRange", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_error(ActorCallback< GetCheckpointMetaDataForRangeActor, 4, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getCheckpointMetaDataForRange", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getCheckpointMetaDataForRange", reinterpret_cast<unsigned long>(this), 4);

	}
															#line 9139 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Database cx;
															#line 9139 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeyRange range;
															#line 9139 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Version version;
															#line 9139 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	CheckpointFormat format;
															#line 9139 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Optional<UID> actionId;
															#line 9139 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	double timeout;
															#line 9146 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Span span;
															#line 9147 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	int index;
															#line 9148 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	std::vector<Future<CheckpointMetaData>> futures;
															#line 9149 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	std::vector<KeyRangeLocationInfo> locations;
															#line 47899 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via getCheckpointMetaDataForRange()
															#line 9139 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetCheckpointMetaDataForRangeActor final : public Actor<std::vector<std::pair<KeyRange, CheckpointMetaData>>>, public ActorCallback< GetCheckpointMetaDataForRangeActor, 0, Void >, public ActorCallback< GetCheckpointMetaDataForRangeActor, 1, Void >, public ActorCallback< GetCheckpointMetaDataForRangeActor, 2, Void >, public ActorCallback< GetCheckpointMetaDataForRangeActor, 3, Void >, public ActorCallback< GetCheckpointMetaDataForRangeActor, 4, Void >, public FastAllocated<GetCheckpointMetaDataForRangeActor>, public GetCheckpointMetaDataForRangeActorState<GetCheckpointMetaDataForRangeActor> {
															#line 47904 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<GetCheckpointMetaDataForRangeActor>::operator new;
	using FastAllocated<GetCheckpointMetaDataForRangeActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<std::vector<std::pair<KeyRange, CheckpointMetaData>>>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< GetCheckpointMetaDataForRangeActor, 0, Void >;
friend struct ActorCallback< GetCheckpointMetaDataForRangeActor, 1, Void >;
friend struct ActorCallback< GetCheckpointMetaDataForRangeActor, 2, Void >;
friend struct ActorCallback< GetCheckpointMetaDataForRangeActor, 3, Void >;
friend struct ActorCallback< GetCheckpointMetaDataForRangeActor, 4, Void >;
															#line 9139 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetCheckpointMetaDataForRangeActor(Database const& cx,KeyRange const& range,Version const& version,CheckpointFormat const& format,Optional<UID> const& actionId,double const& timeout) 
															#line 47919 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<std::vector<std::pair<KeyRange, CheckpointMetaData>>>(),
		   GetCheckpointMetaDataForRangeActorState<GetCheckpointMetaDataForRangeActor>(cx, range, version, format, actionId, timeout)
	{
		fdb_probe_actor_enter("getCheckpointMetaDataForRange", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("getCheckpointMetaDataForRange");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("getCheckpointMetaDataForRange", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< GetCheckpointMetaDataForRangeActor, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< GetCheckpointMetaDataForRangeActor, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< GetCheckpointMetaDataForRangeActor, 4, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 9139 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] static Future<std::vector<std::pair<KeyRange, CheckpointMetaData>>> getCheckpointMetaDataForRange( Database const& cx, KeyRange const& range, Version const& version, CheckpointFormat const& format, Optional<UID> const& actionId, double const& timeout ) {
															#line 9139 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<std::vector<std::pair<KeyRange, CheckpointMetaData>>>(new GetCheckpointMetaDataForRangeActor(cx, range, version, format, actionId, timeout));
															#line 47949 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 9213 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

															#line 47954 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via getCheckpointMetaData()
															#line 9214 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class GetCheckpointMetaDataActor>
															#line 9214 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetCheckpointMetaDataActorState {
															#line 47961 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 9214 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetCheckpointMetaDataActorState(Database const& cx,std::vector<KeyRange> const& ranges,Version const& version,CheckpointFormat const& format,Optional<UID> const& actionId,double const& timeout) 
															#line 9214 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 9214 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : cx(cx),
															#line 9214 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   ranges(ranges),
															#line 9214 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   version(version),
															#line 9214 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   format(format),
															#line 9214 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   actionId(actionId),
															#line 9214 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   timeout(timeout),
															#line 9220 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   futures()
															#line 47980 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("getCheckpointMetaData", reinterpret_cast<unsigned long>(this));

	}
	~GetCheckpointMetaDataActorState() 
	{
		fdb_probe_actor_destroy("getCheckpointMetaData", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 9223 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			for( const auto& range : ranges ) {
															#line 9224 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				futures.push_back(getCheckpointMetaDataForRange(cx, range, version, format, actionId, timeout));
															#line 47997 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 9227 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<std::vector<std::vector<std::pair<KeyRange, CheckpointMetaData>>>> __when_expr_0 = getAll(futures);
															#line 9227 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<GetCheckpointMetaDataActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 48003 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<GetCheckpointMetaDataActor*>(this)->actor_wait_state = 1;
															#line 9227 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< GetCheckpointMetaDataActor, 0, std::vector<std::vector<std::pair<KeyRange, CheckpointMetaData>>> >*>(static_cast<GetCheckpointMetaDataActor*>(this)));
															#line 48008 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~GetCheckpointMetaDataActorState();
		static_cast<GetCheckpointMetaDataActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(std::vector<std::vector<std::pair<KeyRange, CheckpointMetaData>>> const& results,int loopDepth) 
	{
															#line 9229 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		std::vector<std::pair<KeyRange, CheckpointMetaData>> res;
															#line 9231 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for( const auto& r : results ) {
															#line 9232 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ASSERT(!r.empty());
															#line 9233 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			res.insert(res.end(), r.begin(), r.end());
															#line 48037 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 9236 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<GetCheckpointMetaDataActor*>(this)->SAV<std::vector<std::pair<KeyRange, CheckpointMetaData>>>::futures) { (void)(res); this->~GetCheckpointMetaDataActorState(); static_cast<GetCheckpointMetaDataActor*>(this)->destroy(); return 0; }
															#line 48041 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<GetCheckpointMetaDataActor*>(this)->SAV< std::vector<std::pair<KeyRange, CheckpointMetaData>> >::value()) std::vector<std::pair<KeyRange, CheckpointMetaData>>(res);
		this->~GetCheckpointMetaDataActorState();
		static_cast<GetCheckpointMetaDataActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1(std::vector<std::vector<std::pair<KeyRange, CheckpointMetaData>>> && results,int loopDepth) 
	{
															#line 9229 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		std::vector<std::pair<KeyRange, CheckpointMetaData>> res;
															#line 9231 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for( const auto& r : results ) {
															#line 9232 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ASSERT(!r.empty());
															#line 9233 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			res.insert(res.end(), r.begin(), r.end());
															#line 48059 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 9236 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<GetCheckpointMetaDataActor*>(this)->SAV<std::vector<std::pair<KeyRange, CheckpointMetaData>>>::futures) { (void)(res); this->~GetCheckpointMetaDataActorState(); static_cast<GetCheckpointMetaDataActor*>(this)->destroy(); return 0; }
															#line 48063 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<GetCheckpointMetaDataActor*>(this)->SAV< std::vector<std::pair<KeyRange, CheckpointMetaData>> >::value()) std::vector<std::pair<KeyRange, CheckpointMetaData>>(res);
		this->~GetCheckpointMetaDataActorState();
		static_cast<GetCheckpointMetaDataActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1when1(std::vector<std::vector<std::pair<KeyRange, CheckpointMetaData>>> const& results,int loopDepth) 
	{
		loopDepth = a_body1cont1(results, loopDepth);

		return loopDepth;
	}
	int a_body1when1(std::vector<std::vector<std::pair<KeyRange, CheckpointMetaData>>> && results,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(results), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<GetCheckpointMetaDataActor*>(this)->actor_wait_state > 0) static_cast<GetCheckpointMetaDataActor*>(this)->actor_wait_state = 0;
		static_cast<GetCheckpointMetaDataActor*>(this)->ActorCallback< GetCheckpointMetaDataActor, 0, std::vector<std::vector<std::pair<KeyRange, CheckpointMetaData>>> >::remove();

	}
	void a_callback_fire(ActorCallback< GetCheckpointMetaDataActor, 0, std::vector<std::vector<std::pair<KeyRange, CheckpointMetaData>>> >*,std::vector<std::vector<std::pair<KeyRange, CheckpointMetaData>>> const& value) 
	{
		fdb_probe_actor_enter("getCheckpointMetaData", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getCheckpointMetaData", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< GetCheckpointMetaDataActor, 0, std::vector<std::vector<std::pair<KeyRange, CheckpointMetaData>>> >*,std::vector<std::vector<std::pair<KeyRange, CheckpointMetaData>>> && value) 
	{
		fdb_probe_actor_enter("getCheckpointMetaData", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getCheckpointMetaData", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< GetCheckpointMetaDataActor, 0, std::vector<std::vector<std::pair<KeyRange, CheckpointMetaData>>> >*,Error err) 
	{
		fdb_probe_actor_enter("getCheckpointMetaData", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getCheckpointMetaData", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 9214 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Database cx;
															#line 9214 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	std::vector<KeyRange> ranges;
															#line 9214 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Version version;
															#line 9214 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	CheckpointFormat format;
															#line 9214 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Optional<UID> actionId;
															#line 9214 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	double timeout;
															#line 9220 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	std::vector<Future<std::vector<std::pair<KeyRange, CheckpointMetaData>>>> futures;
															#line 48148 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via getCheckpointMetaData()
															#line 9214 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetCheckpointMetaDataActor final : public Actor<std::vector<std::pair<KeyRange, CheckpointMetaData>>>, public ActorCallback< GetCheckpointMetaDataActor, 0, std::vector<std::vector<std::pair<KeyRange, CheckpointMetaData>>> >, public FastAllocated<GetCheckpointMetaDataActor>, public GetCheckpointMetaDataActorState<GetCheckpointMetaDataActor> {
															#line 48153 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<GetCheckpointMetaDataActor>::operator new;
	using FastAllocated<GetCheckpointMetaDataActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<std::vector<std::pair<KeyRange, CheckpointMetaData>>>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< GetCheckpointMetaDataActor, 0, std::vector<std::vector<std::pair<KeyRange, CheckpointMetaData>>> >;
															#line 9214 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetCheckpointMetaDataActor(Database const& cx,std::vector<KeyRange> const& ranges,Version const& version,CheckpointFormat const& format,Optional<UID> const& actionId,double const& timeout) 
															#line 48164 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<std::vector<std::pair<KeyRange, CheckpointMetaData>>>(),
		   GetCheckpointMetaDataActorState<GetCheckpointMetaDataActor>(cx, ranges, version, format, actionId, timeout)
	{
		fdb_probe_actor_enter("getCheckpointMetaData", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("getCheckpointMetaData");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("getCheckpointMetaData", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< GetCheckpointMetaDataActor, 0, std::vector<std::vector<std::pair<KeyRange, CheckpointMetaData>>> >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 9214 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<std::vector<std::pair<KeyRange, CheckpointMetaData>>> getCheckpointMetaData( Database const& cx, std::vector<KeyRange> const& ranges, Version const& version, CheckpointFormat const& format, Optional<UID> const& actionId, double const& timeout ) {
															#line 9214 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<std::vector<std::pair<KeyRange, CheckpointMetaData>>>(new GetCheckpointMetaDataActor(cx, ranges, version, format, actionId, timeout));
															#line 48192 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 9238 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

															#line 48197 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via checkSafeExclusions()
															#line 9239 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class CheckSafeExclusionsActor>
															#line 9239 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class CheckSafeExclusionsActorState {
															#line 48204 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 9239 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	CheckSafeExclusionsActorState(Database const& cx,std::vector<AddressExclusion> const& exclusions) 
															#line 9239 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 9239 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : cx(cx),
															#line 9239 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   exclusions(exclusions)
															#line 48213 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("checkSafeExclusions", reinterpret_cast<unsigned long>(this));

	}
	~CheckSafeExclusionsActorState() 
	{
		fdb_probe_actor_destroy("checkSafeExclusions", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 9240 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent("ExclusionSafetyCheckBegin") .detail("NumExclusion", exclusions.size()) .detail("Exclusions", describe(exclusions));
															#line 9243 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ddCheck = bool();
															#line 48230 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			try {
															#line 9245 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				;
															#line 48234 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				loopDepth = a_body1loopHead1(loopDepth);
			}
			catch (Error& error) {
				loopDepth = a_body1Catch2(error, loopDepth);
			} catch (...) {
				loopDepth = a_body1Catch2(unknown_error(), loopDepth);
			}
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~CheckSafeExclusionsActorState();
		static_cast<CheckSafeExclusionsActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 9267 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		TraceEvent("ExclusionSafetyCheckCoordinators").log();
															#line 9268 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		coordinatorList = ClientCoordinators(cx->getConnectionRecord());
															#line 9269 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		leaderServers = std::vector<Future<Optional<LeaderInfo>>>();
															#line 9270 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		leaderServers.reserve(coordinatorList.clientLeaderServers.size());
															#line 9271 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for(int i = 0;i < coordinatorList.clientLeaderServers.size();i++) {
															#line 9272 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (coordinatorList.clientLeaderServers[i].hostname.present())
															#line 48273 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 9273 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				leaderServers.push_back(retryGetReplyFromHostname(GetLeaderRequest(coordinatorList.clusterKey, UID()), coordinatorList.clientLeaderServers[i].hostname.get(), WLTOKEN_CLIENTLEADERREG_GETLEADER, TaskPriority::CoordinationReply));
															#line 48277 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
			else
			{
															#line 9278 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				leaderServers.push_back(retryBrokenPromise(coordinatorList.clientLeaderServers[i].getLeader, GetLeaderRequest(coordinatorList.clusterKey, UID()), TaskPriority::CoordinationReply));
															#line 48283 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
		}
															#line 9285 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_2 = smartQuorum(leaderServers, leaderServers.size() / 2 + 1, 1.0);
															#line 9284 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<CheckSafeExclusionsActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 48290 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont1when1(__when_expr_2.get(), loopDepth); };
															#line 9286 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_3 = delay(3.0);
															#line 48294 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1cont1when2(__when_expr_3.get(), loopDepth); };
		static_cast<CheckSafeExclusionsActor*>(this)->actor_wait_state = 2;
															#line 9285 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< CheckSafeExclusionsActor, 2, Void >*>(static_cast<CheckSafeExclusionsActor*>(this)));
															#line 9286 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< CheckSafeExclusionsActor, 3, Void >*>(static_cast<CheckSafeExclusionsActor*>(this)));
															#line 48301 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1Catch2(const Error& e,int loopDepth=0) 
	{
		try {
															#line 9259 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (e.code() != error_code_actor_cancelled)
															#line 48311 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 9260 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				TraceEvent("ExclusionSafetyCheckError") .error(e) .detail("NumExclusion", exclusions.size()) .detail("Exclusions", describe(exclusions));
															#line 48315 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 9265 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			return a_body1Catch1(e, loopDepth);
															#line 48319 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont2(int loopDepth) 
	{
		loopDepth = a_body1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
															#line 9247 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_0 = cx->onProxiesChanged();
															#line 9246 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<CheckSafeExclusionsActor*>(this)->actor_wait_state < 0) return a_body1Catch2(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 48348 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch2(__when_expr_0.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
															#line 9248 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<ExclusionSafetyCheckReply> __when_expr_1 = basicLoadBalance(cx->getCommitProxies(UseProvisionalProxies::False), &CommitProxyInterface::exclusionSafetyCheckReq, ExclusionSafetyCheckRequest(exclusions), cx->taskID);
															#line 48352 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch2(__when_expr_1.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1when2(__when_expr_1.get(), loopDepth); };
		static_cast<CheckSafeExclusionsActor*>(this)->actor_wait_state = 1;
															#line 9247 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< CheckSafeExclusionsActor, 0, Void >*>(static_cast<CheckSafeExclusionsActor*>(this)));
															#line 9248 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< CheckSafeExclusionsActor, 1, ExclusionSafetyCheckReply >*>(static_cast<CheckSafeExclusionsActor*>(this)));
															#line 48359 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1break1(int loopDepth) 
	{
		try {
			return a_body1cont2(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch2(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch2(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when2(ExclusionSafetyCheckReply const& _ddCheck,int loopDepth) 
	{
															#line 9253 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ddCheck = _ddCheck.safe;
															#line 48399 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		return a_body1break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1loopBody1when2(ExclusionSafetyCheckReply && _ddCheck,int loopDepth) 
	{
															#line 9253 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ddCheck = _ddCheck.safe;
															#line 48408 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		return a_body1break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<CheckSafeExclusionsActor*>(this)->actor_wait_state > 0) static_cast<CheckSafeExclusionsActor*>(this)->actor_wait_state = 0;
		static_cast<CheckSafeExclusionsActor*>(this)->ActorCallback< CheckSafeExclusionsActor, 0, Void >::remove();
		static_cast<CheckSafeExclusionsActor*>(this)->ActorCallback< CheckSafeExclusionsActor, 1, ExclusionSafetyCheckReply >::remove();

	}
	void a_callback_fire(ActorCallback< CheckSafeExclusionsActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("checkSafeExclusions", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("checkSafeExclusions", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< CheckSafeExclusionsActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("checkSafeExclusions", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("checkSafeExclusions", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< CheckSafeExclusionsActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("checkSafeExclusions", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch2(err, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("checkSafeExclusions", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< CheckSafeExclusionsActor, 1, ExclusionSafetyCheckReply >*,ExclusionSafetyCheckReply const& value) 
	{
		fdb_probe_actor_enter("checkSafeExclusions", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose1();
		try {
			a_body1loopBody1when2(value, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("checkSafeExclusions", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< CheckSafeExclusionsActor, 1, ExclusionSafetyCheckReply >*,ExclusionSafetyCheckReply && value) 
	{
		fdb_probe_actor_enter("checkSafeExclusions", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose1();
		try {
			a_body1loopBody1when2(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("checkSafeExclusions", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< CheckSafeExclusionsActor, 1, ExclusionSafetyCheckReply >*,Error err) 
	{
		fdb_probe_actor_enter("checkSafeExclusions", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose1();
		try {
			a_body1Catch2(err, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("checkSafeExclusions", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont3(int loopDepth) 
	{
		try {
			loopDepth = a_body1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont4(int loopDepth) 
	{
															#line 9291 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		int attemptCoordinatorExclude = 0;
															#line 9292 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		int coordinatorsUnavailable = 0;
															#line 9293 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for(int i = 0;i < leaderServers.size();i++) {
															#line 9294 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			NetworkAddress leaderAddress = coordinatorList.clientLeaderServers[i].getLeader.getEndpoint().getPrimaryAddress();
															#line 9296 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (leaderServers[i].isReady())
															#line 48535 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 9297 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if ((std::count( exclusions.begin(), exclusions.end(), AddressExclusion(leaderAddress.ip, leaderAddress.port)) || std::count(exclusions.begin(), exclusions.end(), AddressExclusion(leaderAddress.ip))))
															#line 48539 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 9300 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					attemptCoordinatorExclude++;
															#line 48543 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
			}
			else
			{
															#line 9303 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				coordinatorsUnavailable++;
															#line 48550 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
		}
															#line 9306 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		int faultTolerance = (leaderServers.size() - 1) / 2 - coordinatorsUnavailable;
															#line 9307 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		bool coordinatorCheck = (attemptCoordinatorExclude <= faultTolerance);
															#line 9308 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		TraceEvent("ExclusionSafetyCheckFinish") .detail("CoordinatorListSize", leaderServers.size()) .detail("NumExclusions", exclusions.size()) .detail("FaultTolerance", faultTolerance) .detail("AttemptCoordinatorExclude", attemptCoordinatorExclude) .detail("CoordinatorCheck", coordinatorCheck) .detail("DataDistributorCheck", ddCheck);
															#line 9316 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<CheckSafeExclusionsActor*>(this)->SAV<bool>::futures) { (void)((ddCheck && coordinatorCheck)); this->~CheckSafeExclusionsActorState(); static_cast<CheckSafeExclusionsActor*>(this)->destroy(); return 0; }
															#line 48561 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<CheckSafeExclusionsActor*>(this)->SAV< bool >::value()) bool((ddCheck && coordinatorCheck));
		this->~CheckSafeExclusionsActorState();
		static_cast<CheckSafeExclusionsActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont4(loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont4(loopDepth);

		return loopDepth;
	}
	int a_body1cont1when2(Void const& _,int loopDepth) 
	{
															#line 9287 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		TraceEvent("ExclusionSafetyCheckNoCoordinatorQuorum").log();
															#line 9288 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<CheckSafeExclusionsActor*>(this)->SAV<bool>::futures) { (void)(false); this->~CheckSafeExclusionsActorState(); static_cast<CheckSafeExclusionsActor*>(this)->destroy(); return 0; }
															#line 48587 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<CheckSafeExclusionsActor*>(this)->SAV< bool >::value()) bool(false);
		this->~CheckSafeExclusionsActorState();
		static_cast<CheckSafeExclusionsActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1when2(Void && _,int loopDepth) 
	{
															#line 9287 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		TraceEvent("ExclusionSafetyCheckNoCoordinatorQuorum").log();
															#line 9288 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<CheckSafeExclusionsActor*>(this)->SAV<bool>::futures) { (void)(false); this->~CheckSafeExclusionsActorState(); static_cast<CheckSafeExclusionsActor*>(this)->destroy(); return 0; }
															#line 48601 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<CheckSafeExclusionsActor*>(this)->SAV< bool >::value()) bool(false);
		this->~CheckSafeExclusionsActorState();
		static_cast<CheckSafeExclusionsActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<CheckSafeExclusionsActor*>(this)->actor_wait_state > 0) static_cast<CheckSafeExclusionsActor*>(this)->actor_wait_state = 0;
		static_cast<CheckSafeExclusionsActor*>(this)->ActorCallback< CheckSafeExclusionsActor, 2, Void >::remove();
		static_cast<CheckSafeExclusionsActor*>(this)->ActorCallback< CheckSafeExclusionsActor, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< CheckSafeExclusionsActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("checkSafeExclusions", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose2();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("checkSafeExclusions", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< CheckSafeExclusionsActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("checkSafeExclusions", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose2();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("checkSafeExclusions", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< CheckSafeExclusionsActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("checkSafeExclusions", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("checkSafeExclusions", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< CheckSafeExclusionsActor, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("checkSafeExclusions", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose2();
		try {
			a_body1cont1when2(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("checkSafeExclusions", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< CheckSafeExclusionsActor, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("checkSafeExclusions", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose2();
		try {
			a_body1cont1when2(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("checkSafeExclusions", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< CheckSafeExclusionsActor, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("checkSafeExclusions", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("checkSafeExclusions", reinterpret_cast<unsigned long>(this), 3);

	}
															#line 9239 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Database cx;
															#line 9239 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	std::vector<AddressExclusion> exclusions;
															#line 9243 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	bool ddCheck;
															#line 9268 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	ClientCoordinators coordinatorList;
															#line 9269 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	std::vector<Future<Optional<LeaderInfo>>> leaderServers;
															#line 48716 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via checkSafeExclusions()
															#line 9239 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class CheckSafeExclusionsActor final : public Actor<bool>, public ActorCallback< CheckSafeExclusionsActor, 0, Void >, public ActorCallback< CheckSafeExclusionsActor, 1, ExclusionSafetyCheckReply >, public ActorCallback< CheckSafeExclusionsActor, 2, Void >, public ActorCallback< CheckSafeExclusionsActor, 3, Void >, public FastAllocated<CheckSafeExclusionsActor>, public CheckSafeExclusionsActorState<CheckSafeExclusionsActor> {
															#line 48721 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<CheckSafeExclusionsActor>::operator new;
	using FastAllocated<CheckSafeExclusionsActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<bool>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< CheckSafeExclusionsActor, 0, Void >;
friend struct ActorCallback< CheckSafeExclusionsActor, 1, ExclusionSafetyCheckReply >;
friend struct ActorCallback< CheckSafeExclusionsActor, 2, Void >;
friend struct ActorCallback< CheckSafeExclusionsActor, 3, Void >;
															#line 9239 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	CheckSafeExclusionsActor(Database const& cx,std::vector<AddressExclusion> const& exclusions) 
															#line 48735 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<bool>(),
		   CheckSafeExclusionsActorState<CheckSafeExclusionsActor>(cx, exclusions)
	{
		fdb_probe_actor_enter("checkSafeExclusions", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("checkSafeExclusions");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("checkSafeExclusions", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< CheckSafeExclusionsActor, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< CheckSafeExclusionsActor, 2, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 9239 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<bool> checkSafeExclusions( Database const& cx, std::vector<AddressExclusion> const& exclusions ) {
															#line 9239 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<bool>(new CheckSafeExclusionsActor(cx, exclusions));
															#line 48764 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 9318 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

// returns true if we can connect to the given worker interface
															#line 48770 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via verifyInterfaceActor()
															#line 9320 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class VerifyInterfaceActorActor>
															#line 9320 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class VerifyInterfaceActorActorState {
															#line 48777 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 9320 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	VerifyInterfaceActorActorState(Reference<FlowLock> const& connectLock,ClientWorkerInterface const& workerInterf) 
															#line 9320 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 9320 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : connectLock(connectLock),
															#line 9320 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   workerInterf(workerInterf)
															#line 48786 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("verifyInterfaceActor", reinterpret_cast<unsigned long>(this));

	}
	~VerifyInterfaceActorActorState() 
	{
		fdb_probe_actor_destroy("verifyInterfaceActor", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 9321 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_0 = connectLock->take();
															#line 9321 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<VerifyInterfaceActorActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 48803 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<VerifyInterfaceActorActor*>(this)->actor_wait_state = 1;
															#line 9321 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< VerifyInterfaceActorActor, 0, Void >*>(static_cast<VerifyInterfaceActorActor*>(this)));
															#line 48808 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~VerifyInterfaceActorActorState();
		static_cast<VerifyInterfaceActorActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void const& _,int loopDepth) 
	{
															#line 9322 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		releaser = FlowLock::Releaser(*connectLock);
															#line 9323 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		leaderInterf = ClientLeaderRegInterface(workerInterf.address());
															#line 9325 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Optional<LeaderInfo>> __when_expr_1 = brokenPromiseToNever(leaderInterf.getLeader.getReply(GetLeaderRequest()));
															#line 9324 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<VerifyInterfaceActorActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 48837 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
															#line 9329 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_2 = delay(CLIENT_KNOBS->CLI_CONNECT_TIMEOUT);
															#line 48841 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont1when2(__when_expr_2.get(), loopDepth); };
		static_cast<VerifyInterfaceActorActor*>(this)->actor_wait_state = 2;
															#line 9325 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< VerifyInterfaceActorActor, 1, Optional<LeaderInfo> >*>(static_cast<VerifyInterfaceActorActor*>(this)));
															#line 9329 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< VerifyInterfaceActorActor, 2, Void >*>(static_cast<VerifyInterfaceActorActor*>(this)));
															#line 48848 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void && _,int loopDepth) 
	{
															#line 9322 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		releaser = FlowLock::Releaser(*connectLock);
															#line 9323 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		leaderInterf = ClientLeaderRegInterface(workerInterf.address());
															#line 9325 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Optional<LeaderInfo>> __when_expr_1 = brokenPromiseToNever(leaderInterf.getLeader.getReply(GetLeaderRequest()));
															#line 9324 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<VerifyInterfaceActorActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 48863 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
															#line 9329 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_2 = delay(CLIENT_KNOBS->CLI_CONNECT_TIMEOUT);
															#line 48867 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont1when2(__when_expr_2.get(), loopDepth); };
		static_cast<VerifyInterfaceActorActor*>(this)->actor_wait_state = 2;
															#line 9325 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< VerifyInterfaceActorActor, 1, Optional<LeaderInfo> >*>(static_cast<VerifyInterfaceActorActor*>(this)));
															#line 9329 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< VerifyInterfaceActorActor, 2, Void >*>(static_cast<VerifyInterfaceActorActor*>(this)));
															#line 48874 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<VerifyInterfaceActorActor*>(this)->actor_wait_state > 0) static_cast<VerifyInterfaceActorActor*>(this)->actor_wait_state = 0;
		static_cast<VerifyInterfaceActorActor*>(this)->ActorCallback< VerifyInterfaceActorActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< VerifyInterfaceActorActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("verifyInterfaceActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("verifyInterfaceActor", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< VerifyInterfaceActorActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("verifyInterfaceActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("verifyInterfaceActor", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< VerifyInterfaceActorActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("verifyInterfaceActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("verifyInterfaceActor", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont1when1(Optional<LeaderInfo> const& rep,int loopDepth) 
	{
															#line 9327 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<VerifyInterfaceActorActor*>(this)->SAV<bool>::futures) { (void)(true); this->~VerifyInterfaceActorActorState(); static_cast<VerifyInterfaceActorActor*>(this)->destroy(); return 0; }
															#line 48946 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<VerifyInterfaceActorActor*>(this)->SAV< bool >::value()) bool(true);
		this->~VerifyInterfaceActorActorState();
		static_cast<VerifyInterfaceActorActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1when1(Optional<LeaderInfo> && rep,int loopDepth) 
	{
															#line 9327 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<VerifyInterfaceActorActor*>(this)->SAV<bool>::futures) { (void)(true); this->~VerifyInterfaceActorActorState(); static_cast<VerifyInterfaceActorActor*>(this)->destroy(); return 0; }
															#line 48958 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<VerifyInterfaceActorActor*>(this)->SAV< bool >::value()) bool(true);
		this->~VerifyInterfaceActorActorState();
		static_cast<VerifyInterfaceActorActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1when2(Void const& _,int loopDepth) 
	{
															#line 9331 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<VerifyInterfaceActorActor*>(this)->SAV<bool>::futures) { (void)(false); this->~VerifyInterfaceActorActorState(); static_cast<VerifyInterfaceActorActor*>(this)->destroy(); return 0; }
															#line 48970 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<VerifyInterfaceActorActor*>(this)->SAV< bool >::value()) bool(false);
		this->~VerifyInterfaceActorActorState();
		static_cast<VerifyInterfaceActorActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1when2(Void && _,int loopDepth) 
	{
															#line 9331 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<VerifyInterfaceActorActor*>(this)->SAV<bool>::futures) { (void)(false); this->~VerifyInterfaceActorActorState(); static_cast<VerifyInterfaceActorActor*>(this)->destroy(); return 0; }
															#line 48982 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<VerifyInterfaceActorActor*>(this)->SAV< bool >::value()) bool(false);
		this->~VerifyInterfaceActorActorState();
		static_cast<VerifyInterfaceActorActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<VerifyInterfaceActorActor*>(this)->actor_wait_state > 0) static_cast<VerifyInterfaceActorActor*>(this)->actor_wait_state = 0;
		static_cast<VerifyInterfaceActorActor*>(this)->ActorCallback< VerifyInterfaceActorActor, 1, Optional<LeaderInfo> >::remove();
		static_cast<VerifyInterfaceActorActor*>(this)->ActorCallback< VerifyInterfaceActorActor, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< VerifyInterfaceActorActor, 1, Optional<LeaderInfo> >*,Optional<LeaderInfo> const& value) 
	{
		fdb_probe_actor_enter("verifyInterfaceActor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("verifyInterfaceActor", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< VerifyInterfaceActorActor, 1, Optional<LeaderInfo> >*,Optional<LeaderInfo> && value) 
	{
		fdb_probe_actor_enter("verifyInterfaceActor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("verifyInterfaceActor", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< VerifyInterfaceActorActor, 1, Optional<LeaderInfo> >*,Error err) 
	{
		fdb_probe_actor_enter("verifyInterfaceActor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("verifyInterfaceActor", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< VerifyInterfaceActorActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("verifyInterfaceActor", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose2();
		try {
			a_body1cont1when2(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("verifyInterfaceActor", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< VerifyInterfaceActorActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("verifyInterfaceActor", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose2();
		try {
			a_body1cont1when2(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("verifyInterfaceActor", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< VerifyInterfaceActorActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("verifyInterfaceActor", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("verifyInterfaceActor", reinterpret_cast<unsigned long>(this), 2);

	}
															#line 9320 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<FlowLock> connectLock;
															#line 9320 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	ClientWorkerInterface workerInterf;
															#line 9322 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	FlowLock::Releaser releaser;
															#line 9323 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	ClientLeaderRegInterface leaderInterf;
															#line 49095 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via verifyInterfaceActor()
															#line 9320 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class VerifyInterfaceActorActor final : public Actor<bool>, public ActorCallback< VerifyInterfaceActorActor, 0, Void >, public ActorCallback< VerifyInterfaceActorActor, 1, Optional<LeaderInfo> >, public ActorCallback< VerifyInterfaceActorActor, 2, Void >, public FastAllocated<VerifyInterfaceActorActor>, public VerifyInterfaceActorActorState<VerifyInterfaceActorActor> {
															#line 49100 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<VerifyInterfaceActorActor>::operator new;
	using FastAllocated<VerifyInterfaceActorActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<bool>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< VerifyInterfaceActorActor, 0, Void >;
friend struct ActorCallback< VerifyInterfaceActorActor, 1, Optional<LeaderInfo> >;
friend struct ActorCallback< VerifyInterfaceActorActor, 2, Void >;
															#line 9320 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	VerifyInterfaceActorActor(Reference<FlowLock> const& connectLock,ClientWorkerInterface const& workerInterf) 
															#line 49113 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<bool>(),
		   VerifyInterfaceActorActorState<VerifyInterfaceActorActor>(connectLock, workerInterf)
	{
		fdb_probe_actor_enter("verifyInterfaceActor", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("verifyInterfaceActor");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("verifyInterfaceActor", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< VerifyInterfaceActorActor, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< VerifyInterfaceActorActor, 1, Optional<LeaderInfo> >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 9320 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<bool> verifyInterfaceActor( Reference<FlowLock> const& connectLock, ClientWorkerInterface const& workerInterf ) {
															#line 9320 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<bool>(new VerifyInterfaceActorActor(connectLock, workerInterf));
															#line 49142 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 9335 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

															#line 49147 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via rebootWorkerActor()
															#line 9336 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class RebootWorkerActorActor>
															#line 9336 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class RebootWorkerActorActorState {
															#line 49154 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 9336 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	RebootWorkerActorActorState(DatabaseContext* const& cx,ValueRef const& addr,bool const& check,int const& duration) 
															#line 9336 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 9336 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : cx(cx),
															#line 9336 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   addr(addr),
															#line 9336 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   check(check),
															#line 9336 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   duration(duration)
															#line 49167 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("rebootWorkerActor", reinterpret_cast<unsigned long>(this));

	}
	~RebootWorkerActorActorState() 
	{
		fdb_probe_actor_destroy("rebootWorkerActor", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 9338 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (duration < 0)
															#line 49182 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 9339 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				duration = 0;
															#line 49186 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 9340 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!cx->getConnectionRecord())
															#line 49190 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 9341 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (!static_cast<RebootWorkerActorActor*>(this)->SAV<int64_t>::futures) { (void)(0); this->~RebootWorkerActorActorState(); static_cast<RebootWorkerActorActor*>(this)->destroy(); return 0; }
															#line 49194 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				new (&static_cast<RebootWorkerActorActor*>(this)->SAV< int64_t >::value()) int64_t(0);
				this->~RebootWorkerActorActorState();
				static_cast<RebootWorkerActorActor*>(this)->finishSendAndDelPromiseRef();
				return 0;
			}
															#line 9343 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<RangeResult> __when_expr_0 = getWorkerInterfaces(cx->getConnectionRecord());
															#line 9343 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<RebootWorkerActorActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 49204 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<RebootWorkerActorActor*>(this)->actor_wait_state = 1;
															#line 9343 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< RebootWorkerActorActor, 0, RangeResult >*>(static_cast<RebootWorkerActorActor*>(this)));
															#line 49209 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~RebootWorkerActorActorState();
		static_cast<RebootWorkerActorActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(RangeResult const& kvs,int loopDepth) 
	{
															#line 9344 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(!kvs.more);
															#line 9346 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		workerInterfaces = std::map<Key, ClientWorkerInterface>();
															#line 9347 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for( const auto& it : kvs ) {
															#line 9348 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ClientWorkerInterface workerInterf = BinaryReader::fromStringRef<ClientWorkerInterface>(it.value, IncludeVersion());
															#line 9350 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			Key primaryAddress = it.key.endsWith(":tls"_sr) ? it.key.removeSuffix(":tls"_sr) : it.key;
															#line 9351 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			workerInterfaces[primaryAddress] = workerInterf;
															#line 9353 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (workerInterf.reboot.getEndpoint().addresses.secondaryAddress.present())
															#line 49244 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 9354 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				Key secondAddress = StringRef(workerInterf.reboot.getEndpoint().addresses.secondaryAddress.get().toString());
															#line 9356 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				secondAddress = secondAddress.endsWith(":tls"_sr) ? secondAddress.removeSuffix(":tls"_sr) : secondAddress;
															#line 9357 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				workerInterfaces[secondAddress] = workerInterf;
															#line 49252 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
		}
															#line 9361 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		addressesVec = std::vector<std::string>();
															#line 9362 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		boost::algorithm::split(addressesVec, addr.toString(), boost::is_any_of(","));
															#line 9364 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		Reference<FlowLock> connectLock(new FlowLock(CLIENT_KNOBS->CLI_CONNECT_PARALLELISM));
															#line 9365 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		verifyInterfs = std::vector<Future<bool>>();
															#line 9366 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for( const auto& requestedAddress : addressesVec ) {
															#line 9368 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!workerInterfaces.count(Key(requestedAddress)))
															#line 49267 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 9369 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (!static_cast<RebootWorkerActorActor*>(this)->SAV<int64_t>::futures) { (void)(0); this->~RebootWorkerActorActorState(); static_cast<RebootWorkerActorActor*>(this)->destroy(); return 0; }
															#line 49271 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				new (&static_cast<RebootWorkerActorActor*>(this)->SAV< int64_t >::value()) int64_t(0);
				this->~RebootWorkerActorActorState();
				static_cast<RebootWorkerActorActor*>(this)->finishSendAndDelPromiseRef();
				return 0;
			}
															#line 9371 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			verifyInterfs.push_back(verifyInterfaceActor(connectLock, workerInterfaces[Key(requestedAddress)]));
															#line 49279 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 9374 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_1 = waitForAll(verifyInterfs);
															#line 9374 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<RebootWorkerActorActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 49285 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<RebootWorkerActorActor*>(this)->actor_wait_state = 2;
															#line 9374 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< RebootWorkerActorActor, 1, Void >*>(static_cast<RebootWorkerActorActor*>(this)));
															#line 49290 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(RangeResult && kvs,int loopDepth) 
	{
															#line 9344 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(!kvs.more);
															#line 9346 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		workerInterfaces = std::map<Key, ClientWorkerInterface>();
															#line 9347 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for( const auto& it : kvs ) {
															#line 9348 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ClientWorkerInterface workerInterf = BinaryReader::fromStringRef<ClientWorkerInterface>(it.value, IncludeVersion());
															#line 9350 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			Key primaryAddress = it.key.endsWith(":tls"_sr) ? it.key.removeSuffix(":tls"_sr) : it.key;
															#line 9351 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			workerInterfaces[primaryAddress] = workerInterf;
															#line 9353 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (workerInterf.reboot.getEndpoint().addresses.secondaryAddress.present())
															#line 49311 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 9354 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				Key secondAddress = StringRef(workerInterf.reboot.getEndpoint().addresses.secondaryAddress.get().toString());
															#line 9356 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				secondAddress = secondAddress.endsWith(":tls"_sr) ? secondAddress.removeSuffix(":tls"_sr) : secondAddress;
															#line 9357 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				workerInterfaces[secondAddress] = workerInterf;
															#line 49319 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
		}
															#line 9361 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		addressesVec = std::vector<std::string>();
															#line 9362 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		boost::algorithm::split(addressesVec, addr.toString(), boost::is_any_of(","));
															#line 9364 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		Reference<FlowLock> connectLock(new FlowLock(CLIENT_KNOBS->CLI_CONNECT_PARALLELISM));
															#line 9365 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		verifyInterfs = std::vector<Future<bool>>();
															#line 9366 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for( const auto& requestedAddress : addressesVec ) {
															#line 9368 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!workerInterfaces.count(Key(requestedAddress)))
															#line 49334 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 9369 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (!static_cast<RebootWorkerActorActor*>(this)->SAV<int64_t>::futures) { (void)(0); this->~RebootWorkerActorActorState(); static_cast<RebootWorkerActorActor*>(this)->destroy(); return 0; }
															#line 49338 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				new (&static_cast<RebootWorkerActorActor*>(this)->SAV< int64_t >::value()) int64_t(0);
				this->~RebootWorkerActorActorState();
				static_cast<RebootWorkerActorActor*>(this)->finishSendAndDelPromiseRef();
				return 0;
			}
															#line 9371 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			verifyInterfs.push_back(verifyInterfaceActor(connectLock, workerInterfaces[Key(requestedAddress)]));
															#line 49346 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 9374 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_1 = waitForAll(verifyInterfs);
															#line 9374 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<RebootWorkerActorActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 49352 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<RebootWorkerActorActor*>(this)->actor_wait_state = 2;
															#line 9374 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< RebootWorkerActorActor, 1, Void >*>(static_cast<RebootWorkerActorActor*>(this)));
															#line 49357 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1when1(RangeResult const& kvs,int loopDepth) 
	{
		loopDepth = a_body1cont1(kvs, loopDepth);

		return loopDepth;
	}
	int a_body1when1(RangeResult && kvs,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(kvs), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<RebootWorkerActorActor*>(this)->actor_wait_state > 0) static_cast<RebootWorkerActorActor*>(this)->actor_wait_state = 0;
		static_cast<RebootWorkerActorActor*>(this)->ActorCallback< RebootWorkerActorActor, 0, RangeResult >::remove();

	}
	void a_callback_fire(ActorCallback< RebootWorkerActorActor, 0, RangeResult >*,RangeResult const& value) 
	{
		fdb_probe_actor_enter("rebootWorkerActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("rebootWorkerActor", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< RebootWorkerActorActor, 0, RangeResult >*,RangeResult && value) 
	{
		fdb_probe_actor_enter("rebootWorkerActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("rebootWorkerActor", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< RebootWorkerActorActor, 0, RangeResult >*,Error err) 
	{
		fdb_probe_actor_enter("rebootWorkerActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("rebootWorkerActor", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont4(Void const& _,int loopDepth) 
	{
															#line 9375 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for( const auto& f : verifyInterfs ) {
															#line 9376 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!f.get())
															#line 49431 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 9377 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (!static_cast<RebootWorkerActorActor*>(this)->SAV<int64_t>::futures) { (void)(0); this->~RebootWorkerActorActorState(); static_cast<RebootWorkerActorActor*>(this)->destroy(); return 0; }
															#line 49435 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				new (&static_cast<RebootWorkerActorActor*>(this)->SAV< int64_t >::value()) int64_t(0);
				this->~RebootWorkerActorActorState();
				static_cast<RebootWorkerActorActor*>(this)->finishSendAndDelPromiseRef();
				return 0;
			}
		}
															#line 9380 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for( const auto& address : addressesVec ) {
															#line 9382 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			workerInterfaces[Key(address)].reboot.send(RebootRequest(false, check, duration));
															#line 49446 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 9384 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<RebootWorkerActorActor*>(this)->SAV<int64_t>::futures) { (void)(1); this->~RebootWorkerActorActorState(); static_cast<RebootWorkerActorActor*>(this)->destroy(); return 0; }
															#line 49450 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<RebootWorkerActorActor*>(this)->SAV< int64_t >::value()) int64_t(1);
		this->~RebootWorkerActorActorState();
		static_cast<RebootWorkerActorActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont4(Void && _,int loopDepth) 
	{
															#line 9375 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for( const auto& f : verifyInterfs ) {
															#line 9376 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!f.get())
															#line 49464 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 9377 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (!static_cast<RebootWorkerActorActor*>(this)->SAV<int64_t>::futures) { (void)(0); this->~RebootWorkerActorActorState(); static_cast<RebootWorkerActorActor*>(this)->destroy(); return 0; }
															#line 49468 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				new (&static_cast<RebootWorkerActorActor*>(this)->SAV< int64_t >::value()) int64_t(0);
				this->~RebootWorkerActorActorState();
				static_cast<RebootWorkerActorActor*>(this)->finishSendAndDelPromiseRef();
				return 0;
			}
		}
															#line 9380 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for( const auto& address : addressesVec ) {
															#line 9382 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			workerInterfaces[Key(address)].reboot.send(RebootRequest(false, check, duration));
															#line 49479 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 9384 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<RebootWorkerActorActor*>(this)->SAV<int64_t>::futures) { (void)(1); this->~RebootWorkerActorActorState(); static_cast<RebootWorkerActorActor*>(this)->destroy(); return 0; }
															#line 49483 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<RebootWorkerActorActor*>(this)->SAV< int64_t >::value()) int64_t(1);
		this->~RebootWorkerActorActorState();
		static_cast<RebootWorkerActorActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont4(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont4(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<RebootWorkerActorActor*>(this)->actor_wait_state > 0) static_cast<RebootWorkerActorActor*>(this)->actor_wait_state = 0;
		static_cast<RebootWorkerActorActor*>(this)->ActorCallback< RebootWorkerActorActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< RebootWorkerActorActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("rebootWorkerActor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("rebootWorkerActor", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< RebootWorkerActorActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("rebootWorkerActor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("rebootWorkerActor", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< RebootWorkerActorActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("rebootWorkerActor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("rebootWorkerActor", reinterpret_cast<unsigned long>(this), 1);

	}
															#line 9336 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	DatabaseContext* cx;
															#line 9336 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	ValueRef addr;
															#line 9336 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	bool check;
															#line 9336 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	int duration;
															#line 9346 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	std::map<Key, ClientWorkerInterface> workerInterfaces;
															#line 9361 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	std::vector<std::string> addressesVec;
															#line 9365 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	std::vector<Future<bool>> verifyInterfs;
															#line 49568 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via rebootWorkerActor()
															#line 9336 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class RebootWorkerActorActor final : public Actor<int64_t>, public ActorCallback< RebootWorkerActorActor, 0, RangeResult >, public ActorCallback< RebootWorkerActorActor, 1, Void >, public FastAllocated<RebootWorkerActorActor>, public RebootWorkerActorActorState<RebootWorkerActorActor> {
															#line 49573 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<RebootWorkerActorActor>::operator new;
	using FastAllocated<RebootWorkerActorActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<int64_t>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< RebootWorkerActorActor, 0, RangeResult >;
friend struct ActorCallback< RebootWorkerActorActor, 1, Void >;
															#line 9336 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	RebootWorkerActorActor(DatabaseContext* const& cx,ValueRef const& addr,bool const& check,int const& duration) 
															#line 49585 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<int64_t>(),
		   RebootWorkerActorActorState<RebootWorkerActorActor>(cx, addr, check, duration)
	{
		fdb_probe_actor_enter("rebootWorkerActor", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("rebootWorkerActor");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("rebootWorkerActor", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< RebootWorkerActorActor, 0, RangeResult >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< RebootWorkerActorActor, 1, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 9336 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] static Future<int64_t> rebootWorkerActor( DatabaseContext* const& cx, ValueRef const& addr, bool const& check, int const& duration ) {
															#line 9336 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<int64_t>(new RebootWorkerActorActor(cx, addr, check, duration));
															#line 49614 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 9386 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

Future<int64_t> DatabaseContext::rebootWorker(StringRef addr, bool check, int duration) {
	return rebootWorkerActor(this, addr, check, duration);
}

Future<Void> DatabaseContext::forceRecoveryWithDataLoss(StringRef dcId) {
	return forceRecovery(getConnectionRecord(), dcId);
}

															#line 49627 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via createSnapshotActor()
															#line 9395 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class CreateSnapshotActorActor>
															#line 9395 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class CreateSnapshotActorActorState {
															#line 49634 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 9395 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	CreateSnapshotActorActorState(DatabaseContext* const& cx,UID const& snapUID,StringRef const& snapCmd) 
															#line 9395 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 9395 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : cx(cx),
															#line 9395 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   snapUID(snapUID),
															#line 9395 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   snapCmd(snapCmd)
															#line 49645 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("createSnapshotActor", reinterpret_cast<unsigned long>(this));

	}
	~CreateSnapshotActorActorState() 
	{
		fdb_probe_actor_destroy("createSnapshotActor", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 9396 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_0 = mgmtSnapCreate(cx->clone(), snapCmd, snapUID);
															#line 9396 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<CreateSnapshotActorActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 49662 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<CreateSnapshotActorActor*>(this)->actor_wait_state = 1;
															#line 9396 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< CreateSnapshotActorActor, 0, Void >*>(static_cast<CreateSnapshotActorActor*>(this)));
															#line 49667 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~CreateSnapshotActorActorState();
		static_cast<CreateSnapshotActorActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void const& _,int loopDepth) 
	{
															#line 9397 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<CreateSnapshotActorActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~CreateSnapshotActorActorState(); static_cast<CreateSnapshotActorActor*>(this)->destroy(); return 0; }
															#line 49690 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<CreateSnapshotActorActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~CreateSnapshotActorActorState();
		static_cast<CreateSnapshotActorActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1(Void && _,int loopDepth) 
	{
															#line 9397 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<CreateSnapshotActorActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~CreateSnapshotActorActorState(); static_cast<CreateSnapshotActorActor*>(this)->destroy(); return 0; }
															#line 49702 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<CreateSnapshotActorActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~CreateSnapshotActorActorState();
		static_cast<CreateSnapshotActorActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<CreateSnapshotActorActor*>(this)->actor_wait_state > 0) static_cast<CreateSnapshotActorActor*>(this)->actor_wait_state = 0;
		static_cast<CreateSnapshotActorActor*>(this)->ActorCallback< CreateSnapshotActorActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< CreateSnapshotActorActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("createSnapshotActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("createSnapshotActor", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< CreateSnapshotActorActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("createSnapshotActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("createSnapshotActor", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< CreateSnapshotActorActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("createSnapshotActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("createSnapshotActor", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 9395 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	DatabaseContext* cx;
															#line 9395 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	UID snapUID;
															#line 9395 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	StringRef snapCmd;
															#line 49779 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via createSnapshotActor()
															#line 9395 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class CreateSnapshotActorActor final : public Actor<Void>, public ActorCallback< CreateSnapshotActorActor, 0, Void >, public FastAllocated<CreateSnapshotActorActor>, public CreateSnapshotActorActorState<CreateSnapshotActorActor> {
															#line 49784 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<CreateSnapshotActorActor>::operator new;
	using FastAllocated<CreateSnapshotActorActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< CreateSnapshotActorActor, 0, Void >;
															#line 9395 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	CreateSnapshotActorActor(DatabaseContext* const& cx,UID const& snapUID,StringRef const& snapCmd) 
															#line 49795 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Void>(),
		   CreateSnapshotActorActorState<CreateSnapshotActorActor>(cx, snapUID, snapCmd)
	{
		fdb_probe_actor_enter("createSnapshotActor", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("createSnapshotActor");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("createSnapshotActor", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< CreateSnapshotActorActor, 0, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 9395 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] static Future<Void> createSnapshotActor( DatabaseContext* const& cx, UID const& snapUID, StringRef const& snapCmd ) {
															#line 9395 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Void>(new CreateSnapshotActorActor(cx, snapUID, snapCmd));
															#line 49823 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 9399 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

Future<Void> DatabaseContext::createSnapshot(StringRef uid, StringRef snapshot_command) {
	std::string uid_str = uid.toString();
	if (!std::all_of(uid_str.begin(), uid_str.end(), [](unsigned char c) { return std::isxdigit(c); }) ||
	    uid_str.size() != 32) {
		// only 32-length hex string is considered as a valid UID
		throw snap_invalid_uid_string();
	}
	return createSnapshotActor(this, UID::fromString(uid_str), snapshot_command);
}

void sharedStateDelRef(DatabaseSharedState* ssPtr) {
	if (--ssPtr->refCount == 0) {
		delete ssPtr;
	}
}

Future<DatabaseSharedState*> DatabaseContext::initSharedState() {
	ASSERT(!sharedStatePtr); // Don't re-initialize shared state if a pointer already exists
	DatabaseSharedState* newState = new DatabaseSharedState();
	// Increment refcount by 1 on creation to account for the one held in MultiVersionApi map
	// Therefore, on initialization, refCount should be 2 (after also going to setSharedState)
	newState->refCount++;
	newState->delRef = &sharedStateDelRef;
	setSharedState(newState);
	return newState;
}

void DatabaseContext::setSharedState(DatabaseSharedState* p) {
	ASSERT(p->protocolVersion == currentProtocolVersion());
	sharedStatePtr = p;
	sharedStatePtr->refCount++;
}

// FIXME: this has undesired head-of-line-blocking behavior in the case of large version jumps.
// For example, say that The current feed version is 100, and one waiter wants to wait for the feed version >= 1000.
// This will send a request with minVersion=1000. Then say someone wants to wait for feed version >= 200. Because we've
// already blocked this updater on version 1000, even if the feed would already be at version 200+, we won't get an
// empty version response until version 1000.
															#line 49866 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via storageFeedVersionUpdater()
															#line 9438 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class StorageFeedVersionUpdaterActor>
															#line 9438 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class StorageFeedVersionUpdaterActorState {
															#line 49873 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 9438 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	StorageFeedVersionUpdaterActorState(StorageServerInterface const& interf,ChangeFeedStorageData* const& self) 
															#line 9438 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 9438 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : interf(interf),
															#line 9438 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   self(self)
															#line 49882 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("storageFeedVersionUpdater", reinterpret_cast<unsigned long>(this));

	}
	~StorageFeedVersionUpdaterActorState() 
	{
		fdb_probe_actor_destroy("storageFeedVersionUpdater", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 9439 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			;
															#line 49897 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~StorageFeedVersionUpdaterActorState();
		static_cast<StorageFeedVersionUpdaterActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
															#line 9440 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (self->version.get() < self->desired.get())
															#line 49927 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 9441 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_0 = delay(CLIENT_KNOBS->CHANGE_FEED_EMPTY_BATCH_TIME) || self->version.whenAtLeast(self->desired.get());
															#line 9441 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<StorageFeedVersionUpdaterActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 49933 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
			static_cast<StorageFeedVersionUpdaterActor*>(this)->actor_wait_state = 1;
															#line 9441 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< StorageFeedVersionUpdaterActor, 0, Void >*>(static_cast<StorageFeedVersionUpdaterActor*>(this)));
															#line 49938 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
															#line 9459 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_3 = self->desired.whenAtLeast(self->version.get() + 1);
															#line 9459 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<StorageFeedVersionUpdaterActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 49947 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch1(__when_expr_3.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1when2(__when_expr_3.get(), loopDepth); };
			static_cast<StorageFeedVersionUpdaterActor*>(this)->actor_wait_state = 4;
															#line 9459 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< StorageFeedVersionUpdaterActor, 3, Void >*>(static_cast<StorageFeedVersionUpdaterActor*>(this)));
															#line 49952 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1cont2(Void const& _,int loopDepth) 
	{
															#line 9442 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (self->version.get() < self->desired.get())
															#line 49968 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
			try {
															#line 9444 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				StrictFuture<ChangeFeedVersionUpdateReply> __when_expr_1 = brokenPromiseToNever( interf.changeFeedVersionUpdate.getReply(ChangeFeedVersionUpdateRequest(self->desired.get())));
															#line 9444 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (static_cast<StorageFeedVersionUpdaterActor*>(this)->actor_wait_state < 0) return a_body1loopBody1cont2Catch1(actor_cancelled(), loopDepth);
															#line 49975 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1cont2Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
				static_cast<StorageFeedVersionUpdaterActor*>(this)->actor_wait_state = 2;
															#line 9444 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< StorageFeedVersionUpdaterActor, 1, ChangeFeedVersionUpdateReply >*>(static_cast<StorageFeedVersionUpdaterActor*>(this)));
															#line 49980 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				loopDepth = 0;
			}
			catch (Error& error) {
				loopDepth = a_body1loopBody1cont2Catch1(error, loopDepth);
			} catch (...) {
				loopDepth = a_body1loopBody1cont2Catch1(unknown_error(), loopDepth);
			}
		}
		else
		{
			loopDepth = a_body1loopBody1cont3(loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(Void && _,int loopDepth) 
	{
															#line 9442 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (self->version.get() < self->desired.get())
															#line 50000 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
			try {
															#line 9444 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				StrictFuture<ChangeFeedVersionUpdateReply> __when_expr_1 = brokenPromiseToNever( interf.changeFeedVersionUpdate.getReply(ChangeFeedVersionUpdateRequest(self->desired.get())));
															#line 9444 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (static_cast<StorageFeedVersionUpdaterActor*>(this)->actor_wait_state < 0) return a_body1loopBody1cont2Catch1(actor_cancelled(), loopDepth);
															#line 50007 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1cont2Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
				static_cast<StorageFeedVersionUpdaterActor*>(this)->actor_wait_state = 2;
															#line 9444 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< StorageFeedVersionUpdaterActor, 1, ChangeFeedVersionUpdateReply >*>(static_cast<StorageFeedVersionUpdaterActor*>(this)));
															#line 50012 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				loopDepth = 0;
			}
			catch (Error& error) {
				loopDepth = a_body1loopBody1cont2Catch1(error, loopDepth);
			} catch (...) {
				loopDepth = a_body1loopBody1cont2Catch1(unknown_error(), loopDepth);
			}
		}
		else
		{
			loopDepth = a_body1loopBody1cont3(loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<StorageFeedVersionUpdaterActor*>(this)->actor_wait_state > 0) static_cast<StorageFeedVersionUpdaterActor*>(this)->actor_wait_state = 0;
		static_cast<StorageFeedVersionUpdaterActor*>(this)->ActorCallback< StorageFeedVersionUpdaterActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< StorageFeedVersionUpdaterActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("storageFeedVersionUpdater", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("storageFeedVersionUpdater", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< StorageFeedVersionUpdaterActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("storageFeedVersionUpdater", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("storageFeedVersionUpdater", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< StorageFeedVersionUpdaterActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("storageFeedVersionUpdater", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("storageFeedVersionUpdater", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1cont3(int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont4(int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 9450 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (e.code() != error_code_server_overloaded)
															#line 50108 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 9451 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				return a_body1Catch1(e, std::max(0, loopDepth - 1));
															#line 50112 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 9453 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (FLOW_KNOBS->PREVENT_FAST_SPIN_DELAY > CLIENT_KNOBS->CHANGE_FEED_EMPTY_BATCH_TIME)
															#line 50116 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 9454 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				StrictFuture<Void> __when_expr_2 = delay(FLOW_KNOBS->PREVENT_FAST_SPIN_DELAY - CLIENT_KNOBS->CHANGE_FEED_EMPTY_BATCH_TIME);
															#line 9454 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (static_cast<StorageFeedVersionUpdaterActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 50122 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1cont2Catch1when1(__when_expr_2.get(), loopDepth); };
				static_cast<StorageFeedVersionUpdaterActor*>(this)->actor_wait_state = 3;
															#line 9454 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< StorageFeedVersionUpdaterActor, 2, Void >*>(static_cast<StorageFeedVersionUpdaterActor*>(this)));
															#line 50127 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				loopDepth = 0;
			}
			else
			{
				loopDepth = a_body1loopBody1cont2Catch1cont1(loopDepth);
			}
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont5(ChangeFeedVersionUpdateReply const& rep,int loopDepth) 
	{
															#line 9446 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (rep.version > self->version.get())
															#line 50147 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 9447 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			self->version.set(rep.version);
															#line 50151 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
		loopDepth = a_body1loopBody1cont8(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont5(ChangeFeedVersionUpdateReply && rep,int loopDepth) 
	{
															#line 9446 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (rep.version > self->version.get())
															#line 50161 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 9447 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			self->version.set(rep.version);
															#line 50165 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
		loopDepth = a_body1loopBody1cont8(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(ChangeFeedVersionUpdateReply const& rep,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont5(rep, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(ChangeFeedVersionUpdateReply && rep,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont5(std::move(rep), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<StorageFeedVersionUpdaterActor*>(this)->actor_wait_state > 0) static_cast<StorageFeedVersionUpdaterActor*>(this)->actor_wait_state = 0;
		static_cast<StorageFeedVersionUpdaterActor*>(this)->ActorCallback< StorageFeedVersionUpdaterActor, 1, ChangeFeedVersionUpdateReply >::remove();

	}
	void a_callback_fire(ActorCallback< StorageFeedVersionUpdaterActor, 1, ChangeFeedVersionUpdateReply >*,ChangeFeedVersionUpdateReply const& value) 
	{
		fdb_probe_actor_enter("storageFeedVersionUpdater", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont2Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont2Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("storageFeedVersionUpdater", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< StorageFeedVersionUpdaterActor, 1, ChangeFeedVersionUpdateReply >*,ChangeFeedVersionUpdateReply && value) 
	{
		fdb_probe_actor_enter("storageFeedVersionUpdater", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont2Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont2Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("storageFeedVersionUpdater", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< StorageFeedVersionUpdaterActor, 1, ChangeFeedVersionUpdateReply >*,Error err) 
	{
		fdb_probe_actor_enter("storageFeedVersionUpdater", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont2Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont2Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("storageFeedVersionUpdater", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1loopBody1cont8(int loopDepth) 
	{
		try {
			loopDepth = a_body1loopBody1cont4(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2Catch1cont1(int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont4(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2Catch1cont3(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2Catch1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2Catch1cont3(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2Catch1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2Catch1cont3(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2Catch1cont3(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<StorageFeedVersionUpdaterActor*>(this)->actor_wait_state > 0) static_cast<StorageFeedVersionUpdaterActor*>(this)->actor_wait_state = 0;
		static_cast<StorageFeedVersionUpdaterActor*>(this)->ActorCallback< StorageFeedVersionUpdaterActor, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< StorageFeedVersionUpdaterActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("storageFeedVersionUpdater", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont2Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("storageFeedVersionUpdater", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< StorageFeedVersionUpdaterActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("storageFeedVersionUpdater", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont2Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("storageFeedVersionUpdater", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< StorageFeedVersionUpdaterActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("storageFeedVersionUpdater", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("storageFeedVersionUpdater", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1loopBody1cont9(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont9(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when2(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont9(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when2(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont9(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<StorageFeedVersionUpdaterActor*>(this)->actor_wait_state > 0) static_cast<StorageFeedVersionUpdaterActor*>(this)->actor_wait_state = 0;
		static_cast<StorageFeedVersionUpdaterActor*>(this)->ActorCallback< StorageFeedVersionUpdaterActor, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< StorageFeedVersionUpdaterActor, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("storageFeedVersionUpdater", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1when2(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("storageFeedVersionUpdater", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< StorageFeedVersionUpdaterActor, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("storageFeedVersionUpdater", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1when2(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("storageFeedVersionUpdater", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< StorageFeedVersionUpdaterActor, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("storageFeedVersionUpdater", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("storageFeedVersionUpdater", reinterpret_cast<unsigned long>(this), 3);

	}
															#line 9438 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	StorageServerInterface interf;
															#line 9438 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	ChangeFeedStorageData* self;
															#line 50407 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via storageFeedVersionUpdater()
															#line 9438 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class StorageFeedVersionUpdaterActor final : public Actor<Void>, public ActorCallback< StorageFeedVersionUpdaterActor, 0, Void >, public ActorCallback< StorageFeedVersionUpdaterActor, 1, ChangeFeedVersionUpdateReply >, public ActorCallback< StorageFeedVersionUpdaterActor, 2, Void >, public ActorCallback< StorageFeedVersionUpdaterActor, 3, Void >, public FastAllocated<StorageFeedVersionUpdaterActor>, public StorageFeedVersionUpdaterActorState<StorageFeedVersionUpdaterActor> {
															#line 50412 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<StorageFeedVersionUpdaterActor>::operator new;
	using FastAllocated<StorageFeedVersionUpdaterActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< StorageFeedVersionUpdaterActor, 0, Void >;
friend struct ActorCallback< StorageFeedVersionUpdaterActor, 1, ChangeFeedVersionUpdateReply >;
friend struct ActorCallback< StorageFeedVersionUpdaterActor, 2, Void >;
friend struct ActorCallback< StorageFeedVersionUpdaterActor, 3, Void >;
															#line 9438 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	StorageFeedVersionUpdaterActor(StorageServerInterface const& interf,ChangeFeedStorageData* const& self) 
															#line 50426 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Void>(),
		   StorageFeedVersionUpdaterActorState<StorageFeedVersionUpdaterActor>(interf, self)
	{
		fdb_probe_actor_enter("storageFeedVersionUpdater", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("storageFeedVersionUpdater");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("storageFeedVersionUpdater", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< StorageFeedVersionUpdaterActor, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< StorageFeedVersionUpdaterActor, 1, ChangeFeedVersionUpdateReply >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< StorageFeedVersionUpdaterActor, 2, Void >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< StorageFeedVersionUpdaterActor, 3, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 9438 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<Void> storageFeedVersionUpdater( StorageServerInterface const& interf, ChangeFeedStorageData* const& self ) {
															#line 9438 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Void>(new StorageFeedVersionUpdaterActor(interf, self));
															#line 50457 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 9463 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

															#line 50462 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via changeFeedCommitter()
															#line 9464 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class ChangeFeedCommitterActor>
															#line 9464 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class ChangeFeedCommitterActorState {
															#line 50469 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 9464 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	ChangeFeedCommitterActorState(IKeyValueStore* const& storage,Reference<AsyncVar<bool>> const& commitChangeFeedStorage,int64_t* const& uncommittedCFBytes) 
															#line 9464 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 9464 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : storage(storage),
															#line 9464 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   commitChangeFeedStorage(commitChangeFeedStorage),
															#line 9464 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   uncommittedCFBytes(uncommittedCFBytes)
															#line 50480 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("changeFeedCommitter", reinterpret_cast<unsigned long>(this));

	}
	~ChangeFeedCommitterActorState() 
	{
		fdb_probe_actor_destroy("changeFeedCommitter", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 9467 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			;
															#line 50495 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~ChangeFeedCommitterActorState();
		static_cast<ChangeFeedCommitterActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
															#line 9468 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		;
															#line 50525 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
															#line 9471 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		*uncommittedCFBytes = 0;
															#line 9472 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		commitChangeFeedStorage->set(false);
															#line 9473 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_1 = storage->commit();
															#line 9473 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<ChangeFeedCommitterActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 50540 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<ChangeFeedCommitterActor*>(this)->actor_wait_state = 2;
															#line 9473 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< ChangeFeedCommitterActor, 1, Void >*>(static_cast<ChangeFeedCommitterActor*>(this)));
															#line 50545 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1loopBody1(int loopDepth) 
	{
															#line 9468 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!(!commitChangeFeedStorage->get()))
															#line 50561 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
			return a_body1loopBody1break1(loopDepth==0?0:loopDepth-1); // break
		}
															#line 9469 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_0 = commitChangeFeedStorage->onChange();
															#line 9469 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<ChangeFeedCommitterActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 2));
															#line 50569 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), std::max(0, loopDepth - 2)); else return a_body1loopBody1loopBody1when1(__when_expr_0.get(), loopDepth); };
		static_cast<ChangeFeedCommitterActor*>(this)->actor_wait_state = 1;
															#line 9469 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< ChangeFeedCommitterActor, 0, Void >*>(static_cast<ChangeFeedCommitterActor*>(this)));
															#line 50574 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1break1(int loopDepth) 
	{
		try {
			return a_body1loopBody1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1loopBody1cont1(Void const& _,int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopBody1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1loopBody1cont1(Void && _,int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopBody1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1loopBody1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1loopBody1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<ChangeFeedCommitterActor*>(this)->actor_wait_state > 0) static_cast<ChangeFeedCommitterActor*>(this)->actor_wait_state = 0;
		static_cast<ChangeFeedCommitterActor*>(this)->ActorCallback< ChangeFeedCommitterActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< ChangeFeedCommitterActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("changeFeedCommitter", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeFeedCommitter", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< ChangeFeedCommitterActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("changeFeedCommitter", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeFeedCommitter", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< ChangeFeedCommitterActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("changeFeedCommitter", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeFeedCommitter", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1cont2(Void const& _,int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1cont2(Void && _,int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1cont1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<ChangeFeedCommitterActor*>(this)->actor_wait_state > 0) static_cast<ChangeFeedCommitterActor*>(this)->actor_wait_state = 0;
		static_cast<ChangeFeedCommitterActor*>(this)->ActorCallback< ChangeFeedCommitterActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< ChangeFeedCommitterActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("changeFeedCommitter", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeFeedCommitter", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< ChangeFeedCommitterActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("changeFeedCommitter", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeFeedCommitter", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< ChangeFeedCommitterActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("changeFeedCommitter", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeFeedCommitter", reinterpret_cast<unsigned long>(this), 1);

	}
															#line 9464 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	IKeyValueStore* storage;
															#line 9464 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<AsyncVar<bool>> commitChangeFeedStorage;
															#line 9464 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	int64_t* uncommittedCFBytes;
															#line 50748 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via changeFeedCommitter()
															#line 9464 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class ChangeFeedCommitterActor final : public Actor<Void>, public ActorCallback< ChangeFeedCommitterActor, 0, Void >, public ActorCallback< ChangeFeedCommitterActor, 1, Void >, public FastAllocated<ChangeFeedCommitterActor>, public ChangeFeedCommitterActorState<ChangeFeedCommitterActor> {
															#line 50753 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<ChangeFeedCommitterActor>::operator new;
	using FastAllocated<ChangeFeedCommitterActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< ChangeFeedCommitterActor, 0, Void >;
friend struct ActorCallback< ChangeFeedCommitterActor, 1, Void >;
															#line 9464 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	ChangeFeedCommitterActor(IKeyValueStore* const& storage,Reference<AsyncVar<bool>> const& commitChangeFeedStorage,int64_t* const& uncommittedCFBytes) 
															#line 50765 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Void>(),
		   ChangeFeedCommitterActorState<ChangeFeedCommitterActor>(storage, commitChangeFeedStorage, uncommittedCFBytes)
	{
		fdb_probe_actor_enter("changeFeedCommitter", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("changeFeedCommitter");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("changeFeedCommitter", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< ChangeFeedCommitterActor, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< ChangeFeedCommitterActor, 1, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 9464 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<Void> changeFeedCommitter( IKeyValueStore* const& storage, Reference<AsyncVar<bool>> const& commitChangeFeedStorage, int64_t* const& uncommittedCFBytes ) {
															#line 9464 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Void>(new ChangeFeedCommitterActor(storage, commitChangeFeedStorage, uncommittedCFBytes));
															#line 50794 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 9476 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

															#line 50799 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via cleanupChangeFeedCache()
															#line 9477 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class CleanupChangeFeedCacheActor>
															#line 9477 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class CleanupChangeFeedCacheActorState {
															#line 50806 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 9477 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	CleanupChangeFeedCacheActorState(DatabaseContext* const& db) 
															#line 9477 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 9477 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : db(db)
															#line 50813 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("cleanupChangeFeedCache", reinterpret_cast<unsigned long>(this));

	}
	~CleanupChangeFeedCacheActorState() 
	{
		fdb_probe_actor_destroy("cleanupChangeFeedCache", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 9478 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_0 = db->initializeChangeFeedCache;
															#line 9478 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<CleanupChangeFeedCacheActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 50830 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<CleanupChangeFeedCacheActor*>(this)->actor_wait_state = 1;
															#line 9478 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< CleanupChangeFeedCacheActor, 0, Void >*>(static_cast<CleanupChangeFeedCacheActor*>(this)));
															#line 50835 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~CleanupChangeFeedCacheActorState();
		static_cast<CleanupChangeFeedCacheActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void const& _,int loopDepth) 
	{
															#line 9479 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_1 = delay(CLIENT_KNOBS->CHANGE_FEED_CACHE_EXPIRE_TIME);
															#line 9479 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<CleanupChangeFeedCacheActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 50860 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<CleanupChangeFeedCacheActor*>(this)->actor_wait_state = 2;
															#line 9479 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< CleanupChangeFeedCacheActor, 1, Void >*>(static_cast<CleanupChangeFeedCacheActor*>(this)));
															#line 50865 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void && _,int loopDepth) 
	{
															#line 9479 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_1 = delay(CLIENT_KNOBS->CHANGE_FEED_CACHE_EXPIRE_TIME);
															#line 9479 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<CleanupChangeFeedCacheActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 50876 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<CleanupChangeFeedCacheActor*>(this)->actor_wait_state = 2;
															#line 9479 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< CleanupChangeFeedCacheActor, 1, Void >*>(static_cast<CleanupChangeFeedCacheActor*>(this)));
															#line 50881 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<CleanupChangeFeedCacheActor*>(this)->actor_wait_state > 0) static_cast<CleanupChangeFeedCacheActor*>(this)->actor_wait_state = 0;
		static_cast<CleanupChangeFeedCacheActor*>(this)->ActorCallback< CleanupChangeFeedCacheActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< CleanupChangeFeedCacheActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("cleanupChangeFeedCache", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("cleanupChangeFeedCache", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< CleanupChangeFeedCacheActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("cleanupChangeFeedCache", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("cleanupChangeFeedCache", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< CleanupChangeFeedCacheActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("cleanupChangeFeedCache", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("cleanupChangeFeedCache", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont2(Void const& _,int loopDepth) 
	{
															#line 9480 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		;
															#line 50953 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont2loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1cont2(Void && _,int loopDepth) 
	{
															#line 9480 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		;
															#line 50962 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont2loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<CleanupChangeFeedCacheActor*>(this)->actor_wait_state > 0) static_cast<CleanupChangeFeedCacheActor*>(this)->actor_wait_state = 0;
		static_cast<CleanupChangeFeedCacheActor*>(this)->ActorCallback< CleanupChangeFeedCacheActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< CleanupChangeFeedCacheActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("cleanupChangeFeedCache", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("cleanupChangeFeedCache", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< CleanupChangeFeedCacheActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("cleanupChangeFeedCache", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("cleanupChangeFeedCache", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< CleanupChangeFeedCacheActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("cleanupChangeFeedCache", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("cleanupChangeFeedCache", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont2loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1cont2loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1cont2loopBody1(int loopDepth) 
	{
															#line 9481 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for(auto it = db->changeFeedCaches.begin();it != db->changeFeedCaches.end();++it) {
															#line 9482 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!it->second->active && now() - it->second->inactiveTime > CLIENT_KNOBS->CHANGE_FEED_CACHE_EXPIRE_TIME)
															#line 51043 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 9483 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				Key beginKey = changeFeedCacheKey(it->first.tenantPrefix, it->first.rangeId, it->first.range, 0);
															#line 9484 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				Key endKey = changeFeedCacheKey(it->first.tenantPrefix, it->first.rangeId, it->first.range, MAX_VERSION);
															#line 9486 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				db->storage->clear(KeyRangeRef(beginKey, endKey));
															#line 9487 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				KeyRange feedRange = singleKeyRange(changeFeedCacheFeedKey(it->first.tenantPrefix, it->first.rangeId, it->first.range));
															#line 9489 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				db->storage->clear(feedRange);
															#line 9491 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				db->uncommittedCFBytes += beginKey.size() + endKey.size() + feedRange.expectedSize();
															#line 9492 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (db->uncommittedCFBytes > CLIENT_KNOBS->CHANGE_FEED_CACHE_FLUSH_BYTES)
															#line 51059 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 9493 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					db->commitChangeFeedStorage->set(true);
															#line 51063 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
															#line 9496 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				auto& rangeIdCache = db->rangeId_cacheData[it->first.rangeId];
															#line 9497 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				rangeIdCache.erase(it->first);
															#line 9498 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (rangeIdCache.empty())
															#line 51071 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 9499 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					db->rangeId_cacheData.erase(it->first.rangeId);
															#line 51075 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
															#line 9501 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				db->changeFeedCaches.erase(it);
															#line 51079 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				break;
			}
		}
															#line 9505 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_2 = delay(5.0);
															#line 9505 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<CleanupChangeFeedCacheActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 51087 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), std::max(0, loopDepth - 1)); else return a_body1cont2loopBody1when1(__when_expr_2.get(), loopDepth); };
		static_cast<CleanupChangeFeedCacheActor*>(this)->actor_wait_state = 3;
															#line 9505 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< CleanupChangeFeedCacheActor, 2, Void >*>(static_cast<CleanupChangeFeedCacheActor*>(this)));
															#line 51092 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont2loopBody1cont1(Void const& _,int loopDepth) 
	{
		if (loopDepth == 0) return a_body1cont2loopHead1(0);

		return loopDepth;
	}
	int a_body1cont2loopBody1cont1(Void && _,int loopDepth) 
	{
		if (loopDepth == 0) return a_body1cont2loopHead1(0);

		return loopDepth;
	}
	int a_body1cont2loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont2loopBody1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont2loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont2loopBody1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<CleanupChangeFeedCacheActor*>(this)->actor_wait_state > 0) static_cast<CleanupChangeFeedCacheActor*>(this)->actor_wait_state = 0;
		static_cast<CleanupChangeFeedCacheActor*>(this)->ActorCallback< CleanupChangeFeedCacheActor, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< CleanupChangeFeedCacheActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("cleanupChangeFeedCache", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont2loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("cleanupChangeFeedCache", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< CleanupChangeFeedCacheActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("cleanupChangeFeedCache", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont2loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("cleanupChangeFeedCache", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< CleanupChangeFeedCacheActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("cleanupChangeFeedCache", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("cleanupChangeFeedCache", reinterpret_cast<unsigned long>(this), 2);

	}
															#line 9477 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	DatabaseContext* db;
															#line 51174 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via cleanupChangeFeedCache()
															#line 9477 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class CleanupChangeFeedCacheActor final : public Actor<Void>, public ActorCallback< CleanupChangeFeedCacheActor, 0, Void >, public ActorCallback< CleanupChangeFeedCacheActor, 1, Void >, public ActorCallback< CleanupChangeFeedCacheActor, 2, Void >, public FastAllocated<CleanupChangeFeedCacheActor>, public CleanupChangeFeedCacheActorState<CleanupChangeFeedCacheActor> {
															#line 51179 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<CleanupChangeFeedCacheActor>::operator new;
	using FastAllocated<CleanupChangeFeedCacheActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< CleanupChangeFeedCacheActor, 0, Void >;
friend struct ActorCallback< CleanupChangeFeedCacheActor, 1, Void >;
friend struct ActorCallback< CleanupChangeFeedCacheActor, 2, Void >;
															#line 9477 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	CleanupChangeFeedCacheActor(DatabaseContext* const& db) 
															#line 51192 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Void>(),
		   CleanupChangeFeedCacheActorState<CleanupChangeFeedCacheActor>(db)
	{
		fdb_probe_actor_enter("cleanupChangeFeedCache", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("cleanupChangeFeedCache");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("cleanupChangeFeedCache", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< CleanupChangeFeedCacheActor, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< CleanupChangeFeedCacheActor, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< CleanupChangeFeedCacheActor, 2, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 9477 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<Void> cleanupChangeFeedCache( DatabaseContext* const& db ) {
															#line 9477 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Void>(new CleanupChangeFeedCacheActor(db));
															#line 51222 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 9508 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

															#line 51227 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via initializeCFCache()
															#line 9509 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class InitializeCFCacheActor>
															#line 9509 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class InitializeCFCacheActorState {
															#line 51234 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 9509 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	InitializeCFCacheActorState(DatabaseContext* const& db) 
															#line 9509 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 9509 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : db(db),
															#line 9510 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   beginKey(changeFeedCacheFeedKeys.begin)
															#line 51243 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("initializeCFCache", reinterpret_cast<unsigned long>(this));

	}
	~InitializeCFCacheActorState() 
	{
		fdb_probe_actor_destroy("initializeCFCache", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 9511 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			;
															#line 51258 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~InitializeCFCacheActorState();
		static_cast<InitializeCFCacheActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 9535 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<InitializeCFCacheActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~InitializeCFCacheActorState(); static_cast<InitializeCFCacheActor*>(this)->destroy(); return 0; }
															#line 51281 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<InitializeCFCacheActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~InitializeCFCacheActorState();
		static_cast<InitializeCFCacheActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
															#line 9512 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<RangeResult> __when_expr_0 = db->storage->readRange(KeyRangeRef(beginKey, changeFeedCacheFeedKeys.end), CLIENT_KNOBS->CHANGE_FEED_CACHE_LIMIT_BYTES, CLIENT_KNOBS->CHANGE_FEED_CACHE_LIMIT_BYTES);
															#line 9512 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<InitializeCFCacheActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 51302 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
		static_cast<InitializeCFCacheActor*>(this)->actor_wait_state = 1;
															#line 9512 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< InitializeCFCacheActor, 0, RangeResult >*>(static_cast<InitializeCFCacheActor*>(this)));
															#line 51307 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1break1(int loopDepth) 
	{
		try {
			return a_body1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(RangeResult const& res,int loopDepth) 
	{
															#line 9515 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (res.size())
															#line 51329 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 9516 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			beginKey = keyAfter(res.back().key);
															#line 51333 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
		else
		{
															#line 9518 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ASSERT(!res.more);
															#line 51339 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 9520 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for( auto& kv : res ) {
															#line 9521 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ChangeFeedCacheRange cf(decodeChangeFeedCacheFeedKey(kv.key));
															#line 9522 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			Reference<ChangeFeedCacheData> data = makeReference<ChangeFeedCacheData>();
															#line 9523 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			auto val = decodeChangeFeedCacheFeedValue(kv.value);
															#line 9524 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			data->version = val.first;
															#line 9525 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			data->popped = val.second;
															#line 9526 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			data->active = false;
															#line 9527 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			data->inactiveTime = now();
															#line 9528 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			db->changeFeedCaches[cf] = data;
															#line 9529 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			db->rangeId_cacheData[cf.rangeId][cf] = data;
															#line 51361 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 9531 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!res.more)
															#line 51365 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
			return a_body1break1(loopDepth==0?0:loopDepth-1); // break
		}
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1cont1(RangeResult && res,int loopDepth) 
	{
															#line 9515 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (res.size())
															#line 51377 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 9516 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			beginKey = keyAfter(res.back().key);
															#line 51381 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
		else
		{
															#line 9518 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ASSERT(!res.more);
															#line 51387 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 9520 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for( auto& kv : res ) {
															#line 9521 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ChangeFeedCacheRange cf(decodeChangeFeedCacheFeedKey(kv.key));
															#line 9522 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			Reference<ChangeFeedCacheData> data = makeReference<ChangeFeedCacheData>();
															#line 9523 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			auto val = decodeChangeFeedCacheFeedValue(kv.value);
															#line 9524 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			data->version = val.first;
															#line 9525 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			data->popped = val.second;
															#line 9526 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			data->active = false;
															#line 9527 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			data->inactiveTime = now();
															#line 9528 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			db->changeFeedCaches[cf] = data;
															#line 9529 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			db->rangeId_cacheData[cf.rangeId][cf] = data;
															#line 51409 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 9531 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!res.more)
															#line 51413 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
			return a_body1break1(loopDepth==0?0:loopDepth-1); // break
		}
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1when1(RangeResult const& res,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(res, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(RangeResult && res,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(std::move(res), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<InitializeCFCacheActor*>(this)->actor_wait_state > 0) static_cast<InitializeCFCacheActor*>(this)->actor_wait_state = 0;
		static_cast<InitializeCFCacheActor*>(this)->ActorCallback< InitializeCFCacheActor, 0, RangeResult >::remove();

	}
	void a_callback_fire(ActorCallback< InitializeCFCacheActor, 0, RangeResult >*,RangeResult const& value) 
	{
		fdb_probe_actor_enter("initializeCFCache", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("initializeCFCache", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< InitializeCFCacheActor, 0, RangeResult >*,RangeResult && value) 
	{
		fdb_probe_actor_enter("initializeCFCache", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("initializeCFCache", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< InitializeCFCacheActor, 0, RangeResult >*,Error err) 
	{
		fdb_probe_actor_enter("initializeCFCache", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("initializeCFCache", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 9509 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	DatabaseContext* db;
															#line 9510 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Key beginKey;
															#line 51488 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via initializeCFCache()
															#line 9509 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class InitializeCFCacheActor final : public Actor<Void>, public ActorCallback< InitializeCFCacheActor, 0, RangeResult >, public FastAllocated<InitializeCFCacheActor>, public InitializeCFCacheActorState<InitializeCFCacheActor> {
															#line 51493 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<InitializeCFCacheActor>::operator new;
	using FastAllocated<InitializeCFCacheActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< InitializeCFCacheActor, 0, RangeResult >;
															#line 9509 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	InitializeCFCacheActor(DatabaseContext* const& db) 
															#line 51504 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Void>(),
		   InitializeCFCacheActorState<InitializeCFCacheActor>(db)
	{
		fdb_probe_actor_enter("initializeCFCache", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("initializeCFCache");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("initializeCFCache", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< InitializeCFCacheActor, 0, RangeResult >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 9509 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<Void> initializeCFCache( DatabaseContext* const& db ) {
															#line 9509 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Void>(new InitializeCFCacheActor(db));
															#line 51532 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 9537 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

															#line 51537 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via handleShutdown()
															#line 9538 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class HandleShutdownActor>
															#line 9538 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class HandleShutdownActorState {
															#line 51544 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 9538 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	HandleShutdownActorState(DatabaseContext* const& db) 
															#line 9538 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 9538 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : db(db)
															#line 51551 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("handleShutdown", reinterpret_cast<unsigned long>(this));

	}
	~HandleShutdownActorState() 
	{
		fdb_probe_actor_destroy("handleShutdown", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
			try {
															#line 9540 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				StrictFuture<Void> __when_expr_0 = db->storage->getError();
															#line 9540 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (static_cast<HandleShutdownActor*>(this)->actor_wait_state < 0) return a_body1Catch2(actor_cancelled(), loopDepth);
															#line 51569 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch2(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
				static_cast<HandleShutdownActor*>(this)->actor_wait_state = 1;
															#line 9540 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< HandleShutdownActor, 0, Void >*>(static_cast<HandleShutdownActor*>(this)));
															#line 51574 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				loopDepth = 0;
			}
			catch (Error& error) {
				loopDepth = a_body1Catch2(error, loopDepth);
			} catch (...) {
				loopDepth = a_body1Catch2(unknown_error(), loopDepth);
			}
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~HandleShutdownActorState();
		static_cast<HandleShutdownActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 9544 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		db->initializeChangeFeedCache = Void();
															#line 9545 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		db->storage = nullptr;
															#line 9546 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		db->changeFeedStorageCommitter = Void();
															#line 9547 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<HandleShutdownActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~HandleShutdownActorState(); static_cast<HandleShutdownActor*>(this)->destroy(); return 0; }
															#line 51609 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<HandleShutdownActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~HandleShutdownActorState();
		static_cast<HandleShutdownActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1Catch2(const Error& e,int loopDepth=0) 
	{
		try {
															#line 9542 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent("ChangeFeedCacheDiskError").error(e);
															#line 51622 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont2(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1cont2(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<HandleShutdownActor*>(this)->actor_wait_state > 0) static_cast<HandleShutdownActor*>(this)->actor_wait_state = 0;
		static_cast<HandleShutdownActor*>(this)->ActorCallback< HandleShutdownActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< HandleShutdownActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("handleShutdown", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("handleShutdown", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< HandleShutdownActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("handleShutdown", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("handleShutdown", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< HandleShutdownActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("handleShutdown", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch2(err, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("handleShutdown", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont3(int loopDepth) 
	{
		try {
			loopDepth = a_body1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
															#line 9538 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	DatabaseContext* db;
															#line 51723 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via handleShutdown()
															#line 9538 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class HandleShutdownActor final : public Actor<Void>, public ActorCallback< HandleShutdownActor, 0, Void >, public FastAllocated<HandleShutdownActor>, public HandleShutdownActorState<HandleShutdownActor> {
															#line 51728 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<HandleShutdownActor>::operator new;
	using FastAllocated<HandleShutdownActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< HandleShutdownActor, 0, Void >;
															#line 9538 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	HandleShutdownActor(DatabaseContext* const& db) 
															#line 51739 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Void>(),
		   HandleShutdownActorState<HandleShutdownActor>(db)
	{
		fdb_probe_actor_enter("handleShutdown", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("handleShutdown");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("handleShutdown", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< HandleShutdownActor, 0, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 9538 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<Void> handleShutdown( DatabaseContext* const& db ) {
															#line 9538 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Void>(new HandleShutdownActor(db));
															#line 51767 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 9549 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

void DatabaseContext::setStorage(IKeyValueStore* store) {
	if (storage != nullptr) {
		TraceEvent(SevError, "NativeClientMultipleSetStorage");
		return;
	}
	storage = store;
	commitChangeFeedStorage = makeReference<AsyncVar<bool>>(false);
	initializeChangeFeedCache = initializeCFCache(this);
	changeFeedStorageCommitter = changeFeedCommitter(storage, commitChangeFeedStorage, &uncommittedCFBytes) &&
	                             cleanupChangeFeedCache(this) && handleShutdown(this);
}

Reference<ChangeFeedStorageData> DatabaseContext::getStorageData(StorageServerInterface interf) {
	// use token from interface since that changes on SS restart
	UID token = interf.waitFailure.getEndpoint().token;
	auto it = changeFeedUpdaters.find(token);
	if (it == changeFeedUpdaters.end()) {
		Reference<ChangeFeedStorageData> newStorageUpdater = makeReference<ChangeFeedStorageData>();
		newStorageUpdater->id = interf.id();
		newStorageUpdater->interfToken = token;
		newStorageUpdater->updater = storageFeedVersionUpdater(interf, newStorageUpdater.getPtr());
		newStorageUpdater->context = this;
		newStorageUpdater->created = now();
		changeFeedUpdaters[token] = newStorageUpdater.getPtr();
		return newStorageUpdater;
	}
	return Reference<ChangeFeedStorageData>::addRef(it->second);
}

Version DatabaseContext::getMinimumChangeFeedVersion() {
	Version minVersion = std::numeric_limits<Version>::max();
	for (auto& it : changeFeedUpdaters) {
		if (now() - it.second->created > CLIENT_KNOBS->CHANGE_FEED_START_INTERVAL) {
			minVersion = std::min(minVersion, it.second->version.get());
		}
	}
	for (auto& it : notAtLatestChangeFeeds) {
		if (now() - it.second->created > CLIENT_KNOBS->CHANGE_FEED_START_INTERVAL) {
			minVersion = std::min(minVersion, it.second->getVersion());
		}
	}
	return minVersion;
}

void DatabaseContext::setDesiredChangeFeedVersion(Version v) {
	for (auto& it : changeFeedUpdaters) {
		if (it.second->version.get() < v && it.second->desired.get() < v) {
			it.second->desired.set(v);
		}
	}
}

// Because two storage servers, depending on the shard map, can have different representations of a clear at the same
// version depending on their shard maps at the time of the mutation, it is non-trivial to directly compare change feed
// streams. Instead we compare the presence of data at each version. This both saves on cpu cost of validation, and
// because historically most change feed corruption bugs are the absence of entire versions, not a subset of mutations
// within a version.
struct ChangeFeedTSSValidationData {
	PromiseStream<Version> ssStreamSummary;
	ReplyPromiseStream<ChangeFeedStreamReply> tssStream;
	Future<Void> validatorFuture;
	std::deque<std::pair<Version, Version>> rollbacks;
	Version popVersion = invalidVersion;
	bool done = false;

	ChangeFeedTSSValidationData() {}
	ChangeFeedTSSValidationData(ReplyPromiseStream<ChangeFeedStreamReply> tssStream) : tssStream(tssStream) {}

	void updatePopped(Version newPopVersion) { popVersion = std::max(popVersion, newPopVersion); }

	bool checkRollback(const MutationsAndVersionRef& m) {
		if (m.mutations.size() == 1 && m.mutations.back().param1 == lastEpochEndPrivateKey) {
			if (rollbacks.empty() || rollbacks.back().second < m.version) {
				Version rollbackVersion;
				BinaryReader br(m.mutations.back().param2, Unversioned());
				br >> rollbackVersion;
				if (!rollbacks.empty()) {
					ASSERT(rollbacks.back().second <= rollbackVersion);
				}
				rollbacks.push_back({ rollbackVersion, m.version });
			}
			return true;
		} else {
			return false;
		}
	}

	bool shouldAddMutation(const MutationsAndVersionRef& m) {
		return !done && !m.mutations.empty() && !checkRollback(m);
	}

	bool isRolledBack(Version v) {
		if (rollbacks.empty()) {
			return false;
		}
		for (int i = 0; i < rollbacks.size(); i++) {
			if (v <= rollbacks[i].first) {
				return false;
			}
			if (v < rollbacks[i].second) {
				return true;
			}
		}
		return false;
	}

	void send(const ChangeFeedStreamReply& ssReply) {
		if (done) {
			return;
		}
		updatePopped(ssReply.popVersion);
		for (auto& it : ssReply.mutations) {
			if (shouldAddMutation(it)) {
				ssStreamSummary.send(it.version);
			}
		}
	}

	void complete() {
		done = true;
		// destroy TSS stream to stop server actor
		tssStream.reset();
	}
};

void handleTSSChangeFeedMismatch(const ChangeFeedStreamRequest& request,
                                 const TSSEndpointData& tssData,
                                 int64_t matchesFound,
                                 Version lastMatchingVersion,
                                 Version ssVersion,
                                 Version tssVersion,
                                 Version popVersion) {
	if (request.canReadPopped) {
		// There is a known issue where this can return different data between an SS and TSS when a feed was popped but
		// the SS restarted before the pop could be persisted, for reads that can read popped data. As such, only count
		// this as a mismatch when !req.canReadPopped
		return;
	}
	CODE_PROBE(true, "TSS mismatch in stream comparison");

	if (tssData.metrics->shouldRecordDetailedMismatch()) {
		TraceEvent mismatchEvent(
		    (g_network->isSimulated() && g_simulator->tssMode == ISimulator::TSSMode::EnabledDropMutations)
		        ? SevWarnAlways
		        : SevError,
		    "TSSMismatchChangeFeedStream");
		mismatchEvent.setMaxEventLength(FLOW_KNOBS->TSS_LARGE_TRACE_SIZE);

		// request info
		mismatchEvent.detail("TSSID", tssData.tssId);
		mismatchEvent.detail("FeedID", request.rangeID);
		mismatchEvent.detail("BeginVersion", request.begin);
		mismatchEvent.detail("EndVersion", request.end);
		mismatchEvent.detail("StartKey", request.range.begin);
		mismatchEvent.detail("EndKey", request.range.end);
		mismatchEvent.detail("CanReadPopped", request.canReadPopped);
		mismatchEvent.detail("PopVersion", popVersion);
		mismatchEvent.detail("DebugUID", request.id);

		// mismatch info
		mismatchEvent.detail("MatchesFound", matchesFound);
		mismatchEvent.detail("LastMatchingVersion", lastMatchingVersion);
		mismatchEvent.detail("SSVersion", ssVersion);
		mismatchEvent.detail("TSSVersion", tssVersion);

		CODE_PROBE(FLOW_KNOBS->LOAD_BALANCE_TSS_MISMATCH_TRACE_FULL,
		           "Tracing Full TSS Feed Mismatch in stream comparison",
		           probe::decoration::rare);
		CODE_PROBE(!FLOW_KNOBS->LOAD_BALANCE_TSS_MISMATCH_TRACE_FULL,
		           "Tracing Partial TSS Feed Mismatch in stream comparison and storing the rest in FDB");

		if (!FLOW_KNOBS->LOAD_BALANCE_TSS_MISMATCH_TRACE_FULL) {
			mismatchEvent.disable();
			UID mismatchUID = deterministicRandom()->randomUniqueID();
			tssData.metrics->recordDetailedMismatchData(mismatchUID, mismatchEvent.getFields().toString());

			// record a summarized trace event instead
			TraceEvent summaryEvent(
			    (g_network->isSimulated() && g_simulator->tssMode == ISimulator::TSSMode::EnabledDropMutations)
			        ? SevWarnAlways
			        : SevError,
			    "TSSMismatchChangeFeedStream");
			summaryEvent.detail("TSSID", tssData.tssId)
			    .detail("MismatchId", mismatchUID)
			    .detail("FeedDebugUID", request.id);
		}
	}
}

															#line 51961 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via changeFeedTSSValidator()
															#line 9739 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class ChangeFeedTSSValidatorActor>
															#line 9739 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class ChangeFeedTSSValidatorActorState {
															#line 51968 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 9739 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	ChangeFeedTSSValidatorActorState(ChangeFeedStreamRequest const& req,Optional<ChangeFeedTSSValidationData>* const& data,TSSEndpointData const& tssData) 
															#line 9739 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 9739 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : req(req),
															#line 9739 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   data(data),
															#line 9739 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   tssData(tssData),
															#line 9742 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   ssDone(false),
															#line 9743 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   tssDone(false),
															#line 9744 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   ssSummary(),
															#line 9745 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   tssSummary()
															#line 51987 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("changeFeedTSSValidator", reinterpret_cast<unsigned long>(this));

	}
	~ChangeFeedTSSValidatorActorState() 
	{
		fdb_probe_actor_destroy("changeFeedTSSValidator", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 9747 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ASSERT(data->present());
															#line 9748 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			matchesFound = 0;
															#line 9749 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			lastMatchingVersion = req.begin - 1;
															#line 9751 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			;
															#line 52008 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~ChangeFeedTSSValidatorActorState();
		static_cast<ChangeFeedTSSValidatorActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
															#line 9753 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!ssDone && ssSummary.empty())
															#line 52038 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
			try {
															#line 9755 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				FutureStream<Version> __when_expr_0 = data->get().ssStreamSummary.getFuture();
															#line 9755 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (static_cast<ChangeFeedTSSValidatorActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 52045 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1loopBody1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1loopBody1when1(__when_expr_0.pop(), loopDepth); };
				static_cast<ChangeFeedTSSValidatorActor*>(this)->actor_wait_state = 1;
															#line 9755 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				__when_expr_0.addCallbackAndClear(static_cast<ActorSingleCallback< ChangeFeedTSSValidatorActor, 0, Version >*>(static_cast<ChangeFeedTSSValidatorActor*>(this)));
															#line 52050 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				loopDepth = 0;
			}
			catch (Error& error) {
				loopDepth = a_body1loopBody1Catch1(error, loopDepth);
			} catch (...) {
				loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
			}
		}
		else
		{
			loopDepth = a_body1loopBody1cont1(loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
															#line 9776 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!tssDone && tssSummary.empty())
															#line 52070 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
			try {
															#line 9779 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				FutureStream<ChangeFeedStreamReply> __when_expr_1 = data->get().tssStream.getFuture();
															#line 9778 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (static_cast<ChangeFeedTSSValidatorActor*>(this)->actor_wait_state < 0) return a_body1loopBody1cont1Catch1(actor_cancelled(), loopDepth);
															#line 52077 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1cont1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont1when1(__when_expr_1.pop(), loopDepth); };
															#line 9788 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				StrictFuture<Void> __when_expr_2 = (ssDone || !ssSummary.empty()) ? delay(2.0 * FLOW_KNOBS->LOAD_BALANCE_TSS_TIMEOUT) : Never();
															#line 52081 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1loopBody1cont1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1loopBody1cont1when2(__when_expr_2.get(), loopDepth); };
				static_cast<ChangeFeedTSSValidatorActor*>(this)->actor_wait_state = 2;
															#line 9779 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				__when_expr_1.addCallbackAndClear(static_cast<ActorSingleCallback< ChangeFeedTSSValidatorActor, 1, ChangeFeedStreamReply >*>(static_cast<ChangeFeedTSSValidatorActor*>(this)));
															#line 9788 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< ChangeFeedTSSValidatorActor, 2, Void >*>(static_cast<ChangeFeedTSSValidatorActor*>(this)));
															#line 52088 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				loopDepth = 0;
			}
			catch (Error& error) {
				loopDepth = a_body1loopBody1cont1Catch1(error, loopDepth);
			} catch (...) {
				loopDepth = a_body1loopBody1cont1Catch1(unknown_error(), loopDepth);
			}
		}
		else
		{
			loopDepth = a_body1loopBody1cont6(loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 9758 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (e.code() == error_code_actor_cancelled)
															#line 52115 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 9759 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				return a_body1Catch1(e, std::max(0, loopDepth - 1));
															#line 52119 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 9761 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (e.code() != error_code_end_of_stream)
															#line 52123 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 9762 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				data->get().complete();
															#line 9763 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (e.code() != error_code_operation_cancelled)
															#line 52129 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 9764 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					tssData.metrics->ssError(e.code());
															#line 52133 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
															#line 9766 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				return a_body1Catch1(e, std::max(0, loopDepth - 1));
															#line 52137 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 9768 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ssDone = true;
															#line 9769 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (tssDone)
															#line 52143 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 9770 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				data->get().complete();
															#line 9771 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (!static_cast<ChangeFeedTSSValidatorActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~ChangeFeedTSSValidatorActorState(); static_cast<ChangeFeedTSSValidatorActor*>(this)->destroy(); return 0; }
															#line 52149 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				new (&static_cast<ChangeFeedTSSValidatorActor*>(this)->SAV< Void >::value()) Void(Void());
				this->~ChangeFeedTSSValidatorActorState();
				static_cast<ChangeFeedTSSValidatorActor*>(this)->finishSendAndDelPromiseRef();
				return 0;
			}
			loopDepth = a_body1loopBody1cont2(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont3(Version const& next,int loopDepth) 
	{
															#line 9756 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ssSummary.push_back(next);
															#line 52169 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont5(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont3(Version && next,int loopDepth) 
	{
															#line 9756 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ssSummary.push_back(next);
															#line 52178 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont5(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Version const& next,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3(next, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Version && next,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3(std::move(next), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<ChangeFeedTSSValidatorActor*>(this)->actor_wait_state > 0) static_cast<ChangeFeedTSSValidatorActor*>(this)->actor_wait_state = 0;
		static_cast<ChangeFeedTSSValidatorActor*>(this)->ActorSingleCallback< ChangeFeedTSSValidatorActor, 0, Version >::remove();

	}
	void a_callback_fire(ActorSingleCallback< ChangeFeedTSSValidatorActor, 0, Version >*,Version const& value) 
	{
		fdb_probe_actor_enter("changeFeedTSSValidator", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeFeedTSSValidator", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorSingleCallback< ChangeFeedTSSValidatorActor, 0, Version >*,Version && value) 
	{
		fdb_probe_actor_enter("changeFeedTSSValidator", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeFeedTSSValidator", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorSingleCallback< ChangeFeedTSSValidatorActor, 0, Version >*,Error err) 
	{
		fdb_probe_actor_enter("changeFeedTSSValidator", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeFeedTSSValidator", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1cont5(int loopDepth) 
	{
		try {
			loopDepth = a_body1loopBody1cont2(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont6(int loopDepth) 
	{
															#line 9815 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for(;!ssSummary.empty() && (ssSummary.front() < data->get().popVersion || data->get().isRolledBack(ssSummary.front()));) {
															#line 9817 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ssSummary.pop_front();
															#line 52265 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 9820 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for(;!tssSummary.empty() && (tssSummary.front() < data->get().popVersion || data->get().isRolledBack(tssSummary.front()));) {
															#line 9822 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tssSummary.pop_front();
															#line 52271 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 9824 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for(;!ssSummary.empty() && !tssSummary.empty();) {
															#line 9825 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			CODE_PROBE(true, "Comparing TSS change feed data");
															#line 9826 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (ssSummary.front() != tssSummary.front())
															#line 52279 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 9827 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				CODE_PROBE(true, "TSS change feed mismatch");
															#line 9828 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				handleTSSChangeFeedMismatch(req, tssData, matchesFound, lastMatchingVersion, ssSummary.front(), tssSummary.front(), data->get().popVersion);
															#line 9835 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				data->get().complete();
															#line 9836 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (!static_cast<ChangeFeedTSSValidatorActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~ChangeFeedTSSValidatorActorState(); static_cast<ChangeFeedTSSValidatorActor*>(this)->destroy(); return 0; }
															#line 52289 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				new (&static_cast<ChangeFeedTSSValidatorActor*>(this)->SAV< Void >::value()) Void(Void());
				this->~ChangeFeedTSSValidatorActorState();
				static_cast<ChangeFeedTSSValidatorActor*>(this)->finishSendAndDelPromiseRef();
				return 0;
			}
															#line 9838 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			matchesFound++;
															#line 9839 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			lastMatchingVersion = ssSummary.front();
															#line 9840 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ssSummary.pop_front();
															#line 9841 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tssSummary.pop_front();
															#line 9843 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			for(;!data->get().rollbacks.empty() && data->get().rollbacks.front().second <= lastMatchingVersion;) {
															#line 9844 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				data->get().rollbacks.pop_front();
															#line 52307 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
		}
															#line 9848 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(!ssDone || !tssDone);
															#line 9849 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if ((ssDone && !tssSummary.empty()) || (tssDone && !ssSummary.empty()))
															#line 52314 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 9850 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			CODE_PROBE(true, "TSS change feed mismatch at end of stream");
															#line 9851 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			handleTSSChangeFeedMismatch(req, tssData, matchesFound, lastMatchingVersion, ssDone ? -1 : ssSummary.front(), tssDone ? -1 : tssSummary.front(), data->get().popVersion);
															#line 9858 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			data->get().complete();
															#line 9859 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<ChangeFeedTSSValidatorActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~ChangeFeedTSSValidatorActorState(); static_cast<ChangeFeedTSSValidatorActor*>(this)->destroy(); return 0; }
															#line 52324 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<ChangeFeedTSSValidatorActor*>(this)->SAV< Void >::value()) Void(Void());
			this->~ChangeFeedTSSValidatorActorState();
			static_cast<ChangeFeedTSSValidatorActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1cont7(int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont6(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 9797 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (e.code() == error_code_operation_cancelled)
															#line 52345 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 9798 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				return a_body1Catch1(e, std::max(0, loopDepth - 1));
															#line 52349 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 9800 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (e.code() == error_code_end_of_stream)
															#line 52353 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 9801 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				tssDone = true;
															#line 9802 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (ssDone)
															#line 52359 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 9803 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					data->get().complete();
															#line 9804 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					if (!static_cast<ChangeFeedTSSValidatorActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~ChangeFeedTSSValidatorActorState(); static_cast<ChangeFeedTSSValidatorActor*>(this)->destroy(); return 0; }
															#line 52365 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					new (&static_cast<ChangeFeedTSSValidatorActor*>(this)->SAV< Void >::value()) Void(Void());
					this->~ChangeFeedTSSValidatorActorState();
					static_cast<ChangeFeedTSSValidatorActor*>(this)->finishSendAndDelPromiseRef();
					return 0;
				}
			}
			else
			{
															#line 9807 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				tssData.metrics->tssError(e.code());
															#line 9808 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				data->get().complete();
															#line 9809 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (!static_cast<ChangeFeedTSSValidatorActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~ChangeFeedTSSValidatorActorState(); static_cast<ChangeFeedTSSValidatorActor*>(this)->destroy(); return 0; }
															#line 52380 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				new (&static_cast<ChangeFeedTSSValidatorActor*>(this)->SAV< Void >::value()) Void(Void());
				this->~ChangeFeedTSSValidatorActorState();
				static_cast<ChangeFeedTSSValidatorActor*>(this)->finishSendAndDelPromiseRef();
				return 0;
			}
			loopDepth = a_body1loopBody1cont7(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont8(int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont9(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1when1(ChangeFeedStreamReply const& nextTss,int loopDepth) 
	{
															#line 9780 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		data->get().updatePopped(nextTss.popVersion);
															#line 9781 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for( auto& it : nextTss.mutations ) {
															#line 9782 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (data->get().shouldAddMutation(it))
															#line 52410 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 9783 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				tssSummary.push_back(it.version);
															#line 52414 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
		}
		loopDepth = a_body1loopBody1cont8(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1when1(ChangeFeedStreamReply && nextTss,int loopDepth) 
	{
															#line 9780 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		data->get().updatePopped(nextTss.popVersion);
															#line 9781 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for( auto& it : nextTss.mutations ) {
															#line 9782 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (data->get().shouldAddMutation(it))
															#line 52429 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 9783 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				tssSummary.push_back(it.version);
															#line 52433 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
		}
		loopDepth = a_body1loopBody1cont8(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1when2(Void const& _,int loopDepth) 
	{
															#line 9790 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		++tssData.metrics->tssTimeouts;
															#line 9791 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		data->get().complete();
															#line 9792 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<ChangeFeedTSSValidatorActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~ChangeFeedTSSValidatorActorState(); static_cast<ChangeFeedTSSValidatorActor*>(this)->destroy(); return 0; }
															#line 52448 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<ChangeFeedTSSValidatorActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~ChangeFeedTSSValidatorActorState();
		static_cast<ChangeFeedTSSValidatorActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1cont1when2(Void && _,int loopDepth) 
	{
															#line 9790 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		++tssData.metrics->tssTimeouts;
															#line 9791 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		data->get().complete();
															#line 9792 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<ChangeFeedTSSValidatorActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~ChangeFeedTSSValidatorActorState(); static_cast<ChangeFeedTSSValidatorActor*>(this)->destroy(); return 0; }
															#line 52464 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<ChangeFeedTSSValidatorActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~ChangeFeedTSSValidatorActorState();
		static_cast<ChangeFeedTSSValidatorActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<ChangeFeedTSSValidatorActor*>(this)->actor_wait_state > 0) static_cast<ChangeFeedTSSValidatorActor*>(this)->actor_wait_state = 0;
		static_cast<ChangeFeedTSSValidatorActor*>(this)->ActorSingleCallback< ChangeFeedTSSValidatorActor, 1, ChangeFeedStreamReply >::remove();
		static_cast<ChangeFeedTSSValidatorActor*>(this)->ActorCallback< ChangeFeedTSSValidatorActor, 2, Void >::remove();

	}
	void a_callback_fire(ActorSingleCallback< ChangeFeedTSSValidatorActor, 1, ChangeFeedStreamReply >*,ChangeFeedStreamReply const& value) 
	{
		fdb_probe_actor_enter("changeFeedTSSValidator", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeFeedTSSValidator", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorSingleCallback< ChangeFeedTSSValidatorActor, 1, ChangeFeedStreamReply >*,ChangeFeedStreamReply && value) 
	{
		fdb_probe_actor_enter("changeFeedTSSValidator", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeFeedTSSValidator", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorSingleCallback< ChangeFeedTSSValidatorActor, 1, ChangeFeedStreamReply >*,Error err) 
	{
		fdb_probe_actor_enter("changeFeedTSSValidator", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeFeedTSSValidator", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< ChangeFeedTSSValidatorActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("changeFeedTSSValidator", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose2();
		try {
			a_body1loopBody1cont1when2(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeFeedTSSValidator", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< ChangeFeedTSSValidatorActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("changeFeedTSSValidator", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose2();
		try {
			a_body1loopBody1cont1when2(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeFeedTSSValidator", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< ChangeFeedTSSValidatorActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("changeFeedTSSValidator", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose2();
		try {
			a_body1loopBody1cont1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1cont1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1cont1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeFeedTSSValidator", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1loopBody1cont9(int loopDepth) 
	{
		try {
			loopDepth = a_body1loopBody1cont7(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
															#line 9739 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	ChangeFeedStreamRequest req;
															#line 9739 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Optional<ChangeFeedTSSValidationData>* data;
															#line 9739 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	TSSEndpointData tssData;
															#line 9742 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	bool ssDone;
															#line 9743 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	bool tssDone;
															#line 9744 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	std::deque<Version> ssSummary;
															#line 9745 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	std::deque<Version> tssSummary;
															#line 9748 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	int64_t matchesFound;
															#line 9749 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Version lastMatchingVersion;
															#line 52600 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via changeFeedTSSValidator()
															#line 9739 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class ChangeFeedTSSValidatorActor final : public Actor<Void>, public ActorSingleCallback< ChangeFeedTSSValidatorActor, 0, Version >, public ActorSingleCallback< ChangeFeedTSSValidatorActor, 1, ChangeFeedStreamReply >, public ActorCallback< ChangeFeedTSSValidatorActor, 2, Void >, public FastAllocated<ChangeFeedTSSValidatorActor>, public ChangeFeedTSSValidatorActorState<ChangeFeedTSSValidatorActor> {
															#line 52605 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<ChangeFeedTSSValidatorActor>::operator new;
	using FastAllocated<ChangeFeedTSSValidatorActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorSingleCallback< ChangeFeedTSSValidatorActor, 0, Version >;
friend struct ActorSingleCallback< ChangeFeedTSSValidatorActor, 1, ChangeFeedStreamReply >;
friend struct ActorCallback< ChangeFeedTSSValidatorActor, 2, Void >;
															#line 9739 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	ChangeFeedTSSValidatorActor(ChangeFeedStreamRequest const& req,Optional<ChangeFeedTSSValidationData>* const& data,TSSEndpointData const& tssData) 
															#line 52618 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Void>(),
		   ChangeFeedTSSValidatorActorState<ChangeFeedTSSValidatorActor>(req, data, tssData)
	{
		fdb_probe_actor_enter("changeFeedTSSValidator", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("changeFeedTSSValidator");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("changeFeedTSSValidator", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorSingleCallback< ChangeFeedTSSValidatorActor, 0, Version >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorSingleCallback< ChangeFeedTSSValidatorActor, 1, ChangeFeedStreamReply >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 9739 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<Void> changeFeedTSSValidator( ChangeFeedStreamRequest const& req, Optional<ChangeFeedTSSValidationData>* const& data, TSSEndpointData const& tssData ) {
															#line 9739 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Void>(new ChangeFeedTSSValidatorActor(req, data, tssData));
															#line 52647 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 9863 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

void maybeDuplicateTSSChangeFeedStream(ChangeFeedStreamRequest& req,
                                       const RequestStream<ChangeFeedStreamRequest>& stream,
                                       QueueModel* model,
                                       Optional<ChangeFeedTSSValidationData>* tssData) {
	if (model) {
		Optional<TSSEndpointData> tssPair = model->getTssData(stream.getEndpoint().token.first());
		if (tssPair.present()) {
			CODE_PROBE(true, "duplicating feed stream to TSS");
			resetReply(req);

			RequestStream<ChangeFeedStreamRequest> tssRequestStream(tssPair.get().endpoint);
			*tssData = Optional<ChangeFeedTSSValidationData>(
			    ChangeFeedTSSValidationData(tssRequestStream.getReplyStream(req)));
			// tie validator actor to the lifetime of the stream being active
			tssData->get().validatorFuture = changeFeedTSSValidator(req, tssData, tssPair.get());
		}
	}
}

ChangeFeedStorageData::~ChangeFeedStorageData() {
	if (context) {
		context->changeFeedUpdaters.erase(interfToken);
	}
}

ChangeFeedData::ChangeFeedData(DatabaseContext* context)
  : dbgid(deterministicRandom()->randomUniqueID()), context(context), notAtLatest(1), created(now()) {
	if (context) {
		context->notAtLatestChangeFeeds[dbgid] = this;
	}
}
ChangeFeedData::~ChangeFeedData() {
	if (context) {
		context->notAtLatestChangeFeeds.erase(dbgid);
	}
}

Version ChangeFeedData::getVersion() {
	return lastReturnedVersion.get();
}

// This function is essentially bubbling the information about what has been processed from the server through the
// change feed client. First it makes sure the server has returned all mutations up through the target version, the
// native api has consumed and processed, them, and then the fdb client has consumed all of the mutations.
															#line 52696 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via changeFeedWaitLatest()
															#line 9908 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class ChangeFeedWaitLatestActor>
															#line 9908 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class ChangeFeedWaitLatestActorState {
															#line 52703 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 9908 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	ChangeFeedWaitLatestActorState(Reference<ChangeFeedData> const& self,Version const& version) 
															#line 9908 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 9908 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : self(self),
															#line 9908 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   version(version)
															#line 52712 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("changeFeedWaitLatest", reinterpret_cast<unsigned long>(this));

	}
	~ChangeFeedWaitLatestActorState() 
	{
		fdb_probe_actor_destroy("changeFeedWaitLatest", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 9910 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			std::vector<Future<Void>> allAtLeast;
															#line 9911 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			for( auto& it : self->storageData ) {
															#line 9912 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (it->version.get() < version)
															#line 52731 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 9913 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					if (version > it->desired.get())
															#line 52735 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					{
															#line 9914 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
						it->desired.set(version);
															#line 52739 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					}
															#line 9916 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					allAtLeast.push_back(it->version.whenAtLeast(version));
															#line 52743 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
			}
															#line 9920 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_0 = waitForAll(allAtLeast);
															#line 9920 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<ChangeFeedWaitLatestActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 52750 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<ChangeFeedWaitLatestActor*>(this)->actor_wait_state = 1;
															#line 9920 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< ChangeFeedWaitLatestActor, 0, Void >*>(static_cast<ChangeFeedWaitLatestActor*>(this)));
															#line 52755 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~ChangeFeedWaitLatestActorState();
		static_cast<ChangeFeedWaitLatestActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void const& _,int loopDepth) 
	{
															#line 9923 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		std::vector<Future<Void>> onEmpty;
															#line 9924 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for( auto& it : self->streams ) {
															#line 9925 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!it.isEmpty())
															#line 52782 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 9926 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				onEmpty.push_back(it.onEmpty());
															#line 52786 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
		}
															#line 9930 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (onEmpty.size())
															#line 52791 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 9931 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_1 = waitForAll(onEmpty);
															#line 9931 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<ChangeFeedWaitLatestActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 52797 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
			static_cast<ChangeFeedWaitLatestActor*>(this)->actor_wait_state = 2;
															#line 9931 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< ChangeFeedWaitLatestActor, 1, Void >*>(static_cast<ChangeFeedWaitLatestActor*>(this)));
															#line 52802 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1cont5(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont1(Void && _,int loopDepth) 
	{
															#line 9923 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		std::vector<Future<Void>> onEmpty;
															#line 9924 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for( auto& it : self->streams ) {
															#line 9925 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!it.isEmpty())
															#line 52820 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 9926 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				onEmpty.push_back(it.onEmpty());
															#line 52824 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
		}
															#line 9930 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (onEmpty.size())
															#line 52829 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 9931 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_1 = waitForAll(onEmpty);
															#line 9931 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<ChangeFeedWaitLatestActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 52835 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
			static_cast<ChangeFeedWaitLatestActor*>(this)->actor_wait_state = 2;
															#line 9931 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< ChangeFeedWaitLatestActor, 1, Void >*>(static_cast<ChangeFeedWaitLatestActor*>(this)));
															#line 52840 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1cont5(loopDepth);
		}

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<ChangeFeedWaitLatestActor*>(this)->actor_wait_state > 0) static_cast<ChangeFeedWaitLatestActor*>(this)->actor_wait_state = 0;
		static_cast<ChangeFeedWaitLatestActor*>(this)->ActorCallback< ChangeFeedWaitLatestActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< ChangeFeedWaitLatestActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("changeFeedWaitLatest", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeFeedWaitLatest", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< ChangeFeedWaitLatestActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("changeFeedWaitLatest", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeFeedWaitLatest", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< ChangeFeedWaitLatestActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("changeFeedWaitLatest", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeFeedWaitLatest", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont5(int loopDepth) 
	{
															#line 9934 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (self->mutations.isEmpty())
															#line 52917 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 9935 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_2 = delay(0);
															#line 9935 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<ChangeFeedWaitLatestActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 52923 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont5when1(__when_expr_2.get(), loopDepth); };
			static_cast<ChangeFeedWaitLatestActor*>(this)->actor_wait_state = 3;
															#line 9935 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< ChangeFeedWaitLatestActor, 2, Void >*>(static_cast<ChangeFeedWaitLatestActor*>(this)));
															#line 52928 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1cont9(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont8(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont5(loopDepth);

		return loopDepth;
	}
	int a_body1cont8(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont5(loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont8(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont8(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<ChangeFeedWaitLatestActor*>(this)->actor_wait_state > 0) static_cast<ChangeFeedWaitLatestActor*>(this)->actor_wait_state = 0;
		static_cast<ChangeFeedWaitLatestActor*>(this)->ActorCallback< ChangeFeedWaitLatestActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< ChangeFeedWaitLatestActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("changeFeedWaitLatest", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeFeedWaitLatest", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< ChangeFeedWaitLatestActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("changeFeedWaitLatest", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeFeedWaitLatest", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< ChangeFeedWaitLatestActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("changeFeedWaitLatest", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeFeedWaitLatest", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont9(int loopDepth) 
	{
															#line 9940 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		;
															#line 53017 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont9loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1cont10(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont9(loopDepth);

		return loopDepth;
	}
	int a_body1cont10(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont9(loopDepth);

		return loopDepth;
	}
	int a_body1cont5when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont10(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont5when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont10(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<ChangeFeedWaitLatestActor*>(this)->actor_wait_state > 0) static_cast<ChangeFeedWaitLatestActor*>(this)->actor_wait_state = 0;
		static_cast<ChangeFeedWaitLatestActor*>(this)->ActorCallback< ChangeFeedWaitLatestActor, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< ChangeFeedWaitLatestActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("changeFeedWaitLatest", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont5when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeFeedWaitLatest", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< ChangeFeedWaitLatestActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("changeFeedWaitLatest", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont5when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeFeedWaitLatest", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< ChangeFeedWaitLatestActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("changeFeedWaitLatest", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeFeedWaitLatest", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1cont11(int loopDepth) 
	{
															#line 9946 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (self->maxSeenVersion >= version)
															#line 53101 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 9949 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_4 = self->lastReturnedVersion.whenAtLeast(version);
															#line 9949 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<ChangeFeedWaitLatestActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 53107 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1Catch1(__when_expr_4.getError(), loopDepth); else return a_body1cont11when1(__when_expr_4.get(), loopDepth); };
			static_cast<ChangeFeedWaitLatestActor*>(this)->actor_wait_state = 5;
															#line 9949 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< ChangeFeedWaitLatestActor, 4, Void >*>(static_cast<ChangeFeedWaitLatestActor*>(this)));
															#line 53112 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
															#line 9952 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			;
															#line 53119 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1cont11loopHead1(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont9loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1cont9loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1cont9loopBody1(int loopDepth) 
	{
															#line 9940 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!(self->lastReturnedVersion.get() < self->maxSeenVersion && self->lastReturnedVersion.get() < version))
															#line 53136 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
			return a_body1cont9break1(loopDepth==0?0:loopDepth-1); // break
		}
															#line 9941 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		Version target = std::min(self->maxSeenVersion, version);
															#line 9942 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_3 = self->lastReturnedVersion.whenAtLeast(target);
															#line 9942 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<ChangeFeedWaitLatestActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 53146 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch1(__when_expr_3.getError(), std::max(0, loopDepth - 1)); else return a_body1cont9loopBody1when1(__when_expr_3.get(), loopDepth); };
		static_cast<ChangeFeedWaitLatestActor*>(this)->actor_wait_state = 4;
															#line 9942 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< ChangeFeedWaitLatestActor, 3, Void >*>(static_cast<ChangeFeedWaitLatestActor*>(this)));
															#line 53151 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont9break1(int loopDepth) 
	{
		try {
			return a_body1cont11(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont9loopBody1cont1(Void const& _,int loopDepth) 
	{
		if (loopDepth == 0) return a_body1cont9loopHead1(0);

		return loopDepth;
	}
	int a_body1cont9loopBody1cont1(Void && _,int loopDepth) 
	{
		if (loopDepth == 0) return a_body1cont9loopHead1(0);

		return loopDepth;
	}
	int a_body1cont9loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont9loopBody1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont9loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont9loopBody1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<ChangeFeedWaitLatestActor*>(this)->actor_wait_state > 0) static_cast<ChangeFeedWaitLatestActor*>(this)->actor_wait_state = 0;
		static_cast<ChangeFeedWaitLatestActor*>(this)->ActorCallback< ChangeFeedWaitLatestActor, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< ChangeFeedWaitLatestActor, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("changeFeedWaitLatest", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont9loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeFeedWaitLatest", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< ChangeFeedWaitLatestActor, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("changeFeedWaitLatest", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont9loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeFeedWaitLatest", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< ChangeFeedWaitLatestActor, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("changeFeedWaitLatest", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeFeedWaitLatest", reinterpret_cast<unsigned long>(this), 3);

	}
	int a_body1cont11cont1(int loopDepth) 
	{
															#line 9958 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<ChangeFeedWaitLatestActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~ChangeFeedWaitLatestActorState(); static_cast<ChangeFeedWaitLatestActor*>(this)->destroy(); return 0; }
															#line 53248 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<ChangeFeedWaitLatestActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~ChangeFeedWaitLatestActorState();
		static_cast<ChangeFeedWaitLatestActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont11cont2(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont11cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont11cont2(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont11cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont11when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont11cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont11when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont11cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose5() 
	{
		if (static_cast<ChangeFeedWaitLatestActor*>(this)->actor_wait_state > 0) static_cast<ChangeFeedWaitLatestActor*>(this)->actor_wait_state = 0;
		static_cast<ChangeFeedWaitLatestActor*>(this)->ActorCallback< ChangeFeedWaitLatestActor, 4, Void >::remove();

	}
	void a_callback_fire(ActorCallback< ChangeFeedWaitLatestActor, 4, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("changeFeedWaitLatest", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont11when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeFeedWaitLatest", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_fire(ActorCallback< ChangeFeedWaitLatestActor, 4, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("changeFeedWaitLatest", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont11when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeFeedWaitLatest", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_error(ActorCallback< ChangeFeedWaitLatestActor, 4, Void >*,Error err) 
	{
		fdb_probe_actor_enter("changeFeedWaitLatest", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeFeedWaitLatest", reinterpret_cast<unsigned long>(this), 4);

	}
	int a_body1cont11cont3(int loopDepth) 
	{
		loopDepth = a_body1cont11cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont11loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1cont11loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1cont11loopBody1(int loopDepth) 
	{
															#line 9952 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!(!self->mutations.isEmpty()))
															#line 53348 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
			return a_body1cont11break1(loopDepth==0?0:loopDepth-1); // break
		}
															#line 9953 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_5 = self->mutations.onEmpty();
															#line 9953 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<ChangeFeedWaitLatestActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 53356 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_5.isReady()) { if (__when_expr_5.isError()) return a_body1Catch1(__when_expr_5.getError(), std::max(0, loopDepth - 1)); else return a_body1cont11loopBody1when1(__when_expr_5.get(), loopDepth); };
		static_cast<ChangeFeedWaitLatestActor*>(this)->actor_wait_state = 6;
															#line 9953 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_5.addCallbackAndClear(static_cast<ActorCallback< ChangeFeedWaitLatestActor, 5, Void >*>(static_cast<ChangeFeedWaitLatestActor*>(this)));
															#line 53361 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont11break1(int loopDepth) 
	{
		try {
			return a_body1cont11cont3(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont11loopBody1cont1(Void const& _,int loopDepth) 
	{
															#line 9954 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_6 = delay(0);
															#line 9954 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<ChangeFeedWaitLatestActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 53385 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_6.isReady()) { if (__when_expr_6.isError()) return a_body1Catch1(__when_expr_6.getError(), std::max(0, loopDepth - 1)); else return a_body1cont11loopBody1cont1when1(__when_expr_6.get(), loopDepth); };
		static_cast<ChangeFeedWaitLatestActor*>(this)->actor_wait_state = 7;
															#line 9954 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_6.addCallbackAndClear(static_cast<ActorCallback< ChangeFeedWaitLatestActor, 6, Void >*>(static_cast<ChangeFeedWaitLatestActor*>(this)));
															#line 53390 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont11loopBody1cont1(Void && _,int loopDepth) 
	{
															#line 9954 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_6 = delay(0);
															#line 9954 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<ChangeFeedWaitLatestActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 53401 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_6.isReady()) { if (__when_expr_6.isError()) return a_body1Catch1(__when_expr_6.getError(), std::max(0, loopDepth - 1)); else return a_body1cont11loopBody1cont1when1(__when_expr_6.get(), loopDepth); };
		static_cast<ChangeFeedWaitLatestActor*>(this)->actor_wait_state = 7;
															#line 9954 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_6.addCallbackAndClear(static_cast<ActorCallback< ChangeFeedWaitLatestActor, 6, Void >*>(static_cast<ChangeFeedWaitLatestActor*>(this)));
															#line 53406 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont11loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont11loopBody1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont11loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont11loopBody1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose6() 
	{
		if (static_cast<ChangeFeedWaitLatestActor*>(this)->actor_wait_state > 0) static_cast<ChangeFeedWaitLatestActor*>(this)->actor_wait_state = 0;
		static_cast<ChangeFeedWaitLatestActor*>(this)->ActorCallback< ChangeFeedWaitLatestActor, 5, Void >::remove();

	}
	void a_callback_fire(ActorCallback< ChangeFeedWaitLatestActor, 5, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("changeFeedWaitLatest", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1cont11loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeFeedWaitLatest", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_fire(ActorCallback< ChangeFeedWaitLatestActor, 5, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("changeFeedWaitLatest", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1cont11loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeFeedWaitLatest", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_error(ActorCallback< ChangeFeedWaitLatestActor, 5, Void >*,Error err) 
	{
		fdb_probe_actor_enter("changeFeedWaitLatest", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeFeedWaitLatest", reinterpret_cast<unsigned long>(this), 5);

	}
	int a_body1cont11loopBody1cont3(Void const& _,int loopDepth) 
	{
		if (loopDepth == 0) return a_body1cont11loopHead1(0);

		return loopDepth;
	}
	int a_body1cont11loopBody1cont3(Void && _,int loopDepth) 
	{
		if (loopDepth == 0) return a_body1cont11loopHead1(0);

		return loopDepth;
	}
	int a_body1cont11loopBody1cont1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont11loopBody1cont3(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont11loopBody1cont1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont11loopBody1cont3(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose7() 
	{
		if (static_cast<ChangeFeedWaitLatestActor*>(this)->actor_wait_state > 0) static_cast<ChangeFeedWaitLatestActor*>(this)->actor_wait_state = 0;
		static_cast<ChangeFeedWaitLatestActor*>(this)->ActorCallback< ChangeFeedWaitLatestActor, 6, Void >::remove();

	}
	void a_callback_fire(ActorCallback< ChangeFeedWaitLatestActor, 6, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("changeFeedWaitLatest", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1cont11loopBody1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeFeedWaitLatest", reinterpret_cast<unsigned long>(this), 6);

	}
	void a_callback_fire(ActorCallback< ChangeFeedWaitLatestActor, 6, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("changeFeedWaitLatest", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1cont11loopBody1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeFeedWaitLatest", reinterpret_cast<unsigned long>(this), 6);

	}
	void a_callback_error(ActorCallback< ChangeFeedWaitLatestActor, 6, Void >*,Error err) 
	{
		fdb_probe_actor_enter("changeFeedWaitLatest", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeFeedWaitLatest", reinterpret_cast<unsigned long>(this), 6);

	}
															#line 9908 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<ChangeFeedData> self;
															#line 9908 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Version version;
															#line 53553 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via changeFeedWaitLatest()
															#line 9908 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class ChangeFeedWaitLatestActor final : public Actor<Void>, public ActorCallback< ChangeFeedWaitLatestActor, 0, Void >, public ActorCallback< ChangeFeedWaitLatestActor, 1, Void >, public ActorCallback< ChangeFeedWaitLatestActor, 2, Void >, public ActorCallback< ChangeFeedWaitLatestActor, 3, Void >, public ActorCallback< ChangeFeedWaitLatestActor, 4, Void >, public ActorCallback< ChangeFeedWaitLatestActor, 5, Void >, public ActorCallback< ChangeFeedWaitLatestActor, 6, Void >, public FastAllocated<ChangeFeedWaitLatestActor>, public ChangeFeedWaitLatestActorState<ChangeFeedWaitLatestActor> {
															#line 53558 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<ChangeFeedWaitLatestActor>::operator new;
	using FastAllocated<ChangeFeedWaitLatestActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< ChangeFeedWaitLatestActor, 0, Void >;
friend struct ActorCallback< ChangeFeedWaitLatestActor, 1, Void >;
friend struct ActorCallback< ChangeFeedWaitLatestActor, 2, Void >;
friend struct ActorCallback< ChangeFeedWaitLatestActor, 3, Void >;
friend struct ActorCallback< ChangeFeedWaitLatestActor, 4, Void >;
friend struct ActorCallback< ChangeFeedWaitLatestActor, 5, Void >;
friend struct ActorCallback< ChangeFeedWaitLatestActor, 6, Void >;
															#line 9908 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	ChangeFeedWaitLatestActor(Reference<ChangeFeedData> const& self,Version const& version) 
															#line 53575 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Void>(),
		   ChangeFeedWaitLatestActorState<ChangeFeedWaitLatestActor>(self, version)
	{
		fdb_probe_actor_enter("changeFeedWaitLatest", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("changeFeedWaitLatest");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("changeFeedWaitLatest", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< ChangeFeedWaitLatestActor, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< ChangeFeedWaitLatestActor, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< ChangeFeedWaitLatestActor, 2, Void >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< ChangeFeedWaitLatestActor, 3, Void >*)0, actor_cancelled()); break;
		case 5: this->a_callback_error((ActorCallback< ChangeFeedWaitLatestActor, 4, Void >*)0, actor_cancelled()); break;
		case 6: this->a_callback_error((ActorCallback< ChangeFeedWaitLatestActor, 5, Void >*)0, actor_cancelled()); break;
		case 7: this->a_callback_error((ActorCallback< ChangeFeedWaitLatestActor, 6, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 9908 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<Void> changeFeedWaitLatest( Reference<ChangeFeedData> const& self, Version const& version ) {
															#line 9908 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Void>(new ChangeFeedWaitLatestActor(self, version));
															#line 53609 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 9960 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

															#line 53614 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via changeFeedWhenAtLatest()
															#line 9961 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class ChangeFeedWhenAtLatestActor>
															#line 9961 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class ChangeFeedWhenAtLatestActorState {
															#line 53621 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 9961 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	ChangeFeedWhenAtLatestActorState(Reference<ChangeFeedData> const& self,Version const& version) 
															#line 9961 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 9961 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : self(self),
															#line 9961 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   version(version)
															#line 53630 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("changeFeedWhenAtLatest", reinterpret_cast<unsigned long>(this));

	}
	~ChangeFeedWhenAtLatestActorState() 
	{
		fdb_probe_actor_destroy("changeFeedWhenAtLatest", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 9962 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (version >= self->endVersion)
															#line 53645 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 9963 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				this->~ChangeFeedWhenAtLatestActorState();
															#line 53649 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				static_cast<ChangeFeedWhenAtLatestActor*>(this)->sendAndDelPromiseRef(Never());
				return 0;
			}
															#line 9965 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (version <= self->getVersion())
															#line 53655 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 9966 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (!static_cast<ChangeFeedWhenAtLatestActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~ChangeFeedWhenAtLatestActorState(); static_cast<ChangeFeedWhenAtLatestActor*>(this)->destroy(); return 0; }
															#line 53659 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				new (&static_cast<ChangeFeedWhenAtLatestActor*>(this)->SAV< Void >::value()) Void(Void());
				this->~ChangeFeedWhenAtLatestActorState();
				static_cast<ChangeFeedWhenAtLatestActor*>(this)->finishSendAndDelPromiseRef();
				return 0;
			}
															#line 9968 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			lastReturned = self->lastReturnedVersion.whenAtLeast(version);
															#line 9969 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			;
															#line 53669 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~ChangeFeedWhenAtLatestActorState();
		static_cast<ChangeFeedWhenAtLatestActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 9984 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (self->lastReturnedVersion.get() < version)
															#line 53692 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 9985 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			self->lastReturnedVersion.set(version);
															#line 53696 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 9987 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(self->getVersion() >= version);
															#line 9988 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<ChangeFeedWhenAtLatestActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~ChangeFeedWhenAtLatestActorState(); static_cast<ChangeFeedWhenAtLatestActor*>(this)->destroy(); return 0; }
															#line 53702 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<ChangeFeedWhenAtLatestActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~ChangeFeedWhenAtLatestActorState();
		static_cast<ChangeFeedWhenAtLatestActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
															#line 9971 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		Future<Void> waitEmptyVersion = (self->notAtLatest.get() == 0) ? changeFeedWaitLatest(self, version) : Never();
															#line 9973 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_0 = waitEmptyVersion;
															#line 9972 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<ChangeFeedWhenAtLatestActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 53725 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
															#line 9976 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_1 = lastReturned;
															#line 53729 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1when2(__when_expr_1.get(), loopDepth); };
															#line 9979 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_2 = self->refresh.getFuture();
															#line 53733 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1when3(__when_expr_2.get(), loopDepth); };
															#line 9980 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_3 = self->notAtLatest.onChange();
															#line 53737 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch1(__when_expr_3.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1when4(__when_expr_3.get(), loopDepth); };
		static_cast<ChangeFeedWhenAtLatestActor*>(this)->actor_wait_state = 1;
															#line 9973 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< ChangeFeedWhenAtLatestActor, 0, Void >*>(static_cast<ChangeFeedWhenAtLatestActor*>(this)));
															#line 9976 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< ChangeFeedWhenAtLatestActor, 1, Void >*>(static_cast<ChangeFeedWhenAtLatestActor*>(this)));
															#line 9979 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< ChangeFeedWhenAtLatestActor, 2, Void >*>(static_cast<ChangeFeedWhenAtLatestActor*>(this)));
															#line 9980 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< ChangeFeedWhenAtLatestActor, 3, Void >*>(static_cast<ChangeFeedWhenAtLatestActor*>(this)));
															#line 53748 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1break1(int loopDepth) 
	{
		try {
			return a_body1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1when1(Void const& _,int loopDepth) 
	{
		return a_body1break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1loopBody1when1(Void && _,int loopDepth) 
	{
		return a_body1break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1loopBody1when2(Void const& _,int loopDepth) 
	{
		return a_body1break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1loopBody1when2(Void && _,int loopDepth) 
	{
		return a_body1break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1loopBody1when3(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when3(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when4(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when4(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<ChangeFeedWhenAtLatestActor*>(this)->actor_wait_state > 0) static_cast<ChangeFeedWhenAtLatestActor*>(this)->actor_wait_state = 0;
		static_cast<ChangeFeedWhenAtLatestActor*>(this)->ActorCallback< ChangeFeedWhenAtLatestActor, 0, Void >::remove();
		static_cast<ChangeFeedWhenAtLatestActor*>(this)->ActorCallback< ChangeFeedWhenAtLatestActor, 1, Void >::remove();
		static_cast<ChangeFeedWhenAtLatestActor*>(this)->ActorCallback< ChangeFeedWhenAtLatestActor, 2, Void >::remove();
		static_cast<ChangeFeedWhenAtLatestActor*>(this)->ActorCallback< ChangeFeedWhenAtLatestActor, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< ChangeFeedWhenAtLatestActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("changeFeedWhenAtLatest", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeFeedWhenAtLatest", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< ChangeFeedWhenAtLatestActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("changeFeedWhenAtLatest", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeFeedWhenAtLatest", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< ChangeFeedWhenAtLatestActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("changeFeedWhenAtLatest", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeFeedWhenAtLatest", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< ChangeFeedWhenAtLatestActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("changeFeedWhenAtLatest", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose1();
		try {
			a_body1loopBody1when2(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeFeedWhenAtLatest", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< ChangeFeedWhenAtLatestActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("changeFeedWhenAtLatest", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose1();
		try {
			a_body1loopBody1when2(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeFeedWhenAtLatest", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< ChangeFeedWhenAtLatestActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("changeFeedWhenAtLatest", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeFeedWhenAtLatest", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< ChangeFeedWhenAtLatestActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("changeFeedWhenAtLatest", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose1();
		try {
			a_body1loopBody1when3(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeFeedWhenAtLatest", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< ChangeFeedWhenAtLatestActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("changeFeedWhenAtLatest", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose1();
		try {
			a_body1loopBody1when3(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeFeedWhenAtLatest", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< ChangeFeedWhenAtLatestActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("changeFeedWhenAtLatest", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeFeedWhenAtLatest", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< ChangeFeedWhenAtLatestActor, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("changeFeedWhenAtLatest", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose1();
		try {
			a_body1loopBody1when4(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeFeedWhenAtLatest", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< ChangeFeedWhenAtLatestActor, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("changeFeedWhenAtLatest", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose1();
		try {
			a_body1loopBody1when4(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeFeedWhenAtLatest", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< ChangeFeedWhenAtLatestActor, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("changeFeedWhenAtLatest", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("changeFeedWhenAtLatest", reinterpret_cast<unsigned long>(this), 3);

	}
															#line 9961 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<ChangeFeedData> self;
															#line 9961 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Version version;
															#line 9968 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Future<Void> lastReturned;
															#line 54015 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via changeFeedWhenAtLatest()
															#line 9961 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class ChangeFeedWhenAtLatestActor final : public Actor<Void>, public ActorCallback< ChangeFeedWhenAtLatestActor, 0, Void >, public ActorCallback< ChangeFeedWhenAtLatestActor, 1, Void >, public ActorCallback< ChangeFeedWhenAtLatestActor, 2, Void >, public ActorCallback< ChangeFeedWhenAtLatestActor, 3, Void >, public FastAllocated<ChangeFeedWhenAtLatestActor>, public ChangeFeedWhenAtLatestActorState<ChangeFeedWhenAtLatestActor> {
															#line 54020 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<ChangeFeedWhenAtLatestActor>::operator new;
	using FastAllocated<ChangeFeedWhenAtLatestActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< ChangeFeedWhenAtLatestActor, 0, Void >;
friend struct ActorCallback< ChangeFeedWhenAtLatestActor, 1, Void >;
friend struct ActorCallback< ChangeFeedWhenAtLatestActor, 2, Void >;
friend struct ActorCallback< ChangeFeedWhenAtLatestActor, 3, Void >;
															#line 9961 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	ChangeFeedWhenAtLatestActor(Reference<ChangeFeedData> const& self,Version const& version) 
															#line 54034 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Void>(),
		   ChangeFeedWhenAtLatestActorState<ChangeFeedWhenAtLatestActor>(self, version)
	{
		fdb_probe_actor_enter("changeFeedWhenAtLatest", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("changeFeedWhenAtLatest");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("changeFeedWhenAtLatest", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< ChangeFeedWhenAtLatestActor, 0, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 9961 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<Void> changeFeedWhenAtLatest( Reference<ChangeFeedData> const& self, Version const& version ) {
															#line 9961 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Void>(new ChangeFeedWhenAtLatestActor(self, version));
															#line 54062 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 9990 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

Future<Void> ChangeFeedData::whenAtLeast(Version version) {
	return changeFeedWhenAtLatest(Reference<ChangeFeedData>::addRef(this), version);
}

#define DEBUG_CF_CLIENT_TRACE false

															#line 54073 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via partialChangeFeedStream()
															#line 9997 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class PartialChangeFeedStreamActor>
															#line 9997 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class PartialChangeFeedStreamActorState {
															#line 54080 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 9997 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	PartialChangeFeedStreamActorState(StorageServerInterface const& interf,PromiseStream<Standalone<MutationsAndVersionRef>> const& results,ReplyPromiseStream<ChangeFeedStreamReply> const& replyStream,Version const& begin,Version const& end,Reference<ChangeFeedData> const& feedData,Reference<ChangeFeedStorageData> const& storageData,UID const& debugUID,Optional<ChangeFeedTSSValidationData>* const& tssData) 
															#line 9997 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 9997 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : interf(interf),
															#line 9997 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   results(results),
															#line 9997 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   replyStream(replyStream),
															#line 9997 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   begin(begin),
															#line 9997 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   end(end),
															#line 9997 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   feedData(feedData),
															#line 9997 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   storageData(storageData),
															#line 9997 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   debugUID(debugUID),
															#line 9997 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   tssData(tssData),
															#line 10008 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   refresh(feedData->refresh),
															#line 10009 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   atLatestVersion(false),
															#line 10010 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   nextVersion(begin),
															#line 10016 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   lastEmpty(invalidVersion)
															#line 54111 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("partialChangeFeedStream", reinterpret_cast<unsigned long>(this));

	}
	~PartialChangeFeedStreamActorState() 
	{
		fdb_probe_actor_destroy("partialChangeFeedStream", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
			try {
															#line 10018 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				;
															#line 54127 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				loopDepth = a_body1loopHead1(loopDepth);
			}
			catch (Error& error) {
				loopDepth = a_body1Catch2(error, loopDepth);
			} catch (...) {
				loopDepth = a_body1Catch2(unknown_error(), loopDepth);
			}
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~PartialChangeFeedStreamActorState();
		static_cast<PartialChangeFeedStreamActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1Catch2(const Error& e,int loopDepth=0) 
	{
		try {
															#line 10130 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (DEBUG_CF_CLIENT_TRACE)
															#line 54157 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 10131 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				TraceEvent(SevDebug, "TraceChangeFeedClientMergeCursorError", debugUID).errorUnsuppressed(e);
															#line 54161 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 10133 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (e.code() == error_code_actor_cancelled)
															#line 54165 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 10134 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				return a_body1Catch1(e, loopDepth);
															#line 54169 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 10136 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			results.sendError(e);
															#line 10137 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<PartialChangeFeedStreamActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~PartialChangeFeedStreamActorState(); static_cast<PartialChangeFeedStreamActor*>(this)->destroy(); return 0; }
															#line 54175 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<PartialChangeFeedStreamActor*>(this)->SAV< Void >::value()) Void(Void());
			this->~PartialChangeFeedStreamActorState();
			static_cast<PartialChangeFeedStreamActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
															#line 10019 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (nextVersion >= end)
															#line 54200 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 10020 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			results.sendError(end_of_stream());
															#line 10021 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<PartialChangeFeedStreamActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~PartialChangeFeedStreamActorState(); static_cast<PartialChangeFeedStreamActor*>(this)->destroy(); return 0; }
															#line 54206 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<PartialChangeFeedStreamActor*>(this)->SAV< Void >::value()) Void(Void());
			this->~PartialChangeFeedStreamActorState();
			static_cast<PartialChangeFeedStreamActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 10024 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		FutureStream<ChangeFeedStreamReply> __when_expr_0 = replyStream.getFuture();
															#line 10023 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<PartialChangeFeedStreamActor*>(this)->actor_wait_state < 0) return a_body1Catch2(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 54216 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch2(__when_expr_0.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1when1(__when_expr_0.pop(), loopDepth); };
															#line 10112 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_1 = atLatestVersion && replyStream.isEmpty() && results.isEmpty() ? storageData->version.whenAtLeast(nextVersion) : Future<Void>(Never());
															#line 54220 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch2(__when_expr_1.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1when2(__when_expr_1.get(), loopDepth); };
															#line 10125 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_2 = atLatestVersion && replyStream.isEmpty() && !results.isEmpty() ? results.onEmpty() : Future<Void>(Never());
															#line 54224 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch2(__when_expr_2.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1when3(__when_expr_2.get(), loopDepth); };
		static_cast<PartialChangeFeedStreamActor*>(this)->actor_wait_state = 1;
															#line 10024 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_0.addCallbackAndClear(static_cast<ActorSingleCallback< PartialChangeFeedStreamActor, 0, ChangeFeedStreamReply >*>(static_cast<PartialChangeFeedStreamActor*>(this)));
															#line 10112 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< PartialChangeFeedStreamActor, 1, Void >*>(static_cast<PartialChangeFeedStreamActor*>(this)));
															#line 10125 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< PartialChangeFeedStreamActor, 2, Void >*>(static_cast<PartialChangeFeedStreamActor*>(this)));
															#line 54233 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1when1(ChangeFeedStreamReply const& __rep,int loopDepth) 
	{
															#line 10024 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		rep = __rep;
															#line 10026 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (nextVersion == begin && rep.mutations.size() == 1 && rep.mutations[0].mutations.size() == 0 && rep.mutations[0].version == begin - 1)
															#line 54250 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
			return a_body1loopHead1(loopDepth); // continue
		}
															#line 10031 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (DEBUG_CF_CLIENT_TRACE)
															#line 54256 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 10032 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent(SevDebug, "TraceChangeFeedClientMergeCursorReply", debugUID) .detail("SSID", storageData->id) .detail("AtLatest", atLatestVersion) .detail("FirstVersion", rep.mutations.front().version) .detail("LastVersion", rep.mutations.back().version) .detail("Count", rep.mutations.size()) .detail("MinStreamVersion", rep.minStreamVersion) .detail("PopVersion", rep.popVersion) .detail("RepAtLatest", rep.atLatestVersion);
															#line 54260 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 10043 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (rep.mutations.back().version > feedData->maxSeenVersion)
															#line 54264 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 10044 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			feedData->maxSeenVersion = rep.mutations.back().version;
															#line 54268 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 10046 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (rep.popVersion > feedData->popVersion)
															#line 54272 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 10047 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			feedData->popVersion = rep.popVersion;
															#line 54276 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 10049 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (tssData->present())
															#line 54280 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 10050 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tssData->get().updatePopped(rep.popVersion);
															#line 54284 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 10053 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (lastEmpty != invalidVersion && !results.isEmpty())
															#line 54288 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 10054 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			for( auto& it : feedData->storageData ) {
															#line 10055 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (refresh.canBeSet() && lastEmpty > it->desired.get())
															#line 54294 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 10056 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					it->desired.set(lastEmpty);
															#line 54298 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
			}
															#line 10059 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			lastEmpty = invalidVersion;
															#line 54303 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 10062 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		resultLoc = 0;
															#line 10063 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		;
															#line 54309 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1when1loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(ChangeFeedStreamReply && __rep,int loopDepth) 
	{
		rep = std::move(__rep);
															#line 10026 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (nextVersion == begin && rep.mutations.size() == 1 && rep.mutations[0].mutations.size() == 0 && rep.mutations[0].version == begin - 1)
															#line 54319 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
			return a_body1loopHead1(loopDepth); // continue
		}
															#line 10031 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (DEBUG_CF_CLIENT_TRACE)
															#line 54325 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 10032 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent(SevDebug, "TraceChangeFeedClientMergeCursorReply", debugUID) .detail("SSID", storageData->id) .detail("AtLatest", atLatestVersion) .detail("FirstVersion", rep.mutations.front().version) .detail("LastVersion", rep.mutations.back().version) .detail("Count", rep.mutations.size()) .detail("MinStreamVersion", rep.minStreamVersion) .detail("PopVersion", rep.popVersion) .detail("RepAtLatest", rep.atLatestVersion);
															#line 54329 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 10043 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (rep.mutations.back().version > feedData->maxSeenVersion)
															#line 54333 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 10044 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			feedData->maxSeenVersion = rep.mutations.back().version;
															#line 54337 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 10046 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (rep.popVersion > feedData->popVersion)
															#line 54341 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 10047 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			feedData->popVersion = rep.popVersion;
															#line 54345 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 10049 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (tssData->present())
															#line 54349 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 10050 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tssData->get().updatePopped(rep.popVersion);
															#line 54353 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 10053 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (lastEmpty != invalidVersion && !results.isEmpty())
															#line 54357 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 10054 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			for( auto& it : feedData->storageData ) {
															#line 10055 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (refresh.canBeSet() && lastEmpty > it->desired.get())
															#line 54363 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 10056 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					it->desired.set(lastEmpty);
															#line 54367 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
			}
															#line 10059 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			lastEmpty = invalidVersion;
															#line 54372 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 10062 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		resultLoc = 0;
															#line 10063 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		;
															#line 54378 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1when1loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when2(Void const& _,int loopDepth) 
	{
															#line 10115 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		MutationsAndVersionRef empty;
															#line 10116 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		empty.version = storageData->version.get();
															#line 10117 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		results.send(empty);
															#line 10118 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		nextVersion = storageData->version.get() + 1;
															#line 10119 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (DEBUG_CF_CLIENT_TRACE)
															#line 54395 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 10120 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent(SevDebug, "TraceChangeFeedClientMergeCursorSendEmpty", debugUID) .detail("Version", empty.version);
															#line 54399 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 10123 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		lastEmpty = empty.version;
															#line 54403 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when2(Void && _,int loopDepth) 
	{
															#line 10115 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		MutationsAndVersionRef empty;
															#line 10116 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		empty.version = storageData->version.get();
															#line 10117 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		results.send(empty);
															#line 10118 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		nextVersion = storageData->version.get() + 1;
															#line 10119 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (DEBUG_CF_CLIENT_TRACE)
															#line 54420 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 10120 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent(SevDebug, "TraceChangeFeedClientMergeCursorSendEmpty", debugUID) .detail("Version", empty.version);
															#line 54424 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 10123 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		lastEmpty = empty.version;
															#line 54428 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when3(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when3(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<PartialChangeFeedStreamActor*>(this)->actor_wait_state > 0) static_cast<PartialChangeFeedStreamActor*>(this)->actor_wait_state = 0;
		static_cast<PartialChangeFeedStreamActor*>(this)->ActorSingleCallback< PartialChangeFeedStreamActor, 0, ChangeFeedStreamReply >::remove();
		static_cast<PartialChangeFeedStreamActor*>(this)->ActorCallback< PartialChangeFeedStreamActor, 1, Void >::remove();
		static_cast<PartialChangeFeedStreamActor*>(this)->ActorCallback< PartialChangeFeedStreamActor, 2, Void >::remove();

	}
	int a_body1loopBody1when1cont1(int loopDepth) 
	{
															#line 10093 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (rep.mutations.back().version + 1 > nextVersion)
															#line 54457 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 10094 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			nextVersion = rep.mutations.back().version + 1;
															#line 54461 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 10097 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (refresh.canBeSet() && !atLatestVersion && rep.atLatestVersion)
															#line 54465 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 10098 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			atLatestVersion = true;
															#line 10099 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			feedData->notAtLatest.set(feedData->notAtLatest.get() - 1);
															#line 10100 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (feedData->notAtLatest.get() == 0 && feedData->context)
															#line 54473 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 10101 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				feedData->context->notAtLatestChangeFeeds.erase(feedData->dbgid);
															#line 54477 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
		}
															#line 10104 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (refresh.canBeSet() && rep.minStreamVersion > storageData->version.get())
															#line 54482 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 10105 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			storageData->version.set(rep.minStreamVersion);
															#line 54486 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 10107 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (DEBUG_CF_CLIENT_TRACE)
															#line 54490 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 10108 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent(SevDebug, "TraceChangeFeedClientMergeCursorReplyDone", debugUID) .detail("AtLatestNow", atLatestVersion);
															#line 54494 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1when1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1loopBody1(int loopDepth) 
	{
															#line 10063 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!(resultLoc < rep.mutations.size()))
															#line 54511 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
			return a_body1loopBody1when1break1(loopDepth==0?0:loopDepth-1); // break
		}
															#line 10064 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_3 = results.onEmpty();
															#line 10064 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<PartialChangeFeedStreamActor*>(this)->actor_wait_state < 0) return a_body1Catch2(actor_cancelled(), std::max(0, loopDepth - 2));
															#line 54519 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch2(__when_expr_3.getError(), std::max(0, loopDepth - 2)); else return a_body1loopBody1when1loopBody1when1(__when_expr_3.get(), loopDepth); };
		static_cast<PartialChangeFeedStreamActor*>(this)->actor_wait_state = 2;
															#line 10064 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< PartialChangeFeedStreamActor, 3, Void >*>(static_cast<PartialChangeFeedStreamActor*>(this)));
															#line 54524 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1when1break1(int loopDepth) 
	{
		try {
			return a_body1loopBody1when1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch2(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch2(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1when1loopBody1cont1(Void const& _,int loopDepth) 
	{
															#line 10065 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (rep.mutations[resultLoc].version >= nextVersion)
															#line 54546 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 10066 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (tssData->present() && tssData->get().shouldAddMutation(rep.mutations[resultLoc]))
															#line 54550 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 10067 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				tssData->get().ssStreamSummary.send(rep.mutations[resultLoc].version);
															#line 54554 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 10070 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			results.send(rep.mutations[resultLoc]);
															#line 10072 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (DEBUG_CF_CLIENT_TRACE)
															#line 54560 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 10073 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				TraceEvent(SevDebug, "TraceChangeFeedClientMergeCursorSend", debugUID) .detail("Version", rep.mutations[resultLoc].version) .detail("Size", rep.mutations[resultLoc].mutations.size());
															#line 54564 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 10081 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			for( auto& it : feedData->storageData ) {
															#line 10082 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (refresh.canBeSet() && rep.mutations[resultLoc].version > it->desired.get())
															#line 54570 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 10083 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					it->desired.set(rep.mutations[resultLoc].version);
															#line 54574 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
			}
		}
		else
		{
															#line 10087 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ASSERT(rep.mutations[resultLoc].mutations.empty());
															#line 54582 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 10089 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		resultLoc++;
															#line 54586 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (loopDepth == 0) return a_body1loopBody1when1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1when1loopBody1cont1(Void && _,int loopDepth) 
	{
															#line 10065 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (rep.mutations[resultLoc].version >= nextVersion)
															#line 54595 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 10066 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (tssData->present() && tssData->get().shouldAddMutation(rep.mutations[resultLoc]))
															#line 54599 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 10067 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				tssData->get().ssStreamSummary.send(rep.mutations[resultLoc].version);
															#line 54603 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 10070 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			results.send(rep.mutations[resultLoc]);
															#line 10072 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (DEBUG_CF_CLIENT_TRACE)
															#line 54609 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 10073 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				TraceEvent(SevDebug, "TraceChangeFeedClientMergeCursorSend", debugUID) .detail("Version", rep.mutations[resultLoc].version) .detail("Size", rep.mutations[resultLoc].mutations.size());
															#line 54613 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 10081 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			for( auto& it : feedData->storageData ) {
															#line 10082 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (refresh.canBeSet() && rep.mutations[resultLoc].version > it->desired.get())
															#line 54619 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 10083 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					it->desired.set(rep.mutations[resultLoc].version);
															#line 54623 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
			}
		}
		else
		{
															#line 10087 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ASSERT(rep.mutations[resultLoc].mutations.empty());
															#line 54631 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 10089 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		resultLoc++;
															#line 54635 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (loopDepth == 0) return a_body1loopBody1when1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1when1loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1when1loopBody1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1when1loopBody1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<PartialChangeFeedStreamActor*>(this)->actor_wait_state > 0) static_cast<PartialChangeFeedStreamActor*>(this)->actor_wait_state = 0;
		static_cast<PartialChangeFeedStreamActor*>(this)->ActorCallback< PartialChangeFeedStreamActor, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< PartialChangeFeedStreamActor, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("partialChangeFeedStream", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose2();
		try {
			a_body1loopBody1when1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("partialChangeFeedStream", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< PartialChangeFeedStreamActor, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("partialChangeFeedStream", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose2();
		try {
			a_body1loopBody1when1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("partialChangeFeedStream", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< PartialChangeFeedStreamActor, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("partialChangeFeedStream", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose2();
		try {
			a_body1Catch2(err, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("partialChangeFeedStream", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorSingleCallback< PartialChangeFeedStreamActor, 0, ChangeFeedStreamReply >*,ChangeFeedStreamReply const& value) 
	{
		fdb_probe_actor_enter("partialChangeFeedStream", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("partialChangeFeedStream", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorSingleCallback< PartialChangeFeedStreamActor, 0, ChangeFeedStreamReply >*,ChangeFeedStreamReply && value) 
	{
		fdb_probe_actor_enter("partialChangeFeedStream", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("partialChangeFeedStream", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorSingleCallback< PartialChangeFeedStreamActor, 0, ChangeFeedStreamReply >*,Error err) 
	{
		fdb_probe_actor_enter("partialChangeFeedStream", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch2(err, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("partialChangeFeedStream", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< PartialChangeFeedStreamActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("partialChangeFeedStream", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose1();
		try {
			a_body1loopBody1when2(value, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("partialChangeFeedStream", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< PartialChangeFeedStreamActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("partialChangeFeedStream", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose1();
		try {
			a_body1loopBody1when2(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("partialChangeFeedStream", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< PartialChangeFeedStreamActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("partialChangeFeedStream", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose1();
		try {
			a_body1Catch2(err, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("partialChangeFeedStream", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< PartialChangeFeedStreamActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("partialChangeFeedStream", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose1();
		try {
			a_body1loopBody1when3(value, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("partialChangeFeedStream", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< PartialChangeFeedStreamActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("partialChangeFeedStream", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose1();
		try {
			a_body1loopBody1when3(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("partialChangeFeedStream", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< PartialChangeFeedStreamActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("partialChangeFeedStream", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose1();
		try {
			a_body1Catch2(err, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("partialChangeFeedStream", reinterpret_cast<unsigned long>(this), 2);

	}
															#line 9997 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	StorageServerInterface interf;
															#line 9997 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	PromiseStream<Standalone<MutationsAndVersionRef>> results;
															#line 9997 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	ReplyPromiseStream<ChangeFeedStreamReply> replyStream;
															#line 9997 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Version begin;
															#line 9997 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Version end;
															#line 9997 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<ChangeFeedData> feedData;
															#line 9997 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<ChangeFeedStorageData> storageData;
															#line 9997 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	UID debugUID;
															#line 9997 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Optional<ChangeFeedTSSValidationData>* tssData;
															#line 10008 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Promise<Void> refresh;
															#line 10009 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	bool atLatestVersion;
															#line 10010 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Version nextVersion;
															#line 10016 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Version lastEmpty;
															#line 10024 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	ChangeFeedStreamReply rep;
															#line 10062 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	int resultLoc;
															#line 54868 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via partialChangeFeedStream()
															#line 9997 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class PartialChangeFeedStreamActor final : public Actor<Void>, public ActorSingleCallback< PartialChangeFeedStreamActor, 0, ChangeFeedStreamReply >, public ActorCallback< PartialChangeFeedStreamActor, 3, Void >, public ActorCallback< PartialChangeFeedStreamActor, 1, Void >, public ActorCallback< PartialChangeFeedStreamActor, 2, Void >, public FastAllocated<PartialChangeFeedStreamActor>, public PartialChangeFeedStreamActorState<PartialChangeFeedStreamActor> {
															#line 54873 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<PartialChangeFeedStreamActor>::operator new;
	using FastAllocated<PartialChangeFeedStreamActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorSingleCallback< PartialChangeFeedStreamActor, 0, ChangeFeedStreamReply >;
friend struct ActorCallback< PartialChangeFeedStreamActor, 3, Void >;
friend struct ActorCallback< PartialChangeFeedStreamActor, 1, Void >;
friend struct ActorCallback< PartialChangeFeedStreamActor, 2, Void >;
															#line 9997 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	PartialChangeFeedStreamActor(StorageServerInterface const& interf,PromiseStream<Standalone<MutationsAndVersionRef>> const& results,ReplyPromiseStream<ChangeFeedStreamReply> const& replyStream,Version const& begin,Version const& end,Reference<ChangeFeedData> const& feedData,Reference<ChangeFeedStorageData> const& storageData,UID const& debugUID,Optional<ChangeFeedTSSValidationData>* const& tssData) 
															#line 54887 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Void>(),
		   PartialChangeFeedStreamActorState<PartialChangeFeedStreamActor>(interf, results, replyStream, begin, end, feedData, storageData, debugUID, tssData)
	{
		fdb_probe_actor_enter("partialChangeFeedStream", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("partialChangeFeedStream");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("partialChangeFeedStream", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorSingleCallback< PartialChangeFeedStreamActor, 0, ChangeFeedStreamReply >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< PartialChangeFeedStreamActor, 3, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 9997 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<Void> partialChangeFeedStream( StorageServerInterface const& interf, PromiseStream<Standalone<MutationsAndVersionRef>> const& results, ReplyPromiseStream<ChangeFeedStreamReply> const& replyStream, Version const& begin, Version const& end, Reference<ChangeFeedData> const& feedData, Reference<ChangeFeedStorageData> const& storageData, UID const& debugUID, Optional<ChangeFeedTSSValidationData>* const& tssData ) {
															#line 9997 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Void>(new PartialChangeFeedStreamActor(interf, results, replyStream, begin, end, feedData, storageData, debugUID, tssData));
															#line 54916 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 10140 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

void writeMutationsToCache(Reference<ChangeFeedCacheData> cacheData,
                           Reference<DatabaseContext> db,
                           Standalone<VectorRef<MutationsAndVersionRef>> cacheOut,
                           Key rangeID,
                           KeyRange range,
                           Key tenantPrefix) {
	if (!cacheData) {
		return;
	}
	ASSERT(cacheData->active);
	while (!cacheOut.empty() && cacheOut.front().version <= cacheData->latest) {
		cacheOut.pop_front();
	}
	if (!cacheOut.empty()) {
		Key durableKey = changeFeedCacheKey(tenantPrefix, rangeID, range, cacheOut.back().version);
		Value durableValue = changeFeedCacheValue(cacheOut);
		db->storage->set(KeyValueRef(durableKey, durableValue));
		cacheData->latest = cacheOut.back().version;
		db->uncommittedCFBytes += durableKey.size() + durableValue.size();
		if (db->uncommittedCFBytes > CLIENT_KNOBS->CHANGE_FEED_CACHE_FLUSH_BYTES) {
			db->commitChangeFeedStorage->set(true);
		}
	}
}

															#line 54946 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via mergeChangeFeedStreamInternal()
															#line 10166 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class MergeChangeFeedStreamInternalActor>
															#line 10166 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class MergeChangeFeedStreamInternalActorState {
															#line 54953 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 10166 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	MergeChangeFeedStreamInternalActorState(Reference<ChangeFeedData> const& results,Key const& rangeID,KeyRange const& range,std::vector<std::pair<StorageServerInterface, KeyRange>> const& interfs,std::vector<MutationAndVersionStream> const& streams,Version* const& begin,Version const& end,UID const& mergeCursorUID,Reference<DatabaseContext> const& db,Reference<ChangeFeedCacheData> const& cacheData,Key const& tenantPrefix) 
															#line 10166 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 10166 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : results(results),
															#line 10166 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   rangeID(rangeID),
															#line 10166 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   range(range),
															#line 10166 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   interfs(interfs),
															#line 10166 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   streams(streams),
															#line 10166 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   begin(begin),
															#line 10166 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   end(end),
															#line 10166 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   mergeCursorUID(mergeCursorUID),
															#line 10166 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   db(db),
															#line 10166 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   cacheData(cacheData),
															#line 10166 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   tenantPrefix(tenantPrefix),
															#line 10177 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   refresh(results->refresh),
															#line 10180 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   mutations()
															#line 54984 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("mergeChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this));

	}
	~MergeChangeFeedStreamInternalActorState() 
	{
		fdb_probe_actor_destroy("mergeChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 10182 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (DEBUG_CF_CLIENT_TRACE)
															#line 54999 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 10183 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				TraceEvent(SevDebug, "TraceChangeFeedClientMergeCursorStart", mergeCursorUID) .detail("StreamCount", interfs.size()) .detail("Begin", *begin) .detail("End", end);
															#line 55003 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 10191 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_0 = results->mutations.onEmpty();
															#line 10191 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<MergeChangeFeedStreamInternalActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 55009 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<MergeChangeFeedStreamInternalActor*>(this)->actor_wait_state = 1;
															#line 10191 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< MergeChangeFeedStreamInternalActor, 0, Void >*>(static_cast<MergeChangeFeedStreamInternalActor*>(this)));
															#line 55014 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~MergeChangeFeedStreamInternalActorState();
		static_cast<MergeChangeFeedStreamInternalActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void const& _,int loopDepth) 
	{
															#line 10192 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_1 = delay(0);
															#line 10192 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<MergeChangeFeedStreamInternalActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 55039 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<MergeChangeFeedStreamInternalActor*>(this)->actor_wait_state = 2;
															#line 10192 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< MergeChangeFeedStreamInternalActor, 1, Void >*>(static_cast<MergeChangeFeedStreamInternalActor*>(this)));
															#line 55044 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void && _,int loopDepth) 
	{
															#line 10192 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_1 = delay(0);
															#line 10192 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<MergeChangeFeedStreamInternalActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 55055 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<MergeChangeFeedStreamInternalActor*>(this)->actor_wait_state = 2;
															#line 10192 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< MergeChangeFeedStreamInternalActor, 1, Void >*>(static_cast<MergeChangeFeedStreamInternalActor*>(this)));
															#line 55060 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<MergeChangeFeedStreamInternalActor*>(this)->actor_wait_state > 0) static_cast<MergeChangeFeedStreamInternalActor*>(this)->actor_wait_state = 0;
		static_cast<MergeChangeFeedStreamInternalActor*>(this)->ActorCallback< MergeChangeFeedStreamInternalActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< MergeChangeFeedStreamInternalActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("mergeChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("mergeChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< MergeChangeFeedStreamInternalActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("mergeChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("mergeChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< MergeChangeFeedStreamInternalActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("mergeChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("mergeChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont3(Void const& _,int loopDepth) 
	{
															#line 10193 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(results->mutations.isEmpty());
															#line 10195 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (DEBUG_CF_CLIENT_TRACE)
															#line 55134 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 10196 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent(SevDebug, "TraceChangeFeedClientMergeCursorGotEmpty", mergeCursorUID);
															#line 55138 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 10200 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (*begin - 1 > results->lastReturnedVersion.get())
															#line 55142 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 10201 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			results->lastReturnedVersion.set(*begin - 1);
															#line 55146 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 10204 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		interfNum = 0;
															#line 10206 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		streamsUsed = std::vector<MutationAndVersionStream>();
															#line 10208 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for( auto& stream : streams ) {
															#line 10209 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			streamsUsed.push_back(stream);
															#line 55156 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 10212 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		nextVersion = Version();
															#line 10213 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		;
															#line 55162 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont3loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1cont3(Void && _,int loopDepth) 
	{
															#line 10193 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(results->mutations.isEmpty());
															#line 10195 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (DEBUG_CF_CLIENT_TRACE)
															#line 55173 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 10196 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent(SevDebug, "TraceChangeFeedClientMergeCursorGotEmpty", mergeCursorUID);
															#line 55177 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 10200 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (*begin - 1 > results->lastReturnedVersion.get())
															#line 55181 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 10201 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			results->lastReturnedVersion.set(*begin - 1);
															#line 55185 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 10204 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		interfNum = 0;
															#line 10206 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		streamsUsed = std::vector<MutationAndVersionStream>();
															#line 10208 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for( auto& stream : streams ) {
															#line 10209 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			streamsUsed.push_back(stream);
															#line 55195 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 10212 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		nextVersion = Version();
															#line 10213 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		;
															#line 55201 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont3loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont3(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont3(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<MergeChangeFeedStreamInternalActor*>(this)->actor_wait_state > 0) static_cast<MergeChangeFeedStreamInternalActor*>(this)->actor_wait_state = 0;
		static_cast<MergeChangeFeedStreamInternalActor*>(this)->ActorCallback< MergeChangeFeedStreamInternalActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< MergeChangeFeedStreamInternalActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("mergeChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("mergeChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< MergeChangeFeedStreamInternalActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("mergeChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("mergeChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< MergeChangeFeedStreamInternalActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("mergeChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("mergeChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont3loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1cont3loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1(int loopDepth) 
	{
															#line 10215 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		interfNum = 0;
															#line 10216 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		;
															#line 55282 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont3loopBody1loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1cont1(int loopDepth) 
	{
															#line 10229 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (mutations.empty())
															#line 55291 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 10230 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			return a_body1Catch1(end_of_stream(), std::max(0, loopDepth - 1));
															#line 55295 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 10233 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		streamsUsed.clear();
															#line 10236 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_3 = delay(0);
															#line 10236 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<MergeChangeFeedStreamInternalActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 55303 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch1(__when_expr_3.getError(), std::max(0, loopDepth - 1)); else return a_body1cont3loopBody1cont1when1(__when_expr_3.get(), loopDepth); };
		static_cast<MergeChangeFeedStreamInternalActor*>(this)->actor_wait_state = 4;
															#line 10236 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< MergeChangeFeedStreamInternalActor, 3, Void >*>(static_cast<MergeChangeFeedStreamInternalActor*>(this)));
															#line 55308 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont3loopBody1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1cont3loopBody1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1loopBody1(int loopDepth) 
	{
															#line 10216 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!(interfNum < streamsUsed.size()))
															#line 55324 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
			return a_body1cont3loopBody1break1(loopDepth==0?0:loopDepth-1); // break
		}
		try {
															#line 10218 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			FutureStream<Standalone<MutationsAndVersionRef>> __when_expr_2 = streamsUsed[interfNum].results.getFuture();
															#line 10218 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<MergeChangeFeedStreamInternalActor*>(this)->actor_wait_state < 0) return a_body1cont3loopBody1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 55333 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1cont3loopBody1loopBody1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont3loopBody1loopBody1when1(__when_expr_2.pop(), loopDepth); };
			static_cast<MergeChangeFeedStreamInternalActor*>(this)->actor_wait_state = 3;
															#line 10218 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorSingleCallback< MergeChangeFeedStreamInternalActor, 2, Standalone<MutationsAndVersionRef> >*>(static_cast<MergeChangeFeedStreamInternalActor*>(this)));
															#line 55338 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1cont3loopBody1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1cont3loopBody1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont3loopBody1break1(int loopDepth) 
	{
		try {
			return a_body1cont3loopBody1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1cont3loopBody1loopBody1cont1(int loopDepth) 
	{
															#line 10226 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		interfNum++;
															#line 55366 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (loopDepth == 0) return a_body1cont3loopBody1loopHead1(0);

		return loopDepth;
	}
	int a_body1cont3loopBody1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 10222 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (e.code() != error_code_end_of_stream)
															#line 55376 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 10223 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				return a_body1Catch1(e, std::max(0, loopDepth - 2));
															#line 55380 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
			loopDepth = a_body1cont3loopBody1loopBody1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 2));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 2));
		}

		return loopDepth;
	}
	int a_body1cont3loopBody1loopBody1cont3(Standalone<MutationsAndVersionRef> const& res,int loopDepth) 
	{
															#line 10219 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		streamsUsed[interfNum].next = res;
															#line 10220 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		mutations.push(streamsUsed[interfNum]);
															#line 55398 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont3loopBody1loopBody1cont5(loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1loopBody1cont3(Standalone<MutationsAndVersionRef> && res,int loopDepth) 
	{
															#line 10219 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		streamsUsed[interfNum].next = res;
															#line 10220 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		mutations.push(streamsUsed[interfNum]);
															#line 55409 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont3loopBody1loopBody1cont5(loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1loopBody1when1(Standalone<MutationsAndVersionRef> const& res,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1loopBody1cont3(res, loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1loopBody1when1(Standalone<MutationsAndVersionRef> && res,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1loopBody1cont3(std::move(res), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<MergeChangeFeedStreamInternalActor*>(this)->actor_wait_state > 0) static_cast<MergeChangeFeedStreamInternalActor*>(this)->actor_wait_state = 0;
		static_cast<MergeChangeFeedStreamInternalActor*>(this)->ActorSingleCallback< MergeChangeFeedStreamInternalActor, 2, Standalone<MutationsAndVersionRef> >::remove();

	}
	void a_callback_fire(ActorSingleCallback< MergeChangeFeedStreamInternalActor, 2, Standalone<MutationsAndVersionRef> >*,Standalone<MutationsAndVersionRef> const& value) 
	{
		fdb_probe_actor_enter("mergeChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont3loopBody1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont3loopBody1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont3loopBody1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("mergeChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorSingleCallback< MergeChangeFeedStreamInternalActor, 2, Standalone<MutationsAndVersionRef> >*,Standalone<MutationsAndVersionRef> && value) 
	{
		fdb_probe_actor_enter("mergeChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont3loopBody1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont3loopBody1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont3loopBody1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("mergeChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorSingleCallback< MergeChangeFeedStreamInternalActor, 2, Standalone<MutationsAndVersionRef> >*,Error err) 
	{
		fdb_probe_actor_enter("mergeChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont3loopBody1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont3loopBody1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont3loopBody1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("mergeChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1cont3loopBody1loopBody1cont5(int loopDepth) 
	{
		try {
			loopDepth = a_body1cont3loopBody1loopBody1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 2));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 2));
		}

		return loopDepth;
	}
	int a_body1cont3loopBody1cont2(Void const& _,int loopDepth) 
	{
															#line 10239 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		Standalone<VectorRef<MutationsAndVersionRef>> nextOut;
															#line 10240 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		nextVersion = mutations.top().next.version;
															#line 10242 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		streamsUsed.push_back(mutations.top());
															#line 10243 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		nextOut.push_back_deep(nextOut.arena(), mutations.top().next);
															#line 10244 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		mutations.pop();
															#line 10247 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for(;!mutations.empty() && mutations.top().next.version == nextVersion;) {
															#line 10248 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (mutations.top().next.mutations.size() && mutations.top().next.mutations.front().param1 != lastEpochEndPrivateKey)
															#line 55506 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 10250 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				nextOut.back().mutations.append_deep( nextOut.arena(), mutations.top().next.mutations.begin(), mutations.top().next.mutations.size());
															#line 55510 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 10253 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			streamsUsed.push_back(mutations.top());
															#line 10254 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			mutations.pop();
															#line 55516 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 10257 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(nextOut.size() == 1);
															#line 10258 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(nextVersion >= *begin);
															#line 10260 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		*begin = nextVersion + 1;
															#line 10262 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (DEBUG_CF_CLIENT_TRACE)
															#line 55526 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 10263 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent(SevDebug, "TraceChangeFeedClientMergeCursorSending", mergeCursorUID) .detail("Count", streamsUsed.size()) .detail("Version", nextVersion);
															#line 55530 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 10269 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (nextOut.back().mutations.empty())
															#line 55534 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 10270 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ASSERT(results->mutations.isEmpty());
															#line 55538 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1cont3loopBody1cont4(loopDepth);
		}
		else
		{
															#line 10272 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ASSERT(nextOut.back().version > results->lastReturnedVersion.get());
															#line 10273 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			writeMutationsToCache(cacheData, db, nextOut, rangeID, range, tenantPrefix);
															#line 10274 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			results->mutations.send(nextOut);
															#line 10275 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_4 = results->mutations.onEmpty();
															#line 10275 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<MergeChangeFeedStreamInternalActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 55553 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1Catch1(__when_expr_4.getError(), std::max(0, loopDepth - 1)); else return a_body1cont3loopBody1cont2when1(__when_expr_4.get(), loopDepth); };
			static_cast<MergeChangeFeedStreamInternalActor*>(this)->actor_wait_state = 5;
															#line 10275 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< MergeChangeFeedStreamInternalActor, 4, Void >*>(static_cast<MergeChangeFeedStreamInternalActor*>(this)));
															#line 55558 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}

		return loopDepth;
	}
	int a_body1cont3loopBody1cont2(Void && _,int loopDepth) 
	{
															#line 10239 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		Standalone<VectorRef<MutationsAndVersionRef>> nextOut;
															#line 10240 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		nextVersion = mutations.top().next.version;
															#line 10242 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		streamsUsed.push_back(mutations.top());
															#line 10243 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		nextOut.push_back_deep(nextOut.arena(), mutations.top().next);
															#line 10244 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		mutations.pop();
															#line 10247 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for(;!mutations.empty() && mutations.top().next.version == nextVersion;) {
															#line 10248 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (mutations.top().next.mutations.size() && mutations.top().next.mutations.front().param1 != lastEpochEndPrivateKey)
															#line 55580 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 10250 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				nextOut.back().mutations.append_deep( nextOut.arena(), mutations.top().next.mutations.begin(), mutations.top().next.mutations.size());
															#line 55584 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 10253 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			streamsUsed.push_back(mutations.top());
															#line 10254 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			mutations.pop();
															#line 55590 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 10257 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(nextOut.size() == 1);
															#line 10258 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(nextVersion >= *begin);
															#line 10260 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		*begin = nextVersion + 1;
															#line 10262 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (DEBUG_CF_CLIENT_TRACE)
															#line 55600 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 10263 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent(SevDebug, "TraceChangeFeedClientMergeCursorSending", mergeCursorUID) .detail("Count", streamsUsed.size()) .detail("Version", nextVersion);
															#line 55604 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 10269 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (nextOut.back().mutations.empty())
															#line 55608 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 10270 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ASSERT(results->mutations.isEmpty());
															#line 55612 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1cont3loopBody1cont4(loopDepth);
		}
		else
		{
															#line 10272 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ASSERT(nextOut.back().version > results->lastReturnedVersion.get());
															#line 10273 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			writeMutationsToCache(cacheData, db, nextOut, rangeID, range, tenantPrefix);
															#line 10274 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			results->mutations.send(nextOut);
															#line 10275 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_4 = results->mutations.onEmpty();
															#line 10275 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<MergeChangeFeedStreamInternalActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 55627 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1Catch1(__when_expr_4.getError(), std::max(0, loopDepth - 1)); else return a_body1cont3loopBody1cont2when1(__when_expr_4.get(), loopDepth); };
			static_cast<MergeChangeFeedStreamInternalActor*>(this)->actor_wait_state = 5;
															#line 10275 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< MergeChangeFeedStreamInternalActor, 4, Void >*>(static_cast<MergeChangeFeedStreamInternalActor*>(this)));
															#line 55632 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}

		return loopDepth;
	}
	int a_body1cont3loopBody1cont1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1cont1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<MergeChangeFeedStreamInternalActor*>(this)->actor_wait_state > 0) static_cast<MergeChangeFeedStreamInternalActor*>(this)->actor_wait_state = 0;
		static_cast<MergeChangeFeedStreamInternalActor*>(this)->ActorCallback< MergeChangeFeedStreamInternalActor, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< MergeChangeFeedStreamInternalActor, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("mergeChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont3loopBody1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("mergeChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< MergeChangeFeedStreamInternalActor, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("mergeChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont3loopBody1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("mergeChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< MergeChangeFeedStreamInternalActor, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("mergeChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("mergeChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 3);

	}
	int a_body1cont3loopBody1cont4(int loopDepth) 
	{
															#line 10279 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (nextVersion > results->lastReturnedVersion.get())
															#line 55705 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 10280 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			results->lastReturnedVersion.set(nextVersion);
															#line 55709 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
		if (loopDepth == 0) return a_body1cont3loopHead1(0);

		return loopDepth;
	}
	int a_body1cont3loopBody1cont9(Void const& _,int loopDepth) 
	{
															#line 10276 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_5 = delay(0);
															#line 10276 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<MergeChangeFeedStreamInternalActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 55721 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_5.isReady()) { if (__when_expr_5.isError()) return a_body1Catch1(__when_expr_5.getError(), std::max(0, loopDepth - 1)); else return a_body1cont3loopBody1cont9when1(__when_expr_5.get(), loopDepth); };
		static_cast<MergeChangeFeedStreamInternalActor*>(this)->actor_wait_state = 6;
															#line 10276 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_5.addCallbackAndClear(static_cast<ActorCallback< MergeChangeFeedStreamInternalActor, 5, Void >*>(static_cast<MergeChangeFeedStreamInternalActor*>(this)));
															#line 55726 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont3loopBody1cont9(Void && _,int loopDepth) 
	{
															#line 10276 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_5 = delay(0);
															#line 10276 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<MergeChangeFeedStreamInternalActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 55737 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_5.isReady()) { if (__when_expr_5.isError()) return a_body1Catch1(__when_expr_5.getError(), std::max(0, loopDepth - 1)); else return a_body1cont3loopBody1cont9when1(__when_expr_5.get(), loopDepth); };
		static_cast<MergeChangeFeedStreamInternalActor*>(this)->actor_wait_state = 6;
															#line 10276 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_5.addCallbackAndClear(static_cast<ActorCallback< MergeChangeFeedStreamInternalActor, 5, Void >*>(static_cast<MergeChangeFeedStreamInternalActor*>(this)));
															#line 55742 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont3loopBody1cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1cont9(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1cont9(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose5() 
	{
		if (static_cast<MergeChangeFeedStreamInternalActor*>(this)->actor_wait_state > 0) static_cast<MergeChangeFeedStreamInternalActor*>(this)->actor_wait_state = 0;
		static_cast<MergeChangeFeedStreamInternalActor*>(this)->ActorCallback< MergeChangeFeedStreamInternalActor, 4, Void >::remove();

	}
	void a_callback_fire(ActorCallback< MergeChangeFeedStreamInternalActor, 4, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("mergeChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont3loopBody1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("mergeChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_fire(ActorCallback< MergeChangeFeedStreamInternalActor, 4, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("mergeChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont3loopBody1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("mergeChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_error(ActorCallback< MergeChangeFeedStreamInternalActor, 4, Void >*,Error err) 
	{
		fdb_probe_actor_enter("mergeChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("mergeChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 4);

	}
	int a_body1cont3loopBody1cont10(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1cont4(loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1cont10(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1cont4(loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1cont9when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1cont10(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1cont9when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1cont10(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose6() 
	{
		if (static_cast<MergeChangeFeedStreamInternalActor*>(this)->actor_wait_state > 0) static_cast<MergeChangeFeedStreamInternalActor*>(this)->actor_wait_state = 0;
		static_cast<MergeChangeFeedStreamInternalActor*>(this)->ActorCallback< MergeChangeFeedStreamInternalActor, 5, Void >::remove();

	}
	void a_callback_fire(ActorCallback< MergeChangeFeedStreamInternalActor, 5, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("mergeChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1cont3loopBody1cont9when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("mergeChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_fire(ActorCallback< MergeChangeFeedStreamInternalActor, 5, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("mergeChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1cont3loopBody1cont9when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("mergeChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_error(ActorCallback< MergeChangeFeedStreamInternalActor, 5, Void >*,Error err) 
	{
		fdb_probe_actor_enter("mergeChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("mergeChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 5);

	}
															#line 10166 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<ChangeFeedData> results;
															#line 10166 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Key rangeID;
															#line 10166 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeyRange range;
															#line 10166 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	std::vector<std::pair<StorageServerInterface, KeyRange>> interfs;
															#line 10166 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	std::vector<MutationAndVersionStream> streams;
															#line 10166 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Version* begin;
															#line 10166 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Version end;
															#line 10166 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	UID mergeCursorUID;
															#line 10166 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<DatabaseContext> db;
															#line 10166 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<ChangeFeedCacheData> cacheData;
															#line 10166 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Key tenantPrefix;
															#line 10177 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Promise<Void> refresh;
															#line 10180 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	std::priority_queue<MutationAndVersionStream, std::vector<MutationAndVersionStream>> mutations;
															#line 10204 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	int interfNum;
															#line 10206 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	std::vector<MutationAndVersionStream> streamsUsed;
															#line 10212 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Version nextVersion;
															#line 55917 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via mergeChangeFeedStreamInternal()
															#line 10166 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class MergeChangeFeedStreamInternalActor final : public Actor<Void>, public ActorCallback< MergeChangeFeedStreamInternalActor, 0, Void >, public ActorCallback< MergeChangeFeedStreamInternalActor, 1, Void >, public ActorSingleCallback< MergeChangeFeedStreamInternalActor, 2, Standalone<MutationsAndVersionRef> >, public ActorCallback< MergeChangeFeedStreamInternalActor, 3, Void >, public ActorCallback< MergeChangeFeedStreamInternalActor, 4, Void >, public ActorCallback< MergeChangeFeedStreamInternalActor, 5, Void >, public FastAllocated<MergeChangeFeedStreamInternalActor>, public MergeChangeFeedStreamInternalActorState<MergeChangeFeedStreamInternalActor> {
															#line 55922 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<MergeChangeFeedStreamInternalActor>::operator new;
	using FastAllocated<MergeChangeFeedStreamInternalActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< MergeChangeFeedStreamInternalActor, 0, Void >;
friend struct ActorCallback< MergeChangeFeedStreamInternalActor, 1, Void >;
friend struct ActorSingleCallback< MergeChangeFeedStreamInternalActor, 2, Standalone<MutationsAndVersionRef> >;
friend struct ActorCallback< MergeChangeFeedStreamInternalActor, 3, Void >;
friend struct ActorCallback< MergeChangeFeedStreamInternalActor, 4, Void >;
friend struct ActorCallback< MergeChangeFeedStreamInternalActor, 5, Void >;
															#line 10166 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	MergeChangeFeedStreamInternalActor(Reference<ChangeFeedData> const& results,Key const& rangeID,KeyRange const& range,std::vector<std::pair<StorageServerInterface, KeyRange>> const& interfs,std::vector<MutationAndVersionStream> const& streams,Version* const& begin,Version const& end,UID const& mergeCursorUID,Reference<DatabaseContext> const& db,Reference<ChangeFeedCacheData> const& cacheData,Key const& tenantPrefix) 
															#line 55938 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Void>(),
		   MergeChangeFeedStreamInternalActorState<MergeChangeFeedStreamInternalActor>(results, rangeID, range, interfs, streams, begin, end, mergeCursorUID, db, cacheData, tenantPrefix)
	{
		fdb_probe_actor_enter("mergeChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("mergeChangeFeedStreamInternal");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("mergeChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< MergeChangeFeedStreamInternalActor, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< MergeChangeFeedStreamInternalActor, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorSingleCallback< MergeChangeFeedStreamInternalActor, 2, Standalone<MutationsAndVersionRef> >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< MergeChangeFeedStreamInternalActor, 3, Void >*)0, actor_cancelled()); break;
		case 5: this->a_callback_error((ActorCallback< MergeChangeFeedStreamInternalActor, 4, Void >*)0, actor_cancelled()); break;
		case 6: this->a_callback_error((ActorCallback< MergeChangeFeedStreamInternalActor, 5, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 10166 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<Void> mergeChangeFeedStreamInternal( Reference<ChangeFeedData> const& results, Key const& rangeID, KeyRange const& range, std::vector<std::pair<StorageServerInterface, KeyRange>> const& interfs, std::vector<MutationAndVersionStream> const& streams, Version* const& begin, Version const& end, UID const& mergeCursorUID, Reference<DatabaseContext> const& db, Reference<ChangeFeedCacheData> const& cacheData, Key const& tenantPrefix ) {
															#line 10166 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Void>(new MergeChangeFeedStreamInternalActor(results, rangeID, range, interfs, streams, begin, end, mergeCursorUID, db, cacheData, tenantPrefix));
															#line 55971 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 10284 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

															#line 55976 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via mergeChangeFeedStream()
															#line 10285 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class MergeChangeFeedStreamActor>
															#line 10285 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class MergeChangeFeedStreamActorState {
															#line 55983 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 10285 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	MergeChangeFeedStreamActorState(Reference<DatabaseContext> const& db,std::vector<std::pair<StorageServerInterface, KeyRange>> const& interfs,Reference<ChangeFeedData> const& results,Key const& rangeID,KeyRange const& range,Version* const& begin,Version const& end,int const& replyBufferSize,bool const& canReadPopped,ReadOptions const& readOptions,bool const& encrypted,Reference<ChangeFeedCacheData> const& cacheData,Key const& tenantPrefix) 
															#line 10285 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 10285 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : db(db),
															#line 10285 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   interfs(interfs),
															#line 10285 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   results(results),
															#line 10285 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   rangeID(rangeID),
															#line 10285 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   range(range),
															#line 10285 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   begin(begin),
															#line 10285 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   end(end),
															#line 10285 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   replyBufferSize(replyBufferSize),
															#line 10285 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   canReadPopped(canReadPopped),
															#line 10285 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   readOptions(readOptions),
															#line 10285 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   encrypted(encrypted),
															#line 10285 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   cacheData(cacheData),
															#line 10285 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   tenantPrefix(tenantPrefix),
															#line 10298 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   fetchers(interfs.size()),
															#line 10299 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   onErrors(interfs.size()),
															#line 10300 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   streams(interfs.size()),
															#line 10301 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   tssDatas()
															#line 56022 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("mergeChangeFeedStream", reinterpret_cast<unsigned long>(this));

	}
	~MergeChangeFeedStreamActorState() 
	{
		fdb_probe_actor_destroy("mergeChangeFeedStream", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 10302 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tssDatas.reserve(interfs.size());
															#line 10303 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			for(int i = 0;i < interfs.size();i++) {
															#line 10304 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				tssDatas.push_back({});
															#line 56041 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 10307 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			CODE_PROBE(interfs.size() > 10, "Large change feed merge cursor");
															#line 10308 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			CODE_PROBE(interfs.size() > 100, "Very large change feed merge cursor");
															#line 10310 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			mergeCursorUID = UID();
															#line 10311 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			debugUIDs = std::vector<UID>();
															#line 10312 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			results->streams.clear();
															#line 10313 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			for(int i = 0;i < interfs.size();i++) {
															#line 10314 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				ChangeFeedStreamRequest req;
															#line 10315 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				req.rangeID = rangeID;
															#line 10316 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				req.begin = *begin;
															#line 10317 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				req.end = end;
															#line 10318 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				req.range = interfs[i].second;
															#line 10319 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				req.canReadPopped = canReadPopped;
															#line 10321 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				req.replyBufferSize = replyBufferSize / interfs.size();
															#line 10322 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (replyBufferSize != -1 && req.replyBufferSize < CLIENT_KNOBS->CHANGE_FEED_STREAM_MIN_BYTES)
															#line 56071 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 10323 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					req.replyBufferSize = CLIENT_KNOBS->CHANGE_FEED_STREAM_MIN_BYTES;
															#line 56075 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
															#line 10325 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				req.options = readOptions;
															#line 10326 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				req.id = deterministicRandom()->randomUniqueID();
															#line 10327 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				req.encrypted = encrypted;
															#line 10329 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				debugUIDs.push_back(req.id);
															#line 10330 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				mergeCursorUID = UID(mergeCursorUID.first() ^ req.id.first(), mergeCursorUID.second() ^ req.id.second());
															#line 10332 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				results->streams.push_back(interfs[i].first.changeFeedStream.getReplyStream(req));
															#line 10333 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				maybeDuplicateTSSChangeFeedStream(req, interfs[i].first.changeFeedStream, db->enableLocalityLoadBalance ? &db->queueModel : nullptr, &tssDatas[i]);
															#line 56091 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 10339 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			results->maxSeenVersion = invalidVersion;
															#line 10340 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			results->storageData.clear();
															#line 10341 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			Promise<Void> refresh = results->refresh;
															#line 10342 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			results->refresh = Promise<Void>();
															#line 10343 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			for(int i = 0;i < interfs.size();i++) {
															#line 10344 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				results->storageData.push_back(db->getStorageData(interfs[i].first));
															#line 56105 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 10346 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			results->notAtLatest.set(interfs.size());
															#line 10347 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (results->context)
															#line 56111 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 10348 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				results->context->notAtLatestChangeFeeds[results->dbgid] = results.getPtr();
															#line 10349 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				results->created = now();
															#line 56117 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 10351 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			refresh.send(Void());
															#line 10353 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			for(int i = 0;i < interfs.size();i++) {
															#line 10354 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (DEBUG_CF_CLIENT_TRACE)
															#line 56125 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 10355 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					TraceEvent(SevDebug, "TraceChangeFeedClientMergeCursorInit", debugUIDs[i]) .detail("CursorDebugUID", mergeCursorUID) .detail("Idx", i) .detail("FeedID", rangeID) .detail("MergeRange", KeyRangeRef(interfs.front().second.begin, interfs.back().second.end)) .detail("PartialRange", interfs[i].second) .detail("Begin", *begin) .detail("End", end) .detail("CanReadPopped", canReadPopped);
															#line 56129 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
															#line 10365 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				onErrors[i] = results->streams[i].onError();
															#line 10366 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				fetchers[i] = partialChangeFeedStream(interfs[i].first, streams[i].results, results->streams[i], *begin, end, results, results->storageData[i], debugUIDs[i], &tssDatas[i]);
															#line 56135 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 10377 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_0 = waitForAny(onErrors) || mergeChangeFeedStreamInternal( results, rangeID, range, interfs, streams, begin, end, mergeCursorUID, db, cacheData, tenantPrefix);
															#line 10377 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<MergeChangeFeedStreamActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 56141 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<MergeChangeFeedStreamActor*>(this)->actor_wait_state = 1;
															#line 10377 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< MergeChangeFeedStreamActor, 0, Void >*>(static_cast<MergeChangeFeedStreamActor*>(this)));
															#line 56146 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~MergeChangeFeedStreamActorState();
		static_cast<MergeChangeFeedStreamActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void const& _,int loopDepth) 
	{
															#line 10381 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<MergeChangeFeedStreamActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~MergeChangeFeedStreamActorState(); static_cast<MergeChangeFeedStreamActor*>(this)->destroy(); return 0; }
															#line 56169 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<MergeChangeFeedStreamActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~MergeChangeFeedStreamActorState();
		static_cast<MergeChangeFeedStreamActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1(Void && _,int loopDepth) 
	{
															#line 10381 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<MergeChangeFeedStreamActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~MergeChangeFeedStreamActorState(); static_cast<MergeChangeFeedStreamActor*>(this)->destroy(); return 0; }
															#line 56181 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<MergeChangeFeedStreamActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~MergeChangeFeedStreamActorState();
		static_cast<MergeChangeFeedStreamActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<MergeChangeFeedStreamActor*>(this)->actor_wait_state > 0) static_cast<MergeChangeFeedStreamActor*>(this)->actor_wait_state = 0;
		static_cast<MergeChangeFeedStreamActor*>(this)->ActorCallback< MergeChangeFeedStreamActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< MergeChangeFeedStreamActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("mergeChangeFeedStream", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("mergeChangeFeedStream", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< MergeChangeFeedStreamActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("mergeChangeFeedStream", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("mergeChangeFeedStream", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< MergeChangeFeedStreamActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("mergeChangeFeedStream", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("mergeChangeFeedStream", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 10285 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<DatabaseContext> db;
															#line 10285 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	std::vector<std::pair<StorageServerInterface, KeyRange>> interfs;
															#line 10285 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<ChangeFeedData> results;
															#line 10285 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Key rangeID;
															#line 10285 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeyRange range;
															#line 10285 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Version* begin;
															#line 10285 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Version end;
															#line 10285 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	int replyBufferSize;
															#line 10285 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	bool canReadPopped;
															#line 10285 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	ReadOptions readOptions;
															#line 10285 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	bool encrypted;
															#line 10285 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<ChangeFeedCacheData> cacheData;
															#line 10285 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Key tenantPrefix;
															#line 10298 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	std::vector<Future<Void>> fetchers;
															#line 10299 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	std::vector<Future<Void>> onErrors;
															#line 10300 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	std::vector<MutationAndVersionStream> streams;
															#line 10301 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	std::vector<Optional<ChangeFeedTSSValidationData>> tssDatas;
															#line 10310 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	UID mergeCursorUID;
															#line 10311 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	std::vector<UID> debugUIDs;
															#line 56290 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via mergeChangeFeedStream()
															#line 10285 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class MergeChangeFeedStreamActor final : public Actor<Void>, public ActorCallback< MergeChangeFeedStreamActor, 0, Void >, public FastAllocated<MergeChangeFeedStreamActor>, public MergeChangeFeedStreamActorState<MergeChangeFeedStreamActor> {
															#line 56295 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<MergeChangeFeedStreamActor>::operator new;
	using FastAllocated<MergeChangeFeedStreamActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< MergeChangeFeedStreamActor, 0, Void >;
															#line 10285 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	MergeChangeFeedStreamActor(Reference<DatabaseContext> const& db,std::vector<std::pair<StorageServerInterface, KeyRange>> const& interfs,Reference<ChangeFeedData> const& results,Key const& rangeID,KeyRange const& range,Version* const& begin,Version const& end,int const& replyBufferSize,bool const& canReadPopped,ReadOptions const& readOptions,bool const& encrypted,Reference<ChangeFeedCacheData> const& cacheData,Key const& tenantPrefix) 
															#line 56306 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Void>(),
		   MergeChangeFeedStreamActorState<MergeChangeFeedStreamActor>(db, interfs, results, rangeID, range, begin, end, replyBufferSize, canReadPopped, readOptions, encrypted, cacheData, tenantPrefix)
	{
		fdb_probe_actor_enter("mergeChangeFeedStream", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("mergeChangeFeedStream");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("mergeChangeFeedStream", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< MergeChangeFeedStreamActor, 0, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 10285 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<Void> mergeChangeFeedStream( Reference<DatabaseContext> const& db, std::vector<std::pair<StorageServerInterface, KeyRange>> const& interfs, Reference<ChangeFeedData> const& results, Key const& rangeID, KeyRange const& range, Version* const& begin, Version const& end, int const& replyBufferSize, bool const& canReadPopped, ReadOptions const& readOptions, bool const& encrypted, Reference<ChangeFeedCacheData> const& cacheData, Key const& tenantPrefix ) {
															#line 10285 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Void>(new MergeChangeFeedStreamActor(db, interfs, results, rangeID, range, begin, end, replyBufferSize, canReadPopped, readOptions, encrypted, cacheData, tenantPrefix));
															#line 56334 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 10383 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

															#line 56339 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via getChangeFeedRange()
															#line 10384 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class GetChangeFeedRangeActor>
															#line 10384 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetChangeFeedRangeActorState {
															#line 56346 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 10384 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetChangeFeedRangeActorState(Reference<DatabaseContext> const& db,Database const& cx,Key const& rangeID,Version const& begin = 0) 
															#line 10384 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 10384 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : db(db),
															#line 10384 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   cx(cx),
															#line 10384 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   rangeID(rangeID),
															#line 10384 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   begin(begin),
															#line 10385 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   tr(cx),
															#line 10386 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   rangeIDKey(rangeID.withPrefix(changeFeedPrefix))
															#line 56363 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("getChangeFeedRange", reinterpret_cast<unsigned long>(this));

	}
	~GetChangeFeedRangeActorState() 
	{
		fdb_probe_actor_destroy("getChangeFeedRange", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 10388 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			auto cacheLoc = db->changeFeedCache.find(rangeID);
															#line 10389 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (cacheLoc != db->changeFeedCache.end())
															#line 56380 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 10390 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (!static_cast<GetChangeFeedRangeActor*>(this)->SAV<KeyRange>::futures) { (void)(cacheLoc->second); this->~GetChangeFeedRangeActorState(); static_cast<GetChangeFeedRangeActor*>(this)->destroy(); return 0; }
															#line 56384 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				new (&static_cast<GetChangeFeedRangeActor*>(this)->SAV< KeyRange >::value()) KeyRange(cacheLoc->second);
				this->~GetChangeFeedRangeActorState();
				static_cast<GetChangeFeedRangeActor*>(this)->finishSendAndDelPromiseRef();
				return 0;
			}
															#line 10393 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			;
															#line 56392 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~GetChangeFeedRangeActorState();
		static_cast<GetChangeFeedRangeActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
		try {
															#line 10395 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tr.setOption(FDBTransactionOptions::READ_SYSTEM_KEYS);
															#line 10396 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tr.setOption(FDBTransactionOptions::PRIORITY_SYSTEM_IMMEDIATE);
															#line 10397 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tr.setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 10398 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Version> __when_expr_0 = tr.getReadVersion();
															#line 10398 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<GetChangeFeedRangeActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 56431 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1loopBody1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
			static_cast<GetChangeFeedRangeActor*>(this)->actor_wait_state = 1;
															#line 10398 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< GetChangeFeedRangeActor, 0, Version >*>(static_cast<GetChangeFeedRangeActor*>(this)));
															#line 56436 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 10421 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_3 = tr.onError(e);
															#line 10421 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<GetChangeFeedRangeActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 56460 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch1(__when_expr_3.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1Catch1when1(__when_expr_3.get(), loopDepth); };
			static_cast<GetChangeFeedRangeActor*>(this)->actor_wait_state = 4;
															#line 10421 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< GetChangeFeedRangeActor, 3, Void >*>(static_cast<GetChangeFeedRangeActor*>(this)));
															#line 56465 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(Version const& readVer,int loopDepth) 
	{
															#line 10399 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (readVer < begin)
															#line 56480 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 10400 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_1 = delay(FLOW_KNOBS->PREVENT_FAST_SPIN_DELAY);
															#line 10400 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<GetChangeFeedRangeActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 56486 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
			static_cast<GetChangeFeedRangeActor*>(this)->actor_wait_state = 2;
															#line 10400 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< GetChangeFeedRangeActor, 1, Void >*>(static_cast<GetChangeFeedRangeActor*>(this)));
															#line 56491 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
															#line 10403 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Optional<Value>> __when_expr_2 = tr.get(rangeIDKey);
															#line 10403 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<GetChangeFeedRangeActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 56500 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1loopBody1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1loopBody1cont2when2(__when_expr_2.get(), loopDepth); };
			static_cast<GetChangeFeedRangeActor*>(this)->actor_wait_state = 3;
															#line 10403 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< GetChangeFeedRangeActor, 2, Optional<Value> >*>(static_cast<GetChangeFeedRangeActor*>(this)));
															#line 56505 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(Version && readVer,int loopDepth) 
	{
															#line 10399 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (readVer < begin)
															#line 56515 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 10400 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_1 = delay(FLOW_KNOBS->PREVENT_FAST_SPIN_DELAY);
															#line 10400 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<GetChangeFeedRangeActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 56521 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
			static_cast<GetChangeFeedRangeActor*>(this)->actor_wait_state = 2;
															#line 10400 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< GetChangeFeedRangeActor, 1, Void >*>(static_cast<GetChangeFeedRangeActor*>(this)));
															#line 56526 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
															#line 10403 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Optional<Value>> __when_expr_2 = tr.get(rangeIDKey);
															#line 10403 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<GetChangeFeedRangeActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 56535 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1loopBody1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1loopBody1cont2when2(__when_expr_2.get(), loopDepth); };
			static_cast<GetChangeFeedRangeActor*>(this)->actor_wait_state = 3;
															#line 10403 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< GetChangeFeedRangeActor, 2, Optional<Value> >*>(static_cast<GetChangeFeedRangeActor*>(this)));
															#line 56540 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}

		return loopDepth;
	}
	int a_body1loopBody1when1(Version const& readVer,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(readVer, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Version && readVer,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(std::move(readVer), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<GetChangeFeedRangeActor*>(this)->actor_wait_state > 0) static_cast<GetChangeFeedRangeActor*>(this)->actor_wait_state = 0;
		static_cast<GetChangeFeedRangeActor*>(this)->ActorCallback< GetChangeFeedRangeActor, 0, Version >::remove();

	}
	void a_callback_fire(ActorCallback< GetChangeFeedRangeActor, 0, Version >*,Version const& value) 
	{
		fdb_probe_actor_enter("getChangeFeedRange", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getChangeFeedRange", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< GetChangeFeedRangeActor, 0, Version >*,Version && value) 
	{
		fdb_probe_actor_enter("getChangeFeedRange", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getChangeFeedRange", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< GetChangeFeedRangeActor, 0, Version >*,Error err) 
	{
		fdb_probe_actor_enter("getChangeFeedRange", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getChangeFeedRange", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1cont3(int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont10(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont4(Void const& _,int loopDepth) 
	{
															#line 10401 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		tr.reset();
															#line 56619 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont4(Void && _,int loopDepth) 
	{
															#line 10401 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		tr.reset();
															#line 56628 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont4(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont4(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<GetChangeFeedRangeActor*>(this)->actor_wait_state > 0) static_cast<GetChangeFeedRangeActor*>(this)->actor_wait_state = 0;
		static_cast<GetChangeFeedRangeActor*>(this)->ActorCallback< GetChangeFeedRangeActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetChangeFeedRangeActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getChangeFeedRange", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getChangeFeedRange", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< GetChangeFeedRangeActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getChangeFeedRange", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getChangeFeedRange", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< GetChangeFeedRangeActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getChangeFeedRange", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getChangeFeedRange", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1loopBody1cont6(Optional<Value> const& val,int loopDepth) 
	{
															#line 10404 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!val.present())
															#line 56700 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 10405 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ASSERT(tr.getReadVersion().isReady());
															#line 10406 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent(SevDebug, "ChangeFeedNotRegisteredGet") .detail("FeedID", rangeID) .detail("FullFeedKey", rangeIDKey) .detail("BeginVersion", begin) .detail("ReadVersion", tr.getReadVersion().get());
															#line 10411 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			return a_body1loopBody1Catch1(change_feed_not_registered(), loopDepth);
															#line 56708 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 10413 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (db->changeFeedCache.size() > CLIENT_KNOBS->CHANGE_FEED_CACHE_SIZE)
															#line 56712 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 10414 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			db->changeFeedCache.clear();
															#line 56716 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 10416 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		KeyRange range = std::get<0>(decodeChangeFeedValue(val.get()));
															#line 10417 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		db->changeFeedCache[rangeID] = range;
															#line 10418 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<GetChangeFeedRangeActor*>(this)->SAV<KeyRange>::futures) { (void)(range); this->~GetChangeFeedRangeActorState(); static_cast<GetChangeFeedRangeActor*>(this)->destroy(); return 0; }
															#line 56724 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<GetChangeFeedRangeActor*>(this)->SAV< KeyRange >::value()) KeyRange(range);
		this->~GetChangeFeedRangeActorState();
		static_cast<GetChangeFeedRangeActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1cont6(Optional<Value> && val,int loopDepth) 
	{
															#line 10404 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!val.present())
															#line 56736 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 10405 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ASSERT(tr.getReadVersion().isReady());
															#line 10406 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent(SevDebug, "ChangeFeedNotRegisteredGet") .detail("FeedID", rangeID) .detail("FullFeedKey", rangeIDKey) .detail("BeginVersion", begin) .detail("ReadVersion", tr.getReadVersion().get());
															#line 10411 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			return a_body1loopBody1Catch1(change_feed_not_registered(), loopDepth);
															#line 56744 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 10413 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (db->changeFeedCache.size() > CLIENT_KNOBS->CHANGE_FEED_CACHE_SIZE)
															#line 56748 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 10414 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			db->changeFeedCache.clear();
															#line 56752 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 10416 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		KeyRange range = std::get<0>(decodeChangeFeedValue(val.get()));
															#line 10417 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		db->changeFeedCache[rangeID] = range;
															#line 10418 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<GetChangeFeedRangeActor*>(this)->SAV<KeyRange>::futures) { (void)(range); this->~GetChangeFeedRangeActorState(); static_cast<GetChangeFeedRangeActor*>(this)->destroy(); return 0; }
															#line 56760 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<GetChangeFeedRangeActor*>(this)->SAV< KeyRange >::value()) KeyRange(range);
		this->~GetChangeFeedRangeActorState();
		static_cast<GetChangeFeedRangeActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2when2(Optional<Value> const& val,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont6(val, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2when2(Optional<Value> && val,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont6(std::move(val), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<GetChangeFeedRangeActor*>(this)->actor_wait_state > 0) static_cast<GetChangeFeedRangeActor*>(this)->actor_wait_state = 0;
		static_cast<GetChangeFeedRangeActor*>(this)->ActorCallback< GetChangeFeedRangeActor, 2, Optional<Value> >::remove();

	}
	void a_callback_fire(ActorCallback< GetChangeFeedRangeActor, 2, Optional<Value> >*,Optional<Value> const& value) 
	{
		fdb_probe_actor_enter("getChangeFeedRange", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont2when2(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getChangeFeedRange", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< GetChangeFeedRangeActor, 2, Optional<Value> >*,Optional<Value> && value) 
	{
		fdb_probe_actor_enter("getChangeFeedRange", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont2when2(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getChangeFeedRange", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< GetChangeFeedRangeActor, 2, Optional<Value> >*,Error err) 
	{
		fdb_probe_actor_enter("getChangeFeedRange", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getChangeFeedRange", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1loopBody1cont10(int loopDepth) 
	{
		try {
			loopDepth = a_body1loopBody1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<GetChangeFeedRangeActor*>(this)->actor_wait_state > 0) static_cast<GetChangeFeedRangeActor*>(this)->actor_wait_state = 0;
		static_cast<GetChangeFeedRangeActor*>(this)->ActorCallback< GetChangeFeedRangeActor, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetChangeFeedRangeActor, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getChangeFeedRange", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getChangeFeedRange", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< GetChangeFeedRangeActor, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getChangeFeedRange", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getChangeFeedRange", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< GetChangeFeedRangeActor, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getChangeFeedRange", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getChangeFeedRange", reinterpret_cast<unsigned long>(this), 3);

	}
															#line 10384 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<DatabaseContext> db;
															#line 10384 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Database cx;
															#line 10384 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Key rangeID;
															#line 10384 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Version begin;
															#line 10385 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Transaction tr;
															#line 10386 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Key rangeIDKey;
															#line 56931 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via getChangeFeedRange()
															#line 10384 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetChangeFeedRangeActor final : public Actor<KeyRange>, public ActorCallback< GetChangeFeedRangeActor, 0, Version >, public ActorCallback< GetChangeFeedRangeActor, 1, Void >, public ActorCallback< GetChangeFeedRangeActor, 2, Optional<Value> >, public ActorCallback< GetChangeFeedRangeActor, 3, Void >, public FastAllocated<GetChangeFeedRangeActor>, public GetChangeFeedRangeActorState<GetChangeFeedRangeActor> {
															#line 56936 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<GetChangeFeedRangeActor>::operator new;
	using FastAllocated<GetChangeFeedRangeActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<KeyRange>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< GetChangeFeedRangeActor, 0, Version >;
friend struct ActorCallback< GetChangeFeedRangeActor, 1, Void >;
friend struct ActorCallback< GetChangeFeedRangeActor, 2, Optional<Value> >;
friend struct ActorCallback< GetChangeFeedRangeActor, 3, Void >;
															#line 10384 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetChangeFeedRangeActor(Reference<DatabaseContext> const& db,Database const& cx,Key const& rangeID,Version const& begin = 0) 
															#line 56950 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<KeyRange>(),
		   GetChangeFeedRangeActorState<GetChangeFeedRangeActor>(db, cx, rangeID, begin)
	{
		fdb_probe_actor_enter("getChangeFeedRange", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("getChangeFeedRange");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("getChangeFeedRange", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< GetChangeFeedRangeActor, 0, Version >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< GetChangeFeedRangeActor, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< GetChangeFeedRangeActor, 2, Optional<Value> >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< GetChangeFeedRangeActor, 3, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 10384 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<KeyRange> getChangeFeedRange( Reference<DatabaseContext> const& db, Database const& cx, Key const& rangeID, Version const& begin = 0 ) {
															#line 10384 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<KeyRange>(new GetChangeFeedRangeActor(db, cx, rangeID, begin));
															#line 56981 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 10425 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

															#line 56986 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via singleChangeFeedStreamInternal()
															#line 10426 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class SingleChangeFeedStreamInternalActor>
															#line 10426 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class SingleChangeFeedStreamInternalActorState {
															#line 56993 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 10426 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	SingleChangeFeedStreamInternalActorState(KeyRange const& range,Reference<ChangeFeedData> const& results,Key const& rangeID,Version* const& begin,Version const& end,Optional<ChangeFeedTSSValidationData>* const& tssData,Reference<DatabaseContext> const& db,Reference<ChangeFeedCacheData> const& cacheData,Key const& tenantPrefix) 
															#line 10426 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 10426 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : range(range),
															#line 10426 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   results(results),
															#line 10426 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   rangeID(rangeID),
															#line 10426 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   begin(begin),
															#line 10426 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   end(end),
															#line 10426 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   tssData(tssData),
															#line 10426 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   db(db),
															#line 10426 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   cacheData(cacheData),
															#line 10426 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   tenantPrefix(tenantPrefix),
															#line 10436 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   refresh(results->refresh)
															#line 57018 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("singleChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this));

	}
	~SingleChangeFeedStreamInternalActorState() 
	{
		fdb_probe_actor_destroy("singleChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 10437 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ASSERT(results->streams.size() == 1);
															#line 10438 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ASSERT(results->storageData.size() == 1);
															#line 10439 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			atLatest = false;
															#line 10442 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_0 = results->mutations.onEmpty();
															#line 10442 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<SingleChangeFeedStreamInternalActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 57041 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<SingleChangeFeedStreamInternalActor*>(this)->actor_wait_state = 1;
															#line 10442 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< SingleChangeFeedStreamInternalActor, 0, Void >*>(static_cast<SingleChangeFeedStreamInternalActor*>(this)));
															#line 57046 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~SingleChangeFeedStreamInternalActorState();
		static_cast<SingleChangeFeedStreamInternalActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void const& _,int loopDepth) 
	{
															#line 10443 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_1 = delay(0);
															#line 10443 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<SingleChangeFeedStreamInternalActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 57071 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<SingleChangeFeedStreamInternalActor*>(this)->actor_wait_state = 2;
															#line 10443 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< SingleChangeFeedStreamInternalActor, 1, Void >*>(static_cast<SingleChangeFeedStreamInternalActor*>(this)));
															#line 57076 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void && _,int loopDepth) 
	{
															#line 10443 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_1 = delay(0);
															#line 10443 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<SingleChangeFeedStreamInternalActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 57087 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<SingleChangeFeedStreamInternalActor*>(this)->actor_wait_state = 2;
															#line 10443 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< SingleChangeFeedStreamInternalActor, 1, Void >*>(static_cast<SingleChangeFeedStreamInternalActor*>(this)));
															#line 57092 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<SingleChangeFeedStreamInternalActor*>(this)->actor_wait_state > 0) static_cast<SingleChangeFeedStreamInternalActor*>(this)->actor_wait_state = 0;
		static_cast<SingleChangeFeedStreamInternalActor*>(this)->ActorCallback< SingleChangeFeedStreamInternalActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< SingleChangeFeedStreamInternalActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("singleChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("singleChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< SingleChangeFeedStreamInternalActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("singleChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("singleChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< SingleChangeFeedStreamInternalActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("singleChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("singleChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont2(Void const& _,int loopDepth) 
	{
															#line 10444 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(results->mutations.isEmpty());
															#line 10446 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (*begin - 1 > results->lastReturnedVersion.get())
															#line 57166 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 10447 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			results->lastReturnedVersion.set(*begin - 1);
															#line 10448 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!refresh.canBeSet())
															#line 57172 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
				try {
															#line 10451 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					StrictFuture<Void> __when_expr_2 = Future<Void>(Void());
															#line 10451 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					if (static_cast<SingleChangeFeedStreamInternalActor*>(this)->actor_wait_state < 0) return a_body1cont2Catch1(actor_cancelled(), loopDepth);
															#line 57179 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1cont2Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont2when1(__when_expr_2.get(), loopDepth); };
					static_cast<SingleChangeFeedStreamInternalActor*>(this)->actor_wait_state = 3;
															#line 10451 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< SingleChangeFeedStreamInternalActor, 2, Void >*>(static_cast<SingleChangeFeedStreamInternalActor*>(this)));
															#line 57184 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					loopDepth = 0;
				}
				catch (Error& error) {
					loopDepth = a_body1cont2Catch1(error, loopDepth);
				} catch (...) {
					loopDepth = a_body1cont2Catch1(unknown_error(), loopDepth);
				}
			}
			else
			{
				loopDepth = a_body1cont4(loopDepth);
			}
		}
		else
		{
			loopDepth = a_body1cont3(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont2(Void && _,int loopDepth) 
	{
															#line 10444 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(results->mutations.isEmpty());
															#line 10446 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (*begin - 1 > results->lastReturnedVersion.get())
															#line 57211 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 10447 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			results->lastReturnedVersion.set(*begin - 1);
															#line 10448 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!refresh.canBeSet())
															#line 57217 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
				try {
															#line 10451 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					StrictFuture<Void> __when_expr_2 = Future<Void>(Void());
															#line 10451 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					if (static_cast<SingleChangeFeedStreamInternalActor*>(this)->actor_wait_state < 0) return a_body1cont2Catch1(actor_cancelled(), loopDepth);
															#line 57224 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1cont2Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont2when1(__when_expr_2.get(), loopDepth); };
					static_cast<SingleChangeFeedStreamInternalActor*>(this)->actor_wait_state = 3;
															#line 10451 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< SingleChangeFeedStreamInternalActor, 2, Void >*>(static_cast<SingleChangeFeedStreamInternalActor*>(this)));
															#line 57229 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					loopDepth = 0;
				}
				catch (Error& error) {
					loopDepth = a_body1cont2Catch1(error, loopDepth);
				} catch (...) {
					loopDepth = a_body1cont2Catch1(unknown_error(), loopDepth);
				}
			}
			else
			{
				loopDepth = a_body1cont4(loopDepth);
			}
		}
		else
		{
			loopDepth = a_body1cont3(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<SingleChangeFeedStreamInternalActor*>(this)->actor_wait_state > 0) static_cast<SingleChangeFeedStreamInternalActor*>(this)->actor_wait_state = 0;
		static_cast<SingleChangeFeedStreamInternalActor*>(this)->ActorCallback< SingleChangeFeedStreamInternalActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< SingleChangeFeedStreamInternalActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("singleChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("singleChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< SingleChangeFeedStreamInternalActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("singleChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("singleChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< SingleChangeFeedStreamInternalActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("singleChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("singleChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont3(int loopDepth) 
	{
															#line 10461 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		;
															#line 57317 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont3loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1cont4(int loopDepth) 
	{
		loopDepth = a_body1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1cont5(int loopDepth) 
	{
		loopDepth = a_body1cont4(loopDepth);

		return loopDepth;
	}
	int a_body1cont2Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 10455 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ASSERT(e.code() == error_code_actor_cancelled);
															#line 10456 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			return a_body1Catch1(e, loopDepth);
															#line 57341 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont6(Void const& _,int loopDepth) 
	{
															#line 10453 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(false);
															#line 57355 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont8(loopDepth);

		return loopDepth;
	}
	int a_body1cont6(Void && _,int loopDepth) 
	{
															#line 10453 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(false);
															#line 57364 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont8(loopDepth);

		return loopDepth;
	}
	int a_body1cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont6(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont6(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<SingleChangeFeedStreamInternalActor*>(this)->actor_wait_state > 0) static_cast<SingleChangeFeedStreamInternalActor*>(this)->actor_wait_state = 0;
		static_cast<SingleChangeFeedStreamInternalActor*>(this)->ActorCallback< SingleChangeFeedStreamInternalActor, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< SingleChangeFeedStreamInternalActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("singleChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont2Catch1(error, 0);
		} catch (...) {
			a_body1cont2Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("singleChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< SingleChangeFeedStreamInternalActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("singleChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont2Catch1(error, 0);
		} catch (...) {
			a_body1cont2Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("singleChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< SingleChangeFeedStreamInternalActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("singleChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont2Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont2Catch1(error, 0);
		} catch (...) {
			a_body1cont2Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("singleChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1cont8(int loopDepth) 
	{
		try {
			loopDepth = a_body1cont5(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont3loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1cont3loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1(int loopDepth) 
	{
															#line 10462 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(refresh.canBeSet());
															#line 10463 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		FutureStream<ChangeFeedStreamReply> __when_expr_3 = results->streams[0].getFuture();
															#line 10463 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<SingleChangeFeedStreamInternalActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 57460 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch1(__when_expr_3.getError(), std::max(0, loopDepth - 1)); else return a_body1cont3loopBody1when1(__when_expr_3.pop(), loopDepth); };
		static_cast<SingleChangeFeedStreamInternalActor*>(this)->actor_wait_state = 4;
															#line 10463 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_3.addCallbackAndClear(static_cast<ActorSingleCallback< SingleChangeFeedStreamInternalActor, 3, ChangeFeedStreamReply >*>(static_cast<SingleChangeFeedStreamInternalActor*>(this)));
															#line 57465 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont3loopBody1cont1(int loopDepth) 
	{
															#line 10464 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		*begin = feedReply.mutations.back().version + 1;
															#line 10466 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (feedReply.popVersion > results->popVersion)
															#line 57476 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 10467 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			results->popVersion = feedReply.popVersion;
															#line 57480 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 10469 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (tssData->present())
															#line 57484 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 10470 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tssData->get().updatePopped(feedReply.popVersion);
															#line 57488 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 10474 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		bool anyMutations = false;
															#line 10475 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for( auto& it : feedReply.mutations ) {
															#line 10476 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!it.mutations.empty())
															#line 57496 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 10477 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				anyMutations = true;
															#line 57500 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				break;
			}
		}
															#line 10481 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (anyMutations)
															#line 57506 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 10484 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ASSERT(feedReply.mutations.front().version > results->lastReturnedVersion.get());
															#line 10486 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (tssData->present())
															#line 57512 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 10487 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				tssData->get().send(feedReply);
															#line 57516 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 10490 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			writeMutationsToCache(cacheData, db, feedReply.mutations, rangeID, range, tenantPrefix);
															#line 10491 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			results->mutations.send( Standalone<VectorRef<MutationsAndVersionRef>>(feedReply.mutations, feedReply.arena));
															#line 10495 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_4 = results->mutations.onEmpty();
															#line 10495 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<SingleChangeFeedStreamInternalActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 57526 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1Catch1(__when_expr_4.getError(), std::max(0, loopDepth - 1)); else return a_body1cont3loopBody1cont1when1(__when_expr_4.get(), loopDepth); };
			static_cast<SingleChangeFeedStreamInternalActor*>(this)->actor_wait_state = 5;
															#line 10495 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< SingleChangeFeedStreamInternalActor, 4, Void >*>(static_cast<SingleChangeFeedStreamInternalActor*>(this)));
															#line 57531 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1cont3loopBody1cont2(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont3loopBody1when1(ChangeFeedStreamReply const& __feedReply,int loopDepth) 
	{
															#line 10463 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		feedReply = __feedReply;
															#line 57545 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont3loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1when1(ChangeFeedStreamReply && __feedReply,int loopDepth) 
	{
		feedReply = std::move(__feedReply);
		loopDepth = a_body1cont3loopBody1cont1(loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<SingleChangeFeedStreamInternalActor*>(this)->actor_wait_state > 0) static_cast<SingleChangeFeedStreamInternalActor*>(this)->actor_wait_state = 0;
		static_cast<SingleChangeFeedStreamInternalActor*>(this)->ActorSingleCallback< SingleChangeFeedStreamInternalActor, 3, ChangeFeedStreamReply >::remove();

	}
	void a_callback_fire(ActorSingleCallback< SingleChangeFeedStreamInternalActor, 3, ChangeFeedStreamReply >*,ChangeFeedStreamReply const& value) 
	{
		fdb_probe_actor_enter("singleChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont3loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("singleChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorSingleCallback< SingleChangeFeedStreamInternalActor, 3, ChangeFeedStreamReply >*,ChangeFeedStreamReply && value) 
	{
		fdb_probe_actor_enter("singleChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont3loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("singleChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorSingleCallback< SingleChangeFeedStreamInternalActor, 3, ChangeFeedStreamReply >*,Error err) 
	{
		fdb_probe_actor_enter("singleChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("singleChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 3);

	}
	int a_body1cont3loopBody1cont2(int loopDepth) 
	{
															#line 10501 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (feedReply.mutations.back().version > results->lastReturnedVersion.get())
															#line 57612 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 10502 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			results->lastReturnedVersion.set(feedReply.mutations.back().version);
															#line 57616 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 10505 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!refresh.canBeSet())
															#line 57620 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
			try {
															#line 10508 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				StrictFuture<Void> __when_expr_6 = Future<Void>(Void());
															#line 10508 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (static_cast<SingleChangeFeedStreamInternalActor*>(this)->actor_wait_state < 0) return a_body1cont3loopBody1cont2Catch1(actor_cancelled(), loopDepth);
															#line 57627 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				if (__when_expr_6.isReady()) { if (__when_expr_6.isError()) return a_body1cont3loopBody1cont2Catch1(__when_expr_6.getError(), loopDepth); else return a_body1cont3loopBody1cont2when1(__when_expr_6.get(), loopDepth); };
				static_cast<SingleChangeFeedStreamInternalActor*>(this)->actor_wait_state = 7;
															#line 10508 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				__when_expr_6.addCallbackAndClear(static_cast<ActorCallback< SingleChangeFeedStreamInternalActor, 6, Void >*>(static_cast<SingleChangeFeedStreamInternalActor*>(this)));
															#line 57632 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				loopDepth = 0;
			}
			catch (Error& error) {
				loopDepth = a_body1cont3loopBody1cont2Catch1(error, loopDepth);
			} catch (...) {
				loopDepth = a_body1cont3loopBody1cont2Catch1(unknown_error(), loopDepth);
			}
		}
		else
		{
			loopDepth = a_body1cont3loopBody1cont10(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont3loopBody1cont7(Void const& _,int loopDepth) 
	{
															#line 10496 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_5 = delay(0);
															#line 10496 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<SingleChangeFeedStreamInternalActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 57654 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_5.isReady()) { if (__when_expr_5.isError()) return a_body1Catch1(__when_expr_5.getError(), std::max(0, loopDepth - 1)); else return a_body1cont3loopBody1cont7when1(__when_expr_5.get(), loopDepth); };
		static_cast<SingleChangeFeedStreamInternalActor*>(this)->actor_wait_state = 6;
															#line 10496 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_5.addCallbackAndClear(static_cast<ActorCallback< SingleChangeFeedStreamInternalActor, 5, Void >*>(static_cast<SingleChangeFeedStreamInternalActor*>(this)));
															#line 57659 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont3loopBody1cont7(Void && _,int loopDepth) 
	{
															#line 10496 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_5 = delay(0);
															#line 10496 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<SingleChangeFeedStreamInternalActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 57670 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_5.isReady()) { if (__when_expr_5.isError()) return a_body1Catch1(__when_expr_5.getError(), std::max(0, loopDepth - 1)); else return a_body1cont3loopBody1cont7when1(__when_expr_5.get(), loopDepth); };
		static_cast<SingleChangeFeedStreamInternalActor*>(this)->actor_wait_state = 6;
															#line 10496 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_5.addCallbackAndClear(static_cast<ActorCallback< SingleChangeFeedStreamInternalActor, 5, Void >*>(static_cast<SingleChangeFeedStreamInternalActor*>(this)));
															#line 57675 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont3loopBody1cont1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1cont7(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1cont1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1cont7(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose5() 
	{
		if (static_cast<SingleChangeFeedStreamInternalActor*>(this)->actor_wait_state > 0) static_cast<SingleChangeFeedStreamInternalActor*>(this)->actor_wait_state = 0;
		static_cast<SingleChangeFeedStreamInternalActor*>(this)->ActorCallback< SingleChangeFeedStreamInternalActor, 4, Void >::remove();

	}
	void a_callback_fire(ActorCallback< SingleChangeFeedStreamInternalActor, 4, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("singleChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont3loopBody1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("singleChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_fire(ActorCallback< SingleChangeFeedStreamInternalActor, 4, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("singleChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont3loopBody1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("singleChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_error(ActorCallback< SingleChangeFeedStreamInternalActor, 4, Void >*,Error err) 
	{
		fdb_probe_actor_enter("singleChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("singleChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 4);

	}
	int a_body1cont3loopBody1cont9(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1cont2(loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1cont9(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1cont2(loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1cont7when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1cont9(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1cont7when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1cont9(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose6() 
	{
		if (static_cast<SingleChangeFeedStreamInternalActor*>(this)->actor_wait_state > 0) static_cast<SingleChangeFeedStreamInternalActor*>(this)->actor_wait_state = 0;
		static_cast<SingleChangeFeedStreamInternalActor*>(this)->ActorCallback< SingleChangeFeedStreamInternalActor, 5, Void >::remove();

	}
	void a_callback_fire(ActorCallback< SingleChangeFeedStreamInternalActor, 5, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("singleChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1cont3loopBody1cont7when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("singleChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_fire(ActorCallback< SingleChangeFeedStreamInternalActor, 5, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("singleChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1cont3loopBody1cont7when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("singleChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_error(ActorCallback< SingleChangeFeedStreamInternalActor, 5, Void >*,Error err) 
	{
		fdb_probe_actor_enter("singleChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("singleChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 5);

	}
	int a_body1cont3loopBody1cont10(int loopDepth) 
	{
															#line 10517 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!atLatest && feedReply.atLatestVersion)
															#line 57822 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 10518 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			atLatest = true;
															#line 10519 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			results->notAtLatest.set(0);
															#line 10520 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (results->context)
															#line 57830 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 10521 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				results->context->notAtLatestChangeFeeds.erase(results->dbgid);
															#line 57834 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
		}
															#line 10525 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (feedReply.minStreamVersion > results->storageData[0]->version.get())
															#line 57839 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 10526 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			results->storageData[0]->version.set(feedReply.minStreamVersion);
															#line 57843 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
		if (loopDepth == 0) return a_body1cont3loopHead1(0);

		return loopDepth;
	}
	int a_body1cont3loopBody1cont12(int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1cont10(loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1cont2Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 10512 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ASSERT(e.code() == error_code_actor_cancelled);
															#line 10513 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			return a_body1Catch1(e, std::max(0, loopDepth - 1));
															#line 57862 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1cont3loopBody1cont13(Void const& _,int loopDepth) 
	{
															#line 10510 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(false);
															#line 57876 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont3loopBody1cont13cont2(loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1cont13(Void && _,int loopDepth) 
	{
															#line 10510 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(false);
															#line 57885 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont3loopBody1cont13cont2(loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1cont13(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont3loopBody1cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont3loopBody1cont13(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose7() 
	{
		if (static_cast<SingleChangeFeedStreamInternalActor*>(this)->actor_wait_state > 0) static_cast<SingleChangeFeedStreamInternalActor*>(this)->actor_wait_state = 0;
		static_cast<SingleChangeFeedStreamInternalActor*>(this)->ActorCallback< SingleChangeFeedStreamInternalActor, 6, Void >::remove();

	}
	void a_callback_fire(ActorCallback< SingleChangeFeedStreamInternalActor, 6, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("singleChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1cont3loopBody1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont3loopBody1cont2Catch1(error, 0);
		} catch (...) {
			a_body1cont3loopBody1cont2Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("singleChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 6);

	}
	void a_callback_fire(ActorCallback< SingleChangeFeedStreamInternalActor, 6, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("singleChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1cont3loopBody1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont3loopBody1cont2Catch1(error, 0);
		} catch (...) {
			a_body1cont3loopBody1cont2Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("singleChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 6);

	}
	void a_callback_error(ActorCallback< SingleChangeFeedStreamInternalActor, 6, Void >*,Error err) 
	{
		fdb_probe_actor_enter("singleChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1cont3loopBody1cont2Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont3loopBody1cont2Catch1(error, 0);
		} catch (...) {
			a_body1cont3loopBody1cont2Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("singleChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), 6);

	}
	int a_body1cont3loopBody1cont13cont2(int loopDepth) 
	{
		try {
			loopDepth = a_body1cont3loopBody1cont12(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
															#line 10426 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeyRange range;
															#line 10426 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<ChangeFeedData> results;
															#line 10426 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Key rangeID;
															#line 10426 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Version* begin;
															#line 10426 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Version end;
															#line 10426 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Optional<ChangeFeedTSSValidationData>* tssData;
															#line 10426 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<DatabaseContext> db;
															#line 10426 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<ChangeFeedCacheData> cacheData;
															#line 10426 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Key tenantPrefix;
															#line 10436 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Promise<Void> refresh;
															#line 10439 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	bool atLatest;
															#line 10463 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	ChangeFeedStreamReply feedReply;
															#line 57990 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via singleChangeFeedStreamInternal()
															#line 10426 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class SingleChangeFeedStreamInternalActor final : public Actor<Void>, public ActorCallback< SingleChangeFeedStreamInternalActor, 0, Void >, public ActorCallback< SingleChangeFeedStreamInternalActor, 1, Void >, public ActorCallback< SingleChangeFeedStreamInternalActor, 2, Void >, public ActorSingleCallback< SingleChangeFeedStreamInternalActor, 3, ChangeFeedStreamReply >, public ActorCallback< SingleChangeFeedStreamInternalActor, 4, Void >, public ActorCallback< SingleChangeFeedStreamInternalActor, 5, Void >, public ActorCallback< SingleChangeFeedStreamInternalActor, 6, Void >, public FastAllocated<SingleChangeFeedStreamInternalActor>, public SingleChangeFeedStreamInternalActorState<SingleChangeFeedStreamInternalActor> {
															#line 57995 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<SingleChangeFeedStreamInternalActor>::operator new;
	using FastAllocated<SingleChangeFeedStreamInternalActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< SingleChangeFeedStreamInternalActor, 0, Void >;
friend struct ActorCallback< SingleChangeFeedStreamInternalActor, 1, Void >;
friend struct ActorCallback< SingleChangeFeedStreamInternalActor, 2, Void >;
friend struct ActorSingleCallback< SingleChangeFeedStreamInternalActor, 3, ChangeFeedStreamReply >;
friend struct ActorCallback< SingleChangeFeedStreamInternalActor, 4, Void >;
friend struct ActorCallback< SingleChangeFeedStreamInternalActor, 5, Void >;
friend struct ActorCallback< SingleChangeFeedStreamInternalActor, 6, Void >;
															#line 10426 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	SingleChangeFeedStreamInternalActor(KeyRange const& range,Reference<ChangeFeedData> const& results,Key const& rangeID,Version* const& begin,Version const& end,Optional<ChangeFeedTSSValidationData>* const& tssData,Reference<DatabaseContext> const& db,Reference<ChangeFeedCacheData> const& cacheData,Key const& tenantPrefix) 
															#line 58012 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Void>(),
		   SingleChangeFeedStreamInternalActorState<SingleChangeFeedStreamInternalActor>(range, results, rangeID, begin, end, tssData, db, cacheData, tenantPrefix)
	{
		fdb_probe_actor_enter("singleChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("singleChangeFeedStreamInternal");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("singleChangeFeedStreamInternal", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< SingleChangeFeedStreamInternalActor, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< SingleChangeFeedStreamInternalActor, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< SingleChangeFeedStreamInternalActor, 2, Void >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorSingleCallback< SingleChangeFeedStreamInternalActor, 3, ChangeFeedStreamReply >*)0, actor_cancelled()); break;
		case 5: this->a_callback_error((ActorCallback< SingleChangeFeedStreamInternalActor, 4, Void >*)0, actor_cancelled()); break;
		case 6: this->a_callback_error((ActorCallback< SingleChangeFeedStreamInternalActor, 5, Void >*)0, actor_cancelled()); break;
		case 7: this->a_callback_error((ActorCallback< SingleChangeFeedStreamInternalActor, 6, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 10426 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<Void> singleChangeFeedStreamInternal( KeyRange const& range, Reference<ChangeFeedData> const& results, Key const& rangeID, Version* const& begin, Version const& end, Optional<ChangeFeedTSSValidationData>* const& tssData, Reference<DatabaseContext> const& db, Reference<ChangeFeedCacheData> const& cacheData, Key const& tenantPrefix ) {
															#line 10426 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Void>(new SingleChangeFeedStreamInternalActor(range, results, rangeID, begin, end, tssData, db, cacheData, tenantPrefix));
															#line 58046 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 10530 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

															#line 58051 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via singleChangeFeedStream()
															#line 10531 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class SingleChangeFeedStreamActor>
															#line 10531 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class SingleChangeFeedStreamActorState {
															#line 58058 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 10531 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	SingleChangeFeedStreamActorState(Reference<DatabaseContext> const& db,StorageServerInterface const& interf,KeyRange const& range,Reference<ChangeFeedData> const& results,Key const& rangeID,Version* const& begin,Version const& end,int const& replyBufferSize,bool const& canReadPopped,ReadOptions const& readOptions,bool const& encrypted,Reference<ChangeFeedCacheData> const& cacheData,Key const& tenantPrefix) 
															#line 10531 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 10531 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : db(db),
															#line 10531 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   interf(interf),
															#line 10531 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   range(range),
															#line 10531 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   results(results),
															#line 10531 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   rangeID(rangeID),
															#line 10531 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   begin(begin),
															#line 10531 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   end(end),
															#line 10531 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   replyBufferSize(replyBufferSize),
															#line 10531 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   canReadPopped(canReadPopped),
															#line 10531 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   readOptions(readOptions),
															#line 10531 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   encrypted(encrypted),
															#line 10531 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   cacheData(cacheData),
															#line 10531 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   tenantPrefix(tenantPrefix),
															#line 10544 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   cx(db),
															#line 10545 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   req(),
															#line 10546 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   tssData()
															#line 58095 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("singleChangeFeedStream", reinterpret_cast<unsigned long>(this));

	}
	~SingleChangeFeedStreamActorState() 
	{
		fdb_probe_actor_destroy("singleChangeFeedStream", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 10547 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			req.rangeID = rangeID;
															#line 10548 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			req.begin = *begin;
															#line 10549 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			req.end = end;
															#line 10550 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			req.range = range;
															#line 10551 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			req.canReadPopped = canReadPopped;
															#line 10552 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			req.replyBufferSize = replyBufferSize;
															#line 10553 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			req.options = readOptions;
															#line 10554 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			req.id = deterministicRandom()->randomUniqueID();
															#line 10555 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			req.encrypted = encrypted;
															#line 10557 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (DEBUG_CF_CLIENT_TRACE)
															#line 58128 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 10558 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				TraceEvent(SevDebug, "TraceChangeFeedClientSingleCursor", req.id) .detail("FeedID", rangeID) .detail("Range", range) .detail("Begin", *begin) .detail("End", end) .detail("CanReadPopped", canReadPopped);
															#line 58132 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 10566 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			results->streams.clear();
															#line 10568 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			results->streams.push_back(interf.changeFeedStream.getReplyStream(req));
															#line 10570 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			results->maxSeenVersion = invalidVersion;
															#line 10571 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			results->storageData.clear();
															#line 10572 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			results->storageData.push_back(db->getStorageData(interf));
															#line 10573 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			Promise<Void> refresh = results->refresh;
															#line 10574 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			results->refresh = Promise<Void>();
															#line 10575 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			results->notAtLatest.set(1);
															#line 10576 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (results->context)
															#line 58152 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 10577 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				results->context->notAtLatestChangeFeeds[results->dbgid] = results.getPtr();
															#line 10578 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				results->created = now();
															#line 58158 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 10580 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			refresh.send(Void());
															#line 10582 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			maybeDuplicateTSSChangeFeedStream( req, interf.changeFeedStream, cx->enableLocalityLoadBalance ? &cx->queueModel : nullptr, &tssData);
															#line 10585 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_0 = results->streams[0].onError() || singleChangeFeedStreamInternal(range, results, rangeID, begin, end, &tssData, db, cacheData, tenantPrefix);
															#line 10585 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<SingleChangeFeedStreamActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 58168 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<SingleChangeFeedStreamActor*>(this)->actor_wait_state = 1;
															#line 10585 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< SingleChangeFeedStreamActor, 0, Void >*>(static_cast<SingleChangeFeedStreamActor*>(this)));
															#line 58173 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~SingleChangeFeedStreamActorState();
		static_cast<SingleChangeFeedStreamActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void const& _,int loopDepth) 
	{
															#line 10588 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<SingleChangeFeedStreamActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~SingleChangeFeedStreamActorState(); static_cast<SingleChangeFeedStreamActor*>(this)->destroy(); return 0; }
															#line 58196 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<SingleChangeFeedStreamActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~SingleChangeFeedStreamActorState();
		static_cast<SingleChangeFeedStreamActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1(Void && _,int loopDepth) 
	{
															#line 10588 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<SingleChangeFeedStreamActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~SingleChangeFeedStreamActorState(); static_cast<SingleChangeFeedStreamActor*>(this)->destroy(); return 0; }
															#line 58208 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<SingleChangeFeedStreamActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~SingleChangeFeedStreamActorState();
		static_cast<SingleChangeFeedStreamActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<SingleChangeFeedStreamActor*>(this)->actor_wait_state > 0) static_cast<SingleChangeFeedStreamActor*>(this)->actor_wait_state = 0;
		static_cast<SingleChangeFeedStreamActor*>(this)->ActorCallback< SingleChangeFeedStreamActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< SingleChangeFeedStreamActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("singleChangeFeedStream", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("singleChangeFeedStream", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< SingleChangeFeedStreamActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("singleChangeFeedStream", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("singleChangeFeedStream", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< SingleChangeFeedStreamActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("singleChangeFeedStream", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("singleChangeFeedStream", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 10531 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<DatabaseContext> db;
															#line 10531 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	StorageServerInterface interf;
															#line 10531 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeyRange range;
															#line 10531 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<ChangeFeedData> results;
															#line 10531 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Key rangeID;
															#line 10531 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Version* begin;
															#line 10531 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Version end;
															#line 10531 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	int replyBufferSize;
															#line 10531 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	bool canReadPopped;
															#line 10531 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	ReadOptions readOptions;
															#line 10531 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	bool encrypted;
															#line 10531 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<ChangeFeedCacheData> cacheData;
															#line 10531 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Key tenantPrefix;
															#line 10544 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Database cx;
															#line 10545 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	ChangeFeedStreamRequest req;
															#line 10546 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Optional<ChangeFeedTSSValidationData> tssData;
															#line 58311 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via singleChangeFeedStream()
															#line 10531 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class SingleChangeFeedStreamActor final : public Actor<Void>, public ActorCallback< SingleChangeFeedStreamActor, 0, Void >, public FastAllocated<SingleChangeFeedStreamActor>, public SingleChangeFeedStreamActorState<SingleChangeFeedStreamActor> {
															#line 58316 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<SingleChangeFeedStreamActor>::operator new;
	using FastAllocated<SingleChangeFeedStreamActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< SingleChangeFeedStreamActor, 0, Void >;
															#line 10531 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	SingleChangeFeedStreamActor(Reference<DatabaseContext> const& db,StorageServerInterface const& interf,KeyRange const& range,Reference<ChangeFeedData> const& results,Key const& rangeID,Version* const& begin,Version const& end,int const& replyBufferSize,bool const& canReadPopped,ReadOptions const& readOptions,bool const& encrypted,Reference<ChangeFeedCacheData> const& cacheData,Key const& tenantPrefix) 
															#line 58327 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Void>(),
		   SingleChangeFeedStreamActorState<SingleChangeFeedStreamActor>(db, interf, range, results, rangeID, begin, end, replyBufferSize, canReadPopped, readOptions, encrypted, cacheData, tenantPrefix)
	{
		fdb_probe_actor_enter("singleChangeFeedStream", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("singleChangeFeedStream");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("singleChangeFeedStream", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< SingleChangeFeedStreamActor, 0, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 10531 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<Void> singleChangeFeedStream( Reference<DatabaseContext> const& db, StorageServerInterface const& interf, KeyRange const& range, Reference<ChangeFeedData> const& results, Key const& rangeID, Version* const& begin, Version const& end, int const& replyBufferSize, bool const& canReadPopped, ReadOptions const& readOptions, bool const& encrypted, Reference<ChangeFeedCacheData> const& cacheData, Key const& tenantPrefix ) {
															#line 10531 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Void>(new SingleChangeFeedStreamActor(db, interf, range, results, rangeID, begin, end, replyBufferSize, canReadPopped, readOptions, encrypted, cacheData, tenantPrefix));
															#line 58355 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 10590 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

void coalesceChangeFeedLocations(std::vector<KeyRangeLocationInfo>& locations) {
	// FIXME: only coalesce if same tenant!
	std::vector<UID> teamUIDs;
	bool anyToCoalesce = false;
	teamUIDs.reserve(locations.size());
	for (int i = 0; i < locations.size(); i++) {
		ASSERT(locations[i].locations->size() > 0);
		UID teamUID = locations[i].locations->getId(0);
		for (int j = 1; j < locations[i].locations->size(); j++) {
			UID locUID = locations[i].locations->getId(j);
			teamUID = UID(teamUID.first() ^ locUID.first(), teamUID.second() ^ locUID.second());
		}
		if (!teamUIDs.empty() && teamUIDs.back() == teamUID) {
			anyToCoalesce = true;
		}
		teamUIDs.push_back(teamUID);
	}

	if (!anyToCoalesce) {
		return;
	}

	CODE_PROBE(true, "coalescing change feed locations");

	// FIXME: there's technically a probability of "hash" collisions here, but it's extremely low. Could validate that
	// two teams with the same xor are in fact the same, or fall back to not doing this if it gets a wrong shard server
	// error or something

	std::vector<KeyRangeLocationInfo> coalesced;
	coalesced.reserve(locations.size());
	coalesced.push_back(locations[0]);
	for (int i = 1; i < locations.size(); i++) {
		if (teamUIDs[i] == teamUIDs[i - 1]) {
			coalesced.back().range = KeyRangeRef(coalesced.back().range.begin, locations[i].range.end);
		} else {
			coalesced.push_back(locations[i]);
		}
	}

	locations = coalesced;
}

															#line 58402 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via getChangeFeedStreamFromDisk()
															#line 10633 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class GetChangeFeedStreamFromDiskActor>
															#line 10633 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetChangeFeedStreamFromDiskActorState {
															#line 58409 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 10633 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetChangeFeedStreamFromDiskActorState(Reference<DatabaseContext> const& db,Reference<ChangeFeedData> const& results,Key const& rangeID,Version* const& begin,Version const& end,KeyRange const& range,Key const& tenantPrefix) 
															#line 10633 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 10633 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : db(db),
															#line 10633 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   results(results),
															#line 10633 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   rangeID(rangeID),
															#line 10633 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   begin(begin),
															#line 10633 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   end(end),
															#line 10633 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   range(range),
															#line 10633 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   tenantPrefix(tenantPrefix),
															#line 10640 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   foundEnd(false)
															#line 58430 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("getChangeFeedStreamFromDisk", reinterpret_cast<unsigned long>(this));

	}
	~GetChangeFeedStreamFromDiskActorState() 
	{
		fdb_probe_actor_destroy("getChangeFeedStreamFromDisk", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 10641 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			;
															#line 58445 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~GetChangeFeedStreamFromDiskActorState();
		static_cast<GetChangeFeedStreamFromDiskActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
															#line 10642 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		Key beginKey = changeFeedCacheKey(tenantPrefix, rangeID, range, *begin);
															#line 10643 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		Key endKey = changeFeedCacheKey(tenantPrefix, rangeID, range, MAX_VERSION);
															#line 10644 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<RangeResult> __when_expr_0 = db->storage->readRange(KeyRangeRef(beginKey, endKey), CLIENT_KNOBS->CHANGE_FEED_CACHE_LIMIT_BYTES, CLIENT_KNOBS->CHANGE_FEED_CACHE_LIMIT_BYTES);
															#line 10644 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<GetChangeFeedStreamFromDiskActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 58481 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
		static_cast<GetChangeFeedStreamFromDiskActor*>(this)->actor_wait_state = 1;
															#line 10644 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< GetChangeFeedStreamFromDiskActor, 0, RangeResult >*>(static_cast<GetChangeFeedStreamFromDiskActor*>(this)));
															#line 58486 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
															#line 10647 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		idx = 0;
															#line 10649 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		;
															#line 58497 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont1loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(RangeResult const& __res,int loopDepth) 
	{
															#line 10644 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		res = __res;
															#line 58506 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(RangeResult && __res,int loopDepth) 
	{
		res = std::move(__res);
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<GetChangeFeedStreamFromDiskActor*>(this)->actor_wait_state > 0) static_cast<GetChangeFeedStreamFromDiskActor*>(this)->actor_wait_state = 0;
		static_cast<GetChangeFeedStreamFromDiskActor*>(this)->ActorCallback< GetChangeFeedStreamFromDiskActor, 0, RangeResult >::remove();

	}
	void a_callback_fire(ActorCallback< GetChangeFeedStreamFromDiskActor, 0, RangeResult >*,RangeResult const& value) 
	{
		fdb_probe_actor_enter("getChangeFeedStreamFromDisk", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getChangeFeedStreamFromDisk", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< GetChangeFeedStreamFromDiskActor, 0, RangeResult >*,RangeResult && value) 
	{
		fdb_probe_actor_enter("getChangeFeedStreamFromDisk", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getChangeFeedStreamFromDisk", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< GetChangeFeedStreamFromDiskActor, 0, RangeResult >*,Error err) 
	{
		fdb_probe_actor_enter("getChangeFeedStreamFromDisk", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getChangeFeedStreamFromDisk", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1cont2(int loopDepth) 
	{
															#line 10671 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (foundEnd || !res.more)
															#line 58573 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 10672 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<GetChangeFeedStreamFromDiskActor*>(this)->SAV<bool>::futures) { (void)(foundEnd); this->~GetChangeFeedStreamFromDiskActorState(); static_cast<GetChangeFeedStreamFromDiskActor*>(this)->destroy(); return 0; }
															#line 58577 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<GetChangeFeedStreamFromDiskActor*>(this)->SAV< bool >::value()) bool(std::move(foundEnd)); // state_var_RVO
			this->~GetChangeFeedStreamFromDiskActorState();
			static_cast<GetChangeFeedStreamFromDiskActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1cont1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1cont1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1(int loopDepth) 
	{
															#line 10649 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!(!foundEnd && idx < res.size()))
															#line 58598 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
			return a_body1loopBody1cont1break1(loopDepth==0?0:loopDepth-1); // break
		}
															#line 10650 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		Standalone<VectorRef<MutationsAndVersionRef>> mutations = decodeChangeFeedCacheValue(res[idx].value);
															#line 10651 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for(;!mutations.empty() && mutations.front().version < *begin;) {
															#line 10652 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			mutations.pop_front();
															#line 58608 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 10654 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for(;!mutations.empty() && mutations.back().version >= end;) {
															#line 10655 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			mutations.pop_back();
															#line 10656 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			foundEnd = true;
															#line 58616 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 10658 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!mutations.empty())
															#line 58620 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 10659 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			*begin = mutations.back().version;
															#line 10660 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			results->mutations.send(mutations);
															#line 10661 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_1 = results->mutations.onEmpty();
															#line 10661 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<GetChangeFeedStreamFromDiskActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 2));
															#line 58630 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), std::max(0, loopDepth - 2)); else return a_body1loopBody1cont1loopBody1when1(__when_expr_1.get(), loopDepth); };
			static_cast<GetChangeFeedStreamFromDiskActor*>(this)->actor_wait_state = 2;
															#line 10661 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< GetChangeFeedStreamFromDiskActor, 1, Void >*>(static_cast<GetChangeFeedStreamFromDiskActor*>(this)));
															#line 58635 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1loopBody1cont1loopBody1cont1(loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1break1(int loopDepth) 
	{
		try {
			return a_body1loopBody1cont2(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1cont1(int loopDepth) 
	{
															#line 10667 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		(*begin)++;
															#line 10668 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		idx++;
															#line 58664 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (loopDepth == 0) return a_body1loopBody1cont1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1cont5(Void const& _,int loopDepth) 
	{
															#line 10662 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_2 = delay(0);
															#line 10662 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<GetChangeFeedStreamFromDiskActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 2));
															#line 58675 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), std::max(0, loopDepth - 2)); else return a_body1loopBody1cont1loopBody1cont5when1(__when_expr_2.get(), loopDepth); };
		static_cast<GetChangeFeedStreamFromDiskActor*>(this)->actor_wait_state = 3;
															#line 10662 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< GetChangeFeedStreamFromDiskActor, 2, Void >*>(static_cast<GetChangeFeedStreamFromDiskActor*>(this)));
															#line 58680 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1cont5(Void && _,int loopDepth) 
	{
															#line 10662 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_2 = delay(0);
															#line 10662 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<GetChangeFeedStreamFromDiskActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 2));
															#line 58691 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), std::max(0, loopDepth - 2)); else return a_body1loopBody1cont1loopBody1cont5when1(__when_expr_2.get(), loopDepth); };
		static_cast<GetChangeFeedStreamFromDiskActor*>(this)->actor_wait_state = 3;
															#line 10662 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< GetChangeFeedStreamFromDiskActor, 2, Void >*>(static_cast<GetChangeFeedStreamFromDiskActor*>(this)));
															#line 58696 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1loopBody1cont5(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1loopBody1cont5(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<GetChangeFeedStreamFromDiskActor*>(this)->actor_wait_state > 0) static_cast<GetChangeFeedStreamFromDiskActor*>(this)->actor_wait_state = 0;
		static_cast<GetChangeFeedStreamFromDiskActor*>(this)->ActorCallback< GetChangeFeedStreamFromDiskActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetChangeFeedStreamFromDiskActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getChangeFeedStreamFromDisk", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getChangeFeedStreamFromDisk", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< GetChangeFeedStreamFromDiskActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getChangeFeedStreamFromDisk", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getChangeFeedStreamFromDisk", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< GetChangeFeedStreamFromDiskActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getChangeFeedStreamFromDisk", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getChangeFeedStreamFromDisk", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1loopBody1cont1loopBody1cont6(Void const& _,int loopDepth) 
	{
															#line 10663 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (*begin > results->lastReturnedVersion.get())
															#line 58768 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 10664 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			results->lastReturnedVersion.set(*begin);
															#line 58772 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
		loopDepth = a_body1loopBody1cont1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1cont6(Void && _,int loopDepth) 
	{
															#line 10663 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (*begin > results->lastReturnedVersion.get())
															#line 58782 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 10664 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			results->lastReturnedVersion.set(*begin);
															#line 58786 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
		loopDepth = a_body1loopBody1cont1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1cont5when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1loopBody1cont6(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont1loopBody1cont5when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1loopBody1cont6(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<GetChangeFeedStreamFromDiskActor*>(this)->actor_wait_state > 0) static_cast<GetChangeFeedStreamFromDiskActor*>(this)->actor_wait_state = 0;
		static_cast<GetChangeFeedStreamFromDiskActor*>(this)->ActorCallback< GetChangeFeedStreamFromDiskActor, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetChangeFeedStreamFromDiskActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getChangeFeedStreamFromDisk", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont1loopBody1cont5when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getChangeFeedStreamFromDisk", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< GetChangeFeedStreamFromDiskActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getChangeFeedStreamFromDisk", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont1loopBody1cont5when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getChangeFeedStreamFromDisk", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< GetChangeFeedStreamFromDiskActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getChangeFeedStreamFromDisk", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getChangeFeedStreamFromDisk", reinterpret_cast<unsigned long>(this), 2);

	}
															#line 10633 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<DatabaseContext> db;
															#line 10633 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<ChangeFeedData> results;
															#line 10633 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Key rangeID;
															#line 10633 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Version* begin;
															#line 10633 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Version end;
															#line 10633 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeyRange range;
															#line 10633 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Key tenantPrefix;
															#line 10640 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	bool foundEnd;
															#line 10644 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	RangeResult res;
															#line 10647 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	int idx;
															#line 58875 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via getChangeFeedStreamFromDisk()
															#line 10633 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetChangeFeedStreamFromDiskActor final : public Actor<bool>, public ActorCallback< GetChangeFeedStreamFromDiskActor, 0, RangeResult >, public ActorCallback< GetChangeFeedStreamFromDiskActor, 1, Void >, public ActorCallback< GetChangeFeedStreamFromDiskActor, 2, Void >, public FastAllocated<GetChangeFeedStreamFromDiskActor>, public GetChangeFeedStreamFromDiskActorState<GetChangeFeedStreamFromDiskActor> {
															#line 58880 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<GetChangeFeedStreamFromDiskActor>::operator new;
	using FastAllocated<GetChangeFeedStreamFromDiskActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<bool>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< GetChangeFeedStreamFromDiskActor, 0, RangeResult >;
friend struct ActorCallback< GetChangeFeedStreamFromDiskActor, 1, Void >;
friend struct ActorCallback< GetChangeFeedStreamFromDiskActor, 2, Void >;
															#line 10633 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetChangeFeedStreamFromDiskActor(Reference<DatabaseContext> const& db,Reference<ChangeFeedData> const& results,Key const& rangeID,Version* const& begin,Version const& end,KeyRange const& range,Key const& tenantPrefix) 
															#line 58893 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<bool>(),
		   GetChangeFeedStreamFromDiskActorState<GetChangeFeedStreamFromDiskActor>(db, results, rangeID, begin, end, range, tenantPrefix)
	{
		fdb_probe_actor_enter("getChangeFeedStreamFromDisk", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("getChangeFeedStreamFromDisk");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("getChangeFeedStreamFromDisk", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< GetChangeFeedStreamFromDiskActor, 0, RangeResult >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< GetChangeFeedStreamFromDiskActor, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< GetChangeFeedStreamFromDiskActor, 2, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 10633 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<bool> getChangeFeedStreamFromDisk( Reference<DatabaseContext> const& db, Reference<ChangeFeedData> const& results, Key const& rangeID, Version* const& begin, Version const& end, KeyRange const& range, Key const& tenantPrefix ) {
															#line 10633 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<bool>(new GetChangeFeedStreamFromDiskActor(db, results, rangeID, begin, end, range, tenantPrefix));
															#line 58923 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 10676 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

															#line 58928 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via getChangeFeedStreamActor()
															#line 10677 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class GetChangeFeedStreamActorActor>
															#line 10677 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetChangeFeedStreamActorActorState {
															#line 58935 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 10677 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetChangeFeedStreamActorActorState(Reference<DatabaseContext> const& db,Reference<ChangeFeedData> const& results,Key const& rangeID,Version const& begin,Version const& end,KeyRange const& range,int const& replyBufferSize,bool const& canReadPopped,ReadOptions const& readOptions,bool const& encrypted,Reference<ChangeFeedCacheData> const& cacheData,Key const& tenantPrefix) 
															#line 10677 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 10677 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : db(db),
															#line 10677 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   results(results),
															#line 10677 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   rangeID(rangeID),
															#line 10677 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   begin(begin),
															#line 10677 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   end(end),
															#line 10677 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   range(range),
															#line 10677 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   replyBufferSize(replyBufferSize),
															#line 10677 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   canReadPopped(canReadPopped),
															#line 10677 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   readOptions(readOptions),
															#line 10677 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   encrypted(encrypted),
															#line 10677 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   cacheData(cacheData),
															#line 10677 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   tenantPrefix(tenantPrefix),
															#line 10689 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   cx(db),
															#line 10690 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   span("NAPI:GetChangeFeedStream"_loc),
															#line 10692 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   sleepWithBackoff(CLIENT_KNOBS->WRONG_SHARD_SERVER_DELAY),
															#line 10693 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   lastBeginVersion(invalidVersion)
															#line 58972 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("getChangeFeedStreamActor", reinterpret_cast<unsigned long>(this));

	}
	~GetChangeFeedStreamActorActorState() 
	{
		fdb_probe_actor_destroy("getChangeFeedStreamActor", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 10695 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			;
															#line 58987 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~GetChangeFeedStreamActorActorState();
		static_cast<GetChangeFeedStreamActorActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
															#line 10696 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		keys = KeyRange();
															#line 59017 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		try {
															#line 10698 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			lastBeginVersion = begin;
															#line 10699 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<KeyRange> __when_expr_0 = getChangeFeedRange(db, cx, rangeID, begin);
															#line 10699 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<GetChangeFeedStreamActorActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 59025 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1loopBody1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
			static_cast<GetChangeFeedStreamActorActor*>(this)->actor_wait_state = 1;
															#line 10699 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< GetChangeFeedStreamActorActor, 0, KeyRange >*>(static_cast<GetChangeFeedStreamActorActor*>(this)));
															#line 59030 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 10812 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (e.code() == error_code_actor_cancelled || e.code() == error_code_change_feed_popped)
															#line 59052 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 10813 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				results->streams.clear();
															#line 10814 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				results->storageData.clear();
															#line 10815 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (e.code() == error_code_change_feed_popped)
															#line 59060 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 10816 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					++db->feedNonRetriableErrors;
															#line 10817 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					CODE_PROBE(true, "getChangeFeedStreamActor got popped", probe::decoration::rare);
															#line 10818 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					results->mutations.sendError(e);
															#line 10819 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					results->refresh.sendError(e);
															#line 59070 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
				else
				{
															#line 10821 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					results->refresh.sendError(change_feed_cancelled());
															#line 59076 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
															#line 10823 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				return a_body1Catch1(e, std::max(0, loopDepth - 1));
															#line 59080 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 10825 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (results->notAtLatest.get() == 0)
															#line 59084 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 10826 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				results->notAtLatest.set(1);
															#line 10827 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (results->context)
															#line 59090 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 10828 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					results->context->notAtLatestChangeFeeds[results->dbgid] = results.getPtr();
															#line 10829 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					results->created = now();
															#line 59096 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
			}
															#line 10833 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (e.code() == error_code_wrong_shard_server || e.code() == error_code_all_alternatives_failed || e.code() == error_code_connection_failed || e.code() == error_code_unknown_change_feed || e.code() == error_code_broken_promise || e.code() == error_code_future_version || e.code() == error_code_request_maybe_delivered || e.code() == error_code_storage_too_many_feed_streams)
															#line 59101 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 10838 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				++db->feedErrors;
															#line 10839 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				db->changeFeedCache.erase(rangeID);
															#line 10840 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				cx->invalidateCache({}, keys);
															#line 10841 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (begin == lastBeginVersion || e.code() == error_code_storage_too_many_feed_streams)
															#line 59111 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 10844 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					sleepWithBackoff = std::min(2.0, sleepWithBackoff * 5);
															#line 10845 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					sleepWithBackoff = std::max(0.1, sleepWithBackoff);
															#line 59117 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
				else
				{
															#line 10847 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					sleepWithBackoff = CLIENT_KNOBS->WRONG_SHARD_SERVER_DELAY;
															#line 59123 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
															#line 10849 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				TraceEvent("ChangeFeedClientError") .errorUnsuppressed(e) .suppressFor(30.0) .detail("FeedID", rangeID) .detail("BeginVersion", begin) .detail("AnyProgress", begin != lastBeginVersion);
															#line 10855 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				StrictFuture<Void> __when_expr_6 = delay(sleepWithBackoff);
															#line 10855 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (static_cast<GetChangeFeedStreamActorActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 59131 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				if (__when_expr_6.isReady()) { if (__when_expr_6.isError()) return a_body1Catch1(__when_expr_6.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1Catch1when1(__when_expr_6.get(), loopDepth); };
				static_cast<GetChangeFeedStreamActorActor*>(this)->actor_wait_state = 7;
															#line 10855 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				__when_expr_6.addCallbackAndClear(static_cast<ActorCallback< GetChangeFeedStreamActorActor, 6, Void >*>(static_cast<GetChangeFeedStreamActorActor*>(this)));
															#line 59136 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				loopDepth = 0;
			}
			else
			{
															#line 10857 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (e.code() != error_code_end_of_stream)
															#line 59143 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 10858 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					++db->feedNonRetriableErrors;
															#line 10859 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					TraceEvent("ChangeFeedClientErrorNonRetryable").errorUnsuppressed(e).suppressFor(5.0);
															#line 59149 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
															#line 10861 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				results->mutations.sendError(e);
															#line 10862 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				results->refresh.sendError(change_feed_cancelled());
															#line 10863 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				results->streams.clear();
															#line 10864 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				results->storageData.clear();
															#line 10865 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (!static_cast<GetChangeFeedStreamActorActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~GetChangeFeedStreamActorActorState(); static_cast<GetChangeFeedStreamActorActor*>(this)->destroy(); return 0; }
															#line 59161 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				new (&static_cast<GetChangeFeedStreamActorActor*>(this)->SAV< Void >::value()) Void(Void());
				this->~GetChangeFeedStreamActorActorState();
				static_cast<GetChangeFeedStreamActorActor*>(this)->finishSendAndDelPromiseRef();
				return 0;
			}
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(KeyRange const& fullRange,int loopDepth) 
	{
															#line 10700 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		keys = fullRange & range;
															#line 10701 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<std::vector<KeyRangeLocationInfo>> __when_expr_1 = getKeyRangeLocations(cx, TenantInfo(), keys, CLIENT_KNOBS->CHANGE_FEED_LOCATION_LIMIT, Reverse::False, &StorageServerInterface::changeFeedStream, span.context, Optional<UID>(), UseProvisionalProxies::False, latestVersion);
															#line 10701 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<GetChangeFeedStreamActorActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 59184 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
		static_cast<GetChangeFeedStreamActorActor*>(this)->actor_wait_state = 2;
															#line 10701 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< GetChangeFeedStreamActorActor, 1, std::vector<KeyRangeLocationInfo> >*>(static_cast<GetChangeFeedStreamActorActor*>(this)));
															#line 59189 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2(KeyRange && fullRange,int loopDepth) 
	{
															#line 10700 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		keys = fullRange & range;
															#line 10701 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<std::vector<KeyRangeLocationInfo>> __when_expr_1 = getKeyRangeLocations(cx, TenantInfo(), keys, CLIENT_KNOBS->CHANGE_FEED_LOCATION_LIMIT, Reverse::False, &StorageServerInterface::changeFeedStream, span.context, Optional<UID>(), UseProvisionalProxies::False, latestVersion);
															#line 10701 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<GetChangeFeedStreamActorActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 59202 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
		static_cast<GetChangeFeedStreamActorActor*>(this)->actor_wait_state = 2;
															#line 10701 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< GetChangeFeedStreamActorActor, 1, std::vector<KeyRangeLocationInfo> >*>(static_cast<GetChangeFeedStreamActorActor*>(this)));
															#line 59207 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1when1(KeyRange const& fullRange,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(fullRange, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(KeyRange && fullRange,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(std::move(fullRange), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<GetChangeFeedStreamActorActor*>(this)->actor_wait_state > 0) static_cast<GetChangeFeedStreamActorActor*>(this)->actor_wait_state = 0;
		static_cast<GetChangeFeedStreamActorActor*>(this)->ActorCallback< GetChangeFeedStreamActorActor, 0, KeyRange >::remove();

	}
	void a_callback_fire(ActorCallback< GetChangeFeedStreamActorActor, 0, KeyRange >*,KeyRange const& value) 
	{
		fdb_probe_actor_enter("getChangeFeedStreamActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getChangeFeedStreamActor", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< GetChangeFeedStreamActorActor, 0, KeyRange >*,KeyRange && value) 
	{
		fdb_probe_actor_enter("getChangeFeedStreamActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getChangeFeedStreamActor", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< GetChangeFeedStreamActorActor, 0, KeyRange >*,Error err) 
	{
		fdb_probe_actor_enter("getChangeFeedStreamActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getChangeFeedStreamActor", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1cont3(int loopDepth) 
	{
															#line 10713 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (locations.size() >= CLIENT_KNOBS->CHANGE_FEED_LOCATION_LIMIT)
															#line 59279 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 10714 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ASSERT_WE_THINK(false);
															#line 10715 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			return a_body1loopBody1Catch1(unknown_change_feed(), loopDepth);
															#line 59285 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 10718 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (CLIENT_KNOBS->CHANGE_FEED_COALESCE_LOCATIONS && locations.size() > 1)
															#line 59289 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 10719 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			coalesceChangeFeedLocations(locations);
															#line 59293 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 10722 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		chosenLocations = std::vector<int>(locations.size());
															#line 10723 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		loc = 0;
															#line 10724 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		;
															#line 59301 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont3loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(std::vector<KeyRangeLocationInfo> const& __locations,int loopDepth) 
	{
															#line 10701 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		locations = __locations;
															#line 59310 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(std::vector<KeyRangeLocationInfo> && __locations,int loopDepth) 
	{
		locations = std::move(__locations);
		loopDepth = a_body1loopBody1cont3(loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<GetChangeFeedStreamActorActor*>(this)->actor_wait_state > 0) static_cast<GetChangeFeedStreamActorActor*>(this)->actor_wait_state = 0;
		static_cast<GetChangeFeedStreamActorActor*>(this)->ActorCallback< GetChangeFeedStreamActorActor, 1, std::vector<KeyRangeLocationInfo> >::remove();

	}
	void a_callback_fire(ActorCallback< GetChangeFeedStreamActorActor, 1, std::vector<KeyRangeLocationInfo> >*,std::vector<KeyRangeLocationInfo> const& value) 
	{
		fdb_probe_actor_enter("getChangeFeedStreamActor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getChangeFeedStreamActor", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< GetChangeFeedStreamActorActor, 1, std::vector<KeyRangeLocationInfo> >*,std::vector<KeyRangeLocationInfo> && value) 
	{
		fdb_probe_actor_enter("getChangeFeedStreamActor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getChangeFeedStreamActor", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< GetChangeFeedStreamActorActor, 1, std::vector<KeyRangeLocationInfo> >*,Error err) 
	{
		fdb_probe_actor_enter("getChangeFeedStreamActor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getChangeFeedStreamActor", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1loopBody1cont4(int loopDepth) 
	{
															#line 10768 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		++db->feedStreamStarts;
															#line 10770 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (locations.size() > 1)
															#line 59379 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 10771 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			++db->feedMergeStreamStarts;
															#line 10772 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			std::vector<std::pair<StorageServerInterface, KeyRange>> interfs;
															#line 10773 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			for(int i = 0;i < locations.size();i++) {
															#line 10774 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				interfs.emplace_back(locations[i].locations->getInterface(chosenLocations[i]), locations[i].range & range);
															#line 59389 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 10777 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			CODE_PROBE(true, "Change feed merge cursor");
															#line 10779 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_4 = mergeChangeFeedStream(db, interfs, results, rangeID, range, &begin, end, replyBufferSize, canReadPopped, readOptions, encrypted, cacheData, tenantPrefix) || cx->connectionFileChanged();
															#line 10779 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<GetChangeFeedStreamActorActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 59397 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1loopBody1Catch1(__when_expr_4.getError(), loopDepth); else return a_body1loopBody1cont4when1(__when_expr_4.get(), loopDepth); };
			static_cast<GetChangeFeedStreamActorActor*>(this)->actor_wait_state = 5;
															#line 10779 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< GetChangeFeedStreamActorActor, 4, Void >*>(static_cast<GetChangeFeedStreamActorActor*>(this)));
															#line 59402 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
															#line 10794 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			CODE_PROBE(true, "Change feed single cursor");
															#line 10795 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StorageServerInterface interf = locations[0].locations->getInterface(chosenLocations[0]);
															#line 10796 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_5 = singleChangeFeedStream(db, interf, range, results, rangeID, &begin, end, replyBufferSize, canReadPopped, readOptions, encrypted, cacheData, tenantPrefix) || cx->connectionFileChanged();
															#line 10796 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<GetChangeFeedStreamActorActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 59415 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_5.isReady()) { if (__when_expr_5.isError()) return a_body1loopBody1Catch1(__when_expr_5.getError(), loopDepth); else return a_body1loopBody1cont4when2(__when_expr_5.get(), loopDepth); };
			static_cast<GetChangeFeedStreamActorActor*>(this)->actor_wait_state = 6;
															#line 10796 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_5.addCallbackAndClear(static_cast<ActorCallback< GetChangeFeedStreamActorActor, 5, Void >*>(static_cast<GetChangeFeedStreamActorActor*>(this)));
															#line 59420 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}

		return loopDepth;
	}
	int a_body1loopBody1cont3loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1cont3loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont3loopBody1(int loopDepth) 
	{
															#line 10724 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!(loc < locations.size()))
															#line 59437 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
			return a_body1loopBody1cont3break1(loopDepth==0?0:loopDepth-1); // break
		}
															#line 10727 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		int count = 0;
															#line 10728 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		int useIdx = -1;
															#line 10729 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for(int i = 0;i < locations[loc].locations->size();i++) {
															#line 10730 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!IFailureMonitor::failureMonitor() .getState(locations[loc] .locations->get(i, &StorageServerInterface::changeFeedStream) .getEndpoint()) .failed)
															#line 59449 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 10735 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (deterministicRandom()->random01() <= 1.0 / ++count)
															#line 59453 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 10736 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					useIdx = i;
															#line 59457 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
			}
		}
															#line 10741 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (useIdx >= 0)
															#line 59463 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 10742 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			chosenLocations[loc] = useIdx;
															#line 10743 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			loc++;
															#line 10744 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (g_network->isSimulated() && !g_simulator->speedUpSimulation && BUGGIFY_WITH_PROB(0.01))
															#line 59471 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 10746 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				StrictFuture<Void> __when_expr_2 = delay(deterministicRandom()->random01());
															#line 10746 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (static_cast<GetChangeFeedStreamActorActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 59477 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1loopBody1Catch1(__when_expr_2.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1cont3loopBody1when1(__when_expr_2.get(), loopDepth); };
				static_cast<GetChangeFeedStreamActorActor*>(this)->actor_wait_state = 3;
															#line 10746 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< GetChangeFeedStreamActorActor, 2, Void >*>(static_cast<GetChangeFeedStreamActorActor*>(this)));
															#line 59482 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				loopDepth = 0;
			}
			else
			{
				loopDepth = a_body1loopBody1cont3loopBody1cont6(loopDepth);
			}
		}
		else
		{
			loopDepth = a_body1loopBody1cont3loopBody1cont1(loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont3break1(int loopDepth) 
	{
		try {
			return a_body1loopBody1cont4(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont3loopBody1cont1(int loopDepth) 
	{
															#line 10751 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		std::vector<Future<Void>> ok(locations[loc].locations->size());
															#line 10752 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for(int i = 0;i < ok.size();i++) {
															#line 10753 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ok[i] = IFailureMonitor::failureMonitor().onStateEqual( locations[loc].locations->get(i, &StorageServerInterface::changeFeedStream).getEndpoint(), FailureStatus(false));
															#line 59518 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 10759 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (now() - g_network->networkInfo.newestAlternativesFailure > 1 || deterministicRandom()->random01() < 0.01)
															#line 59522 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 10761 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent("AllAlternativesFailed").detail("Alternatives", locations[0].locations->description());
															#line 59526 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 10764 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_3 = allAlternativesFailedDelay(quorum(ok, 1));
															#line 10764 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<GetChangeFeedStreamActorActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 59532 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1loopBody1Catch1(__when_expr_3.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1cont3loopBody1cont1when1(__when_expr_3.get(), loopDepth); };
		static_cast<GetChangeFeedStreamActorActor*>(this)->actor_wait_state = 4;
															#line 10764 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< GetChangeFeedStreamActorActor, 3, Void >*>(static_cast<GetChangeFeedStreamActorActor*>(this)));
															#line 59537 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont3loopBody1cont6(int loopDepth) 
	{
		return a_body1loopBody1cont3loopHead1(loopDepth); // continue

		return loopDepth;
	}
	int a_body1loopBody1cont3loopBody1cont7(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3loopBody1cont6(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont3loopBody1cont7(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3loopBody1cont6(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont3loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3loopBody1cont7(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont3loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3loopBody1cont7(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<GetChangeFeedStreamActorActor*>(this)->actor_wait_state > 0) static_cast<GetChangeFeedStreamActorActor*>(this)->actor_wait_state = 0;
		static_cast<GetChangeFeedStreamActorActor*>(this)->ActorCallback< GetChangeFeedStreamActorActor, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetChangeFeedStreamActorActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getChangeFeedStreamActor", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont3loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getChangeFeedStreamActor", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< GetChangeFeedStreamActorActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getChangeFeedStreamActor", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont3loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getChangeFeedStreamActor", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< GetChangeFeedStreamActorActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getChangeFeedStreamActor", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getChangeFeedStreamActor", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1loopBody1cont3loopBody1cont9(Void const& _,int loopDepth) 
	{
															#line 10765 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		loc = 0;
															#line 59627 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (loopDepth == 0) return a_body1loopBody1cont3loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1cont3loopBody1cont9(Void && _,int loopDepth) 
	{
															#line 10765 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		loc = 0;
															#line 59636 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (loopDepth == 0) return a_body1loopBody1cont3loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1cont3loopBody1cont1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3loopBody1cont9(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont3loopBody1cont1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3loopBody1cont9(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<GetChangeFeedStreamActorActor*>(this)->actor_wait_state > 0) static_cast<GetChangeFeedStreamActorActor*>(this)->actor_wait_state = 0;
		static_cast<GetChangeFeedStreamActorActor*>(this)->ActorCallback< GetChangeFeedStreamActorActor, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetChangeFeedStreamActorActor, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getChangeFeedStreamActor", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1cont3loopBody1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getChangeFeedStreamActor", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< GetChangeFeedStreamActorActor, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getChangeFeedStreamActor", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1cont3loopBody1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getChangeFeedStreamActor", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< GetChangeFeedStreamActorActor, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getChangeFeedStreamActor", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getChangeFeedStreamActor", reinterpret_cast<unsigned long>(this), 3);

	}
	int a_body1loopBody1cont7(int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont11(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont8(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont7(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont8(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont7(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont4when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont8(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont4when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont8(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose5() 
	{
		if (static_cast<GetChangeFeedStreamActorActor*>(this)->actor_wait_state > 0) static_cast<GetChangeFeedStreamActorActor*>(this)->actor_wait_state = 0;
		static_cast<GetChangeFeedStreamActorActor*>(this)->ActorCallback< GetChangeFeedStreamActorActor, 4, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetChangeFeedStreamActorActor, 4, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getChangeFeedStreamActor", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1loopBody1cont4when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getChangeFeedStreamActor", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_fire(ActorCallback< GetChangeFeedStreamActorActor, 4, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getChangeFeedStreamActor", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1loopBody1cont4when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getChangeFeedStreamActor", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_error(ActorCallback< GetChangeFeedStreamActorActor, 4, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getChangeFeedStreamActor", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getChangeFeedStreamActor", reinterpret_cast<unsigned long>(this), 4);

	}
	int a_body1loopBody1cont10(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont7(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont10(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont7(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont4when2(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont10(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont4when2(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont10(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose6() 
	{
		if (static_cast<GetChangeFeedStreamActorActor*>(this)->actor_wait_state > 0) static_cast<GetChangeFeedStreamActorActor*>(this)->actor_wait_state = 0;
		static_cast<GetChangeFeedStreamActorActor*>(this)->ActorCallback< GetChangeFeedStreamActorActor, 5, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetChangeFeedStreamActorActor, 5, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getChangeFeedStreamActor", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1loopBody1cont4when2(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getChangeFeedStreamActor", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_fire(ActorCallback< GetChangeFeedStreamActorActor, 5, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getChangeFeedStreamActor", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1loopBody1cont4when2(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getChangeFeedStreamActor", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_error(ActorCallback< GetChangeFeedStreamActorActor, 5, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getChangeFeedStreamActor", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getChangeFeedStreamActor", reinterpret_cast<unsigned long>(this), 5);

	}
	int a_body1loopBody1cont11(int loopDepth) 
	{
		try {
			loopDepth = a_body1loopBody1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont7(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont7(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont7(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont7(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose7() 
	{
		if (static_cast<GetChangeFeedStreamActorActor*>(this)->actor_wait_state > 0) static_cast<GetChangeFeedStreamActorActor*>(this)->actor_wait_state = 0;
		static_cast<GetChangeFeedStreamActorActor*>(this)->ActorCallback< GetChangeFeedStreamActorActor, 6, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetChangeFeedStreamActorActor, 6, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getChangeFeedStreamActor", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getChangeFeedStreamActor", reinterpret_cast<unsigned long>(this), 6);

	}
	void a_callback_fire(ActorCallback< GetChangeFeedStreamActorActor, 6, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getChangeFeedStreamActor", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getChangeFeedStreamActor", reinterpret_cast<unsigned long>(this), 6);

	}
	void a_callback_error(ActorCallback< GetChangeFeedStreamActorActor, 6, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getChangeFeedStreamActor", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getChangeFeedStreamActor", reinterpret_cast<unsigned long>(this), 6);

	}
															#line 10677 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<DatabaseContext> db;
															#line 10677 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<ChangeFeedData> results;
															#line 10677 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Key rangeID;
															#line 10677 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Version begin;
															#line 10677 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Version end;
															#line 10677 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeyRange range;
															#line 10677 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	int replyBufferSize;
															#line 10677 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	bool canReadPopped;
															#line 10677 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	ReadOptions readOptions;
															#line 10677 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	bool encrypted;
															#line 10677 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<ChangeFeedCacheData> cacheData;
															#line 10677 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Key tenantPrefix;
															#line 10689 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Database cx;
															#line 10690 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Span span;
															#line 10692 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	double sleepWithBackoff;
															#line 10693 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Version lastBeginVersion;
															#line 10696 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeyRange keys;
															#line 10701 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	std::vector<KeyRangeLocationInfo> locations;
															#line 10722 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	std::vector<int> chosenLocations;
															#line 10723 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	int loc;
															#line 59994 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via getChangeFeedStreamActor()
															#line 10677 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetChangeFeedStreamActorActor final : public Actor<Void>, public ActorCallback< GetChangeFeedStreamActorActor, 0, KeyRange >, public ActorCallback< GetChangeFeedStreamActorActor, 1, std::vector<KeyRangeLocationInfo> >, public ActorCallback< GetChangeFeedStreamActorActor, 2, Void >, public ActorCallback< GetChangeFeedStreamActorActor, 3, Void >, public ActorCallback< GetChangeFeedStreamActorActor, 4, Void >, public ActorCallback< GetChangeFeedStreamActorActor, 5, Void >, public ActorCallback< GetChangeFeedStreamActorActor, 6, Void >, public FastAllocated<GetChangeFeedStreamActorActor>, public GetChangeFeedStreamActorActorState<GetChangeFeedStreamActorActor> {
															#line 59999 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<GetChangeFeedStreamActorActor>::operator new;
	using FastAllocated<GetChangeFeedStreamActorActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< GetChangeFeedStreamActorActor, 0, KeyRange >;
friend struct ActorCallback< GetChangeFeedStreamActorActor, 1, std::vector<KeyRangeLocationInfo> >;
friend struct ActorCallback< GetChangeFeedStreamActorActor, 2, Void >;
friend struct ActorCallback< GetChangeFeedStreamActorActor, 3, Void >;
friend struct ActorCallback< GetChangeFeedStreamActorActor, 4, Void >;
friend struct ActorCallback< GetChangeFeedStreamActorActor, 5, Void >;
friend struct ActorCallback< GetChangeFeedStreamActorActor, 6, Void >;
															#line 10677 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetChangeFeedStreamActorActor(Reference<DatabaseContext> const& db,Reference<ChangeFeedData> const& results,Key const& rangeID,Version const& begin,Version const& end,KeyRange const& range,int const& replyBufferSize,bool const& canReadPopped,ReadOptions const& readOptions,bool const& encrypted,Reference<ChangeFeedCacheData> const& cacheData,Key const& tenantPrefix) 
															#line 60016 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Void>(),
		   GetChangeFeedStreamActorActorState<GetChangeFeedStreamActorActor>(db, results, rangeID, begin, end, range, replyBufferSize, canReadPopped, readOptions, encrypted, cacheData, tenantPrefix)
	{
		fdb_probe_actor_enter("getChangeFeedStreamActor", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("getChangeFeedStreamActor");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("getChangeFeedStreamActor", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< GetChangeFeedStreamActorActor, 0, KeyRange >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< GetChangeFeedStreamActorActor, 1, std::vector<KeyRangeLocationInfo> >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< GetChangeFeedStreamActorActor, 2, Void >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< GetChangeFeedStreamActorActor, 3, Void >*)0, actor_cancelled()); break;
		case 5: this->a_callback_error((ActorCallback< GetChangeFeedStreamActorActor, 4, Void >*)0, actor_cancelled()); break;
		case 6: this->a_callback_error((ActorCallback< GetChangeFeedStreamActorActor, 5, Void >*)0, actor_cancelled()); break;
		case 7: this->a_callback_error((ActorCallback< GetChangeFeedStreamActorActor, 6, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 10677 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<Void> getChangeFeedStreamActor( Reference<DatabaseContext> const& db, Reference<ChangeFeedData> const& results, Key const& rangeID, Version const& begin, Version const& end, KeyRange const& range, int const& replyBufferSize, bool const& canReadPopped, ReadOptions const& readOptions, bool const& encrypted, Reference<ChangeFeedCacheData> const& cacheData, Key const& tenantPrefix ) {
															#line 10677 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Void>(new GetChangeFeedStreamActorActor(db, results, rangeID, begin, end, range, replyBufferSize, canReadPopped, readOptions, encrypted, cacheData, tenantPrefix));
															#line 60050 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 10870 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

															#line 60055 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via durableChangeFeedMonitor()
															#line 10871 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class DurableChangeFeedMonitorActor>
															#line 10871 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class DurableChangeFeedMonitorActorState {
															#line 60062 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 10871 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	DurableChangeFeedMonitorActorState(Reference<DatabaseContext> const& db,Reference<ChangeFeedData> const& results,Key const& rangeID,Version const& begin,Version const& end,KeyRange const& range,int const& replyBufferSize,bool const& canReadPopped,ReadOptions const& readOptions,bool const& encrypted,Future<Key> const& tenantPrefix) 
															#line 10871 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 10871 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : db(db),
															#line 10871 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   results(results),
															#line 10871 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   rangeID(rangeID),
															#line 10871 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   begin(begin),
															#line 10871 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   end(end),
															#line 10871 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   range(range),
															#line 10871 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   replyBufferSize(replyBufferSize),
															#line 10871 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   canReadPopped(canReadPopped),
															#line 10871 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   readOptions(readOptions),
															#line 10871 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   encrypted(encrypted),
															#line 10871 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   tenantPrefix(tenantPrefix),
															#line 10882 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   cacheRange(),
															#line 10883 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   data(),
															#line 10884 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   err(success()),
															#line 10885 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   originalBegin(begin)
															#line 60097 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("durableChangeFeedMonitor", reinterpret_cast<unsigned long>(this));

	}
	~DurableChangeFeedMonitorActorState() 
	{
		fdb_probe_actor_destroy("durableChangeFeedMonitor", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 10886 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			results->endVersion = end;
															#line 10887 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			db->usedAnyChangeFeeds = true;
															#line 60114 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			try {
															#line 10889 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (db->storage != nullptr)
															#line 60118 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 10890 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					StrictFuture<Void> __when_expr_0 = db->initializeChangeFeedCache;
															#line 10890 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					if (static_cast<DurableChangeFeedMonitorActor*>(this)->actor_wait_state < 0) return a_body1Catch2(actor_cancelled(), loopDepth);
															#line 60124 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch2(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
					static_cast<DurableChangeFeedMonitorActor*>(this)->actor_wait_state = 1;
															#line 10890 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< DurableChangeFeedMonitorActor, 0, Void >*>(static_cast<DurableChangeFeedMonitorActor*>(this)));
															#line 60129 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					loopDepth = 0;
				}
				else
				{
					loopDepth = a_body1cont2(loopDepth);
				}
			}
			catch (Error& error) {
				loopDepth = a_body1Catch2(error, loopDepth);
			} catch (...) {
				loopDepth = a_body1Catch2(unknown_error(), loopDepth);
			}
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~DurableChangeFeedMonitorActorState();
		static_cast<DurableChangeFeedMonitorActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 10948 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (data)
															#line 60163 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 10949 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			data->active = false;
															#line 10950 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			data->inactiveTime = now();
															#line 60169 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 10952 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (err.code() != error_code_success)
															#line 60173 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 10953 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			return a_body1Catch1(err, loopDepth);
															#line 60177 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 10955 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<DurableChangeFeedMonitorActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~DurableChangeFeedMonitorActorState(); static_cast<DurableChangeFeedMonitorActor*>(this)->destroy(); return 0; }
															#line 60181 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<DurableChangeFeedMonitorActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~DurableChangeFeedMonitorActorState();
		static_cast<DurableChangeFeedMonitorActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1Catch2(const Error& e,int loopDepth=0) 
	{
		try {
															#line 10946 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			err = e;
															#line 60194 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont2(int loopDepth) 
	{
															#line 10933 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_3 = getChangeFeedStreamActor(db, results, rangeID, begin, end, range, replyBufferSize, canReadPopped, readOptions, encrypted, data, cacheRange.present() ? cacheRange.get().tenantPrefix : Key());
															#line 10933 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<DurableChangeFeedMonitorActor*>(this)->actor_wait_state < 0) return a_body1Catch2(actor_cancelled(), loopDepth);
															#line 60211 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch2(__when_expr_3.getError(), loopDepth); else return a_body1cont2when1(__when_expr_3.get(), loopDepth); };
		static_cast<DurableChangeFeedMonitorActor*>(this)->actor_wait_state = 4;
															#line 10933 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< DurableChangeFeedMonitorActor, 3, Void >*>(static_cast<DurableChangeFeedMonitorActor*>(this)));
															#line 60216 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont3(Void const& _,int loopDepth) 
	{
															#line 10891 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Key> __when_expr_1 = tenantPrefix;
															#line 10891 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<DurableChangeFeedMonitorActor*>(this)->actor_wait_state < 0) return a_body1Catch2(actor_cancelled(), loopDepth);
															#line 60227 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch2(__when_expr_1.getError(), loopDepth); else return a_body1cont3when1(__when_expr_1.get(), loopDepth); };
		static_cast<DurableChangeFeedMonitorActor*>(this)->actor_wait_state = 2;
															#line 10891 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< DurableChangeFeedMonitorActor, 1, Key >*>(static_cast<DurableChangeFeedMonitorActor*>(this)));
															#line 60232 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont3(Void && _,int loopDepth) 
	{
															#line 10891 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Key> __when_expr_1 = tenantPrefix;
															#line 10891 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<DurableChangeFeedMonitorActor*>(this)->actor_wait_state < 0) return a_body1Catch2(actor_cancelled(), loopDepth);
															#line 60243 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch2(__when_expr_1.getError(), loopDepth); else return a_body1cont3when1(__when_expr_1.get(), loopDepth); };
		static_cast<DurableChangeFeedMonitorActor*>(this)->actor_wait_state = 2;
															#line 10891 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< DurableChangeFeedMonitorActor, 1, Key >*>(static_cast<DurableChangeFeedMonitorActor*>(this)));
															#line 60248 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont3(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont3(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<DurableChangeFeedMonitorActor*>(this)->actor_wait_state > 0) static_cast<DurableChangeFeedMonitorActor*>(this)->actor_wait_state = 0;
		static_cast<DurableChangeFeedMonitorActor*>(this)->ActorCallback< DurableChangeFeedMonitorActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< DurableChangeFeedMonitorActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("durableChangeFeedMonitor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("durableChangeFeedMonitor", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< DurableChangeFeedMonitorActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("durableChangeFeedMonitor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("durableChangeFeedMonitor", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< DurableChangeFeedMonitorActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("durableChangeFeedMonitor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch2(err, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("durableChangeFeedMonitor", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont4(Key const& prefix,int loopDepth) 
	{
															#line 10892 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		cacheRange = ChangeFeedCacheRange(prefix, rangeID, range);
															#line 10893 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (db->changeFeedCaches.count(cacheRange.get()))
															#line 60322 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 10894 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			auto cacheData = db->changeFeedCaches[cacheRange.get()];
															#line 10895 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (begin < cacheData->popped)
															#line 60328 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 10896 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				results->mutations.sendError(change_feed_popped());
															#line 10897 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (!static_cast<DurableChangeFeedMonitorActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~DurableChangeFeedMonitorActorState(); static_cast<DurableChangeFeedMonitorActor*>(this)->destroy(); return 0; }
															#line 60334 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				new (&static_cast<DurableChangeFeedMonitorActor*>(this)->SAV< Void >::value()) Void(Void());
				this->~DurableChangeFeedMonitorActorState();
				static_cast<DurableChangeFeedMonitorActor*>(this)->finishSendAndDelPromiseRef();
				return 0;
			}
															#line 10899 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (cacheData->version <= begin)
															#line 60342 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 10900 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				StrictFuture<bool> __when_expr_2 = getChangeFeedStreamFromDisk(db, results, rangeID, &begin, end, range, prefix);
															#line 10900 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (static_cast<DurableChangeFeedMonitorActor*>(this)->actor_wait_state < 0) return a_body1Catch2(actor_cancelled(), loopDepth);
															#line 60348 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch2(__when_expr_2.getError(), loopDepth); else return a_body1cont4when1(__when_expr_2.get(), loopDepth); };
				static_cast<DurableChangeFeedMonitorActor*>(this)->actor_wait_state = 3;
															#line 10900 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< DurableChangeFeedMonitorActor, 2, bool >*>(static_cast<DurableChangeFeedMonitorActor*>(this)));
															#line 60353 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				loopDepth = 0;
			}
			else
			{
				loopDepth = a_body1cont6(loopDepth);
			}
		}
		else
		{
			loopDepth = a_body1cont5(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont4(Key && prefix,int loopDepth) 
	{
															#line 10892 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		cacheRange = ChangeFeedCacheRange(prefix, rangeID, range);
															#line 10893 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (db->changeFeedCaches.count(cacheRange.get()))
															#line 60374 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 10894 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			auto cacheData = db->changeFeedCaches[cacheRange.get()];
															#line 10895 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (begin < cacheData->popped)
															#line 60380 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 10896 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				results->mutations.sendError(change_feed_popped());
															#line 10897 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (!static_cast<DurableChangeFeedMonitorActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~DurableChangeFeedMonitorActorState(); static_cast<DurableChangeFeedMonitorActor*>(this)->destroy(); return 0; }
															#line 60386 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				new (&static_cast<DurableChangeFeedMonitorActor*>(this)->SAV< Void >::value()) Void(Void());
				this->~DurableChangeFeedMonitorActorState();
				static_cast<DurableChangeFeedMonitorActor*>(this)->finishSendAndDelPromiseRef();
				return 0;
			}
															#line 10899 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (cacheData->version <= begin)
															#line 60394 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 10900 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				StrictFuture<bool> __when_expr_2 = getChangeFeedStreamFromDisk(db, results, rangeID, &begin, end, range, prefix);
															#line 10900 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (static_cast<DurableChangeFeedMonitorActor*>(this)->actor_wait_state < 0) return a_body1Catch2(actor_cancelled(), loopDepth);
															#line 60400 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch2(__when_expr_2.getError(), loopDepth); else return a_body1cont4when1(__when_expr_2.get(), loopDepth); };
				static_cast<DurableChangeFeedMonitorActor*>(this)->actor_wait_state = 3;
															#line 10900 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< DurableChangeFeedMonitorActor, 2, bool >*>(static_cast<DurableChangeFeedMonitorActor*>(this)));
															#line 60405 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				loopDepth = 0;
			}
			else
			{
				loopDepth = a_body1cont6(loopDepth);
			}
		}
		else
		{
			loopDepth = a_body1cont5(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont3when1(Key const& prefix,int loopDepth) 
	{
		loopDepth = a_body1cont4(prefix, loopDepth);

		return loopDepth;
	}
	int a_body1cont3when1(Key && prefix,int loopDepth) 
	{
		loopDepth = a_body1cont4(std::move(prefix), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<DurableChangeFeedMonitorActor*>(this)->actor_wait_state > 0) static_cast<DurableChangeFeedMonitorActor*>(this)->actor_wait_state = 0;
		static_cast<DurableChangeFeedMonitorActor*>(this)->ActorCallback< DurableChangeFeedMonitorActor, 1, Key >::remove();

	}
	void a_callback_fire(ActorCallback< DurableChangeFeedMonitorActor, 1, Key >*,Key const& value) 
	{
		fdb_probe_actor_enter("durableChangeFeedMonitor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont3when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("durableChangeFeedMonitor", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< DurableChangeFeedMonitorActor, 1, Key >*,Key && value) 
	{
		fdb_probe_actor_enter("durableChangeFeedMonitor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont3when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("durableChangeFeedMonitor", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< DurableChangeFeedMonitorActor, 1, Key >*,Error err) 
	{
		fdb_probe_actor_enter("durableChangeFeedMonitor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch2(err, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("durableChangeFeedMonitor", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont5(int loopDepth) 
	{
															#line 10907 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (end == MAX_VERSION)
															#line 60487 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 10908 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!db->changeFeedCaches.count(cacheRange.get()))
															#line 60491 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 10909 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				data = makeReference<ChangeFeedCacheData>();
															#line 10910 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				data->version = begin;
															#line 10911 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				data->active = true;
															#line 10912 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				db->changeFeedCaches[cacheRange.get()] = data;
															#line 10913 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				db->rangeId_cacheData[cacheRange.get().rangeId][cacheRange.get()] = data;
															#line 10914 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				Key durableFeedKey = changeFeedCacheFeedKey(cacheRange.get().tenantPrefix, rangeID, range);
															#line 10915 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				Value durableFeedValue = changeFeedCacheFeedValue(begin, 0);
															#line 10916 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				db->storage->set(KeyValueRef(durableFeedKey, durableFeedValue));
															#line 60509 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
			else
			{
															#line 10918 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				data = db->changeFeedCaches[cacheRange.get()];
															#line 10919 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (!data->active && data->version <= begin)
															#line 60517 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 10920 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					data->active = true;
															#line 10921 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					if (originalBegin > data->latest + 1)
															#line 60523 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					{
															#line 10922 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
						data->version = originalBegin;
															#line 10923 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
						Key durableFeedKey = changeFeedCacheFeedKey(cacheRange.get().tenantPrefix, rangeID, range);
															#line 10924 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
						Value durableFeedValue = changeFeedCacheFeedValue(originalBegin, data->popped);
															#line 10925 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
						db->storage->set(KeyValueRef(durableFeedKey, durableFeedValue));
															#line 60533 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					}
				}
				else
				{
															#line 10928 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					data = Reference<ChangeFeedCacheData>();
															#line 60540 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
			}
		}
		loopDepth = a_body1cont2(loopDepth);

		return loopDepth;
	}
	int a_body1cont6(int loopDepth) 
	{
		loopDepth = a_body1cont5(loopDepth);

		return loopDepth;
	}
	int a_body1cont8(bool const& foundEnd,int loopDepth) 
	{
															#line 10901 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (foundEnd)
															#line 60558 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 10902 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			results->mutations.sendError(end_of_stream());
															#line 10903 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<DurableChangeFeedMonitorActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~DurableChangeFeedMonitorActorState(); static_cast<DurableChangeFeedMonitorActor*>(this)->destroy(); return 0; }
															#line 60564 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<DurableChangeFeedMonitorActor*>(this)->SAV< Void >::value()) Void(Void());
			this->~DurableChangeFeedMonitorActorState();
			static_cast<DurableChangeFeedMonitorActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
		loopDepth = a_body1cont6(loopDepth);

		return loopDepth;
	}
	int a_body1cont8(bool && foundEnd,int loopDepth) 
	{
															#line 10901 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (foundEnd)
															#line 60578 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 10902 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			results->mutations.sendError(end_of_stream());
															#line 10903 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<DurableChangeFeedMonitorActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~DurableChangeFeedMonitorActorState(); static_cast<DurableChangeFeedMonitorActor*>(this)->destroy(); return 0; }
															#line 60584 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<DurableChangeFeedMonitorActor*>(this)->SAV< Void >::value()) Void(Void());
			this->~DurableChangeFeedMonitorActorState();
			static_cast<DurableChangeFeedMonitorActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
		loopDepth = a_body1cont6(loopDepth);

		return loopDepth;
	}
	int a_body1cont4when1(bool const& foundEnd,int loopDepth) 
	{
		loopDepth = a_body1cont8(foundEnd, loopDepth);

		return loopDepth;
	}
	int a_body1cont4when1(bool && foundEnd,int loopDepth) 
	{
		loopDepth = a_body1cont8(std::move(foundEnd), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<DurableChangeFeedMonitorActor*>(this)->actor_wait_state > 0) static_cast<DurableChangeFeedMonitorActor*>(this)->actor_wait_state = 0;
		static_cast<DurableChangeFeedMonitorActor*>(this)->ActorCallback< DurableChangeFeedMonitorActor, 2, bool >::remove();

	}
	void a_callback_fire(ActorCallback< DurableChangeFeedMonitorActor, 2, bool >*,bool const& value) 
	{
		fdb_probe_actor_enter("durableChangeFeedMonitor", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont4when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("durableChangeFeedMonitor", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< DurableChangeFeedMonitorActor, 2, bool >*,bool && value) 
	{
		fdb_probe_actor_enter("durableChangeFeedMonitor", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont4when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("durableChangeFeedMonitor", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< DurableChangeFeedMonitorActor, 2, bool >*,Error err) 
	{
		fdb_probe_actor_enter("durableChangeFeedMonitor", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch2(err, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("durableChangeFeedMonitor", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1cont18(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont18cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont18(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont18cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont18(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont18(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<DurableChangeFeedMonitorActor*>(this)->actor_wait_state > 0) static_cast<DurableChangeFeedMonitorActor*>(this)->actor_wait_state = 0;
		static_cast<DurableChangeFeedMonitorActor*>(this)->ActorCallback< DurableChangeFeedMonitorActor, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< DurableChangeFeedMonitorActor, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("durableChangeFeedMonitor", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("durableChangeFeedMonitor", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< DurableChangeFeedMonitorActor, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("durableChangeFeedMonitor", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("durableChangeFeedMonitor", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< DurableChangeFeedMonitorActor, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("durableChangeFeedMonitor", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1Catch2(err, 0);
		}
		catch (Error& error) {
			a_body1Catch2(error, 0);
		} catch (...) {
			a_body1Catch2(unknown_error(), 0);
		}
		fdb_probe_actor_exit("durableChangeFeedMonitor", reinterpret_cast<unsigned long>(this), 3);

	}
	int a_body1cont18cont1(int loopDepth) 
	{
		try {
			loopDepth = a_body1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
															#line 10871 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<DatabaseContext> db;
															#line 10871 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<ChangeFeedData> results;
															#line 10871 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Key rangeID;
															#line 10871 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Version begin;
															#line 10871 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Version end;
															#line 10871 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeyRange range;
															#line 10871 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	int replyBufferSize;
															#line 10871 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	bool canReadPopped;
															#line 10871 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	ReadOptions readOptions;
															#line 10871 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	bool encrypted;
															#line 10871 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Future<Key> tenantPrefix;
															#line 10882 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Optional<ChangeFeedCacheRange> cacheRange;
															#line 10883 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<ChangeFeedCacheData> data;
															#line 10884 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Error err;
															#line 10885 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Version originalBegin;
															#line 60775 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via durableChangeFeedMonitor()
															#line 10871 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class DurableChangeFeedMonitorActor final : public Actor<Void>, public ActorCallback< DurableChangeFeedMonitorActor, 0, Void >, public ActorCallback< DurableChangeFeedMonitorActor, 1, Key >, public ActorCallback< DurableChangeFeedMonitorActor, 2, bool >, public ActorCallback< DurableChangeFeedMonitorActor, 3, Void >, public FastAllocated<DurableChangeFeedMonitorActor>, public DurableChangeFeedMonitorActorState<DurableChangeFeedMonitorActor> {
															#line 60780 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<DurableChangeFeedMonitorActor>::operator new;
	using FastAllocated<DurableChangeFeedMonitorActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< DurableChangeFeedMonitorActor, 0, Void >;
friend struct ActorCallback< DurableChangeFeedMonitorActor, 1, Key >;
friend struct ActorCallback< DurableChangeFeedMonitorActor, 2, bool >;
friend struct ActorCallback< DurableChangeFeedMonitorActor, 3, Void >;
															#line 10871 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	DurableChangeFeedMonitorActor(Reference<DatabaseContext> const& db,Reference<ChangeFeedData> const& results,Key const& rangeID,Version const& begin,Version const& end,KeyRange const& range,int const& replyBufferSize,bool const& canReadPopped,ReadOptions const& readOptions,bool const& encrypted,Future<Key> const& tenantPrefix) 
															#line 60794 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Void>(),
		   DurableChangeFeedMonitorActorState<DurableChangeFeedMonitorActor>(db, results, rangeID, begin, end, range, replyBufferSize, canReadPopped, readOptions, encrypted, tenantPrefix)
	{
		fdb_probe_actor_enter("durableChangeFeedMonitor", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("durableChangeFeedMonitor");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("durableChangeFeedMonitor", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< DurableChangeFeedMonitorActor, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< DurableChangeFeedMonitorActor, 1, Key >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< DurableChangeFeedMonitorActor, 2, bool >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< DurableChangeFeedMonitorActor, 3, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 10871 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<Void> durableChangeFeedMonitor( Reference<DatabaseContext> const& db, Reference<ChangeFeedData> const& results, Key const& rangeID, Version const& begin, Version const& end, KeyRange const& range, int const& replyBufferSize, bool const& canReadPopped, ReadOptions const& readOptions, bool const& encrypted, Future<Key> const& tenantPrefix ) {
															#line 10871 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Void>(new DurableChangeFeedMonitorActor(db, results, rangeID, begin, end, range, replyBufferSize, canReadPopped, readOptions, encrypted, tenantPrefix));
															#line 60825 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 10957 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

Future<Void> DatabaseContext::getChangeFeedStream(Reference<ChangeFeedData> results,
                                                  Key rangeID,
                                                  Version begin,
                                                  Version end,
                                                  KeyRange range,
                                                  int replyBufferSize,
                                                  bool canReadPopped,
                                                  ReadOptions readOptions,
                                                  bool encrypted,
                                                  Future<Key> tenantPrefix) {
	return durableChangeFeedMonitor(Reference<DatabaseContext>::addRef(this),
	                                results,
	                                rangeID,
	                                begin,
	                                end,
	                                range,
	                                replyBufferSize,
	                                canReadPopped,
	                                readOptions,
	                                encrypted,
	                                tenantPrefix);
}

Version OverlappingChangeFeedsInfo::getFeedMetadataVersion(const KeyRangeRef& range) const {
	Version v = invalidVersion;
	for (auto& it : feedMetadataVersions) {
		if (it.second > v && it.first.intersects(range)) {
			v = it.second;
		}
	}
	return v;
}

															#line 60863 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via singleLocationOverlappingChangeFeeds()
															#line 10991 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class SingleLocationOverlappingChangeFeedsActor>
															#line 10991 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class SingleLocationOverlappingChangeFeedsActorState {
															#line 60870 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 10991 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	SingleLocationOverlappingChangeFeedsActorState(Database const& cx,Reference<LocationInfo> const& location,KeyRangeRef const& range,Version const& minVersion) 
															#line 10991 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 10991 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : cx(cx),
															#line 10991 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   location(location),
															#line 10991 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   range(range),
															#line 10991 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   minVersion(minVersion),
															#line 10995 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   req()
															#line 60885 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("singleLocationOverlappingChangeFeeds", reinterpret_cast<unsigned long>(this));

	}
	~SingleLocationOverlappingChangeFeedsActorState() 
	{
		fdb_probe_actor_destroy("singleLocationOverlappingChangeFeeds", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 10996 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			req.range = range;
															#line 10997 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			req.minVersion = minVersion;
															#line 10999 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<OverlappingChangeFeedsReply> __when_expr_0 = loadBalance(cx.getPtr(), location, &StorageServerInterface::overlappingChangeFeeds, req, TaskPriority::DefaultPromiseEndpoint, AtMostOnce::False, cx->enableLocalityLoadBalance ? &cx->queueModel : nullptr);
															#line 10999 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<SingleLocationOverlappingChangeFeedsActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 60906 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<SingleLocationOverlappingChangeFeedsActor*>(this)->actor_wait_state = 1;
															#line 10999 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< SingleLocationOverlappingChangeFeedsActor, 0, OverlappingChangeFeedsReply >*>(static_cast<SingleLocationOverlappingChangeFeedsActor*>(this)));
															#line 60911 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~SingleLocationOverlappingChangeFeedsActorState();
		static_cast<SingleLocationOverlappingChangeFeedsActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(OverlappingChangeFeedsReply const& rep,int loopDepth) 
	{
															#line 11006 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<SingleLocationOverlappingChangeFeedsActor*>(this)->SAV<OverlappingChangeFeedsReply>::futures) { (void)(rep); this->~SingleLocationOverlappingChangeFeedsActorState(); static_cast<SingleLocationOverlappingChangeFeedsActor*>(this)->destroy(); return 0; }
															#line 60934 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<SingleLocationOverlappingChangeFeedsActor*>(this)->SAV< OverlappingChangeFeedsReply >::value()) OverlappingChangeFeedsReply(rep);
		this->~SingleLocationOverlappingChangeFeedsActorState();
		static_cast<SingleLocationOverlappingChangeFeedsActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1(OverlappingChangeFeedsReply && rep,int loopDepth) 
	{
															#line 11006 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<SingleLocationOverlappingChangeFeedsActor*>(this)->SAV<OverlappingChangeFeedsReply>::futures) { (void)(rep); this->~SingleLocationOverlappingChangeFeedsActorState(); static_cast<SingleLocationOverlappingChangeFeedsActor*>(this)->destroy(); return 0; }
															#line 60946 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<SingleLocationOverlappingChangeFeedsActor*>(this)->SAV< OverlappingChangeFeedsReply >::value()) OverlappingChangeFeedsReply(rep);
		this->~SingleLocationOverlappingChangeFeedsActorState();
		static_cast<SingleLocationOverlappingChangeFeedsActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1when1(OverlappingChangeFeedsReply const& rep,int loopDepth) 
	{
		loopDepth = a_body1cont1(rep, loopDepth);

		return loopDepth;
	}
	int a_body1when1(OverlappingChangeFeedsReply && rep,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(rep), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<SingleLocationOverlappingChangeFeedsActor*>(this)->actor_wait_state > 0) static_cast<SingleLocationOverlappingChangeFeedsActor*>(this)->actor_wait_state = 0;
		static_cast<SingleLocationOverlappingChangeFeedsActor*>(this)->ActorCallback< SingleLocationOverlappingChangeFeedsActor, 0, OverlappingChangeFeedsReply >::remove();

	}
	void a_callback_fire(ActorCallback< SingleLocationOverlappingChangeFeedsActor, 0, OverlappingChangeFeedsReply >*,OverlappingChangeFeedsReply const& value) 
	{
		fdb_probe_actor_enter("singleLocationOverlappingChangeFeeds", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("singleLocationOverlappingChangeFeeds", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< SingleLocationOverlappingChangeFeedsActor, 0, OverlappingChangeFeedsReply >*,OverlappingChangeFeedsReply && value) 
	{
		fdb_probe_actor_enter("singleLocationOverlappingChangeFeeds", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("singleLocationOverlappingChangeFeeds", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< SingleLocationOverlappingChangeFeedsActor, 0, OverlappingChangeFeedsReply >*,Error err) 
	{
		fdb_probe_actor_enter("singleLocationOverlappingChangeFeeds", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("singleLocationOverlappingChangeFeeds", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 10991 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Database cx;
															#line 10991 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<LocationInfo> location;
															#line 10991 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeyRangeRef range;
															#line 10991 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Version minVersion;
															#line 10995 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	OverlappingChangeFeedsRequest req;
															#line 61027 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via singleLocationOverlappingChangeFeeds()
															#line 10991 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class SingleLocationOverlappingChangeFeedsActor final : public Actor<OverlappingChangeFeedsReply>, public ActorCallback< SingleLocationOverlappingChangeFeedsActor, 0, OverlappingChangeFeedsReply >, public FastAllocated<SingleLocationOverlappingChangeFeedsActor>, public SingleLocationOverlappingChangeFeedsActorState<SingleLocationOverlappingChangeFeedsActor> {
															#line 61032 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<SingleLocationOverlappingChangeFeedsActor>::operator new;
	using FastAllocated<SingleLocationOverlappingChangeFeedsActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<OverlappingChangeFeedsReply>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< SingleLocationOverlappingChangeFeedsActor, 0, OverlappingChangeFeedsReply >;
															#line 10991 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	SingleLocationOverlappingChangeFeedsActor(Database const& cx,Reference<LocationInfo> const& location,KeyRangeRef const& range,Version const& minVersion) 
															#line 61043 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<OverlappingChangeFeedsReply>(),
		   SingleLocationOverlappingChangeFeedsActorState<SingleLocationOverlappingChangeFeedsActor>(cx, location, range, minVersion)
	{
		fdb_probe_actor_enter("singleLocationOverlappingChangeFeeds", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("singleLocationOverlappingChangeFeeds");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("singleLocationOverlappingChangeFeeds", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< SingleLocationOverlappingChangeFeedsActor, 0, OverlappingChangeFeedsReply >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 10991 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<OverlappingChangeFeedsReply> singleLocationOverlappingChangeFeeds( Database const& cx, Reference<LocationInfo> const& location, KeyRangeRef const& range, Version const& minVersion ) {
															#line 10991 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<OverlappingChangeFeedsReply>(new SingleLocationOverlappingChangeFeedsActor(cx, location, range, minVersion));
															#line 61071 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 11008 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

bool compareChangeFeedResult(const OverlappingChangeFeedEntry& i, const OverlappingChangeFeedEntry& j) {
	return i.feedId < j.feedId;
}

															#line 61080 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via getOverlappingChangeFeedsActor()
															#line 11013 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class GetOverlappingChangeFeedsActorActor>
															#line 11013 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetOverlappingChangeFeedsActorActorState {
															#line 61087 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 11013 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetOverlappingChangeFeedsActorActorState(Reference<DatabaseContext> const& db,KeyRangeRef const& range,Version const& minVersion) 
															#line 11013 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 11013 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : db(db),
															#line 11013 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   range(range),
															#line 11013 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   minVersion(minVersion),
															#line 11016 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   cx(db),
															#line 11017 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   span("NAPI:GetOverlappingChangeFeeds"_loc)
															#line 61102 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("getOverlappingChangeFeedsActor", reinterpret_cast<unsigned long>(this));

	}
	~GetOverlappingChangeFeedsActorActorState() 
	{
		fdb_probe_actor_destroy("getOverlappingChangeFeedsActor", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 11019 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			;
															#line 61117 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~GetOverlappingChangeFeedsActorActorState();
		static_cast<GetOverlappingChangeFeedsActorActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
		try {
															#line 11021 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<std::vector<KeyRangeLocationInfo>> __when_expr_0 = getKeyRangeLocations(cx, TenantInfo(), range, CLIENT_KNOBS->CHANGE_FEED_LOCATION_LIMIT, Reverse::False, &StorageServerInterface::overlappingChangeFeeds, span.context, Optional<UID>(), UseProvisionalProxies::False, latestVersion);
															#line 11021 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<GetOverlappingChangeFeedsActorActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 61150 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1loopBody1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
			static_cast<GetOverlappingChangeFeedsActorActor*>(this)->actor_wait_state = 1;
															#line 11021 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< GetOverlappingChangeFeedsActorActor, 0, std::vector<KeyRangeLocationInfo> >*>(static_cast<GetOverlappingChangeFeedsActorActor*>(this)));
															#line 61155 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 11070 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (e.code() == error_code_wrong_shard_server || e.code() == error_code_all_alternatives_failed || e.code() == error_code_future_version)
															#line 61177 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 11072 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				cx->invalidateCache({}, range);
															#line 11073 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				StrictFuture<Void> __when_expr_3 = delay(CLIENT_KNOBS->WRONG_SHARD_SERVER_DELAY);
															#line 11073 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (static_cast<GetOverlappingChangeFeedsActorActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 61185 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch1(__when_expr_3.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1Catch1when1(__when_expr_3.get(), loopDepth); };
				static_cast<GetOverlappingChangeFeedsActorActor*>(this)->actor_wait_state = 4;
															#line 11073 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< GetOverlappingChangeFeedsActorActor, 3, Void >*>(static_cast<GetOverlappingChangeFeedsActorActor*>(this)));
															#line 61190 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				loopDepth = 0;
			}
			else
			{
															#line 11075 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				return a_body1Catch1(e, std::max(0, loopDepth - 1));
															#line 61197 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(int loopDepth) 
	{
															#line 11033 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (locations.size() >= CLIENT_KNOBS->CHANGE_FEED_LOCATION_LIMIT)
															#line 61212 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 11034 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent(SevError, "OverlappingRangeTooLarge") .detail("Range", range) .detail("Limit", CLIENT_KNOBS->CHANGE_FEED_LOCATION_LIMIT);
															#line 11037 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_1 = delay(1.0);
															#line 11037 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<GetOverlappingChangeFeedsActorActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 61220 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
			static_cast<GetOverlappingChangeFeedsActorActor*>(this)->actor_wait_state = 2;
															#line 11037 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< GetOverlappingChangeFeedsActorActor, 1, Void >*>(static_cast<GetOverlappingChangeFeedsActorActor*>(this)));
															#line 61225 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1loopBody1cont3(loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1when1(std::vector<KeyRangeLocationInfo> const& __locations,int loopDepth) 
	{
															#line 11021 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		locations = __locations;
															#line 61239 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont2(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(std::vector<KeyRangeLocationInfo> && __locations,int loopDepth) 
	{
		locations = std::move(__locations);
		loopDepth = a_body1loopBody1cont2(loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<GetOverlappingChangeFeedsActorActor*>(this)->actor_wait_state > 0) static_cast<GetOverlappingChangeFeedsActorActor*>(this)->actor_wait_state = 0;
		static_cast<GetOverlappingChangeFeedsActorActor*>(this)->ActorCallback< GetOverlappingChangeFeedsActorActor, 0, std::vector<KeyRangeLocationInfo> >::remove();

	}
	void a_callback_fire(ActorCallback< GetOverlappingChangeFeedsActorActor, 0, std::vector<KeyRangeLocationInfo> >*,std::vector<KeyRangeLocationInfo> const& value) 
	{
		fdb_probe_actor_enter("getOverlappingChangeFeedsActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getOverlappingChangeFeedsActor", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< GetOverlappingChangeFeedsActorActor, 0, std::vector<KeyRangeLocationInfo> >*,std::vector<KeyRangeLocationInfo> && value) 
	{
		fdb_probe_actor_enter("getOverlappingChangeFeedsActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getOverlappingChangeFeedsActor", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< GetOverlappingChangeFeedsActorActor, 0, std::vector<KeyRangeLocationInfo> >*,Error err) 
	{
		fdb_probe_actor_enter("getOverlappingChangeFeedsActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getOverlappingChangeFeedsActor", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1cont3(int loopDepth) 
	{
															#line 11041 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		allOverlappingRequests = std::vector<Future<OverlappingChangeFeedsReply>>();
															#line 11042 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for( auto& it : locations ) {
															#line 11043 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			allOverlappingRequests.push_back( singleLocationOverlappingChangeFeeds(cx, it.locations, it.range & range, minVersion));
															#line 61310 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 11046 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_2 = waitForAll(allOverlappingRequests);
															#line 11046 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<GetOverlappingChangeFeedsActorActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 61316 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1loopBody1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1loopBody1cont3when1(__when_expr_2.get(), loopDepth); };
		static_cast<GetOverlappingChangeFeedsActorActor*>(this)->actor_wait_state = 3;
															#line 11046 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< GetOverlappingChangeFeedsActorActor, 2, Void >*>(static_cast<GetOverlappingChangeFeedsActorActor*>(this)));
															#line 61321 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont4(Void const& _,int loopDepth) 
	{
															#line 11038 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		return a_body1loopBody1Catch1(all_alternatives_failed(), loopDepth);
															#line 61330 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"

		return loopDepth;
	}
	int a_body1loopBody1cont4(Void && _,int loopDepth) 
	{
															#line 11038 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		return a_body1loopBody1Catch1(all_alternatives_failed(), loopDepth);
															#line 61338 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont4(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont4(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<GetOverlappingChangeFeedsActorActor*>(this)->actor_wait_state > 0) static_cast<GetOverlappingChangeFeedsActorActor*>(this)->actor_wait_state = 0;
		static_cast<GetOverlappingChangeFeedsActorActor*>(this)->ActorCallback< GetOverlappingChangeFeedsActorActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetOverlappingChangeFeedsActorActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getOverlappingChangeFeedsActor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getOverlappingChangeFeedsActor", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< GetOverlappingChangeFeedsActorActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getOverlappingChangeFeedsActor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getOverlappingChangeFeedsActor", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< GetOverlappingChangeFeedsActorActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getOverlappingChangeFeedsActor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getOverlappingChangeFeedsActor", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1loopBody1cont6(Void const& _,int loopDepth) 
	{
															#line 11048 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		OverlappingChangeFeedsInfo result;
															#line 11049 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		std::unordered_map<KeyRef, OverlappingChangeFeedEntry> latestFeedMetadata;
															#line 11050 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for(int i = 0;i < locations.size();i++) {
															#line 11051 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			result.arena.dependsOn(allOverlappingRequests[i].get().arena);
															#line 11052 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			result.arena.dependsOn(locations[i].range.arena());
															#line 11053 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			result.feedMetadataVersions.push_back( { locations[i].range, allOverlappingRequests[i].get().feedMetadataVersion });
															#line 11055 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			for( auto& it : allOverlappingRequests[i].get().feeds ) {
															#line 11056 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				auto res = latestFeedMetadata.insert({ it.feedId, it });
															#line 11057 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (!res.second)
															#line 61425 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 11058 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					CODE_PROBE(true, "deduping fetched overlapping feed by higher metadata version");
															#line 11059 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					if (res.first->second.feedMetadataVersion < it.feedMetadataVersion)
															#line 61431 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					{
															#line 11060 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
						res.first->second = it;
															#line 61435 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					}
				}
			}
		}
															#line 11065 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for( auto& it : latestFeedMetadata ) {
															#line 11066 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			result.feeds.push_back(result.arena, it.second);
															#line 61444 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 11068 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<GetOverlappingChangeFeedsActorActor*>(this)->SAV<OverlappingChangeFeedsInfo>::futures) { (void)(result); this->~GetOverlappingChangeFeedsActorActorState(); static_cast<GetOverlappingChangeFeedsActorActor*>(this)->destroy(); return 0; }
															#line 61448 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<GetOverlappingChangeFeedsActorActor*>(this)->SAV< OverlappingChangeFeedsInfo >::value()) OverlappingChangeFeedsInfo(result);
		this->~GetOverlappingChangeFeedsActorActorState();
		static_cast<GetOverlappingChangeFeedsActorActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1cont6(Void && _,int loopDepth) 
	{
															#line 11048 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		OverlappingChangeFeedsInfo result;
															#line 11049 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		std::unordered_map<KeyRef, OverlappingChangeFeedEntry> latestFeedMetadata;
															#line 11050 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for(int i = 0;i < locations.size();i++) {
															#line 11051 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			result.arena.dependsOn(allOverlappingRequests[i].get().arena);
															#line 11052 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			result.arena.dependsOn(locations[i].range.arena());
															#line 11053 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			result.feedMetadataVersions.push_back( { locations[i].range, allOverlappingRequests[i].get().feedMetadataVersion });
															#line 11055 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			for( auto& it : allOverlappingRequests[i].get().feeds ) {
															#line 11056 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				auto res = latestFeedMetadata.insert({ it.feedId, it });
															#line 11057 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (!res.second)
															#line 61476 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 11058 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					CODE_PROBE(true, "deduping fetched overlapping feed by higher metadata version");
															#line 11059 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					if (res.first->second.feedMetadataVersion < it.feedMetadataVersion)
															#line 61482 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					{
															#line 11060 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
						res.first->second = it;
															#line 61486 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					}
				}
			}
		}
															#line 11065 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for( auto& it : latestFeedMetadata ) {
															#line 11066 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			result.feeds.push_back(result.arena, it.second);
															#line 61495 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 11068 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<GetOverlappingChangeFeedsActorActor*>(this)->SAV<OverlappingChangeFeedsInfo>::futures) { (void)(result); this->~GetOverlappingChangeFeedsActorActorState(); static_cast<GetOverlappingChangeFeedsActorActor*>(this)->destroy(); return 0; }
															#line 61499 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<GetOverlappingChangeFeedsActorActor*>(this)->SAV< OverlappingChangeFeedsInfo >::value()) OverlappingChangeFeedsInfo(result);
		this->~GetOverlappingChangeFeedsActorActorState();
		static_cast<GetOverlappingChangeFeedsActorActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1cont3when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont6(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont3when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont6(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<GetOverlappingChangeFeedsActorActor*>(this)->actor_wait_state > 0) static_cast<GetOverlappingChangeFeedsActorActor*>(this)->actor_wait_state = 0;
		static_cast<GetOverlappingChangeFeedsActorActor*>(this)->ActorCallback< GetOverlappingChangeFeedsActorActor, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetOverlappingChangeFeedsActorActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getOverlappingChangeFeedsActor", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont3when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getOverlappingChangeFeedsActor", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< GetOverlappingChangeFeedsActorActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getOverlappingChangeFeedsActor", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont3when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getOverlappingChangeFeedsActor", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< GetOverlappingChangeFeedsActorActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getOverlappingChangeFeedsActor", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getOverlappingChangeFeedsActor", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1loopBody1Catch1cont1(int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont2(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont2(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<GetOverlappingChangeFeedsActorActor*>(this)->actor_wait_state > 0) static_cast<GetOverlappingChangeFeedsActorActor*>(this)->actor_wait_state = 0;
		static_cast<GetOverlappingChangeFeedsActorActor*>(this)->ActorCallback< GetOverlappingChangeFeedsActorActor, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetOverlappingChangeFeedsActorActor, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getOverlappingChangeFeedsActor", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getOverlappingChangeFeedsActor", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< GetOverlappingChangeFeedsActorActor, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getOverlappingChangeFeedsActor", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getOverlappingChangeFeedsActor", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< GetOverlappingChangeFeedsActorActor, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getOverlappingChangeFeedsActor", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getOverlappingChangeFeedsActor", reinterpret_cast<unsigned long>(this), 3);

	}
															#line 11013 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<DatabaseContext> db;
															#line 11013 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeyRangeRef range;
															#line 11013 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Version minVersion;
															#line 11016 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Database cx;
															#line 11017 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Span span;
															#line 11021 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	std::vector<KeyRangeLocationInfo> locations;
															#line 11041 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	std::vector<Future<OverlappingChangeFeedsReply>> allOverlappingRequests;
															#line 61665 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via getOverlappingChangeFeedsActor()
															#line 11013 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetOverlappingChangeFeedsActorActor final : public Actor<OverlappingChangeFeedsInfo>, public ActorCallback< GetOverlappingChangeFeedsActorActor, 0, std::vector<KeyRangeLocationInfo> >, public ActorCallback< GetOverlappingChangeFeedsActorActor, 1, Void >, public ActorCallback< GetOverlappingChangeFeedsActorActor, 2, Void >, public ActorCallback< GetOverlappingChangeFeedsActorActor, 3, Void >, public FastAllocated<GetOverlappingChangeFeedsActorActor>, public GetOverlappingChangeFeedsActorActorState<GetOverlappingChangeFeedsActorActor> {
															#line 61670 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<GetOverlappingChangeFeedsActorActor>::operator new;
	using FastAllocated<GetOverlappingChangeFeedsActorActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<OverlappingChangeFeedsInfo>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< GetOverlappingChangeFeedsActorActor, 0, std::vector<KeyRangeLocationInfo> >;
friend struct ActorCallback< GetOverlappingChangeFeedsActorActor, 1, Void >;
friend struct ActorCallback< GetOverlappingChangeFeedsActorActor, 2, Void >;
friend struct ActorCallback< GetOverlappingChangeFeedsActorActor, 3, Void >;
															#line 11013 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetOverlappingChangeFeedsActorActor(Reference<DatabaseContext> const& db,KeyRangeRef const& range,Version const& minVersion) 
															#line 61684 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<OverlappingChangeFeedsInfo>(),
		   GetOverlappingChangeFeedsActorActorState<GetOverlappingChangeFeedsActorActor>(db, range, minVersion)
	{
		fdb_probe_actor_enter("getOverlappingChangeFeedsActor", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("getOverlappingChangeFeedsActor");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("getOverlappingChangeFeedsActor", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< GetOverlappingChangeFeedsActorActor, 0, std::vector<KeyRangeLocationInfo> >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< GetOverlappingChangeFeedsActorActor, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< GetOverlappingChangeFeedsActorActor, 2, Void >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< GetOverlappingChangeFeedsActorActor, 3, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 11013 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<OverlappingChangeFeedsInfo> getOverlappingChangeFeedsActor( Reference<DatabaseContext> const& db, KeyRangeRef const& range, Version const& minVersion ) {
															#line 11013 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<OverlappingChangeFeedsInfo>(new GetOverlappingChangeFeedsActorActor(db, range, minVersion));
															#line 61715 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 11080 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

Future<OverlappingChangeFeedsInfo> DatabaseContext::getOverlappingChangeFeeds(KeyRangeRef range, Version minVersion) {
	return getOverlappingChangeFeedsActor(Reference<DatabaseContext>::addRef(this), range, minVersion);
}

															#line 61724 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via popChangeFeedBackup()
															#line 11085 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class PopChangeFeedBackupActor>
															#line 11085 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class PopChangeFeedBackupActorState {
															#line 61731 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 11085 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	PopChangeFeedBackupActorState(Database const& cx,Key const& rangeID,Version const& version) 
															#line 11085 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 11085 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : cx(cx),
															#line 11085 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   rangeID(rangeID),
															#line 11085 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   version(version)
															#line 61742 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("popChangeFeedBackup", reinterpret_cast<unsigned long>(this));

	}
	~PopChangeFeedBackupActorState() 
	{
		fdb_probe_actor_destroy("popChangeFeedBackup", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 11086 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			++cx->feedPopsFallback;
															#line 11087 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tr = Transaction(cx);
															#line 11088 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			;
															#line 61761 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~PopChangeFeedBackupActorState();
		static_cast<PopChangeFeedBackupActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
		try {
															#line 11090 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tr.setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 11091 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tr.setOption(FDBTransactionOptions::PRIORITY_SYSTEM_IMMEDIATE);
															#line 11092 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tr.setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 11093 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			rangeIDKey = rangeID.withPrefix(changeFeedPrefix);
															#line 11094 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Optional<Value>> __when_expr_0 = tr.get(rangeIDKey);
															#line 11094 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<PopChangeFeedBackupActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 61802 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1loopBody1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
			static_cast<PopChangeFeedBackupActor*>(this)->actor_wait_state = 1;
															#line 11094 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< PopChangeFeedBackupActor, 0, Optional<Value> >*>(static_cast<PopChangeFeedBackupActor*>(this)));
															#line 61807 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 11115 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_2 = tr.onError(e);
															#line 11115 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<PopChangeFeedBackupActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 61831 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1Catch1when1(__when_expr_2.get(), loopDepth); };
			static_cast<PopChangeFeedBackupActor*>(this)->actor_wait_state = 3;
															#line 11115 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< PopChangeFeedBackupActor, 2, Void >*>(static_cast<PopChangeFeedBackupActor*>(this)));
															#line 61836 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(Optional<Value> const& val,int loopDepth) 
	{
															#line 11095 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (val.present())
															#line 61851 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 11096 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			KeyRange range;
															#line 11097 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			Version popVersion;
															#line 11098 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ChangeFeedStatus status;
															#line 11099 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			std::tie(range, popVersion, status) = decodeChangeFeedValue(val.get());
															#line 11100 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (version > popVersion)
															#line 61863 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 11101 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				tr.set(rangeIDKey, changeFeedValue(range, version, status));
															#line 61867 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
		}
		else
		{
															#line 11104 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ASSERT(tr.getReadVersion().isReady());
															#line 11105 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent(SevDebug, "ChangeFeedNotRegisteredPop") .detail("FeedID", rangeID) .detail("FullFeedKey", rangeIDKey) .detail("PopVersion", version) .detail("ReadVersion", tr.getReadVersion().get());
															#line 11110 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			return a_body1loopBody1Catch1(change_feed_not_registered(), loopDepth);
															#line 61878 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 11112 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_1 = tr.commit();
															#line 11112 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<PopChangeFeedBackupActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 61884 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
		static_cast<PopChangeFeedBackupActor*>(this)->actor_wait_state = 2;
															#line 11112 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< PopChangeFeedBackupActor, 1, Void >*>(static_cast<PopChangeFeedBackupActor*>(this)));
															#line 61889 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2(Optional<Value> && val,int loopDepth) 
	{
															#line 11095 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (val.present())
															#line 61898 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 11096 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			KeyRange range;
															#line 11097 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			Version popVersion;
															#line 11098 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ChangeFeedStatus status;
															#line 11099 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			std::tie(range, popVersion, status) = decodeChangeFeedValue(val.get());
															#line 11100 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (version > popVersion)
															#line 61910 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 11101 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				tr.set(rangeIDKey, changeFeedValue(range, version, status));
															#line 61914 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
		}
		else
		{
															#line 11104 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			ASSERT(tr.getReadVersion().isReady());
															#line 11105 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent(SevDebug, "ChangeFeedNotRegisteredPop") .detail("FeedID", rangeID) .detail("FullFeedKey", rangeIDKey) .detail("PopVersion", version) .detail("ReadVersion", tr.getReadVersion().get());
															#line 11110 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			return a_body1loopBody1Catch1(change_feed_not_registered(), loopDepth);
															#line 61925 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 11112 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_1 = tr.commit();
															#line 11112 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<PopChangeFeedBackupActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 61931 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
		static_cast<PopChangeFeedBackupActor*>(this)->actor_wait_state = 2;
															#line 11112 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< PopChangeFeedBackupActor, 1, Void >*>(static_cast<PopChangeFeedBackupActor*>(this)));
															#line 61936 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1when1(Optional<Value> const& val,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(val, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Optional<Value> && val,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(std::move(val), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<PopChangeFeedBackupActor*>(this)->actor_wait_state > 0) static_cast<PopChangeFeedBackupActor*>(this)->actor_wait_state = 0;
		static_cast<PopChangeFeedBackupActor*>(this)->ActorCallback< PopChangeFeedBackupActor, 0, Optional<Value> >::remove();

	}
	void a_callback_fire(ActorCallback< PopChangeFeedBackupActor, 0, Optional<Value> >*,Optional<Value> const& value) 
	{
		fdb_probe_actor_enter("popChangeFeedBackup", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("popChangeFeedBackup", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< PopChangeFeedBackupActor, 0, Optional<Value> >*,Optional<Value> && value) 
	{
		fdb_probe_actor_enter("popChangeFeedBackup", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("popChangeFeedBackup", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< PopChangeFeedBackupActor, 0, Optional<Value> >*,Error err) 
	{
		fdb_probe_actor_enter("popChangeFeedBackup", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("popChangeFeedBackup", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1cont3(Void const& _,int loopDepth) 
	{
															#line 11113 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<PopChangeFeedBackupActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~PopChangeFeedBackupActorState(); static_cast<PopChangeFeedBackupActor*>(this)->destroy(); return 0; }
															#line 62008 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<PopChangeFeedBackupActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~PopChangeFeedBackupActorState();
		static_cast<PopChangeFeedBackupActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1cont3(Void && _,int loopDepth) 
	{
															#line 11113 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<PopChangeFeedBackupActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~PopChangeFeedBackupActorState(); static_cast<PopChangeFeedBackupActor*>(this)->destroy(); return 0; }
															#line 62020 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<PopChangeFeedBackupActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~PopChangeFeedBackupActorState();
		static_cast<PopChangeFeedBackupActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<PopChangeFeedBackupActor*>(this)->actor_wait_state > 0) static_cast<PopChangeFeedBackupActor*>(this)->actor_wait_state = 0;
		static_cast<PopChangeFeedBackupActor*>(this)->ActorCallback< PopChangeFeedBackupActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< PopChangeFeedBackupActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("popChangeFeedBackup", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("popChangeFeedBackup", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< PopChangeFeedBackupActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("popChangeFeedBackup", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("popChangeFeedBackup", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< PopChangeFeedBackupActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("popChangeFeedBackup", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("popChangeFeedBackup", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<PopChangeFeedBackupActor*>(this)->actor_wait_state > 0) static_cast<PopChangeFeedBackupActor*>(this)->actor_wait_state = 0;
		static_cast<PopChangeFeedBackupActor*>(this)->ActorCallback< PopChangeFeedBackupActor, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< PopChangeFeedBackupActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("popChangeFeedBackup", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("popChangeFeedBackup", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< PopChangeFeedBackupActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("popChangeFeedBackup", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("popChangeFeedBackup", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< PopChangeFeedBackupActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("popChangeFeedBackup", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("popChangeFeedBackup", reinterpret_cast<unsigned long>(this), 2);

	}
															#line 11085 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Database cx;
															#line 11085 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Key rangeID;
															#line 11085 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Version version;
															#line 11087 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Transaction tr;
															#line 11093 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Key rangeIDKey;
															#line 62176 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via popChangeFeedBackup()
															#line 11085 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class PopChangeFeedBackupActor final : public Actor<Void>, public ActorCallback< PopChangeFeedBackupActor, 0, Optional<Value> >, public ActorCallback< PopChangeFeedBackupActor, 1, Void >, public ActorCallback< PopChangeFeedBackupActor, 2, Void >, public FastAllocated<PopChangeFeedBackupActor>, public PopChangeFeedBackupActorState<PopChangeFeedBackupActor> {
															#line 62181 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<PopChangeFeedBackupActor>::operator new;
	using FastAllocated<PopChangeFeedBackupActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< PopChangeFeedBackupActor, 0, Optional<Value> >;
friend struct ActorCallback< PopChangeFeedBackupActor, 1, Void >;
friend struct ActorCallback< PopChangeFeedBackupActor, 2, Void >;
															#line 11085 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	PopChangeFeedBackupActor(Database const& cx,Key const& rangeID,Version const& version) 
															#line 62194 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Void>(),
		   PopChangeFeedBackupActorState<PopChangeFeedBackupActor>(cx, rangeID, version)
	{
		fdb_probe_actor_enter("popChangeFeedBackup", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("popChangeFeedBackup");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("popChangeFeedBackup", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< PopChangeFeedBackupActor, 0, Optional<Value> >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< PopChangeFeedBackupActor, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< PopChangeFeedBackupActor, 2, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 11085 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] static Future<Void> popChangeFeedBackup( Database const& cx, Key const& rangeID, Version const& version ) {
															#line 11085 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Void>(new PopChangeFeedBackupActor(cx, rangeID, version));
															#line 62224 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 11119 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

															#line 62229 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via popChangeFeedMutationsActor()
															#line 11120 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class PopChangeFeedMutationsActorActor>
															#line 11120 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class PopChangeFeedMutationsActorActorState {
															#line 62236 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 11120 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	PopChangeFeedMutationsActorActorState(Reference<DatabaseContext> const& db,Key const& rangeID,Version const& version) 
															#line 11120 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 11120 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : db(db),
															#line 11120 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   rangeID(rangeID),
															#line 11120 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   version(version),
															#line 11121 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   cx(db),
															#line 11122 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   rangeIDKey(rangeID.withPrefix(changeFeedPrefix)),
															#line 11123 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   span("NAPI:PopChangeFeedMutations"_loc)
															#line 62253 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("popChangeFeedMutationsActor", reinterpret_cast<unsigned long>(this));

	}
	~PopChangeFeedMutationsActorActorState() 
	{
		fdb_probe_actor_destroy("popChangeFeedMutationsActor", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 11124 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			db->usedAnyChangeFeeds = true;
															#line 11125 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			++db->feedPops;
															#line 11127 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (db->rangeId_cacheData.count(rangeID))
															#line 62272 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 11128 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				auto& feeds = db->rangeId_cacheData[rangeID];
															#line 11129 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				for( auto& it : feeds ) {
															#line 11130 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					if (version > it.second->popped)
															#line 62280 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					{
															#line 11131 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
						it.second->popped = version;
															#line 11132 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
						Key beginKey = changeFeedCacheKey(it.first.tenantPrefix, it.first.rangeId, it.first.range, 0);
															#line 11133 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
						Key endKey = changeFeedCacheKey(it.first.tenantPrefix, it.first.rangeId, it.first.range, version);
															#line 11134 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
						db->storage->clear(KeyRangeRef(beginKey, endKey));
															#line 11135 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
						Key durableFeedKey = changeFeedCacheFeedKey(it.first.tenantPrefix, it.first.rangeId, it.first.range);
															#line 11136 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
						Value durableFeedValue = changeFeedCacheFeedValue(it.second->version, it.second->popped);
															#line 11137 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
						db->storage->set(KeyValueRef(durableFeedKey, durableFeedValue));
															#line 11138 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
						db->uncommittedCFBytes += beginKey.size() + endKey.size() + durableFeedKey.size() + durableFeedValue.size();
															#line 11140 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
						if (db->uncommittedCFBytes > CLIENT_KNOBS->CHANGE_FEED_CACHE_FLUSH_BYTES)
															#line 62300 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
						{
															#line 11141 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
							db->commitChangeFeedStorage->set(true);
															#line 62304 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
						}
					}
				}
			}
															#line 11147 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<KeyRange> __when_expr_0 = getChangeFeedRange(db, cx, rangeID);
															#line 11147 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<PopChangeFeedMutationsActorActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 62313 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<PopChangeFeedMutationsActorActor*>(this)->actor_wait_state = 1;
															#line 11147 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< PopChangeFeedMutationsActorActor, 0, KeyRange >*>(static_cast<PopChangeFeedMutationsActorActor*>(this)));
															#line 62318 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~PopChangeFeedMutationsActorActorState();
		static_cast<PopChangeFeedMutationsActorActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 11149 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<std::vector<KeyRangeLocationInfo>> __when_expr_1 = getKeyRangeLocations(cx, TenantInfo(), keys, 3, Reverse::False, &StorageServerInterface::changeFeedPop, span.context, Optional<UID>(), UseProvisionalProxies::False, latestVersion);
															#line 11149 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<PopChangeFeedMutationsActorActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 62343 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1when1(__when_expr_1.get(), loopDepth); };
		static_cast<PopChangeFeedMutationsActorActor*>(this)->actor_wait_state = 2;
															#line 11149 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< PopChangeFeedMutationsActorActor, 1, std::vector<KeyRangeLocationInfo> >*>(static_cast<PopChangeFeedMutationsActorActor*>(this)));
															#line 62348 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1when1(KeyRange const& __keys,int loopDepth) 
	{
															#line 11147 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		keys = __keys;
															#line 62357 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1when1(KeyRange && __keys,int loopDepth) 
	{
		keys = std::move(__keys);
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<PopChangeFeedMutationsActorActor*>(this)->actor_wait_state > 0) static_cast<PopChangeFeedMutationsActorActor*>(this)->actor_wait_state = 0;
		static_cast<PopChangeFeedMutationsActorActor*>(this)->ActorCallback< PopChangeFeedMutationsActorActor, 0, KeyRange >::remove();

	}
	void a_callback_fire(ActorCallback< PopChangeFeedMutationsActorActor, 0, KeyRange >*,KeyRange const& value) 
	{
		fdb_probe_actor_enter("popChangeFeedMutationsActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("popChangeFeedMutationsActor", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< PopChangeFeedMutationsActorActor, 0, KeyRange >*,KeyRange && value) 
	{
		fdb_probe_actor_enter("popChangeFeedMutationsActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("popChangeFeedMutationsActor", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< PopChangeFeedMutationsActorActor, 0, KeyRange >*,Error err) 
	{
		fdb_probe_actor_enter("popChangeFeedMutationsActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("popChangeFeedMutationsActor", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont6(int loopDepth) 
	{
															#line 11161 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (locations.size() > 2)
															#line 62424 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 11162 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_2 = popChangeFeedBackup(cx, rangeID, version);
															#line 11162 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<PopChangeFeedMutationsActorActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 62430 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont6when1(__when_expr_2.get(), loopDepth); };
			static_cast<PopChangeFeedMutationsActorActor*>(this)->actor_wait_state = 3;
															#line 11162 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< PopChangeFeedMutationsActorActor, 2, Void >*>(static_cast<PopChangeFeedMutationsActorActor*>(this)));
															#line 62435 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1cont7(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont1when1(std::vector<KeyRangeLocationInfo> const& __locations,int loopDepth) 
	{
															#line 11149 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		locations = __locations;
															#line 62449 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont6(loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(std::vector<KeyRangeLocationInfo> && __locations,int loopDepth) 
	{
		locations = std::move(__locations);
		loopDepth = a_body1cont6(loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<PopChangeFeedMutationsActorActor*>(this)->actor_wait_state > 0) static_cast<PopChangeFeedMutationsActorActor*>(this)->actor_wait_state = 0;
		static_cast<PopChangeFeedMutationsActorActor*>(this)->ActorCallback< PopChangeFeedMutationsActorActor, 1, std::vector<KeyRangeLocationInfo> >::remove();

	}
	void a_callback_fire(ActorCallback< PopChangeFeedMutationsActorActor, 1, std::vector<KeyRangeLocationInfo> >*,std::vector<KeyRangeLocationInfo> const& value) 
	{
		fdb_probe_actor_enter("popChangeFeedMutationsActor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("popChangeFeedMutationsActor", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< PopChangeFeedMutationsActorActor, 1, std::vector<KeyRangeLocationInfo> >*,std::vector<KeyRangeLocationInfo> && value) 
	{
		fdb_probe_actor_enter("popChangeFeedMutationsActor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("popChangeFeedMutationsActor", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< PopChangeFeedMutationsActorActor, 1, std::vector<KeyRangeLocationInfo> >*,Error err) 
	{
		fdb_probe_actor_enter("popChangeFeedMutationsActor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("popChangeFeedMutationsActor", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont7(int loopDepth) 
	{
															#line 11166 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		auto model = cx->enableLocalityLoadBalance ? &cx->queueModel : nullptr;
															#line 11168 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		bool foundFailed = false;
															#line 11169 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for(int i = 0;i < locations.size() && !foundFailed;i++) {
															#line 11170 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			for(int j = 0;j < locations[i].locations->size() && !foundFailed;j++) {
															#line 11171 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (IFailureMonitor::failureMonitor() .getState(locations[i].locations->get(j, &StorageServerInterface::changeFeedPop).getEndpoint()) .isFailed())
															#line 62524 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 11174 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					foundFailed = true;
															#line 62528 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
															#line 11177 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (model && model ->getTssData(locations[i] .locations->get(j, &StorageServerInterface::changeFeedPop) .getEndpoint() .token.first()) .present())
															#line 62532 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 11183 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					foundFailed = true;
															#line 62536 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
			}
		}
															#line 11188 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (foundFailed)
															#line 62542 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 11189 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_3 = popChangeFeedBackup(cx, rangeID, version);
															#line 11189 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<PopChangeFeedMutationsActorActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 62548 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1cont7when1(__when_expr_3.get(), loopDepth); };
			static_cast<PopChangeFeedMutationsActorActor*>(this)->actor_wait_state = 4;
															#line 11189 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< PopChangeFeedMutationsActorActor, 3, Void >*>(static_cast<PopChangeFeedMutationsActorActor*>(this)));
															#line 62553 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1cont10(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont8(Void const& _,int loopDepth) 
	{
															#line 11163 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<PopChangeFeedMutationsActorActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~PopChangeFeedMutationsActorActorState(); static_cast<PopChangeFeedMutationsActorActor*>(this)->destroy(); return 0; }
															#line 62567 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<PopChangeFeedMutationsActorActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~PopChangeFeedMutationsActorActorState();
		static_cast<PopChangeFeedMutationsActorActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont8(Void && _,int loopDepth) 
	{
															#line 11163 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<PopChangeFeedMutationsActorActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~PopChangeFeedMutationsActorActorState(); static_cast<PopChangeFeedMutationsActorActor*>(this)->destroy(); return 0; }
															#line 62579 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<PopChangeFeedMutationsActorActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~PopChangeFeedMutationsActorActorState();
		static_cast<PopChangeFeedMutationsActorActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont6when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont8(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont6when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont8(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<PopChangeFeedMutationsActorActor*>(this)->actor_wait_state > 0) static_cast<PopChangeFeedMutationsActorActor*>(this)->actor_wait_state = 0;
		static_cast<PopChangeFeedMutationsActorActor*>(this)->ActorCallback< PopChangeFeedMutationsActorActor, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< PopChangeFeedMutationsActorActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("popChangeFeedMutationsActor", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont6when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("popChangeFeedMutationsActor", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< PopChangeFeedMutationsActorActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("popChangeFeedMutationsActor", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont6when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("popChangeFeedMutationsActor", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< PopChangeFeedMutationsActorActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("popChangeFeedMutationsActor", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("popChangeFeedMutationsActor", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1cont10(int loopDepth) 
	{
		try {
															#line 11195 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			std::vector<Future<Void>> popRequests;
															#line 11196 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			for(int i = 0;i < locations.size();i++) {
															#line 11197 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				for(int j = 0;j < locations[i].locations->size();j++) {
															#line 11198 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					popRequests.push_back(locations[i].locations->getInterface(j).changeFeedPop.getReply( ChangeFeedPopRequest(rangeID, version, locations[i].range)));
															#line 62661 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				}
			}
															#line 11203 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_4 = waitForAll(popRequests);
															#line 11202 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<PopChangeFeedMutationsActorActor*>(this)->actor_wait_state < 0) return a_body1cont10Catch1(actor_cancelled(), loopDepth);
															#line 62668 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1cont10Catch1(__when_expr_4.getError(), loopDepth); else return a_body1cont10when1(__when_expr_4.get(), loopDepth); };
															#line 11204 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_5 = delay(CLIENT_KNOBS->CHANGE_FEED_POP_TIMEOUT);
															#line 62672 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_5.isReady()) { if (__when_expr_5.isError()) return a_body1cont10Catch1(__when_expr_5.getError(), loopDepth); else return a_body1cont10when2(__when_expr_5.get(), loopDepth); };
			static_cast<PopChangeFeedMutationsActorActor*>(this)->actor_wait_state = 5;
															#line 11203 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< PopChangeFeedMutationsActorActor, 4, Void >*>(static_cast<PopChangeFeedMutationsActorActor*>(this)));
															#line 11204 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_5.addCallbackAndClear(static_cast<ActorCallback< PopChangeFeedMutationsActorActor, 5, Void >*>(static_cast<PopChangeFeedMutationsActorActor*>(this)));
															#line 62679 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1cont10Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1cont10Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont15(Void const& _,int loopDepth) 
	{
															#line 11190 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<PopChangeFeedMutationsActorActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~PopChangeFeedMutationsActorActorState(); static_cast<PopChangeFeedMutationsActorActor*>(this)->destroy(); return 0; }
															#line 62694 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<PopChangeFeedMutationsActorActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~PopChangeFeedMutationsActorActorState();
		static_cast<PopChangeFeedMutationsActorActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont15(Void && _,int loopDepth) 
	{
															#line 11190 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<PopChangeFeedMutationsActorActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~PopChangeFeedMutationsActorActorState(); static_cast<PopChangeFeedMutationsActorActor*>(this)->destroy(); return 0; }
															#line 62706 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<PopChangeFeedMutationsActorActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~PopChangeFeedMutationsActorActorState();
		static_cast<PopChangeFeedMutationsActorActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont7when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont15(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont7when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont15(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<PopChangeFeedMutationsActorActor*>(this)->actor_wait_state > 0) static_cast<PopChangeFeedMutationsActorActor*>(this)->actor_wait_state = 0;
		static_cast<PopChangeFeedMutationsActorActor*>(this)->ActorCallback< PopChangeFeedMutationsActorActor, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< PopChangeFeedMutationsActorActor, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("popChangeFeedMutationsActor", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont7when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("popChangeFeedMutationsActor", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< PopChangeFeedMutationsActorActor, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("popChangeFeedMutationsActor", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont7when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("popChangeFeedMutationsActor", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< PopChangeFeedMutationsActorActor, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("popChangeFeedMutationsActor", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("popChangeFeedMutationsActor", reinterpret_cast<unsigned long>(this), 3);

	}
	int a_body1cont10cont1(int loopDepth) 
	{
															#line 11218 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<PopChangeFeedMutationsActorActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~PopChangeFeedMutationsActorActorState(); static_cast<PopChangeFeedMutationsActorActor*>(this)->destroy(); return 0; }
															#line 62781 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<PopChangeFeedMutationsActorActor*>(this)->SAV< Void >::value()) Void(Void());
		this->~PopChangeFeedMutationsActorActorState();
		static_cast<PopChangeFeedMutationsActorActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont10Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 11209 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (e.code() != error_code_unknown_change_feed && e.code() != error_code_wrong_shard_server && e.code() != error_code_all_alternatives_failed && e.code() != error_code_broken_promise && e.code() != error_code_server_overloaded)
															#line 62794 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 11212 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				return a_body1Catch1(e, loopDepth);
															#line 62798 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 11214 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			db->changeFeedCache.erase(rangeID);
															#line 11215 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			cx->invalidateCache({}, keys);
															#line 11216 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_7 = popChangeFeedBackup(cx, rangeID, version);
															#line 11216 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<PopChangeFeedMutationsActorActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 62808 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_7.isReady()) { if (__when_expr_7.isError()) return a_body1Catch1(__when_expr_7.getError(), loopDepth); else return a_body1cont10Catch1when1(__when_expr_7.get(), loopDepth); };
			static_cast<PopChangeFeedMutationsActorActor*>(this)->actor_wait_state = 7;
															#line 11216 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_7.addCallbackAndClear(static_cast<ActorCallback< PopChangeFeedMutationsActorActor, 7, Void >*>(static_cast<PopChangeFeedMutationsActorActor*>(this)));
															#line 62813 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont10cont2(int loopDepth) 
	{
		loopDepth = a_body1cont10cont5(loopDepth);

		return loopDepth;
	}
	int a_body1cont10when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont10cont2(loopDepth);

		return loopDepth;
	}
	int a_body1cont10when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont10cont2(loopDepth);

		return loopDepth;
	}
	int a_body1cont10when2(Void const& _,int loopDepth) 
	{
															#line 11205 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_6 = popChangeFeedBackup(cx, rangeID, version);
															#line 11205 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<PopChangeFeedMutationsActorActor*>(this)->actor_wait_state < 0) return a_body1cont10Catch1(actor_cancelled(), loopDepth);
															#line 62848 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_6.isReady()) { if (__when_expr_6.isError()) return a_body1cont10Catch1(__when_expr_6.getError(), loopDepth); else return a_body1cont10when2when1(__when_expr_6.get(), loopDepth); };
		static_cast<PopChangeFeedMutationsActorActor*>(this)->actor_wait_state = 6;
															#line 11205 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_6.addCallbackAndClear(static_cast<ActorCallback< PopChangeFeedMutationsActorActor, 6, Void >*>(static_cast<PopChangeFeedMutationsActorActor*>(this)));
															#line 62853 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont10when2(Void && _,int loopDepth) 
	{
															#line 11205 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_6 = popChangeFeedBackup(cx, rangeID, version);
															#line 11205 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<PopChangeFeedMutationsActorActor*>(this)->actor_wait_state < 0) return a_body1cont10Catch1(actor_cancelled(), loopDepth);
															#line 62864 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_6.isReady()) { if (__when_expr_6.isError()) return a_body1cont10Catch1(__when_expr_6.getError(), loopDepth); else return a_body1cont10when2when1(__when_expr_6.get(), loopDepth); };
		static_cast<PopChangeFeedMutationsActorActor*>(this)->actor_wait_state = 6;
															#line 11205 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_6.addCallbackAndClear(static_cast<ActorCallback< PopChangeFeedMutationsActorActor, 6, Void >*>(static_cast<PopChangeFeedMutationsActorActor*>(this)));
															#line 62869 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	void a_exitChoose5() 
	{
		if (static_cast<PopChangeFeedMutationsActorActor*>(this)->actor_wait_state > 0) static_cast<PopChangeFeedMutationsActorActor*>(this)->actor_wait_state = 0;
		static_cast<PopChangeFeedMutationsActorActor*>(this)->ActorCallback< PopChangeFeedMutationsActorActor, 4, Void >::remove();
		static_cast<PopChangeFeedMutationsActorActor*>(this)->ActorCallback< PopChangeFeedMutationsActorActor, 5, Void >::remove();

	}
	void a_callback_fire(ActorCallback< PopChangeFeedMutationsActorActor, 4, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("popChangeFeedMutationsActor", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont10when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont10Catch1(error, 0);
		} catch (...) {
			a_body1cont10Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("popChangeFeedMutationsActor", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_fire(ActorCallback< PopChangeFeedMutationsActorActor, 4, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("popChangeFeedMutationsActor", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont10when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont10Catch1(error, 0);
		} catch (...) {
			a_body1cont10Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("popChangeFeedMutationsActor", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_error(ActorCallback< PopChangeFeedMutationsActorActor, 4, Void >*,Error err) 
	{
		fdb_probe_actor_enter("popChangeFeedMutationsActor", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont10Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont10Catch1(error, 0);
		} catch (...) {
			a_body1cont10Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("popChangeFeedMutationsActor", reinterpret_cast<unsigned long>(this), 4);

	}
	int a_body1cont10when2cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont10cont2(loopDepth);

		return loopDepth;
	}
	int a_body1cont10when2cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont10cont2(loopDepth);

		return loopDepth;
	}
	int a_body1cont10when2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont10when2cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont10when2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont10when2cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose6() 
	{
		if (static_cast<PopChangeFeedMutationsActorActor*>(this)->actor_wait_state > 0) static_cast<PopChangeFeedMutationsActorActor*>(this)->actor_wait_state = 0;
		static_cast<PopChangeFeedMutationsActorActor*>(this)->ActorCallback< PopChangeFeedMutationsActorActor, 6, Void >::remove();

	}
	void a_callback_fire(ActorCallback< PopChangeFeedMutationsActorActor, 6, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("popChangeFeedMutationsActor", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose6();
		try {
			a_body1cont10when2when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont10Catch1(error, 0);
		} catch (...) {
			a_body1cont10Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("popChangeFeedMutationsActor", reinterpret_cast<unsigned long>(this), 6);

	}
	void a_callback_fire(ActorCallback< PopChangeFeedMutationsActorActor, 6, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("popChangeFeedMutationsActor", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose6();
		try {
			a_body1cont10when2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont10Catch1(error, 0);
		} catch (...) {
			a_body1cont10Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("popChangeFeedMutationsActor", reinterpret_cast<unsigned long>(this), 6);

	}
	void a_callback_error(ActorCallback< PopChangeFeedMutationsActorActor, 6, Void >*,Error err) 
	{
		fdb_probe_actor_enter("popChangeFeedMutationsActor", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose6();
		try {
			a_body1cont10Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont10Catch1(error, 0);
		} catch (...) {
			a_body1cont10Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("popChangeFeedMutationsActor", reinterpret_cast<unsigned long>(this), 6);

	}
	void a_callback_fire(ActorCallback< PopChangeFeedMutationsActorActor, 5, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("popChangeFeedMutationsActor", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose5();
		try {
			a_body1cont10when2(value, 0);
		}
		catch (Error& error) {
			a_body1cont10Catch1(error, 0);
		} catch (...) {
			a_body1cont10Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("popChangeFeedMutationsActor", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_fire(ActorCallback< PopChangeFeedMutationsActorActor, 5, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("popChangeFeedMutationsActor", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose5();
		try {
			a_body1cont10when2(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont10Catch1(error, 0);
		} catch (...) {
			a_body1cont10Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("popChangeFeedMutationsActor", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_error(ActorCallback< PopChangeFeedMutationsActorActor, 5, Void >*,Error err) 
	{
		fdb_probe_actor_enter("popChangeFeedMutationsActor", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose5();
		try {
			a_body1cont10Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont10Catch1(error, 0);
		} catch (...) {
			a_body1cont10Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("popChangeFeedMutationsActor", reinterpret_cast<unsigned long>(this), 5);

	}
	int a_body1cont10cont5(int loopDepth) 
	{
		try {
			loopDepth = a_body1cont10cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont10Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont10cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont10Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont10cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont10Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont10Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont10Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont10Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose7() 
	{
		if (static_cast<PopChangeFeedMutationsActorActor*>(this)->actor_wait_state > 0) static_cast<PopChangeFeedMutationsActorActor*>(this)->actor_wait_state = 0;
		static_cast<PopChangeFeedMutationsActorActor*>(this)->ActorCallback< PopChangeFeedMutationsActorActor, 7, Void >::remove();

	}
	void a_callback_fire(ActorCallback< PopChangeFeedMutationsActorActor, 7, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("popChangeFeedMutationsActor", reinterpret_cast<unsigned long>(this), 7);
		a_exitChoose7();
		try {
			a_body1cont10Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("popChangeFeedMutationsActor", reinterpret_cast<unsigned long>(this), 7);

	}
	void a_callback_fire(ActorCallback< PopChangeFeedMutationsActorActor, 7, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("popChangeFeedMutationsActor", reinterpret_cast<unsigned long>(this), 7);
		a_exitChoose7();
		try {
			a_body1cont10Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("popChangeFeedMutationsActor", reinterpret_cast<unsigned long>(this), 7);

	}
	void a_callback_error(ActorCallback< PopChangeFeedMutationsActorActor, 7, Void >*,Error err) 
	{
		fdb_probe_actor_enter("popChangeFeedMutationsActor", reinterpret_cast<unsigned long>(this), 7);
		a_exitChoose7();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("popChangeFeedMutationsActor", reinterpret_cast<unsigned long>(this), 7);

	}
															#line 11120 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<DatabaseContext> db;
															#line 11120 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Key rangeID;
															#line 11120 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Version version;
															#line 11121 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Database cx;
															#line 11122 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Key rangeIDKey;
															#line 11123 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Span span;
															#line 11147 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeyRange keys;
															#line 11149 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	std::vector<KeyRangeLocationInfo> locations;
															#line 63150 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via popChangeFeedMutationsActor()
															#line 11120 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class PopChangeFeedMutationsActorActor final : public Actor<Void>, public ActorCallback< PopChangeFeedMutationsActorActor, 0, KeyRange >, public ActorCallback< PopChangeFeedMutationsActorActor, 1, std::vector<KeyRangeLocationInfo> >, public ActorCallback< PopChangeFeedMutationsActorActor, 2, Void >, public ActorCallback< PopChangeFeedMutationsActorActor, 3, Void >, public ActorCallback< PopChangeFeedMutationsActorActor, 4, Void >, public ActorCallback< PopChangeFeedMutationsActorActor, 5, Void >, public ActorCallback< PopChangeFeedMutationsActorActor, 6, Void >, public ActorCallback< PopChangeFeedMutationsActorActor, 7, Void >, public FastAllocated<PopChangeFeedMutationsActorActor>, public PopChangeFeedMutationsActorActorState<PopChangeFeedMutationsActorActor> {
															#line 63155 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<PopChangeFeedMutationsActorActor>::operator new;
	using FastAllocated<PopChangeFeedMutationsActorActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< PopChangeFeedMutationsActorActor, 0, KeyRange >;
friend struct ActorCallback< PopChangeFeedMutationsActorActor, 1, std::vector<KeyRangeLocationInfo> >;
friend struct ActorCallback< PopChangeFeedMutationsActorActor, 2, Void >;
friend struct ActorCallback< PopChangeFeedMutationsActorActor, 3, Void >;
friend struct ActorCallback< PopChangeFeedMutationsActorActor, 4, Void >;
friend struct ActorCallback< PopChangeFeedMutationsActorActor, 5, Void >;
friend struct ActorCallback< PopChangeFeedMutationsActorActor, 6, Void >;
friend struct ActorCallback< PopChangeFeedMutationsActorActor, 7, Void >;
															#line 11120 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	PopChangeFeedMutationsActorActor(Reference<DatabaseContext> const& db,Key const& rangeID,Version const& version) 
															#line 63173 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Void>(),
		   PopChangeFeedMutationsActorActorState<PopChangeFeedMutationsActorActor>(db, rangeID, version)
	{
		fdb_probe_actor_enter("popChangeFeedMutationsActor", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("popChangeFeedMutationsActor");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("popChangeFeedMutationsActor", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< PopChangeFeedMutationsActorActor, 0, KeyRange >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< PopChangeFeedMutationsActorActor, 1, std::vector<KeyRangeLocationInfo> >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< PopChangeFeedMutationsActorActor, 2, Void >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< PopChangeFeedMutationsActorActor, 3, Void >*)0, actor_cancelled()); break;
		case 5: this->a_callback_error((ActorCallback< PopChangeFeedMutationsActorActor, 4, Void >*)0, actor_cancelled()); break;
		case 6: this->a_callback_error((ActorCallback< PopChangeFeedMutationsActorActor, 6, Void >*)0, actor_cancelled()); break;
		case 7: this->a_callback_error((ActorCallback< PopChangeFeedMutationsActorActor, 7, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 11120 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<Void> popChangeFeedMutationsActor( Reference<DatabaseContext> const& db, Key const& rangeID, Version const& version ) {
															#line 11120 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Void>(new PopChangeFeedMutationsActorActor(db, rangeID, version));
															#line 63207 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 11220 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

Future<Void> DatabaseContext::popChangeFeedMutations(Key rangeID, Version version) {
	return popChangeFeedMutationsActor(Reference<DatabaseContext>::addRef(this), rangeID, version);
}

Reference<DatabaseContext::TransactionT> DatabaseContext::createTransaction() {
	return makeReference<ReadYourWritesTransaction>(Database(Reference<DatabaseContext>::addRef(this)));
}

// BlobGranule API.
															#line 63221 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via getBlobRanges()
															#line 11230 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class GetBlobRangesActor>
															#line 11230 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetBlobRangesActorState {
															#line 63228 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 11230 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetBlobRangesActorState(Transaction* const& tr,KeyRange const& range,int const& batchLimit) 
															#line 11230 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 11230 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : tr(tr),
															#line 11230 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   range(range),
															#line 11230 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   batchLimit(batchLimit),
															#line 11231 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   blobRanges(),
															#line 11232 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   beginKey(range.begin)
															#line 63243 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("getBlobRanges", reinterpret_cast<unsigned long>(this));

	}
	~GetBlobRangesActorState() 
	{
		fdb_probe_actor_destroy("getBlobRanges", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 11234 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 11236 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			;
															#line 63260 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~GetBlobRangesActorState();
		static_cast<GetBlobRangesActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
															#line 11238 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<RangeResult> __when_expr_0 = krmGetRangesUnaligned(tr, blobRangeKeys.begin, KeyRangeRef(beginKey, range.end), 2 * batchLimit + 2);
															#line 11238 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<GetBlobRangesActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 63292 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
		static_cast<GetBlobRangesActor*>(this)->actor_wait_state = 1;
															#line 11238 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< GetBlobRangesActor, 0, RangeResult >*>(static_cast<GetBlobRangesActor*>(this)));
															#line 63297 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
															#line 11241 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		blobRanges.arena().dependsOn(results.arena());
															#line 11242 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for(int i = 0;i < results.size() - 1;i++) {
															#line 11243 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (isBlobRangeActive(results[i].value))
															#line 63310 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 11244 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				blobRanges.push_back(blobRanges.arena(), KeyRangeRef(results[i].key, results[i + 1].key));
															#line 63314 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 11246 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (blobRanges.size() == batchLimit)
															#line 63318 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 11247 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (!static_cast<GetBlobRangesActor*>(this)->SAV<Standalone<VectorRef<KeyRangeRef>>>::futures) { (void)(blobRanges); this->~GetBlobRangesActorState(); static_cast<GetBlobRangesActor*>(this)->destroy(); return 0; }
															#line 63322 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				new (&static_cast<GetBlobRangesActor*>(this)->SAV< Standalone<VectorRef<KeyRangeRef>> >::value()) Standalone<VectorRef<KeyRangeRef>>(std::move(blobRanges)); // state_var_RVO
				this->~GetBlobRangesActorState();
				static_cast<GetBlobRangesActor*>(this)->finishSendAndDelPromiseRef();
				return 0;
			}
		}
															#line 11251 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!results.more)
															#line 63331 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 11252 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<GetBlobRangesActor*>(this)->SAV<Standalone<VectorRef<KeyRangeRef>>>::futures) { (void)(blobRanges); this->~GetBlobRangesActorState(); static_cast<GetBlobRangesActor*>(this)->destroy(); return 0; }
															#line 63335 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<GetBlobRangesActor*>(this)->SAV< Standalone<VectorRef<KeyRangeRef>> >::value()) Standalone<VectorRef<KeyRangeRef>>(std::move(blobRanges)); // state_var_RVO
			this->~GetBlobRangesActorState();
			static_cast<GetBlobRangesActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 11254 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		beginKey = results.back().key;
															#line 63343 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1when1(RangeResult const& __results,int loopDepth) 
	{
															#line 11238 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		results = __results;
															#line 63352 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(RangeResult && __results,int loopDepth) 
	{
		results = std::move(__results);
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<GetBlobRangesActor*>(this)->actor_wait_state > 0) static_cast<GetBlobRangesActor*>(this)->actor_wait_state = 0;
		static_cast<GetBlobRangesActor*>(this)->ActorCallback< GetBlobRangesActor, 0, RangeResult >::remove();

	}
	void a_callback_fire(ActorCallback< GetBlobRangesActor, 0, RangeResult >*,RangeResult const& value) 
	{
		fdb_probe_actor_enter("getBlobRanges", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getBlobRanges", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< GetBlobRangesActor, 0, RangeResult >*,RangeResult && value) 
	{
		fdb_probe_actor_enter("getBlobRanges", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getBlobRanges", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< GetBlobRangesActor, 0, RangeResult >*,Error err) 
	{
		fdb_probe_actor_enter("getBlobRanges", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getBlobRanges", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 11230 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Transaction* tr;
															#line 11230 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeyRange range;
															#line 11230 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	int batchLimit;
															#line 11231 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Standalone<VectorRef<KeyRangeRef>> blobRanges;
															#line 11232 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Key beginKey;
															#line 11238 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	RangeResult results;
															#line 63427 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via getBlobRanges()
															#line 11230 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetBlobRangesActor final : public Actor<Standalone<VectorRef<KeyRangeRef>>>, public ActorCallback< GetBlobRangesActor, 0, RangeResult >, public FastAllocated<GetBlobRangesActor>, public GetBlobRangesActorState<GetBlobRangesActor> {
															#line 63432 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<GetBlobRangesActor>::operator new;
	using FastAllocated<GetBlobRangesActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Standalone<VectorRef<KeyRangeRef>>>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< GetBlobRangesActor, 0, RangeResult >;
															#line 11230 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetBlobRangesActor(Transaction* const& tr,KeyRange const& range,int const& batchLimit) 
															#line 63443 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Standalone<VectorRef<KeyRangeRef>>>(),
		   GetBlobRangesActorState<GetBlobRangesActor>(tr, range, batchLimit)
	{
		fdb_probe_actor_enter("getBlobRanges", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("getBlobRanges");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("getBlobRanges", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< GetBlobRangesActor, 0, RangeResult >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 11230 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<Standalone<VectorRef<KeyRangeRef>>> getBlobRanges( Transaction* const& tr, KeyRange const& range, int const& batchLimit ) {
															#line 11230 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Standalone<VectorRef<KeyRangeRef>>>(new GetBlobRangesActor(tr, range, batchLimit));
															#line 63471 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 11257 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

															#line 63476 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via purgeBlobGranulesActor()
															#line 11258 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class PurgeBlobGranulesActorActor>
															#line 11258 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class PurgeBlobGranulesActorActorState {
															#line 63483 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 11258 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	PurgeBlobGranulesActorActorState(Reference<DatabaseContext> const& db,KeyRange const& range,Version const& purgeVersion,Optional<Reference<Tenant>> const& tenant,bool const& force) 
															#line 11258 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 11258 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : db(db),
															#line 11258 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   range(range),
															#line 11258 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   purgeVersion(purgeVersion),
															#line 11258 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   tenant(tenant),
															#line 11258 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   force(force),
															#line 11263 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   cx(db),
															#line 11264 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   tr(cx),
															#line 11265 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   purgeKey(),
															#line 11266 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   purgeRange(range)
															#line 63506 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("purgeBlobGranulesActor", reinterpret_cast<unsigned long>(this));

	}
	~PurgeBlobGranulesActorActorState() 
	{
		fdb_probe_actor_destroy("purgeBlobGranulesActor", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 11268 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tr.setOption(FDBTransactionOptions::PRIORITY_SYSTEM_IMMEDIATE);
															#line 11269 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (purgeVersion == latestVersion)
															#line 63523 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 11270 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				;
															#line 63527 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				loopDepth = a_body1loopHead1(loopDepth);
			}
			else
			{
				loopDepth = a_body1cont1(loopDepth);
			}
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~PurgeBlobGranulesActorActorState();
		static_cast<PurgeBlobGranulesActorActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 11281 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (purgeVersion <= 0)
															#line 63555 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 11282 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent("PurgeInvalidVersion").detail("Range", range).detail("Version", purgeVersion).detail("Force", force);
															#line 11283 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			return a_body1Catch1(unsupported_operation(), loopDepth);
															#line 63561 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 11286 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (tenant.present())
															#line 63565 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 11287 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_2 = tenant.get()->ready();
															#line 11287 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<PurgeBlobGranulesActorActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 63571 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont1when1(__when_expr_2.get(), loopDepth); };
			static_cast<PurgeBlobGranulesActorActor*>(this)->actor_wait_state = 3;
															#line 11287 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< PurgeBlobGranulesActorActor, 2, Void >*>(static_cast<PurgeBlobGranulesActorActor*>(this)));
															#line 63576 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		else
		{
			loopDepth = a_body1cont4(loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont2(int loopDepth) 
	{
															#line 11279 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		tr.reset();
															#line 63590 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
		try {
															#line 11272 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Version> __when_expr_0 = tr.getReadVersion();
															#line 11272 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<PurgeBlobGranulesActorActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 63609 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1loopBody1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
			static_cast<PurgeBlobGranulesActorActor*>(this)->actor_wait_state = 1;
															#line 11272 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< PurgeBlobGranulesActorActor, 0, Version >*>(static_cast<PurgeBlobGranulesActorActor*>(this)));
															#line 63614 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1break1(int loopDepth) 
	{
		try {
			return a_body1cont2(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 11276 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_1 = tr.onError(e);
															#line 11276 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<PurgeBlobGranulesActorActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 63651 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1Catch1when1(__when_expr_1.get(), loopDepth); };
			static_cast<PurgeBlobGranulesActorActor*>(this)->actor_wait_state = 2;
															#line 11276 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< PurgeBlobGranulesActorActor, 1, Void >*>(static_cast<PurgeBlobGranulesActorActor*>(this)));
															#line 63656 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(Version const& _purgeVersion,int loopDepth) 
	{
															#line 11273 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		purgeVersion = _purgeVersion;
															#line 63671 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		return a_body1break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1loopBody1cont2(Version && _purgeVersion,int loopDepth) 
	{
															#line 11273 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		purgeVersion = _purgeVersion;
															#line 63680 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		return a_body1break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1loopBody1when1(Version const& _purgeVersion,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(_purgeVersion, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Version && _purgeVersion,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(std::move(_purgeVersion), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<PurgeBlobGranulesActorActor*>(this)->actor_wait_state > 0) static_cast<PurgeBlobGranulesActorActor*>(this)->actor_wait_state = 0;
		static_cast<PurgeBlobGranulesActorActor*>(this)->ActorCallback< PurgeBlobGranulesActorActor, 0, Version >::remove();

	}
	void a_callback_fire(ActorCallback< PurgeBlobGranulesActorActor, 0, Version >*,Version const& value) 
	{
		fdb_probe_actor_enter("purgeBlobGranulesActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("purgeBlobGranulesActor", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< PurgeBlobGranulesActorActor, 0, Version >*,Version && value) 
	{
		fdb_probe_actor_enter("purgeBlobGranulesActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("purgeBlobGranulesActor", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< PurgeBlobGranulesActorActor, 0, Version >*,Error err) 
	{
		fdb_probe_actor_enter("purgeBlobGranulesActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("purgeBlobGranulesActor", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<PurgeBlobGranulesActorActor*>(this)->actor_wait_state > 0) static_cast<PurgeBlobGranulesActorActor*>(this)->actor_wait_state = 0;
		static_cast<PurgeBlobGranulesActorActor*>(this)->ActorCallback< PurgeBlobGranulesActorActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< PurgeBlobGranulesActorActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("purgeBlobGranulesActor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("purgeBlobGranulesActor", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< PurgeBlobGranulesActorActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("purgeBlobGranulesActor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("purgeBlobGranulesActor", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< PurgeBlobGranulesActorActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("purgeBlobGranulesActor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("purgeBlobGranulesActor", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont4(int loopDepth) 
	{
															#line 11291 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		;
															#line 63827 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont4loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1cont6(Void const& _,int loopDepth) 
	{
															#line 11288 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		purgeRange = purgeRange.withPrefix(tenant.get()->prefix());
															#line 63836 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont4(loopDepth);

		return loopDepth;
	}
	int a_body1cont6(Void && _,int loopDepth) 
	{
															#line 11288 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		purgeRange = purgeRange.withPrefix(tenant.get()->prefix());
															#line 63845 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont4(loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont6(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont6(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<PurgeBlobGranulesActorActor*>(this)->actor_wait_state > 0) static_cast<PurgeBlobGranulesActorActor*>(this)->actor_wait_state = 0;
		static_cast<PurgeBlobGranulesActorActor*>(this)->ActorCallback< PurgeBlobGranulesActorActor, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< PurgeBlobGranulesActorActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("purgeBlobGranulesActor", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("purgeBlobGranulesActor", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< PurgeBlobGranulesActorActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("purgeBlobGranulesActor", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("purgeBlobGranulesActor", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< PurgeBlobGranulesActorActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("purgeBlobGranulesActor", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("purgeBlobGranulesActor", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1cont8(int loopDepth) 
	{
															#line 11340 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<PurgeBlobGranulesActorActor*>(this)->SAV<Key>::futures) { (void)(purgeKey); this->~PurgeBlobGranulesActorActorState(); static_cast<PurgeBlobGranulesActorActor*>(this)->destroy(); return 0; }
															#line 63917 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<PurgeBlobGranulesActorActor*>(this)->SAV< Key >::value()) Key(std::move(purgeKey)); // state_var_RVO
		this->~PurgeBlobGranulesActorActorState();
		static_cast<PurgeBlobGranulesActorActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont4loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1cont4loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1cont4loopBody1(int loopDepth) 
	{
		try {
															#line 11293 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tr.setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 11294 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tr.setOption(FDBTransactionOptions::PRIORITY_SYSTEM_IMMEDIATE);
															#line 11295 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tr.setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 11298 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			blobbifiedBegin = getBlobRanges(&tr, KeyRangeRef(purgeRange.begin, keyAfter(purgeRange.begin)), 1);
															#line 11300 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			blobbifiedEnd = getBlobRanges(&tr, KeyRangeRef(purgeRange.end, keyAfter(purgeRange.end)), 1);
															#line 11302 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_3 = success(blobbifiedBegin) && success(blobbifiedEnd);
															#line 11302 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<PurgeBlobGranulesActorActor*>(this)->actor_wait_state < 0) return a_body1cont4loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 63949 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1cont4loopBody1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1cont4loopBody1when1(__when_expr_3.get(), loopDepth); };
			static_cast<PurgeBlobGranulesActorActor*>(this)->actor_wait_state = 4;
															#line 11302 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< PurgeBlobGranulesActorActor, 3, Void >*>(static_cast<PurgeBlobGranulesActorActor*>(this)));
															#line 63954 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1cont4loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1cont4loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont4break1(int loopDepth) 
	{
		try {
			return a_body1cont8(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont4loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1cont4loopHead1(0);

		return loopDepth;
	}
	int a_body1cont4loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 11330 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (BG_REQUEST_DEBUG)
															#line 63989 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 11331 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				fmt::print("purgeBlobGranules for range [{0} - {1}) at version {2} encountered error {3}\n", purgeRange.begin.printable(), purgeRange.end.printable(), purgeVersion, e.name());
															#line 63993 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 11337 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_6 = tr.onError(e);
															#line 11337 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<PurgeBlobGranulesActorActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 63999 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_6.isReady()) { if (__when_expr_6.isError()) return a_body1Catch1(__when_expr_6.getError(), std::max(0, loopDepth - 1)); else return a_body1cont4loopBody1Catch1when1(__when_expr_6.get(), loopDepth); };
			static_cast<PurgeBlobGranulesActorActor*>(this)->actor_wait_state = 7;
															#line 11337 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_6.addCallbackAndClear(static_cast<ActorCallback< PurgeBlobGranulesActorActor, 6, Void >*>(static_cast<PurgeBlobGranulesActorActor*>(this)));
															#line 64004 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1cont4loopBody1cont2(Void const& _,int loopDepth) 
	{
															#line 11304 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if ((!blobbifiedBegin.get().empty() && blobbifiedBegin.get().front().begin < purgeRange.begin) || (!blobbifiedEnd.get().empty() && blobbifiedEnd.get().front().begin < purgeRange.end))
															#line 64019 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 11306 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent("UnalignedPurge") .detail("Range", purgeRange) .detail("Version", purgeVersion) .detail("Force", force);
															#line 11310 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			return a_body1cont4loopBody1Catch1(unsupported_operation(), loopDepth);
															#line 64025 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 11313 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		Value purgeValue = blobGranulePurgeValueFor(purgeVersion, purgeRange, force);
															#line 11314 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		tr.atomicOp( addVersionStampAtEnd(blobGranulePurgeKeys.begin), purgeValue, MutationRef::SetVersionstampedKey);
															#line 11316 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		tr.set(blobGranulePurgeChangeKey, deterministicRandom()->randomUniqueID().toString());
															#line 11317 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		fTrVs = tr.getVersionstamp();
															#line 11318 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_4 = tr.commit();
															#line 11318 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<PurgeBlobGranulesActorActor*>(this)->actor_wait_state < 0) return a_body1cont4loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 64039 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1cont4loopBody1Catch1(__when_expr_4.getError(), loopDepth); else return a_body1cont4loopBody1cont2when1(__when_expr_4.get(), loopDepth); };
		static_cast<PurgeBlobGranulesActorActor*>(this)->actor_wait_state = 5;
															#line 11318 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< PurgeBlobGranulesActorActor, 4, Void >*>(static_cast<PurgeBlobGranulesActorActor*>(this)));
															#line 64044 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont4loopBody1cont2(Void && _,int loopDepth) 
	{
															#line 11304 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if ((!blobbifiedBegin.get().empty() && blobbifiedBegin.get().front().begin < purgeRange.begin) || (!blobbifiedEnd.get().empty() && blobbifiedEnd.get().front().begin < purgeRange.end))
															#line 64053 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 11306 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			TraceEvent("UnalignedPurge") .detail("Range", purgeRange) .detail("Version", purgeVersion) .detail("Force", force);
															#line 11310 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			return a_body1cont4loopBody1Catch1(unsupported_operation(), loopDepth);
															#line 64059 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 11313 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		Value purgeValue = blobGranulePurgeValueFor(purgeVersion, purgeRange, force);
															#line 11314 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		tr.atomicOp( addVersionStampAtEnd(blobGranulePurgeKeys.begin), purgeValue, MutationRef::SetVersionstampedKey);
															#line 11316 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		tr.set(blobGranulePurgeChangeKey, deterministicRandom()->randomUniqueID().toString());
															#line 11317 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		fTrVs = tr.getVersionstamp();
															#line 11318 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_4 = tr.commit();
															#line 11318 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<PurgeBlobGranulesActorActor*>(this)->actor_wait_state < 0) return a_body1cont4loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 64073 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1cont4loopBody1Catch1(__when_expr_4.getError(), loopDepth); else return a_body1cont4loopBody1cont2when1(__when_expr_4.get(), loopDepth); };
		static_cast<PurgeBlobGranulesActorActor*>(this)->actor_wait_state = 5;
															#line 11318 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< PurgeBlobGranulesActorActor, 4, Void >*>(static_cast<PurgeBlobGranulesActorActor*>(this)));
															#line 64078 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont4loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont4loopBody1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont4loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont4loopBody1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<PurgeBlobGranulesActorActor*>(this)->actor_wait_state > 0) static_cast<PurgeBlobGranulesActorActor*>(this)->actor_wait_state = 0;
		static_cast<PurgeBlobGranulesActorActor*>(this)->ActorCallback< PurgeBlobGranulesActorActor, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< PurgeBlobGranulesActorActor, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("purgeBlobGranulesActor", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont4loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont4loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont4loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("purgeBlobGranulesActor", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< PurgeBlobGranulesActorActor, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("purgeBlobGranulesActor", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont4loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont4loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont4loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("purgeBlobGranulesActor", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< PurgeBlobGranulesActorActor, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("purgeBlobGranulesActor", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont4loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont4loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont4loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("purgeBlobGranulesActor", reinterpret_cast<unsigned long>(this), 3);

	}
	int a_body1cont4loopBody1cont3(Void const& _,int loopDepth) 
	{
															#line 11319 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Standalone<StringRef>> __when_expr_5 = fTrVs;
															#line 11319 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<PurgeBlobGranulesActorActor*>(this)->actor_wait_state < 0) return a_body1cont4loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 64152 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_5.isReady()) { if (__when_expr_5.isError()) return a_body1cont4loopBody1Catch1(__when_expr_5.getError(), loopDepth); else return a_body1cont4loopBody1cont3when1(__when_expr_5.get(), loopDepth); };
		static_cast<PurgeBlobGranulesActorActor*>(this)->actor_wait_state = 6;
															#line 11319 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_5.addCallbackAndClear(static_cast<ActorCallback< PurgeBlobGranulesActorActor, 5, Standalone<StringRef> >*>(static_cast<PurgeBlobGranulesActorActor*>(this)));
															#line 64157 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont4loopBody1cont3(Void && _,int loopDepth) 
	{
															#line 11319 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Standalone<StringRef>> __when_expr_5 = fTrVs;
															#line 11319 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<PurgeBlobGranulesActorActor*>(this)->actor_wait_state < 0) return a_body1cont4loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 64168 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_5.isReady()) { if (__when_expr_5.isError()) return a_body1cont4loopBody1Catch1(__when_expr_5.getError(), loopDepth); else return a_body1cont4loopBody1cont3when1(__when_expr_5.get(), loopDepth); };
		static_cast<PurgeBlobGranulesActorActor*>(this)->actor_wait_state = 6;
															#line 11319 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_5.addCallbackAndClear(static_cast<ActorCallback< PurgeBlobGranulesActorActor, 5, Standalone<StringRef> >*>(static_cast<PurgeBlobGranulesActorActor*>(this)));
															#line 64173 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont4loopBody1cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont4loopBody1cont3(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont4loopBody1cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont4loopBody1cont3(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose5() 
	{
		if (static_cast<PurgeBlobGranulesActorActor*>(this)->actor_wait_state > 0) static_cast<PurgeBlobGranulesActorActor*>(this)->actor_wait_state = 0;
		static_cast<PurgeBlobGranulesActorActor*>(this)->ActorCallback< PurgeBlobGranulesActorActor, 4, Void >::remove();

	}
	void a_callback_fire(ActorCallback< PurgeBlobGranulesActorActor, 4, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("purgeBlobGranulesActor", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont4loopBody1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont4loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont4loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("purgeBlobGranulesActor", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_fire(ActorCallback< PurgeBlobGranulesActorActor, 4, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("purgeBlobGranulesActor", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont4loopBody1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont4loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont4loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("purgeBlobGranulesActor", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_error(ActorCallback< PurgeBlobGranulesActorActor, 4, Void >*,Error err) 
	{
		fdb_probe_actor_enter("purgeBlobGranulesActor", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont4loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont4loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont4loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("purgeBlobGranulesActor", reinterpret_cast<unsigned long>(this), 4);

	}
	int a_body1cont4loopBody1cont5(Standalone<StringRef> const& vs,int loopDepth) 
	{
															#line 11320 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		purgeKey = blobGranulePurgeKeys.begin.withSuffix(vs);
															#line 11321 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (BG_REQUEST_DEBUG)
															#line 64247 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 11322 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			fmt::print("purgeBlobGranules for range [{0} - {1}) at version {2} registered {3}\n", purgeRange.begin.printable(), purgeRange.end.printable(), purgeVersion, purgeKey.printable());
															#line 64251 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
		return a_body1cont4break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1cont4loopBody1cont5(Standalone<StringRef> && vs,int loopDepth) 
	{
															#line 11320 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		purgeKey = blobGranulePurgeKeys.begin.withSuffix(vs);
															#line 11321 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (BG_REQUEST_DEBUG)
															#line 64263 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 11322 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			fmt::print("purgeBlobGranules for range [{0} - {1}) at version {2} registered {3}\n", purgeRange.begin.printable(), purgeRange.end.printable(), purgeVersion, purgeKey.printable());
															#line 64267 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
		return a_body1cont4break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1cont4loopBody1cont3when1(Standalone<StringRef> const& vs,int loopDepth) 
	{
		loopDepth = a_body1cont4loopBody1cont5(vs, loopDepth);

		return loopDepth;
	}
	int a_body1cont4loopBody1cont3when1(Standalone<StringRef> && vs,int loopDepth) 
	{
		loopDepth = a_body1cont4loopBody1cont5(std::move(vs), loopDepth);

		return loopDepth;
	}
	void a_exitChoose6() 
	{
		if (static_cast<PurgeBlobGranulesActorActor*>(this)->actor_wait_state > 0) static_cast<PurgeBlobGranulesActorActor*>(this)->actor_wait_state = 0;
		static_cast<PurgeBlobGranulesActorActor*>(this)->ActorCallback< PurgeBlobGranulesActorActor, 5, Standalone<StringRef> >::remove();

	}
	void a_callback_fire(ActorCallback< PurgeBlobGranulesActorActor, 5, Standalone<StringRef> >*,Standalone<StringRef> const& value) 
	{
		fdb_probe_actor_enter("purgeBlobGranulesActor", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1cont4loopBody1cont3when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont4loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont4loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("purgeBlobGranulesActor", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_fire(ActorCallback< PurgeBlobGranulesActorActor, 5, Standalone<StringRef> >*,Standalone<StringRef> && value) 
	{
		fdb_probe_actor_enter("purgeBlobGranulesActor", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1cont4loopBody1cont3when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont4loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont4loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("purgeBlobGranulesActor", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_error(ActorCallback< PurgeBlobGranulesActorActor, 5, Standalone<StringRef> >*,Error err) 
	{
		fdb_probe_actor_enter("purgeBlobGranulesActor", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1cont4loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont4loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont4loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("purgeBlobGranulesActor", reinterpret_cast<unsigned long>(this), 5);

	}
	int a_body1cont4loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont4loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont4loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont4loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont4loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont4loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont4loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont4loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose7() 
	{
		if (static_cast<PurgeBlobGranulesActorActor*>(this)->actor_wait_state > 0) static_cast<PurgeBlobGranulesActorActor*>(this)->actor_wait_state = 0;
		static_cast<PurgeBlobGranulesActorActor*>(this)->ActorCallback< PurgeBlobGranulesActorActor, 6, Void >::remove();

	}
	void a_callback_fire(ActorCallback< PurgeBlobGranulesActorActor, 6, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("purgeBlobGranulesActor", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1cont4loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("purgeBlobGranulesActor", reinterpret_cast<unsigned long>(this), 6);

	}
	void a_callback_fire(ActorCallback< PurgeBlobGranulesActorActor, 6, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("purgeBlobGranulesActor", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1cont4loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("purgeBlobGranulesActor", reinterpret_cast<unsigned long>(this), 6);

	}
	void a_callback_error(ActorCallback< PurgeBlobGranulesActorActor, 6, Void >*,Error err) 
	{
		fdb_probe_actor_enter("purgeBlobGranulesActor", reinterpret_cast<unsigned long>(this), 6);
		a_exitChoose7();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("purgeBlobGranulesActor", reinterpret_cast<unsigned long>(this), 6);

	}
															#line 11258 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<DatabaseContext> db;
															#line 11258 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeyRange range;
															#line 11258 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Version purgeVersion;
															#line 11258 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Optional<Reference<Tenant>> tenant;
															#line 11258 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	bool force;
															#line 11263 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Database cx;
															#line 11264 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Transaction tr;
															#line 11265 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Key purgeKey;
															#line 11266 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeyRange purgeRange;
															#line 11298 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Future<Standalone<VectorRef<KeyRangeRef>>> blobbifiedBegin;
															#line 11300 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Future<Standalone<VectorRef<KeyRangeRef>>> blobbifiedEnd;
															#line 11317 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Future<Standalone<StringRef>> fTrVs;
															#line 64435 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via purgeBlobGranulesActor()
															#line 11258 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class PurgeBlobGranulesActorActor final : public Actor<Key>, public ActorCallback< PurgeBlobGranulesActorActor, 0, Version >, public ActorCallback< PurgeBlobGranulesActorActor, 1, Void >, public ActorCallback< PurgeBlobGranulesActorActor, 2, Void >, public ActorCallback< PurgeBlobGranulesActorActor, 3, Void >, public ActorCallback< PurgeBlobGranulesActorActor, 4, Void >, public ActorCallback< PurgeBlobGranulesActorActor, 5, Standalone<StringRef> >, public ActorCallback< PurgeBlobGranulesActorActor, 6, Void >, public FastAllocated<PurgeBlobGranulesActorActor>, public PurgeBlobGranulesActorActorState<PurgeBlobGranulesActorActor> {
															#line 64440 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<PurgeBlobGranulesActorActor>::operator new;
	using FastAllocated<PurgeBlobGranulesActorActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Key>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< PurgeBlobGranulesActorActor, 0, Version >;
friend struct ActorCallback< PurgeBlobGranulesActorActor, 1, Void >;
friend struct ActorCallback< PurgeBlobGranulesActorActor, 2, Void >;
friend struct ActorCallback< PurgeBlobGranulesActorActor, 3, Void >;
friend struct ActorCallback< PurgeBlobGranulesActorActor, 4, Void >;
friend struct ActorCallback< PurgeBlobGranulesActorActor, 5, Standalone<StringRef> >;
friend struct ActorCallback< PurgeBlobGranulesActorActor, 6, Void >;
															#line 11258 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	PurgeBlobGranulesActorActor(Reference<DatabaseContext> const& db,KeyRange const& range,Version const& purgeVersion,Optional<Reference<Tenant>> const& tenant,bool const& force) 
															#line 64457 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Key>(),
		   PurgeBlobGranulesActorActorState<PurgeBlobGranulesActorActor>(db, range, purgeVersion, tenant, force)
	{
		fdb_probe_actor_enter("purgeBlobGranulesActor", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("purgeBlobGranulesActor");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("purgeBlobGranulesActor", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< PurgeBlobGranulesActorActor, 0, Version >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< PurgeBlobGranulesActorActor, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< PurgeBlobGranulesActorActor, 2, Void >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< PurgeBlobGranulesActorActor, 3, Void >*)0, actor_cancelled()); break;
		case 5: this->a_callback_error((ActorCallback< PurgeBlobGranulesActorActor, 4, Void >*)0, actor_cancelled()); break;
		case 6: this->a_callback_error((ActorCallback< PurgeBlobGranulesActorActor, 5, Standalone<StringRef> >*)0, actor_cancelled()); break;
		case 7: this->a_callback_error((ActorCallback< PurgeBlobGranulesActorActor, 6, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 11258 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<Key> purgeBlobGranulesActor( Reference<DatabaseContext> const& db, KeyRange const& range, Version const& purgeVersion, Optional<Reference<Tenant>> const& tenant, bool const& force ) {
															#line 11258 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Key>(new PurgeBlobGranulesActorActor(db, range, purgeVersion, tenant, force));
															#line 64491 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 11342 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

Future<Key> DatabaseContext::purgeBlobGranules(KeyRange range,
                                               Version purgeVersion,
                                               Optional<Reference<Tenant>> tenant,
                                               bool force) {
	return purgeBlobGranulesActor(Reference<DatabaseContext>::addRef(this), range, purgeVersion, tenant, force);
}

															#line 64503 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via waitPurgeGranulesCompleteActor()
															#line 11350 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class WaitPurgeGranulesCompleteActorActor>
															#line 11350 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class WaitPurgeGranulesCompleteActorActorState {
															#line 64510 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 11350 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	WaitPurgeGranulesCompleteActorActorState(Reference<DatabaseContext> const& db,Key const& purgeKey) 
															#line 11350 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 11350 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : db(db),
															#line 11350 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   purgeKey(purgeKey),
															#line 11351 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   cx(db),
															#line 11352 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   tr(makeReference<ReadYourWritesTransaction>(cx))
															#line 64523 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("waitPurgeGranulesCompleteActor", reinterpret_cast<unsigned long>(this));

	}
	~WaitPurgeGranulesCompleteActorActorState() 
	{
		fdb_probe_actor_destroy("waitPurgeGranulesCompleteActor", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 11353 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			;
															#line 64538 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~WaitPurgeGranulesCompleteActorActorState();
		static_cast<WaitPurgeGranulesCompleteActorActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
		try {
															#line 11355 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 11356 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tr->setOption(FDBTransactionOptions::PRIORITY_SYSTEM_IMMEDIATE);
															#line 11358 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Optional<Value>> __when_expr_0 = tr->get(purgeKey);
															#line 11358 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<WaitPurgeGranulesCompleteActorActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 64575 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1loopBody1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
			static_cast<WaitPurgeGranulesCompleteActorActor*>(this)->actor_wait_state = 1;
															#line 11358 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< WaitPurgeGranulesCompleteActorActor, 0, Optional<Value> >*>(static_cast<WaitPurgeGranulesCompleteActorActor*>(this)));
															#line 64580 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 11373 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_3 = tr->onError(e);
															#line 11373 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<WaitPurgeGranulesCompleteActorActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 64604 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1Catch1(__when_expr_3.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1Catch1when1(__when_expr_3.get(), loopDepth); };
			static_cast<WaitPurgeGranulesCompleteActorActor*>(this)->actor_wait_state = 4;
															#line 11373 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< WaitPurgeGranulesCompleteActorActor, 3, Void >*>(static_cast<WaitPurgeGranulesCompleteActorActor*>(this)));
															#line 64609 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(Optional<Value> const& purgeVal,int loopDepth) 
	{
															#line 11359 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!purgeVal.present())
															#line 64624 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 11360 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (BG_REQUEST_DEBUG)
															#line 64628 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 11361 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				fmt::print("purgeBlobGranules for {0} succeeded\n", purgeKey.printable());
															#line 64632 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 11363 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<WaitPurgeGranulesCompleteActorActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~WaitPurgeGranulesCompleteActorActorState(); static_cast<WaitPurgeGranulesCompleteActorActor*>(this)->destroy(); return 0; }
															#line 64636 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<WaitPurgeGranulesCompleteActorActor*>(this)->SAV< Void >::value()) Void(Void());
			this->~WaitPurgeGranulesCompleteActorActorState();
			static_cast<WaitPurgeGranulesCompleteActorActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 11365 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (BG_REQUEST_DEBUG)
															#line 64644 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 11366 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			fmt::print("purgeBlobGranules for {0} watching\n", purgeKey.printable());
															#line 64648 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 11368 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		watchFuture = tr->watch(purgeKey);
															#line 11369 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_1 = tr->commit();
															#line 11369 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<WaitPurgeGranulesCompleteActorActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 64656 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
		static_cast<WaitPurgeGranulesCompleteActorActor*>(this)->actor_wait_state = 2;
															#line 11369 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< WaitPurgeGranulesCompleteActorActor, 1, Void >*>(static_cast<WaitPurgeGranulesCompleteActorActor*>(this)));
															#line 64661 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2(Optional<Value> && purgeVal,int loopDepth) 
	{
															#line 11359 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!purgeVal.present())
															#line 64670 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 11360 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (BG_REQUEST_DEBUG)
															#line 64674 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 11361 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				fmt::print("purgeBlobGranules for {0} succeeded\n", purgeKey.printable());
															#line 64678 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 11363 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<WaitPurgeGranulesCompleteActorActor*>(this)->SAV<Void>::futures) { (void)(Void()); this->~WaitPurgeGranulesCompleteActorActorState(); static_cast<WaitPurgeGranulesCompleteActorActor*>(this)->destroy(); return 0; }
															#line 64682 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<WaitPurgeGranulesCompleteActorActor*>(this)->SAV< Void >::value()) Void(Void());
			this->~WaitPurgeGranulesCompleteActorActorState();
			static_cast<WaitPurgeGranulesCompleteActorActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 11365 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (BG_REQUEST_DEBUG)
															#line 64690 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 11366 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			fmt::print("purgeBlobGranules for {0} watching\n", purgeKey.printable());
															#line 64694 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 11368 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		watchFuture = tr->watch(purgeKey);
															#line 11369 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_1 = tr->commit();
															#line 11369 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<WaitPurgeGranulesCompleteActorActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 64702 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
		static_cast<WaitPurgeGranulesCompleteActorActor*>(this)->actor_wait_state = 2;
															#line 11369 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< WaitPurgeGranulesCompleteActorActor, 1, Void >*>(static_cast<WaitPurgeGranulesCompleteActorActor*>(this)));
															#line 64707 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1when1(Optional<Value> const& purgeVal,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(purgeVal, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Optional<Value> && purgeVal,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(std::move(purgeVal), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<WaitPurgeGranulesCompleteActorActor*>(this)->actor_wait_state > 0) static_cast<WaitPurgeGranulesCompleteActorActor*>(this)->actor_wait_state = 0;
		static_cast<WaitPurgeGranulesCompleteActorActor*>(this)->ActorCallback< WaitPurgeGranulesCompleteActorActor, 0, Optional<Value> >::remove();

	}
	void a_callback_fire(ActorCallback< WaitPurgeGranulesCompleteActorActor, 0, Optional<Value> >*,Optional<Value> const& value) 
	{
		fdb_probe_actor_enter("waitPurgeGranulesCompleteActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitPurgeGranulesCompleteActor", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< WaitPurgeGranulesCompleteActorActor, 0, Optional<Value> >*,Optional<Value> && value) 
	{
		fdb_probe_actor_enter("waitPurgeGranulesCompleteActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitPurgeGranulesCompleteActor", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< WaitPurgeGranulesCompleteActorActor, 0, Optional<Value> >*,Error err) 
	{
		fdb_probe_actor_enter("waitPurgeGranulesCompleteActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitPurgeGranulesCompleteActor", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1cont3(Void const& _,int loopDepth) 
	{
															#line 11370 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_2 = watchFuture;
															#line 11370 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<WaitPurgeGranulesCompleteActorActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 64781 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1loopBody1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1loopBody1cont3when1(__when_expr_2.get(), loopDepth); };
		static_cast<WaitPurgeGranulesCompleteActorActor*>(this)->actor_wait_state = 3;
															#line 11370 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< WaitPurgeGranulesCompleteActorActor, 2, Void >*>(static_cast<WaitPurgeGranulesCompleteActorActor*>(this)));
															#line 64786 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont3(Void && _,int loopDepth) 
	{
															#line 11370 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_2 = watchFuture;
															#line 11370 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<WaitPurgeGranulesCompleteActorActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 64797 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1loopBody1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1loopBody1cont3when1(__when_expr_2.get(), loopDepth); };
		static_cast<WaitPurgeGranulesCompleteActorActor*>(this)->actor_wait_state = 3;
															#line 11370 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< WaitPurgeGranulesCompleteActorActor, 2, Void >*>(static_cast<WaitPurgeGranulesCompleteActorActor*>(this)));
															#line 64802 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<WaitPurgeGranulesCompleteActorActor*>(this)->actor_wait_state > 0) static_cast<WaitPurgeGranulesCompleteActorActor*>(this)->actor_wait_state = 0;
		static_cast<WaitPurgeGranulesCompleteActorActor*>(this)->ActorCallback< WaitPurgeGranulesCompleteActorActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< WaitPurgeGranulesCompleteActorActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("waitPurgeGranulesCompleteActor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitPurgeGranulesCompleteActor", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< WaitPurgeGranulesCompleteActorActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("waitPurgeGranulesCompleteActor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitPurgeGranulesCompleteActor", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< WaitPurgeGranulesCompleteActorActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("waitPurgeGranulesCompleteActor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitPurgeGranulesCompleteActor", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1loopBody1cont7(Void const& _,int loopDepth) 
	{
															#line 11371 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		tr->reset();
															#line 64874 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont9(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont7(Void && _,int loopDepth) 
	{
															#line 11371 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		tr->reset();
															#line 64883 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1loopBody1cont9(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont3when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont7(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont3when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont7(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<WaitPurgeGranulesCompleteActorActor*>(this)->actor_wait_state > 0) static_cast<WaitPurgeGranulesCompleteActorActor*>(this)->actor_wait_state = 0;
		static_cast<WaitPurgeGranulesCompleteActorActor*>(this)->ActorCallback< WaitPurgeGranulesCompleteActorActor, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< WaitPurgeGranulesCompleteActorActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("waitPurgeGranulesCompleteActor", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont3when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitPurgeGranulesCompleteActor", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< WaitPurgeGranulesCompleteActorActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("waitPurgeGranulesCompleteActor", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1cont3when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitPurgeGranulesCompleteActor", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< WaitPurgeGranulesCompleteActorActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("waitPurgeGranulesCompleteActor", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitPurgeGranulesCompleteActor", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1loopBody1cont9(int loopDepth) 
	{
		try {
			loopDepth = a_body1loopBody1cont1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<WaitPurgeGranulesCompleteActorActor*>(this)->actor_wait_state > 0) static_cast<WaitPurgeGranulesCompleteActorActor*>(this)->actor_wait_state = 0;
		static_cast<WaitPurgeGranulesCompleteActorActor*>(this)->ActorCallback< WaitPurgeGranulesCompleteActorActor, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< WaitPurgeGranulesCompleteActorActor, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("waitPurgeGranulesCompleteActor", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitPurgeGranulesCompleteActor", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< WaitPurgeGranulesCompleteActorActor, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("waitPurgeGranulesCompleteActor", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitPurgeGranulesCompleteActor", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< WaitPurgeGranulesCompleteActorActor, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("waitPurgeGranulesCompleteActor", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("waitPurgeGranulesCompleteActor", reinterpret_cast<unsigned long>(this), 3);

	}
															#line 11350 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<DatabaseContext> db;
															#line 11350 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Key purgeKey;
															#line 11351 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Database cx;
															#line 11352 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 11368 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Future<Void> watchFuture;
															#line 65049 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via waitPurgeGranulesCompleteActor()
															#line 11350 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class WaitPurgeGranulesCompleteActorActor final : public Actor<Void>, public ActorCallback< WaitPurgeGranulesCompleteActorActor, 0, Optional<Value> >, public ActorCallback< WaitPurgeGranulesCompleteActorActor, 1, Void >, public ActorCallback< WaitPurgeGranulesCompleteActorActor, 2, Void >, public ActorCallback< WaitPurgeGranulesCompleteActorActor, 3, Void >, public FastAllocated<WaitPurgeGranulesCompleteActorActor>, public WaitPurgeGranulesCompleteActorActorState<WaitPurgeGranulesCompleteActorActor> {
															#line 65054 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<WaitPurgeGranulesCompleteActorActor>::operator new;
	using FastAllocated<WaitPurgeGranulesCompleteActorActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Void>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< WaitPurgeGranulesCompleteActorActor, 0, Optional<Value> >;
friend struct ActorCallback< WaitPurgeGranulesCompleteActorActor, 1, Void >;
friend struct ActorCallback< WaitPurgeGranulesCompleteActorActor, 2, Void >;
friend struct ActorCallback< WaitPurgeGranulesCompleteActorActor, 3, Void >;
															#line 11350 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	WaitPurgeGranulesCompleteActorActor(Reference<DatabaseContext> const& db,Key const& purgeKey) 
															#line 65068 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Void>(),
		   WaitPurgeGranulesCompleteActorActorState<WaitPurgeGranulesCompleteActorActor>(db, purgeKey)
	{
		fdb_probe_actor_enter("waitPurgeGranulesCompleteActor", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("waitPurgeGranulesCompleteActor");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("waitPurgeGranulesCompleteActor", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< WaitPurgeGranulesCompleteActorActor, 0, Optional<Value> >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< WaitPurgeGranulesCompleteActorActor, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< WaitPurgeGranulesCompleteActorActor, 2, Void >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< WaitPurgeGranulesCompleteActorActor, 3, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 11350 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<Void> waitPurgeGranulesCompleteActor( Reference<DatabaseContext> const& db, Key const& purgeKey ) {
															#line 11350 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Void>(new WaitPurgeGranulesCompleteActorActor(db, purgeKey));
															#line 65099 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 11377 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

Future<Void> DatabaseContext::waitPurgeGranulesComplete(Key purgeKey) {
	return waitPurgeGranulesCompleteActor(Reference<DatabaseContext>::addRef(this), purgeKey);
}

															#line 65108 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via setBlobRangeActor()
															#line 11382 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class SetBlobRangeActorActor>
															#line 11382 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class SetBlobRangeActorActorState {
															#line 65115 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 11382 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	SetBlobRangeActorActorState(Reference<DatabaseContext> const& cx,KeyRange const& range,bool const& active,Optional<Reference<Tenant>> const& tenant) 
															#line 11382 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 11382 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : cx(cx),
															#line 11382 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   range(range),
															#line 11382 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   active(active),
															#line 11382 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   tenant(tenant),
															#line 11386 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   db(cx),
															#line 11387 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   tr(makeReference<ReadYourWritesTransaction>(db))
															#line 65132 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("setBlobRangeActor", reinterpret_cast<unsigned long>(this));

	}
	~SetBlobRangeActorActorState() 
	{
		fdb_probe_actor_destroy("setBlobRangeActor", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 11389 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (tenant.present())
															#line 65147 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 11390 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				StrictFuture<Void> __when_expr_0 = tenant.get()->ready();
															#line 11390 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (static_cast<SetBlobRangeActorActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 65153 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
				static_cast<SetBlobRangeActorActor*>(this)->actor_wait_state = 1;
															#line 11390 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< SetBlobRangeActorActor, 0, Void >*>(static_cast<SetBlobRangeActorActor*>(this)));
															#line 65158 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				loopDepth = 0;
			}
			else
			{
				loopDepth = a_body1cont1(loopDepth);
			}
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~SetBlobRangeActorActorState();
		static_cast<SetBlobRangeActorActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 11394 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		value = active ? blobRangeActive : blobRangeInactive;
															#line 11395 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (active && (!g_network->isSimulated() || !g_simulator->willRestart) && BUGGIFY_WITH_PROB(0.1))
															#line 65188 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 11398 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			int randLen = deterministicRandom()->randomInt(2, 20);
															#line 11399 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			value = StringRef(deterministicRandom()->randomAlphaNumeric(randLen));
															#line 65194 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 11401 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		Standalone<BlobRangeChangeLogRef> changeLog(BlobRangeChangeLogRef(range, value));
															#line 11402 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		changeValue = blobRangeChangeLogValueFor(changeLog);
															#line 11403 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		;
															#line 65202 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont1loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1cont2(Void const& _,int loopDepth) 
	{
															#line 11391 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		range = range.withPrefix(tenant.get()->prefix());
															#line 65211 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont2(Void && _,int loopDepth) 
	{
															#line 11391 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		range = range.withPrefix(tenant.get()->prefix());
															#line 65220 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<SetBlobRangeActorActor*>(this)->actor_wait_state > 0) static_cast<SetBlobRangeActorActor*>(this)->actor_wait_state = 0;
		static_cast<SetBlobRangeActorActor*>(this)->ActorCallback< SetBlobRangeActorActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< SetBlobRangeActorActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("setBlobRangeActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("setBlobRangeActor", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< SetBlobRangeActorActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("setBlobRangeActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("setBlobRangeActor", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< SetBlobRangeActorActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("setBlobRangeActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("setBlobRangeActor", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1cont1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1(int loopDepth) 
	{
		try {
															#line 11405 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 11406 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tr->setOption(FDBTransactionOptions::PRIORITY_SYSTEM_IMMEDIATE);
															#line 11408 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Standalone<VectorRef<KeyRangeRef>>> __when_expr_1 = getBlobRanges(&tr->getTransaction(), range, 1);
															#line 11408 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<SetBlobRangeActorActor*>(this)->actor_wait_state < 0) return a_body1cont1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 65306 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1cont1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1loopBody1when1(__when_expr_1.get(), loopDepth); };
			static_cast<SetBlobRangeActorActor*>(this)->actor_wait_state = 2;
															#line 11408 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< SetBlobRangeActorActor, 1, Standalone<VectorRef<KeyRangeRef>> >*>(static_cast<SetBlobRangeActorActor*>(this)));
															#line 65311 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1cont1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1cont1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1cont1loopHead1(0);

		return loopDepth;
	}
	int a_body1cont1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 11444 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_5 = tr->onError(e);
															#line 11444 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<SetBlobRangeActorActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 65335 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_5.isReady()) { if (__when_expr_5.isError()) return a_body1Catch1(__when_expr_5.getError(), std::max(0, loopDepth - 1)); else return a_body1cont1loopBody1Catch1when1(__when_expr_5.get(), loopDepth); };
			static_cast<SetBlobRangeActorActor*>(this)->actor_wait_state = 6;
															#line 11444 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_5.addCallbackAndClear(static_cast<ActorCallback< SetBlobRangeActorActor, 5, Void >*>(static_cast<SetBlobRangeActorActor*>(this)));
															#line 65340 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1cont1loopBody1cont2(Standalone<VectorRef<KeyRangeRef>> const& startBlobRanges,int loopDepth) 
	{
															#line 11410 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (active)
															#line 65355 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 11412 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!startBlobRanges.empty())
															#line 65359 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 11413 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (!static_cast<SetBlobRangeActorActor*>(this)->SAV<bool>::futures) { (void)(startBlobRanges.front().begin == range.begin && startBlobRanges.front().end == range.end); this->~SetBlobRangeActorActorState(); static_cast<SetBlobRangeActorActor*>(this)->destroy(); return 0; }
															#line 65363 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				new (&static_cast<SetBlobRangeActorActor*>(this)->SAV< bool >::value()) bool(startBlobRanges.front().begin == range.begin && startBlobRanges.front().end == range.end);
				this->~SetBlobRangeActorActorState();
				static_cast<SetBlobRangeActorActor*>(this)->finishSendAndDelPromiseRef();
				return 0;
			}
			loopDepth = a_body1cont1loopBody1cont3(loopDepth);
		}
		else
		{
															#line 11418 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (startBlobRanges.empty())
															#line 65375 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 11420 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (!static_cast<SetBlobRangeActorActor*>(this)->SAV<bool>::futures) { (void)(true); this->~SetBlobRangeActorActorState(); static_cast<SetBlobRangeActorActor*>(this)->destroy(); return 0; }
															#line 65379 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				new (&static_cast<SetBlobRangeActorActor*>(this)->SAV< bool >::value()) bool(true);
				this->~SetBlobRangeActorActorState();
				static_cast<SetBlobRangeActorActor*>(this)->finishSendAndDelPromiseRef();
				return 0;
			}
			else
			{
															#line 11421 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (startBlobRanges.front().begin < range.begin)
															#line 65389 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 11423 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					if (!static_cast<SetBlobRangeActorActor*>(this)->SAV<bool>::futures) { (void)(false); this->~SetBlobRangeActorActorState(); static_cast<SetBlobRangeActorActor*>(this)->destroy(); return 0; }
															#line 65393 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					new (&static_cast<SetBlobRangeActorActor*>(this)->SAV< bool >::value()) bool(false);
					this->~SetBlobRangeActorActorState();
					static_cast<SetBlobRangeActorActor*>(this)->finishSendAndDelPromiseRef();
					return 0;
				}
			}
															#line 11427 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Standalone<VectorRef<KeyRangeRef>>> __when_expr_2 = getBlobRanges(&tr->getTransaction(), singleKeyRange(range.end), 1);
															#line 11427 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<SetBlobRangeActorActor*>(this)->actor_wait_state < 0) return a_body1cont1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 65404 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1cont1loopBody1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont1loopBody1cont2when1(__when_expr_2.get(), loopDepth); };
			static_cast<SetBlobRangeActorActor*>(this)->actor_wait_state = 3;
															#line 11427 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< SetBlobRangeActorActor, 2, Standalone<VectorRef<KeyRangeRef>> >*>(static_cast<SetBlobRangeActorActor*>(this)));
															#line 65409 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}

		return loopDepth;
	}
	int a_body1cont1loopBody1cont2(Standalone<VectorRef<KeyRangeRef>> && startBlobRanges,int loopDepth) 
	{
															#line 11410 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (active)
															#line 65419 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 11412 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!startBlobRanges.empty())
															#line 65423 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 11413 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (!static_cast<SetBlobRangeActorActor*>(this)->SAV<bool>::futures) { (void)(startBlobRanges.front().begin == range.begin && startBlobRanges.front().end == range.end); this->~SetBlobRangeActorActorState(); static_cast<SetBlobRangeActorActor*>(this)->destroy(); return 0; }
															#line 65427 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				new (&static_cast<SetBlobRangeActorActor*>(this)->SAV< bool >::value()) bool(startBlobRanges.front().begin == range.begin && startBlobRanges.front().end == range.end);
				this->~SetBlobRangeActorActorState();
				static_cast<SetBlobRangeActorActor*>(this)->finishSendAndDelPromiseRef();
				return 0;
			}
			loopDepth = a_body1cont1loopBody1cont3(loopDepth);
		}
		else
		{
															#line 11418 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (startBlobRanges.empty())
															#line 65439 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 11420 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (!static_cast<SetBlobRangeActorActor*>(this)->SAV<bool>::futures) { (void)(true); this->~SetBlobRangeActorActorState(); static_cast<SetBlobRangeActorActor*>(this)->destroy(); return 0; }
															#line 65443 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				new (&static_cast<SetBlobRangeActorActor*>(this)->SAV< bool >::value()) bool(true);
				this->~SetBlobRangeActorActorState();
				static_cast<SetBlobRangeActorActor*>(this)->finishSendAndDelPromiseRef();
				return 0;
			}
			else
			{
															#line 11421 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (startBlobRanges.front().begin < range.begin)
															#line 65453 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				{
															#line 11423 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
					if (!static_cast<SetBlobRangeActorActor*>(this)->SAV<bool>::futures) { (void)(false); this->~SetBlobRangeActorActorState(); static_cast<SetBlobRangeActorActor*>(this)->destroy(); return 0; }
															#line 65457 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
					new (&static_cast<SetBlobRangeActorActor*>(this)->SAV< bool >::value()) bool(false);
					this->~SetBlobRangeActorActorState();
					static_cast<SetBlobRangeActorActor*>(this)->finishSendAndDelPromiseRef();
					return 0;
				}
			}
															#line 11427 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Standalone<VectorRef<KeyRangeRef>>> __when_expr_2 = getBlobRanges(&tr->getTransaction(), singleKeyRange(range.end), 1);
															#line 11427 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<SetBlobRangeActorActor*>(this)->actor_wait_state < 0) return a_body1cont1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 65468 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1cont1loopBody1Catch1(__when_expr_2.getError(), loopDepth); else return a_body1cont1loopBody1cont2when1(__when_expr_2.get(), loopDepth); };
			static_cast<SetBlobRangeActorActor*>(this)->actor_wait_state = 3;
															#line 11427 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< SetBlobRangeActorActor, 2, Standalone<VectorRef<KeyRangeRef>> >*>(static_cast<SetBlobRangeActorActor*>(this)));
															#line 65473 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}

		return loopDepth;
	}
	int a_body1cont1loopBody1when1(Standalone<VectorRef<KeyRangeRef>> const& startBlobRanges,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont2(startBlobRanges, loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1when1(Standalone<VectorRef<KeyRangeRef>> && startBlobRanges,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont2(std::move(startBlobRanges), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<SetBlobRangeActorActor*>(this)->actor_wait_state > 0) static_cast<SetBlobRangeActorActor*>(this)->actor_wait_state = 0;
		static_cast<SetBlobRangeActorActor*>(this)->ActorCallback< SetBlobRangeActorActor, 1, Standalone<VectorRef<KeyRangeRef>> >::remove();

	}
	void a_callback_fire(ActorCallback< SetBlobRangeActorActor, 1, Standalone<VectorRef<KeyRangeRef>> >*,Standalone<VectorRef<KeyRangeRef>> const& value) 
	{
		fdb_probe_actor_enter("setBlobRangeActor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("setBlobRangeActor", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< SetBlobRangeActorActor, 1, Standalone<VectorRef<KeyRangeRef>> >*,Standalone<VectorRef<KeyRangeRef>> && value) 
	{
		fdb_probe_actor_enter("setBlobRangeActor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("setBlobRangeActor", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< SetBlobRangeActorActor, 1, Standalone<VectorRef<KeyRangeRef>> >*,Error err) 
	{
		fdb_probe_actor_enter("setBlobRangeActor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("setBlobRangeActor", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont1loopBody1cont3(int loopDepth) 
	{
															#line 11434 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		tr->set(blobRangeChangeKey, deterministicRandom()->randomUniqueID().toString());
															#line 11437 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_3 = krmSetRange(tr, blobRangeKeys.begin, range, value);
															#line 11437 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<SetBlobRangeActorActor*>(this)->actor_wait_state < 0) return a_body1cont1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 65550 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_3.isReady()) { if (__when_expr_3.isError()) return a_body1cont1loopBody1Catch1(__when_expr_3.getError(), loopDepth); else return a_body1cont1loopBody1cont3when1(__when_expr_3.get(), loopDepth); };
		static_cast<SetBlobRangeActorActor*>(this)->actor_wait_state = 4;
															#line 11437 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_3.addCallbackAndClear(static_cast<ActorCallback< SetBlobRangeActorActor, 3, Void >*>(static_cast<SetBlobRangeActorActor*>(this)));
															#line 65555 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1loopBody1cont6(Standalone<VectorRef<KeyRangeRef>> const& endBlobRanges,int loopDepth) 
	{
															#line 11429 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!endBlobRanges.empty() && endBlobRanges.front().begin < range.end)
															#line 65564 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 11430 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<SetBlobRangeActorActor*>(this)->SAV<bool>::futures) { (void)(false); this->~SetBlobRangeActorActorState(); static_cast<SetBlobRangeActorActor*>(this)->destroy(); return 0; }
															#line 65568 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<SetBlobRangeActorActor*>(this)->SAV< bool >::value()) bool(false);
			this->~SetBlobRangeActorActorState();
			static_cast<SetBlobRangeActorActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
		loopDepth = a_body1cont1loopBody1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont6(Standalone<VectorRef<KeyRangeRef>> && endBlobRanges,int loopDepth) 
	{
															#line 11429 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!endBlobRanges.empty() && endBlobRanges.front().begin < range.end)
															#line 65582 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 11430 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<SetBlobRangeActorActor*>(this)->SAV<bool>::futures) { (void)(false); this->~SetBlobRangeActorActorState(); static_cast<SetBlobRangeActorActor*>(this)->destroy(); return 0; }
															#line 65586 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<SetBlobRangeActorActor*>(this)->SAV< bool >::value()) bool(false);
			this->~SetBlobRangeActorActorState();
			static_cast<SetBlobRangeActorActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
		loopDepth = a_body1cont1loopBody1cont3(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont2when1(Standalone<VectorRef<KeyRangeRef>> const& endBlobRanges,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont6(endBlobRanges, loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont2when1(Standalone<VectorRef<KeyRangeRef>> && endBlobRanges,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont6(std::move(endBlobRanges), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<SetBlobRangeActorActor*>(this)->actor_wait_state > 0) static_cast<SetBlobRangeActorActor*>(this)->actor_wait_state = 0;
		static_cast<SetBlobRangeActorActor*>(this)->ActorCallback< SetBlobRangeActorActor, 2, Standalone<VectorRef<KeyRangeRef>> >::remove();

	}
	void a_callback_fire(ActorCallback< SetBlobRangeActorActor, 2, Standalone<VectorRef<KeyRangeRef>> >*,Standalone<VectorRef<KeyRangeRef>> const& value) 
	{
		fdb_probe_actor_enter("setBlobRangeActor", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont1loopBody1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("setBlobRangeActor", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< SetBlobRangeActorActor, 2, Standalone<VectorRef<KeyRangeRef>> >*,Standalone<VectorRef<KeyRangeRef>> && value) 
	{
		fdb_probe_actor_enter("setBlobRangeActor", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont1loopBody1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("setBlobRangeActor", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< SetBlobRangeActorActor, 2, Standalone<VectorRef<KeyRangeRef>> >*,Error err) 
	{
		fdb_probe_actor_enter("setBlobRangeActor", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("setBlobRangeActor", reinterpret_cast<unsigned long>(this), 2);

	}
	int a_body1cont1loopBody1cont12(Void const& _,int loopDepth) 
	{
															#line 11439 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		tr->getTransaction().atomicOp( addVersionStampAtEnd(blobRangeChangeLogKeys.begin), changeValue, MutationRef::SetVersionstampedKey);
															#line 11441 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_4 = tr->commit();
															#line 11441 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<SetBlobRangeActorActor*>(this)->actor_wait_state < 0) return a_body1cont1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 65667 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1cont1loopBody1Catch1(__when_expr_4.getError(), loopDepth); else return a_body1cont1loopBody1cont12when1(__when_expr_4.get(), loopDepth); };
		static_cast<SetBlobRangeActorActor*>(this)->actor_wait_state = 5;
															#line 11441 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< SetBlobRangeActorActor, 4, Void >*>(static_cast<SetBlobRangeActorActor*>(this)));
															#line 65672 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1loopBody1cont12(Void && _,int loopDepth) 
	{
															#line 11439 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		tr->getTransaction().atomicOp( addVersionStampAtEnd(blobRangeChangeLogKeys.begin), changeValue, MutationRef::SetVersionstampedKey);
															#line 11441 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_4 = tr->commit();
															#line 11441 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<SetBlobRangeActorActor*>(this)->actor_wait_state < 0) return a_body1cont1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 65685 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_4.isReady()) { if (__when_expr_4.isError()) return a_body1cont1loopBody1Catch1(__when_expr_4.getError(), loopDepth); else return a_body1cont1loopBody1cont12when1(__when_expr_4.get(), loopDepth); };
		static_cast<SetBlobRangeActorActor*>(this)->actor_wait_state = 5;
															#line 11441 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_4.addCallbackAndClear(static_cast<ActorCallback< SetBlobRangeActorActor, 4, Void >*>(static_cast<SetBlobRangeActorActor*>(this)));
															#line 65690 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1loopBody1cont3when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont12(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont3when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont12(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose4() 
	{
		if (static_cast<SetBlobRangeActorActor*>(this)->actor_wait_state > 0) static_cast<SetBlobRangeActorActor*>(this)->actor_wait_state = 0;
		static_cast<SetBlobRangeActorActor*>(this)->ActorCallback< SetBlobRangeActorActor, 3, Void >::remove();

	}
	void a_callback_fire(ActorCallback< SetBlobRangeActorActor, 3, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("setBlobRangeActor", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont1loopBody1cont3when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("setBlobRangeActor", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_fire(ActorCallback< SetBlobRangeActorActor, 3, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("setBlobRangeActor", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont1loopBody1cont3when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("setBlobRangeActor", reinterpret_cast<unsigned long>(this), 3);

	}
	void a_callback_error(ActorCallback< SetBlobRangeActorActor, 3, Void >*,Error err) 
	{
		fdb_probe_actor_enter("setBlobRangeActor", reinterpret_cast<unsigned long>(this), 3);
		a_exitChoose4();
		try {
			a_body1cont1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("setBlobRangeActor", reinterpret_cast<unsigned long>(this), 3);

	}
	int a_body1cont1loopBody1cont12cont1(Void const& _,int loopDepth) 
	{
															#line 11442 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<SetBlobRangeActorActor*>(this)->SAV<bool>::futures) { (void)(true); this->~SetBlobRangeActorActorState(); static_cast<SetBlobRangeActorActor*>(this)->destroy(); return 0; }
															#line 65762 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<SetBlobRangeActorActor*>(this)->SAV< bool >::value()) bool(true);
		this->~SetBlobRangeActorActorState();
		static_cast<SetBlobRangeActorActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1loopBody1cont12cont1(Void && _,int loopDepth) 
	{
															#line 11442 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<SetBlobRangeActorActor*>(this)->SAV<bool>::futures) { (void)(true); this->~SetBlobRangeActorActorState(); static_cast<SetBlobRangeActorActor*>(this)->destroy(); return 0; }
															#line 65774 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<SetBlobRangeActorActor*>(this)->SAV< bool >::value()) bool(true);
		this->~SetBlobRangeActorActorState();
		static_cast<SetBlobRangeActorActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1loopBody1cont12when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont12cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont12when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont12cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose5() 
	{
		if (static_cast<SetBlobRangeActorActor*>(this)->actor_wait_state > 0) static_cast<SetBlobRangeActorActor*>(this)->actor_wait_state = 0;
		static_cast<SetBlobRangeActorActor*>(this)->ActorCallback< SetBlobRangeActorActor, 4, Void >::remove();

	}
	void a_callback_fire(ActorCallback< SetBlobRangeActorActor, 4, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("setBlobRangeActor", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont1loopBody1cont12when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("setBlobRangeActor", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_fire(ActorCallback< SetBlobRangeActorActor, 4, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("setBlobRangeActor", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont1loopBody1cont12when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("setBlobRangeActor", reinterpret_cast<unsigned long>(this), 4);

	}
	void a_callback_error(ActorCallback< SetBlobRangeActorActor, 4, Void >*,Error err) 
	{
		fdb_probe_actor_enter("setBlobRangeActor", reinterpret_cast<unsigned long>(this), 4);
		a_exitChoose5();
		try {
			a_body1cont1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("setBlobRangeActor", reinterpret_cast<unsigned long>(this), 4);

	}
	int a_body1cont1loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose6() 
	{
		if (static_cast<SetBlobRangeActorActor*>(this)->actor_wait_state > 0) static_cast<SetBlobRangeActorActor*>(this)->actor_wait_state = 0;
		static_cast<SetBlobRangeActorActor*>(this)->ActorCallback< SetBlobRangeActorActor, 5, Void >::remove();

	}
	void a_callback_fire(ActorCallback< SetBlobRangeActorActor, 5, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("setBlobRangeActor", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1cont1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("setBlobRangeActor", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_fire(ActorCallback< SetBlobRangeActorActor, 5, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("setBlobRangeActor", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1cont1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("setBlobRangeActor", reinterpret_cast<unsigned long>(this), 5);

	}
	void a_callback_error(ActorCallback< SetBlobRangeActorActor, 5, Void >*,Error err) 
	{
		fdb_probe_actor_enter("setBlobRangeActor", reinterpret_cast<unsigned long>(this), 5);
		a_exitChoose6();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("setBlobRangeActor", reinterpret_cast<unsigned long>(this), 5);

	}
															#line 11382 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<DatabaseContext> cx;
															#line 11382 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeyRange range;
															#line 11382 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	bool active;
															#line 11382 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Optional<Reference<Tenant>> tenant;
															#line 11386 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Database db;
															#line 11387 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 11394 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Value value;
															#line 11402 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Value changeValue;
															#line 65936 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via setBlobRangeActor()
															#line 11382 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class SetBlobRangeActorActor final : public Actor<bool>, public ActorCallback< SetBlobRangeActorActor, 0, Void >, public ActorCallback< SetBlobRangeActorActor, 1, Standalone<VectorRef<KeyRangeRef>> >, public ActorCallback< SetBlobRangeActorActor, 2, Standalone<VectorRef<KeyRangeRef>> >, public ActorCallback< SetBlobRangeActorActor, 3, Void >, public ActorCallback< SetBlobRangeActorActor, 4, Void >, public ActorCallback< SetBlobRangeActorActor, 5, Void >, public FastAllocated<SetBlobRangeActorActor>, public SetBlobRangeActorActorState<SetBlobRangeActorActor> {
															#line 65941 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<SetBlobRangeActorActor>::operator new;
	using FastAllocated<SetBlobRangeActorActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<bool>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< SetBlobRangeActorActor, 0, Void >;
friend struct ActorCallback< SetBlobRangeActorActor, 1, Standalone<VectorRef<KeyRangeRef>> >;
friend struct ActorCallback< SetBlobRangeActorActor, 2, Standalone<VectorRef<KeyRangeRef>> >;
friend struct ActorCallback< SetBlobRangeActorActor, 3, Void >;
friend struct ActorCallback< SetBlobRangeActorActor, 4, Void >;
friend struct ActorCallback< SetBlobRangeActorActor, 5, Void >;
															#line 11382 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	SetBlobRangeActorActor(Reference<DatabaseContext> const& cx,KeyRange const& range,bool const& active,Optional<Reference<Tenant>> const& tenant) 
															#line 65957 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<bool>(),
		   SetBlobRangeActorActorState<SetBlobRangeActorActor>(cx, range, active, tenant)
	{
		fdb_probe_actor_enter("setBlobRangeActor", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("setBlobRangeActor");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("setBlobRangeActor", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< SetBlobRangeActorActor, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< SetBlobRangeActorActor, 1, Standalone<VectorRef<KeyRangeRef>> >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< SetBlobRangeActorActor, 2, Standalone<VectorRef<KeyRangeRef>> >*)0, actor_cancelled()); break;
		case 4: this->a_callback_error((ActorCallback< SetBlobRangeActorActor, 3, Void >*)0, actor_cancelled()); break;
		case 5: this->a_callback_error((ActorCallback< SetBlobRangeActorActor, 4, Void >*)0, actor_cancelled()); break;
		case 6: this->a_callback_error((ActorCallback< SetBlobRangeActorActor, 5, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 11382 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<bool> setBlobRangeActor( Reference<DatabaseContext> const& cx, KeyRange const& range, bool const& active, Optional<Reference<Tenant>> const& tenant ) {
															#line 11382 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<bool>(new SetBlobRangeActorActor(cx, range, active, tenant));
															#line 65990 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 11448 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

															#line 65995 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via blobbifyRangeActor()
															#line 11449 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class BlobbifyRangeActorActor>
															#line 11449 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class BlobbifyRangeActorActorState {
															#line 66002 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 11449 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	BlobbifyRangeActorActorState(Reference<DatabaseContext> const& cx,KeyRange const& range,bool const& doWait,Optional<Reference<Tenant>> const& tenant) 
															#line 11449 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 11449 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : cx(cx),
															#line 11449 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   range(range),
															#line 11449 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   doWait(doWait),
															#line 11449 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   tenant(tenant)
															#line 66015 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("blobbifyRangeActor", reinterpret_cast<unsigned long>(this));

	}
	~BlobbifyRangeActorActorState() 
	{
		fdb_probe_actor_destroy("blobbifyRangeActor", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 11453 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (BG_REQUEST_DEBUG)
															#line 66030 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 11454 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				fmt::print("BlobbifyRange [{0} - {1}) ({2})\n", range.begin.printable(), range.end.printable(), doWait);
															#line 66034 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 11456 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<bool> __when_expr_0 = setBlobRangeActor(cx, range, true, tenant);
															#line 11456 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<BlobbifyRangeActorActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 66040 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<BlobbifyRangeActorActor*>(this)->actor_wait_state = 1;
															#line 11456 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< BlobbifyRangeActorActor, 0, bool >*>(static_cast<BlobbifyRangeActorActor*>(this)));
															#line 66045 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~BlobbifyRangeActorActorState();
		static_cast<BlobbifyRangeActorActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 11457 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!doWait || !result)
															#line 66068 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 11458 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<BlobbifyRangeActorActor*>(this)->SAV<bool>::futures) { (void)(result); this->~BlobbifyRangeActorActorState(); static_cast<BlobbifyRangeActorActor*>(this)->destroy(); return 0; }
															#line 66072 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<BlobbifyRangeActorActor*>(this)->SAV< bool >::value()) bool(std::move(result)); // state_var_RVO
			this->~BlobbifyRangeActorActorState();
			static_cast<BlobbifyRangeActorActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 11461 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		;
															#line 66080 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont1loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1when1(bool const& __result,int loopDepth) 
	{
															#line 11456 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		result = __result;
															#line 66089 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1when1(bool && __result,int loopDepth) 
	{
		result = std::move(__result);
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<BlobbifyRangeActorActor*>(this)->actor_wait_state > 0) static_cast<BlobbifyRangeActorActor*>(this)->actor_wait_state = 0;
		static_cast<BlobbifyRangeActorActor*>(this)->ActorCallback< BlobbifyRangeActorActor, 0, bool >::remove();

	}
	void a_callback_fire(ActorCallback< BlobbifyRangeActorActor, 0, bool >*,bool const& value) 
	{
		fdb_probe_actor_enter("blobbifyRangeActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("blobbifyRangeActor", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< BlobbifyRangeActorActor, 0, bool >*,bool && value) 
	{
		fdb_probe_actor_enter("blobbifyRangeActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("blobbifyRangeActor", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< BlobbifyRangeActorActor, 0, bool >*,Error err) 
	{
		fdb_probe_actor_enter("blobbifyRangeActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("blobbifyRangeActor", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1cont1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1(int loopDepth) 
	{
															#line 11462 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Version> __when_expr_1 = cx->verifyBlobRange(range, latestVersion, tenant);
															#line 11462 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<BlobbifyRangeActorActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 66165 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1Catch1(__when_expr_1.getError(), std::max(0, loopDepth - 1)); else return a_body1cont1loopBody1when1(__when_expr_1.get(), loopDepth); };
		static_cast<BlobbifyRangeActorActor*>(this)->actor_wait_state = 2;
															#line 11462 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< BlobbifyRangeActorActor, 1, Version >*>(static_cast<BlobbifyRangeActorActor*>(this)));
															#line 66170 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1(Version const& verifyVersion,int loopDepth) 
	{
															#line 11463 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (verifyVersion != invalidVersion)
															#line 66179 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 11464 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (BG_REQUEST_DEBUG)
															#line 66183 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 11465 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				fmt::print("BlobbifyRange [{0} - {1}) got complete @ {2}\n", range.begin.printable(), range.end.printable(), verifyVersion);
															#line 66187 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 11470 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<BlobbifyRangeActorActor*>(this)->SAV<bool>::futures) { (void)(result); this->~BlobbifyRangeActorActorState(); static_cast<BlobbifyRangeActorActor*>(this)->destroy(); return 0; }
															#line 66191 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<BlobbifyRangeActorActor*>(this)->SAV< bool >::value()) bool(std::move(result)); // state_var_RVO
			this->~BlobbifyRangeActorActorState();
			static_cast<BlobbifyRangeActorActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 11472 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_2 = delay(0.1);
															#line 11472 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<BlobbifyRangeActorActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 66201 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), std::max(0, loopDepth - 1)); else return a_body1cont1loopBody1cont1when1(__when_expr_2.get(), loopDepth); };
		static_cast<BlobbifyRangeActorActor*>(this)->actor_wait_state = 3;
															#line 11472 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< BlobbifyRangeActorActor, 2, Void >*>(static_cast<BlobbifyRangeActorActor*>(this)));
															#line 66206 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1(Version && verifyVersion,int loopDepth) 
	{
															#line 11463 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (verifyVersion != invalidVersion)
															#line 66215 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 11464 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (BG_REQUEST_DEBUG)
															#line 66219 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 11465 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				fmt::print("BlobbifyRange [{0} - {1}) got complete @ {2}\n", range.begin.printable(), range.end.printable(), verifyVersion);
															#line 66223 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			}
															#line 11470 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<BlobbifyRangeActorActor*>(this)->SAV<bool>::futures) { (void)(result); this->~BlobbifyRangeActorActorState(); static_cast<BlobbifyRangeActorActor*>(this)->destroy(); return 0; }
															#line 66227 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<BlobbifyRangeActorActor*>(this)->SAV< bool >::value()) bool(std::move(result)); // state_var_RVO
			this->~BlobbifyRangeActorActorState();
			static_cast<BlobbifyRangeActorActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 11472 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_2 = delay(0.1);
															#line 11472 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<BlobbifyRangeActorActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 66237 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), std::max(0, loopDepth - 1)); else return a_body1cont1loopBody1cont1when1(__when_expr_2.get(), loopDepth); };
		static_cast<BlobbifyRangeActorActor*>(this)->actor_wait_state = 3;
															#line 11472 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< BlobbifyRangeActorActor, 2, Void >*>(static_cast<BlobbifyRangeActorActor*>(this)));
															#line 66242 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1loopBody1when1(Version const& verifyVersion,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont1(verifyVersion, loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1when1(Version && verifyVersion,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont1(std::move(verifyVersion), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<BlobbifyRangeActorActor*>(this)->actor_wait_state > 0) static_cast<BlobbifyRangeActorActor*>(this)->actor_wait_state = 0;
		static_cast<BlobbifyRangeActorActor*>(this)->ActorCallback< BlobbifyRangeActorActor, 1, Version >::remove();

	}
	void a_callback_fire(ActorCallback< BlobbifyRangeActorActor, 1, Version >*,Version const& value) 
	{
		fdb_probe_actor_enter("blobbifyRangeActor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("blobbifyRangeActor", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< BlobbifyRangeActorActor, 1, Version >*,Version && value) 
	{
		fdb_probe_actor_enter("blobbifyRangeActor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("blobbifyRangeActor", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< BlobbifyRangeActorActor, 1, Version >*,Error err) 
	{
		fdb_probe_actor_enter("blobbifyRangeActor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("blobbifyRangeActor", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont1loopBody1cont2(Void const& _,int loopDepth) 
	{
		if (loopDepth == 0) return a_body1cont1loopHead1(0);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont2(Void && _,int loopDepth) 
	{
		if (loopDepth == 0) return a_body1cont1loopHead1(0);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<BlobbifyRangeActorActor*>(this)->actor_wait_state > 0) static_cast<BlobbifyRangeActorActor*>(this)->actor_wait_state = 0;
		static_cast<BlobbifyRangeActorActor*>(this)->ActorCallback< BlobbifyRangeActorActor, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< BlobbifyRangeActorActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("blobbifyRangeActor", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont1loopBody1cont1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("blobbifyRangeActor", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< BlobbifyRangeActorActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("blobbifyRangeActor", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont1loopBody1cont1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("blobbifyRangeActor", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< BlobbifyRangeActorActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("blobbifyRangeActor", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("blobbifyRangeActor", reinterpret_cast<unsigned long>(this), 2);

	}
															#line 11449 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<DatabaseContext> cx;
															#line 11449 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeyRange range;
															#line 11449 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	bool doWait;
															#line 11449 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Optional<Reference<Tenant>> tenant;
															#line 11456 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	bool result;
															#line 66395 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via blobbifyRangeActor()
															#line 11449 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class BlobbifyRangeActorActor final : public Actor<bool>, public ActorCallback< BlobbifyRangeActorActor, 0, bool >, public ActorCallback< BlobbifyRangeActorActor, 1, Version >, public ActorCallback< BlobbifyRangeActorActor, 2, Void >, public FastAllocated<BlobbifyRangeActorActor>, public BlobbifyRangeActorActorState<BlobbifyRangeActorActor> {
															#line 66400 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<BlobbifyRangeActorActor>::operator new;
	using FastAllocated<BlobbifyRangeActorActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<bool>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< BlobbifyRangeActorActor, 0, bool >;
friend struct ActorCallback< BlobbifyRangeActorActor, 1, Version >;
friend struct ActorCallback< BlobbifyRangeActorActor, 2, Void >;
															#line 11449 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	BlobbifyRangeActorActor(Reference<DatabaseContext> const& cx,KeyRange const& range,bool const& doWait,Optional<Reference<Tenant>> const& tenant) 
															#line 66413 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<bool>(),
		   BlobbifyRangeActorActorState<BlobbifyRangeActorActor>(cx, range, doWait, tenant)
	{
		fdb_probe_actor_enter("blobbifyRangeActor", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("blobbifyRangeActor");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("blobbifyRangeActor", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< BlobbifyRangeActorActor, 0, bool >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< BlobbifyRangeActorActor, 1, Version >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< BlobbifyRangeActorActor, 2, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 11449 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<bool> blobbifyRangeActor( Reference<DatabaseContext> const& cx, KeyRange const& range, bool const& doWait, Optional<Reference<Tenant>> const& tenant ) {
															#line 11449 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<bool>(new BlobbifyRangeActorActor(cx, range, doWait, tenant));
															#line 66443 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 11475 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

Future<bool> DatabaseContext::blobbifyRange(KeyRange range, Optional<Reference<Tenant>> tenant) {
	return blobbifyRangeActor(Reference<DatabaseContext>::addRef(this), range, false, tenant);
}

Future<bool> DatabaseContext::blobbifyRangeBlocking(KeyRange range, Optional<Reference<Tenant>> tenant) {
	return blobbifyRangeActor(Reference<DatabaseContext>::addRef(this), range, true, tenant);
}

Future<bool> DatabaseContext::unblobbifyRange(KeyRange range, Optional<Reference<Tenant>> tenant) {
	return setBlobRangeActor(Reference<DatabaseContext>::addRef(this), range, false, tenant);
}

															#line 66460 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via listBlobbifiedRangesActor()
															#line 11488 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class ListBlobbifiedRangesActorActor>
															#line 11488 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class ListBlobbifiedRangesActorActorState {
															#line 66467 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 11488 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	ListBlobbifiedRangesActorActorState(Reference<DatabaseContext> const& cx,KeyRange const& range,int const& rangeLimit,Optional<Reference<Tenant>> const& tenant) 
															#line 11488 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 11488 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : cx(cx),
															#line 11488 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   range(range),
															#line 11488 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   rangeLimit(rangeLimit),
															#line 11488 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   tenant(tenant),
															#line 11493 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   db(cx),
															#line 11494 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   tr(db),
															#line 11495 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   tenantPrefix(),
															#line 11496 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   blobRanges()
															#line 66488 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("listBlobbifiedRangesActor", reinterpret_cast<unsigned long>(this));

	}
	~ListBlobbifiedRangesActorActorState() 
	{
		fdb_probe_actor_destroy("listBlobbifiedRangesActor", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 11498 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (tenant.present())
															#line 66503 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 11499 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				StrictFuture<Void> __when_expr_0 = tenant.get()->ready();
															#line 11499 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (static_cast<ListBlobbifiedRangesActorActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 66509 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
				static_cast<ListBlobbifiedRangesActorActor*>(this)->actor_wait_state = 1;
															#line 11499 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< ListBlobbifiedRangesActorActor, 0, Void >*>(static_cast<ListBlobbifiedRangesActorActor*>(this)));
															#line 66514 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				loopDepth = 0;
			}
			else
			{
				loopDepth = a_body1cont1(loopDepth);
			}
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~ListBlobbifiedRangesActorActorState();
		static_cast<ListBlobbifiedRangesActorActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(int loopDepth) 
	{
															#line 11504 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		;
															#line 66542 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont1loopHead1(loopDepth);

		return loopDepth;
	}
	int a_body1cont2(Void const& _,int loopDepth) 
	{
															#line 11500 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		tenantPrefix = tenant.get()->prefix();
															#line 11501 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		range = range.withPrefix(tenantPrefix);
															#line 66553 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont2(Void && _,int loopDepth) 
	{
															#line 11500 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		tenantPrefix = tenant.get()->prefix();
															#line 11501 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		range = range.withPrefix(tenantPrefix);
															#line 66564 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = a_body1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<ListBlobbifiedRangesActorActor*>(this)->actor_wait_state > 0) static_cast<ListBlobbifiedRangesActorActor*>(this)->actor_wait_state = 0;
		static_cast<ListBlobbifiedRangesActorActor*>(this)->ActorCallback< ListBlobbifiedRangesActorActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< ListBlobbifiedRangesActorActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("listBlobbifiedRangesActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("listBlobbifiedRangesActor", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< ListBlobbifiedRangesActorActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("listBlobbifiedRangesActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("listBlobbifiedRangesActor", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< ListBlobbifiedRangesActorActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("listBlobbifiedRangesActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("listBlobbifiedRangesActor", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1cont4(int loopDepth) 
	{
															#line 11513 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!tenant.present())
															#line 66636 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 11514 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<ListBlobbifiedRangesActorActor*>(this)->SAV<Standalone<VectorRef<KeyRangeRef>>>::futures) { (void)(blobRanges); this->~ListBlobbifiedRangesActorActorState(); static_cast<ListBlobbifiedRangesActorActor*>(this)->destroy(); return 0; }
															#line 66640 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<ListBlobbifiedRangesActorActor*>(this)->SAV< Standalone<VectorRef<KeyRangeRef>> >::value()) Standalone<VectorRef<KeyRangeRef>>(std::move(blobRanges)); // state_var_RVO
			this->~ListBlobbifiedRangesActorActorState();
			static_cast<ListBlobbifiedRangesActorActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
															#line 11518 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		tenantBlobRanges = Standalone<VectorRef<KeyRangeRef>>();
															#line 11519 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for( auto& blobRange : blobRanges ) {
															#line 11521 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!blobRange.begin.startsWith(tenantPrefix) || !blobRange.end.startsWith(tenantPrefix))
															#line 66652 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 11522 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				TraceEvent("ListBlobbifiedRangeSpansTenants") .suppressFor( 5) .detail("Tenant", tenant) .detail("Range", blobRange);
															#line 66656 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				continue;
			}
															#line 11528 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tenantBlobRanges.push_back_deep(tenantBlobRanges.arena(), blobRange.removePrefix(tenantPrefix));
															#line 66661 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 11530 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<ListBlobbifiedRangesActorActor*>(this)->SAV<Standalone<VectorRef<KeyRangeRef>>>::futures) { (void)(tenantBlobRanges); this->~ListBlobbifiedRangesActorActorState(); static_cast<ListBlobbifiedRangesActorActor*>(this)->destroy(); return 0; }
															#line 66665 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<ListBlobbifiedRangesActorActor*>(this)->SAV< Standalone<VectorRef<KeyRangeRef>> >::value()) Standalone<VectorRef<KeyRangeRef>>(std::move(tenantBlobRanges)); // state_var_RVO
		this->~ListBlobbifiedRangesActorActorState();
		static_cast<ListBlobbifiedRangesActorActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1cont1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1(int loopDepth) 
	{
		try {
															#line 11506 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_1 = store(blobRanges, getBlobRanges(&tr, range, rangeLimit));
															#line 11506 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<ListBlobbifiedRangesActorActor*>(this)->actor_wait_state < 0) return a_body1cont1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 66687 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1cont1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1cont1loopBody1when1(__when_expr_1.get(), loopDepth); };
			static_cast<ListBlobbifiedRangesActorActor*>(this)->actor_wait_state = 2;
															#line 11506 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< ListBlobbifiedRangesActorActor, 1, Void >*>(static_cast<ListBlobbifiedRangesActorActor*>(this)));
															#line 66692 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1cont1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1cont1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont1break1(int loopDepth) 
	{
		try {
			return a_body1cont4(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1cont1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1cont1loopHead1(0);

		return loopDepth;
	}
	int a_body1cont1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 11509 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_2 = tr.onError(e);
															#line 11509 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<ListBlobbifiedRangesActorActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 66729 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), std::max(0, loopDepth - 1)); else return a_body1cont1loopBody1Catch1when1(__when_expr_2.get(), loopDepth); };
			static_cast<ListBlobbifiedRangesActorActor*>(this)->actor_wait_state = 3;
															#line 11509 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< ListBlobbifiedRangesActorActor, 2, Void >*>(static_cast<ListBlobbifiedRangesActorActor*>(this)));
															#line 66734 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1cont1loopBody1cont2(Void const& _,int loopDepth) 
	{
		return a_body1cont1break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1cont1loopBody1cont2(Void && _,int loopDepth) 
	{
		return a_body1cont1break1(loopDepth==0?0:loopDepth-1); // break

		return loopDepth;
	}
	int a_body1cont1loopBody1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont2(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont2(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<ListBlobbifiedRangesActorActor*>(this)->actor_wait_state > 0) static_cast<ListBlobbifiedRangesActorActor*>(this)->actor_wait_state = 0;
		static_cast<ListBlobbifiedRangesActorActor*>(this)->ActorCallback< ListBlobbifiedRangesActorActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< ListBlobbifiedRangesActorActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("listBlobbifiedRangesActor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("listBlobbifiedRangesActor", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< ListBlobbifiedRangesActorActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("listBlobbifiedRangesActor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("listBlobbifiedRangesActor", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< ListBlobbifiedRangesActorActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("listBlobbifiedRangesActor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1cont1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1cont1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1cont1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("listBlobbifiedRangesActor", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1cont1loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1cont1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<ListBlobbifiedRangesActorActor*>(this)->actor_wait_state > 0) static_cast<ListBlobbifiedRangesActorActor*>(this)->actor_wait_state = 0;
		static_cast<ListBlobbifiedRangesActorActor*>(this)->ActorCallback< ListBlobbifiedRangesActorActor, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< ListBlobbifiedRangesActorActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("listBlobbifiedRangesActor", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("listBlobbifiedRangesActor", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< ListBlobbifiedRangesActorActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("listBlobbifiedRangesActor", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1cont1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("listBlobbifiedRangesActor", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< ListBlobbifiedRangesActorActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("listBlobbifiedRangesActor", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("listBlobbifiedRangesActor", reinterpret_cast<unsigned long>(this), 2);

	}
															#line 11488 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<DatabaseContext> cx;
															#line 11488 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeyRange range;
															#line 11488 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	int rangeLimit;
															#line 11488 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Optional<Reference<Tenant>> tenant;
															#line 11493 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Database db;
															#line 11494 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Transaction tr;
															#line 11495 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeyRef tenantPrefix;
															#line 11496 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Standalone<VectorRef<KeyRangeRef>> blobRanges;
															#line 11518 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Standalone<VectorRef<KeyRangeRef>> tenantBlobRanges;
															#line 66913 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via listBlobbifiedRangesActor()
															#line 11488 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class ListBlobbifiedRangesActorActor final : public Actor<Standalone<VectorRef<KeyRangeRef>>>, public ActorCallback< ListBlobbifiedRangesActorActor, 0, Void >, public ActorCallback< ListBlobbifiedRangesActorActor, 1, Void >, public ActorCallback< ListBlobbifiedRangesActorActor, 2, Void >, public FastAllocated<ListBlobbifiedRangesActorActor>, public ListBlobbifiedRangesActorActorState<ListBlobbifiedRangesActorActor> {
															#line 66918 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<ListBlobbifiedRangesActorActor>::operator new;
	using FastAllocated<ListBlobbifiedRangesActorActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Standalone<VectorRef<KeyRangeRef>>>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< ListBlobbifiedRangesActorActor, 0, Void >;
friend struct ActorCallback< ListBlobbifiedRangesActorActor, 1, Void >;
friend struct ActorCallback< ListBlobbifiedRangesActorActor, 2, Void >;
															#line 11488 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	ListBlobbifiedRangesActorActor(Reference<DatabaseContext> const& cx,KeyRange const& range,int const& rangeLimit,Optional<Reference<Tenant>> const& tenant) 
															#line 66931 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Standalone<VectorRef<KeyRangeRef>>>(),
		   ListBlobbifiedRangesActorActorState<ListBlobbifiedRangesActorActor>(cx, range, rangeLimit, tenant)
	{
		fdb_probe_actor_enter("listBlobbifiedRangesActor", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("listBlobbifiedRangesActor");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("listBlobbifiedRangesActor", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< ListBlobbifiedRangesActorActor, 0, Void >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< ListBlobbifiedRangesActorActor, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< ListBlobbifiedRangesActorActor, 2, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 11488 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<Standalone<VectorRef<KeyRangeRef>>> listBlobbifiedRangesActor( Reference<DatabaseContext> const& cx, KeyRange const& range, int const& rangeLimit, Optional<Reference<Tenant>> const& tenant ) {
															#line 11488 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Standalone<VectorRef<KeyRangeRef>>>(new ListBlobbifiedRangesActorActor(cx, range, rangeLimit, tenant));
															#line 66961 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 11532 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

Future<Standalone<VectorRef<KeyRangeRef>>> DatabaseContext::listBlobbifiedRanges(KeyRange range,
                                                                                 int rangeLimit,
                                                                                 Optional<Reference<Tenant>> tenant) {
	return listBlobbifiedRangesActor(Reference<DatabaseContext>::addRef(this), range, rangeLimit, tenant);
}

															#line 66972 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via blobRestoreActor()
															#line 11539 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class BlobRestoreActorActor>
															#line 11539 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class BlobRestoreActorActorState {
															#line 66979 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 11539 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	BlobRestoreActorActorState(Reference<DatabaseContext> const& cx,KeyRange const& range,Optional<Version> const& version) 
															#line 11539 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 11539 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : cx(cx),
															#line 11539 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   range(range),
															#line 11539 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   version(version),
															#line 11540 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   db(cx),
															#line 11541 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   tr(makeReference<ReadYourWritesTransaction>(db))
															#line 66994 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("blobRestoreActor", reinterpret_cast<unsigned long>(this));

	}
	~BlobRestoreActorActorState() 
	{
		fdb_probe_actor_destroy("blobRestoreActor", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 11542 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			;
															#line 67009 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = a_body1loopHead1(loopDepth);
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~BlobRestoreActorActorState();
		static_cast<BlobRestoreActorActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopHead1(int loopDepth) 
	{
		int oldLoopDepth = ++loopDepth;
		while (loopDepth == oldLoopDepth) loopDepth = a_body1loopBody1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1(int loopDepth) 
	{
		try {
															#line 11544 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tr->setOption(FDBTransactionOptions::ACCESS_SYSTEM_KEYS);
															#line 11545 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tr->setOption(FDBTransactionOptions::PRIORITY_SYSTEM_IMMEDIATE);
															#line 11546 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			tr->setOption(FDBTransactionOptions::LOCK_AWARE);
															#line 11547 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			key = blobRestoreCommandKeyFor(range);
															#line 11548 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Optional<Value>> __when_expr_0 = tr->get(key);
															#line 11548 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<BlobRestoreActorActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 67050 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1loopBody1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1loopBody1when1(__when_expr_0.get(), loopDepth); };
			static_cast<BlobRestoreActorActor*>(this)->actor_wait_state = 1;
															#line 11548 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< BlobRestoreActorActor, 0, Optional<Value> >*>(static_cast<BlobRestoreActorActor*>(this)));
															#line 67055 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1loopBody1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1loopBody1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1loopBody1cont1(int loopDepth) 
	{
		if (loopDepth == 0) return a_body1loopHead1(0);

		return loopDepth;
	}
	int a_body1loopBody1Catch1(const Error& e,int loopDepth=0) 
	{
		try {
															#line 11566 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_2 = tr->onError(e);
															#line 11566 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<BlobRestoreActorActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), std::max(0, loopDepth - 1));
															#line 67079 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_2.isReady()) { if (__when_expr_2.isError()) return a_body1Catch1(__when_expr_2.getError(), std::max(0, loopDepth - 1)); else return a_body1loopBody1Catch1when1(__when_expr_2.get(), loopDepth); };
			static_cast<BlobRestoreActorActor*>(this)->actor_wait_state = 3;
															#line 11566 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_2.addCallbackAndClear(static_cast<ActorCallback< BlobRestoreActorActor, 2, Void >*>(static_cast<BlobRestoreActorActor*>(this)));
															#line 67084 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, std::max(0, loopDepth - 1));
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), std::max(0, loopDepth - 1));
		}

		return loopDepth;
	}
	int a_body1loopBody1cont2(Optional<Value> const& value,int loopDepth) 
	{
															#line 11549 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (value.present())
															#line 67099 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 11550 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			Standalone<BlobRestoreState> restoreState = decodeBlobRestoreState(value.get());
															#line 11551 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (restoreState.phase < BlobRestorePhase::DONE)
															#line 67105 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 11552 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (!static_cast<BlobRestoreActorActor*>(this)->SAV<bool>::futures) { (void)(false); this->~BlobRestoreActorActorState(); static_cast<BlobRestoreActorActor*>(this)->destroy(); return 0; }
															#line 67109 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				new (&static_cast<BlobRestoreActorActor*>(this)->SAV< bool >::value()) bool(false);
				this->~BlobRestoreActorActorState();
				static_cast<BlobRestoreActorActor*>(this)->finishSendAndDelPromiseRef();
				return 0;
			}
		}
															#line 11555 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		BlobRestoreState restoreState(BlobRestorePhase::INIT);
															#line 11556 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		Value newValue = blobRestoreCommandValueFor(restoreState);
															#line 11557 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		tr->set(key, newValue);
															#line 11559 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		BlobRestoreArg arg(version);
															#line 11560 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		Value argValue = blobRestoreArgValueFor(arg);
															#line 11561 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		tr->set(blobRestoreArgKeyFor(range), argValue);
															#line 11563 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_1 = tr->commit();
															#line 11563 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<BlobRestoreActorActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 67132 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
		static_cast<BlobRestoreActorActor*>(this)->actor_wait_state = 2;
															#line 11563 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< BlobRestoreActorActor, 1, Void >*>(static_cast<BlobRestoreActorActor*>(this)));
															#line 67137 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2(Optional<Value> && value,int loopDepth) 
	{
															#line 11549 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (value.present())
															#line 67146 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 11550 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			Standalone<BlobRestoreState> restoreState = decodeBlobRestoreState(value.get());
															#line 11551 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (restoreState.phase < BlobRestorePhase::DONE)
															#line 67152 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			{
															#line 11552 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
				if (!static_cast<BlobRestoreActorActor*>(this)->SAV<bool>::futures) { (void)(false); this->~BlobRestoreActorActorState(); static_cast<BlobRestoreActorActor*>(this)->destroy(); return 0; }
															#line 67156 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
				new (&static_cast<BlobRestoreActorActor*>(this)->SAV< bool >::value()) bool(false);
				this->~BlobRestoreActorActorState();
				static_cast<BlobRestoreActorActor*>(this)->finishSendAndDelPromiseRef();
				return 0;
			}
		}
															#line 11555 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		BlobRestoreState restoreState(BlobRestorePhase::INIT);
															#line 11556 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		Value newValue = blobRestoreCommandValueFor(restoreState);
															#line 11557 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		tr->set(key, newValue);
															#line 11559 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		BlobRestoreArg arg(version);
															#line 11560 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		Value argValue = blobRestoreArgValueFor(arg);
															#line 11561 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		tr->set(blobRestoreArgKeyFor(range), argValue);
															#line 11563 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		StrictFuture<Void> __when_expr_1 = tr->commit();
															#line 11563 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (static_cast<BlobRestoreActorActor*>(this)->actor_wait_state < 0) return a_body1loopBody1Catch1(actor_cancelled(), loopDepth);
															#line 67179 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		if (__when_expr_1.isReady()) { if (__when_expr_1.isError()) return a_body1loopBody1Catch1(__when_expr_1.getError(), loopDepth); else return a_body1loopBody1cont2when1(__when_expr_1.get(), loopDepth); };
		static_cast<BlobRestoreActorActor*>(this)->actor_wait_state = 2;
															#line 11563 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		__when_expr_1.addCallbackAndClear(static_cast<ActorCallback< BlobRestoreActorActor, 1, Void >*>(static_cast<BlobRestoreActorActor*>(this)));
															#line 67184 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1loopBody1when1(Optional<Value> const& value,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(value, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1when1(Optional<Value> && value,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont2(std::move(value), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<BlobRestoreActorActor*>(this)->actor_wait_state > 0) static_cast<BlobRestoreActorActor*>(this)->actor_wait_state = 0;
		static_cast<BlobRestoreActorActor*>(this)->ActorCallback< BlobRestoreActorActor, 0, Optional<Value> >::remove();

	}
	void a_callback_fire(ActorCallback< BlobRestoreActorActor, 0, Optional<Value> >*,Optional<Value> const& value) 
	{
		fdb_probe_actor_enter("blobRestoreActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("blobRestoreActor", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< BlobRestoreActorActor, 0, Optional<Value> >*,Optional<Value> && value) 
	{
		fdb_probe_actor_enter("blobRestoreActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("blobRestoreActor", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< BlobRestoreActorActor, 0, Optional<Value> >*,Error err) 
	{
		fdb_probe_actor_enter("blobRestoreActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("blobRestoreActor", reinterpret_cast<unsigned long>(this), 0);

	}
	int a_body1loopBody1cont3(Void const& _,int loopDepth) 
	{
															#line 11564 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<BlobRestoreActorActor*>(this)->SAV<bool>::futures) { (void)(true); this->~BlobRestoreActorActorState(); static_cast<BlobRestoreActorActor*>(this)->destroy(); return 0; }
															#line 67256 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<BlobRestoreActorActor*>(this)->SAV< bool >::value()) bool(true);
		this->~BlobRestoreActorActorState();
		static_cast<BlobRestoreActorActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1cont3(Void && _,int loopDepth) 
	{
															#line 11564 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<BlobRestoreActorActor*>(this)->SAV<bool>::futures) { (void)(true); this->~BlobRestoreActorActorState(); static_cast<BlobRestoreActorActor*>(this)->destroy(); return 0; }
															#line 67268 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<BlobRestoreActorActor*>(this)->SAV< bool >::value()) bool(true);
		this->~BlobRestoreActorActorState();
		static_cast<BlobRestoreActorActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1cont2when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont3(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose2() 
	{
		if (static_cast<BlobRestoreActorActor*>(this)->actor_wait_state > 0) static_cast<BlobRestoreActorActor*>(this)->actor_wait_state = 0;
		static_cast<BlobRestoreActorActor*>(this)->ActorCallback< BlobRestoreActorActor, 1, Void >::remove();

	}
	void a_callback_fire(ActorCallback< BlobRestoreActorActor, 1, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("blobRestoreActor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(value, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("blobRestoreActor", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_fire(ActorCallback< BlobRestoreActorActor, 1, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("blobRestoreActor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1cont2when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("blobRestoreActor", reinterpret_cast<unsigned long>(this), 1);

	}
	void a_callback_error(ActorCallback< BlobRestoreActorActor, 1, Void >*,Error err) 
	{
		fdb_probe_actor_enter("blobRestoreActor", reinterpret_cast<unsigned long>(this), 1);
		a_exitChoose2();
		try {
			a_body1loopBody1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1loopBody1Catch1(error, 0);
		} catch (...) {
			a_body1loopBody1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("blobRestoreActor", reinterpret_cast<unsigned long>(this), 1);

	}
	int a_body1loopBody1Catch1cont1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1cont1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1cont1(loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1loopBody1Catch1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1loopBody1Catch1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose3() 
	{
		if (static_cast<BlobRestoreActorActor*>(this)->actor_wait_state > 0) static_cast<BlobRestoreActorActor*>(this)->actor_wait_state = 0;
		static_cast<BlobRestoreActorActor*>(this)->ActorCallback< BlobRestoreActorActor, 2, Void >::remove();

	}
	void a_callback_fire(ActorCallback< BlobRestoreActorActor, 2, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("blobRestoreActor", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1Catch1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("blobRestoreActor", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_fire(ActorCallback< BlobRestoreActorActor, 2, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("blobRestoreActor", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1loopBody1Catch1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("blobRestoreActor", reinterpret_cast<unsigned long>(this), 2);

	}
	void a_callback_error(ActorCallback< BlobRestoreActorActor, 2, Void >*,Error err) 
	{
		fdb_probe_actor_enter("blobRestoreActor", reinterpret_cast<unsigned long>(this), 2);
		a_exitChoose3();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("blobRestoreActor", reinterpret_cast<unsigned long>(this), 2);

	}
															#line 11539 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<DatabaseContext> cx;
															#line 11539 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	KeyRange range;
															#line 11539 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Optional<Version> version;
															#line 11540 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Database db;
															#line 11541 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<ReadYourWritesTransaction> tr;
															#line 11547 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Key key;
															#line 67426 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via blobRestoreActor()
															#line 11539 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class BlobRestoreActorActor final : public Actor<bool>, public ActorCallback< BlobRestoreActorActor, 0, Optional<Value> >, public ActorCallback< BlobRestoreActorActor, 1, Void >, public ActorCallback< BlobRestoreActorActor, 2, Void >, public FastAllocated<BlobRestoreActorActor>, public BlobRestoreActorActorState<BlobRestoreActorActor> {
															#line 67431 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<BlobRestoreActorActor>::operator new;
	using FastAllocated<BlobRestoreActorActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<bool>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< BlobRestoreActorActor, 0, Optional<Value> >;
friend struct ActorCallback< BlobRestoreActorActor, 1, Void >;
friend struct ActorCallback< BlobRestoreActorActor, 2, Void >;
															#line 11539 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	BlobRestoreActorActor(Reference<DatabaseContext> const& cx,KeyRange const& range,Optional<Version> const& version) 
															#line 67444 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<bool>(),
		   BlobRestoreActorActorState<BlobRestoreActorActor>(cx, range, version)
	{
		fdb_probe_actor_enter("blobRestoreActor", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("blobRestoreActor");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("blobRestoreActor", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< BlobRestoreActorActor, 0, Optional<Value> >*)0, actor_cancelled()); break;
		case 2: this->a_callback_error((ActorCallback< BlobRestoreActorActor, 1, Void >*)0, actor_cancelled()); break;
		case 3: this->a_callback_error((ActorCallback< BlobRestoreActorActor, 2, Void >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 11539 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<bool> blobRestoreActor( Reference<DatabaseContext> const& cx, KeyRange const& range, Optional<Version> const& version ) {
															#line 11539 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<bool>(new BlobRestoreActorActor(cx, range, version));
															#line 67474 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 11570 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

Future<bool> DatabaseContext::blobRestore(KeyRange range, Optional<Version> version) {
	return blobRestoreActor(Reference<DatabaseContext>::addRef(this), range, version);
}

															#line 67483 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
namespace {
// This generated class is to be used only via getHotRangeMetricsActor()
															#line 11575 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class GetHotRangeMetricsActorActor>
															#line 11575 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetHotRangeMetricsActorActorState {
															#line 67490 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 11575 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetHotRangeMetricsActorActorState(Reference<DatabaseContext> const& db,StorageServerInterface const& ssi,ReadHotSubRangeRequest const& req) 
															#line 11575 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 11575 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : db(db),
															#line 11575 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   ssi(ssi),
															#line 11575 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   req(req)
															#line 67501 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("getHotRangeMetricsActor", reinterpret_cast<unsigned long>(this));

	}
	~GetHotRangeMetricsActorActorState() 
	{
		fdb_probe_actor_destroy("getHotRangeMetricsActor", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 11578 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<ErrorOr<ReadHotSubRangeReply>> __when_expr_0 = ssi.getReadHotRanges.tryGetReply(req);
															#line 11578 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<GetHotRangeMetricsActorActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 67518 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<GetHotRangeMetricsActorActor*>(this)->actor_wait_state = 1;
															#line 11578 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< GetHotRangeMetricsActorActor, 0, ErrorOr<ReadHotSubRangeReply> >*>(static_cast<GetHotRangeMetricsActorActor*>(this)));
															#line 67523 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~GetHotRangeMetricsActorActorState();
		static_cast<GetHotRangeMetricsActorActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(ErrorOr<ReadHotSubRangeReply> const& fs,int loopDepth) 
	{
															#line 11579 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (fs.isError())
															#line 67546 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 11580 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			fmt::print("Error({}): cannot get read hot metrics from storage server {}.\n", fs.getError().what(), ssi.address().toString());
															#line 11583 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<GetHotRangeMetricsActorActor*>(this)->SAV<Standalone<VectorRef<ReadHotRangeWithMetrics>>>::futures) { (void)(Standalone<VectorRef<ReadHotRangeWithMetrics>>()); this->~GetHotRangeMetricsActorActorState(); static_cast<GetHotRangeMetricsActorActor*>(this)->destroy(); return 0; }
															#line 67552 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<GetHotRangeMetricsActorActor*>(this)->SAV< Standalone<VectorRef<ReadHotRangeWithMetrics>> >::value()) Standalone<VectorRef<ReadHotRangeWithMetrics>>(Standalone<VectorRef<ReadHotRangeWithMetrics>>());
			this->~GetHotRangeMetricsActorActorState();
			static_cast<GetHotRangeMetricsActorActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
		else
		{
															#line 11585 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<GetHotRangeMetricsActorActor*>(this)->SAV<Standalone<VectorRef<ReadHotRangeWithMetrics>>>::futures) { (void)(fs.get().readHotRanges); this->~GetHotRangeMetricsActorActorState(); static_cast<GetHotRangeMetricsActorActor*>(this)->destroy(); return 0; }
															#line 67562 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<GetHotRangeMetricsActorActor*>(this)->SAV< Standalone<VectorRef<ReadHotRangeWithMetrics>> >::value()) Standalone<VectorRef<ReadHotRangeWithMetrics>>(fs.get().readHotRanges);
			this->~GetHotRangeMetricsActorActorState();
			static_cast<GetHotRangeMetricsActorActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}

		return loopDepth;
	}
	int a_body1cont1(ErrorOr<ReadHotSubRangeReply> && fs,int loopDepth) 
	{
															#line 11579 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (fs.isError())
															#line 67575 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		{
															#line 11580 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			fmt::print("Error({}): cannot get read hot metrics from storage server {}.\n", fs.getError().what(), ssi.address().toString());
															#line 11583 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<GetHotRangeMetricsActorActor*>(this)->SAV<Standalone<VectorRef<ReadHotRangeWithMetrics>>>::futures) { (void)(Standalone<VectorRef<ReadHotRangeWithMetrics>>()); this->~GetHotRangeMetricsActorActorState(); static_cast<GetHotRangeMetricsActorActor*>(this)->destroy(); return 0; }
															#line 67581 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<GetHotRangeMetricsActorActor*>(this)->SAV< Standalone<VectorRef<ReadHotRangeWithMetrics>> >::value()) Standalone<VectorRef<ReadHotRangeWithMetrics>>(Standalone<VectorRef<ReadHotRangeWithMetrics>>());
			this->~GetHotRangeMetricsActorActorState();
			static_cast<GetHotRangeMetricsActorActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}
		else
		{
															#line 11585 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (!static_cast<GetHotRangeMetricsActorActor*>(this)->SAV<Standalone<VectorRef<ReadHotRangeWithMetrics>>>::futures) { (void)(fs.get().readHotRanges); this->~GetHotRangeMetricsActorActorState(); static_cast<GetHotRangeMetricsActorActor*>(this)->destroy(); return 0; }
															#line 67591 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			new (&static_cast<GetHotRangeMetricsActorActor*>(this)->SAV< Standalone<VectorRef<ReadHotRangeWithMetrics>> >::value()) Standalone<VectorRef<ReadHotRangeWithMetrics>>(fs.get().readHotRanges);
			this->~GetHotRangeMetricsActorActorState();
			static_cast<GetHotRangeMetricsActorActor*>(this)->finishSendAndDelPromiseRef();
			return 0;
		}

		return loopDepth;
	}
	int a_body1when1(ErrorOr<ReadHotSubRangeReply> const& fs,int loopDepth) 
	{
		loopDepth = a_body1cont1(fs, loopDepth);

		return loopDepth;
	}
	int a_body1when1(ErrorOr<ReadHotSubRangeReply> && fs,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(fs), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<GetHotRangeMetricsActorActor*>(this)->actor_wait_state > 0) static_cast<GetHotRangeMetricsActorActor*>(this)->actor_wait_state = 0;
		static_cast<GetHotRangeMetricsActorActor*>(this)->ActorCallback< GetHotRangeMetricsActorActor, 0, ErrorOr<ReadHotSubRangeReply> >::remove();

	}
	void a_callback_fire(ActorCallback< GetHotRangeMetricsActorActor, 0, ErrorOr<ReadHotSubRangeReply> >*,ErrorOr<ReadHotSubRangeReply> const& value) 
	{
		fdb_probe_actor_enter("getHotRangeMetricsActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getHotRangeMetricsActor", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< GetHotRangeMetricsActorActor, 0, ErrorOr<ReadHotSubRangeReply> >*,ErrorOr<ReadHotSubRangeReply> && value) 
	{
		fdb_probe_actor_enter("getHotRangeMetricsActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getHotRangeMetricsActor", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< GetHotRangeMetricsActorActor, 0, ErrorOr<ReadHotSubRangeReply> >*,Error err) 
	{
		fdb_probe_actor_enter("getHotRangeMetricsActor", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getHotRangeMetricsActor", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 11575 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Reference<DatabaseContext> db;
															#line 11575 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	StorageServerInterface ssi;
															#line 11575 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	ReadHotSubRangeRequest req;
															#line 67669 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via getHotRangeMetricsActor()
															#line 11575 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetHotRangeMetricsActorActor final : public Actor<Standalone<VectorRef<ReadHotRangeWithMetrics>>>, public ActorCallback< GetHotRangeMetricsActorActor, 0, ErrorOr<ReadHotSubRangeReply> >, public FastAllocated<GetHotRangeMetricsActorActor>, public GetHotRangeMetricsActorActorState<GetHotRangeMetricsActorActor> {
															#line 67674 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<GetHotRangeMetricsActorActor>::operator new;
	using FastAllocated<GetHotRangeMetricsActorActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<Standalone<VectorRef<ReadHotRangeWithMetrics>>>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< GetHotRangeMetricsActorActor, 0, ErrorOr<ReadHotSubRangeReply> >;
															#line 11575 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetHotRangeMetricsActorActor(Reference<DatabaseContext> const& db,StorageServerInterface const& ssi,ReadHotSubRangeRequest const& req) 
															#line 67685 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<Standalone<VectorRef<ReadHotRangeWithMetrics>>>(),
		   GetHotRangeMetricsActorActorState<GetHotRangeMetricsActorActor>(db, ssi, req)
	{
		fdb_probe_actor_enter("getHotRangeMetricsActor", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("getHotRangeMetricsActor");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("getHotRangeMetricsActor", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< GetHotRangeMetricsActorActor, 0, ErrorOr<ReadHotSubRangeReply> >*)0, actor_cancelled()); break;
		}

	}
};
}
															#line 11575 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] static Future<Standalone<VectorRef<ReadHotRangeWithMetrics>>> getHotRangeMetricsActor( Reference<DatabaseContext> const& db, StorageServerInterface const& ssi, ReadHotSubRangeRequest const& req ) {
															#line 11575 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<Standalone<VectorRef<ReadHotRangeWithMetrics>>>(new GetHotRangeMetricsActorActor(db, ssi, req));
															#line 67713 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 11588 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

Future<Standalone<VectorRef<ReadHotRangeWithMetrics>>> DatabaseContext::getHotRangeMetrics(
    StorageServerInterface ssi,
    const KeyRange& keys,
    ReadHotSubRangeRequest::SplitType type,
    int splitCount) {

	return getHotRangeMetricsActor(
	    Reference<DatabaseContext>::addRef(this), ssi, ReadHotSubRangeRequest(keys, type, splitCount));
}

int64_t getMaxKeySize(KeyRef const& key) {
	return getMaxWriteKeySize(key, true);
}

int64_t getMaxReadKeySize(KeyRef const& key) {
	return getMaxKeySize(key);
}

int64_t getMaxWriteKeySize(KeyRef const& key, bool hasRawAccess) {
	int64_t tenantSize = hasRawAccess ? TenantAPI::PREFIX_SIZE : 0;
	return key.startsWith(systemKeys.begin) ? CLIENT_KNOBS->SYSTEM_KEY_SIZE_LIMIT
	                                        : CLIENT_KNOBS->KEY_SIZE_LIMIT + tenantSize;
}

int64_t getMaxClearKeySize(KeyRef const& key) {
	return getMaxKeySize(key);
}

namespace NativeAPI {

															#line 67748 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
// This generated class is to be used only via getServerListAndProcessClasses()
															#line 11619 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
template <class GetServerListAndProcessClassesActor>
															#line 11619 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetServerListAndProcessClassesActorState {
															#line 67754 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
															#line 11619 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetServerListAndProcessClassesActorState(Transaction* const& tr) 
															#line 11619 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
															#line 11619 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		 : tr(tr),
															#line 11621 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   workers(getWorkers(tr)),
															#line 11622 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		   serverList(tr->getRange(serverListKeys, CLIENT_KNOBS->TOO_MANY))
															#line 67765 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
	{
		fdb_probe_actor_create("getServerListAndProcessClasses", reinterpret_cast<unsigned long>(this));

	}
	~GetServerListAndProcessClassesActorState() 
	{
		fdb_probe_actor_destroy("getServerListAndProcessClasses", reinterpret_cast<unsigned long>(this));

	}
	int a_body1(int loopDepth=0) 
	{
		try {
															#line 11623 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			StrictFuture<Void> __when_expr_0 = success(workers) && success(serverList);
															#line 11623 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			if (static_cast<GetServerListAndProcessClassesActor*>(this)->actor_wait_state < 0) return a_body1Catch1(actor_cancelled(), loopDepth);
															#line 67782 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			if (__when_expr_0.isReady()) { if (__when_expr_0.isError()) return a_body1Catch1(__when_expr_0.getError(), loopDepth); else return a_body1when1(__when_expr_0.get(), loopDepth); };
			static_cast<GetServerListAndProcessClassesActor*>(this)->actor_wait_state = 1;
															#line 11623 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			__when_expr_0.addCallbackAndClear(static_cast<ActorCallback< GetServerListAndProcessClassesActor, 0, Void >*>(static_cast<GetServerListAndProcessClassesActor*>(this)));
															#line 67787 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
			loopDepth = 0;
		}
		catch (Error& error) {
			loopDepth = a_body1Catch1(error, loopDepth);
		} catch (...) {
			loopDepth = a_body1Catch1(unknown_error(), loopDepth);
		}

		return loopDepth;
	}
	int a_body1Catch1(Error error,int loopDepth=0) 
	{
		this->~GetServerListAndProcessClassesActorState();
		static_cast<GetServerListAndProcessClassesActor*>(this)->sendErrorAndDelPromiseRef(error);
		loopDepth = 0;

		return loopDepth;
	}
	int a_body1cont1(Void const& _,int loopDepth) 
	{
															#line 11624 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(!serverList.get().more && serverList.get().size() < CLIENT_KNOBS->TOO_MANY);
															#line 11626 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		std::map<Optional<Standalone<StringRef>>, ProcessData> id_data;
															#line 11627 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for(int i = 0;i < workers.get().size();i++) {
															#line 11628 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			id_data[workers.get()[i].locality.processId()] = workers.get()[i];
															#line 67816 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 11630 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		std::vector<std::pair<StorageServerInterface, ProcessClass>> results;
															#line 11631 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for(int i = 0;i < serverList.get().size();i++) {
															#line 11632 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			auto ssi = decodeServerListValue(serverList.get()[i].value);
															#line 11633 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			results.emplace_back(ssi, id_data[ssi.locality.processId()].processClass);
															#line 67826 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 11636 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<GetServerListAndProcessClassesActor*>(this)->SAV<std::vector<std::pair<StorageServerInterface, ProcessClass>>>::futures) { (void)(results); this->~GetServerListAndProcessClassesActorState(); static_cast<GetServerListAndProcessClassesActor*>(this)->destroy(); return 0; }
															#line 67830 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<GetServerListAndProcessClassesActor*>(this)->SAV< std::vector<std::pair<StorageServerInterface, ProcessClass>> >::value()) std::vector<std::pair<StorageServerInterface, ProcessClass>>(results);
		this->~GetServerListAndProcessClassesActorState();
		static_cast<GetServerListAndProcessClassesActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1cont1(Void && _,int loopDepth) 
	{
															#line 11624 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		ASSERT(!serverList.get().more && serverList.get().size() < CLIENT_KNOBS->TOO_MANY);
															#line 11626 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		std::map<Optional<Standalone<StringRef>>, ProcessData> id_data;
															#line 11627 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for(int i = 0;i < workers.get().size();i++) {
															#line 11628 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			id_data[workers.get()[i].locality.processId()] = workers.get()[i];
															#line 67848 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 11630 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		std::vector<std::pair<StorageServerInterface, ProcessClass>> results;
															#line 11631 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		for(int i = 0;i < serverList.get().size();i++) {
															#line 11632 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			auto ssi = decodeServerListValue(serverList.get()[i].value);
															#line 11633 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
			results.emplace_back(ssi, id_data[ssi.locality.processId()].processClass);
															#line 67858 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		}
															#line 11636 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
		if (!static_cast<GetServerListAndProcessClassesActor*>(this)->SAV<std::vector<std::pair<StorageServerInterface, ProcessClass>>>::futures) { (void)(results); this->~GetServerListAndProcessClassesActorState(); static_cast<GetServerListAndProcessClassesActor*>(this)->destroy(); return 0; }
															#line 67862 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		new (&static_cast<GetServerListAndProcessClassesActor*>(this)->SAV< std::vector<std::pair<StorageServerInterface, ProcessClass>> >::value()) std::vector<std::pair<StorageServerInterface, ProcessClass>>(results);
		this->~GetServerListAndProcessClassesActorState();
		static_cast<GetServerListAndProcessClassesActor*>(this)->finishSendAndDelPromiseRef();
		return 0;

		return loopDepth;
	}
	int a_body1when1(Void const& _,int loopDepth) 
	{
		loopDepth = a_body1cont1(_, loopDepth);

		return loopDepth;
	}
	int a_body1when1(Void && _,int loopDepth) 
	{
		loopDepth = a_body1cont1(std::move(_), loopDepth);

		return loopDepth;
	}
	void a_exitChoose1() 
	{
		if (static_cast<GetServerListAndProcessClassesActor*>(this)->actor_wait_state > 0) static_cast<GetServerListAndProcessClassesActor*>(this)->actor_wait_state = 0;
		static_cast<GetServerListAndProcessClassesActor*>(this)->ActorCallback< GetServerListAndProcessClassesActor, 0, Void >::remove();

	}
	void a_callback_fire(ActorCallback< GetServerListAndProcessClassesActor, 0, Void >*,Void const& value) 
	{
		fdb_probe_actor_enter("getServerListAndProcessClasses", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(value, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getServerListAndProcessClasses", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_fire(ActorCallback< GetServerListAndProcessClassesActor, 0, Void >*,Void && value) 
	{
		fdb_probe_actor_enter("getServerListAndProcessClasses", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1when1(std::move(value), 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getServerListAndProcessClasses", reinterpret_cast<unsigned long>(this), 0);

	}
	void a_callback_error(ActorCallback< GetServerListAndProcessClassesActor, 0, Void >*,Error err) 
	{
		fdb_probe_actor_enter("getServerListAndProcessClasses", reinterpret_cast<unsigned long>(this), 0);
		a_exitChoose1();
		try {
			a_body1Catch1(err, 0);
		}
		catch (Error& error) {
			a_body1Catch1(error, 0);
		} catch (...) {
			a_body1Catch1(unknown_error(), 0);
		}
		fdb_probe_actor_exit("getServerListAndProcessClasses", reinterpret_cast<unsigned long>(this), 0);

	}
															#line 11619 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Transaction* tr;
															#line 11621 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Future<std::vector<ProcessData>> workers;
															#line 11622 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	Future<RangeResult> serverList;
															#line 67939 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
};
// This generated class is to be used only via getServerListAndProcessClasses()
															#line 11619 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
class GetServerListAndProcessClassesActor final : public Actor<std::vector<std::pair<StorageServerInterface, ProcessClass>>>, public ActorCallback< GetServerListAndProcessClassesActor, 0, Void >, public FastAllocated<GetServerListAndProcessClassesActor>, public GetServerListAndProcessClassesActorState<GetServerListAndProcessClassesActor> {
															#line 67944 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
public:
	using FastAllocated<GetServerListAndProcessClassesActor>::operator new;
	using FastAllocated<GetServerListAndProcessClassesActor>::operator delete;
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdelete-non-virtual-dtor"
	void destroy() override { ((Actor<std::vector<std::pair<StorageServerInterface, ProcessClass>>>*)this)->~Actor(); operator delete(this); }
#pragma clang diagnostic pop
friend struct ActorCallback< GetServerListAndProcessClassesActor, 0, Void >;
															#line 11619 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	GetServerListAndProcessClassesActor(Transaction* const& tr) 
															#line 67955 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
		 : Actor<std::vector<std::pair<StorageServerInterface, ProcessClass>>>(),
		   GetServerListAndProcessClassesActorState<GetServerListAndProcessClassesActor>(tr)
	{
		fdb_probe_actor_enter("getServerListAndProcessClasses", reinterpret_cast<unsigned long>(this), -1);
		#ifdef ENABLE_SAMPLING
		this->lineage.setActorName("getServerListAndProcessClasses");
		LineageScope _(&this->lineage);
		#endif
		this->a_body1();
		fdb_probe_actor_exit("getServerListAndProcessClasses", reinterpret_cast<unsigned long>(this), -1);

	}
	void cancel() override
	{
		auto wait_state = this->actor_wait_state;
		this->actor_wait_state = -1;
		switch (wait_state) {
		case 1: this->a_callback_error((ActorCallback< GetServerListAndProcessClassesActor, 0, Void >*)0, actor_cancelled()); break;
		}

	}
};
															#line 11619 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
[[nodiscard]] Future<std::vector<std::pair<StorageServerInterface, ProcessClass>>> getServerListAndProcessClasses( Transaction* const& tr ) {
															#line 11619 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"
	return Future<std::vector<std::pair<StorageServerInterface, ProcessClass>>>(new GetServerListAndProcessClassesActor(tr));
															#line 67982 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.g.cpp"
}

#line 11638 "/home/ccat3z/Documents/moqi/foundationdb-client/src/fdbclient/NativeAPI.actor.cpp"

} // namespace NativeAPI
